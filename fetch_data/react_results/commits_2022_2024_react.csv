SHA,Message,Author,Date
05cebffe16494367f38396a40a56db5866de96ab,"[prettier][eslint] Support sapling in prettier changed files command

Summary: The listChangesFiles module didn't work under sapling; this fixes

ghstack-source-id: 9f685de5e7550075369723b845104ac0e676ce95
Pull Request resolved: https://github.com/facebook/react/pull/30149",Mike Vitousek,2024-06-30T21:22:22Z
2e72ea8401df491c1c6aa7af80419af8e21d8cc6,"[Flight] Make byteLengthOfChunk Optional (#30130)

We use this to encode the binary length of a large string without
escaping it. This is really kind of optional though. This lets a Server
that can't encode strings but just pass them along able to emit RSC -
albeit a less optimal format.

The only build we have that does that today is react-html but the FB
version of Flight had a similar constraint.

It's still possible to support binary data as long as
byteLengthOfBinaryChunk is implemented which doesn't require a text
encoder. Many streams (including Node streams) support binary OR string
chunks.",Sebastian Markbåge,2024-06-28T17:42:17Z
58af67a8f8761e56b5d02486a304c96edc547760,"Only build react-html in experimental channel (#30129)

Even though the whole package is private right now. Once we publish it,
it'll likely be just the experimental channel first before upgrading to
stable.

This means it gets excluded from the built packages.",Sebastian Markbåge,2024-06-28T14:19:20Z
0d1fdb5c2ebdbde03c8f6b5dcb4058dc715ffb0a,"Add doctype to renderToMarkup when html tags are rendered (#30122)

Stacked on top of #30121.

This is the same thing we do for `renderToReadableStream` so that you
don't have to manually inject it into the stream.

The only reason we didn't for `renderToString` / `renderToStaticMarkup`
was to preserve legacy behavior but since this is a new API we can
change that.

If you're rendering a partial it doesn't matter. This is likely what
you'd do for RSS feeds. The question is if you can reliably rely on the
doctype being used while rendering e-mails since many clients are so
quirky. However, if you're careful it also doesn't hurt so it seems best
to include it.",Sebastian Markbåge,2024-06-28T13:35:12Z
1e241f9d6c5f7d0e875b19a99c83cd6197fa62f7,"Add renderToMarkup for Client Components (#30121)

Follow up to #30105.

This supports `renderToMarkup` in a non-RSC environment (not the
`react-server` condition).

This is just a Fizz renderer but it errors at runtime when you use
state, effects or event handlers that would require hydration - like the
RSC version would. (Except RSC can give early errors too.)

To do this I have to move the `react-html` builds to a new `markup`
dimension out of the `dom-legacy` dimension so that we can configure
this differently from `renderToString`/`renderToStaticMarkup`.
Eventually that dimension can go away though if deprecated. That also
helps us avoid dynamic configuration and we can just compile in the
right configuration so the split helps anyway.

One consideration is that if a compiler strips out useEffects or inlines
initial state from useState, then it would not get called an the error
wouldn't happen. Therefore to preserve semantics, a compiler would need
to inject some call that can check the current renderer and whether it
should throw.

There is an argument that it could be useful to not error for these
because it's possible to write components that works with SSR but are
just optionally hydrated. However, there's also an argument that doing
that silently is too easy to lead to mistakes and it's better to error -
especially for the e-mail use case where you can't take it back but you
can replay a queue that had failures. There are other ways to
conditionally branch components intentionally. Besides if you want it to
be silent you can still use renderToString (or better yet
renderToReadableStream).

The primary mechanism is the RSC environment and the client-environment
is really the secondary one that's only there to support legacy
environments. So this also ensures parity with the primary environment.",Sebastian Markbåge,2024-06-28T13:25:10Z
b3aface19a17d78d190dd2883f6e4f9f719181d0,[fix] replace polyfill.io with cloudflare equivalent (#30123),Sharath,2024-06-28T08:26:28Z
e02baf6c92833a0d45a77fb2e741676f393c24f7,"Warn for invalid type in renderer with the correct RSC stack (#30102)

This is all behind the `enableOwnerStacks` flag.

This is a follow up to #29088. In that I moved type validation into the
renderer since that's the one that knows what types are allowed.
However, I only removed it from `React.createElement` and not the JSX
which was an oversight.

However, I also noticed that for invalid types we don't have the right
stack trace for throws because we're not yet inside the JSX element that
itself is invalid. We should use its stack for the stack trace. That's
the reason it's enough to just use the throw now because we can get a
good stack trace from the owner stack. This is fixed by creating a fake
Throw Fiber that gets assigned the right stack.

Additionally, I noticed that for certain invalid types like the most
common one `undefined` we error in Flight so a missing import in RSC
leads to a generic error. Instead of erroring on the Flight side we
should just let anything that's not a Server Component through to the
client and then let the Client renderer determine whether it's a valid
type or not. Since we now have owner stacks through the server too, this
will still be able to provide a good stack trace on the client that
points to the server in that case.

<img width=""571"" alt=""Screenshot 2024-06-25 at 6 46 35 PM""
src=""https://github.com/facebook/react/assets/63648/6812c24f-e274-4e09-b4de-21deda9ea1d4"">

To get the best stack you have to expand the little icon and the regular
stack is noisy [due to this Chrome
bug](https://issues.chromium.org/issues/345248263) which makes it a
little harder to find but once that's fixed it might be easier.",Sebastian Markbåge,2024-06-27T16:10:09Z
ffec9ec5b5c846f61d7b40e92f138e2a7b34f273,"Add new package with renderToMarkup export (#30105)

Name of the package is tbd (straw: `react-html`). It's a new package
separate from `react-dom` though and can be used as a standalone package
- e.g. also from a React Native app.

```js
import {renderToMarkup} from '...';
const html = await renderToMarkup(<Component />);
```

The idea is that this is a helper for rendering HTML that is not
intended to be hydrated. It's primarily intended to support a subset of
HTML that can be used as embedding and not served as HTML documents from
HTTP. For example as e-mails or in RSS/Atom feeds or other
distributions. It's a successor to `renderToStaticMarkup`.

A few differences:

- This doesn't support ""Client Components"". It can only use the Server
Components subset. No useEffect, no useState etc. since it will never be
hydrated. Use of those are errors.
- You also can't pass Client References so you can't use components
marked with `""use client""`.
- Unlike `renderToStaticMarkup` this does support async so you can
suspend and use data from these components.
- Unlike `renderToReadableStream` this does not support streaming or
Suspense boundaries and any error rejects the promise. Since there's no
feasible way to ""client render"" or patch up the document.
- Form Actions are not supported since in an embedded environment
there's no place to post back to across versions. You can render plain
forms with fixed URLs though.
- You can't use any resource preloading like `preload()` from
`react-dom`.

## Implementation

This first version in this PR only supports Server Components since
that's the thing that doesn't have an existing API. Might add a Client
Components version later that errors.

We don't want to maintain a completely separate implementation for this
use case so this uses the `dom-legacy` build dimension to wire up a
build that encapsulates a Flight Server -> Flight Client -> Fizz stream
to render Server Components that then get SSR:ed.

There's no problem to use a Flight Client in a Server Component
environment since it's already supported for Server-to-Server. Both of
these use a bundler config that just errors for Client References though
since we don't need any bundling integration and this is just a
standalone package.

Running Fizz in a Server Component environment is a problem though
because it depends on ""react"" and it needs the client version.
Therefore, for this build we embed the client version of ""react"" shared
internals into the build. It doesn't need anything to be able to use
those APIs since you can't call the client APIs anyway.

One unfortunate thing though is that since Flight currently needs to go
to binary and back, we need TextEncoder/TextDecoder to be available but
this shouldn't really be necessary. Also since we use the legacy stream
config, large strings that use byteLengthOfChunk errors atm. This needs
to be fixed before shipping. I'm not sure what would be the best
layering though that isn't unnecessarily burdensome to maintain. Maybe
some kind of pass-through protocol that would also be useful in general
- e.g. when Fizz and Flight are in the same process.

---------

Co-authored-by: Sebastian Silbermann <silbermann.sebastian@gmail.com>",Sebastian Markbåge,2024-06-27T16:09:40Z
3bee073c01ee7af48c4ad19d98837cabaace67dc,"Remove isPrimaryRenderer from Flight Server Config (#30115)

This was used for Context but since ReactFlightNewContext is gone now
this is no longer used.",Sebastian Markbåge,2024-06-27T16:08:56Z
f5a22fa27d54d8a5eb898416436be4ca87850d4d,"Bump ws from 7.2.1 to 7.5.10 (#29919)

Bumps [ws](https://github.com/websockets/ws) from 7.2.1 to 7.5.10.
<details>
<summary>Release notes</summary>
<p><em>Sourced from <a
href=""https://github.com/websockets/ws/releases"">ws's
releases</a>.</em></p>
<blockquote>
<h2>7.5.10</h2>
<h1>Bug fixes</h1>
<ul>
<li>Backported e55e5106 to the 7.x release line (22c28763).</li>
</ul>
<h2>7.5.9</h2>
<h1>Bug fixes</h1>
<ul>
<li>Backported bc8bd34e to the 7.x release line (0435e6e1).</li>
</ul>
<h2>7.5.8</h2>
<h1>Bug fixes</h1>
<ul>
<li>Backported 0fdcc0af to the 7.x release line (2758ed35).</li>
<li>Backported d68ba9e1 to the 7.x release line (dc1781bc).</li>
</ul>
<h2>7.5.7</h2>
<h1>Bug fixes</h1>
<ul>
<li>Backported 6946f5fe to the 7.x release line (1f72e2e1).</li>
</ul>
<h2>7.5.6</h2>
<h1>Bug fixes</h1>
<ul>
<li>Backported b8186dd1 to the 7.x release line (73dec34b).</li>
<li>Backported ed2b8039 to the 7.x release line (22a26afb).</li>
</ul>
<h2>7.5.5</h2>
<h1>Bug fixes</h1>
<ul>
<li>Backported ec9377ca to the 7.x release line (0e274acd).</li>
</ul>
<h2>7.5.4</h2>
<h1>Bug fixes</h1>
<ul>
<li>Backported 6a72da3e to the 7.x release line (76087fbf).</li>
<li>Backported 869c9892 to the 7.x release line (27997933).</li>
</ul>
<h2>7.5.3</h2>
<h1>Bug fixes</h1>
<ul>
<li>The <code>WebSocketServer</code> constructor now throws an error if
more than one of the
<code>noServer</code>, <code>server</code>, and <code>port</code>
options are specefied (66e58d27).</li>
<li>Fixed a bug where a <code>'close'</code> event was emitted by a
<code>WebSocketServer</code> before
the internal HTTP/S server was actually closed (5a587304).</li>
<li>Fixed a bug that allowed WebSocket connections to be established
after
<code>WebSocketServer.prototype.close()</code> was called
(772236a1).</li>
</ul>
<h2>7.5.2</h2>
<h1>Bug fixes</h1>
<!-- raw HTML omitted -->
</blockquote>
<p>... (truncated)</p>
</details>
<details>
<summary>Commits</summary>
<ul>
<li><a
href=""https://github.com/websockets/ws/commit/d962d70649e393841ee1ed726a8f7ffbe90d0c06""><code>d962d70</code></a>
[dist] 7.5.10</li>
<li><a
href=""https://github.com/websockets/ws/commit/22c28763234aa75a7e1b76f5c01c181260d7917f""><code>22c2876</code></a>
[security] Fix crash when the Upgrade header cannot be read (<a
href=""https://redirect.github.com/websockets/ws/issues/2231"">#2231</a>)</li>
<li><a
href=""https://github.com/websockets/ws/commit/8a78f8770618cc5a1ade485a7445cb6d6f46e2f2""><code>8a78f87</code></a>
[dist] 7.5.9</li>
<li><a
href=""https://github.com/websockets/ws/commit/0435e6e12b8d38992cf0651cb8605dde2294bd25""><code>0435e6e</code></a>
[security] Fix same host check for ws+unix: redirects</li>
<li><a
href=""https://github.com/websockets/ws/commit/4271f07cfc95cf7e1936388fb69e22a3731fa260""><code>4271f07</code></a>
[dist] 7.5.8</li>
<li><a
href=""https://github.com/websockets/ws/commit/dc1781bc319cb347878d11cf730947d0bef69a51""><code>dc1781b</code></a>
[security] Drop sensitive headers when following insecure redirects</li>
<li><a
href=""https://github.com/websockets/ws/commit/2758ed355073105a60b8b836b25265b8cdcb3b42""><code>2758ed3</code></a>
[fix] Abort the handshake if the Upgrade header is invalid</li>
<li><a
href=""https://github.com/websockets/ws/commit/a370613fab74b82990582fa7728e130c5e87ee4c""><code>a370613</code></a>
[dist] 7.5.7</li>
<li><a
href=""https://github.com/websockets/ws/commit/1f72e2e14f4fbb20265c228a43bb64ab915d8046""><code>1f72e2e</code></a>
[security] Drop sensitive headers when following redirects (<a
href=""https://redirect.github.com/websockets/ws/issues/2013"">#2013</a>)</li>
<li><a
href=""https://github.com/websockets/ws/commit/8ecd890800dfbe210298438ab9bb8dbe328f3e0b""><code>8ecd890</code></a>
[dist] 7.5.6</li>
<li>Additional commits viewable in <a
href=""https://github.com/websockets/ws/compare/7.2.1...7.5.10"">compare
view</a></li>
</ul>
</details>
<br />


[![Dependabot compatibility
score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=ws&package-manager=npm_and_yarn&previous-version=7.2.1&new-version=7.5.10)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)

Dependabot will resolve any conflicts with this PR as long as you don't
alter it yourself. You can also trigger a rebase manually by commenting
`@dependabot rebase`.

[//]: # (dependabot-automerge-start)
[//]: # (dependabot-automerge-end)

---

<details>
<summary>Dependabot commands and options</summary>
<br />

You can trigger Dependabot actions by commenting on this PR:
- `@dependabot rebase` will rebase this PR
- `@dependabot recreate` will recreate this PR, overwriting any edits
that have been made to it
- `@dependabot merge` will merge this PR after your CI passes on it
- `@dependabot squash and merge` will squash and merge this PR after
your CI passes on it
- `@dependabot cancel merge` will cancel a previously requested merge
and block automerging
- `@dependabot reopen` will reopen this PR if it is closed
- `@dependabot close` will close this PR and stop Dependabot recreating
it. You can achieve the same result by closing it manually
- `@dependabot show <dependency name> ignore conditions` will show all
of the ignore conditions of the specified dependency
- `@dependabot ignore this major version` will close this PR and stop
Dependabot creating any more for this major version (unless you reopen
the PR or upgrade to it yourself)
- `@dependabot ignore this minor version` will close this PR and stop
Dependabot creating any more for this minor version (unless you reopen
the PR or upgrade to it yourself)
- `@dependabot ignore this dependency` will close this PR and stop
Dependabot creating any more for this dependency (unless you reopen the
PR or upgrade to it yourself)
You can disable automated security fix PRs for this repo from the
[Security Alerts
page](https://github.com/facebook/react/network/alerts).

</details>

Signed-off-by: dependabot[bot] <support@github.com>
Co-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>",dependabot[bot],2024-06-27T14:07:09Z
fcfbfc1d1e3e350e1ea3fbc4a2418f647dc28a31,"[compiler] Always error on async reassignments

Summary: Addresses the issue in #30109: any mutation of a local in an async function may occur after rendering has finished.

ghstack-source-id: 9f15cf0f144c0badd6009ceb51df43a50399d82b
Pull Request resolved: https://github.com/facebook/react/pull/30111",Mike Vitousek,2024-06-27T00:07:40Z
1f59d07042466fa958d74062592cc31890e88661,"[compiler] Repro for nested function local reassignment issue

Summary: Additional repro demonstrating a case that still exists after #30106

ghstack-source-id: f03176fd88b29098d0263f86c1a7126e214997e5
Pull Request resolved: https://github.com/facebook/react/pull/30110",Mike Vitousek,2024-06-27T00:07:38Z
00775d94dc32c5136787e3ca60065b9a5e2df9b8,"[compiler] Add todo fixtures for local reassignment in an async callback

ghstack-source-id: eca878f62a2149af76a72b59acd1820d0df86f30
Pull Request resolved: https://github.com/facebook/react/pull/30109",Joe Savona,2024-06-26T23:06:16Z
4c9a2d2ddf1bc8205a426b14d8a37804b5beb57a,"[compiler] Validate against locals being reassigned after render

Adds a pass which validates that local variables are not reassigned by functions which may be called after render. This is a straightforward forward data-flow analysis, where we:
1. Build up a mapping of context variables in the outer component/hook
2. Find ObjectMethod/FunctionExpressions which may reassign those context variables
3. Propagate aliases of those functions via StoreLocal/LoadLocal
4. Disallow passing those functions with a Freeze effect. This includes JSX arguments, hook arguments, hook return types, etc.

Conceptually, a function that reassigns a local is inherently mutable. Frozen functions must be side-effect free, so these two categories are incompatible and we can use the freeze effect to find all instances of where such functions are disallowed rather than special-casing eg hook calls and JSX.

ghstack-source-id: c2b22e3d62a1ab490a6a2150e28b934b9dc8676b
Pull Request resolved: https://github.com/facebook/react/pull/30107",Joe Savona,2024-06-26T23:02:09Z
b1d10c8a45629fe70c82c85167b01830e115b9d4,"[compiler] Examples of invalid code reassigning locals outside of render

ghstack-source-id: c48d0d0b86e47e2449982263c88cc2cfd44e326b
Pull Request resolved: https://github.com/facebook/react/pull/30106",Joe Savona,2024-06-26T22:09:06Z
8416ebee38b1712611d8987ba64ce8fd87c3a540,Update ReactFabric-test.internal to concurrent root (#30103),Jan Kassens,2024-06-26T20:04:38Z
609d0cc3c8d484cd16378f4ba0e2e9eedbf48358,"Add new error message for awaiting the client export (#29853)

<!--
  Thanks for submitting a pull request!
We appreciate you spending the time to work on these changes. Please
provide enough information so that others can review your pull request.
The three fields below are mandatory.

Before submitting a pull request, please make sure the following is
done:

1. Fork [the repository](https://github.com/facebook/react) and create
your branch from `main`.
  2. Run `yarn` in the repository root.
3. If you've fixed a bug or added code that should be tested, add tests!
4. Ensure the test suite passes (`yarn test`). Tip: `yarn test --watch
TestName` is helpful in development.
5. Run `yarn test --prod` to test in the production environment. It
supports the same options as `yarn test`.
6. If you need a debugger, run `yarn test --debug --watch TestName`,
open `chrome://inspect`, and press ""Inspect"".
7. Format your code with
[prettier](https://github.com/prettier/prettier) (`yarn prettier`).
8. Make sure your code lints (`yarn lint`). Tip: `yarn linc` to only
check changed files.
  9. Run the [Flow](https://flowtype.org/) type checks (`yarn flow`).
  10. If you haven't already, complete the CLA.

Learn more about contributing:
https://reactjs.org/docs/how-to-contribute.html
-->

## Summary

`Cannot access .then on server` is not an ideal message when you try to
await or do promise chain to the properties of client reference. The
below example will let `.then` get accessed by native code while
handling the promise chain but the access is not clearly visible in user
code.

```
import('./client-module').then((mod) => mod.Component)
```

This PR chnage the error message of module reference proxy '.then'
property to show more kinds of usage, then it can be pretty clearly for
helping users to avoid the bad usage

<!--
Explain the **motivation** for making this change. What existing problem
does the pull request solve?
-->

## How did you test this change?

Unit test

<!--
Demonstrate the code is solid. Example: The exact commands you ran and
their output, screenshots / videos if the pull request changes the user
interface.
How exactly did you verify that your PR solves the issue you wanted to
solve?
  If you leave this empty, your PR will very likely be closed.
-->",Jiachi Liu,2024-06-26T17:47:39Z
349a99a7a347f280ce40e9297cac5a3bd796901e,"Badge Environment Name on Thrown Errors from the Server (#29846)

When we replay logs we badge them with e.g. `[Server]`. That way it's
easy to identify that the source of the log actually happened on the
Server (RSC). However, when we threw an error we didn't have any such
thing. The error was rethrown on the client and then handled just like
any other client error.

This transfers the `environmentName` in DEV to our restored Error
""sub-class"" (conceptually) along with `digest`. That way you can read
`error.environmentName` to print this in your own UI.

I also updated our default for `onCaughtError` (and `onError` in Fizz)
to use the `printToConsole` helper that the Flight Client uses to log it
with the badge format. So by default you get the same experience as
console.error for caught errors:

<img width=""810"" alt=""Screenshot 2024-06-10 at 9 25 12 PM""
src=""https://github.com/facebook/react/assets/63648/8490fedc-09f6-4286-9332-fbe6b0faa2d3"">

<img width=""815"" alt=""Screenshot 2024-06-10 at 9 39 30 PM""
src=""https://github.com/facebook/react/assets/63648/bdcfc554-504a-4b1d-82bf-b717e74975ac"">

Unfortunately I can't do the same thing for `onUncaughtError` nor
`onRecoverableError` because they use `reportError` which doesn't have
custom formatting (unless we also prevented default on window.onerror).
However maybe that's ok because 1) you should always have an error
boundary 2) it's not likely that an RSC error can actually recover
because it's not going to be rendered again so shouldn't really happen
outside some parent conditionally rendering maybe.

The other problem with this approach is that the default is no longer
trivial - so reimplementing the default in user space is trickier and
ideally we shouldn't expose our default to be called.",Sebastian Markbåge,2024-06-26T17:27:26Z
7045700a6db5edaf8427310de09ce0f113e781dc,"Run ReactFabric-test.internal.js in xplat variant (#30101)

The explicit mock override in this test was causing it to always run as
native-oss instead of also as xplat. This moves the test to use `//
@gate persistent` instead to run it in all persistent configs.",Jan Kassens,2024-06-26T16:51:46Z
ef0f44ecffc560011f4e7d2f610176231ecc8bb2,Enable `enableDeferRootSchedulingToMicrotask` and `enableInfiniteRenderLoopDetection` for React Native (Meta) (#30090),Timothy Yung,2024-06-26T15:50:06Z
7baae65e767726e44a23c13203c05ae0d540e26f,"compiler: fix the `hookKind` for `useInsertionEffect` (#30069)

Currently, the `hookKind` for `useInsertionEffect` is set to
`useLayoutEffect`. This pull request fixes it by adding a new `hookKind`
for `useInsertionEffect`.",Sol Lee,2024-06-26T13:59:03Z
bbc8851c84fc6b6793340de89713bf142b8c05e6,"Bump ws from 8.13.0 to 8.17.1 in /compiler (#30043)

Bumps [ws](https://github.com/websockets/ws) from 8.13.0 to 8.17.1.
<details>
<summary>Release notes</summary>
<p><em>Sourced from <a
href=""https://github.com/websockets/ws/releases"">ws's
releases</a>.</em></p>
<blockquote>
<h2>8.17.1</h2>
<h1>Bug fixes</h1>
<ul>
<li>Fixed a DoS vulnerability (<a
href=""https://redirect.github.com/websockets/ws/issues/2231"">#2231</a>).</li>
</ul>
<p>A request with a number of headers exceeding
the[<code>server.maxHeadersCount</code>][]
threshold could be used to crash a ws server.</p>
<pre lang=""js""><code>const http = require('http');
const WebSocket = require('ws');
<p>const wss = new WebSocket.Server({ port: 0 }, function () {
const chars =
&quot;!#$%&amp;'*+-.0123456789abcdefghijklmnopqrstuvwxyz^_`|~&quot;.split('');
const headers = {};
let count = 0;</p>
<p>for (let i = 0; i &lt; chars.length; i++) {
if (count === 2000) break;</p>
<pre><code>for (let j = 0; j &amp;lt; chars.length; j++) {
  const key = chars[i] + chars[j];
  headers[key] = 'x';

  if (++count === 2000) break;
}
</code></pre>
<p>}</p>
<p>headers.Connection = 'Upgrade';
headers.Upgrade = 'websocket';
headers['Sec-WebSocket-Key'] = 'dGhlIHNhbXBsZSBub25jZQ==';
headers['Sec-WebSocket-Version'] = '13';</p>
<p>const request = http.request({
headers: headers,
host: '127.0.0.1',
port: wss.address().port
});</p>
<p>request.end();
});
</code></pre></p>
<p>The vulnerability was reported by <a
href=""https://github.com/rrlapointe"">Ryan LaPointe</a> in <a
href=""https://redirect.github.com/websockets/ws/issues/2230"">websockets/ws#2230</a>.</p>
<p>In vulnerable versions of ws, the issue can be mitigated in the
following ways:</p>
<ol>
<li>Reduce the maximum allowed length of the request headers using the
[<code>--max-http-header-size=size</code>][] and/or the
[<code>maxHeaderSize</code>][] options so
that no more headers than the <code>server.maxHeadersCount</code> limit
can be sent.</li>
</ol>
<!-- raw HTML omitted -->
</blockquote>
<p>... (truncated)</p>
</details>
<details>
<summary>Commits</summary>
<ul>
<li><a
href=""https://github.com/websockets/ws/commit/3c56601092872f7d7566989f0e379271afd0e4a1""><code>3c56601</code></a>
[dist] 8.17.1</li>
<li><a
href=""https://github.com/websockets/ws/commit/e55e5106f10fcbaac37cfa89759e4cc0d073a52c""><code>e55e510</code></a>
[security] Fix crash when the Upgrade header cannot be read (<a
href=""https://redirect.github.com/websockets/ws/issues/2231"">#2231</a>)</li>
<li><a
href=""https://github.com/websockets/ws/commit/6a00029edd924499f892aed8003cef1fa724cfe5""><code>6a00029</code></a>
[test] Increase code coverage</li>
<li><a
href=""https://github.com/websockets/ws/commit/ddfe4a804d79e7788ab136290e609f91cf68423f""><code>ddfe4a8</code></a>
[perf] Reduce the amount of <code>crypto.randomFillSync()</code>
calls</li>
<li><a
href=""https://github.com/websockets/ws/commit/b73b11828d166e9692a9bffe9c01a7e93bab04a8""><code>b73b118</code></a>
[dist] 8.17.0</li>
<li><a
href=""https://github.com/websockets/ws/commit/29694a5905fa703e86667928e6bacac397469471""><code>29694a5</code></a>
[test] Use the <code>highWaterMark</code> variable</li>
<li><a
href=""https://github.com/websockets/ws/commit/934c9d6b938b93c045cb13e5f7c19c27a8dd925a""><code>934c9d6</code></a>
[ci] Test on node 22</li>
<li><a
href=""https://github.com/websockets/ws/commit/1817bac06e1204bfb578b8b3f4bafd0fa09623d0""><code>1817bac</code></a>
[ci] Do not test on node 21</li>
<li><a
href=""https://github.com/websockets/ws/commit/96c9b3deddf56cacb2d756aaa918071e03cdbc42""><code>96c9b3d</code></a>
[major] Flip the default value of <code>allowSynchronousEvents</code>
(<a
href=""https://redirect.github.com/websockets/ws/issues/2221"">#2221</a>)</li>
<li><a
href=""https://github.com/websockets/ws/commit/e5f32c7e1e6d3d19cd4a1fdec84890e154db30c1""><code>e5f32c7</code></a>
[fix] Emit at most one event per event loop iteration (<a
href=""https://redirect.github.com/websockets/ws/issues/2218"">#2218</a>)</li>
<li>Additional commits viewable in <a
href=""https://github.com/websockets/ws/compare/8.13.0...8.17.1"">compare
view</a></li>
</ul>
</details>
<br />


[![Dependabot compatibility
score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=ws&package-manager=npm_and_yarn&previous-version=8.13.0&new-version=8.17.1)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)

Dependabot will resolve any conflicts with this PR as long as you don't
alter it yourself. You can also trigger a rebase manually by commenting
`@dependabot rebase`.

[//]: # (dependabot-automerge-start)
[//]: # (dependabot-automerge-end)

---

<details>
<summary>Dependabot commands and options</summary>
<br />

You can trigger Dependabot actions by commenting on this PR:
- `@dependabot rebase` will rebase this PR
- `@dependabot recreate` will recreate this PR, overwriting any edits
that have been made to it
- `@dependabot merge` will merge this PR after your CI passes on it
- `@dependabot squash and merge` will squash and merge this PR after
your CI passes on it
- `@dependabot cancel merge` will cancel a previously requested merge
and block automerging
- `@dependabot reopen` will reopen this PR if it is closed
- `@dependabot close` will close this PR and stop Dependabot recreating
it. You can achieve the same result by closing it manually
- `@dependabot show <dependency name> ignore conditions` will show all
of the ignore conditions of the specified dependency
- `@dependabot ignore this major version` will close this PR and stop
Dependabot creating any more for this major version (unless you reopen
the PR or upgrade to it yourself)
- `@dependabot ignore this minor version` will close this PR and stop
Dependabot creating any more for this minor version (unless you reopen
the PR or upgrade to it yourself)
- `@dependabot ignore this dependency` will close this PR and stop
Dependabot creating any more for this dependency (unless you reopen the
PR or upgrade to it yourself)
You can disable automated security fix PRs for this repo from the
[Security Alerts
page](https://github.com/facebook/react/network/alerts).

</details>

Signed-off-by: dependabot[bot] <support@github.com>
Co-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>",dependabot[bot],2024-06-26T13:56:13Z
a8b465c6e0576b9ac490c2e2762c273db314dfcf,"fix[react-devtools]: restore original args when recording errors (#30091)

## Summary

When DevTools frontend and backend are connected, we patch console in 2
places:
- `patch()`, when renderer is attached to:
  - listen to any errors / warnings emitted
  - append component stack if requested by the user
- `patchForStrictMode()`, when React notifies about that the next
invocation is about to happed during StrictMode

`patchForStrictMode()` will always be at the top of the patch stack,
because it is called at runtime when React notifies React DevTools,
because of this, `patch()` may receive already modified arguments (with
stylings for dimming), we should attempt to restore the original
arguments

## How did you test this change?

Look at yellow warnings on the element view:
| Before | After |
| --- | --- |
| ![Screenshot 2024-06-25 at 14 38
26](https://github.com/facebook/react/assets/28902667/6b0ec512-f0c9-4557-a524-d7f31b03464d)
| ![Screenshot 2024-06-25 at 17 26
23](https://github.com/facebook/react/assets/28902667/60ff5d80-06ea-4447-bbe8-b57bc0c63f6d)
|",Ruslan Lesiutin,2024-06-26T13:17:09Z
d878489431e2c6cf69982b51403f8e1f68f4e73d,"[compiler][ez] PrintHIR prints optional flag for debugging

Adding the equivalent of [PrintReactiveFunction:OptionalExpression](https://github.com/facebook/react/blob/f5d2feb4f069a36140d5e605f5eebc52badcc214/compiler/packages/babel-plugin-react-compiler/src/ReactiveScopes/PrintReactiveFunction.ts#L218) to `PrintHIR`.

ghstack-source-id: 5b175f6f62f72a867a00c52c4f825fd396d450a9
Pull Request resolved: https://github.com/facebook/react/pull/30078",Mofei Zhang,2024-06-25T20:06:21Z
4bfab0783204810cb51b9dda24464bb57777eb97,"[compiler][patch] Patch O(n^2) traversal in validatePreserveMemo

Double checked by syncing internally and verifying the # of `visitInstruction` calls with unique `InstructionId`s.

This is a bit of an awkward pattern though. A cleaner alternative might be to override `visitValue` and store its results in a sidemap (instead of returning)

ghstack-source-id: f6797d765224fb49c7d26cd377319662830d7348
Pull Request resolved: https://github.com/facebook/react/pull/30077",Mofei Zhang,2024-06-25T20:06:21Z
7d9861e70642719b120a5236ade5124912e42a92,"[compiler][hir] Correctly remove non-existent terminal preds when pruning labels

Missed this initially in `pruneUnusedLabelsHIR`. It wasn't an active bug as `preds` wasn't referenced by later passes, until #30079

ghstack-source-id: 3e151b74c31554299e870f001c0ac3f72706318c
Pull Request resolved: https://github.com/facebook/react/pull/30076",Mofei Zhang,2024-06-25T20:06:21Z
9262761f1c25bfe52a4585419fad16dd01a07424,"[compiler][ez] Add more Array.prototype methods

Adds Array.prototype methods that return primitives or other arrays -- naive type inference can be really helpful in reducing mutable ranges -> achieving higher quality memoization.
Also copies Array.prototype methods to our mixed read-only JSON-like object shape.

(Inspired after going through some suboptimal internal compilation outputs.)

ghstack-source-id: 0bfad11180992fc5db61a1c5f23954f48acf07b8
Pull Request resolved: https://github.com/facebook/react/pull/30075",Mofei Zhang,2024-06-25T20:03:58Z
9c2c7c670cfc51a63a9e1353c55d1d3beecb29d1,"[compiler][ez] Patch Array.concat object shape to capture callee

ghstack-source-id: 503fbf8f76e1cd10095b44cf180863221710774f
Pull Request resolved: https://github.com/facebook/react/pull/30074",Mofei Zhang,2024-06-25T20:03:58Z
86d1a6f54aebb2854aab0033bb57865add9f440d,"[compiler][rewrite] Patch logic for aligning scopes to non-value blocks

Our previous logic for aligning scopes to block scopes constructs a tree of block and scope nodes. We ensured that blocks always mapped to the same node as their fallthroughs. e.g.
```js
// source
a();
if (...) {
  b();
}
c();

// HIR
bb0:
a()
if test=... consequent=bb1 fallthrough=bb2

bb1:
b()
goto bb2

bb2:
c()

// AlignReactiveScopesToBlockScopesHIR nodes
Root node (maps to both bb0 and bb2)
  |- bb1
  |- ...
```

There are two issues with the existing implementation:
1. Only scopes that overlap with the beginning of a block are aligned correctly. This is because the traversal does not store information about the block-fallthrough pair for scopes that begin *within* the block-fallthrough range.
```
\# This case gets handled correctly
         ┌──────────────┐
         │              │
         block start    block end

scope start     scope end
│               │
└───────────────┘

\# But not this one!
┌──────────────┐
│              │
block start    block end

          scope start     scope end
          │               │
          └───────────────┘
```
2. Only scopes that are directly used by a block is considered. See the `align-scopes-nested-block-structure` fixture for details.

ghstack-source-id: 327dec5019483666f81c8156ac0c666ccad511b3
Pull Request resolved: https://github.com/facebook/react/pull/29891",Mofei Zhang,2024-06-25T20:03:58Z
4d11e1e88d6be1c244cb8ae76c377eaf195167ec,"[compiler][fixtures] test repros: codegen, alignScope, phis

ghstack-source-id: 04b1526c8567f8b7b59d198f022d10cf837e4c5b
Pull Request resolved: https://github.com/facebook/react/pull/29878

The AlignReactiveScope bug should be simplest to fix, but it's also caught by an invariant assertion. I think a fix could be either keeping track of ""active"" block-fallthrough pairs (`retainWhere(pair => pair.range.end > current.instr[0].id)`) or following the approach in `assertValidBlockNesting`.
I'm tempted to pull the value-block aligning logic out into its own pass (using the current `node` tree traversal), then align to non-value blocks with the `assertValidBlockNesting` approach. Happy to hear feedback on this though!

The other two are likely bigger issues, as they're not caught by static invariants.

Update:
- removed bug-phi-reference-effect as it's been patched by @josephsavona
- added bug-array-concat-should-capture",Mofei Zhang,2024-06-25T20:03:57Z
133ada72549b9aa01a0bc3df2b1c9bb341e861fd,"Read constructor name more carefully (#29954)

## Summary

Sometimes `constructor` happens to be the name of an unrelated property,
or we may be dealing with a `Proxy` that intercepts every read. Verify
the constructor is a function before using its name, and reset the name
anyway if it turns out not to be serializable.

Fixes some cases of the devtools crashing and becoming inoperable upon
attempting to inspect components whose props are Hookstate `State`s.

## How did you test this change?

Installed a patched version of the extension and confirmed that it
solves the problem.

---------

Co-authored-by: Ruslan Lesiutin <rdlesyutin@gmail.com>",LoganDark,2024-06-25T18:30:28Z
708d8f8c495e2456b91de96f3d20248693ee9ce7,"[ez] Remove outdated files

These are no longer in use

ghstack-source-id: 075e4fd0ab6140d49857a2086700b1ca9569b626
Pull Request resolved: https://github.com/facebook/react/pull/30092",Lauren Tan,2024-06-25T17:57:58Z
f6b546737ec58ae3a5ed591e3ed9bae73581e1dd,Bump version to 0.0.0-experimental-b130d5f-20240625,Lauren Tan,2024-06-25T16:42:06Z
bdb355f349852e529a7fde06ab12418913ac4ef3,Bump version to 0.0.0-experimental-0998c1e-20240625,Lauren Tan,2024-06-25T16:42:06Z
d17f024681ba9f1ebed65969b34cbee815c6d771,Bump version to 0.0.0-experimental-696af53-20240625,Lauren Tan,2024-06-25T16:42:06Z
8971381549a80d476b07639833e6b38eaaa75a40,"[compiler] Enable sourceMaps in tsconfig (#30064)

With this, we can set a `debugger` breakpoint and we'll break into the
source code when running tests with snap. Without this, we'd break into
the transpiled js code.",Sathya Gunasekaran,2024-06-25T16:01:43Z
f5d2feb4f069a36140d5e605f5eebc52badcc214,"[compiler] Fix assignment within for update expression

When converting value blocks from HIR to ReactiveFunction, we have to drop StoreLocal assignments that represent the assignment of the phi, since ReactiveFunction supports compound expressions. These StoreLocals are only present to represent the conditional assignment of the value itself - but it's also possible for the expression to have contained an assignment expression. Before, in trying to strip the first category of StoreLocal we also accidentally stripped the second category. Now we check that the assignment is for a temporary, and don't strip otherwise.

ghstack-source-id: e7759c963bbc1bbff2d3230534b049199e3262ad
Pull Request resolved: https://github.com/facebook/react/pull/30067",Joe Savona,2024-06-24T17:11:14Z
89580f209ce68ae9e266e309dfeb1625b434fb58,"Set renameElementSymbol to dynamic value (#30066)

Prepare to roll this out with dynamic flag

`yarn flags --diff www canary`

<img width=""514"" alt=""Screenshot 2024-06-24 at 11 33 55 AM""
src=""https://github.com/facebook/react/assets/8965173/31508fdc-4cb1-4ce0-8e22-c02a034377b0"">",Jack Pope,2024-06-24T16:28:39Z
c21bcd627b6a8f31548edfc149dd3b879fea6558,"Clean up enableUnifiedSyncLane flag (#30062)

`enableUnifiedSyncLane` now passes everywhere. Let's clean it up

Implemented with https://github.com/facebook/react/pull/27646

Flag enabled with https://github.com/facebook/react/pull/27646,
https://github.com/facebook/react/pull/28269,
https://github.com/facebook/react/pull/29052",Jack Pope,2024-06-24T15:18:22Z
7608516479fb85bc40aa73d8a31a0c93397ee6ff,"refactor[react-devtools/extensions]: dont debounce cleanup logic on navigation (#30027)

## Summary
There is a race condition in the way we poll if React is on the page and
when we actually clear this polling instance. When user navigates to a
different page, we will debounce a callback for 500ms, which will:
1. Cleanup previous React polling instance
2. Start a new React polling instance

Since the cleanup logic is debounced, there is a small chance that by
the time we are going to clean up this polling instance, it will be
`eval`-ed on the page, that is using React. For example, when user is
navigating from the page which doesn't have React running, to a page
that has React running.

Next, we incorrectly will try to mount React DevTools panels twice,
which will result into conflicts in the Store, and the error will be
shown to the user

## How did you test this change?
Since this is a race condition, it is hard to reproduce consistently,
but you can try this flow:
1. Open a page that is using React, open browser DevTools and React
DevTools components panel
2. Open a page that is NOT using React, like google.com, wait ~5 seconds
until you see `""Looks like this page doesn't have React, or it hasn't
been loaded yet""` message in RDT panel
3. Open a page that is using React, observe the error `""Uncaught Error:
Cannot add node ""1"" because a node with that id is already in the
Store.""`

Couldn't been able to reproduce this with these changes.",Ruslan Lesiutin,2024-06-24T12:28:17Z
27e9476f0aae99adc67b10ee2b78e8ee7dc61421,"[ci] Cleanup

- Made each workflow's name consistent
- Rename each workflow file with consistent naming scheme
- Promote flow-ci-ghaction to flow-ci

ghstack-source-id: 490b643dcdbb5f6d853815064a1287109a17d259
Pull Request resolved: https://github.com/facebook/react/pull/30037",Lauren Tan,2024-06-22T16:33:39Z
0bff0e437792e94a3757c4afd0ca1ca9d6cedba6,"[ci] Remove circleci check_generated_fizz_runtime job

This was migrated to GitHub actions

ghstack-source-id: 3b307a31101e83f4abefe8be063cfeade57bc53c
Pull Request resolved: https://github.com/facebook/react/pull/30036",Lauren Tan,2024-06-22T16:33:38Z
a7c5c07ed4f63348d8809fe5183819721856aa8f,"[ci] Add new fizz GitHub action

Copies the existing circleci workflow for checking the inlined Fizz
runtime into GitHub actions. I didn't remove the circleci job for now
just to check for parity.

ghstack-source-id: 09480b1a20fbdd374a6075e6ec02a07b6a516c56
Pull Request resolved: https://github.com/facebook/react/pull/30035",Lauren Tan,2024-06-22T16:33:38Z
917585d037af5476df9271c24721eb5e992929c0,"[ci] Remove circleci yarn_test job

This was migrated to GitHub actions

ghstack-source-id: adf9b2bdc7b2a59e658176b2202fe65e84bcb4af
Pull Request resolved: https://github.com/facebook/react/pull/30034",Lauren Tan,2024-06-22T16:33:38Z
85215413cbfd5f28a4448b0d649b9198458e00e8,"[ci] Improve parallelism of yarn test

This PR adds parallelism similar to our existing circleci setup for
running yarn tests with the various test params. It does this by
sharding tests into `$SHARD_COUNT` number of groups, then spawning a job
for each of them and using jest's built in `--shard` option.

Effectively this means that the job will spawn an additional (where `n`
is the number of test params)

`n * $SHARD_COUNT` number of jobs to run tests in parallel

for a total of `n + (n * $SHARD_COUNT)` jobs. This does mean the
GitHub UI at the bottom of each PR gets longer and unfortunately it's
not sorted in any way as far as I can tell. But if something goes wrong
it should still be easy to find out what the problem is.

The PR also changes the `ci` argument for jest-cli to be an enum instead
so the tests use all available workers in GitHub actions. This will have
to live around for a bit until we can fully migrate off of circleci.

ghstack-source-id: 08f2d16353aeca7cd15655d5ce2b7963a12507a7
Pull Request resolved: https://github.com/facebook/react/pull/30033",Lauren Tan,2024-06-22T16:33:37Z
28c1336c9105c134cba04ed937efcbe391b5979b,"[ci] Add new yarn test GitHub action

Copies the existing circleci workflow for yarn test into GitHub
actions. I didn't remove the circleci job for now just to check for
parity.

Opted to keep the same hardcoded list of params rather than use GitHub's
matrix permutations since this was intentional in the circleci config.

ghstack-source-id: b77a091254f402364c0b9de871889683fa3ee7c8
Pull Request resolved: https://github.com/facebook/react/pull/30032",Lauren Tan,2024-06-22T16:33:37Z
454fb35065053d5572689af1a7c125a41849604a,"[compiler] add fixture for optimization across scopes

Adds a fixture based on internal case where our current output is quite a bit more verbose than the original memoization. See the comment in the fixture for more about the heuristic we can apply.

ghstack-source-id: e637a3814077559a1a56724eafe2567efed0b8d7
Pull Request resolved: https://github.com/facebook/react/pull/29998",Joe Savona,2024-06-21T23:48:00Z
2caaa05c08c345f1edddc952cef3fa53c177d612,"[compiler] Optimize instruction reordering

Note: due to a bad rebase i included #29883 here. Both were stamped so i'm not gonna bother splitting it back up aain.

This PR includes two changes:
* First, allow `LoadLocal` to be reordered if a) the load occurs after the last write to a variable and b) the LoadLocal lvalue is used exactly once
* Uses a more optimal reordering for statement blocks, while keeping the existing approach for expression blocks.

In #29863 I tried to find a clean way to share code for emitting instructions between value blocks and regular blocks. The catch is that value blocks have special meaning for their final instruction — that's the value of the block — so reordering can't change the last instruction. However, in finding a clean way to share code for these two categories of code, i also inadvertently reduced the effectiveness of the optimization.

This PR updates to use different strategies for these two kinds of blocks: value blocks use the code from #29863 where we first emit all non-reorderable instructions in their original order, then try to emit reorderable values. The reason this is suboptimal, though, is that we want to move instructions closer to their dependencies so that they can invalidate (merge) together. Emitting the reorderable values last prevents this.

So for normal blocks, we now emit terminal operands first. This will invariably cause some of the non-reorderable instructions to be emitted, but it will intersperse reoderable instructions in between, right after their dependencies. This maximizes our ability to merge scopes.

I think the complexity cost of two strategies is worth the benefit, as evidenced by the reduced memo slots in the fixtures.

ghstack-source-id: ad3e516fa474235ced8c5d56f4541d2a7c413608
Pull Request resolved: https://github.com/facebook/react/pull/29882",Joe Savona,2024-06-21T23:48:00Z
6aea169480286ef9c037c6efefaacecac0e5d7c0,"[ci] Remove circleci yarn_flags job

This was migrated to GitHub actions

ghstack-source-id: 744671f311629f848efaf8e906cfd16305bc3d79
Pull Request resolved: https://github.com/facebook/react/pull/30030",Lauren Tan,2024-06-21T18:57:58Z
2f34bf427f1dfd6c9971c6c6882ec966a10828a3,"[ci] Add new flags GitHub action

Copies the existing circleci workflow for yarn flags into GitHub
actions. I didn't remove the circleci job for now just to check for
parity.

ghstack-source-id: 003f2a479697f7a948cf9e2420dd6954d8b1e175
Pull Request resolved: https://github.com/facebook/react/pull/30029",Lauren Tan,2024-06-21T18:57:58Z
57279287711cab628916ea7242055f89190aa47e,"[ci] Remove circleci yarn_flow job

This was migrated to GitHub actions

ghstack-source-id: e1cd659e343abe21d8d4f43f19aa518b3b992400
Pull Request resolved: https://github.com/facebook/react/pull/30028",Lauren Tan,2024-06-21T16:19:04Z
419ace93ecf4a1d941d5b29ad2664f64c467d6d8,"[ci] Parallelize flow github action

The existing flow-ci script makes some assumptions about running inside
of circleci for parallelization. This PR forks the script with very smal
ll tweaks to allow for a short name to be passed in as an argument.
These short names are discovered in a new GH job and then each one is
passed as an argument for parallelization

ghstack-source-id: dc85486388f74088c22b386b77b45996ef753f1a
Pull Request resolved: https://github.com/facebook/react/pull/30026",Lauren Tan,2024-06-21T16:19:03Z
0477799cfb3685c42cd6ce5ec4e171c8bcf2acfd,"[ci] Add new flow GitHub action

Copies the existing circleci workflow for flow into GitHub actions. I
didn't remove the circleci job for now just to check for parity.

ghstack-source-id: 59104902e48a2b520ea2971d99c061c74b03a1a0
Pull Request resolved: https://github.com/facebook/react/pull/30025",Lauren Tan,2024-06-21T16:19:03Z
b565373afd0cc1988497e1107106e851e8cfb261,"lint: enable reportUnusedDisableDirectives and remove unused suppressions (#28721)

This enables linting against unused suppressions and removes the ones
that were unused.",Jan Kassens,2024-06-21T16:24:32Z
3563387fe3427924304cdb1a45e73f2b564c51e1,"[ci] Remove circleci yarn_lint job

This was migrated to GitHub actions

ghstack-source-id: bf284ae2113cfffb71d53d6b1a9edf6e58cde0ab
Pull Request resolved: https://github.com/facebook/react/pull/30024",Lauren Tan,2024-06-21T15:41:28Z
f598eb4dc9d40d5983e825b374ce4cd34096db25,"[ci] Add new lint GitHub action

Copies the existing circleci workflow for linting into GitHub actions. I
didn't remove the circleci for now just to check for parity.

ghstack-source-id: a3754dcc3bdf1b3fa7b8ca73b1554ef9fc9265b1
Pull Request resolved: https://github.com/facebook/react/pull/30023",Lauren Tan,2024-06-21T15:41:27Z
3776e98f9030cc1d1269827dbfc1a5f68b16101c,"[prettier] Run prettier

ghstack-source-id: 80f1247d5d1daf1422b1ba8e87cf8ad18e8a8c70
Pull Request resolved: https://github.com/facebook/react/pull/30022",Lauren Tan,2024-06-21T15:41:26Z
49c37048deceb8dcbf88258d73cfc2e17053370e,"[prettier] Combine compiler and runtime configs

Merges the existing config to the root one so we can have a single
configuration file. I've tried to keep the compiler config as much as
possible in this PR so that no formatting changes occur.

ghstack-source-id: 8bbfc9f269c4b2d740803937a4f2401d44cce9e4
Pull Request resolved: https://github.com/facebook/react/pull/30021",Lauren Tan,2024-06-21T15:41:25Z
49a48875860e652f2d7c097faf256440676f4d18,"[compiler:codegen] Wrap non-ascii characters in JsxExpressionContainer

This PR extends the previous logic added in #29141 to also account for
other kinds of non-ascii characters such as `\n`. Because these control
characters are individual special characters (and not 2 characters `\`
and `n`) we match based on unicode which was already being checked for
non-Latin characters.

This allows control characters to continue to be compiled equivalently
to its original source if it was provided in a JsxExpressionContainer.
However note that this PR does not convert JSX attributes that are
StringLiterals to JsxExpressionContainer, to preserve the original
source code as it was written.

Alternatively we could always emit a JsxExpressionContainer if it was
used in the source and not try to down level it to some other node
kind. But since we already do this I opted to keep this behavior.

Partially addresses #29648.

ghstack-source-id: ecc61c9f0bece90d18623b3c570fea05fbcd811a
Pull Request resolved: https://github.com/facebook/react/pull/29997",Lauren Tan,2024-06-20T23:09:51Z
0b724e9e9c6469983f73631edb2e6abcc9c1193b,"www: remove dynamic scheduler feature flag: enableProfiling (#29996)

I removed the wrong feature flag in #29995, this is the correct one to
match D58682445.",Jan Kassens,2024-06-21T13:51:46Z
6fb39ec9e9b9aa0242d981c1b89473f02c6f945b,"Plumbing of isomorphic code (#29967)

Need to tighten up this a bit.

react-dom isomorphic currently depends on react-reconciler which is
mostly DCE but it's pulled in which makes it hard to make other bundling
changes.

ReactFlightServer can have a hard dependency on the module that imports
its internals since even if other internals are aliased it still always
needs the server one.",Sebastian Markbåge,2024-06-21T10:39:10Z
0f568418d2c9cd3d5f32eeb40d7305211bd17ccd,"Re-enable prettier for compiler/

Now that the compiler directory has its own prettier config, we can
remove the prettierignore entry for compiler/ so it still runs in your
editor if you open the root directory

ghstack-source-id: 5e3bd597cf2f11a9931f084eb909ffd81ebdca81
Pull Request resolved: https://github.com/facebook/react/pull/29993",Lauren Tan,2024-06-20T22:26:50Z
6ab67c35f15bd0ebf93af8d48d4d0545e9bb9551,"Revert ""www: remove dynamic feature flag enableSchedulingProfiler"" (#29995)

Reverts facebook/react#29994",Jan Kassens,2024-06-20T21:17:25Z
babe5a2f1be70f67a456c4a96db9163f4ea60503,www: remove dynamic feature flag enableSchedulingProfiler (#29994),Jan Kassens,2024-06-20T20:47:28Z
395e2fc6a0f6b90b4b7b1319a4029def73118518,"[chore] Fix TypeError in shouldSkipBundle During yarn build-for-devtools-dev and yarn build-for-devtools-prod  Commands (#29906)

## Summary

Fix bundle type filtering logic to correctly handle array input in
argv.type and use some with includes for accurate filtering. This
addresses a TypeError encountered during yarn build-for-devtools-prod
and yarn build-for-devtools-dev commands.

## Motivation

The current implementation of the `shouldSkipBundle` function in
`scripts/rollup/build.js` has two issues:

1. **Incorrect array handling in
`parseRequestedNames`([#29613](https://github.com/facebook/react/issues/29613)):**
    
The function incorrectly wraps the `argv.type` value in an additional
array when it's already an array. This leads to a `TypeError:
names[i].split is not a function` when `parseRequestedNames` attempts to
split the nested array, as seen in this error message:
    
    ```
C:\Users\Administrator\Documents\새 폴더\react\scripts\rollup\build.js:76
        let splitNames = names[i].split(',');
                            ^
    TypeError: names[i].split is not a function
    ```
This PR fixes this by correctly handling both string and array inputs in
`argv.type`:
    
    ```diff
    - const requestedBundleTypes = argv.type
    -   ? parseRequestedNames([argv.type], 'uppercase')
+ const argvType = Array.isArray(argv.type) ? argv.type : [argv.type];
    + const requestedBundleTypes = argv.type
    +   ? parseRequestedNames(argvType, 'uppercase')
    ```
    
2. **Inaccurate filtering logic in
`shouldSkipBundle`([#29614](https://github.com/facebook/react/issues/29614)):**
    
The function uses `Array.prototype.every` with `indexOf` to check if
**all** requested bundle types are missing in the current bundle type.
However, when multiple bundle types are requested (e.g., `['NODE',
'NODE_DEV']`), the function should skip a bundle only if **none** of the
requested types are present. The current implementation incorrectly
allows bundles that match any of the requested types.
    
    To illustrate, consider the following example output:
    
    ```
    requestedBundleTypes [ 'NODE', 'NODE_DEV' ]
    bundleType NODE_DEV
    isAskingForDifferentType false

    requestedBundleTypes [ 'NODE', 'NODE_DEV' ]
    bundleType NODE_PROD
    isAskingForDifferentType false  // Incorrect behavior
    ```
    
In this case, even though the bundle type is `NODE_PROD` and doesn't
include `NODE_DEV`, the bundle is not skipped due to the incorrect
logic.
    
This PR fixes this by replacing `every` with `some` and using `includes`
for a more accurate check:
    
    ```diff
    - const isAskingForDifferentType = requestedBundleTypes.every(
    -   requestedType => bundleType.indexOf(requestedType) === -1
    - );
    + const isAskingForDifferentType = requestedBundleTypes.some(
    +   requestedType => !bundleType.includes(requestedType)
    + );
    ```
    
This ensures that the bundle is skipped only if **none** of the
requested types are found in the `bundleType`.

This PR addresses both of these issues to ensure correct bundle type
filtering in various build scenarios.


## How did you test this change?

1. **Verification of `requestedBundleTypes` usage in
`shouldSkipBundle`:**

   * I manually tested the following scenarios:
* `yarn build`: Verified that `requestedBundleTypes` remains an empty
array, as expected.
* `yarn build-for-devtools`: Confirmed that `requestedBundleTypes` is
correctly set to `['NODE']`, as in the original implementation.
* `yarn build-for-devtools-dev`: This previously failed due to the
error. After the fix, I confirmed that `requestedBundleTypes` is now
correctly passed as `['NODE', 'NODE_DEV']`.

2. **Debugging of filtering logic in `shouldSkipBundle`:**

* I added the following logging statements to the `shouldSkipBundle`
function to observe its behavior during the build process:

     ```javascript
     console.log('requestedBundleTypes', requestedBundleTypes);
     console.log('bundleType', bundleType);
     console.log('isAskingForDifferentType', isAskingForDifferentType);
     ```

* By analyzing the log output, I confirmed that the filtering logic now
correctly identifies when a bundle should be skipped based on the
requested types. This allowed me to verify that the fix enables building
specific target bundles as intended.",nakjun,2024-06-20T20:12:41Z
a5554190c1c44aa6ecef0cef46cd109e21b5c0bf,"fix[compiler playground]: Set source as the pre-change state in HIR diff (#29957)

<!--
  Thanks for submitting a pull request!
We appreciate you spending the time to work on these changes. Please
provide enough information so that others can review your pull request.
The three fields below are mandatory.

Before submitting a pull request, please make sure the following is
done:

1. Fork [the repository](https://github.com/facebook/react) and create
your branch from `main`.
  2. Run `yarn` in the repository root.
3. If you've fixed a bug or added code that should be tested, add tests!
4. Ensure the test suite passes (`yarn test`). Tip: `yarn test --watch
TestName` is helpful in development.
5. Run `yarn test --prod` to test in the production environment. It
supports the same options as `yarn test`.
6. If you need a debugger, run `yarn test --debug --watch TestName`,
open `chrome://inspect`, and press ""Inspect"".
7. Format your code with
[prettier](https://github.com/prettier/prettier) (`yarn prettier`).
8. Make sure your code lints (`yarn lint`). Tip: `yarn linc` to only
check changed files.
  9. Run the [Flow](https://flowtype.org/) type checks (`yarn flow`).
  10. If you haven't already, complete the CLA.

Learn more about contributing:
https://reactjs.org/docs/how-to-contribute.html
-->

## Summary

<!--
Explain the **motivation** for making this change. What existing problem
does the pull request solve?
-->

I have fixed an issue where the display of the HIR diff in the React
Compiler Playground was incorrect. The HIR diff is supposed to show the
pre-change state as the source, but currently, it is showing
EnvironmentConfig as the pre-change state. This PR corrects this by
setting the pre-change state to source instead of EnvironmentConfig.

## How did you test this change?

<!--
Demonstrate the code is solid. Example: The exact commands you ran and
their output, screenshots / videos if the pull request changes the user
interface.
How exactly did you verify that your PR solves the issue you wanted to
solve?
  If you leave this empty, your PR will very likely be closed.
-->

before:


![image](https://github.com/facebook/react/assets/37236438/c98aee7a-b569-430e-8698-0f7eff6c21e2)

after:


![image](https://github.com/facebook/react/assets/37236438/6113297c-80f9-4e71-a0d1-df8cc87507db)",NISHIZAWA Shuntaro,2024-06-20T16:01:35Z
b15c8492ca227abff2b1c921dd06e54d421fc415,"fix[react-devtools/extensions]: propagate globals from env (#29963)

Somehow missed this while working on
https://github.com/facebook/react/pull/29869.

With these changes, manual inspection of the
`react_devtools_backend_compact.js` doesn't have any occurences of
`__IS_FIREFOX__` flag.",Ruslan Lesiutin,2024-06-20T08:29:05Z
6b4646cbd0fd20a7c37f5dfcb0f12193259a6289,"Export captureOwnerStacks() only in DEV ""react"" builds (#29923)

Only with the enableOwnerStacks flag (which is not on in www).

This is a new DEV-only API to be able to implement what we do for
console.error in user space.

This API does not actually include the current stack that you'd get from
`new Error().stack`. That you'd have to add yourself.

This adds the ability to have conditional development exports because we
plan on eventually having separate ESM builds that use the ""development""
or ""production"" export conditions.

NOTE: This removes the export of `act` from `react` in prod (as opposed
to a function that throws) - inline with what we do with other
conditional exports.",Sebastian Markbåge,2024-06-19T18:19:48Z
e684ca66abf785548b05f2185579cd12b50b2910,"refactor[react-devtools/tests]: use registered marks instead of cleared in tests (#29929)

## Summary
This is the pre-requisite for
https://github.com/facebook/react/pull/29231.

Current implementation of profiling hooks is only using
`performance.mark` and then makes `performance.clearMarks` call right
after it to free the memory. We've been relying on this assumption in
the tests that every mark is cleared by the time we check something.

https://github.com/facebook/react/pull/29231 adds `performance.measure`
calls and the `start` mark is not cleared until the corresponding `stop`
one is registered, and then they are cleared together.

## How did you test this change?
To test against React from source:
```
yarn test --build --project=devtools -r=experimental --ci
```

To test against React 18:
```
./scripts/circleci/download_devtools_regression_build.js 18.0 --replaceBuild
node ./scripts/jest/jest-cli.js --build --project devtools --release-channel=experimental --reactVersion 18.0 --ci
```",Ruslan Lesiutin,2024-06-19T14:45:01Z
83d538e0d04aac2a32d335e6b3963273729a9fe6,"[compiler] Treat ref-like named objects as refs (#29916)

If a component uses the `useRef` hook directly then we type it's return
value as a ref. But if it's wrapped in a custom hook then we lose out on
this type information as the compiler doesn't look at the hook
definition. This has resulted in some false positives in our analysis
like the ones reported in #29160 and #29196.

This PR will treat objects named as `ref` or if their names end with the
substring `Ref`, and contain a property named `current`, as React refs.

```
const ref = useMyRef();
const myRef = useMyRef2();
useEffect(() => {
  ref.current = ...;
  myRef.current = ...;
})
```
In the above example, `ref` and `myRef` will be treated as React refs.",Sathya Gunasekaran,2024-06-18T17:02:19Z
1434af3d228e216366bd4b7dd324c6408087b3df,"React DevTools 5.2.0 -> 5.3.0 (#29918)

Full list of changes:

* chore[react-devtools]: improve console arguments formatting before
passing it to original console ([hoxyq](https://github.com/hoxyq) in
[#29873](https://github.com/facebook/react/pull/29873))
* chore[react-devtools]: unify console patching and default to ansi
escape symbols ([hoxyq](https://github.com/hoxyq) in
[#29869](https://github.com/facebook/react/pull/29869))
* chore[react-devtools/backend]: remove
consoleManagedByDevToolsDuringStrictMode
([hoxyq](https://github.com/hoxyq) in
[#29856](https://github.com/facebook/react/pull/29856))
* chore[react-devtools/extensions]: make source maps url relative
([hoxyq](https://github.com/hoxyq) in
[#29886](https://github.com/facebook/react/pull/29886))
* fix[react-devtools] divided inspecting elements between inspecting do…
([vzaidman](https://github.com/vzaidman) in
[#29885](https://github.com/facebook/react/pull/29885))
* [Fiber] Create virtual Fiber when an error occurs during reconcilation
([sebmarkbage](https://github.com/sebmarkbage) in
[#29804](https://github.com/facebook/react/pull/29804))
* fix[react-devtools] component badge in light mode is now not invisible
([vzaidman](https://github.com/vzaidman) in
[#29852](https://github.com/facebook/react/pull/29852))
* Remove Warning: prefix and toString on console Arguments
([sebmarkbage](https://github.com/sebmarkbage) in
[#29839](https://github.com/facebook/react/pull/29839))
* Add jest lint rules ([rickhanlonii](https://github.com/rickhanlonii)
in [#29760](https://github.com/facebook/react/pull/29760))
* [Fiber] Track the Real Fiber for Key Warnings
([sebmarkbage](https://github.com/sebmarkbage) in
[#29791](https://github.com/facebook/react/pull/29791))
* fix[react-devtools/store-test]: fork the test to represent current be…
([hoxyq](https://github.com/hoxyq) in
[#29777](https://github.com/facebook/react/pull/29777))
* Default native inspections config false
([vzaidman](https://github.com/vzaidman) in
[#29784](https://github.com/facebook/react/pull/29784))
* fix[react-devtools] remove native inspection button when it can't be
used ([vzaidman](https://github.com/vzaidman) in
[#29779](https://github.com/facebook/react/pull/29779))
* chore[react-devtools]: ip => internal-ip
([hoxyq](https://github.com/hoxyq) in
[#29772](https://github.com/facebook/react/pull/29772))
* Fix #29724: `ip` dependency update for CVE-2024-29415
([Rekl0w](https://github.com/Rekl0w) in
[#29725](https://github.com/facebook/react/pull/29725))
* cleanup[react-devtools]: remove unused supportsProfiling flag from
store config ([hoxyq](https://github.com/hoxyq) in
[#29193](https://github.com/facebook/react/pull/29193))
* [Fiber] Enable Native console.createTask Stacks When Available
([sebmarkbage](https://github.com/sebmarkbage) in
[#29223](https://github.com/facebook/react/pull/29223))
* Move createElement/JSX Warnings into the Renderer
([sebmarkbage](https://github.com/sebmarkbage) in
[#29088](https://github.com/facebook/react/pull/29088))
* Set the current fiber to the source of the error during error
reporting ([sebmarkbage](https://github.com/sebmarkbage) in
[#29044](https://github.com/facebook/react/pull/29044))
* Unify ReactFiberCurrentOwner and ReactCurrentFiber
([sebmarkbage](https://github.com/sebmarkbage) in
[#29038](https://github.com/facebook/react/pull/29038))
* Dim `console` calls on additional Effect invocations due to
`StrictMode` ([eps1lon](https://github.com/eps1lon) in
[#29007](https://github.com/facebook/react/pull/29007))
* refactor[react-devtools]: rewrite context menus
([hoxyq](https://github.com/hoxyq) in
[#29049](https://github.com/facebook/react/pull/29049))",Ruslan Lesiutin,2024-06-18T11:12:27Z
ddcecbbebf6af3fa32a323c0591dad1f63587aeb,"Consider dispatch function from useActionState non-reactive (#29917)

Updated version of #29758 removing `useFormState` since that was the
previous name for `useActionState`.

---------

Co-authored-by: Hieu Do <hieudn.uh@gmail.com>",Joseph Savona,2024-06-17T19:26:55Z
107a2f8c3e43ee5f4f6872e68cd9aff14f3fa6d3,"chore[react-devtools]: improve console arguments formatting before passing it to original console (#29873)

Stacked on https://github.com/facebook/react/pull/29869.

## Summary

When using ANSI escape sequences, we construct a message in the
following way: `console.<method>('\x1b...%s\x1b[0m',
userspaceArgument1?, userspaceArgument2?, userspaceArgument3?, ...)`.

This won't dim all arguments, if user had something like `console.log(1,
2, 3)`, we would only apply it to `1`, since this is the first
arguments, so we need to:
- inline everything whats possible into a single string, while
preserving console substitutions defined by the user
- omit css and object substitutions, since we can't really inline them
and will delegate in to the environment

## How did you test this change?

Added some tests, manually inspected that it works well for web and
native cases.",Ruslan Lesiutin,2024-06-17T15:38:03Z
ff6e05a7055665776fe607bdc69aa8f4a285f995,"chore[react-devtools]: unify console patching and default to ansi escape symbols (#29869)

Stacked on https://github.com/facebook/react/pull/29856.

## Summary

By default, React DevTools will apply dimming with ANSI escape symbols,
so it works for both terminals and browser consoles.

For Firefox, which doesn't support ANSI escape symbols console stylings,
we fallback to css properties, like we used to do before.

## How did you test this change?

| Environment | Dark mode | Light mode |
|--------|--------|--------|
| Terminal | ![Screenshot 2024-06-12 at 19 39
46](https://github.com/facebook/react/assets/28902667/2d470eee-ec5f-4362-be7d-8d80c6c72d09)
| ![Screenshot 2024-06-12 at 19 39
09](https://github.com/facebook/react/assets/28902667/616f2c58-a251-406b-aee6-841e07d652ba)
|
| Fusebox&nbsp;console | ![Screenshot 2024-06-12 at 21 03
14](https://github.com/facebook/react/assets/28902667/6050f730-8e82-4aa1-acbc-7179aac3a8aa)
| ![Screenshot 2024-06-12 at 21 02
48](https://github.com/facebook/react/assets/28902667/6708b938-8a90-476f-a057-427963d58caa)
|
| Firefox&nbsp;console | ![Screenshot 2024-06-12 at 21 40
29](https://github.com/facebook/react/assets/28902667/4721084f-bbfa-438c-b61b-395da8ded590)
| ![Screenshot 2024-06-12 at 21 40
42](https://github.com/facebook/react/assets/28902667/72bbf001-2d3d-49e7-91c9-20a4f0914d4d)
|
| Chrome&nbsp;console | ![Screenshot 2024-06-12 at 21 43
09](https://github.com/facebook/react/assets/28902667/93c47881-a0dd-44f8-8dc2-8710149774e5)
| ![Screenshot 2024-06-12 at 21 43
00](https://github.com/facebook/react/assets/28902667/07ea4ff5-4322-4db9-9c12-4321d9577c9d)
|",Ruslan Lesiutin,2024-06-17T15:31:36Z
dbc5f36fe985258040976056889d8d27b9f67b8d,"[compiler] Support method-call version of macro functions

Adds fixtures for `macro.namespace(...)` style invocations which we use internally in some cases instead of just `macro(...)`. I tried every example i could think of that could possibly break it (including basing one off of another fixture where we hit an invariant related due to a temporary being emitted for a method call), and they all worked. I just had to fix an existing bug where we early return in some cases instead of continuing, which is a holdover from when this pass was originally written as a ReactiveFunction visitor.

ghstack-source-id: c01f45b3ef6f42b6d1f1ff0508aea258000e0fce
Pull Request resolved: https://github.com/facebook/react/pull/29899",Joe Savona,2024-06-14T15:44:40Z
92219ff9b80d0884cfc9c4123e7dcbd54ec0221d,"chore[react-devtools/backend]: remove consoleManagedByDevToolsDuringStrictMode (#29856)

## Summary

Removes the usage of `consoleManagedByDevToolsDuringStrictMode` flag
from React DevTools backend, this is the only place in RDT where this
flag was used. The only remaining part is
[`ReactFiberDevToolsHook`](https://github.com/facebook/react/blob/67081159377b438b48e3c2f2278af8e5f56b9f64/packages/react-reconciler/src/ReactFiberDevToolsHook.js#L203),
so React renderers can start notifying DevTools when `render` runs in a
Strict Mode.

> TL;DR: it is broken, and we already incorrectly apply dimming, when
RDT frontend is not opened. Fixing in the next few changes, see next
steps.

Before explaining why I am removing this, some context is required. The
way RDT works is slightly different, based on the fact if RDT frontend
and RDT backend are actually connected:
1. For browser extension case, the Backend is a script, which is
injected by the extension when page is loaded and before React is
loaded. RDT Frontend is loaded together with the RDT panel in browser
DevTools, so ONLY when user actually opens the RDT panel.
2. For native case, RDT backend is shipped together with `react-native`
for DEV bundles. It is always injected before React is loaded. RDT
frontend is loaded only when user starts a standalone RDT app via `npx
react-devtools` or by opening React Native DevTools and then selecting
React DevTools panel.

When Frontend is not connected to the Backend, the only thing we have is
the `__REACT_DEVTOOLS_GLOBAL_HOOK__` — this thing inlines some APIs in
itself, so that it can work similarly when RDT Frontend is not even
opened. This is especially important for console logs, since they are
cached and stored, then later displayed to the user once the Console
panel is opened, but from RDT side, you want to modify these console
logs when they are emitted.

In order to do so, we [inline the console patching logic into the
hook](https://github.com/facebook/react/blob/3ac551e855f9bec3161da2fc8787958aa62113db/packages/react-devtools-shared/src/hook.js#L222-L319).
This implementation doesn't use the
`consoleManagedByDevToolsDuringStrictMode`. This means that if we enable
`consoleManagedByDevToolsDuringStrictMode` for Native right now, users
would see broken dimming in LogBox / Metro logs when RDT Frontend is not
opened.

Next steps:
1. Align this console patching implementation with the one in `hook.js`.
2. Make LogBox compatible with console stylings: both css and ASCII
escape symbols.
3. Ship new version of RDT with these changes.
4. Remove `consoleManagedByDevToolsDuringStrictMode` from
`ReactFiberDevToolsHook`, so this is rolled out for all renderers.",Ruslan Lesiutin,2024-06-17T15:13:04Z
d7bb6039de6d8fa7c89b00626418c110872cc2e7,"chore[react-devtools/extensions]: make source maps url relative (#29886)

This adds few changes:
1. We are going to ship source maps only for 2 artifacts:
`installHook.js` and `react_devtools_backend_compact.js`, because it is
only these modules that can patch console and be visible to the user via
stack traces in console. We need to ship source maps to be able to use
`ignoreList` feature in source maps, so we can actually hide these from
stack traces.

| Before | After |
|--------|--------|
| ![Screenshot 2024-06-13 at 17 44
25](https://github.com/facebook/react/assets/28902667/464e097b-a95e-47eb-967c-0579daad316b)
| ![Screenshot 2024-06-13 at 17 39
53](https://github.com/facebook/react/assets/28902667/e4afe642-d65b-4296-a2cf-26c0b925ebf2)
|
 
2. The `""sources""` field in source map will have relative urls listed,
instead of absolute with `webpack://` protocol. This will move the
sources to the `React Developer Tools` frame in `Sources` panel, instead
of `webpack://`.
 
 | Before | After |
|--------|--------|
| ![Screenshot 2024-06-13 at 17 48
24](https://github.com/facebook/react/assets/28902667/a18edad2-5b4e-4ad7-8a7a-8b389c2edf92)
| ![Screenshot 2024-06-13 at 17 49
41](https://github.com/facebook/react/assets/28902667/5db491f7-5d1d-4155-9910-16ac4384d34e)
|

> [!NOTE]  
> I still have 1 unresolved issue with shipping source maps in extension
build, and it is related to Firefox, which can't find them in the
extension bundle and returns 404, even though urls are relative and I
can actually open them via unique address like
`moz-extension://<extension-id>/build/intallHook.js.map` ¯\\\_(ツ)\_/¯",Ruslan Lesiutin,2024-06-17T10:58:19Z
f14d7f0d2597ea25da12bcf97772e8803f2a394c,"Prepare Feature Flags for React Native 0.75 (#29903)

## Summary

Configures the React Native open source feature flags in preparation for
React Native 0.75, which will be upgraded to React 19.

## How did you test this change?

```
$ yarn test
$ yarn flow fabric
```",Timothy Yung,2024-06-15T00:09:50Z
05a3a7fa8d240cf4d411a1d0fe54b238e5fd1fb5,Bump version to 0.0.0-experimental-c20572a-20240614,Lauren Tan,2024-06-14T21:21:06Z
d46985282da98842fbd0412e31d7069d1f4d8f9d,Bump version to 0.0.0-experimental-8ae29d2-20240614,Lauren Tan,2024-06-14T21:21:05Z
7f9fbeafd5d96fd5a1592eab2d43a72e0c6962e7,Bump version to 0.0.0-experimental-179941d-20240614,Lauren Tan,2024-06-14T21:21:05Z
59e73d90163b16ce820316b1c69710f23096857e,"[compiler] Instruction reordering

Adds a pass just after DCE to reorder safely reorderable instructions (jsx, primitives, globals) closer to where they are used, to allow other optimization passes to be more effective. Notably, the reordering allows scope merging to be more effective, since that pass relies on two scopes not having intervening instructions — in many cases we can now reorder such instructions out of the way and unlock merging, as demonstrated in the changed fixtures.

The algorithm itself is described in the docblock.

note: This is a cleaned up version of #29579 that is ready for review.

ghstack-source-id: c54a806cad7aefba4ac1876c9fd9b25f9177e95a
Pull Request resolved: https://github.com/facebook/react/pull/29863",Joe Savona,2024-06-12T22:48:34Z
ed8dd2036bfd228638e40f0559f652d062ce0689,"[compiler] Allow more instruction kinds btw merged scopes

Updates our scope merging pass to allow more types of instructions to intervene btw scopes. This includes all the non-allocating kinds of nodes that are considered reorderable in #29863. It's already safe to merge scopes with these instructions — we only merge if the lvalue is not used past the next scope. Additionally, without changing this pass reordering isn't very effective, since we would reorder to add these types of intervening instructions and then not be able to merge scopes.

Sequencing this first helps to see the win just from reordering alone.

ghstack-source-id: 79263576d8eaeb45ef4d1ec4951478459853a287
Pull Request resolved: https://github.com/facebook/react/pull/29881",Joe Savona,2024-06-12T22:40:49Z
88959fd54af7d418b799a9898b921f32a356b212,"Revert ""Set disableLegacyMode to true for www"" (#29901)

Reverts facebook/react#29871

Just temporarily while we're investigating something.",Jan Kassens,2024-06-14T19:27:32Z
3154ec8a38e6014090039be54e0ca597fa967fdd,"Use a constant HostContext in prod builds for Fabric renderer (#29888)

<!--
  Thanks for submitting a pull request!
We appreciate you spending the time to work on these changes. Please
provide enough information so that others can review your pull request.
The three fields below are mandatory.

Before submitting a pull request, please make sure the following is
done:

1. Fork [the repository](https://github.com/facebook/react) and create
your branch from `main`.
  2. Run `yarn` in the repository root.
3. If you've fixed a bug or added code that should be tested, add tests!
4. Ensure the test suite passes (`yarn test`). Tip: `yarn test --watch
TestName` is helpful in development.
5. Run `yarn test --prod` to test in the production environment. It
supports the same options as `yarn test`.
6. If you need a debugger, run `yarn test --debug --watch TestName`,
open `chrome://inspect`, and press ""Inspect"".
7. Format your code with
[prettier](https://github.com/prettier/prettier) (`yarn prettier`).
8. Make sure your code lints (`yarn lint`). Tip: `yarn linc` to only
check changed files.
  9. Run the [Flow](https://flowtype.org/) type checks (`yarn flow`).
  10. If you haven't already, complete the CLA.

Learn more about contributing:
https://reactjs.org/docs/how-to-contribute.html
-->

## Summary

<!--
Explain the **motivation** for making this change. What existing problem
does the pull request solve?
-->

In the Fabric renderer in React Native, we only use the HostContext to
issue soft errors in __DEV__ bundles when attempting to add a raw text
child to a node that may not support them. Moving the logic to set this
context to __DEV__ bundles only unblocks more expensive methods for
resolving whether a parent context supports raw text children, like
resolving this information from `getViewConfigForType`.

## How did you test this change?

<!--
Demonstrate the code is solid. Example: The exact commands you ran and
their output, screenshots / videos if the pull request changes the user
interface.
How exactly did you verify that your PR solves the issue you wanted to
solve?
  If you leave this empty, your PR will very likely be closed.
-->

yarn test (--prod)",Eric Rozell,2024-06-14T17:37:19Z
f0e8164410049aabc680035e8fd45b657eb020ab,"sanitize javascript: urls for <object> tags (#29808)

sanitize javascript: urls for <object> tags

React 19 added sanitization for `javascript:` URLs for `href` properties
on various tags. This PR also adds that sanitization for `<object>` tags
as well that Firefox otherwise executes.",Jan Kassens,2024-06-14T17:17:43Z
fb9a90fa480efce40ac2a845478817467f965ddc,"Set disableLegacyMode to true for www (#29871)

Set disableLegacyMode to true for www",Jan Kassens,2024-06-14T13:52:49Z
a07f5a3db5deb5a429bf2617525b6e66dc777e8c,"[compiler] Provide support for custom fbt-like macro functions

ghstack-source-id: e3c6455ac2240914c3f25f3266a0cbb4a63971b5
Pull Request resolved: https://github.com/facebook/react/pull/29893",Joe Savona,2024-06-14T00:18:16Z
2ba462b665bb4691067e67db3cfbffc56959b788,"[compiler][playground] Make change detection work in playground

Summary: The change detection mode was unavailable in the playground because the pragma was not a boolean. This fixes that by special casing it in pragma parsing, similar to validateNoCapitalizedCalls

ghstack-source-id: 4a8c17d21ab8b7936ca61c9dd1f7fdf8322614c9
Pull Request resolved: https://github.com/facebook/react/pull/29889",Mike Vitousek,2024-06-13T18:02:47Z
dfd30974aba0d7740e084f70a8af1cd4c54bb273,"created a vscode workspace file for the repo (#29830)

### Summary

Similarly to what has been done on the `react-native` repo in
https://github.com/facebook/react-native/pull/43851, this PR adds a
`react.code-workspace` workspace file when using VSCode.

This disables the built-in TypeScript Language Service for `.js`, `.ts`,
and `.json` files, recommends extensions, enables `formatOnSave`,
excludes certain files in search, and configures Flow language support.

### Motivation

This is a DevX benefit for **React contributors** using open source VS
Code. Without this, it takes quite a long time to set up the environment
in vscode to work well.

For me the following two points took around an hour each to figure out,
but for others it may take even more (screenshots can be found below):
* Search with ""files to include"" was searching in ignored files
(compiled/generated)
* Configure language validation and prettier both in ""packages"" that use
flow and in the ""compiler"" folder that uses typescript.

### Recommended extensions

NOTE: The recommended extensions list is currently minimal — happy to
extend this now or in future, but let's aim to keep these conservative
at the moment.

* Flow — language support
* EditorConfig — formatting based on `.editorconfig`, all file types
* Prettier — formatting for JS* files
* ESLint — linter for JS* files

### Why `react.code-workspace`?

`.code-workspace` files have slight extra behaviours over a `.vscode/`
directory:

* Allows user to opt-in or skip.
* Allows double-click launching from file managers.
* Allows base folder (and any subfolders in future) to be opened with
local file tree scope (useful in fbsource!)
* (Minor point) Single config file over multiple files.
https://code.visualstudio.com/docs/editor/workspaces

### Test plan
Against a new un-configured copy of Visual Studio Code Insiders.

**Without workspace config**

❌ .js files raise errors by default (built-in TypeScript language
service)
❌ When using the Flow VS Code extension, the wrong version (global) of
Flow is used.
<img width=""978"" alt=""Screenshot 2024-06-10 at 16 03 59""
src=""https://github.com/facebook/react/assets/5188459/17e19ba4-bac2-48ea-9b35-6b4b6242bcc1"">

❌ Searching in excluded files when the ""include"" field is specified
<img width=""502"" alt=""Screenshot 2024-06-10 at 15 41 24""
src=""https://github.com/facebook/react/assets/5188459/00248755-7905-41bc-b303-498ddba82108"">

**With workspace config**

✅ Built-in TypeScript Language Service is disabled for .js files, but
still enabled for .ts[x] files
![Screen Recording 2024-06-13 at 12 21
24](https://github.com/facebook/react/assets/5188459/6048218c-f316-44cd-8771-d2d0e848991d)

✅ Flow language support is configured correctly against flow version in
package.json
<img width=""993"" alt=""Screenshot 2024-06-10 at 16 03 44""
src=""https://github.com/facebook/react/assets/5188459/b54e143c-a013-4e73-8995-3af7b5a03e36"">

✅ Does not search in excluded files when the ""include"" field is
specified
<img width=""555"" alt=""Screenshot 2024-06-10 at 15 39 18""
src=""https://github.com/facebook/react/assets/5188459/dd3e5344-84fb-4b5d-8689-4c8bd28168e0"">

✅ Workspace config is suggested when folder is opened in VS Code

![image](https://github.com/facebook/react/assets/5188459/7434261f-1057-4954-9885-b057a10684ad)

✅ Dialog is shown on workspace launch with recommended VS Code
extensions
<img width=""580"" alt=""Screenshot 2024-06-10 at 15 40 52""
src=""https://github.com/facebook/react/assets/5188459/c6406fb6-92a0-47f1-8497-4ffe899bb6a9"">",Vitali Zaidman,2024-06-13T15:23:42Z
ca9b6a7ebc75371c82748e057f55403518ebb5b1,"[compiler] Fix visitors to emit the correct kind

Our passes aren't sequenced such that we could observe this bug, but this retains the proper terminal kind for pruned-scopes in mapTerminalSuccessors.

ghstack-source-id: 1a03b40e45649bbef7d6db968fb2dbd6261a246a
Pull Request resolved: https://github.com/facebook/react/pull/29884",Joe Savona,2024-06-12T23:56:22Z
d9a5b6393a9329b60592e34c9e1fe091e6af5090,"fix[react-devtools] divided inspecting elements between inspecting do… (#29885)

# **before**
* nav to dom element from devtools
* nav to devtools element from page
are enabled on extension and disabled on the rest of the flavors.

## extension:
* nav to dom element from devtools **enabled** and working
* nav to devtools element from page **enabled** and working
![Screenshot 2024-06-13 at 11 15
11](https://github.com/facebook/react/assets/5188459/fef78b70-d22c-4405-8871-8b0449b51937)

## inline:
* nav to dom element from devtools **disabled**
* nav to devtools element from page **disabled**

![before-inline](https://github.com/facebook/react/assets/5188459/24020dc2-baec-4d0a-84d4-45c96d653843)

## standalone:
* nav to dom element from devtools **disabled**
* nav to devtools element from page **disabled**

![before-standalone](https://github.com/facebook/react/assets/5188459/19b4cb34-9d1f-412e-baea-59ea85f99d04)

## fusebox:
* nav to dom element from devtools **disabled**
* nav to devtools element from page **disabled**

![before-fusebox](https://github.com/facebook/react/assets/5188459/1a18fda4-04b8-40f4-ae8b-e059889fca93)

# **after**
same:
* nav to dom element from devtools
* nav to devtools element from page
are enabled on extension and disabled on inline.

change:
standalone and fusebox can nav to devtools element from page

## extension:
* nav to dom element from devtools **enabled** and working
* nav to devtools element from page **enabled** and working
![Screenshot 2024-06-13 at 10 50
25](https://github.com/facebook/react/assets/5188459/f4679c72-b211-43d6-b3ea-6380e0d1edf0)

## inline:
* nav to dom element from devtools **disabled**
* nav to devtools element from page **disabled**

![after-inline](https://github.com/facebook/react/assets/5188459/fdfdd87b-9bc3-47f3-b1e0-730239f6485d)

## standalone:
* nav to dom element from devtools **disabled**
* nav to devtools element from page **enabled** and working

![after-standalone](https://github.com/facebook/react/assets/5188459/b25e3c63-a697-4b0c-8ad2-0e12ec5c3e9c)

## fusebox:
* nav to dom element from devtools **disabled**
* nav to devtools element from page **enabled** and working

![after-fusebox](https://github.com/facebook/react/assets/5188459/f14147d8-9831-4909-a164-52f892c875e5)",Vitali Zaidman,2024-06-13T14:37:51Z
814a4186459eb79ed9bc6f22de4a4f75ff77558c,"[compiler] Make unary and binary operator types more precise

Summary: Minor change inspired by #29863: the BuildHIR pass ensures that Binary and UnaryOperator nodes only use a limited set of the operators that babel's operator types represent, which that pr relies on for safe reorderability, but the type of those HIR nodes admits the other operators. For example, even though you can't build an HIR UnaryOperator with `delete` as the operator, it is a valid HIR node--and if we made a mistaken change that let you build such a node, it would be unsafe to reorder.

This pr makes the typing of operators stricter to prevent that.

ghstack-source-id: 9bf3b1a37eae3f14c0e9fb42bb3ece522b317d98
Pull Request resolved: https://github.com/facebook/react/pull/29880",Mike Vitousek,2024-06-12T22:31:59Z
7f3911fac01829646c5be5e1236b76555f598f36,"Standardize condition order so that edge-lite preferred over browser (#29877)

The export maps for react packages have to choose an order of
preference. Many runtimes use multiple conditions, for instance when
building for edge webpack also uses the browser condition which makes
sense given most edge runtimes have a web-standards based set of APIs.
However React is building the browser builds primarily for actual
browsers and sometimes have builds intended for servers that might be
browser compat. This change updates the order of conditions to
preference specific named runtimes > node > generic edge runtimes >
browser > default",Josh Story,2024-06-12T22:31:23Z
55fdcf87bdab39853252369ad0dc68cb88a15102,"[compiler] Fix merging of queued states in InferReferenceEffects

Fixes a bug found by mofeiZ in #29878. When we merge queued states, if the new state does not introduce changes relative to the queued state we should use the queued state, not the new state.

ghstack-source-id: c59f69de15fa89bd1ed049d0a7d221651577ae34
Pull Request resolved: https://github.com/facebook/react/pull/29879",Joe Savona,2024-06-12T21:49:13Z
195d5bb99e366889f0905779a0f9432d1624f999,"Execute event handlers in the context of the instance that it's associated with (#29876)

That way we get owner stacks (native or otherwise) for `console.error`
or `console.warn` inside of them.

Since the `reportError` is also called within this context, we also get
them for errors thrown within event listeners. You'll also be able to
observe this in in the `error` event. Similar to how `onUncaughtError`
is in the scope of the instance that errored - even though
`onUncaughtError` doesn't kick in for event listeners.

Chrome (from console.createTask):

<img width=""306"" alt=""Screenshot 2024-06-12 at 2 08 19 PM""
src=""https://github.com/facebook/react/assets/63648/34cd9d57-0df4-44df-a470-e89a5dd1b07d"">

<img width=""302"" alt=""Screenshot 2024-06-12 at 2 03 32 PM""
src=""https://github.com/facebook/react/assets/63648/678117b1-e03a-47d4-9989-8350212c8135"">

Firefox (from React DevTools):

<img width=""493"" alt=""Screenshot 2024-06-12 at 2 05 01 PM""
src=""https://github.com/facebook/react/assets/63648/94ca224d-354a-4ec8-a886-5740bcb418e5"">

(This is the parent stack since React DevTools doesn't just yet print
owner stack.)

(Firefox doesn't print the component stack for uncaught since we don't
add component stacks for ""error"" events from React DevTools - just
console.error. Perhaps an oversight.)

If we didn't have the synthetic event system this would kind of just
work natively in Chrome because we have this task active when we attach
the event listeners to the DOM node and async stacks just follow along
that way. In fact, if you attach a manual listener in useEffect you get
this same effect. It's just because we use event delegation that this
doesn't work.

However, if we did get rid of the synthetic event system we'd likely
still want to add a wrapper on the DOM node to set our internal current
owner so that the non-native part of the system still can observe the
active instance. That wouldn't work with manually attached listeners
though.",Sebastian Markbåge,2024-06-12T20:15:22Z
50e89ec9f2d44ab140e771e585226f7771da9652,"Avoid acccessing React internals from `use-sync-external-store/shim` (#29868)

Co-authored-by: eps1lon <sebastian.silbermann@vercel.com>",Lenz Weber-Tronic,2024-06-12T18:13:17Z
f3e09d6328eb0eca53d8dbc19ea6f8f4aa43db25,"Bump braces from 3.0.2 to 3.0.3 in /fixtures/flight-esm (#29857)

Bumps [braces](https://github.com/micromatch/braces) from 3.0.2 to
3.0.3.
<details>
<summary>Commits</summary>
<ul>
<li><a
href=""https://github.com/micromatch/braces/commit/74b2db2938fad48a2ea54a9c8bf27a37a62c350d""><code>74b2db2</code></a>
3.0.3</li>
<li><a
href=""https://github.com/micromatch/braces/commit/88f1429a0f47e1dd3813de35211fc97ffda27f9e""><code>88f1429</code></a>
update eslint. lint, fix unit tests.</li>
<li><a
href=""https://github.com/micromatch/braces/commit/415d660c3002d1ab7e63dbf490c9851da80596ff""><code>415d660</code></a>
Snyk js braces 6838727 (<a
href=""https://redirect.github.com/micromatch/braces/issues/40"">#40</a>)</li>
<li><a
href=""https://github.com/micromatch/braces/commit/190510f79db1adf21d92798b0bb6fccc1f72c9d6""><code>190510f</code></a>
fix tests, skip 1 test in test/braces.expand</li>
<li><a
href=""https://github.com/micromatch/braces/commit/716eb9f12d820b145a831ad678618731927e8856""><code>716eb9f</code></a>
readme bump</li>
<li><a
href=""https://github.com/micromatch/braces/commit/a5851e57f45c3431a94d83fc565754bc10f5bbc3""><code>a5851e5</code></a>
Merge pull request <a
href=""https://redirect.github.com/micromatch/braces/issues/37"">#37</a>
from coderaiser/fix/vulnerability</li>
<li><a
href=""https://github.com/micromatch/braces/commit/2092bd1fb108d2c59bd62e243b70ad98db961538""><code>2092bd1</code></a>
feature: braces: add maxSymbols (<a
href=""https://github.com/micromatch/braces/issues/"">https://github.com/micromatch/braces/issues/</a>...</li>
<li><a
href=""https://github.com/micromatch/braces/commit/9f5b4cf47329351bcb64287223ffb6ecc9a5e6d3""><code>9f5b4cf</code></a>
fix: vulnerability (<a
href=""https://security.snyk.io/vuln/SNYK-JS-BRACES-6838727"">https://security.snyk.io/vuln/SNYK-JS-BRACES-6838727</a>)</li>
<li><a
href=""https://github.com/micromatch/braces/commit/98414f9f1fabe021736e26836d8306d5de747e0d""><code>98414f9</code></a>
remove funding file</li>
<li><a
href=""https://github.com/micromatch/braces/commit/665ab5d561c017a38ba7aafd92cc6655b91d8c14""><code>665ab5d</code></a>
update keepEscaping doc (<a
href=""https://redirect.github.com/micromatch/braces/issues/27"">#27</a>)</li>
<li>Additional commits viewable in <a
href=""https://github.com/micromatch/braces/compare/3.0.2...3.0.3"">compare
view</a></li>
</ul>
</details>
<br />


[![Dependabot compatibility
score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=braces&package-manager=npm_and_yarn&previous-version=3.0.2&new-version=3.0.3)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)

Dependabot will resolve any conflicts with this PR as long as you don't
alter it yourself. You can also trigger a rebase manually by commenting
`@dependabot rebase`.

[//]: # (dependabot-automerge-start)
[//]: # (dependabot-automerge-end)

---

<details>
<summary>Dependabot commands and options</summary>
<br />

You can trigger Dependabot actions by commenting on this PR:
- `@dependabot rebase` will rebase this PR
- `@dependabot recreate` will recreate this PR, overwriting any edits
that have been made to it
- `@dependabot merge` will merge this PR after your CI passes on it
- `@dependabot squash and merge` will squash and merge this PR after
your CI passes on it
- `@dependabot cancel merge` will cancel a previously requested merge
and block automerging
- `@dependabot reopen` will reopen this PR if it is closed
- `@dependabot close` will close this PR and stop Dependabot recreating
it. You can achieve the same result by closing it manually
- `@dependabot show <dependency name> ignore conditions` will show all
of the ignore conditions of the specified dependency
- `@dependabot ignore this major version` will close this PR and stop
Dependabot creating any more for this major version (unless you reopen
the PR or upgrade to it yourself)
- `@dependabot ignore this minor version` will close this PR and stop
Dependabot creating any more for this minor version (unless you reopen
the PR or upgrade to it yourself)
- `@dependabot ignore this dependency` will close this PR and stop
Dependabot creating any more for this dependency (unless you reopen the
PR or upgrade to it yourself)
You can disable automated security fix PRs for this repo from the
[Security Alerts
page](https://github.com/facebook/react/network/alerts).

</details>

Signed-off-by: dependabot[bot] <support@github.com>
Co-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>",dependabot[bot],2024-06-12T15:17:06Z
93826c8483ffaf6676c437c25619d82f13444413,"remove unstable_renderSubtreeIntoContainer (#29771)

remove unstable_renderSubtreeIntoContainer

This is finally no longer used and can be deleted.",Jan Kassens,2024-06-12T15:14:51Z
62af6b22803d743ff5101f89be6f088ecfd46b00,"delete ReactServerStreamConfig.dom-fb-experimental.js (#29836)

delete ReactServerStreamConfig.dom-fb-experimental.js

This config is no longer used since
1cd77a4ff7a2189003965246a3cfc475d2d9857d",Jan Kassens,2024-06-12T15:12:22Z
55c9d45f3b9239d5997788f10b8cdad5bcb81daf,"[Flight] Let environmentName vary over time by making it a function of string  (#29867)

This lets the environment name vary within a request by the context a
component, log or error being executed in.

A potentially different API would be something like
`setEnvironmentName()` but we'd have to extend the `ReadableStream` or
something to do that like we do for `.allReady`. As a function though it
has some expansion possibilities, e.g. we could potentially also pass
some information to it for context about what is being asked for.

If it changes before completing a task, we also emit the change so that
we have the debug info for what the environment was before entering a
component and what it was after completing it.",Sebastian Markbåge,2024-06-12T14:55:42Z
fb57fc5a8a66f38d65e3bc9f83213a0003da5702,"[Flight] Let Errored/Blocked Direct References Turn Nearest Element Lazy (#29823)

Stacked on #29807.

This lets the nearest Suspense/Error Boundary handle it even if that
boundary is defined by the model itself.

It also ensures that when we have an error during serialization of
properties, those can be associated with the nearest JSX element and
since we have a stack/owner for that element we can use it to point to
the source code of that line. We can't track the source of any nested
arbitrary objects deeper inside since objects don’t track their stacks
but close enough. Ideally we have the property path but we don’t have
that right now. We have a partial in the message itself.

<img width=""813"" alt=""Screenshot 2024-06-09 at 10 08 27 PM""
src=""https://github.com/facebook/react/assets/63648/917fbe0c-053c-4204-93db-d68a66e3e874"">

Note: The component name (Counter) is lost in the first message because
we don't print it in the Task. We use `""use client""` instead because we
expect the next stack frame to have the name. We also don't include it
in the actual error message because the Server doesn't know the
component name yet. Ideally Client References should be able to have a
name. If the nearest is a Host Component then we do use the name though.
However, it's not actually inside that Component that the error happens
it's in App and that points to the right line number.

An interesting case is that if something that's actually going to be
consumed by the props to a Suspense/Error Boundary or the Client
Component that wraps them fails, then it can't be handled by the
boundary. However, a counter intuitive case might be when that's on the
`children` props. E.g.
`<ErrorBoundary>{clientReferenceOrInvalidSerialization}</ErrorBoundary>`.
This value can be inspected by the boundary so it's not safe to pass it
so if it's errored it is not caught.

## Implementation

The first insight is that this is best solved on the Client rather than
in the Server because that way it also covers Client References that end
up erroring.

The key insight is that while we don't have a true stack when using
`JSON.parse` and therefore no begin/complete we can still infer these
phases for Elements because the first child of an Element is always
`'$'` which is also a leaf. In depth first that's our begin phase. When
the Element itself completes, we have the complete phase. Anything in
between is within the Element.

Using this idea I was able to refactor the blocking tracking mechanism
to stash the blocked information on `initializingHandler` and then on
the way up do we let whatever is nearest handle it - whether that's an
Element or the root Chunk. It's kind of like an Algebraic Effect.

cc @unstubbable This is something you might want to deep dive into to
find more edge cases. I'm sure I've missed something.

---------

Co-authored-by: eps1lon <sebastian.silbermann@vercel.com>",Sebastian Markbåge,2024-06-11T23:12:39Z
383b2a18456215d2d3ec46f33c0c912e84efa08f,"Use the Nearest Parent of an Errored Promise as its Owner (#29814)

Stacked on #29807.

Conceptually the error's owner/task should ideally be captured when the
Error constructor is called but neither `console.createTask` does this,
nor do we override `Error` to capture our `owner`. So instead, we use
the nearest parent as the owner/task of the error. This is usually the
same thing when it's thrown from the same async component but not if you
await a promise started from a different component/task.

Before this stack the ""owner"" and ""task"" of a Lazy that errors was the
nearest Fiber but if the thing erroring is a Server Component, we need
to get that as the owner from the inner most part of debugInfo.

To get the Task for that Server Component, we need to expose it on the
ReactComponentInfo object. Unfortunately that makes the object not
serializable so we need to special case this to exclude it from
serialization. It gets restored again on the client.

Before (Shell):
<img width=""813"" alt=""Screenshot 2024-06-06 at 5 16 20 PM""
src=""https://github.com/facebook/react/assets/63648/7da2d4c9-539b-494e-ba63-1abdc58ff13c"">

After (App):
<img width=""811"" alt=""Screenshot 2024-06-08 at 12 29 23 AM""
src=""https://github.com/facebook/react/assets/63648/dbf40bd7-c24d-4200-81a6-5018bef55f6d"">",Sebastian Markbåge,2024-06-11T22:10:24Z
a26e3f403e1d732ecde87db119b4ce21cee20038,"[compiler] Expect component props annotations to be potential objects

Summary: We now expect that candidate components that have Flow or TS type annotations on their first parameters have annotations that are potentially objects--this lets us reject compiling functions that explicitly take e.g. `number` as a parameter.

ghstack-source-id: e2c23348265b7ef651232b962ed7be7f6fed1930
Pull Request resolved: https://github.com/facebook/react/pull/29866",Mike Vitousek,2024-06-11T21:08:21Z
057de295d5fd79abb9b38a50f7242005a829beae,"[compiler] Expect components to have hook calls or jsx directly in body

Summary: We can tighten our criteria for what is a component by requiring that a component or hook contain JSX or hook calls directly within its body, excluding nested functions . Currently, if we see them within the body anywhere -- including nested functions -- we treat it as a component if the other requirements are met. This change makes this stricter.

We also now expect components (but not necessarily hooks) to have return statements, and those returns must be potential React nodes (we can reject functions that return function or object literals, for example).

ghstack-source-id: 4507cc3955216c564bf257c0b81bfb551ae6ae55
Pull Request resolved: https://github.com/facebook/react/pull/29865",Mike Vitousek,2024-06-11T21:08:21Z
3cd3735515e5efe8f0e2a73e3e241d436cd7aa41,"[compiler] Option to only compile component syntax

Summary: Projects which have heavily adopted Flow component syntax may wish to enable the compiler only for components and hooks that use the syntax, rather than trying to guess which functions are components and hooks. This provides that option.

ghstack-source-id: 579ac9f0fa01d8cdb6a0b8f9923906a0b37662f3
Pull Request resolved: https://github.com/facebook/react/pull/29864",Mike Vitousek,2024-06-11T21:08:21Z
2c959f1d775e9c216d029d198971d06a1f8c892a,"[Fiber] Track debugInfo on module state instead of stack (#29807)

Stacked on #29804.

Transferring of debugInfo was added in #28286. It represents the parent
stack between the current Fiber and into the next Fiber we're about to
create. I.e. Server Components in between. ~I don't love passing
DEV-only fields as arguments anyway since I don't trust closure to
remove unused arguments that way.~ EDIT: Actually it seems like closure
handled that just fine before which is why this is no change in prod.

Instead, I track it on the module scope. Notably with DON'T use
try/finally because if something throws we want to observe what it was
at the time we threw. Like the pattern we use many other places.

Now we can use this when we create the Throw Fiber to associate the
Server Components that were part of the parent stack before this error
threw. There by giving us the correct parent stacks at the location that
threw.",Sebastian Markbåge,2024-06-11T21:04:13Z
270229f0c337dc652f07ef27d2254bb922bfaa9e,"[Fiber] Create virtual Fiber when an error occurs during reconcilation (#29804)

This lets us rethrow it in the conceptual place of the child.

There's currently a problem when we suspend or throw in the child fiber
reconciliation phase. This work is done by the parent component, so if
it suspends or errors it is as if that component errored or suspended.
However, conceptually it's like a child suspended or errored.

In theory any thing can throw but it is really mainly due to either
`React.lazy` (both in the element.type position and node position),
`Thenable`s or the `Thenable`s that make up `AsyncIterable`s.

Mainly this happens because a Server Component that errors turns into a
`React.lazy`. In practice this means that if you have a Server Component
as the direct child of an Error Boundary. Errors inside of it won't be
caught.

We used to have the same problem with Thenables and Suspense but because
it's now always nested inside an inner Offscreen boundary that shields
it by being one level nested. However, when we have raw Offscreen
(Activity) boundaries they should also be able to catch the suspense if
it's in a hidden state so the problem returns. This fixes it for thrown
promises but it doesn't fix it for SuspenseException. I'm not sure this
is even the right strategy for Suspense though. It kind of relies on the
node never actually mounting/committing.

It's conceptually a little tricky because the current component can
inspect the children and make decisions based on them. Such as
SuspenseList.

The other thing that this PR tries to address is that it sets the
foundation for dealing with error reporting for Server Components that
errored. If something client side errors it'll be a stack like Server
(DebugInfo) -> Fiber -> Fiber -> Server -> (DebugInfo) -> Fiber.
However, all error reporting relies on it eventually terminating into a
Fiber that is responsible for the error. To avoid having to fork too
much it would be nice if I could create a Fiber to associate with the
error so that even a Server component error in this case ultimately
terminates in a Fiber.",Sebastian Markbåge,2024-06-11T19:57:41Z
01a40570c3cd852593c9bc88978b11cb9a2c5720,"[Flight/Fizz] Use Constructors for Large Request/Response Objects in Flight/Fizz (#29858)

We know from Fiber that inline objects with more than 16 properties in
V8 turn into dictionaries instead of optimized objects. The trick is to
use a constructor instead of an inline object literal. I don't actually
know if that's still the case or not. I haven't benchmarked/tested the
output. Better safe than sorry.

It's unfortunate that this can have a negative effect for Hermes and JSC
but it's not as bad as it is for V8 because they don't deopt into
dictionaries. The time to construct these objects isn't a concern - the
time to access them frequently is.

We have to beware the Task objects in Fizz. Those are currently on 16
fields exactly so we shouldn't add anymore ideally.

We should ideally have a lint rule against object literals with more
than 16 fields on them. It might not help since sometimes the fields are
conditional.",Sebastian Markbåge,2024-06-11T19:55:29Z
82dea10511c562950783a60aa034ab6778d732b0,"[compiler] Remove .vscode

To keep consistent with the rest of the React repo, let's remove this
because editor settings are personal. Additionally this wasn't in the
root directory so it wasn't being applied anyway.

ghstack-source-id: 3a2e2993d642d9336bdd4d35dfaeb710ac88247b
Pull Request resolved: https://github.com/facebook/react/pull/29861",Lauren Tan,2024-06-11T18:59:13Z
0c65538be85d7e0f55e683512849486114ae56d9,"Bump braces from 3.0.2 to 3.0.3 in /fixtures/legacy-jsx-runtimes (#29844)

Bumps [braces](https://github.com/micromatch/braces) from 3.0.2 to
3.0.3.
<details>
<summary>Commits</summary>
<ul>
<li><a
href=""https://github.com/micromatch/braces/commit/74b2db2938fad48a2ea54a9c8bf27a37a62c350d""><code>74b2db2</code></a>
3.0.3</li>
<li><a
href=""https://github.com/micromatch/braces/commit/88f1429a0f47e1dd3813de35211fc97ffda27f9e""><code>88f1429</code></a>
update eslint. lint, fix unit tests.</li>
<li><a
href=""https://github.com/micromatch/braces/commit/415d660c3002d1ab7e63dbf490c9851da80596ff""><code>415d660</code></a>
Snyk js braces 6838727 (<a
href=""https://redirect.github.com/micromatch/braces/issues/40"">#40</a>)</li>
<li><a
href=""https://github.com/micromatch/braces/commit/190510f79db1adf21d92798b0bb6fccc1f72c9d6""><code>190510f</code></a>
fix tests, skip 1 test in test/braces.expand</li>
<li><a
href=""https://github.com/micromatch/braces/commit/716eb9f12d820b145a831ad678618731927e8856""><code>716eb9f</code></a>
readme bump</li>
<li><a
href=""https://github.com/micromatch/braces/commit/a5851e57f45c3431a94d83fc565754bc10f5bbc3""><code>a5851e5</code></a>
Merge pull request <a
href=""https://redirect.github.com/micromatch/braces/issues/37"">#37</a>
from coderaiser/fix/vulnerability</li>
<li><a
href=""https://github.com/micromatch/braces/commit/2092bd1fb108d2c59bd62e243b70ad98db961538""><code>2092bd1</code></a>
feature: braces: add maxSymbols (<a
href=""https://github.com/micromatch/braces/issues/"">https://github.com/micromatch/braces/issues/</a>...</li>
<li><a
href=""https://github.com/micromatch/braces/commit/9f5b4cf47329351bcb64287223ffb6ecc9a5e6d3""><code>9f5b4cf</code></a>
fix: vulnerability (<a
href=""https://security.snyk.io/vuln/SNYK-JS-BRACES-6838727"">https://security.snyk.io/vuln/SNYK-JS-BRACES-6838727</a>)</li>
<li><a
href=""https://github.com/micromatch/braces/commit/98414f9f1fabe021736e26836d8306d5de747e0d""><code>98414f9</code></a>
remove funding file</li>
<li><a
href=""https://github.com/micromatch/braces/commit/665ab5d561c017a38ba7aafd92cc6655b91d8c14""><code>665ab5d</code></a>
update keepEscaping doc (<a
href=""https://redirect.github.com/micromatch/braces/issues/27"">#27</a>)</li>
<li>Additional commits viewable in <a
href=""https://github.com/micromatch/braces/compare/3.0.2...3.0.3"">compare
view</a></li>
</ul>
</details>
<br />


[![Dependabot compatibility
score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=braces&package-manager=npm_and_yarn&previous-version=3.0.2&new-version=3.0.3)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)

Dependabot will resolve any conflicts with this PR as long as you don't
alter it yourself. You can also trigger a rebase manually by commenting
`@dependabot rebase`.

[//]: # (dependabot-automerge-start)
[//]: # (dependabot-automerge-end)

---

<details>
<summary>Dependabot commands and options</summary>
<br />

You can trigger Dependabot actions by commenting on this PR:
- `@dependabot rebase` will rebase this PR
- `@dependabot recreate` will recreate this PR, overwriting any edits
that have been made to it
- `@dependabot merge` will merge this PR after your CI passes on it
- `@dependabot squash and merge` will squash and merge this PR after
your CI passes on it
- `@dependabot cancel merge` will cancel a previously requested merge
and block automerging
- `@dependabot reopen` will reopen this PR if it is closed
- `@dependabot close` will close this PR and stop Dependabot recreating
it. You can achieve the same result by closing it manually
- `@dependabot show <dependency name> ignore conditions` will show all
of the ignore conditions of the specified dependency
- `@dependabot ignore this major version` will close this PR and stop
Dependabot creating any more for this major version (unless you reopen
the PR or upgrade to it yourself)
- `@dependabot ignore this minor version` will close this PR and stop
Dependabot creating any more for this minor version (unless you reopen
the PR or upgrade to it yourself)
- `@dependabot ignore this dependency` will close this PR and stop
Dependabot creating any more for this dependency (unless you reopen the
PR or upgrade to it yourself)
You can disable automated security fix PRs for this repo from the
[Security Alerts
page](https://github.com/facebook/react/network/alerts).

</details>

Signed-off-by: dependabot[bot] <support@github.com>
Co-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>",dependabot[bot],2024-06-11T15:36:36Z
2f47e667daec604e0e2314984066987a05bd96e9,"Bump braces from 3.0.2 to 3.0.3 in /fixtures/flight (#29845)

Bumps [braces](https://github.com/micromatch/braces) from 3.0.2 to
3.0.3.
<details>
<summary>Commits</summary>
<ul>
<li><a
href=""https://github.com/micromatch/braces/commit/74b2db2938fad48a2ea54a9c8bf27a37a62c350d""><code>74b2db2</code></a>
3.0.3</li>
<li><a
href=""https://github.com/micromatch/braces/commit/88f1429a0f47e1dd3813de35211fc97ffda27f9e""><code>88f1429</code></a>
update eslint. lint, fix unit tests.</li>
<li><a
href=""https://github.com/micromatch/braces/commit/415d660c3002d1ab7e63dbf490c9851da80596ff""><code>415d660</code></a>
Snyk js braces 6838727 (<a
href=""https://redirect.github.com/micromatch/braces/issues/40"">#40</a>)</li>
<li><a
href=""https://github.com/micromatch/braces/commit/190510f79db1adf21d92798b0bb6fccc1f72c9d6""><code>190510f</code></a>
fix tests, skip 1 test in test/braces.expand</li>
<li><a
href=""https://github.com/micromatch/braces/commit/716eb9f12d820b145a831ad678618731927e8856""><code>716eb9f</code></a>
readme bump</li>
<li><a
href=""https://github.com/micromatch/braces/commit/a5851e57f45c3431a94d83fc565754bc10f5bbc3""><code>a5851e5</code></a>
Merge pull request <a
href=""https://redirect.github.com/micromatch/braces/issues/37"">#37</a>
from coderaiser/fix/vulnerability</li>
<li><a
href=""https://github.com/micromatch/braces/commit/2092bd1fb108d2c59bd62e243b70ad98db961538""><code>2092bd1</code></a>
feature: braces: add maxSymbols (<a
href=""https://github.com/micromatch/braces/issues/"">https://github.com/micromatch/braces/issues/</a>...</li>
<li><a
href=""https://github.com/micromatch/braces/commit/9f5b4cf47329351bcb64287223ffb6ecc9a5e6d3""><code>9f5b4cf</code></a>
fix: vulnerability (<a
href=""https://security.snyk.io/vuln/SNYK-JS-BRACES-6838727"">https://security.snyk.io/vuln/SNYK-JS-BRACES-6838727</a>)</li>
<li><a
href=""https://github.com/micromatch/braces/commit/98414f9f1fabe021736e26836d8306d5de747e0d""><code>98414f9</code></a>
remove funding file</li>
<li><a
href=""https://github.com/micromatch/braces/commit/665ab5d561c017a38ba7aafd92cc6655b91d8c14""><code>665ab5d</code></a>
update keepEscaping doc (<a
href=""https://redirect.github.com/micromatch/braces/issues/27"">#27</a>)</li>
<li>Additional commits viewable in <a
href=""https://github.com/micromatch/braces/compare/3.0.2...3.0.3"">compare
view</a></li>
</ul>
</details>
<br />


[![Dependabot compatibility
score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=braces&package-manager=npm_and_yarn&previous-version=3.0.2&new-version=3.0.3)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)

Dependabot will resolve any conflicts with this PR as long as you don't
alter it yourself. You can also trigger a rebase manually by commenting
`@dependabot rebase`.

[//]: # (dependabot-automerge-start)
[//]: # (dependabot-automerge-end)

---

<details>
<summary>Dependabot commands and options</summary>
<br />

You can trigger Dependabot actions by commenting on this PR:
- `@dependabot rebase` will rebase this PR
- `@dependabot recreate` will recreate this PR, overwriting any edits
that have been made to it
- `@dependabot merge` will merge this PR after your CI passes on it
- `@dependabot squash and merge` will squash and merge this PR after
your CI passes on it
- `@dependabot cancel merge` will cancel a previously requested merge
and block automerging
- `@dependabot reopen` will reopen this PR if it is closed
- `@dependabot close` will close this PR and stop Dependabot recreating
it. You can achieve the same result by closing it manually
- `@dependabot show <dependency name> ignore conditions` will show all
of the ignore conditions of the specified dependency
- `@dependabot ignore this major version` will close this PR and stop
Dependabot creating any more for this major version (unless you reopen
the PR or upgrade to it yourself)
- `@dependabot ignore this minor version` will close this PR and stop
Dependabot creating any more for this minor version (unless you reopen
the PR or upgrade to it yourself)
- `@dependabot ignore this dependency` will close this PR and stop
Dependabot creating any more for this dependency (unless you reopen the
PR or upgrade to it yourself)
You can disable automated security fix PRs for this repo from the
[Security Alerts
page](https://github.com/facebook/react/network/alerts).

</details>

Signed-off-by: dependabot[bot] <support@github.com>
Co-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>",dependabot[bot],2024-06-11T15:35:53Z
54185a35d90b3a82a638999a7f7c15970932fd1b,"Bump braces from 3.0.2 to 3.0.3 in /fixtures/stacks (#29843)

Bumps [braces](https://github.com/micromatch/braces) from 3.0.2 to
3.0.3.
<details>
<summary>Commits</summary>
<ul>
<li><a
href=""https://github.com/micromatch/braces/commit/74b2db2938fad48a2ea54a9c8bf27a37a62c350d""><code>74b2db2</code></a>
3.0.3</li>
<li><a
href=""https://github.com/micromatch/braces/commit/88f1429a0f47e1dd3813de35211fc97ffda27f9e""><code>88f1429</code></a>
update eslint. lint, fix unit tests.</li>
<li><a
href=""https://github.com/micromatch/braces/commit/415d660c3002d1ab7e63dbf490c9851da80596ff""><code>415d660</code></a>
Snyk js braces 6838727 (<a
href=""https://redirect.github.com/micromatch/braces/issues/40"">#40</a>)</li>
<li><a
href=""https://github.com/micromatch/braces/commit/190510f79db1adf21d92798b0bb6fccc1f72c9d6""><code>190510f</code></a>
fix tests, skip 1 test in test/braces.expand</li>
<li><a
href=""https://github.com/micromatch/braces/commit/716eb9f12d820b145a831ad678618731927e8856""><code>716eb9f</code></a>
readme bump</li>
<li><a
href=""https://github.com/micromatch/braces/commit/a5851e57f45c3431a94d83fc565754bc10f5bbc3""><code>a5851e5</code></a>
Merge pull request <a
href=""https://redirect.github.com/micromatch/braces/issues/37"">#37</a>
from coderaiser/fix/vulnerability</li>
<li><a
href=""https://github.com/micromatch/braces/commit/2092bd1fb108d2c59bd62e243b70ad98db961538""><code>2092bd1</code></a>
feature: braces: add maxSymbols (<a
href=""https://github.com/micromatch/braces/issues/"">https://github.com/micromatch/braces/issues/</a>...</li>
<li><a
href=""https://github.com/micromatch/braces/commit/9f5b4cf47329351bcb64287223ffb6ecc9a5e6d3""><code>9f5b4cf</code></a>
fix: vulnerability (<a
href=""https://security.snyk.io/vuln/SNYK-JS-BRACES-6838727"">https://security.snyk.io/vuln/SNYK-JS-BRACES-6838727</a>)</li>
<li><a
href=""https://github.com/micromatch/braces/commit/98414f9f1fabe021736e26836d8306d5de747e0d""><code>98414f9</code></a>
remove funding file</li>
<li><a
href=""https://github.com/micromatch/braces/commit/665ab5d561c017a38ba7aafd92cc6655b91d8c14""><code>665ab5d</code></a>
update keepEscaping doc (<a
href=""https://redirect.github.com/micromatch/braces/issues/27"">#27</a>)</li>
<li>Additional commits viewable in <a
href=""https://github.com/micromatch/braces/compare/3.0.2...3.0.3"">compare
view</a></li>
</ul>
</details>
<br />


[![Dependabot compatibility
score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=braces&package-manager=npm_and_yarn&previous-version=3.0.2&new-version=3.0.3)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)

Dependabot will resolve any conflicts with this PR as long as you don't
alter it yourself. You can also trigger a rebase manually by commenting
`@dependabot rebase`.

[//]: # (dependabot-automerge-start)
[//]: # (dependabot-automerge-end)

---

<details>
<summary>Dependabot commands and options</summary>
<br />

You can trigger Dependabot actions by commenting on this PR:
- `@dependabot rebase` will rebase this PR
- `@dependabot recreate` will recreate this PR, overwriting any edits
that have been made to it
- `@dependabot merge` will merge this PR after your CI passes on it
- `@dependabot squash and merge` will squash and merge this PR after
your CI passes on it
- `@dependabot cancel merge` will cancel a previously requested merge
and block automerging
- `@dependabot reopen` will reopen this PR if it is closed
- `@dependabot close` will close this PR and stop Dependabot recreating
it. You can achieve the same result by closing it manually
- `@dependabot show <dependency name> ignore conditions` will show all
of the ignore conditions of the specified dependency
- `@dependabot ignore this major version` will close this PR and stop
Dependabot creating any more for this major version (unless you reopen
the PR or upgrade to it yourself)
- `@dependabot ignore this minor version` will close this PR and stop
Dependabot creating any more for this minor version (unless you reopen
the PR or upgrade to it yourself)
- `@dependabot ignore this dependency` will close this PR and stop
Dependabot creating any more for this dependency (unless you reopen the
PR or upgrade to it yourself)
You can disable automated security fix PRs for this repo from the
[Security Alerts
page](https://github.com/facebook/react/network/alerts).

</details>

Signed-off-by: dependabot[bot] <support@github.com>
Co-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>",dependabot[bot],2024-06-11T15:35:40Z
b5b9daa44d3cd5849d2a48da3c1db71410d9e294,"[compiler] HIR-based FlattenScopesWithHooksOrUse

Per title, implements an HIR-based version of FlattenScopesWithHooksOrUse as part of our push to use HIR everywhere. This is the last pass to migrate before PropagateScopeDeps, which is blocking the fix for `bug.invalid-hoisting-functionexpr`, ie where we can infer incorrect dependencies for function expressions if the dependencies are accessed conditionally.

ghstack-source-id: 05c6e26b3b7a3b1c3e106a37053f88ac3c72caf5
Pull Request resolved: https://github.com/facebook/react/pull/29840",Joe Savona,2024-06-10T21:14:52Z
43c17d13efc0c356a89a9036f173680ba1c115d2,"[compiler] HIR-based FlattenReactiveLoops

Pre the title, this implements an HIR-based version of FlattenReactiveLoops. Another step on the way to HIR-everywhere.

ghstack-source-id: e1d166352df6b0725e4c4915a19445437916251f
Pull Request resolved: https://github.com/facebook/react/pull/29838",Joe Savona,2024-06-10T20:22:12Z
f7b871a8d5d216f23b9ee1178a6e7d8cd5ee3003,"[compiler] Add pruned-scope terminal in HIR

Adds the HIR equivalent of a pruned-scope, allowing us to start porting the scope-pruning passes to operate on HIR.

ghstack-source-id: dbbdc43219123467acc1a531d8276e8b9cc91e14
Pull Request resolved: https://github.com/facebook/react/pull/29837",Joe Savona,2024-06-10T20:22:09Z
fb3b9ead472ec0254e4ce7bd9000eb100010f08e,"fix[react-devtools] component badge in light mode is now not invisible (#29852)

In light mode, component badges in profiler were invisible due to using
the alpha channel to produce the grayish color. Instead I'm using the
equivalent RGB without that alpha.

**before**
In light mode, component badges in profiler were invisible (forwardRef
badge in this case):
![Screenshot 2024-06-11 at 13 15
16](https://github.com/facebook/react/assets/5188459/385b80a5-d385-4eac-bac6-7fec6938d78f)

**after**
Profiler tooltip fix. also notice there's no regression on the right
menu:
![Screenshot 2024-06-11 at 13 04
41](https://github.com/facebook/react/assets/5188459/64aa27f7-35b8-4e3b-91d4-c12d5a97330e)

also works in dark mode:
![Screenshot 2024-06-11 at 13 12
17](https://github.com/facebook/react/assets/5188459/99aa55fd-23ee-4881-9676-63eca86bf761)

Still visible in components in light mode, whether selected or not:
![Screenshot 2024-06-11 at 13 04
49](https://github.com/facebook/react/assets/5188459/59c0bf63-d9b0-4d46-a145-f615249d1da0)

components dark mode:
![Screenshot 2024-06-11 at 13 10
25](https://github.com/facebook/react/assets/5188459/16e61acc-c431-4bfa-8a65-ca6701f4379b)",Vitali Zaidman,2024-06-11T13:32:39Z
c015abd9dc32e9604e992cf351f1e130fd2a0de0,"[compiler] Remove unused scripts

ghstack-source-id: ae0c1bf3654986a896d9acf4f3453e09502382ad
Pull Request resolved: https://github.com/facebook/react/pull/29842",Lauren Tan,2024-06-11T00:26:10Z
ae0525f8f2e85d00758ad73b929d4aa0f3d0a061,"[compiler] Remove playground postinstall script

The ci step for the playground already installs playwright browsers so
this step was unnecessary. It also doesn't work internally for our sync
scripts

ghstack-source-id: d6e761563759739cfdab0b65f55222f9a9346e8a
Pull Request resolved: https://github.com/facebook/react/pull/29841",Lauren Tan,2024-06-11T00:26:07Z
a714685c156dd241b1d5e5ae3a98c439c88e64e4,"fix[compiler] remove duplicate parsePluginOptions from the compilePro… (#29831)

<!--
  Thanks for submitting a pull request!
We appreciate you spending the time to work on these changes. Please
provide enough information so that others can review your pull request.
The three fields below are mandatory.

Before submitting a pull request, please make sure the following is
done:

1. Fork [the repository](https://github.com/facebook/react) and create
your branch from `main`.
  2. Run `yarn` in the repository root.
3. If you've fixed a bug or added code that should be tested, add tests!
4. Ensure the test suite passes (`yarn test`). Tip: `yarn test --watch
TestName` is helpful in development.
5. Run `yarn test --prod` to test in the production environment. It
supports the same options as `yarn test`.
6. If you need a debugger, run `yarn test --debug --watch TestName`,
open `chrome://inspect`, and press ""Inspect"".
7. Format your code with
[prettier](https://github.com/prettier/prettier) (`yarn prettier`).
8. Make sure your code lints (`yarn lint`). Tip: `yarn linc` to only
check changed files.
  9. Run the [Flow](https://flowtype.org/) type checks (`yarn flow`).
  10. If you haven't already, complete the CLA.

Learn more about contributing:
https://reactjs.org/docs/how-to-contribute.html
-->

## Summary

<!--
Explain the **motivation** for making this change. What existing problem
does the pull request solve?
-->

The parsePluginOptions seemed to be duplicated within
[BabelPlugin.ts](https://github.com/facebook/react/blob/f5af92d2c47d1e1f455faf912b1d3221d1038c37/compiler/packages/babel-plugin-react-compiler/src/Babel/BabelPlugin.ts#L32)
and
[Program.ts](https://github.com/facebook/react/blob/f5af92d2c47d1e1f455faf912b1d3221d1038c37/compiler/packages/babel-plugin-react-compiler/src/Entrypoint/Program.ts#L220).
Since the options already parsed in BabelPlugin.ts should have been
passed to compileProgram, in this PR we deleted parsePluginOptions in
compileProgram and used the options passed as arguments as they are.
I've done that.

## How did you test this change?

<!--
Demonstrate the code is solid. Example: The exact commands you ran and
their output, screenshots / videos if the pull request changes the user
interface.
How exactly did you verify that your PR solves the issue you wanted to
solve?
  If you leave this empty, your PR will very likely be closed.
-->

<img width=""516"" alt=""image""
src=""https://github.com/facebook/react/assets/87469023/2a70c6ea-0330-42a2-adff-48ae3e905790"">",Yuto Yoshino,2024-06-10T23:18:01Z
277420803947724b43c47bbc47d3a353553868f1,"Remove Warning: prefix and toString on console Arguments (#29839)

Basically make `console.error` and `console.warn` behave like normal -
when a component stack isn't appended. I need this because I need to be
able to print rich logs with the component stack option and to be able
to disable instrumentation completely in `console.createTask`
environments that don't need it.

Currently we can't print logs with richer objects because they're
toString:ed first. In practice, pretty much all arguments we log are
already toString:ed so it's not necessary anyway. Some might be like a
number. So it would only be a problem if some environment can't handle
proper consoles but then it's up to that environment to toString it
before logging.

The `Warning: ` prefix is historic and is both noisy and confusing. It's
mostly unnecessary since the UI surrounding `console.error` and
`console.warn` tend to have visual treatment around it anyway. However,
it's actively misleading when `console.error` gets prefixed with a
Warning that we consider an error level. There's an argument to be made
that some of our `console.error` don't make the bar for an error but
then the argument is to downgrade each of those to `console.warn` - not
to brand all our actual error logging with `Warning: `.

Apparently something needs to change in React Native before landing this
because it depends on the prefix somehow which probably doesn't make
sense already.",Sebastian Markbåge,2024-06-10T22:41:56Z
d172bdaf95b0be869f7d36b87c95a5f12b229195,"Add jest lint rules (#29760)

## Overview

Updates `eslint-plugin-jest` and enables the recommended rules with some
turned off that are unhelpful.

The main motivations is:
a) we have a few duplicated tests, which this found an I deleted 
b) making sure we don't accidentally commit skipped tests",Ricky,2024-06-10T18:31:37Z
c50d593e6390ad200f355ad147dfbc61deaaf8b5,"[compiler] Type `ref` prop as a ref

Adds a shape type for component props, which has one defined property: ""ref"". This means that if the ref property exists, we can type usage of `props.ref` (or via destructuring) the same as the result of `useRef()` and infer downstream usage similarly.

ghstack-source-id: 76cd07c5dfeea2a4aafe141912663b097308fd73
Pull Request resolved: https://github.com/facebook/react/pull/29834",Joe Savona,2024-06-10T16:52:18Z
bf1bb2e5e52733a9577848f2913d06edcf24df14,Fix xplat sync syntax error,Rick Hanlon,2024-06-10T17:30:30Z
f81d5ee219848c7a02c0afdbd46fc1cedcc72df0,"Fix xplat sync (#29833)

## Overview

The clever trick in https://github.com/facebook/react/pull/29799 turns
out to not work because signedsource includes the generated hash in the
header. Reverts back to checking git diff, filtering out the REVISION
file and `@generated` headers.",Ricky,2024-06-10T17:24:45Z
a532d91d010a11083e598027cbd40fc0c935ea92,"compiler: Known hooks/nonescaping scopes dont count as pruned

There are two cases where it's legit/intended to remove scopes, and we can inline the scope rather than reify a ""pruned"" scope:
* Scopes that contain a single instruction with a hook call. The fact that we create a scope in this case at all is just an artifact of it being simpler to do this and remove the scope later rather than try to avoid creating it in the first place. So for these scopes, we can just inline them.
* Scopes that are provably non-escaping. Removing the scope is an optimization, not a case of us having to prune away something that should be there. So again, its fine to inline in this case.

I found this from syncing the stack internally and looking at differences in compiled output. The latter case was most common but the first case is just an obvious improvement.

ghstack-source-id: 80610ddafad65eb837d0037e2692dd74bc548088
Pull Request resolved: https://github.com/facebook/react/pull/29820",Joe Savona,2024-06-10T15:35:30Z
cdbafc8e67bb0669e70d361a956ab56ccd3bf7a3,"compiler: Log metrics on pruned memo blocks/values

Adds additional information to the CompileSuccess LoggerEvent:
* `prunedMemoBlocks` is the number of reactive scopes that were pruned for some reason.
* `prunedMemoValues` is the number of unique _values_ produced by those scopes.

Both numbers exclude blocks that are just a hook call - ie although we create and prune a scope for eg `useState()`, that's just an artifact of the sequencing of our pipeline. So what this metric is counting is cases of _other_ values that go unmemoized. See the new fixture, which takes advantage of improvements in the snap runner to optionally emit the logger events in the .expect.md file if you include the ""logger"" pragma in a fixture.

ghstack-source-id: c2015bb5565746d07427587526b71e23685279c2
Pull Request resolved: https://github.com/facebook/react/pull/29810",Joe Savona,2024-06-07T23:44:36Z
7d445acb02d3f1011fa231898535c58197d6163a,"compiler: treat pruned scope outputs as reactive

Mostly addresses the issue with non-reactive pruned scopes. Before, values from pruned scopes would not be memoized, but could still be depended upon by downstream scopes. However, those downstream scopes would assume the value could never change. This could allow the developer to observe two different versions of a value - the freshly created one (if observed outside a scope) or a cached one (if observed inside, or through) a scope which used the value but didn't depend on it.

The fix here is to consider the outputs of pruned reactive scopes as reactive. Note that this is a partial fix because of things like control variables — the full solution would be to mark these values as reactive, and then re-run InferReactivePlaces. We can do this once we've fully converted our pipeline to use HIR everywhere. For now, this should fix most issues in practice because PruneNonReactiveDependencies already does basic alias tracking (see new fixture).

ghstack-source-id: 364430bbeca4cfca2fbf9df4d92b2e61b3352311
Pull Request resolved: https://github.com/facebook/react/pull/29790",Joe Savona,2024-06-07T19:10:59Z
d193455fc37a91045112fbf0240a289a45173de0,"compiler: Promote pruned scope declarations to temporaries if used in a later scope

There's a category of bug currently where pruned reactive scopes whose outputs are non-reactive can have their code end up inlining into another scope, moving the location of the instruction. Any value that had a scope assigned has to have its order of evaluation preserved, despite the fact that it got pruned, so naively we could just force every pruned scope to have its declarations promoted to named variables.

However, that ends up assigning names to _tons_ of scope declarations that don't really need to be promoted. For example, a scope with just a hook call ends up with:

```
const x = useFoo();

=>

scope {
 $t0 = Call read useFoo$ (...);
}
$t1 = StoreLocal 'x' = read $t0;
```

Where t0 doesn't need to be promoted since it's used immediately to assign to another value which is a non-temporary.

So the idea of this PR is that we can track outputs of pruned scopes which are directly referenced from inside a later scope. This fixes one of the two cases of the above pattern. We'll also likely have to consider values from pruned scopes as always reactive, i'll do that in the next PR.

ghstack-source-id: b37fb9a7cb1430b7c35ec5946269ce5a886a486a
Pull Request resolved: https://github.com/facebook/react/pull/29789",Joe Savona,2024-06-07T19:10:59Z
aa0930452b06cee00a03544f1fbe1a6888578801,"compiler: Represent pruned scopes instead of inlining

There are a few places where we want to check whether a value actually got memoized, and we currently have to infer this based on values that ""should"" have a scope and whether a corresponding scope actually exists. This PR adds a new ReactiveStatement variant to model a reactive scope block that was pruned for some reason, and updates all the passes that prune scopes to instead produce this new variant.

ghstack-source-id: aea6dab469acb1f20058b85cb6f9aafab5d167cd
Pull Request resolved: https://github.com/facebook/react/pull/29781",Joe Savona,2024-06-07T19:10:58Z
a0e99f7a6dbc135f94396bdea3d91c4b40135059,Revert bad push,Rick Hanlon,2024-06-10T14:51:07Z
13cd4018a88b061de9fc10b87aa47eefdc0e6412,don't commit,Rick Hanlon,2024-06-10T14:47:18Z
b6b2ab1e0ce2d0d5df61f21f0201c9a6ec8f253e,try this,Rick Hanlon,2024-06-10T14:46:11Z
6b35ff766aadedae466ce1db0133b38678d75114,"Move @generated from build to sync (#29799)

## Overview

Reverts https://github.com/facebook/react/pull/26616 and implements the
suggested way instead.

This change in #26616 broken the internal sync command, which now
results in duplicated `@generated` headers. It also makes it harder to
detect changes during the diff train sync. Instead, we will check for
changes, and if there are changes sign the files and commit them to the
sync branch.

## Strategy

The new sync strategy accounts for the generated headers during the
sync:
- **Revert Version**: Revert the version strings
- **Revert @generated**: Re-sign the files (will be the same hash as
before if unchanged)
- **Check**: Check if there are changes **if not, skip**
- **Re-apply Version**: Now add back the new version string
- **Re-sign @generated**: And re-generate the headers

Then commit to branch. This ensures that if there are no changes, we'll
skip.

---------

Co-authored-by: Timothy Yung <yungsters@gmail.com>",Ricky,2024-06-10T14:16:40Z
f5af92d2c47d1e1f455faf912b1d3221d1038c37,"feat(compiler): Support MetaProperty (#29752)

## Summary
See #29737

## How did you test this change?
As the feature requires module support and the test runner does
currently not support running tests as modules, I could only test it via
playground.",Niklas Mollenhauer,2024-06-08T23:18:35Z
c2ae9e28bc02fdd29c46b247d908e6b467ef06af,"Minify DEV bundles with closure (#29809)

The goal is to improve speed of the development by inlining and DCE
unused branches.

We have the ability to preserve some variable names and pretty print in
the production version so might as well do the same with DEV.",Sebastian Markbåge,2024-06-08T15:15:57Z
20b6f4c0e8a1f40ee61735201645e0395ff08f94,"[Float][Fiber] Assume stylesheets in document are already loaded (#29811)

When we made stylesheets suspend even during high priority updates we
exposed a bug in the loading tracking of stylesheets that are loaded as
part of the preamble. This allowed these stylesheets to put suspense
boundaries into fallback mode more often than expected because cases
where a stylesheet was server rendered could now cause a fallback to
trigger which was never intended to happen.

This fix updates resource construction to evaluate whether the instance
exists in the DOM prior to construction and if so marks the resource as
loaded and inserted.

One ambiguity that needed to be solved still is how to tell whether a
stylesheet rendered as part of a late Suspense boundary reveal is
already loaded. I updated the instruction to clear out the loading
promise after successfully loading. This is useful because later if we
encounter this same resource again we can avoid the microtask if it is
already loaded. It also means that we can concretely understand that if
a stylesheet is in the DOM without this marker then it must have loaded
(or errored) already.",Josh Story,2024-06-07T23:53:24Z
20841f9a6205a633e6d08a274db974481daaca23,"[compiler] Always emit variable decl in gating mode

This PR makes it so we always emit a const VariableDeclaration for
compiled functions in gating mode. If the original declaration's parent
was an ExportDefaultDeclaration we'll also append a new
ExportDefaultDeclaration pointing to the new identifier. This allows
code that adds optional properties to the function declaration to still
work in gating mode

ghstack-source-id: 5705479135baa268eeb3c85bfbf1883964e84916
Pull Request resolved: https://github.com/facebook/react/pull/29806",Lauren Tan,2024-06-07T19:39:14Z
a65de775e2120b7b8195bfdc75791fc1cb6ac14f,"[compiler] Add repro for func properties bug with gating

When gating is enabled, any function declaration properties that were
previously set (typically `Function.displayName`) would cause a crash
after compilation as the original identifier is no longer present.

ghstack-source-id: beb7e258561ea598d306fa67706d34a8788d9322
Pull Request resolved: https://github.com/facebook/react/pull/29802",Lauren Tan,2024-06-07T19:39:14Z
a0a435d68f2e4e506faef4e763d13cbeb2e819c8,"[Fiber] Track the Real Fiber for Key Warnings (#29791)

This refactors key warning to happen inline after we've matched a Fiber.
I didn't want to do that originally because it was riskier. But it turns
out to be straightforward enough.

This lets us use that Fiber as the source of the warning which matters
to DevTools because then DevTools can associate it with the right
component after it mounts.

We can also associate the duplicate key warning with this Fiber. That
way we'll get the callsite with the duplicate key on the stack and can
associate this warning with the child that had the duplicate.

I kept the forked DevTools tests because the warning now is counted on
the Child instead of the Parent (18 behavior).

However, this won't be released in 19.0.0 so I only test this in
whatever the next version is.

Doesn't seem worth it to have a test for just the 19.0.0 behavior.",Sebastian Markbåge,2024-06-07T17:38:44Z
0a5e0b0c2e496f335136c34663e8763cfa160b82,"[compiler] Fix outdated comment in scripts/release

ghstack-source-id: a37c6faa8b6d0fa443b5a3cb2f0d8398f8e7588c
Pull Request resolved: https://github.com/facebook/react/pull/29800",Lauren Tan,2024-06-07T15:46:53Z
cc1ec60d0de3be60948fc152b2377a42504f551a,"[Flight] Run recreated Errors within a fake native stack (#29717)

Stacked on #29740.

Before:

<img width=""719"" alt=""Screenshot 2024-06-02 at 11 51 20 AM""
src=""https://github.com/facebook/react/assets/63648/8f79fa82-2474-4583-894e-a2329e9a6304"">

After (updated with my patches to Chrome):

<img width=""813"" alt=""Screenshot 2024-06-06 at 5 16 20 PM""
src=""https://github.com/facebook/react/assets/63648/bcc4f52f-e0ac-4708-ac2b-9629acdff705"">

Sources panel after:

<img width=""1188"" alt=""Screenshot 2024-06-06 at 5 14 21 PM""
src=""https://github.com/facebook/react/assets/63648/2c673fac-d32d-42e4-8fac-bb63704e4b7f"">

The fake eval file is now under ""React"" and the real file is now under
`file://`",Sebastian Markbåge,2024-06-07T15:54:14Z
142b2a8230130ddf3de8a9c8e7799a291f4d1a97,"www: make disableLegacyMode dynamic flag (#29774)

This makes the flag dynamic for Meta and turns it on for the www test
renderer.",Jan Kassens,2024-06-07T11:36:10Z
827cbea417a4058ce544184adff2ee2014625309,"compiler: Add support for ref effects

Fixes false positives where we currently disallow mutations of refs from callbacks passed to JSX, if the ref is also passed to jsx. We consider these to be mutations of ""frozen"" values, but refs are explicitly allowed to have interior mutability. The fix is to always allow (at leat within InferReferenceEffects) for refs to be mutated. This means we completely rely on ValidateNoRefAccessInRender to validate ref access and stop reporting false positives.

ghstack-source-id: 1a30609f5f7831086077d10dac46ab70687f47e0
Pull Request resolved: https://github.com/facebook/react/pull/29733",Joe Savona,2024-06-07T00:02:19Z
c4b433f8cb31d6f73d4a800fcf11ed55c8689daf,"[Flight] Allow aborting during render (#29764)

Stacked on #29491

Previously if you aborted during a render the currently rendering task
would itself be aborted which will cause the entire model to be replaced
by the aborted error rather than just the slot currently being rendered.

This change updates the abort logic to mark currently rendering tasks as
aborted but allowing the current render to emit a partially serialized
model with an error reference in place of the current model.

The intent is to support aborting from rendering synchronously, in
microtasks (after an await or in a .then) and in lazy initializers. We
don't specifically support aborting from things like proxies that might
be triggered during serialization of props",Josh Story,2024-06-06T21:41:27Z
fe5ce4e3e969aca4705b9973a6fdb5f132e03025,"fix[react-devtools/store-test]: fork the test to represent current be… (#29777)

## Summary

The test started to fail after
https://github.com/facebook/react/pull/29088.

Fork the test and the expected store state for:
- React 18.x, to represent the previous behavior
- React >= 19, to represent the current RDT behavior, where error can't
be connected to the fiber, because it was not yet mounted and shared
with DevTools.

Ideally, DevTools should start keeping track of such fibers, but also
distinguish them from some that haven't mounted due to Suspense or error
boundaries.",Ruslan Lesiutin,2024-06-06T19:01:15Z
90499a730ed53c29c2321faaf19e77b4ebeeada4,"Fix RN version string in builds (#29787)

The version was set for React but not the renderers",Ricky,2024-06-06T18:07:16Z
29b12787902acff714466e5eb656a7ab0f978836,"[compiler] Check for __DEV__ for FastRefresh

We don't always have the NODE_ENV set, so additionally check for the
__DEV__ global if it has one set.

ghstack-source-id: 3719a4710a5fb1b4abf511f469c815917b7dfdf4
Pull Request resolved: https://github.com/facebook/react/pull/29785",Lauren Tan,2024-06-06T17:38:54Z
70194be4038158f5ba8e55e27f7ffd02be13bbca,"fix<compiler>: reread the testfilter file if filter enabled during the watch process (#29775)

Resolve #29720
In the above PR, I overlooked that we can change the filter mode during the watch process. Now it's fixed.",XiaoPi,2024-06-06T17:48:24Z
1e1e5cd25223fddbce0e3fb7889b06df0d93a950,"[Flight] Schedule work in a microtask (#29491)

Stacked on #29551

Flight pings much more often than Fizz because async function components
will always take at least a microtask to resolve . Rather than
scheduling this work as a new macrotask Flight now schedules pings in a
microtask. This allows more microtasks to ping before actually doing a
work flush but doesn't force the vm to spin up a new task which is quite
common give n the nature of Server Components",Josh Story,2024-06-06T17:19:57Z
b526a0a419029eea31f4d967951b6feca123012d,"[Flight][Fizz] schedule work async (#29551)

While most builds of Flight and Fizz schedule work in new tasks some do
execute work synchronously. While this is necessary for legacy APIs like
renderToString for modern APIs there really isn't a great reason to do
this synchronously.

We could schedule works as microtasks but we actually want to yield so
the runtime can run events and other things that will unblock additional
work before starting the next work loop.

This change updates all non-legacy uses to be async using the best
availalble macrotask scheduler.

Browser now uses postMessage
Bun uses setTimeout because while it also supports setImmediate the
scheduling is not as eager as the same API in node
the FB build also uses setTimeout

This change required a number of changes to tests which were utilizing
the sync nature of work in the Browser builds to avoid having to manage
timers and tasks. I added a patch to install MessageChannel which is
required by the browser builds and made this patched version integrate
with the Scheduler mock. This way we can effectively use `act` to flush
flight and fizz work similar to how we do this on the client.",Josh Story,2024-06-06T17:07:24Z
fd6e130b00d4d1fe211c75e981160131669c4412,"Default native inspections config false (#29784)

## Summary

To make the config `supportsNativeInspection` explicit, set it to
default to `false` and only allow it in the extension.

## How did you test this change?
When disabled on **React DevTools extension**
<img width=""419"" alt=""Screenshot 2024-06-06 at 17 34 02""
src=""https://github.com/facebook/react/assets/5188459/0052b645-2214-475c-8b41-4f9207ca3343"">

When enabled on **React DevTools extension** (the chosen config)
<img width=""425"" alt=""Screenshot 2024-06-06 at 17 34 53""
src=""https://github.com/facebook/react/assets/5188459/df34ec8e-2039-4984-86c8-74feaf89bbdd"">

When enabled on **React DevTools in Fusebox**
<img width=""1170"" alt=""Screenshot 2024-06-06 at 17 29 24""
src=""https://github.com/facebook/react/assets/5188459/ae52274b-583d-463c-8482-2323d502f4c0"">

When disabled on **React DevTools in Fusebox** (the chosen config)
<img width=""1453"" alt=""Screenshot 2024-06-06 at 17 30 31""
src=""https://github.com/facebook/react/assets/5188459/cba5b51b-c973-412d-8ad0-382a4f9bf115"">

When enabled on **React DevTools Inline**
<img width=""915"" alt=""Screenshot 2024-06-06 at 17 24 20""
src=""https://github.com/facebook/react/assets/5188459/f0d61d99-2b75-4a87-a19e-db431be697e3"">

When disabled on **React DevTools Inline** (the chosen config)
<img width=""844"" alt=""Screenshot 2024-06-06 at 17 19 39""
src=""https://github.com/facebook/react/assets/5188459/d3bcc8a7-535d-4656-844d-f9f89bb2b248"">

When enabled on **React DevTools standalone**
<img width=""1227"" alt=""Screenshot 2024-06-06 at 17 23 16""
src=""https://github.com/facebook/react/assets/5188459/174fbae6-1412-4539-bbe6-e1d0e8baa7d5"">

When disabled on **React DevTools standalone** (the chosen config)
<img width=""844"" alt=""Screenshot 2024-06-06 at 17 19 39""
src=""https://github.com/facebook/react/assets/5188459/00c46907-e3a6-4766-a1b4-dd088cac2157"">",Vitali Zaidman,2024-06-06T16:48:44Z
99da76f23ac85d279457470f8fb19a9b2f173ed0,"fix[react-devtools] remove native inspection button when it can't be used (#29779)

## Summary

There's no native inspection available in any of the React-Native
devtools:
* **React DevTools in Fusebox**
* **React DevTools standalone**

Besides, **React DevTools Inline** can't really open the devtools and
point to the native inspector because of lack of an API to do that.

Only **React DevTools extension** can actually do that.

That's why I've disabled it for the first 3 flavours of React DevTools
mentioned above.


## How did you test this change?
Still enabled on **React DevTools extension**
<img width=""1355"" alt=""Screenshot 2024-06-06 at 16 09 21""
src=""https://github.com/facebook/react/assets/5188459/a9b658a6-eafe-443c-9298-280bb9f4ed72"">

Disabled on **React DevTools in Fusebox**
<img width=""1670"" alt=""Screenshot 2024-06-06 at 16 04 28""
src=""https://github.com/facebook/react/assets/5188459/a2ded76f-2aaf-47ce-b581-611494ca33bd"">

Disabled on **React DevTools standalone**
<img width=""1268"" alt=""Screenshot 2024-06-06 at 16 15 08""
src=""https://github.com/facebook/react/assets/5188459/eb2f308d-32cb-43ea-921b-3503aa874d64"">

Disabled on **React DevTools Inline**
<img width=""1206"" alt=""Screenshot 2024-06-06 at 16 09 26""
src=""https://github.com/facebook/react/assets/5188459/03da741a-66bf-4414-91f7-2f344c78a880"">",Vitali Zaidman,2024-06-06T16:10:40Z
704aeed022f4277cd5604bf6d76199a6cfe4707f,"feat<Compiler>: consider that the dispatch function from `useReducer` is non-reactive (#29705)

Summary
The dispatch function from useReducer is stable, so it is also non-reactive.

the related PR: #29665
the related comment: #29674 (comment)

I am not sure if the location of the new test file is appropriate😅.

How did you test this change?
Added the specific test compiler/packages/babel-plugin-react-compiler/src/__tests__/fixtures/compiler/useReducer-returned-dispatcher-is-non-reactive.expect.md.",XiaoPi,2024-06-05T23:51:09Z
3730b40e9bbacef0279f6d120b344c1544cb38ba,"chore[react-devtools]: ip => internal-ip (#29772)

## Summary

There was an attempt to upgrade `ip` to 2.0.1 to mitigate CVE in
https://github.com/facebook/react/pull/29725#issuecomment-2150389616,
but there actually another one CVE in version `2.0.1`. Instead, migrate
to `internal-ip`, which similarly small package that we can use

Note: not upgrading to version 7+, because they are pure ESM.

## How did you test this change?

Validated that standalone version of RDT works and connects to the app.",Ruslan Lesiutin,2024-06-05T18:58:12Z
eb259b5d3b20b053dc0444e6ae442774c396c4a7,"Add enableShallowPropDiffing feature flag (#29664)

## Summary

We currently do deep diffing for object props, and also use custom
differs, if they are defined, for props with custom attribute config.

The idea is to simply do a `===` comparison instead of all that work. We
will do less computation on the JS side, but send more data to native.

The hypothesis is that this change should be neutral in terms of
performance. If that's the case, we'll be able to get rid of custom
differs, and be one step closer to deleting view configs.

This PR adds the `enableShallowPropDiffing` feature flag to support this
experiment.

## How did you test this change?

With `enableShallowPropDiffing` hardcoded to `true`:
```
yarn test packages/react-native-renderer
```
This fails on the following test cases:
- should use the diff attribute
- should do deep diffs of Objects by default
- should skip deeply-nested changed functions

Which makes sense with this change. These test cases should be deleted
if the experiment is shipped.",Dmytro Rykun,2024-06-05T14:07:58Z
8d87e374ac69904012530af702af1cd51d90e07d,"Fix #29724: `ip` dependency update for CVE-2024-29415 (#29725)

## Summary

This version update of `ip` dependency solves the CVE-2024-29415
vulnerability.",Batuhan Tomo,2024-06-05T10:17:35Z
1df34bdf626af3e4566364dcdf7f1c387d2f4252,"[Flight] Override prepareStackTrace when reading stacks (#29740)

This lets us ensure that we use the original V8 format and it lets us
skip source mapping. Source mapping every call can be expensive since we
do it eagerly for server components even if an error doesn't happen.

In the case of an error being thrown we don't actually always do this in
practice because if a try/catch before us touches it or if something in
onError touches it (which the default console.error does), it has
already been initialized. So we have to be resilient to thrown errors
having other formats.

These are not as perf sensitive since something actually threw but if
you want better perf in these cases, you can simply do something like
`onError(error) { console.error(error.message) }` instead.

The server has to be aware whether it's looking up original or compiled
output. I currently use the file:// check to determine if it's referring
to a source mapped file or compiled file in the fixture. A bundled app
can more easily check if it's a bundle or not.",Sebastian Markbåge,2024-06-05T07:41:37Z
d2767c96e80a6fdc35b002f1518d01d90e2a8528,"[Flight] Encode fragments properly in DEV (#29762)

Normally we take the renderClientElement path but this is an internal
fast path.

No tests because we don't run tests with console.createTask (which is
not easy since we test component stacks).

Ideally this would be covered by types but since the types don't
consider flags and DEV it doesn't really help.",Sebastian Markbåge,2024-06-04T22:10:06Z
eabb681535ab9582c0785049c5a16f8851430ff2,"Add xplat test variants (#29734)

## Overview

We didn't have any tests that ran in persistent mode with the xplat
feature flags (for either variant).

As a result, invalid test gating like in
https://github.com/facebook/react/pull/29664 were not caught.

This PR adds test flavors for `ReactFeatureFlag-native-fb.js` in both
variants.",Ricky,2024-06-04T17:07:29Z
9185b9b1e4a716f90774c4c5501fe3925bc7c402,"Remove startTransition and useActionState from react-server condition of react (#29753)

<!--
  Thanks for submitting a pull request!
We appreciate you spending the time to work on these changes. Please
provide enough information so that others can review your pull request.
The three fields below are mandatory.

Before submitting a pull request, please make sure the following is
done:

1. Fork [the repository](https://github.com/facebook/react) and create
your branch from `main`.
  2. Run `yarn` in the repository root.
3. If you've fixed a bug or added code that should be tested, add tests!
4. Ensure the test suite passes (`yarn test`). Tip: `yarn test --watch
TestName` is helpful in development.
5. Run `yarn test --prod` to test in the production environment. It
supports the same options as `yarn test`.
6. If you need a debugger, run `yarn test --debug --watch TestName`,
open `chrome://inspect`, and press ""Inspect"".
7. Format your code with
[prettier](https://github.com/prettier/prettier) (`yarn prettier`).
8. Make sure your code lints (`yarn lint`). Tip: `yarn linc` to only
check changed files.
  9. Run the [Flow](https://flowtype.org/) type checks (`yarn flow`).
  10. If you haven't already, complete the CLA.

Learn more about contributing:
https://reactjs.org/docs/how-to-contribute.html
-->

## Summary

Remove `startTransition` and `useActionState` from `react-server`
condition of react, as they should only stay in client bundle.
This will reduce the server bundle of react itself. 

Found this while tracing where the `process.emit` was called.

<!--
Explain the **motivation** for making this change. What existing problem
does the pull request solve?
-->

## How did you test this change?

<!--
Demonstrate the code is solid. Example: The exact commands you ran and
their output, screenshots / videos if the pull request changes the user
interface.
How exactly did you verify that your PR solves the issue you wanted to
solve?
  If you leave this empty, your PR will very likely be closed.
-->",Jiachi Liu,2024-06-04T16:23:36Z
a26e90c29cfa841d3e2bc08876c5929d5680fb6d,"www: set enableRefAsProp to true (#29756)

www: set enableRefAsProp to true",Jan Kassens,2024-06-04T15:17:19Z
408258268edb5acdfdbf77bc6e0b0dc6396c0e6f,"fix<compiler>: only call readTestFilter if the filter option is enabled (#29720)

Following the instructions in the compiler/docs/DEVELOPMENT_GUIDE.md, we are stuck on the command `yarn snap --watch` because it calls readTestFilter even though the filter option is not enabled.",XiaoPi,2024-06-03T23:09:58Z
8b677b1e6ea6cd0f7a5c3b32164c127f1fceb360,"compiler: Allow opting out of installed library check

ghstack-source-id: eedd024d36f66a68abe43ba0f679e2d462b77505
Pull Request resolved: https://github.com/facebook/react/pull/29742",Joe Savona,2024-06-03T21:20:41Z
8c3697a849b7e9ceeb47642ba61c270b7e6dd176,"Fix xplat sync to ignore @generated header (#29738)

Use some clever git diffing to ignore lines that only change the
`@generated` header. We can't do this for the version string because the
version string can be embedded in lines with other changes, but this
header is always on one line.",Ricky,2024-06-03T20:39:38Z
4dcdf21325028d7ae9bb3c2172dbbe9647a744ac,"[Fiber] Prefix owner stacks with the current stack at the console call (#29697)

This information is available in the regular stack but since that's
hidden behind an expando and our appended stack to logs is not hidden,
it hides the most important frames like the name of the current
component.

This is closer to what happens to the native stack.

We only include stacks if they're within a ReactFiberCallUserSpace call
frame. This should be most that have a current fiber but this is
critical to filtering out most React frames if the regular node_modules
filter doesn't work.

Most React warnings fire during the rendering phase and not inside a
user space function but some do like hooks warnings and setState in
render. This feature is more important if we port this to React DevTools
appending stacks to all logs where it's likely to originate from inside
a component and you want the line within that component to immediately
part of the visible stack.

One thing that kind sucks is that we don't have a reliable way to
exclude React internal stack frames. We filter node_modules but it might
not match. For other cases I try hard to only track the stack frame at
the root of React (e.g. immediately inside createElement) until the
ReactFiberCallUserSpace so we don't need the filtering to work. In this
case it's hard to achieve the same thing though. This is easier in RDT
because we have the start/end line and parsing of stack traces so we can
use that to exclude internals but that's a lot of code/complexity for
shipping within the library.

For example in Safari:

<img width=""590"" alt=""Screenshot 2024-05-31 at 6 15 27 PM""
src=""https://github.com/facebook/react/assets/63648/2820c8c0-8a03-42e9-8678-8348f66b051a"">

Ideally warnOnUseFormStateInDev and useFormState wouldn't be included
since they're React internals. Before this change, the Counter.js line
also wasn't included though which points to exactly where the error is
within the user code.

(Note Server Components have V8 formatted lines and Client Components
have JSC formatted lines.)",Sebastian Markbåge,2024-06-03T16:26:38Z
bf3a29d097a5d457e85a58a183fb9e12714fbece,"Update build script to automatically generate RCs (#29736)

RC releases are a special kind of prerelease build because unlike
canaries we shouldn't publish new RCs from any commit on `main`, only
when we intentionally bump the RC number. But they are still prerelases
— like canary and experimental releases, they should use exact version
numbers in their dependencies (no ^).

We only need to generate these builds during the RC phase, i.e. when the
canary channel label is set to ""rc"".

Example of resulting package.json output:

```json
{
  ""name"": ""react-dom"",
  ""version"": ""19.0.0-rc.0"",
  ""dependencies"": {
    ""scheduler"": ""0.25.0-rc.0""
  },
  ""peerDependencies"": {
    ""react"": ""19.0.0-rc.0""
  }
}
```


https://react-builds.vercel.app/prs/29736/files/oss-stable-rc/react-dom/package.json",Andrew Clark,2024-06-03T16:21:21Z
9598c41a20162c8a9d57ccf6a356aa183b00b61a,"useActionState: On error, cancel remaining actions (#29695)

Based on

- #29694 

---

If an action in the useActionState queue errors, we shouldn't run any
subsequent actions. The contract of useActionState is that the actions
run in sequence, and that one action can assume that all previous
actions have completed successfully.

For example, in a shopping cart UI, you might dispatch an ""Add to cart""
action followed by a ""Checkout"" action. If the ""Add to cart"" action
errors, the ""Checkout"" action should not run.

An implication of this change is that once useActionState falls into an
error state, the only way to recover is to reset the component tree,
i.e. by unmounting and remounting. The way to customize the error
handling behavior is to wrap the action body in a try/catch.",Andrew Clark,2024-06-03T15:25:43Z
67b05be0d216c4efebc4bb5acb12c861a18bd87c,"useActionState: Transfer transition context (#29694)

Mini-refactor of useActionState to only wrap the action in a transition
context if the dispatch is called during a transition. Conceptually, the
action starts as soon as the dispatch is called, even if the action is
queued until earlier ones finish.

We will also warn if an async action is dispatched outside of a
transition, since that is almost certainly a mistake. Ideally we would
automatically upgrade these to a transition, but we don't have a great
way to tell if the action is async until after it's already run.",Andrew Clark,2024-06-03T15:20:27Z
def67b9b329c8aa204e611cd510c5a64680aee58,"Fix stylesheet typo in 29693 (#29732)

stylehsheet -> stylesheet",Josh Story,2024-06-03T14:51:21Z
47d0c30246134ad9ce04abdcf0977cf2d49d00ce,"[Fiber][Float] Error when a host fiber changes ""flavor"" (#29693)

Host Components can exist as four semantic types

1. regular Components (Vanilla obv)
2. singleton Components
2. hoistable components
3. resources

Each of these component types have their own rules related to mounting
and reconciliation however they are not direclty modeled as their own
unique fiber type. This is partly for code size but also because
reconciling the inner type of these components would be in a very hot
path in fiber creation and reconciliation and it's just not practical to
do this logic check here.

Right now we have three Fiber types used to implement these 4 concepts
but we probably need to reconsider the model and think of Host
Components as a single fiber type with an inner implementation. Once we
do this we can regularize things like transitioning between a resource
and a regular component or a singleton and a hoistable instance. The
cases where these transitions happen today aren't particularly common
but they can be observed and currently the handling of these transitions
is incomplete at best and buggy at worst. The most egregious case is the
link type. This can be a regular component (stylesheet without
precedence) a hoistable component (non stylesheet link tags) or a
resource (stylesheet with a precedence) and if you have a single jsx
slot that tries to reconcile transitions between these types it just
doesn't work well.

This commit adds an error for when a Hoistable goes from Instance to
Resource. Currently this is only possible for `<link>` elements going to
and from stylesheets with precedence. Hopefully we'll be able to remove
this error and implement as an inner type before we encounter new
categories for the Hoistable types

detecting type shifting to and from regular components is harder to do
efficiently because we don't want to reevaluate the type on every update
for host components which is currently not required and would add
overhead to a very hot path

singletons can't really type shift in their one practical implementation
(DOM) so they are only a problem in theroy not practice",Josh Story,2024-06-03T14:47:45Z
b421783110fb20f139adf4c4f9a8911dc63f9c68,Don't skip www commit,Rick Hanlon,2024-06-03T14:21:28Z
5ad2c37273b7c192011010c6bdb9ac0a4c9c232f,"Skip empty sync commits (both repos) (#29707)

Requires https://github.com/facebook/react/pull/29706

The strategy here is to:
- Checkout the builds/facebook-www branch
- Read the current sync'd VERSION
- Checkout out main and sync new build
- sed/{new version string}/{old version string}
- Run git status, skip sync if clean
- Otherwise, sed/{old version string}/{new version string} and push
commit

This means that:
- We're using the real version strings from the builds
- We are checking the last commit on the branch for the real last
version
- We're skipping any commits that won't result in changes
- ???
- Profit!",Ricky,2024-06-03T14:09:23Z
ba099e442b602b9414693dab9cfa67e19051037c,"[Flight] Add findSourceMapURL option to get a URL to load Server source maps from (#29708)

This lets you click a stack frame on the client and see the Server
source code inline.

<img width=""871"" alt=""Screenshot 2024-06-01 at 11 44 24 PM""
src=""https://github.com/facebook/react/assets/63648/581281ce-0dce-40c0-a084-4a6d53ba1682"">

<img width=""840"" alt=""Screenshot 2024-06-01 at 11 43 37 PM""
src=""https://github.com/facebook/react/assets/63648/00dc77af-07c1-4389-9ae0-cf1f45199efb"">

We could do some logic on the server that sends a source map url for
every stack frame in the RSC payload. That would make the client
potentially config free. However regardless we need the config to
describe what url scheme to use since that’s not built in to the bundler
config. In practice you likely have a common pattern for your source
maps so no need to send data over and over when we can just have a
simple function configured on the client.

The server must return a source map, even if the file is not actually
compiled since the fake file is still compiled.

The source mapping strategy can be one of two models depending on if the
server’s stack traces (`new Error().stack`) are source mapped back to
the original (`—enable-source-maps`) or represents the location in
compiled code (like in the browser).

If it represents the location in compiled code it’s actually easier. You
just serve the source map generated for that file by the tooling.

If it is already source mapped it has to generate a source map where
everything points to the same location (as if not compiled) ideally with
a segment per logical ast node.",Sebastian Markbåge,2024-06-03T02:58:24Z
d77dd31a329df55a051800fc76668af8da8332b4,Bump version to 0.0.0-experimental-7054a14-20240601,Lauren Tan,2024-05-31T23:15:27Z
c6b651bee0db49326ece8ad9f19a8d6339193c51,Bump version to 0.0.0-experimental-51a85ea-20240601,Lauren Tan,2024-05-31T23:15:27Z
b17016c86992843c1764b39a11128ec0fc4859ed,Bump version to 0.0.0-experimental-938cd9a-20240601,Lauren Tan,2024-05-31T23:15:27Z
113c8e7f72bcf5d3bc285546da1508b45da3cf53,"[compiler:eslint] Don't crash if hermes parser fails to parse

Eslint rules should never throw, so if we fail to parse with Babel or
Hermes, we should just ignore the error. This should fix issues such as
trying to run the eslint rule on non tsx|ts|jsx|js files, Hermes parser
not supporting certain JS syntax, etc.

I didn't add a test for this as our eslint-rule-tester config uses
hermes-eslint parser, so it wasn't possible to add a top level await as
it would crash hermes-eslint before our rule was triggered. Similarly I
couldn't add a test for non-JS files as it would not be parseable by
hermes-eslint.

Fixes #29107

ghstack-source-id: 60afcdb89ab4a8d2e4697cc50c5490803e7cbeac
Pull Request resolved: https://github.com/facebook/react/pull/29631",Lauren Tan,2024-05-31T00:18:26Z
adbec0c25aff07f04b0678679554505ba2813168,"Fix: `useTransition` after `use` gets stuck in pending state (#29670)

When a component suspends with `use`, we switch to the ""re-render""
dispatcher during the subsequent render attempt, so that we can reuse
the work from the initial attempt. However, once we run out of hooks
from the previous attempt, we should switch back to the regular ""update""
dispatcher.

This is conceptually the same fix as the one introduced in
https://github.com/facebook/react/pull/26232. That fix only accounted
for initial mount, but the useTransition regression test added in
f82973302b3f490ec120c3b102e8c3792452dfc9 illustrates that we need to
handle updates, too.

The issue affects more than just useTransition but because most of the
behavior between the ""re-render"" and ""update"" dispatchers is the same
it's hard to contrive other scenarios in a test, which is probably why
it took so long for someone to notice.

Closes #28923 and #29209

---------

Co-authored-by: eps1lon <sebastian.silbermann@vercel.com>",Andrew Clark,2024-05-31T21:52:47Z
ec6fe57a5027d60a959493a2e44b6872b8de0ab8,"[compiler] rfc: Include location information in identifiers and reactive scopes for debugging

Summary: Using the change detection code to debug codebases that violate the rules of react is a lot easier when we have a source location corresponding to the value that has changed inappropriately. I didn't see an easy way to track that information in the existing data structures at the point of codegen, so this PR adds locations to identifiers and reactive scopes (the location of a reactive scope is the range of the locations of its included identifiers).

I'm interested if there's a better way to do this that I missed!

ghstack-source-id: aed5f7eddae7256f41da4389e8f16fcb3daaee49
Pull Request resolved: https://github.com/facebook/react/pull/29658",Mike Vitousek,2024-05-31T21:06:04Z
522d22f29904f2164210b3ae218b9b69b61e9a4c,"[compiler] Recompute values every time

Summary: This PR expands the analysis from the previous in the stack in order to also capture when a value can incorrectly change within a single render, rather than just changing between two renders. In the case where dependencies have changed and so a new value is being computed, we now compute the value twice and compare the results. This would, for example, catch when we call Math.random() in render.

The generated code is a little convoluted, because we don't want to have to traverse the generated code and substitute variable names with new ones. Instead, we save the initial value to the cache as normal, then run the computation block again and compare the resulting values to the cached ones. Then, to make sure that the cached values are identical to the computed ones, we reassign the cached values into the output variables.

ghstack-source-id: d0f11a4cb2a612cbffdfdcaa9e75efbd6e38019f
Pull Request resolved: https://github.com/facebook/react/pull/29657",Mike Vitousek,2024-05-31T21:06:02Z
c69211a9dfa683038b1a758aba2ca09c7862a6d3,"[compiler] Prune dependencies that are only used by useRef or useState

Summary: jmbrown215 recently had an observation that the arguments to useState/useRef are only used when a component renders for the first time, and never afterwards. We can skip more computation that we previously could, with reactive blocks that previously recomputed values when inputs changed now only ever computing them on the first render.

ghstack-source-id: 5d044ef787a7da901c70990f4399aa90c9b96802
Pull Request resolved: https://github.com/facebook/react/pull/29653",Mike Vitousek,2024-05-31T21:06:00Z
5c420e3824859b33321b4bc9ce3119806fac56c2,"[compiler] Debug tool to emit change detection code rather than memoization

Summary: The essential assumption of the compiler is that if the inputs to a computation have not changed, then the output should not change either--computation that the compiler optimizes is idempotent.

This is, of course, known to be false in practice, because this property rests on requirements (the Rules of React) that are loosely enforced at best. When rolling out the compiler to a codebase that might have rules of react violations, how should developers debug any issues that arise?

This diff attempts one approach to that: when the option is set, rather than simply skipping computation when dependencies haven't changed, we will *still perform the computation*, but will then use a runtime function to compare the original value and the resultant value. The runtime function can be customized, but the idea is that it will perform a structural equality check on the values, and if the values aren't structurally equal, we can report an error, including information about what file and what variable was to blame.

This assists in debugging by narrowing down what specific computation is responsible for a difference in behavior between the uncompiled code and the program after compilation.

ghstack-source-id: 50dad3dacfc7fef74be350431aa2ebf5e9cb0031
Pull Request resolved: https://github.com/facebook/react/pull/29656",Mike Vitousek,2024-05-31T21:05:58Z
8b01a2e0bf17adc6bb7b81d1d0063c7efe9ea8b1,"[compiler] Option to always take the non-memo branch

Summary: This adds a debugging mode to the compiler that simply adds a `|| true` to the guard on all memoization blocks, which results in the generated code never using memoized values and always recomputing them. This is designed as a validation tool for the compiler's correctness--every program *should* behave exactly the same with this option enabled as it would with it disabled, and so any difference in behavior should be investigated as either a compiler bug or a pipeline issue.

(We add `|| true` rather than dropping the conditional block entirely because we still want to exercise the guard tests, in case the guards themselves are the source of an error, like reading a property from undefined in a guard.)

ghstack-source-id: 955a47ec1689842da82552225a19a1008c57fe2c
Pull Request resolved: https://github.com/facebook/react/pull/29655",Mike Vitousek,2024-05-31T21:04:54Z
28fe581bac10ca91b0d12d95beb034cfe790f3d0,"[compiler] Option for preserving calls to useMemo/useCallback

Summary: This adds a compiler option to not drop existing manual memoization and leaving useMemo/useCallback in the generated source. Why do we need this, given that we also have options to validate or ensure that existing memoization is preserved? It's because later diffs on this stack are designed to alter the behavior of the memoization that the compiler emits, in order to detect rules of react violations and debug issues. We don't want to change the behavior of user-level memoization, however, since doing so would be altering the semantics of the user's program in an unacceptable way.

ghstack-source-id: 89dccdec9ccb4306b16e849e9fa2170bb5dd021f
Pull Request resolved: https://github.com/facebook/react/pull/29654",Mike Vitousek,2024-05-31T21:02:12Z
8bc81ca90fb0afb3fe4a28d8931733a3e6fef994,"Create a root task for every Flight response (#29673)

This lets any element created from the server, to bottom out with a
client ""owner"" which is the creator of the Flight request. This could be
a Server Action being invoked or a router.

This is similar to how a client element bottoms out in the creator of
the root element without an owner. E.g. where the root app element was
created.

Without this, we inherit the task of whatever is currently executing
when we're parsing which can be misleading.

Before:
<img width=""507"" alt=""Screenshot 2024-05-30 at 12 06 57 PM""
src=""https://github.com/facebook/react/assets/63648/e234db7e-67f7-404c-958a-5c5500ffdf1f"">

After:
<img width=""555"" alt=""Screenshot 2024-05-30 at 4 59 04 PM""
src=""https://github.com/facebook/react/assets/63648/8ba6acb4-2ffd-49d4-bd44-08228ad4200e"">

The before/after doesn't show much of a difference here but that's just
because our Flight parsing loop is an async, which maybe it shouldn't be
because it can be unnecessarily deep, and it creates a hidden line for
every loop. That's what the `Promise.then` is. If the element is lazily
initialized it's worse because we can end up in an unrelated render task
as the owner - although that's its own problem.",Sebastian Markbåge,2024-05-31T17:54:10Z
6d3110b4d95a8594b0cbe437c9d71d3e2f2ba2d4,"Don't allow blank issues (#29691)

We're getting a ton of issues filed using the blank template, for
example these airline support tickets:
https://github.com/facebook/react/issues/29678


I think someone somewhere is linking to our issues with pre-filled
content. This fixes it by forcing a template to be used.",Ricky,2024-05-31T16:05:32Z
63d673c67656390d776bfa082c6ab49f0c636582,"Use both displayName and name in forwardRef/memo (#29625)

When defining a displayName on forwardRef/memo we forward that name to
the inner function.

We used to use displayName for this but in #29206 I switched this to use
`""name""`. That's because V8 doesn't use displayName, it only uses the
overridden name in stack traces. This is the only thing covered by our
tests for component stacks.

However, I realized that Safari only uses displayName and not the name.
So this sets both.",Sebastian Markbåge,2024-05-31T04:22:22Z
8fd963a1e5ec89459cac27fb1d9ad193a0604110,"Fix Missing `key` Validation in `React.Children` (#29675)

## Summary

In https://github.com/facebook/react/pull/29088, the validation logic
for `React.Children` inspected whether `mappedChild` — the return value
of the map callback — has a valid `key`. However, this deviates from
existing behavior which only warns if the original `child` is missing a
required `key`.

This fixes false positive `key` validation warnings when using
`React.Children`, by validating the original `child` instead of
`mappedChild`.

This is a more general fix that expands upon my previous fix in
https://github.com/facebook/react/pull/29662.

## How did you test this change?

```
$ yarn test ReactChildren-test.js
```",Timothy Yung,2024-05-31T01:02:47Z
aa3d6c0840357eb469df9bd1c20b201197ce3bdc,"Add react-easy-state to list of known incompatible libraries. (#29661)

Like mobx, this library depends on mutating a Proxied store and breaks reference equality checks.",Josh Wilson,2024-05-30T23:37:09Z
9710853baf9649fed556dc0e9d39765649675b7b,"[Flight] Try/Catch Eval (#29671)

Follow up to https://github.com/facebook/react/pull/29632.

It's possible for `eval` to throw such as if we're in a CSP environment.
This is non-essential debug information. We can still proceed to create
a fake stack entry. It'll still have the right name. It just won't have
the right line/col number nor source url/source map. It might also be
ignored listed since it's inside Flight.",Sebastian Markbåge,2024-05-30T19:00:55Z
9d4fba078812de0363fe9514b943650fa479e8af,"[Flight] Eval Fake Server Component Functions to Recreate Native Stacks (#29632)

We have three kinds of stacks that we send in the RSC protocol:

- The stack trace where a replayed `console.log` was called on the
server.
- The JSX callsite that created a Server Component which then later
called another component.
- The JSX callsite that created a Host or Client Component.

These stack frames disappear in native stacks on the client since
they're executed on the server. This evals a fake file which only has
one call in it on the same line/column as the server. Then we call
through these fake modules to ""replay"" the callstack. We then replay the
`console.log` within this stack, or call `console.createTask` in this
stack to recreate the stack.

The main concern with this approach is the performance. It adds
significant cost to create all these eval:ed functions but it should
eventually balance out.

This doesn't yet apply source maps to these. With source maps it'll be
able to show the server source code when clicking the links.

I don't love how these appear.

- Because we haven't yet initialized the client module we don't have the
name of the client component we're about to render yet which leads to
the `<...>` task name.
- The `(async)` suffix Chrome adds is still a problem.
- The VMxxxx prefix is used to disambiguate which is noisy. Might be
helped by source maps.
- The continuation of the async stacks end up rooted somewhere in the
bootstrapping of the app. This might be ok when the bootstrapping ends
up ignore listed but it's kind of a problem that you can't clear the
async stack.

<img width=""927"" alt=""Screenshot 2024-05-28 at 11 58 56 PM""
src=""https://github.com/facebook/react/assets/63648/1c9d32ce-e671-47c8-9d18-9fab3bffabd0"">

<img width=""431"" alt=""Screenshot 2024-05-28 at 11 58 07 PM""
src=""https://github.com/facebook/react/assets/63648/52f57518-bbed-400e-952d-6650835ac6b6"">
<img width=""327"" alt=""Screenshot 2024-05-28 at 11 58 31 PM""
src=""https://github.com/facebook/react/assets/63648/d311a639-79a1-457f-9a46-4f3298d07e65"">

<img width=""817"" alt=""Screenshot 2024-05-28 at 11 59 12 PM""
src=""https://github.com/facebook/react/assets/63648/3aefd356-acf4-4daa-bdbf-b8c8345f6d4b"">",Sebastian Markbåge,2024-05-30T16:00:46Z
fb61a1b515c5ea0e31b0dac19184454a79c4baf1,"fix[ReactDebugHooks/find-primitive-index]: remove some assumptions (#29652)

Partially reverts https://github.com/facebook/react/pull/28593.

While rolling out RDT 5.2.0, I've observed some issues on React Native
side: hooks inspection for some complex hook trees, like in
AnimatedView, were broken. After some debugging, I've noticed a
difference between what is in frame's source.

The difference is in the top-most frame, where with V8 it will correctly
pick up the `Type` as `Proxy` in `hookStack`, but for Hermes it will be
`Object`. This means that for React Native this top most frame is
skipped, since sources are identical.

Here I am reverting back to the previous logic, where we check each
frame if its a part of the wrapper, but also updated `isReactWrapper`
function to have an explicit case for `useFormStatus` support.",Ruslan Lesiutin,2024-05-30T15:11:56Z
5bd403122645ef0f0924ac5466f56e670a8f5b8d,"Revert Build Versions from Content Hash to Commit Hash (#29663)

https://github.com/facebook/react/pull/29236 caused issues for internal
syncs at Meta, because we were computing version numbers using file
hashes (to eliminate ""no-op"" internal sync commits). The problem is that
since version numbers may not be consistent across synced files (e.g. if
some files have not changed in recent commits), the newly introduced
version mismatch check fails.

There's some more work that needs to be done here to restore the
benefits of file-specific hashing, but for now this simply reverts the
content hash changes from the following PRs:

- https://github.com/facebook/react/pull/28633
(95319ab5afd384f5858f7c080573b9736e6b2f9c)
- https://github.com/facebook/react/pull/28590
(37676aba76a9b97e1059e6dec39c3f401f44248d)
- https://github.com/facebook/react/pull/28582
(cb076b593cec3a92338958f58468cce19cb8f0d9)
- https://github.com/facebook/react/pull/26734
(5dd90c562354758942c833b0a46923176e92208e)
- https://github.com/facebook/react/pull/26331
(3cad3a54eda7b2d1c670c2d414f33d78a4c3f6af)",Timothy Yung,2024-05-30T14:26:12Z
72644ef2f2ec7a274f79f6b32320d62757521329,"Fix `key` Warning for Flattened Positional Children (#29662)

## Summary

https://github.com/facebook/react/pull/29088 introduced a regression
triggering this warning when rendering flattened positional children:

> Each child in a list should have a unique ""key"" prop.

The specific scenario that triggers this is when rendering multiple
positional children (which do not require unique `key` props) after
flattening them with one of the `React.Children` utilities (e.g.
`React.Children.toArray`).

The refactored logic in `React.Children` incorrectly drops the
`element._store.validated` property in `__DEV__`. This diff fixes the
bug and introduces a unit test to prevent future regressions.

## How did you test this change?

```
$ yarn test ReactChildren-test.js
```",Timothy Yung,2024-05-30T14:25:48Z
51dd09631ac0c7824fec55f38462846b6fe41d06,"Add tests for ReactNativeAttributePayloadFabric.js (#29608)

## Summary

This PR add tests for `ReactNativeAttributePayloadFabric.js`.

It introduces `ReactNativeAttributePayloadFabric-test.internal.js`,
which is a copy-paste of `ReactNativeAttributePayload-test.internal.js`.

On top of that, there is a bunch of new test cases for the
`ReactNativeAttributePayloadFabric.create` function.

## How did you test this change?

```
yarn test packages/react-native-renderer
```",Dmytro Rykun,2024-05-30T09:24:00Z
c2b45ef0dd06a67365444cdef904701a863e5051,"feat(compiler): Implement constant folding for more binary expressions (#29650)

## Summary

There are already most arithmetic operators in constant propagation:
`+`, `-`, `*`, `/`.
We could add more, namely: `|`, `&`, `^`, `<<`, `>>`, `>>>` and `%`:

Input:
```js
function f() {
  return [
    123.45 | 0,
    123.45 & 0,
    123.45 ^ 0,
    123 << 0,
    123 >> 0,
    123 >>> 0,
    123.45 | 1,
    123.45 & 1,
    123.45 ^ 1,
    123 << 1,
    123 >> 1,
    123 >>> 1,
    3 ** 2,
    3 ** 2.5,
    3.5 ** 2,
    2 ** 3 ** 0.5,
    4 % 2,
    4 % 2.5,
    4 % 3,
    4.5 % 2,
  ];
}
```
Output:
```js
function f() {
  return [
    123, 0, 123, 123, 123, 123, 123, 1, 122, 246, 61, 61, 9,
    15.588457268119896, 12.25, 3.3219970854839125, 0, 1.5, 1, 0.5,
  ];
}
```

Resolves #29649

## How did you test this change?
See tests.

Note:
This PR was done without waiting for approval in #29649, so feel free to
just close it without any comment.",Niklas Mollenhauer,2024-05-29T17:35:19Z
867edc6576956f577718540c504a10bcfe2aad77,"compiler: ValidateNoRefInRender detects writes of refs

Improves ValidateNoRefAccessInRender, detecting modifications of refs during render.

Fixes #29161

ghstack-source-id: 99078b3cea5b2d9019dbf77ede9c2e4cd9fbfd27
Pull Request resolved: https://github.com/facebook/react/pull/29170",Joe Savona,2024-05-29T14:56:27Z
320da675705e8700bc1377a5fa22b4cdf1e52704,"feat(compiler): Compiler Logical Negation Constant Propagation (#29623)

## Summary

Resolves #29622

## How did you test this change?
I verified the implementation using the test.

Note:
This PR was done without waiting for approval in #29622, so feel free to
just close it.",Niklas Mollenhauer,2024-05-29T16:17:43Z
38e3b23483bf7a612391cd617a8926aa1f3cf52e,"Tweak error message for ""Should have a queue"" (#29626)",Sophie Alpert,2024-05-29T15:41:10Z
afb2c39ec36d40fff362be465e2a310661469630,"compiler: fixtures for fast-refresh mode (w todos)

ghstack-source-id: 65dd14fe9b37328bd60fe791b23dde54da10b285
Pull Request resolved: https://github.com/facebook/react/pull/29175",Joe Savona,2024-05-20T17:20:04Z
c272789ce54ab2db3fb1af53c54631a7246b31bc,"compiler: Add todo for getter/setter syntax

We were missing a check that ObjectMethods are not getters or setters. In our experience this is pretty rare within React components and hooks themselves, so let's start with a todo.

Closes #29586

ghstack-source-id: 03c6cce9a9368a4a4f4ba98bcdff3fa4729ceaf9
Pull Request resolved: https://github.com/facebook/react/pull/29592",Joe Savona,2024-05-25T21:24:49Z
49ed6f0740f9d47777faafd92046f7f044cf3e5e,"compiler: Allow global mutation in jsx props

Fixes https://x.com/raibima/status/1794395807216738792

The issue is that if you pass a global-modifying function as prop to JSX, we currently report that it's invalid to modify a global during rendering. The problem is that we don't really know when/if the child component will actually call that function prop. It would be against the rules to call the function during render, but it's totally fine to call it during an event handler or from a useEffect.

Since we don't know at the call-site how the child will use the function, we should allow such calls. In the future we could improve this in a few ways:
* For all functions that modify globals, codegen an assertion or warning into the function that fires if it's called ""during render"". We'd have to precisely define what ""during render"" is, but this would at least help developers catch this dynamically.
* Use the type system to distinguish ""event/effect"" and ""render"" functions to help developers avoid accidentally mutating globals during render.

ghstack-source-id: 4aba4e6d214fd6c062e4029294efe9b8fe25cd83
Pull Request resolved: https://github.com/facebook/react/pull/29591",Joe Savona,2024-05-25T21:03:52Z
e2e12f33517e528bc955fe3f0098d6765f4648af,"Update .git-blame-ignore-revs

- Moves the file as it needs to be in root git directory
- Removes now unreachable commits due to repo merge
- Add run prettier commit c998bb1ed4b3285398c9c7797135d3f060243c6a to ignored revs

ghstack-source-id: d9dfa7099fbc7782fbce600af4caafd405c196cb
Pull Request resolved: https://github.com/facebook/react/pull/29630",Lauren Tan,2024-05-29T02:55:11Z
3b29ed16386c1afb2e76c3db0d576184154ec141,"Fix ""findNodeHandle inside its render()"" False Positive Warning (#29627)

This was missed in https://github.com/facebook/react/pull/29038 when
unifying the ""owner"" abstractions, causing `findNodeHandle` to warn even
outside of `render()` invocations.",Timothy Yung,2024-05-29T03:36:41Z
b44263addb4c4f74cb6520c5f652b35bda24a015,Bump version to 0.0.0-experimental-31393f7-20240529,Lauren Tan,2024-05-29T03:01:36Z
bd30dc3ae23acbb42b29b68fcb91c339e6f7c829,Bump version to 0.0.0-experimental-a97cca1-20240529,Lauren Tan,2024-05-29T03:01:35Z
84c47b3d527512246a42e312f3328d0b0d18829a,Bump version to 0.0.0-experimental-487cb0e-20240529,Lauren Tan,2024-05-29T03:01:35Z
81c3775816478c613b05689dfa3f481827a84249,[compiler] Ignore run prettier commit in git blame,Lauren Tan,2024-05-29T02:47:42Z
9d530e94c40a9adf3fbf24390ee09f10dc5dcc2d,"[compiler:babel] Don't read config files when not running as part of
user's pipeline

When the user app has a babel.config file that is missing the compiler,
strange things happen as babel does some strange merging of options from
the user's config and in various callsites like in our eslint rule and
healthcheck script. To minimize odd behavior, we default to not reading
the user's babel.config

Fixes #29135

ghstack-source-id: d6fdc43c5c9107645f36718203873aa3f6228475
Pull Request resolved: https://github.com/facebook/react/pull/29211",Lauren Tan,2024-05-29T02:41:01Z
c998bb1ed4b3285398c9c7797135d3f060243c6a,"[compiler] Run prettier, fix snap

After this is merged, I'll add it to .git-blame-ignore-revs. I can't do
it now as the hash will change after ghstack lands this stack.

ghstack-source-id: 054ca869b7839c589524c47d1962262f6b50f8ed
Pull Request resolved: https://github.com/facebook/react/pull/29214",Lauren Tan,2024-05-29T02:41:00Z
61aa159086b1a4f1dda987fc4b40e6396d05c5cd,"[compiler] Fix up prettier

Our prettier setup is all messed up after the merge, so this PR should
fix things

ghstack-source-id: f825460ea6637138db6ba08fd6136fac3f7aa001
Pull Request resolved: https://github.com/facebook/react/pull/29213",Lauren Tan,2024-05-29T02:41:00Z
a9a01068084550c0c71d8da222eb67eb7024c5b3,"feat(compiler): Implement constant string concat propagation (#29621)

## Summary

Resolves #29617

## How did you test this change?
I verified the implementation using the test.",Niklas Mollenhauer,2024-05-28T23:15:46Z
18164761b1ed4a0f70987ef56893285820549460,"[Flight] Check if a return value is a client reference before introspecting (#29611)

This didn't actually fail before but I'm just adding an extra check.

Currently Client References are always ""function"" proxies so they never
fall into this branch. However, we do in theory support objects as
client references too depending on environment. We have checks
elsewhere. So this just makes that consistent.",Sebastian Markbåge,2024-05-28T23:07:30Z
bd4bb32fe708bace6fa927834220f571ff583f39,"compiler: fix for calls on builtin jsx/function types

When I added new builtin types for jsx and functions, i forget to add a shape definition. This meant that attempting to accesss a property or method on these types would cause an internal error with an unresolved shape. That wasn't obvious because we rarely call methods on these types.

I confirmed that the new fixtures here fail without the fix.

ghstack-source-id: aa8f8d75a302bb5bac126d3e963594545e71ec74
Pull Request resolved: https://github.com/facebook/react/pull/29624",Joe Savona,2024-05-28T22:09:34Z
46339720d75337ae1d1e113fd56ac99e7fd1a0b3,"compiler: error on reassigning to const

We currently don't report an error if the code attempts to reassign a const. Our thinking has been that we're not trying to catch all possible mistakes you could make in JavaScript — that's what ESLint, TypeScript, and Flow are for — and that we want to focus on React errors. However, accidentally reassigning a const is easy to catch and doesn't get in the way of other analysis so let's implement it.

Note that React Compiler's ESLint plugin won't report these errors by default, but they will show up in playground.

Fixes #29598

ghstack-source-id: a0af8b9a486d74a8991413322efddc3e3028c755
Pull Request resolved: https://github.com/facebook/react/pull/29619",Joe Savona,2024-05-28T19:12:15Z
97722ca3d4675d544eb3753438aac70f01bbbf1f,Export `version` from `react-dom` entry with `react-server` condition (#29596),Hendrik Liebau,2024-05-28T19:47:47Z
163122766b6008e992898b00f1fe3b104ed78737,"Fix: Use action implementation at time of dispatch (#29618)

Fixes the behavior of actions that are queued by useActionState to use
the action function that was current at the time it was dispatched, not
at the time it eventually executes.

The conceptual model is that the action is immediately dispatched, as if
it were sent to a remote server/worker. It's the remote worker that
maintains the queue, not the client.

This is another property of actions makes them more like event handlers
than like reducers.",Andrew Clark,2024-05-28T19:08:59Z
2787eebe52864356252a280fd811cd9d52807a82,"Clean up disableDOMTestUtils (#29610)

`disableDOMTestUtils` and the FB build `ReactTestUtilsFB` allowed us to
finish migrating internal callsites off of ReactTestUtils. Now that
usage is cleaned up, we can remove the flag, build artifact, and test
coverage for the deprecated utility methods.",Jack Pope,2024-05-28T18:55:14Z
681a4aa81022d4053f990d905d6453c73d2ee644,"Throw if React and React DOM versions don't match (#29236)

Throw an error during module initialization if the version of the
""react-dom"" package does not match the version of ""react"".

We used to be more relaxed about this, because the ""react"" package
changed so infrequently. However, we now have many more features that
rely on an internal protocol between the two packages, including Hooks,
Float, and the compiler runtime. So it's important that both packages
are versioned in lockstep.

Before this change, a version mismatch would often result in a cryptic
internal error with no indication of the root cause.

Instead, we will now compare the versions during module initialization
and immediately throw an error to catch mistakes as early as possible
and provide a clear error message.",Andrew Clark,2024-05-28T18:06:30Z
4ec6a6f71475a6f2fee39a0e604ddbbd2f124164,"Repro function expr hoisting (#29615)

Modified version of @mofeiZ's #29232 with CI passing (had to run
prettier)

---------

Co-authored-by: Mofei Zhang <feifei0@meta.com>",Joseph Savona,2024-05-28T17:06:05Z
6f23540c7d39d7da2091284322008dadd055c031,"cleanup[react-devtools]: remove unused supportsProfiling flag from store config (#29193)

Looks like this is unused",Ruslan Lesiutin,2024-05-28T10:07:31Z
ea6e05912aa43a0bbfbee381752caa1817a41a86,"[Fiber] Enable Native console.createTask Stacks When Available (#29223)

Stacked on #29206 and #29221.

This disables appending owner stacks to console when
`console.createTask` is available in the environment. Instead we rely on
native ""async"" stacks that end up looking like this with source maps and
ignore list enabled.

<img width=""673"" alt=""Screenshot 2024-05-22 at 4 00 27 PM""
src=""https://github.com/facebook/react/assets/63648/5313ed53-b298-4386-8f76-8eb85bdfbbc7"">

Unfortunately Chrome requires a string name for each async stack and,
worse, a suffix of `(async)` is automatically added which is very
confusing since it seems like it might be an async component or
something which it is not.

In this case it's not so bad because it's nice to refer to the host
component which otherwise doesn't have a stack frame since it's
internal. However, if there were more owners here there would also be a
`<Counter> (async)` which ends up being kind of duplicative.

If the Chrome DevTools is not open from the start of the app, then
`console.createTask` is disabled and so you lose the stack for those
errors (or those parents if the devtools is opened later). Unlike our
appended ones that are always added. That's unfortunate and likely to be
a bit of a DX issue but it's also nice that it saves on perf in DEV mode
for those cases. Framework dialogs can still surface the stack since we
also track it in user space in parallel.

This currently doesn't track Server Components yet. We need a more
clever hack for that part in a follow up.

I think I probably need to also add something to React DevTools to
disable its stacks for this case too. Since it looks for stacks in the
console.error and adds a stack otherwise. Since we don't add them
anymore from the runtime, the DevTools adds them instead.",Sebastian Markbåge,2024-05-26T21:55:57Z
b078c810c787cf13d9bd1958f083b4e3a162a720,"[Fiber] Replace setCurrentDebugFiberInDEV with runWithFiberInDEV (#29221)

Stacked on #29044.

To work with `console.createTask(...).run(...)` we need to be able to
run a function in the scope of the task.

The main concern with this, other than general performance, is that it
might add more stack frames on very deep stacks that hit the stack
limit. Such as with the commit phase where we recursively go down the
tree. These callbacks aren't really necessary in the recursive part but
only in the shallow invocation of the commit phase for each tag. So we
could refactor the commit phase so that only the shallow part at each
level is covered this way.",Sebastian Markbåge,2024-05-25T15:58:40Z
d6cfa0f295f4c8b366af15fd20c84e27cdd1fab7,"[Fiber] Use Owner/JSX Stack When Appending Stacks to Console (#29206)

This one should be fully behind the `enableOwnerStacks` flag.

Instead of printing the parent Component stack all the way to the root,
this now prints the owner stack of every JSX callsite. It also includes
intermediate callsites between the Component and the JSX call so it has
potentially more frames. Mainly it provides the line number of the JSX
callsite. In terms of the number of components is a subset of the parent
component stack so it's less information in that regard. This is usually
better since it's more focused on components that might affect the
output but if it's contextual based on rendering it's still good to have
parent stack. Therefore, I still use the parent stack when printing DOM
nesting warnings but I plan on switching that format to a diff view
format instead (Next.js already reformats the parent stack like this).

__Follow ups__

- Server Components show up in the owner stack for client logs but logs
done by Server Components don't yet get their owner stack printed as
they're replayed. They're also not yet printed in the server logs of the
RSC server.

- Server Component stack frames are formatted as the server and added to
the end but this might be a different format than the browser. E.g. if
server is running V8 and browser is running JSC or vice versa. Ideally
we can reformat them in terms of the client formatting.

- This doesn't yet update Fizz or DevTools. Those will be follow ups.
Fizz still prints parent stacks in the server side logs. The stacks
added to user space `console.error` calls by DevTools still get the
parent stacks instead.

- It also doesn't yet expose these to user space so there's no way to
get them inside `onCaughtError` for example or inside a custom
`console.error` override.

- In another follow up I'll use `console.createTask` instead and
completely remove these stacks if it's available.",Sebastian Markbåge,2024-05-25T15:58:17Z
935180c7e060e4d6e7868cef8f2e7c1b77cf8f7f,"compiler: only resolve globals and react imports

Updates Environment#getGlobalDeclaration() to only resolve ""globals"" if they are a true global or an import from react/react-dom. We still keep the logic to resolve hook-like names as custom hooks. Notably, this means that a local `Array` reference won't get confused with our Array global declaration, a local `useState` (or import from something other than React) won't get confused as `React.useState()`, etc.

I tried to write a proper fixture test to test that we react to changes to a custom setState setter function, but I think there may be an issue with snap and how it handles re-renders from effects. I think the tests are good here but open to feedback if we want to go down the rabbit hole of figuring out a proper snap test for this.

ghstack-source-id: 5e9a8f6e0d23659c72a9d041e8d394b83d6e526d
Pull Request resolved: https://github.com/facebook/react/pull/29190",Joe Savona,2024-05-24T05:59:06Z
788ed90b186f1e61497e0ab4a57dab3714caae0f,"compiler: getGlobalDeclaration() takes a NonLocalBinding

No-op refactor to make Environment#getGlobalDeclaration() take a NonLocalBinding instead of just a name. The idea is that in subsequent PRs we can use information about the binding to resolve a type more accurately. For example, we can resolve `Array` differently if its an import or local and not the global Array. Similar for resolving local `useState` differently than the one from React.

ghstack-source-id: c8063e6fb8acdd347a56477d6b06238dd54979b1
Pull Request resolved: https://github.com/facebook/react/pull/29189",Joe Savona,2024-05-24T05:59:06Z
5061f31f4be6626aa328ea98cb528b0bd2678655,"compiler: distinguish globals/imports/module-locals

We currently use `LoadGlobal` and `StoreGlobal` to represent any read (or write) of a variable defined outside the component or hook that is being compiled. This is mostly fine, but for a lot of things we want to do going forward (resolving types across modules, for example) it helps to understand the actual source of a variable.

This PR is an incremental step in that direction. We continue to use LoadGlobal/StoreGlobal, but LoadGlobal now has a `binding:NonLocalBinding` instead of just the name of the global. The NonLocalBinding type tells us whether it was an import (and which kind, the source module name etc), a module-local binding, or a true global. By keeping the LoadGlobal/StoreGlobal instructions, most code that deals with ""anything not declared locally"" doesn't have to care about the difference. However, code that _does_ want to know the source of the value can figure it out.

ghstack-source-id: e701d4ebc0fb5681a0197198ac2c2a03b3e8aae9
Pull Request resolved: https://github.com/facebook/react/pull/29188",Joe Savona,2024-05-24T05:59:05Z
ee5c19493086fdeb32057e16d1e3414370242307,"Fix async batching in React.startTransition (#29226)

Note: Despite the similar-sounding description, this fix is unrelated to
the issue where updates that occur after an `await` in an async action
must also be wrapped in their own `startTransition`, due to the absence
of an AsyncContext mechanism in browsers today.

---

Discovered a flaw in the current implementation of the isomorphic
startTransition implementation (React.startTransition), related to async
actions. It only creates an async scope if something calls setState
within the synchronous part of the action (i.e. before the first
`await`). I had thought this was fine because if there's no update
during this part, then there's nothing that needs to be entangled. I
didn't think this through, though — if there are multiple async updates
interleaved throughout the rest of the action, we need the async scope
to have already been created so that _those_ are batched together.

An even easier way to observe this is to schedule an optimistic update
after an `await` — the optimistic update should not be reverted until
the async action is complete.

To implement, during the reconciler's module initialization, we compose
its startTransition implementation with any previous reconciler's
startTransition that was already initialized. Then, the isomorphic
startTransition is the composition of every
reconciler's startTransition.

```js
function startTransition(fn) {
  return startTransitionDOM(() => {
    return startTransitionART(() => {
      return startTransitionThreeFiber(() => {
        // and so on...
        return fn();
      });
    });
  });
}
```

This is basically how flushSync is implemented, too.",Andrew Clark,2024-05-23T21:19:09Z
f55d172bcf921d761733533395b798c5b3665e04,"[Fiber] clarify entry condition for suspensey commit recursion (#29222)

Previously Suspensey recursion would only trigger if the
ShouldSuspendCommit flag was true. However there is a dependence on the
Visibility flag embedded in this logic because these flags share a bit.
To make it clear that the semantics of Suspensey resources require
considering both flags I've added it to the condition even though this
extra or-ing is a noop when the bit is shared",Josh Story,2024-05-23T20:54:51Z
84239da896fd7395a667ab1e7ef1ef338a32de8f,"Move createElement/JSX Warnings into the Renderer (#29088)

This is necessary to simplify the component stack handling to make way
for owner stacks. It also solves some hacks that we used to have but
don't quite make sense. It also solves the problem where things like key
warnings get silenced in RSC because they get deduped. It also surfaces
areas where we were missing key warnings to begin with.

Almost every type of warning is issued from the renderer. React Elements
are really not anything special themselves. They're just lazily invoked
functions and its really the renderer that determines there semantics.

We have three types of warnings that previously fired in
JSX/createElement:

- Fragment props validation.
- Type validation.
- Key warning.

It's nice to be able to do some validation in the JSX/createElement
because it has a more specific stack frame at the callsite. However,
that's the case for every type of component and validation. That's the
whole point of enableOwnerStacks. It's also not sufficient to do it in
JSX/createElement so we also have validation in the renderers too. So
this validation is really just an eager validation but also happens
again later.

The problem with these is that we don't really know what types are valid
until we get to the renderer. Additionally, by placing it in the
isomorphic code it becomes harder to do deduping of warnings in a way
that makes sense for that renderer. It also means we can't reuse logic
for managing stacks etc.

Fragment props validation really should just be part of the renderer
like any other component type. This also matters once we add Fragment
refs and other fragment features. So I moved this into Fiber. However,
since some Fragments don't have Fibers, I do the validation in
ChildFiber instead of beginWork where it would normally happen.

For `type` validation we already do validation when rendering. By
leaving it to the renderer we don't have to hard code an extra list.
This list also varies by context. E.g. class components aren't allowed
in RSC but client references are but we don't have an isomorphic way to
identify client references because they're defined by the host config so
the current logic is flawed anyway. I kept the early validation for now
without the `enableOwnerStacks` since it does provide a nicer stack
frame but with that flag on it'll be handled with nice stacks anyway. I
normalized some of the errors to ensure tests pass.

For `key` validation it's the same principle. The mechanism for the
heuristic is still the same - if it passes statically through a parent
JSX/createElement call then it's considered validated. We already did
print the error later from the renderer so this also disables the early
log in the `enableOwnerStacks` flag.

I also added logging to Fizz so that key warnings can print in SSR logs.

Flight is a bit more complex. For elements that end up on the client we
just pass the `validated` flag along to the client and let the client
renderer print the error once rendered. For server components we log the
error from Flight with the server component as the owner on the stack
which will allow us to print the right stack for context. The factoring
of this is a little tricky because we only want to warn if it's in an
array parent but we want to log the error later to get the right debug
info.

Fiber/Fizz has a similar factoring problem that causes us to create a
fake Fiber for the owner which means the logs won't be associated with
the right place in DevTools.",Sebastian Markbåge,2024-05-23T16:48:57Z
5fe8c0b4ecd09cfd2c0e1422089e2c603d558ff8,"compiler: repro for unmerged scopes due to intermediates

Repro of a case where we should ideally merge consecutive scopes, but where intermediate temporaries prevent the scopes from merging.

We'd need to reorder instructions in order to merge these.

ghstack-source-id: 4f05672604eeb547fc6c26ef99db6572843ac646
Pull Request resolved: https://github.com/facebook/react/pull/29197",Joe Savona,2024-05-23T00:09:50Z
b687fd27b524f7922b67b8a6b01dc80fc8d8a233,"compiler: Use types to decide which scopes are eligible for merging

In MergeReactiveScopesThatInvalidateTogether when deciding which scopes were eligible for mergin at all, we looked specifically at the instructions whose lvalue produces the declaration. So if a scope declaration was `t0`, we'd love for the instruction where `t0` was the lvalue and look at the instruction type to decide if it is eligible for merging.

Here, we use the inferred type instead (now that the inferred types support the same set of types of instructions we looked at before). This allows us to find more cases where scopes can be merged.

ghstack-source-id: 0e3e05f24ea0ac6e3c43046bc3e114f906747a04
Pull Request resolved: https://github.com/facebook/react/pull/29157",Joe Savona,2024-05-23T00:09:49Z
890896b2db40b9994b3f1b817928e931b675eba9,"compiler: Improve merging of memo scopes that invalidate together

Improves merging of consecutive scopes so that we now merge two scopes if the dependencies of the second scope are a subset of the previous scope's output *and* that dependency has a type that will always produce a new value (array, object, jsx, function) if it is re-evaluated.

To make this easier, we extend the set of builtin types to include ones for function expressions and JSX and to infer these types in InferTypes. This allows using the already inferred types in MergeReactiveScopesThatInvalidateTogether.

ghstack-source-id: e9119fc4e02b3665848113d71fdff0c5bac3348a
Pull Request resolved: https://github.com/facebook/react/pull/29156",Joe Savona,2024-05-21T12:10:28Z
82a0a5f88a1bd0f2a0af52e44bbacff1207fc144,"compiler: fixture for suboptimal jsx sibling memo block merging

React Compiler attempts to merge consecutive reactive scopes in order to reduce overhead. The basic idea is that if two consecutive scopes would always invalidate together then we should merge them. It gets more complicated, though, because values produced by the earlier scope may not always invalidate when their inputs do. For example, a scope that produces `fn(x)` may not invalidate on all changes to `x` if the function is `Math.max(x, 10)` (changing x from 8 to 9 won't change the output).

Previously we were conservative and only merged if either:
* the two scopes had the same dependencies
* the second scope's deps exactly matched the previous scope's outputs.

You can see this in the new fixture, where the second `<button>` gets its own scope, which happens because the preceding scope has an extra output that isn't a dep of the `<button>`'s scope.

ghstack-source-id: d869c8d4df5aa4105bbdae01b5dd7f106145b351
Pull Request resolved: https://github.com/facebook/react/pull/29155",Joe Savona,2024-05-21T12:10:27Z
2e540e22b2b4038a278b2875306976b016fb31a9,"Set the current fiber to the source of the error during error reporting (#29044)

This lets us expose the component stack to the error reporting that
happens here as `console.error` patching. Now if you just call
`console.error` in the error handlers it'll get the component stack
added to the end by React DevTools.

However, unfortunately this happens a little too late so the Fiber will
be disconnected with its `.return` pointer set to null already. So it'll
be too late to extract a parent component stack from but you can at
least get the stack from source to error boundary. To work around this I
manually add the parent component stack in our default handlers when
owner stacks are off. We could potentially fix this but you can also
just include it yourself if you're calling `console.error` and it's not
a problem for owner stacks.

This is not a problem for owner stacks because we'll still have those
and so for those just calling `console.error` just works. However, the
main feature is that by letting React add them, we can switch to using
native error stacks when available.",Sebastian Markbåge,2024-05-23T16:39:52Z
2e3e6a9b1cc97ec91248be74565e7ccbf6946067,"Unify ReactFiberCurrentOwner and ReactCurrentFiber (#29038)

We previously had two slightly different concepts for ""current fiber"".

There's the ""owner"" which is set inside of class components in prod if
string refs are enabled, and sometimes inside function components in DEV
but not other contexts.

Then we have the ""current fiber"" which is only set in DEV for various
warnings but is enabled in a bunch of contexts.

This unifies them into a single ""current fiber"".

The concept of string refs shouldn't really exist so this should really
be a DEV only concept. In the meantime, this sets the current fiber
inside class render only in prod, however, in DEV it's now enabled in
more contexts which can affect the string refs. That was already the
case that a string ref in a Function component was only connecting to
the owner in prod. Any string ref associated with any non-class won't
work regardless so that's not an issue. The practical change here is
that an element with a string ref created inside a life-cycle associated
with a class will work in DEV but not in prod. Since we need the current
fiber to be available in more contexts in DEV for the debugging
purposes. That wouldn't affect any old code since it would have a broken
ref anyway. New code shouldn't use string refs anyway.

The other implication is that ""owner"" doesn't necessarily mean
""rendering"" since we need the ""owner"" to track other debug information
like stacks - in other contexts like useEffect, life cycles, etc.
Internally we have a separate `isRendering` flag that actually means
we're rendering but even that is a very overloaded concept. So anything
that uses ""owner"" to imply rendering might be wrong with this change.

This is a first step to a larger refactor for tracking current rendering
information.

---------

Co-authored-by: Sebastian Silbermann <silbermann.sebastian@gmail.com>",Sebastian Markbåge,2024-05-23T16:25:23Z
4c2e457c7c820e5b4bc895735a703cdbf40f3175,"compiler: Handle TSNonNullAssertion expressions (#29218)

## Summary

We ran React compiler against part of our codebase and collected
compiler errors. One of the more common non-actionable errors is caused
by usage of the `!` TypeScript non-null assertion operation:

```
(BuildHIR::lowerExpression) Handle TSNonNullExpression expressions
```

It seems like React Compiler _should_ be able to support this by just
ignoring the syntax and using the underlying expression. I'm sure a lot
of our non-null assertion usage should not exist and I understand if
React Compiler does not want to support this syntax. It wasn't obvious
to me if this omission was intentional or if there are future plans to
use `TSNonNullExpression` as part of the compiler's analysis. If there
are no future plans it seems like just ignoring it should be fine.

## How did you test this change?

```sh
❯ yarn snap --filter
yarn run v1.17.3
$ yarn workspace babel-plugin-react-compiler run snap --filter
$ node ../snap/dist/main.js --filter
 PASS  non-null-assertion
1 Tests, 1 Passed, 0 Failed
```",Henry Q. Dineen,2024-05-22T22:42:06Z
f994737d14e83f22ead70e6a41f87353008b73cf,[Flight] Allow temporary references in `decodeReplyFromBusboy` (#29219),Sebastian Silbermann,2024-05-22T19:15:14Z
3ac551e855f9bec3161da2fc8787958aa62113db,Dim `console` calls on additional Effect invocations due to `StrictMode` (#29007),Sebastian Silbermann,2024-05-22T09:39:54Z
81c5ff2e040ee56b85b8bd27a2f8065661f17fee,"[Flight Reply] retain listeners when resolving models with existing listeners (#29207)

In #29201 a fix was made to ensure we don't ""forget"" about some
listeners when handling cyclic chunks.
In #29204 another fix was made for a special case when the chunk already
has listeners before it first resolves.

This implements the followup fix for Flight Reply which was originally
missed in #29204

Co-authored-by: Janka Uryga <lolzatu2@gmail.com>",Josh Story,2024-05-21T23:16:20Z
217b2ccf160d7594a926d276a75c7312b299be4d,"[Fiber] render boundary in fallback if it contains a new stylesheet during sync update (#28965)

Updates Suspensey instances and resources to preload even during urgent
updates and to potentially suspend.

The current implementation is unchanged for transitions but for sync
updates if there is a suspense boundary above the resource/instance it
will be rendered in fallback mode instead.

Note: This behavior is not what we want for images once we make them
suspense enabled. We will need to have forked behavior here to
distinguish between stylesheets which should never commit when not
loaded and images which should commit after a small delay",Josh Story,2024-05-21T23:03:46Z
0f584548038335d3aa36d2dbc379cde664158eb3,"[compiler:playground] Update babel.config.js

Use new defaults

ghstack-source-id: d2da1df69db9f1b01578af6d52ea4a2613769f9b
Pull Request resolved: https://github.com/facebook/react/pull/29205",Lauren Tan,2024-05-21T21:51:41Z
b759b71eaded884d61dc2b5e97e73f219ef6a4f5,"[compiler:playground] JS tab is expanded by default

When using the playground you typically want to see what it outputs, so
let's make the JS tab expanded by default.

ghstack-source-id: 721bc4c381c50db008058b31e1f976e92eab8548
Pull Request resolved: https://github.com/facebook/react/pull/29203",Lauren Tan,2024-05-21T21:51:39Z
9b3f909cc19fd848dcf8cba2cc3750f32053c056,"[Flight] don't overwrite existing chunk listeners in 'wakeChunkIfInitialized' (#29204)

Follow up to https://github.com/facebook/react/pull/29201. If a chunk
had listeners attached already (e.g. because `.then` was called on the
chunk returned from `createFromReadableStream`),
`wakeChunkIfInitialized` would overwrite any listeners added during
chunk initialization. This caused cyclic [path
references](https://github.com/facebook/react/pull/28996) within that
chunk to never resolve. Fixed by merging the two arrays of listeners.",Janka Uryga,2024-05-21T21:04:46Z
0a0a5c02f138b37e93d5d93341b494d0f5d52373,"[compiler:playground] Wait for build before running playground

Explicitly waits for the build to finish since the playground requires
them to run

ghstack-source-id: 0bd7d5272d7fa09dc3a140b82a962dc4a3ae585b
Pull Request resolved: https://github.com/facebook/react/pull/29180",Lauren Tan,2024-05-21T05:41:16Z
8f3c0525f964fc5c75a627a6852f63efce1796b7,"[Flight / Flight Reply] Don't clear pending listeners when entering blocked state (#29201)

Fixes #29200

The cyclic state might have added listeners that will still need to be
invoked. This happens if we have a cyclic reference AND end up blocked.

We have already cleared these before entering the parsing when we enter
the CYCLIC state so we they already have the right type. If listeners
are added during this phase they should carry over to the blocked state.

---------

Co-authored-by: Hendrik Liebau <mail@hendrik-liebau.de>",Sebastian Markbåge,2024-05-21T18:12:20Z
5cc9f69a74ac42d55ad635229e9eaf129a1f0862,"Fix assertConsoleErrorDev on message mismatch with withoutStack: true (#29198)

## Summary

```js
assertConsoleErrorDev([
  ['Hello', {withoutStack: true}]
])
```

now errors with a helpful diff message if the message mismatched. See
first commit for previous behavior.

## How did you test this change?

- `yarn test --watch
packages/internal-test-utils/__tests__/ReactInternalTestUtils-test.js`",Sebastian Silbermann,2024-05-21T16:48:41Z
7621466b1b17965032aed24591e9b67fcd926a1b,"Enable `disableStringRefs` and `enableRefAsProp` for React Native (Meta) (#29177)

## Summary

Enables the `disableStringRefs` and `enableRefAsProp` feature flags for
React Native (Meta).

## How did you test this change?

```
$ yarn test
$ yarn flow fabric
```",Timothy Yung,2024-05-21T10:19:12Z
55dd0b1d0e2a17f137579f85016e69782cad7cf7,Stop using Scheduler.log to test double invocations (#29008),Sebastian Silbermann,2024-05-20T22:30:45Z
bf046e86531141d0eb9ffc1165f775a57ffb00f5,React DOM: Treat toggle and beforetoggle as discrete events (#29176),Sebastian Silbermann,2024-05-20T21:44:51Z
6f903651283861af4e5a8838b3b74d2a953a0acc,React DOM: Add support for Popover API (#27981),Sebastian Silbermann,2024-05-20T20:01:39Z
d3ce0d3ea9736e1e1bc3e6b6834bc3170b1fa8eb,"feat(compiler-healthcheck): Support strict mode check for nextjs apps (#29167)

## Summary

Closes #29130 

## How did you test this change?

Run the healthcheck in the compiler playground and the nodejs.org repo
for the next config with a `.mjs` extension. Sanity with Vite React
template.

Signed-off-by: abizek <abishekilango@protonmail.com>",Abishek Ilango,2024-05-20T15:55:35Z
57fbe3ba3729935b7ce5b670e57d30d487134bcb,"[Compiler playground] bold changed passes (#29159)

<!--
  Thanks for submitting a pull request!
We appreciate you spending the time to work on these changes. Please
provide enough information so that others can review your pull request.
The three fields below are mandatory.

Before submitting a pull request, please make sure the following is
done:

1. Fork [the repository](https://github.com/facebook/react) and create
your branch from `main`.
  2. Run `yarn` in the repository root.
3. If you've fixed a bug or added code that should be tested, add tests!
4. Ensure the test suite passes (`yarn test`). Tip: `yarn test --watch
TestName` is helpful in development.
5. Run `yarn test --prod` to test in the production environment. It
supports the same options as `yarn test`.
6. If you need a debugger, run `yarn test --debug --watch TestName`,
open `chrome://inspect`, and press ""Inspect"".
7. Format your code with
[prettier](https://github.com/prettier/prettier) (`yarn prettier`).
8. Make sure your code lints (`yarn lint`). Tip: `yarn linc` to only
check changed files.
  9. Run the [Flow](https://flowtype.org/) type checks (`yarn flow`).
  10. If you haven't already, complete the CLA.

Learn more about contributing:
https://reactjs.org/docs/how-to-contribute.html
-->

## Summary

<!--
Explain the **motivation** for making this change. What existing problem
does the pull request solve?
-->

In the playground, it's hard to see at a glance what compiler passes are
involved in introducing changes.
This PR bolds every pass that introduces a change.

## How did you test this change?

<!--
Demonstrate the code is solid. Example: The exact commands you ran and
their output, screenshots / videos if the pull request changes the user
interface.
How exactly did you verify that your PR solves the issue you wanted to
solve?
  If you leave this empty, your PR will very likely be closed.
-->

Before:
<img width=""1728"" alt=""image""
src=""https://github.com/facebook/react/assets/5144292/803ca786-0726-4456-b0db-520dc90a6771"">

After:
<img width=""1728"" alt=""image""
src=""https://github.com/facebook/react/assets/5144292/38885644-00e9-4065-9c44-db533000d13a"">",Jack Youstra,2024-05-20T15:05:48Z
d14ce51327c1bd4daf78f5118ae23f8620ebad03,"refactor[react-devtools]: rewrite context menus (#29049)

## Summary
- While rolling out RDT 5.2.0 on Fusebox, we've discovered that context
menus don't work well with this environment. The reason for it is the
context menu state implementation - in a global context we define a map
of registered context menus, basically what is shown at the moment (see
deleted Contexts.js file). These maps are not invalidated on each
re-initialization of DevTools frontend, since the bundle
(react-devtools-fusebox module) is not reloaded, and this results into
RDT throwing an error that some context menu was already registered.
- We should not keep such data in a global state, since there is no
guarantee that this will be invalidated with each re-initialization of
DevTools (like with browser extension, for example).
- The new implementation is based on a `ContextMenuContainer` component,
which will add all required `contextmenu` event listeners to the
anchor-element. This component will also receive a list of `items` that
will be displayed in the shown context menu.
- The `ContextMenuContainer` component is also using
`useImperativeHandle` hook to extend the instance of the component, so
context menus can be managed imperatively via `ref`:
`contextMenu.current?.hide()`, for example.
- **Changed**: The option for copying value to clipboard is now hidden
for functions. The reasons for it are:
- It is broken in the current implementation, because we call
`JSON.stringify` on the value, see
`packages/react-devtools-shared/src/backend/utils.js`.
- I don't see any reasonable value in doing this for the user, since `Go
to definition` option is available and you can inspect the real code and
then copy it.
- We already filter out fields from objects, if their value is a
function, because the whole object is passed to `JSON.stringify`.

## How did you test this change?
### Works with element props and hooks:
- All context menu items work reliably for props items
- All context menu items work reliably or hooks items


https://github.com/facebook/react/assets/28902667/5e2d58b0-92fa-4624-ad1e-2bbd7f12678f

### Works with timeline profiler:
- All context menu items work reliably: copying, zooming, ...
- Context menu automatically closes on the scroll event


https://github.com/facebook/react/assets/28902667/de744cd0-372a-402a-9fa0-743857048d24

### Works with Fusebox:
- Produces no errors
- Copy to clipboard context menu item works reliably


https://github.com/facebook/react/assets/28902667/0288f5bf-0d44-435c-8842-6b57bc8a7a24",Ruslan Lesiutin,2024-05-20T14:12:21Z
c325aec1ee5ae970ea70efc9b19574aa0e72c9a1,"Bump word-wrap from 1.2.3 to 1.2.5 in /compiler (#29064)

Bumps [word-wrap](https://github.com/jonschlinkert/word-wrap) from 1.2.3
to 1.2.5.
<details>
<summary>Release notes</summary>
<p><em>Sourced from <a
href=""https://github.com/jonschlinkert/word-wrap/releases"">word-wrap's
releases</a>.</em></p>
<blockquote>
<h2>1.2.5</h2>
<p><strong>Changes</strong>:</p>
<p>Reverts default value for <code>options.indent</code> to two spaces
<code>' '</code>.</p>
<p><strong>Full Changelog</strong>: <a
href=""https://github.com/jonschlinkert/word-wrap/compare/1.2.4...1.2.5"">https://github.com/jonschlinkert/word-wrap/compare/1.2.4...1.2.5</a></p>
<h2>1.2.4</h2>
<h2>What's Changed</h2>
<ul>
<li>Remove default indent by <a
href=""https://github.com/mohd-akram""><code>@​mohd-akram</code></a> in <a
href=""https://redirect.github.com/jonschlinkert/word-wrap/pull/24"">jonschlinkert/word-wrap#24</a></li>
<li>🔒fix: CVE 2023 26115 (2) by <a
href=""https://github.com/OlafConijn""><code>@​OlafConijn</code></a> in <a
href=""https://redirect.github.com/jonschlinkert/word-wrap/pull/41"">jonschlinkert/word-wrap#41</a></li>
<li>:lock: fix: CVE-2023-26115 by <a
href=""https://github.com/aashutoshrathi""><code>@​aashutoshrathi</code></a>
in <a
href=""https://redirect.github.com/jonschlinkert/word-wrap/pull/33"">jonschlinkert/word-wrap#33</a></li>
<li>chore: publish workflow by <a
href=""https://github.com/OlafConijn""><code>@​OlafConijn</code></a> in <a
href=""https://redirect.github.com/jonschlinkert/word-wrap/pull/42"">jonschlinkert/word-wrap#42</a></li>
</ul>
<h2>New Contributors</h2>
<ul>
<li><a
href=""https://github.com/mohd-akram""><code>@​mohd-akram</code></a> made
their first contribution in <a
href=""https://redirect.github.com/jonschlinkert/word-wrap/pull/24"">jonschlinkert/word-wrap#24</a></li>
<li><a
href=""https://github.com/OlafConijn""><code>@​OlafConijn</code></a> made
their first contribution in <a
href=""https://redirect.github.com/jonschlinkert/word-wrap/pull/41"">jonschlinkert/word-wrap#41</a></li>
<li><a
href=""https://github.com/aashutoshrathi""><code>@​aashutoshrathi</code></a>
made their first contribution in <a
href=""https://redirect.github.com/jonschlinkert/word-wrap/pull/33"">jonschlinkert/word-wrap#33</a></li>
</ul>
<p><strong>Full Changelog</strong>: <a
href=""https://github.com/jonschlinkert/word-wrap/compare/1.2.3...1.2.4"">https://github.com/jonschlinkert/word-wrap/compare/1.2.3...1.2.4</a></p>
</blockquote>
</details>
<details>
<summary>Commits</summary>
<ul>
<li><a
href=""https://github.com/jonschlinkert/word-wrap/commit/207044ebda1dd3809d15b6000a48409266536771""><code>207044e</code></a>
1.2.5</li>
<li><a
href=""https://github.com/jonschlinkert/word-wrap/commit/98943154855b0dd79b707462b9202614990c7f61""><code>9894315</code></a>
revert default indent</li>
<li><a
href=""https://github.com/jonschlinkert/word-wrap/commit/f64b188c7261d26b99e1e2075d6b12f21798e83a""><code>f64b188</code></a>
run verb to generate README</li>
<li><a
href=""https://github.com/jonschlinkert/word-wrap/commit/03ea08256ba0c8e8b02b1b304f0f5bd2b1863207""><code>03ea082</code></a>
Merge pull request <a
href=""https://redirect.github.com/jonschlinkert/word-wrap/issues/42"">#42</a>
from jonschlinkert/chore/publish-workflow</li>
<li><a
href=""https://github.com/jonschlinkert/word-wrap/commit/420dce9a2412b21881202b73a3c34f0edc53cb2e""><code>420dce9</code></a>
Merge pull request <a
href=""https://redirect.github.com/jonschlinkert/word-wrap/issues/41"">#41</a>
from jonschlinkert/fix/CVE-2023-26115-2</li>
<li><a
href=""https://github.com/jonschlinkert/word-wrap/commit/bfa694edf55bb84ff84512f13da6d68bf7593f06""><code>bfa694e</code></a>
Update .github/workflows/publish.yml</li>
<li><a
href=""https://github.com/jonschlinkert/word-wrap/commit/ace0b3c78f81aaf43040bab3bc91d3c5546d3fd2""><code>ace0b3c</code></a>
chore: bump version to 1.2.4</li>
<li><a
href=""https://github.com/jonschlinkert/word-wrap/commit/6fd727594676f3e1b196b08a320908bec2f4ca02""><code>6fd7275</code></a>
chore: add publish workflow</li>
<li><a
href=""https://github.com/jonschlinkert/word-wrap/commit/30d6daf60fce429f5f559252fa86ee78200652c4""><code>30d6daf</code></a>
chore: fix test</li>
<li><a
href=""https://github.com/jonschlinkert/word-wrap/commit/655929cabea6299dddf3b4a21fc3713fca701b48""><code>655929c</code></a>
chore: remove package-lock</li>
<li>Additional commits viewable in <a
href=""https://github.com/jonschlinkert/word-wrap/compare/1.2.3...1.2.5"">compare
view</a></li>
</ul>
</details>
<br />


[![Dependabot compatibility
score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=word-wrap&package-manager=npm_and_yarn&previous-version=1.2.3&new-version=1.2.5)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)

Dependabot will resolve any conflicts with this PR as long as you don't
alter it yourself. You can also trigger a rebase manually by commenting
`@dependabot rebase`.

[//]: # (dependabot-automerge-start)
[//]: # (dependabot-automerge-end)

---

<details>
<summary>Dependabot commands and options</summary>
<br />

You can trigger Dependabot actions by commenting on this PR:
- `@dependabot rebase` will rebase this PR
- `@dependabot recreate` will recreate this PR, overwriting any edits
that have been made to it
- `@dependabot merge` will merge this PR after your CI passes on it
- `@dependabot squash and merge` will squash and merge this PR after
your CI passes on it
- `@dependabot cancel merge` will cancel a previously requested merge
and block automerging
- `@dependabot reopen` will reopen this PR if it is closed
- `@dependabot close` will close this PR and stop Dependabot recreating
it. You can achieve the same result by closing it manually
- `@dependabot show <dependency name> ignore conditions` will show all
of the ignore conditions of the specified dependency
- `@dependabot ignore this major version` will close this PR and stop
Dependabot creating any more for this major version (unless you reopen
the PR or upgrade to it yourself)
- `@dependabot ignore this minor version` will close this PR and stop
Dependabot creating any more for this minor version (unless you reopen
the PR or upgrade to it yourself)
- `@dependabot ignore this dependency` will close this PR and stop
Dependabot creating any more for this dependency (unless you reopen the
PR or upgrade to it yourself)
You can disable automated security fix PRs for this repo from the
[Security Alerts
page](https://github.com/facebook/react/network/alerts).

</details>

Signed-off-by: dependabot[bot] <support@github.com>
Co-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>",dependabot[bot],2024-05-20T11:03:55Z
ba51ebe03a3cf6ec86f940b09b8efc722c7ce905,"Bump tough-cookie from 4.1.2 to 4.1.4 in /compiler (#29065)

Bumps [tough-cookie](https://github.com/salesforce/tough-cookie) from
4.1.2 to 4.1.4.
<details>
<summary>Release notes</summary>
<p><em>Sourced from <a
href=""https://github.com/salesforce/tough-cookie/releases"">tough-cookie's
releases</a>.</em></p>
<blockquote>
<h2>v4.1.4</h2>
<p><a
href=""https://www.npmjs.com/package/tough-cookie/v/4.1.4"">https://www.npmjs.com/package/tough-cookie/v/4.1.4</a></p>
<h2>What's Changed</h2>
<ul>
<li>Add local alias for <code>toString</code> by <a
href=""https://github.com/corvidism""><code>@​corvidism</code></a> in <a
href=""https://redirect.github.com/salesforce/tough-cookie/pull/409"">salesforce/tough-cookie#409</a></li>
<li>Fix incorrect string validation for URL by <a
href=""https://github.com/coditva""><code>@​coditva</code></a> in <a
href=""https://redirect.github.com/salesforce/tough-cookie/pull/261"">salesforce/tough-cookie#261</a></li>
</ul>
<h2>New Contributors</h2>
<ul>
<li><a href=""https://github.com/corvidism""><code>@​corvidism</code></a>
made their first contribution in <a
href=""https://redirect.github.com/salesforce/tough-cookie/pull/409"">salesforce/tough-cookie#409</a></li>
<li><a href=""https://github.com/coditva""><code>@​coditva</code></a> made
their first contribution in <a
href=""https://redirect.github.com/salesforce/tough-cookie/pull/261"">salesforce/tough-cookie#261</a></li>
</ul>
<p><strong>Full Changelog</strong>: <a
href=""https://github.com/salesforce/tough-cookie/compare/v4.1.3...v4.1.4"">https://github.com/salesforce/tough-cookie/compare/v4.1.3...v4.1.4</a></p>
<h2>4.1.3</h2>
<p>Security fix for Prototype Pollution discovery in <a
href=""https://redirect.github.com/salesforce/tough-cookie/issues/282"">#282</a>.
This is a minor release, although output from the <code>inspect</code>
utility is affected by this change, we felt this change was important
enough to be pushed into the next patch.</p>
</blockquote>
</details>
<details>
<summary>Commits</summary>
<ul>
<li><a
href=""https://github.com/salesforce/tough-cookie/commit/cacbc37936bd4824693d885e1e65dca626ed3c8c""><code>cacbc37</code></a>
Bump version to 4.1.4</li>
<li><a
href=""https://github.com/salesforce/tough-cookie/commit/a48fb3a6ba2bbce41595a20e1db56543d974057b""><code>a48fb3a</code></a>
Add tests for url validation</li>
<li><a
href=""https://github.com/salesforce/tough-cookie/commit/50e69bf9372c13a1e573b77c179a879198a240e3""><code>50e69bf</code></a>
Merge pull request <a
href=""https://redirect.github.com/salesforce/tough-cookie/issues/261"">#261</a>
from postmanlabs/fix/url-string-validation</li>
<li><a
href=""https://github.com/salesforce/tough-cookie/commit/1253d58825378c2327e3a71e2228b65812d1cf7c""><code>1253d58</code></a>
Merge pull request <a
href=""https://redirect.github.com/salesforce/tough-cookie/issues/409"">#409</a>
from corvidism/validators-to-string</li>
<li><a
href=""https://github.com/salesforce/tough-cookie/commit/238367e2f1d8a2c72cc25cc80a6eeecb612983d6""><code>238367e</code></a>
Add local alias for <code>toString</code></li>
<li><a
href=""https://github.com/salesforce/tough-cookie/commit/4ff4d29f6cefd279a412b8d62a21142ebd410b36""><code>4ff4d29</code></a>
4.1.3 release preparation, update the package and lib/version to 4.1.3.
(<a
href=""https://redirect.github.com/salesforce/tough-cookie/issues/284"">#284</a>)</li>
<li><a
href=""https://github.com/salesforce/tough-cookie/commit/12d474791bb856004e858fdb1c47b7608d09cf6e""><code>12d4747</code></a>
Prevent prototype pollution in cookie memstore (<a
href=""https://redirect.github.com/salesforce/tough-cookie/issues/283"">#283</a>)</li>
<li><a
href=""https://github.com/salesforce/tough-cookie/commit/f06b72d1d447f33dfa6222c0a3c0c5e063558248""><code>f06b72d</code></a>
Fix documentation for store.findCookies, missing allowSpecialUseDomain
proper...</li>
<li><a
href=""https://github.com/salesforce/tough-cookie/commit/cf6debd15f16df43030f36719251fcce0ed27dfc""><code>cf6debd</code></a>
Fix incorrect string validation for URL</li>
<li>See full diff in <a
href=""https://github.com/salesforce/tough-cookie/compare/v4.1.2...v4.1.4"">compare
view</a></li>
</ul>
</details>
<details>
<summary>Maintainer changes</summary>
<p>This version was pushed to npm by <a
href=""https://www.npmjs.com/~ccasey"">ccasey</a>, a new releaser for
tough-cookie since your current version.</p>
</details>
<br />


[![Dependabot compatibility
score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=tough-cookie&package-manager=npm_and_yarn&previous-version=4.1.2&new-version=4.1.4)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)

Dependabot will resolve any conflicts with this PR as long as you don't
alter it yourself. You can also trigger a rebase manually by commenting
`@dependabot rebase`.

[//]: # (dependabot-automerge-start)
[//]: # (dependabot-automerge-end)

---

<details>
<summary>Dependabot commands and options</summary>
<br />

You can trigger Dependabot actions by commenting on this PR:
- `@dependabot rebase` will rebase this PR
- `@dependabot recreate` will recreate this PR, overwriting any edits
that have been made to it
- `@dependabot merge` will merge this PR after your CI passes on it
- `@dependabot squash and merge` will squash and merge this PR after
your CI passes on it
- `@dependabot cancel merge` will cancel a previously requested merge
and block automerging
- `@dependabot reopen` will reopen this PR if it is closed
- `@dependabot close` will close this PR and stop Dependabot recreating
it. You can achieve the same result by closing it manually
- `@dependabot show <dependency name> ignore conditions` will show all
of the ignore conditions of the specified dependency
- `@dependabot ignore this major version` will close this PR and stop
Dependabot creating any more for this major version (unless you reopen
the PR or upgrade to it yourself)
- `@dependabot ignore this minor version` will close this PR and stop
Dependabot creating any more for this minor version (unless you reopen
the PR or upgrade to it yourself)
- `@dependabot ignore this dependency` will close this PR and stop
Dependabot creating any more for this dependency (unless you reopen the
PR or upgrade to it yourself)
You can disable automated security fix PRs for this repo from the
[Security Alerts
page](https://github.com/facebook/react/network/alerts).

</details>

Signed-off-by: dependabot[bot] <support@github.com>
Co-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>",dependabot[bot],2024-05-20T11:03:29Z
9abea0cb7c454319c2e8c54ce46e9fe1c044209e,"Bump rustix from 0.37.22 to 0.37.27 in /compiler (#29173)

Bumps [rustix](https://github.com/bytecodealliance/rustix) from 0.37.22
to 0.37.27.
<details>
<summary>Commits</summary>
<ul>
<li><a
href=""https://github.com/bytecodealliance/rustix/commit/b38dc512628b5db8d08c26449ee2beed7ed51dcc""><code>b38dc51</code></a>
chore: Release rustix version 0.37.27</li>
<li><a
href=""https://github.com/bytecodealliance/rustix/commit/a2d9c8ee1a0c1548f17e5ec6096f3a005111d481""><code>a2d9c8e</code></a>
Fix p{read,write}v{,v2}'s encoding of the offset argument on Linux. (<a
href=""https://redirect.github.com/bytecodealliance/rustix/issues/896"">#896</a>)
(#...</li>
<li><a
href=""https://github.com/bytecodealliance/rustix/commit/dce277762238d5fd40c57ccf0151645d8de3d33d""><code>dce2777</code></a>
chore: Release rustix version 0.37.26</li>
<li><a
href=""https://github.com/bytecodealliance/rustix/commit/06dbe83c60cbfa603c9437aef9dfd119f068b1df""><code>06dbe83</code></a>
Fix <code>sendmsg_unix</code>'s address encoding. (<a
href=""https://redirect.github.com/bytecodealliance/rustix/issues/885"">#885</a>)
(<a
href=""https://redirect.github.com/bytecodealliance/rustix/issues/886"">#886</a>)</li>
<li><a
href=""https://github.com/bytecodealliance/rustix/commit/00b84d6aac2364455eab2c68e42afee63d6e3ad3""><code>00b84d6</code></a>
chore: Release rustix version 0.37.25</li>
<li><a
href=""https://github.com/bytecodealliance/rustix/commit/cad15a7076d493a0651fb0b7889bd5e5a72a8f17""><code>cad15a7</code></a>
Fixes for <code>Dir</code> on macOS, FreeBSD, and WASI.</li>
<li><a
href=""https://github.com/bytecodealliance/rustix/commit/df3c3a192cf144af0da8a57417fb4addbdc611f6""><code>df3c3a1</code></a>
Merge pull request from GHSA-c827-hfw6-qwvm</li>
<li><a
href=""https://github.com/bytecodealliance/rustix/commit/b78aeff1a271863ecc75ccca37f014d33b9f6705""><code>b78aeff</code></a>
chore: Release rustix version 0.37.24</li>
<li><a
href=""https://github.com/bytecodealliance/rustix/commit/c0c3f01d7c8296ebadb23ad0b4f82a9a082252ae""><code>c0c3f01</code></a>
Add GNU/Hurd support (<a
href=""https://redirect.github.com/bytecodealliance/rustix/issues/852"">#852</a>)</li>
<li><a
href=""https://github.com/bytecodealliance/rustix/commit/f416b6b27b8d0540e8be14f8d30153ea3e3d7476""><code>f416b6b</code></a>
Fix the <code>test_ttyname_ok</code> test when /dev/stdin is
inaccessable. (<a
href=""https://redirect.github.com/bytecodealliance/rustix/issues/821"">#821</a>)</li>
<li>Additional commits viewable in <a
href=""https://github.com/bytecodealliance/rustix/compare/v0.37.22...v0.37.27"">compare
view</a></li>
</ul>
</details>
<br />


[![Dependabot compatibility
score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=rustix&package-manager=cargo&previous-version=0.37.22&new-version=0.37.27)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)

Dependabot will resolve any conflicts with this PR as long as you don't
alter it yourself. You can also trigger a rebase manually by commenting
`@dependabot rebase`.

[//]: # (dependabot-automerge-start)
[//]: # (dependabot-automerge-end)

---

<details>
<summary>Dependabot commands and options</summary>
<br />

You can trigger Dependabot actions by commenting on this PR:
- `@dependabot rebase` will rebase this PR
- `@dependabot recreate` will recreate this PR, overwriting any edits
that have been made to it
- `@dependabot merge` will merge this PR after your CI passes on it
- `@dependabot squash and merge` will squash and merge this PR after
your CI passes on it
- `@dependabot cancel merge` will cancel a previously requested merge
and block automerging
- `@dependabot reopen` will reopen this PR if it is closed
- `@dependabot close` will close this PR and stop Dependabot recreating
it. You can achieve the same result by closing it manually
- `@dependabot show <dependency name> ignore conditions` will show all
of the ignore conditions of the specified dependency
- `@dependabot ignore this major version` will close this PR and stop
Dependabot creating any more for this major version (unless you reopen
the PR or upgrade to it yourself)
- `@dependabot ignore this minor version` will close this PR and stop
Dependabot creating any more for this minor version (unless you reopen
the PR or upgrade to it yourself)
- `@dependabot ignore this dependency` will close this PR and stop
Dependabot creating any more for this dependency (unless you reopen the
PR or upgrade to it yourself)
You can disable automated security fix PRs for this repo from the
[Security Alerts
page](https://github.com/facebook/react/network/alerts).

</details>

Signed-off-by: dependabot[bot] <support@github.com>
Co-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>",dependabot[bot],2024-05-20T11:02:35Z
8287cb92903fdfc983dcc8deecd8293402fc3bd4,"Bump postcss from 8.4.24 to 8.4.31 in /compiler (#29063)

Bumps [postcss](https://github.com/postcss/postcss) from 8.4.24 to
8.4.31.
<details>
<summary>Release notes</summary>
<p><em>Sourced from <a
href=""https://github.com/postcss/postcss/releases"">postcss's
releases</a>.</em></p>
<blockquote>
<h2>8.4.31</h2>
<ul>
<li>Fixed <code>\r</code> parsing to fix CVE-2023-44270.</li>
</ul>
<h2>8.4.30</h2>
<ul>
<li>Improved source map performance (by <a
href=""https://github.com/romainmenke""><code>@​romainmenke</code></a>).</li>
</ul>
<h2>8.4.29</h2>
<ul>
<li>Fixed <code>Node#source.offset</code> (by <a
href=""https://github.com/idoros""><code>@​idoros</code></a>).</li>
<li>Fixed docs (by <a
href=""https://github.com/coliff""><code>@​coliff</code></a>).</li>
</ul>
<h2>8.4.28</h2>
<ul>
<li>Fixed <code>Root.source.end</code> for better source map (by <a
href=""https://github.com/romainmenke""><code>@​romainmenke</code></a>).</li>
<li>Fixed <code>Result.root</code> types when <code>process()</code> has
no parser.</li>
</ul>
<h2>8.4.27</h2>
<ul>
<li>Fixed <code>Container</code> clone methods types.</li>
</ul>
<h2>8.4.26</h2>
<ul>
<li>Fixed clone methods types.</li>
</ul>
<h2>8.4.25</h2>
<ul>
<li>Improve stringify performance (by <a
href=""https://github.com/romainmenke""><code>@​romainmenke</code></a>).</li>
<li>Fixed docs (by <a
href=""https://github.com/vikaskaliramna07""><code>@​vikaskaliramna07</code></a>).</li>
</ul>
</blockquote>
</details>
<details>
<summary>Changelog</summary>
<p><em>Sourced from <a
href=""https://github.com/postcss/postcss/blob/main/CHANGELOG.md"">postcss's
changelog</a>.</em></p>
<blockquote>
<h2>8.4.31</h2>
<ul>
<li>Fixed <code>\r</code> parsing to fix CVE-2023-44270.</li>
</ul>
<h2>8.4.30</h2>
<ul>
<li>Improved source map performance (by Romain Menke).</li>
</ul>
<h2>8.4.29</h2>
<ul>
<li>Fixed <code>Node#source.offset</code> (by Ido Rosenthal).</li>
<li>Fixed docs (by Christian Oliff).</li>
</ul>
<h2>8.4.28</h2>
<ul>
<li>Fixed <code>Root.source.end</code> for better source map (by Romain
Menke).</li>
<li>Fixed <code>Result.root</code> types when <code>process()</code> has
no parser.</li>
</ul>
<h2>8.4.27</h2>
<ul>
<li>Fixed <code>Container</code> clone methods types.</li>
</ul>
<h2>8.4.26</h2>
<ul>
<li>Fixed clone methods types.</li>
</ul>
<h2>8.4.25</h2>
<ul>
<li>Improve stringify performance (by Romain Menke).</li>
<li>Fixed docs (by <a
href=""https://github.com/vikaskaliramna07""><code>@​vikaskaliramna07</code></a>).</li>
</ul>
</blockquote>
</details>
<details>
<summary>Commits</summary>
<ul>
<li><a
href=""https://github.com/postcss/postcss/commit/90208de8805dd762596c0028b8637ffbed23e371""><code>90208de</code></a>
Release 8.4.31 version</li>
<li><a
href=""https://github.com/postcss/postcss/commit/58cc860b4c1707510c9cd1bc1fa30b423a9ad6c5""><code>58cc860</code></a>
Fix carrier return parsing</li>
<li><a
href=""https://github.com/postcss/postcss/commit/4fff8e4cdc237619df1d73a444c0a8329701c1e2""><code>4fff8e4</code></a>
Improve pnpm test output</li>
<li><a
href=""https://github.com/postcss/postcss/commit/cd43ed123274a92ebc13a1e8cccf1d65b8198f84""><code>cd43ed1</code></a>
Update dependencies</li>
<li><a
href=""https://github.com/postcss/postcss/commit/caa916bdcbf66c51321574e2dde112ab13e8b306""><code>caa916b</code></a>
Update dependencies</li>
<li><a
href=""https://github.com/postcss/postcss/commit/8972f76923e921a3c9655822382039b31b1c8e1a""><code>8972f76</code></a>
Typo</li>
<li><a
href=""https://github.com/postcss/postcss/commit/11a5286f781d2a637f2c545c5e9cd661055acaab""><code>11a5286</code></a>
Typo</li>
<li><a
href=""https://github.com/postcss/postcss/commit/45c55017776fc61f7815d1ea8e92d5291ca5d6c8""><code>45c5501</code></a>
Release 8.4.30 version</li>
<li><a
href=""https://github.com/postcss/postcss/commit/bc3c341f589f9c15f1b56838a33d908374e537e0""><code>bc3c341</code></a>
Update linter</li>
<li><a
href=""https://github.com/postcss/postcss/commit/b2be58a2eb788d12474ee1335f8ecdb9fa6225aa""><code>b2be58a</code></a>
Merge pull request <a
href=""https://redirect.github.com/postcss/postcss/issues/1881"">#1881</a>
from romainmenke/improve-sourcemap-performance--phil...</li>
<li>Additional commits viewable in <a
href=""https://github.com/postcss/postcss/compare/8.4.24...8.4.31"">compare
view</a></li>
</ul>
</details>
<br />


[![Dependabot compatibility
score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=postcss&package-manager=npm_and_yarn&previous-version=8.4.24&new-version=8.4.31)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)

Dependabot will resolve any conflicts with this PR as long as you don't
alter it yourself. You can also trigger a rebase manually by commenting
`@dependabot rebase`.

[//]: # (dependabot-automerge-start)
[//]: # (dependabot-automerge-end)

---

<details>
<summary>Dependabot commands and options</summary>
<br />

You can trigger Dependabot actions by commenting on this PR:
- `@dependabot rebase` will rebase this PR
- `@dependabot recreate` will recreate this PR, overwriting any edits
that have been made to it
- `@dependabot merge` will merge this PR after your CI passes on it
- `@dependabot squash and merge` will squash and merge this PR after
your CI passes on it
- `@dependabot cancel merge` will cancel a previously requested merge
and block automerging
- `@dependabot reopen` will reopen this PR if it is closed
- `@dependabot close` will close this PR and stop Dependabot recreating
it. You can achieve the same result by closing it manually
- `@dependabot show <dependency name> ignore conditions` will show all
of the ignore conditions of the specified dependency
- `@dependabot ignore this major version` will close this PR and stop
Dependabot creating any more for this major version (unless you reopen
the PR or upgrade to it yourself)
- `@dependabot ignore this minor version` will close this PR and stop
Dependabot creating any more for this minor version (unless you reopen
the PR or upgrade to it yourself)
- `@dependabot ignore this dependency` will close this PR and stop
Dependabot creating any more for this dependency (unless you reopen the
PR or upgrade to it yourself)
You can disable automated security fix PRs for this repo from the
[Security Alerts
page](https://github.com/facebook/react/network/alerts).

</details>

Signed-off-by: dependabot[bot] <support@github.com>
Co-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>",dependabot[bot],2024-05-20T10:47:51Z
68de7d0535bae14cb31cca4a9d4fa078a855c7e4,"[compiler:chore] fix SSA pdf reference link (#29162)

## Summary

This PR fixes the deadlink in the SSA comment. Previously the attached
link is down now.

## How did you test this change?

1. I can confirm the PDF in the new link is the same as the old now.
Reference: https://www.recompiled.dev/blog/ssa/
2. I can confirm the old link is down, and it is [not just
me](https://downforeveryoneorjustme.com/pp.info.uni-karlsruhe.de?proto=https)

<img width=""580"" alt=""image""
src=""https://github.com/facebook/react/assets/2883231/eeca5eda-6f61-4ac4-a113-1b04370533d9"">

---------

Co-authored-by: Jan Kassens <jkassens@meta.com>",Herrington Darkholme,2024-05-20T10:10:10Z
cca15a2139f733f8402fe940805179d3da65b30b,"compiler: fix accidental propagation of function effects from StartMemoize/FinishMemoize

By default, React Compiler will skip compilation if it cannot preserve existing memoization. Ie, if the code has an existing `useMemo()` or `useCallback()` and the compiler cannot determine that it is safe to keep that memoization — or do even better — then we'll leave the code alone. The actual compilation doesn't use any hints from existing memo calls, this is purely to check and avoid regressing any specific memoization that developers may have already applied.

However, we were accidentally reporting some false-positive _validation_ errors due to the StartMemoize and FinishMemoize instructions that we emit to track where the memoization was in the source code. This is now fixed.

Fixes #29131
Fixes #29132

ghstack-source-id: 9f6b8dbc5074ccc96e6073cf11c4920b5375faf6
Pull Request resolved: https://github.com/facebook/react/pull/29154",Joe Savona,2024-05-17T22:25:20Z
85923690e96ed5c03a419550d5db9c035e864f2d,"compiler: Improve ValidateNoRefAccessInRender to ignore access in effects

Improves ValidateNoRefAccessInRender (still disabled by default) to properly ignore ref access within effects. This includes allowing ref access within functions that are only transitively called from an effect.

While I was here I also added some extra test fixtures for allowing global mutation in effects.

ghstack-source-id: fb6352a1788b7bdbebb40d5b844b711ef87d6771
Pull Request resolved: https://github.com/facebook/react/pull/29151",Joe Savona,2024-05-17T21:35:47Z
f74c5ccf9469d3389ce3a1ee3b54988049e235f7,"feat(hyperlink): added a hyperlink to Node in README.md file (#28940)

As a fellow beginner to React, I didn't even know React runs on top of
Node when I started.

So, some beginners might get confused about what is Node and how to find
details about it or how to download it.

So, I thought to add a hyperlink to Node replacing the word Node in the
README.md file. I think this might be a valuable contribution.

- Januda",Januda Bethmin,2024-05-19T03:17:52Z
ccb06b0585a12aa5310d2994d373037ebd81bd7a,"Add hyperlink for Good First Issues header (#29103)

## Summary

The ""Good First Issues"" header in the README was missing a hyperlink
where the other similar headlines had one.

<!--
Explain the **motivation** for making this change. What existing problem
does the pull request solve?
-->

## How did you test this change?

N/A

<!--
Demonstrate the code is solid. Example: The exact commands you ran and
their output, screenshots / videos if the pull request changes the user
interface.
How exactly did you verify that your PR solves the issue you wanted to
solve?
  If you leave this empty, your PR will very likely be closed.
-->",NickeSteenen,2024-05-19T03:17:28Z
ff60b11b1c649824904515a90ae27ad30efc5f60,Add packageManager fields for Corepack compat (#29114),Risto Keravuori,2024-05-18T14:21:41Z
597ad74e38b8a45c0278289f4293b9ab4433c28b,Bump version to 0.0.0-experimental-f978439-20240517,Lauren Tan,2024-05-17T22:17:05Z
630c6fb89b021cd7d8c2cb567340023a4a61aa6e,Bump version to 0.0.0-experimental-c8b3f72-20240517,Lauren Tan,2024-05-17T22:17:05Z
c2a64b071333bb87bf610d81f73a3e94e49e5a09,Bump version to 0.0.0-experimental-592953e-20240517,Lauren Tan,2024-05-17T22:17:04Z
1052a5f2dd1c7e73b74661e70283fc825012ef67,"[compiler:publish] Don't check branch in debug mode

ghstack-source-id: 465f5a358096c55310ebf5a0beef581646ab553e
Pull Request resolved: https://github.com/facebook/react/pull/29153",Lauren Tan,2024-05-17T21:55:47Z
38d961f8ff94f1290953e07e255ef82f00e7b509,"[compiler:publish] Bump time to reconsider to 3s

ghstack-source-id: afc8976a8956db79ed824f30cf575d3f5cf93cfe
Pull Request resolved: https://github.com/facebook/react/pull/29150",Lauren Tan,2024-05-17T21:55:45Z
b195a947deb47e507b8976721e2c5ba9febb35a5,"[compiler:publish] Prompt for OTP

Makes running the script a little more ergonomic by prompting for OTP
upfront.

ghstack-source-id: e9967bfde1ab01ff9417a848154743ae1926318d
Pull Request resolved: https://github.com/facebook/react/pull/29149",Lauren Tan,2024-05-17T21:55:43Z
4fbc3a37f5cf91c750dc2928050924aa8c70821a,"[compiler:publish] Don't hash node_modules

ghstack-source-id: 4ac2ecc8654b1a8c149ab9d00c06cb4c401473da
Pull Request resolved: https://github.com/facebook/react/pull/29147",Lauren Tan,2024-05-17T21:55:41Z
e7673e496c1f85e948e153855707d52f3603392a,"[compiler:publish] Rename publish script

ghstack-source-id: 1cccc91b5d0e69240b2f4f539c60eab0f156e15f
Pull Request resolved: https://github.com/facebook/react/pull/29148",Lauren Tan,2024-05-17T21:55:40Z
5a12a0d330b48ca511456dd770c5a158116f91a5,"compiler: workaround babel issue with html entity escaping

Babel doesn't seem to properly preserve escaping of HTML entities when emitting JSX text children, so this commit works around the issue by emitting a JsxExpressionContainer for JSX children that contain "">"", ""<"", or ""&"" characters.

Closes #29100

ghstack-source-id: 2d0622397cc067c6336f3635073e07daef854084
Pull Request resolved: https://github.com/facebook/react/pull/29143",Joe Savona,2024-05-17T18:35:27Z
541e3c516d22cd095c4205fdb87328f6532de5fc,"[compiler:playground] Resizable tabs (#29133)

## Summary

Every tab wraps the text around but there is no way to resize it. It was
also hard to use the source map tab. It doesn't occupy the full height
nor is the tab resizable. So I made all the tabs resizable.
> Also,
> * make the source map tab occupy full height
> * make it a teeny tiny bit easier to work with the compiler playground
(especially source map)

## How did you test this change?


https://github.com/facebook/react/assets/91976421/cdec30e8-cadb-4958-8786-31c54ea83bd6

Signed-off-by: abizek <abishekilango@protonmail.com>",Abishek Ilango,2024-05-17T19:31:24Z
1d6eebfb7ff44b24627ef404112bb151f683efe7,"[Compiler][script] Dedupe error report counts before reporting in healthcheck (#29085)

Certain compiler passes currently may collect a few error events before
reporting (see
https://github.com/facebook/react/blob/main/compiler/packages/babel-plugin-react-compiler/src/Entrypoint/Program.ts#L101-L107)",mofeiZ,2024-05-17T18:58:15Z
640017231599b42b4c2436395e11c72fefe9015d,"compiler: update comment on memo cache import code

ghstack-source-id: b6c98c78854c9125bef504731515b9854c01960d
Pull Request resolved: https://github.com/facebook/react/pull/29142",Joe Savona,2024-05-17T18:02:07Z
ecddf3cb077d6d1b542b3d0cd8f87d30fb2030be,"Add issue template for React Compiler

Adds a GitHub issue template form so we can automatically categorize
issues and get more information upfront. I mostly referenced the
DevTools bug report template and made some tweaks.

ghstack-source-id: 5bfc728a625f367932fc21263e82681079d3ac65
Pull Request resolved: https://github.com/facebook/react/pull/29140",Lauren Tan,2024-05-17T17:29:29Z
be6712f72ccfe3e3b9388e169f6f9e261d78637b,"compiler: Workaround Babel bug with unicode in jsx string attrs

Workaround for a bug in older versions of Babel, where strings with unicode are incorrectly escaped when emitted as JSX attributes, causing double-escaping by later processing.

Closes #29120
Closes #29124

ghstack-source-id: 065440d4fb97e164beb8a8f15f252f372a59c5a0
Pull Request resolved: https://github.com/facebook/react/pull/29141",Joe Savona,2024-05-17T17:38:56Z
af3a55e67f0fc9c981b5fe63162b2770ca9548b1,"Lazily freeze in case anything in the currently initializing chunk is blocked (#29139)

Fixed #29129.

---------

Co-authored-by: Hendrik Liebau <mail@hendrik-liebau.de>",Sebastian Markbåge,2024-05-17T17:58:42Z
477a3d1ef5207370df611856702b7d796d478ec1,"[compiler] Todo for for-await loops

ghstack-source-id: 13f11edfbef2af2e2a9ab876c18b0a4013a3eae0
Pull Request resolved: https://github.com/facebook/react/pull/29118",Joe Savona,2024-05-17T00:44:43Z
3f1436cca1f8dd80a19fd52b97b6ff71a4d9ce82,"[compiler:playground] Fix broken builds

Now that the compiler is public, the `*` version was grabbing the latest
version of the compiler off of npm and was resolving to my very first
push to npm (an empty package containing only a single package.json).
This was breaking the playground as it would attempt to load the
compiler but then crash the babel pipeline due to the node module not
being found.

ghstack-source-id: 695fd9caac64d15edfa095b8c871e75520381fcb
Pull Request resolved: https://github.com/facebook/react/pull/29122",Lauren Tan,2024-05-17T06:08:17Z
5ab54718a52d738dcbd03fcb43a556993b445ed4,"compiler: merge reactive scopes across const StoreLocal (#29095)

@jbonta nerd-sniped me into making this optimization during conference
prep, posting this as a PR now that keynote is over.

Consider these two cases:

```javascript
export default function MyApp1({ count }) {
  const cb = () => count;
  return <div onclick={cb}>Hello World</div>;
}

export default function MyApp2({ count }) {
  return <div onclick={() => count}>Hello World</div>;
}
```

Previously, the former would create two reactive scopes (one for `cb`,
one for the div) while the latter would only have a single scope for the
`div` and its inline callback. The reason we created separate scopes
before is that there's a `StoreLocal 'cb' = t0` instruction in-between,
and i had conservatively implemented the merging pass to not allow
intervening StoreLocal instructions.

The observation is that intervening StoreLocals are fine _if_ the
assigned variable's last usage is the next scope. We already have a
check that the intervening lvalues are last-used at/before the next
scope, so it's trivial to extend this to support StoreLocal.

Note that we already don't merge scopes if there are intervening
terminals, so we don't have to worry about things like conditional
StoreLocal, conditional access of the resulting value, etc.",Joseph Savona,2024-05-17T00:29:05Z
7a149aa1623d8973defd1d9b3f8f702eabd86f20,"docs: fix typo DESIGN_GOALS.md (#29102)

## Summary
Fixes typo  DESIGN_GOALS.md  in react compiler docs

## How did you test this change?
it's document fix, so no tests needed.",Yuta Sakou,2024-05-16T23:11:22Z
91e88f94ccb3e58db1c133942ba704fa0e3a139d,allow compiler playground to scroll horizontally,Jason Bonta,2024-05-16T20:15:13Z
94896cb8c5b1dfc80aa947ac9b273b6b9447571f,"[React Compiler] Fix rule name for ESLint plugin (#29096)

/cc @poteto

<!--
  Thanks for submitting a pull request!
We appreciate you spending the time to work on these changes. Please
provide enough information so that others can review your pull request.
The three fields below are mandatory.

Before submitting a pull request, please make sure the following is
done:

1. Fork [the repository](https://github.com/facebook/react) and create
your branch from `main`.
  2. Run `yarn` in the repository root.
3. If you've fixed a bug or added code that should be tested, add tests!
4. Ensure the test suite passes (`yarn test`). Tip: `yarn test --watch
TestName` is helpful in development.
5. Run `yarn test --prod` to test in the production environment. It
supports the same options as `yarn test`.
6. If you need a debugger, run `yarn test --debug --watch TestName`,
open `chrome://inspect`, and press ""Inspect"".
7. Format your code with
[prettier](https://github.com/prettier/prettier) (`yarn prettier`).
8. Make sure your code lints (`yarn lint`). Tip: `yarn linc` to only
check changed files.
  9. Run the [Flow](https://flowtype.org/) type checks (`yarn flow`).
  10. If you haven't already, complete the CLA.

Learn more about contributing:
https://reactjs.org/docs/how-to-contribute.html
-->

## Summary

<!--
Explain the **motivation** for making this change. What existing problem
does the pull request solve?
-->

Seems like the README of the package was outdated.

## How did you test this change?

Tried this configuration in a project of mine.

<!--
Demonstrate the code is solid. Example: The exact commands you ran and
their output, screenshots / videos if the pull request changes the user
interface.
How exactly did you verify that your PR solves the issue you wanted to
solve?
  If you leave this empty, your PR will very likely be closed.
-->",Jan Amann,2024-05-16T16:36:22Z
e8779a9a9add1131ccbd1c84aac8df4467c763e5,"[React Compiler] use `filename` instead of `context.filename` in ESLint plugin (#29104)

<!--
  Thanks for submitting a pull request!
We appreciate you spending the time to work on these changes. Please
provide enough information so that others can review your pull request.
The three fields below are mandatory.

Before submitting a pull request, please make sure the following is
done:

1. Fork [the repository](https://github.com/facebook/react) and create
your branch from `main`.
  2. Run `yarn` in the repository root.
3. If you've fixed a bug or added code that should be tested, add tests!
4. Ensure the test suite passes (`yarn test`). Tip: `yarn test --watch
TestName` is helpful in development.
5. Run `yarn test --prod` to test in the production environment. It
supports the same options as `yarn test`.
6. If you need a debugger, run `yarn test --debug --watch TestName`,
open `chrome://inspect`, and press ""Inspect"".
7. Format your code with
[prettier](https://github.com/prettier/prettier) (`yarn prettier`).
8. Make sure your code lints (`yarn lint`). Tip: `yarn linc` to only
check changed files.
  9. Run the [Flow](https://flowtype.org/) type checks (`yarn flow`).
  10. If you haven't already, complete the CLA.

Learn more about contributing:
https://reactjs.org/docs/how-to-contribute.html
-->

## Summary

Use `filename` instead of `context.filename` in eslint compiler.

The problem is that in `react-native` + `typescript` project the context
may not have `filename`:

<img width=""384"" alt=""image""
src=""https://github.com/facebook/react/assets/22820318/e5d184fa-5ac9-4512-96b9-644baa3d5f25"">

And eslint will crash with:

```bash
TypeError: Error while loading rule 'react-compiler/react-compiler': Cannot read properties of undefined (reading 'endsWith')
```

But in fact we already derive `filename` variable earlier so we can
simply reuse the variable (I guess).

## How did you test this change?

- add `eslint` plugin to RN project;
- run eslint",Kirill Zyusko,2024-05-16T16:35:52Z
149b917c8a4022aeaa170c4fb826107dd2333c68,Bump version to 0.0.0-experimental-8d5174c-20240515,Lauren Tan,2024-05-16T00:43:42Z
c9120570932978a19ec7061797042b155e881a05,Bump version to 0.0.0-experimental-53bb89e-20240515,Lauren Tan,2024-05-16T00:43:41Z
f470ba3218d6b3d2949b4a0b0170423d79e937e1,Bump version to 0.0.0-experimental-c23de8d-20240515,Lauren Tan,2024-05-16T00:43:40Z
7f22c5243e89f5bcbbfcd5daaa4ee3d601f6fd1e,"[compiler:publish] Specify https for registry

Uses https for the npm registry so the publishing script isn't rejected.
Fixes:

```
Beginning October 4, 2021, all connections to the npm registry - including for package installation - must use TLS 1.2 or higher. You are currently using plaintext http to connect. Please visit the GitHub blog for more information: https://github.blog/2021-08-23-npm-registry-deprecating-tls-1-0-tls-1-1/
```

ghstack-source-id: b247d044ea48f3007cf8bd13445fb7ece0f5b02f
Pull Request resolved: https://github.com/facebook/react/pull/29087",Lauren Tan,2024-05-16T00:40:24Z
5052bfba8b55c355cbf749c118525ebfa7f9269c,"chore(docs): fix typo (plugion => plugin) in DESIGN_GOALS.md (#29086)

<!--
  Thanks for submitting a pull request!
We appreciate you spending the time to work on these changes. Please
provide enough information so that others can review your pull request.
The three fields below are mandatory.

Before submitting a pull request, please make sure the following is
done:

1. Fork [the repository](https://github.com/facebook/react) and create
your branch from `main`.
  2. Run `yarn` in the repository root.
3. If you've fixed a bug or added code that should be tested, add tests!
4. Ensure the test suite passes (`yarn test`). Tip: `yarn test --watch
TestName` is helpful in development.
5. Run `yarn test --prod` to test in the production environment. It
supports the same options as `yarn test`.
6. If you need a debugger, run `yarn test --debug --watch TestName`,
open `chrome://inspect`, and press ""Inspect"".
7. Format your code with
[prettier](https://github.com/prettier/prettier) (`yarn prettier`).
8. Make sure your code lints (`yarn lint`). Tip: `yarn linc` to only
check changed files.
  9. Run the [Flow](https://flowtype.org/) type checks (`yarn flow`).
  10. If you haven't already, complete the CLA.

Learn more about contributing:
https://reactjs.org/docs/how-to-contribute.html
-->

## Summary

This PR fixes a typo in `./compiler/docs/DESIGN_GOALS.md`.

I believe `plugion` should be `plugin`.

## How did you test this change?

Rendered the markdown to html.",Steven,2024-05-16T00:41:05Z
50c999eb0e1a583cc4e5309aa8f976d8376f866b,"[compiler] Add readme for babel plugin

Adds a simple readme for the babel plugin with links to the docs.

ghstack-source-id: 4dac0b2a4b2e2114e369dd8f63eea55909f668c1
Pull Request resolved: https://github.com/facebook/react/pull/29084",Lauren Tan,2024-05-15T23:26:26Z
a0eb2653b89179927d0567ef65d847a3dfb84bf8,"[compiler] Check if current branch is main

This script needs to run from `main` since it commits version bumps for
packages, and those need to point to publicly available hashes. So,
throw an error if we're not already on main.

ghstack-source-id: ce0168e826b990fd55733e777ee8effe4f35400a
Pull Request resolved: https://github.com/facebook/react/pull/29083",Lauren Tan,2024-05-15T23:13:35Z
5572edc929bca8d4248d579d7931ab79e3395d04,"[compiler] Various fixes for publishing script

- Specify a registry for npm publish because otherwise it tries to use
  the yarn registry
- `packages` option actually works

This _should_ work now (note last line of output), will test it once we
land this since i want to publish a new version of the eslint plugin
with some important fixes.

```
npm notice
npm notice 📦  eslint-plugin-react-compiler@0.0.0-experimental-53bb89e-20240515
npm notice === Tarball Contents ===
npm notice 827B  README.md
npm notice 2.1MB dist/index.js
npm notice 1.0kB package.json
npm notice === Tarball Details ===
npm notice name:          eslint-plugin-react-compiler
npm notice version:       0.0.0-experimental-53bb89e-20240515
npm notice filename:      eslint-plugin-react-compiler-0.0.0-experimental-53bb89e-20240515.tgz
npm notice package size:  300.9 kB
npm notice unpacked size: 2.1 MB
npm notice shasum:        cb99823f3a483c74f470085cac177bd020f7a85a
npm notice integrity:     sha512-L3HV9qja1dnCl[...]IaRSZJ3P/v6yQ==
npm notice total files:   3
npm notice
npm notice Publishing to http://registry.npmjs.org/ with tag latest and default access (dry-run)
```

ghstack-source-id: 63067ef772c780a665fc04e642b0f533aaacbe44
Pull Request resolved: https://github.com/facebook/react/pull/29082",Lauren Tan,2024-05-15T23:13:35Z
cf7d895db6aa48fb63e6a11d2ef2ae3ea5c48169,"[compiler:eslint] Fix false positive with TS type param syntax

Previously we would attempt to parse code in the eslint plugin with the
HermesParser first as it can handle some TS syntax. However, this was
leading to a mis-parse of React hook calls with type params (eg,
`useRef<null>()` as a BinaryExpression rather than a CallExpression with
a type param. This triggered our validation that Hooks should not be
used as normal values.

To fix this, we now try to parse with the babel parser (with TS support)
for filenames that end with ts/tsx, and fallback to HermesParser for
regular JS files.

ghstack-source-id: 5b7231031cace749a6e689412b3e8b5c9d03ed4b
Pull Request resolved: https://github.com/facebook/react/pull/29081",Lauren Tan,2024-05-15T22:36:27Z
3adca7a477f7dd025ea02599b59433b86ac8fd59,"compiler: fix jsx text attributes with double quotes (#29079)

Fixes #29069 by detecting the presence of double-quotes in JSX attribute
strings and falling back to using an expression container.",Joseph Savona,2024-05-15T21:40:33Z
5e11e7fc203754cf95e27baed957c581b9ba44b8,"[heathcheck] Check for namespaced StrictMode (#29076)

Previously, we only checked for StrictMode by searching for
`<StrictMode>` but we should also check for the namespaced version,
`<React.StrictMode>`.

Fixes https://github.com/facebook/react/issues/29075",Sathya Gunasekaran,2024-05-15T21:15:32Z
c93c30f9d4c6339708636c3fbf9189acfe96443f,"Fix ESLint and Prettier configs for React Compiler (#29073)

Fixes the top-level ESLint and Prettier configs to ignore the compiler.
For now the compiler has its own prettier and linting setup with
different versions/configs.",Joseph Savona,2024-05-15T21:02:57Z
cfeb491ee74073a48372c04d31142f5cacf2d5ec,"Add a `main` field to `eslint-plugin-react-compiler`, fixes #29068. (#29072)

## Summary

The main field is missing, this fixes it.

Fixes #29068.

## How did you test this change?

Manually patched the package and tried it in my codebase.",Christoph Nakazawa,2024-05-15T21:02:20Z
71565a932cfc877a42bdc6ad3ffc72bab0788ca5,"Merge pull request #29061 from facebook/compiler

Open-source React Compiler",Joseph Savona,2024-05-15T18:16:19Z
575477a2e8f9db57ef4a1bf0d3b449e4f8244af8,Publish React Compiler to open source,Joe Savona,2024-05-15T17:58:51Z
740b7c1b0af4dd411b2656fc06cbe08ea2050082,Bump version to 0.0.0-experimental-410375f-20240515,Lauren Tan,2024-05-15T15:05:02Z
5501ebceec7805c9f62ac051bb16d89bfe6d904f,Bump version to 0.0.0-experimental-e04a001-20240515,Lauren Tan,2024-05-15T15:05:02Z
d794e4a86ee75c3f6198ff99b3ddf6e10681ed46,Bump version to 0.0.0-experimental-4690415-20240515,Lauren Tan,2024-05-15T15:05:01Z
41142f306e2fed4525708cd348ce720740e028ed,Unthrow publish script,Lauren Tan,2024-05-15T14:51:02Z
915b914b3a05b60590c75851464e1ca75249976d,"Bump React 19 beta to RC (#29060)

This updates the Canary label from ""beta"" to ""rc"".

We will publish an actual RC (e.g. 19.0.0-rc.0) too; this only changes
the label in the canary releases.",Andrew Clark,2024-05-15T15:01:28Z
ecccaf6e017911cd0b39e4f54cc570ff1ba29824,"Fix CI for compiler paths

ghstack-source-id: 43bb0c8c957fc550203445868c90fa706e3a8d11
Pull Request resolved: https://github.com/facebook/react-forget/pull/2968",Lauren Tan,2024-05-14T15:01:18Z
6457343cd3c22a9eedbd943ec0ff61d7b7134d08,"Don't emit types for babel-plugin-react-compiler

ghstack-source-id: a1776f97d5f7d4d8e02886906eb001e358628fc8
Pull Request resolved: https://github.com/facebook/react-forget/pull/2967",Lauren Tan,2024-05-14T15:01:17Z
6948639df67235e3f79755f2373ff5f913e86637,"[publish] Add script to publish packages

Adds a script to publish babel-plugin-react-compiler,
eslint-plugin-react-compiler, and react-compiler-healthcheck to npm.

Instructions are in a comment in scripts/publish.js, please read
carefully before using this script!

Test plan:

```
$ yarn npm:publish

yarn run v1.22.10
$ node scripts/publish
ℹ Preparing to publish (dry run) [debug=false]
ℹ Building packages
✔ Successfully built babel-plugin-react-compiler
✔ Successfully built eslint-plugin-react-compiler
✔ Successfully built react-compiler-healthcheck
ℹ Dry run: Report tarball contents

========== babel-plugin-react-compiler ==========

⠴ Running npm pack --dry-run
npm WARN config init.author.name Use `--init-author-name` instead.
npm WARN config init.author.email Use `--init-author-email` instead.
⠦ Running npm pack --dry-run
npm notice
npm notice 📦  babel-plugin-react-compiler@0.0.1
npm notice === Tarball Contents ===
npm notice 11B    dist/__tests__/DisjointSet-test.d.ts
npm notice 11B    dist/__tests__/envConfig-test.d.ts
npm notice 11B    dist/__tests__/Logger-test.d.ts
npm notice 11B    dist/__tests__/parseConfigPragma-test.d.ts
npm notice 11B    dist/__tests__/Result-test.d.ts
npm notice 145B   dist/__tests__/test-utils/validateNoUseBeforeDefine.d.ts
npm notice 144B   dist/Babel/BabelPlugin.d.ts
npm notice 350B   dist/Babel/RunReactCompilerBabelPlugin.d.ts
npm notice 2.4kB  dist/CompilerError.d.ts
npm notice 455B   dist/Entrypoint/Gating.d.ts
npm notice 376B   dist/Entrypoint/Imports.d.ts
npm notice 166B   dist/Entrypoint/index.d.ts
npm notice 1.8kB  dist/Entrypoint/Options.d.ts
npm notice 1.3kB  dist/Entrypoint/Pipeline.d.ts
npm notice 819B   dist/Entrypoint/Program.d.ts
npm notice 295B   dist/Entrypoint/Reanimated.d.ts
npm notice 753B   dist/Entrypoint/Suppression.d.ts
npm notice 113B   dist/HIR/AssertConsistentIdentifiers.d.ts
npm notice 115B   dist/HIR/AssertTerminalSuccessorsExist.d.ts
npm notice 529B   dist/HIR/AssertValidBlockNesting.d.ts
npm notice 110B   dist/HIR/AssertValidMutableRanges.d.ts
npm notice 585B   dist/HIR/BuildHIR.d.ts
npm notice 116B   dist/HIR/BuildReactiveScopeTerminalsHIR.d.ts
npm notice 125B   dist/HIR/ComputeUnconditionalBlocks.d.ts
npm notice 602B   dist/HIR/Dominator.d.ts
npm notice 12.7kB dist/HIR/Environment.d.ts
npm notice 184B   dist/HIR/FindContextIdentifiers.d.ts
npm notice 401B   dist/HIR/Globals.d.ts
npm notice 22.2kB dist/HIR/HIR.d.ts
npm notice 2.8kB  dist/HIR/HIRBuilder.d.ts
npm notice 1.1kB  dist/HIR/index.d.ts
npm notice 108B   dist/HIR/MergeConsecutiveBlocks.d.ts
npm notice 115B   dist/HIR/MergeOverlappingReactiveScopesHIR.d.ts
npm notice 2.2kB  dist/HIR/ObjectShape.d.ts
npm notice 1.4kB  dist/HIR/PrintHIR.d.ts
npm notice 106B   dist/HIR/PruneUnusedLabelsHIR.d.ts
npm notice 1.1kB  dist/HIR/Types.d.ts
npm notice 1.9kB  dist/HIR/visitors.d.ts
npm notice 776B   dist/index.d.ts
npm notice 5.4MB  dist/index.js
npm notice 429B   dist/Inference/AnalyseFunctions.d.ts
npm notice 324B   dist/Inference/DropManualMemoization.d.ts
npm notice 436B   dist/Inference/index.d.ts
npm notice 224B   dist/Inference/InferAlias.d.ts
npm notice 204B   dist/Inference/InferAliasForPhis.d.ts
npm notice 206B   dist/Inference/InferAliasForStores.d.ts
npm notice 115B   dist/Inference/InferMutableContextVariables.d.ts
npm notice 151B   dist/Inference/InferMutableLifetimes.d.ts
npm notice 109B   dist/Inference/InferMutableRanges.d.ts
npm notice 212B   dist/Inference/InferMutableRangesForAlias.d.ts
npm notice 106B   dist/Inference/InferReactivePlaces.d.ts
npm notice 368B   dist/Inference/InferReferenceEffects.d.ts
npm notice 201B   dist/Inference/InferTryCatchAliases.d.ts
npm notice 130B   dist/Inference/InlineImmediatelyInvokedFunctionExpressions.d.ts
npm notice 106B   dist/Optimization/ConstantPropagation.d.ts
npm notice 258B   dist/Optimization/DeadCodeElimination.d.ts
npm notice 177B   dist/Optimization/index.d.ts
npm notice 103B   dist/Optimization/PruneMaybeThrows.d.ts
npm notice 108B   dist/ReactiveScopes/AlignMethodCallScopes.d.ts
npm notice 110B   dist/ReactiveScopes/AlignObjectMethodScopes.d.ts
npm notice 133B   dist/ReactiveScopes/AlignReactiveScopesToBlockScopes.d.ts
npm notice 126B   dist/ReactiveScopes/AlignReactiveScopesToBlockScopesHIR.d.ts
npm notice 132B   dist/ReactiveScopes/AssertScopeInstructionsWithinScope.d.ts
npm notice 125B   dist/ReactiveScopes/AssertWellFormedBreakTargets.d.ts
npm notice 363B   dist/ReactiveScopes/BuildReactiveBlocks.d.ts
npm notice 142B   dist/ReactiveScopes/BuildReactiveFunction.d.ts
npm notice 759B   dist/ReactiveScopes/CodegenReactiveFunction.d.ts
npm notice 154B   dist/ReactiveScopes/CollectReactiveIdentifiers.d.ts
npm notice 128B   dist/ReactiveScopes/CollectReferencedGlobals.d.ts
npm notice 698B   dist/ReactiveScopes/DeriveMinimalDependencies.d.ts
npm notice 138B   dist/ReactiveScopes/ExtractScopeDeclarationsFromDestructuring.d.ts
npm notice 121B   dist/ReactiveScopes/FlattenReactiveLoops.d.ts
npm notice 124B   dist/ReactiveScopes/FlattenScopesWithHooksOrUse.d.ts
npm notice 2.1kB  dist/ReactiveScopes/index.d.ts
npm notice 370B   dist/ReactiveScopes/InferReactiveScopeVariables.d.ts
npm notice 217B   dist/ReactiveScopes/MemoizeFbtOperandsInSameScope.d.ts
npm notice 127B   dist/ReactiveScopes/MergeOverlappingReactiveScopes.d.ts
npm notice 138B   dist/ReactiveScopes/MergeReactiveScopesThatInvalidateTogether.d.ts
npm notice 1.0kB  dist/ReactiveScopes/PrintReactiveFunction.d.ts
npm notice 123B   dist/ReactiveScopes/PromoteUsedTemporaries.d.ts
npm notice 118B   dist/ReactiveScopes/PropagateEarlyReturns.d.ts
npm notice 127B   dist/ReactiveScopes/PropagateScopeDependencies.d.ts
npm notice 123B   dist/ReactiveScopes/PruneAllReactiveScopes.d.ts
npm notice 126B   dist/ReactiveScopes/PruneAlwaysInvalidatingScopes.d.ts
npm notice 117B   dist/ReactiveScopes/PruneHoistedContexts.d.ts
npm notice 227B   dist/ReactiveScopes/PruneNonEscapingScopes.d.ts
npm notice 125B   dist/ReactiveScopes/PruneNonReactiveDependencies.d.ts
npm notice 122B   dist/ReactiveScopes/PruneTemporaryLValues.d.ts
npm notice 118B   dist/ReactiveScopes/PruneUnusedLabels.d.ts
npm notice 118B   dist/ReactiveScopes/PruneUnusedScopes.d.ts
npm notice 123B   dist/ReactiveScopes/RenameVariables.d.ts
npm notice 114B   dist/ReactiveScopes/StabilizeBlockIds.d.ts
npm notice 3.1kB  dist/ReactiveScopes/visitors.d.ts
npm notice 170B   dist/SSA/EliminateRedundantPhi.d.ts
npm notice 101B   dist/SSA/EnterSSA.d.ts
npm notice 154B   dist/SSA/index.d.ts
npm notice 99B    dist/SSA/LeaveSSA.d.ts
npm notice 63.5kB dist/tsconfig.tsbuildinfo
npm notice 43B    dist/TypeInference/index.d.ts
npm notice 103B   dist/TypeInference/InferTypes.d.ts
npm notice 352B   dist/Utils/ComponentDeclaration.d.ts
npm notice 256B   dist/Utils/DisjointSet.d.ts
npm notice 322B   dist/Utils/HookDeclaration.d.ts
npm notice 613B   dist/Utils/logger.d.ts
npm notice 2.3kB  dist/Utils/Result.d.ts
npm notice 119B   dist/Utils/RuntimeDiagnosticConstants.d.ts
npm notice 1.1kB  dist/Utils/Stack.d.ts
npm notice 149B   dist/Utils/todo.d.ts
npm notice 782B   dist/Utils/utils.d.ts
npm notice 603B   dist/Validation/index.d.ts
npm notice 117B   dist/Validation/ValidateContextVariableLValues.d.ts
npm notice 109B   dist/Validation/ValidateHooksUsage.d.ts
npm notice 214B   dist/Validation/ValidateMemoizedEffectDependencies.d.ts
npm notice 113B   dist/Validation/ValidateNoCapitalizedCalls.d.ts
npm notice 114B   dist/Validation/ValidateNoRefAccesInRender.d.ts
npm notice 113B   dist/Validation/ValidateNoSetStateInRender.d.ts
npm notice 131B   dist/Validation/ValidatePreservedManualMemoization.d.ts
npm notice 102B   dist/Validation/ValidateUseMemo.d.ts
npm notice 2.3kB  package.json
npm notice === Tarball Details ===
npm notice name:          babel-plugin-react-compiler
npm notice version:       0.0.1
npm notice filename:      babel-plugin-react-compiler-0.0.1.tgz
npm notice package size:  1.1 MB
npm notice unpacked size: 5.5 MB
npm notice shasum:        9a0fb71bdc904d6ab92432a506b0e037f10dd7ce
npm notice integrity:     sha512-hXtObyIEP4MbO[...]jstRbpztyLf4g==
npm notice total files:   119
npm notice

========== eslint-plugin-react-compiler ==========

⠴ Running npm pack --dry-run
npm WARN config init.author.name Use `--init-author-name` instead.
npm WARN config init.author.email Use `--init-author-email` instead.
⠋ Running npm pack --dry-run
npm notice
npm notice 📦  eslint-plugin-react-compiler@0.0.0
npm notice === Tarball Contents ===
npm notice 827B  README.md
npm notice 2.1MB dist/index.js
npm notice 968B  package.json
npm notice === Tarball Details ===
npm notice name:          eslint-plugin-react-compiler
npm notice version:       0.0.0
npm notice filename:      eslint-plugin-react-compiler-0.0.0.tgz
npm notice package size:  300.5 kB
npm notice unpacked size: 2.1 MB
npm notice shasum:        f24dab544b03d36d9bb676a16256f114bd5e0ed6
npm notice integrity:     sha512-8PcKZXZ+RVBDP[...]D7jFmkvHJoBeA==
npm notice total files:   3
npm notice

========== react-compiler-healthcheck ==========

⠼ Running npm pack --dry-run
npm WARN config init.author.name Use `--init-author-name` instead.
npm WARN config init.author.email Use `--init-author-email` instead.
⠏ Running npm pack --dry-run
npm notice
npm notice 📦  react-compiler-healthcheck@0.0.0
npm notice === Tarball Contents ===
npm notice 2.1MB dist/index.js
npm notice 677B  package.json
npm notice 1.8kB rollup.config.js
npm notice 1.1kB src/checks/libraryCompat.ts
npm notice 3.2kB src/checks/reactCompiler.ts
npm notice 759B  src/checks/strictMode.ts
npm notice 67B   src/config.ts
npm notice 1.5kB src/index.ts
npm notice 602B  tsconfig.json
npm notice === Tarball Details ===
npm notice name:          react-compiler-healthcheck
npm notice version:       0.0.0
npm notice filename:      react-compiler-healthcheck-0.0.0.tgz
npm notice package size:  290.4 kB
npm notice unpacked size: 2.1 MB
npm notice shasum:        55c0eb57aebc7305270a29e78ebf6c056044bae0
npm notice integrity:     sha512-nPVhGyh8i9PoO[...]v52c3U0tKGpzA==
npm notice total files:   9
npm notice
✔ Please confirm contents of packages before publishing. You can run this command again with --for-real to publish to npm
✨  Done in 61.19s.
```

```
$ yarn npm:publish --debug --for-real

yarn run v1.22.10
$ node scripts/publish --debug --for-real
ℹ Preparing to publish (for real) [debug=true]
ℹ Building packages
✔ Successfully built babel-plugin-react-compiler
✔ Successfully built eslint-plugin-react-compiler
✔ Successfully built react-compiler-healthcheck
✔ Bumped babel-plugin-react-compiler to 0.0.0-experimental-2769f7a-20240513
✔ Bumped eslint-plugin-react-compiler to 0.0.0-experimental-e04a001-20240513
✔ Bumped react-compiler-healthcheck to 0.0.0-experimental-410375f-20240513

========== babel-plugin-react-compiler ==========

⠋ Publishing babel-plugin-react-compiler to npm
Command that would have run: npm publish --dry-run
/Users/lauren/code/react-forget/compiler/scripts/publish.js:188
      throw new Error(
            ^

Error: This error is intentional, please double check scripts/publish.js and remove this error prior to publishing
    at main (/Users/lauren/code/react-forget/compiler/scripts/publish.js:188:13)

Node.js v20.11.0
error Command failed with exit code 1.
info Visit https://yarnpkg.com/en/docs/cli/run for documentation about this command.
```

On the day of launch, remove the hardcoded error, then run `yarn
npm:publish --debug --for-real` first as a sanity check. Confirm the
contents are correct.

Then when you are certain, run `yarn npm:publish --for-real`, and push
the commited version bumps to GitHub so the hashes that the packages
originate from are public.

ghstack-source-id: 403bc22d4b340056fd112fcfc38580f28ed6c986
Pull Request resolved: https://github.com/facebook/react-forget/pull/2966",Lauren Tan,2024-05-14T15:01:17Z
67ea821e5fe6ddf3c734ec08ccf3630de9ef73ae,"[publish] Fix `files` field for packages, invalid version range

The [`files` field](https://docs.npmjs.com/cli/v10/commands/npm-publish#files-included-in-package)
controls what files get included in the published package.

This PR specifies the `files` field on our publishable packages to only
include the `dist` directory, since we don't need to ship any types or
sourcemaps with 3 of them.

react-compiler-runtime is a runtime package which has sourcemaps, so we
also include the `src` directory in the published package.

Also fixes an invalid version range for the react peer dependency in
react-compiler-runtime, tested that it works via https://semver.npmjs.com/

ghstack-source-id: 12b36c203fc9fd8d72a1995fb3fba2312de4aa51
Pull Request resolved: https://github.com/facebook/react-forget/pull/2965",Lauren Tan,2024-05-14T15:01:16Z
5a842dbfb15975597ce51a304bce5a2cf070399f,"Fix healthcheck package.json bin field

ghstack-source-id: 28045c6edb342dea125ea8fcea564ce90626f21d
Pull Request resolved: https://github.com/facebook/react-forget/pull/2964",Lauren Tan,2024-05-14T15:01:16Z
26f24960935cc395dd9892b3ac48249c9dbcc195,"Remove 2 no longer existing files from inlinedHostConfig (#29027)

Remove 2 no longer existing files from inlinedHostConfig

While looking for `.classic` forks, I noticed these files no longer
exist.",Jan Kassens,2024-05-14T14:07:00Z
5f28f517593558f543683cbf0ff1bd7f48569f16,"Enable `enableUnifiedSyncLane` for React Native (Meta) (#29052)

## Summary

Enables the `enableUnifiedSyncLane` feature flag for React Native
(Meta).

## How did you test this change?

```
$ yarn test
$ yarn flow fabric
```",Timothy Yung,2024-05-14T05:56:42Z
b956024f3d10d82a3f1b9a5186727d8275f42ab4,"Fix Jest tests

ghstack-source-id: e2507b7285bb52ee02d2cece35aa16eb0bc0baa5
Pull Request resolved: https://github.com/facebook/react-forget/pull/2963",Joe Savona,2024-05-13T21:09:44Z
ce0c08eaad59122422a98b0103e96aa15ff29166,"[healthcheck] Clean up ignorelist and check if deps exist

ghstack-source-id: b6d58988eeb86e657a6db2a481b6c2fe2fba0344
Pull Request resolved: https://github.com/facebook/react-forget/pull/2962",Lauren Tan,2024-05-13T21:01:34Z
4cf7ee23fba90d958d608c0645236aa54b296fd8,"CI: remove non-functional Rust compiler benchmark workflow (#2948)

`forget_napi` doesn't exist and given we're not currently working on the Rust compiler, I'm not sure we need to keep this around until we know that we do want to invest into this area again.",Jan Kassens,2024-05-13T21:04:18Z
7e3be125e8b9bd6608d2532c9ec5997eac35267b,"Use unique name for c import local identifier

ghstack-source-id: 93055b972fd91572edf8ba51c980006dfdfcd314
Pull Request resolved: https://github.com/facebook/react-forget/pull/2961",Joe Savona,2024-05-13T19:56:33Z
669e8d02b1121ce66b3e8f36f59a31dfbdaacb62,"[healthcheck] Refine glob pattern

ghstack-source-id: 6f9e7f95348ab66c699c38f3625a654d91c856c4
Pull Request resolved: https://github.com/facebook/react-forget/pull/2960",Lauren Tan,2024-05-11T04:20:03Z
9ef755773028ed03bf28e27ed3ae057ff86c9ea3,"[healthcheck] Don't compile mjs

ghstack-source-id: 087985cd23baeefc0e2fb9478cd9a162b4e2e023
Pull Request resolved: https://github.com/facebook/react-forget/pull/2959",Lauren Tan,2024-05-11T04:20:02Z
78da5becaf1e705d0a4ae3fe84596f95d9202045,"[healthcheck] Remove console.error

ghstack-source-id: c06d44960cfb831e3dc8162858977c4ef619309d
Pull Request resolved: https://github.com/facebook/react-forget/pull/2958",Lauren Tan,2024-05-11T04:20:00Z
76b7331b0d817bd4b304d31cc049cbce6ba3b3a2,"[healthcheck] Only glob files with certain extensions by default

ghstack-source-id: b8db17266992a705645c86916966e06404709fa0
Pull Request resolved: https://github.com/facebook/react-forget/pull/2957",Lauren Tan,2024-05-11T04:20:00Z
63e533026062450f7e033af1e15545eb4463fce6,"[healthcheck] Rename to react-compiler-healthcheck

Don't really have time to implement the react-compiler/healthcheck
version of this script, so for now i propose we just publish this as
react-compiler-healthcheck

the command for running this would be

```
$ npx react-compiler-healthcheck --src 'whatever/**/*.*'
```

ghstack-source-id: e2c443a91257433d80dd51c8c855e4aa0bd99a37
Pull Request resolved: https://github.com/facebook/react-forget/pull/2956",Lauren Tan,2024-05-11T04:19:59Z
9a6ce3379d6390cf4b952e4ce261f9a975ffd8eb,"[healthcheck] Fix build

runReactBabelPluginReactCompiler brings in fbt which is unnecessary for
OSS so I removed it.

Also makes it so healthckeck is installed as an executable

ghstack-source-id: ec6c76f8be01483d4ca75d9d74037b3966fccbdb
Pull Request resolved: https://github.com/facebook/react-forget/pull/2955",Lauren Tan,2024-05-11T04:19:59Z
db34843c424d55da7b39a35b8043bb49a1da9515,"[healthcheck] Build with rollup

ghstack-source-id: cd40da2ddce047838ed031eed1c1f8e605648a78
Pull Request resolved: https://github.com/facebook/react-forget/pull/2954",Lauren Tan,2024-05-11T04:19:59Z
9b0044e21387f10b005b58fb50c2ea4fcf2f228f,"Better detection for reanimated

We found this issue through enabling the compiler on the React Conf app.

`babel-preset-expo` automatically adds the `react-native-animated`
plugin to apps that use the preset. This means that Expo apps sometimes
omit the react-native-animated plugin from their config, which was
failing our existing check. This PR copies the same detection that Expo
does for adding reanimated as a fallback

ghstack-source-id: 46f7aec0bc3035a92369f65b0842bafab0089a9e
Pull Request resolved: https://github.com/facebook/react-forget/pull/2953",Lauren Tan,2024-05-11T04:19:59Z
c58142ba35566536999cddfe83f241918856b1d6,"ReAnimated -> Reanimated

Fixes a small typo by request

ghstack-source-id: 00889150a952308f00d89472c864726222e835d3
Pull Request resolved: https://github.com/facebook/react-forget/pull/2952",Lauren Tan,2024-05-11T04:19:58Z
9d76c954cfe134d7f541c3e706e344e6845ba235,"[Flight] Error if a legacy React Element is attempted to be rendered (#29043)

This errors on the client normally but in the case the `type` is a
function - i.e. a Server Component - it wouldn't be transferred to error
on the client so you end up with a worse error message. So this just
implements the same check as ChildFiber.",Sebastian Markbåge,2024-05-10T13:37:42Z
2c022b847ed2171c59d37db9f71b394e0082ae3f,"Clean up the enableEarlyReturnForPropDiffing experiment (#29041)

## Summary

The experiment has shown no significant performance changes. This PR
removes it.

## How did you test this change?
```
yarn flow native
yarn lint
```",Dmytro Rykun,2024-05-10T10:00:03Z
6ef0dd4f2cf6a6083bfadb6a445d348cc7815849,"[Flight] Enable Binary and ReadableStreams in Stable (#29035)

These are ready to ship in stable.",Sebastian Markbåge,2024-05-10T00:56:15Z
6c409acefde29d6ef87dfb208716ec3272bd3c54,"[Flight Reply] Encode Objects Returned to the Client by Reference (#29010)

Stacked on #28997.

We can use the technique of referencing an object by its row + property
name path for temporary references - like we do for deduping. That way
we don't need to generate an ID for temporary references. Instead, they
can just be an opaque marker in the slot and it has the implicit ID of
the row + path.

Then we can stash all objects, even the ones that are actually available
to read on the server, as temporary references. Without adding anything
to the payload since the IDs are implicit. If the same object is
returned to the client, it can be referenced by reference instead of
serializing it back to the client. This also helps preserve object
identity.

We assume that the objects are immutable when they pass the boundary.

I'm not sure if this is worth it but with this mechanism, if you return
the `FormData` payload from a `useActionState` it doesn't have to be
serialized on the way back to the client. This is a common pattern for
having access to the last submission as ""default value"" to the form
fields. However you can still control it by replacing it with another
object if you want. In MPA mode, the temporary references are not
configured and so it needs to be serialized in that case. That's
required anyway for hydration purposes.

I'm not sure if people will actually use this in practice though or if
FormData will always be destructured into some other object like with a
library that turns it into typed data, and back. If so, the object
identity is lost.",Sebastian Markbåge,2024-05-10T00:00:56Z
38d9f156b898c9b0f7e73eeec7c2073927fd71d8,"[Flight Reply] Dedupe Objects and Support Cyclic References (#28997)

Uses the same technique as in #28996 to encode references to already
emitted objects. This now means that Reply can support cyclic objects
too for parity.",Sebastian Markbåge,2024-05-09T23:24:37Z
7a78d030281f2f0e02e7cdbed5c1fc5c4a1a1823,"[Flight] Encode references to existing objects by property path (#28996)

Instead of forcing an object to be outlined to be able to refer to it
later we can refer to it by the property path inside another parent
object.

E.g. this encodes such a reference as `'$123:props:children:foo:bar'`.

That way we don't have to preemptively outline object and we can dedupe
after the first time we've found it.

There's no cost on the client if it's not used because we're not storing
any additional information preemptively.

This works mainly because we only have simple JSON objects from the root
reference. Complex objects like Map, FormData etc. are stored as their
entries array in the look up and not the complex object. Other complex
objects like TypedArrays or imports don't have deeply nested objects in
them that can be referenced.

This solves the problem that we only dedupe after the third instance.
This dedupes at the second instance. It also solves the problem where
all nested objects inside deduped instances also are outlined.

The property paths can get pretty large. This is why a test on payload
size increased. We could potentially outline the reference itself at the
first dupe. That way we get a shorter ID to refer to in the third
instance.",Sebastian Markbåge,2024-05-09T23:16:14Z
6b23c25ff93dafce938aa94910b9a94df33bc850,"Support HMR

Adds supports for hot module reloading (HMR) by resetting the cache if a hash of the source file changes. This is enabled via a compiler flag, but also enabled automatically via the babel plugin when NODE_ENV=development.

ghstack-source-id: 5cd1ad5c893533c93275c2d78b57ec0c8f1d24e7
Pull Request resolved: https://github.com/facebook/react-forget/pull/2951",Joe Savona,2024-05-09T20:48:14Z
c3345638cbb4a53df8151fd9ef106ea018fb5033,"Support useFormStatus in progressively-enhanced forms (#29019)

Before this change, `useFormStatus` is only activated if a form is
submitted by an action function (either `<form action={actionFn}>` or
`<button formAction={actionFn}>`).

After this change, `useFormStatus` will also be activated if you call
`startTransition(actionFn)` inside a submit event handler that is
`preventDefault`-ed.

This is the last missing piece for implementing a custom `action` prop
that is progressively enhanced using `onSubmit` while maintaining the
same behavior as built-in form actions.

Here's the basic recipe for implementing a progressively-enhanced form
action. This would typically be implemented in your UI component
library, not regular application code:

```js
import {requestFormReset} from 'react-dom';

// To implement progressive enhancement, pass both a form action *and* a
// submit event handler. The action is used for submissions that happen
// before hydration, and the submit handler is used for submissions that
// happen after.
<form
  action={action}
  onSubmit={(event) => {
    // After hydration, we upgrade the form with additional client-
    // only behavior.
    event.preventDefault();

    // Manually dispatch the action.
    startTransition(async () => {
      // (Optional) Reset any uncontrolled inputs once the action is
      // complete, like built-in form actions do.
      requestFormReset(event.target);

      // ...Do extra action-y stuff in here, like setting a custom
      // optimistic state...

      // Call the user-provided action
      const formData = new FormData(event.target);
      await action(formData);
    });
  }}
/>
```",Andrew Clark,2024-05-09T17:16:08Z
151cce37401dc2ff609701119d61a17d92fce4ab,"Track Stack of JSX Calls (#29032)

This is the first step to experimenting with a new type of stack traces
behind the `enableOwnerStacks` flag - in DEV only.

The idea is to generate stacks that are more like if the JSX was a
direct call even though it's actually a lazy call. Not only can you see
which exact JSX call line number generated the erroring component but if
that's inside an abstraction function, which function called that
function and if it's a component, which component generated that
component. For this to make sense it really need to be the ""owner"" stack
rather than the parent stack like we do for other component stacks. On
one hand it has more precise information but on the other hand it also
loses context. For most types of problems the owner stack is the most
useful though since it tells you which component rendered this
component.

The problem with the platform in its current state is that there's two
ways to deal with stacks:

1) `new Error().stack` 
2) `console.createTask()`

The nice thing about `new Error().stack` is that we can extract the
frames and piece them together in whatever way we want. That is great
for constructing custom UIs like error dialogs. Unfortunately, we can't
take custom stacks and set them in the native UIs like Chrome DevTools.

The nice thing about `console.createTask()` is that the resulting stacks
are natively integrated into the Chrome DevTools in the console and the
breakpoint debugger. They also automatically follow source mapping and
ignoreLists. The downside is that there's no way to extract the async
stack outside the native UI itself so this information cannot be used
for custom UIs like errors dialogs. It also means we can't collect this
on the server and then pass it to the client for server components.

The solution here is that we use both techniques and collect both an
`Error` object and a `Task` object for every JSX call.

The main concern about this approach is the performance so that's the
main thing to test. It's certainly too slow for production but it might
also be too slow even for DEV.

This first PR doesn't actually use the stacks yet. It just collects them
as the first step. The next step is to start utilizing this information
in error printing etc.

For RSC we pass the stack along across over the wire. This can be
concatenated on the client following the owner path to create an owner
stack leading back into the server. We'll later use this information to
restore fake frames on the client for native integration. Since this
information quickly gets pretty heavy if we include all frames, we strip
out the top frame. We also strip out everything below the functions that
call into user space in the Flight runtime. To do this we need to figure
out the frames that represents calling out into user space. The
resulting stack is typically just the one frame inside the owner
component's JSX callsite. I also eagerly strip out things we expect to
be ignoreList:ed anyway - such as `node_modules` and Node.js internals.",Sebastian Markbåge,2024-05-09T16:23:05Z
04b058868c9fc61c78124b12efb168734d79d09e,"Upgrade jest and jsdom (#29026)

## Summary

This brings:
 - jest* up from 29.4.2 -> 29.7.0
 - jsdom up from 20.0.0 -> 22.1.0

While the latest version of jest-dom-environment still wants
`jsdom@^20.0.0`, it can safely use at least up to `jsdom@22.1.0`. See
https://github.com/jestjs/jest/pull/13825#issuecomment-1564015010 for
details.

Upgrading to latest versions lets us improve some WheelEvent tests and
will make it possible to test a much simpler FormData construction
approach (see #29018)

## How did you test this change?

Ran `yarn test` and `yarn test --prod` successfully",Jon Jensen,2024-05-08T17:57:25Z
b1d4096396c1f33cc799d703792cc3f915da8e41,"Facebook: merge react index.classic.fb and index.modern.fb (#29025)

Facebook: merge react index.classic.fb and index.modern.fb

These export the same.

NOTE: The 2 builds are still different based on flags and other forked
files.",Jan Kassens,2024-05-08T17:37:47Z
6946ebe620845a0d18e912c9e7ccd4baa0964f1c,"Cleanup enableServerComponentKeys flag (#28743)

Cleanup enableServerComponentKeys flag

Flag is `true` everywhere but RN where it doesn't apply.",Jan Kassens,2024-05-08T14:52:49Z
1717ab017123cbca9f36238b064e47c4c3259966,"React DevTools 5.1.0 -> 5.2.0 (#29022)

Full list of changes (not a public changelog):
* fix[react-devtools/ci]: fix configurations for e2e testing
([hoxyq](https://github.com/hoxyq) in
[#29016](https://github.com/facebook/react/pull/29016))
* feat[react-devtools]: display forget badge for components in profiling
session ([hoxyq](https://github.com/hoxyq) in
[#29014](https://github.com/facebook/react/pull/29014))
* fix[react-devtools]: add backwards compat with legacy element type
symbol ([hoxyq](https://github.com/hoxyq) in
[#28982](https://github.com/facebook/react/pull/28982))
* Expose ""view source"" options to Fusebox integration
([motiz88](https://github.com/motiz88) in
[#28973](https://github.com/facebook/react/pull/28973))
* Enable inspected element context menu in Fusebox
([motiz88](https://github.com/motiz88) in
[#28972](https://github.com/facebook/react/pull/28972))
* Check in `frontend.d.ts` for react-devtools-fusebox, include in build
output ([motiz88](https://github.com/motiz88) in
[#28970](https://github.com/facebook/react/pull/28970))
* Devtools: Fix build-for-devtools
([eps1lon](https://github.com/eps1lon) in
[#28976](https://github.com/facebook/react/pull/28976))
* Move useMemoCache hook to react/compiler-runtime
([kassens](https://github.com/kassens) in
[#28954](https://github.com/facebook/react/pull/28954))
* warn -> error for Test Renderer deprecation
([acdlite](https://github.com/acdlite) in
[#28904](https://github.com/facebook/react/pull/28904))
* [react-dom] move all client code to `react-dom/client`
([gnoff](https://github.com/gnoff) in
[#28271](https://github.com/facebook/react/pull/28271))
* Rename the react.element symbol to react.transitional.element
([sebmarkbage](https://github.com/sebmarkbage) in
[#28813](https://github.com/facebook/react/pull/28813))
* Rename Forget badge ([jbonta](https://github.com/jbonta) in
[#28858](https://github.com/facebook/react/pull/28858))
* Devtools: Add support for useFormStatus
([eps1lon](https://github.com/eps1lon) in
[#28413](https://github.com/facebook/react/pull/28413))",Ruslan Lesiutin,2024-05-08T12:26:14Z
0e6ea6991eef6d1f0d203965c9e4606698fe6944,"fix[react-devtools/InspectedElementView.css]: dont draw bottom border for empty badge list (#29023)

Forward fix to https://github.com/facebook/react/pull/29014, the bug was
discovered while testing v5.2.0.",Ruslan Lesiutin,2024-05-08T12:16:27Z
b37e4b4e616d6d66c1cde9c0a4c2cbd866b0b582,"Clean up fastAddProperties and make it more correct (#29015)

## Summary

This PR makes some fixes to the `fastAddProperties` function:
- Use `if (!attributeConfig)` instead of `if (attributeConfig ===
undefined)` to account for `null`.
- If a prop has an Object `attributeConfig` with a `diff` function
defined on it, treat it as an atomic value to keep the semantics of
`diffProperties`.

## How did you test this change?

Build and run RNTester app.",Dmytro Rykun,2024-05-08T12:10:04Z
e150a324259c5c63ab635b227f601052b133a99f,"fix[react-devtools/ci]: fix configurations for e2e testing (#29016)

This should fix failing DevTools e2e tests on `main`.

With these changes, running tests locally successfully passes all cases.",Ruslan Lesiutin,2024-05-08T11:04:51Z
ec15267a001086deb4ab5412d3f8b7e13573d6a5,"[Flight Reply] Resolve outlined models async in Reply just like in Flight Client (#28988)

This is the same change as #28780 but for the Flight Reply receiver.

While it's not possible to create an ""async module"" reference in this
case - resolving a server reference can still be async if loading it
requires loading chunks like in a new server instance.

Since extracting a typed array from a Blob is async, that's also a case
where a dependency can be async.",Sebastian Markbåge,2024-05-08T02:19:59Z
6bac4f2f31378cd58dffe6181e00639366a6081a,"[Fizz] Fallback to client replaying actions if we're trying to serialize a Blob (#28987)

This follows the same principle as in #28611.

We cannot serialize Blobs of a form data into HTML because you can't
initialize a file input to some value. However the serialization of
state in an Action can contain blobs. In this case we do error but
outside the try/catch that recovers to error to client replaying instead
of MPA mode. This errors earlier to ensure that this works.

Testing this is a bit annoying because JSDOM doesn't have any of the
Blob methods but the Blob needs to be compatible with FormData and the
FormData needs to be compatible with `<form>` nodes in these tests. So I
polyfilled those in JSDOM with some hacks.

A possible future enhancement would be to encode these blobs in a base64
mode instead and have some way to receive them on the server. It's just
a matter of layering this. I think the RSC layer's `FORM_DATA`
implementation can pass some flag to encode as base64 and then have
decodeAction include some way to parse them. That way this case would
work in MPA mode too.",Sebastian Markbåge,2024-05-08T01:53:10Z
826bf4e51ecf14904e936ed043392084553ebbaa,"[Flight Reply] Encode binary streams as a single collapsed Blob (#28986)

Based on #28893.

For other streams we encode each chunk as a separate form field which is
a bit bloated. Especially for binary chunks since they also have an
indirection. We need some way to encode the chunks as separate anyway.
This way the streaming using busboy actually allows each chunk to stream
in over the network one at a time.

For binary streams the actual chunking is not important. The chunks can
be split and recombined in whatever size chunk makes sense.

Since we buffer the entire content anyway we can combine the chunks to
be consecutive. This PR does that with binary streams and also combine
them into a single Blob. That way there's no extra overhead when passing
through a binary stream.

Ideally, we'd be able to just use the stream from that one Blob but
Node.js doesn't return byob streams from Blob. Additionally, we don't
actually stream the content of Blobs due to the layering with busboy
atm. We could do that for binary streams in particular by replacing the
File layering with a stream and resolving each chunk as it comes in.
That could be a follow up.

If we stop buffering in the future, this set up still allows us to split
them and send other form fields in between while blocked since the
protocol is still the same.",Sebastian Markbåge,2024-05-08T01:52:55Z
5a1cbc77b640d7992fd527ae1b02a6cb9b27b3fd,"CI: remove react.yml integration test workflow (#2947)

This was used to run React CI tests compiled with the React Compiler. This is currently no longer used.",Jan Kassens,2024-05-07T21:29:57Z
f4c12cc4a8b1ad7ad3c0a3cad3ecbf2f5f72e07b,"CI: fix Compiler Playground workflow (#2945)

Also renamed the workflow to make more sense when merged into the main React repo.",Jan Kassens,2024-05-07T20:15:59Z
257f22ac571a391b7f01558df74df9cadcdf3f55,CI: fix Compiler TypeScript workflow (#2946),Jan Kassens,2024-05-07T20:07:46Z
fd873e8ddd2d6aee88c8fea490a8f34280ac6069,Rust: add stub for ensure_sufficient_stack (#2943),Jan Kassens,2024-05-07T19:41:03Z
e7d213dfb0760dc9f6506fca6d6cfbac708a40e2,"feat[react-devtools]: display forget badge for components in profiling session (#29014)

# Summary
- `compiledWithForget` field for nodes is now propagated from the
backend to frontend profiler stores
- Corresponding node with such field will have a `✨` prefix displayed
before its displayName
<img width=""1728"" alt=""Screenshot 2024-05-07 at 15 05 37""
src=""https://github.com/facebook/react/assets/28902667/fe044d40-52cb-4169-867d-5a2d72e3275b"">

- Badges are now displayed on the right panel when some fiber is
selected in a specific commit
<img width=""1728"" alt=""Screenshot 2024-05-07 at 15 05 50""
src=""https://github.com/facebook/react/assets/28902667/297ba5ca-404d-4172-b9bf-bfed7978afe5"">

- Badges are also displayed when user hovers over some node in the tree
<img width=""1728"" alt=""Screenshot 2024-05-07 at 15 25 22""
src=""https://github.com/facebook/react/assets/28902667/bee47884-61d1-46b6-a483-717fc148893a"">",Ruslan Lesiutin,2024-05-07T15:39:01Z
c32ff0f4f196cb1fbfdb93a6f08c60b27fc7f31c,"fix[react-devtools]: add backwards compat with legacy element type symbol (#28982)

Follow-up to https://github.com/facebook/react/pull/28813.

RDT is using `typeOf` from `react-is` to determine the element display
name, I've forked an implementation of this method, but will be using
legacy element symbol.",Ruslan Lesiutin,2024-05-07T15:38:43Z
90a5d48a2fb0794dced2a9a26b2451c75808cc51,"CI: fix Rust CI workflows (#2942)

- update paths
- update working directory
- rename files for clarity when merged into the main react repo",Jan Kassens,2024-05-07T15:17:30Z
0fc9c84e63622026b5977557900c9cfe204552d3,Allow specifying timeout in tests via third argument (#29006),Sebastian Silbermann,2024-05-07T15:15:39Z
afe54bfcbf744eec8640f6d0006d50329682a43a,"[DevTools] Expose ""view source"" options to Fusebox integration (#28973)

## Summary

Exposes the APIs needed by React Native DevTools (Fusebox) to implement
the ""view element source"" and ""view attribute source"" features.

## How did you test this change?

1. `yarn build` in `react-devtools-fusebox`
2. Copy artifacts to rn-chrome-devtools-frontend
3. Write some additional glue code to implement
`viewElementSourceFunction` in our CDT fork.
4. Test the feature manually.


https://github.com/facebook/react/assets/2246565/12667018-100a-4b3f-957a-06c07f2af41a",Moti Zilberman,2024-05-07T15:06:36Z
55d6c6efaaab8e104e3e0f99d16cf8c2f5f931e6,"CI: move .github directory back to root (#2941)

We need this in the root to run the steps. It should merge cleanly with the React repo as there is no file name overlap.

Next step is to update the paths to make it work again.",Jan Kassens,2024-05-07T15:03:44Z
703983426243422d9726ca3a0c7eef54e173a6bb,"Create Fabric-specific version of ReactNativeAttributesPayload (#28841)

## Summary

This PR introduces Fabric-only version of
`ReactNativeAttributesPayload`. It is a copy-paste of
`ReactNativeAttributesPayload.js`, and is called
`ReactNativeAttributesPayloadFabric.js`.
The idea behind this change is that certain optimizations in prop
diffing may actually be a regression on the old architecture. For
example, removing custom diffing may result in larger updateProps
payloads. Which is, I guess, fine with JSI, but might be a problem with
the bridge.

## How did you test this change?

There should be no runtime effect of this change.",Dmytro Rykun,2024-05-07T10:53:36Z
7caf071e01afcc6a3ccb9c3f3a5c41fbcb3d6152,"Add failing test for eslint-plugin false positive

The eslint rule seems to false positive on this typescript syntax, but
strangely the compiler does not

ghstack-source-id: 19baa24ff7addd83f59e2b03fdb180af169a2794
Pull Request resolved: https://github.com/facebook/react-forget/pull/2913",Lauren Tan,2024-05-07T00:39:49Z
b28c53dcf10cdd0164aa860248be8305c0cda4c9,"Clarify how to address ValidateNoCapitalizedCalls errors

Make it clearer how to address this error by allowlisting globals that
are known to be safe

ghstack-source-id: e7fa6464ebb561a7a1366ff70430842007c6552e
Pull Request resolved: https://github.com/facebook/react-forget/pull/2909",Lauren Tan,2024-05-07T00:13:45Z
d0a51e7dfc0e40b7c5304adcd9b2b8ad687b37f9,"Allow eslint rule reportable severity to be set

During the demo I might show an example of fixing a
CannotPreserveMemoization error. But I don't want to make that
reportable by default, so this PR allows configuration like so

```js
module.exports = {
  root: true,
  plugins: [
    'eslint-plugin-react-compiler',
  ],
  rules: {
    'react-compiler/react-compiler': [
      'error', {
        reportableLevels: new Set([
          'InvalidJs',
          'InvalidReact',
          'CannotPreserveMemoization'
        ])
      }
     ]
  }
}
```

ghstack-source-id: 984c6d3cb7e19c8fea2bb88108dd26335c031573
Pull Request resolved: https://github.com/facebook/react-forget/pull/2936",Lauren Tan,2024-05-07T00:07:36Z
84d28ebcc54cedfc0c50260ffcf0eaeafcb6bac6,"Default to raising all errors in eslint plugin

We control what gets reported via another function anyway so it's better
to raise everything at the compiler config level. This lets us configure
what level of diagnostic is reportable later

ghstack-source-id: 996d3cbb8d8f3e1bbe943210b8d633420e0f3f3b
Pull Request resolved: https://github.com/facebook/react-forget/pull/2935",Lauren Tan,2024-05-07T00:07:35Z
e2d47342bee8e2c83ade7764a37e04dc6e9ab0e5,"Use default runtimeModule setting in Snap tests (#2940)

Lots of updated snapshots. The only updated code is resolving this TODO:

https://github.com/facebook/react-forget/blob/2b14805f98e47acdf4b83c7d078fe6727800b3f9/packages/snap/src/compiler.ts#L41",Jan Kassens,2024-05-06T23:57:37Z
3708c36cbd52fc2fd34e06998d7f1380453c812a,"[easy] remove unstable_useMemoCache reference from a snapshot file (#2937)

This file is intended to test that the test will skip if it was already compiled.

This updates the import to remove the no longer used name `unstable_useMemoCache`.",Jan Kassens,2024-05-06T23:54:13Z
e63d3d14915b4516cd201f3eb588e7249272f793,"Upgrade to React 19 beta (#2938)

- Updated all directly defined dependencies to the latest React 19 Beta
- `package.json`: used `resolutions` to force React 19 for `react-is` transitive dependency
- `package.json`: postinstall script to patch fbt for the React 19 element Symbol
- Match on the message in Snap to exclude a React 19 warning that `act` should be imported from `react` instead (from inside `@testing-library/react`)
- Some updated snapshots, I think due to now recovering behavior of `useMemoCache`, please review.

In a next step, we can do the following. I excluded it since it from here as it made the PR unreviewable on GitHub.

- Snapshots now use `react/compiler-runtime` as in prod, so the different default in Snap is no longer needed.",Jan Kassens,2024-05-06T23:48:39Z
95ba7dcff5995cef9d7532ea9181f52c8bcc9caf,"Update readme and other docs

ghstack-source-id: b25cc2a481dc1508bbb710dff472f2d23667ec98
Pull Request resolved: https://github.com/facebook/react-forget/pull/2939",Joe Savona,2024-05-06T21:53:47Z
b498834eab8d6cef88305f56acb03540d1f2659b,"Set enableUseMemoCacheHook to true everywhere (#28964)

Set enableUseMemoCacheHook to true everywhere for the next major releases.",Jan Kassens,2024-05-06T18:20:08Z
9b1300209eb00a2d6c645fddf6d2729d67d7b10a,"Setup Wave 2 of Feature Flags for React Native (#28990)

## Summary

Sets up dynamic feature flags for `disableStringRefs`, `enableFastJSX`,
and `enableRefAsProp` in React Native (at Meta).

## How did you test this change?

```
$ yarn test
$ yarn flow fabric
```",Timothy Yung,2024-05-06T17:30:40Z
e1771545a2f0eb28af4636b61e39cc692458cbf7,Remove domain from playground font sources (#2934),Jan Kassens,2024-05-06T16:00:55Z
5d29478716cefbf8290dfdd19129156c2ac75973,"Add FB build for ReactReconcilerConstants (#29003)

In order to integrate the `react-reconciler` build created in #28880
with third party libraries, we need to have matching
`react-reconciler/constants` to go with it.",Jack Pope,2024-05-06T15:32:43Z
46abd7b1deb42d23b65480432609a2f8c5014cde,"Update `compiled-rn` destination paths to `vendor/react` (#28989)

I'm changing the destination paths in fbsource from `vendor/*` to
`vendor/react/*`.",Timothy Yung,2024-05-03T22:46:43Z
ec9400dc41715bb6ff0392d6320c33627fa7e2ba,"[Flight Reply] Encode ReadableStream and AsyncIterables (#28893)

Same as #28847 but in the other direction.

Like other promises, this doesn't actually stream in the outgoing
direction. It buffers until the stream is done. This is mainly due to
our protocol remains compatible with Safari's lack of outgoing streams
until recently.

However, the stream chunks are encoded as separate fields and so does
support the busboy streaming on the receiving side.",Sebastian Markbåge,2024-05-03T21:23:55Z
5fcfd71638401958d437e74f8cf384c4c1ba4665,"Use undici polyfill for tests in old Node versions (#28887)

We currently don't test FormData / File dependent features in CI because
we use an old Node.js version in CI. We should probably upgrade to 18
since that's really the minimum version that supports all the features
out of the box.

JSDOM is not a faithful/compatible implementation of these APIs. The
recommended way to use Flight together with FormData/Blob/File in older
Node.js versions, is to polyfill using the `undici` library.

However, even in these versions the Blob implementation isn't quite
faithful so the Reply client needs a slight tweak for multi-byte typed
arrays.",Sebastian Markbåge,2024-05-03T20:29:09Z
d5c303427e077f8da8f231a621664654027440d6,"[Flight] Track Owner on AsyncLocalStorage When Available (#28807)

Stacked on #28798.

Add another AsyncLocalStorage to the FlightServerConfig. This context
tracks data on a per component level. Currently the only thing we track
is the owner in DEV.

AsyncLocalStorage around each component comes with a performance cost so
we only do it DEV. It's not generally a particularly safe operation
because you can't necessarily associate side-effects with a component
based on execution scope. It can be a lazy initializer or cache():ed
code etc. We also don't support string refs anymore for a reason.

However, it's good enough for optional dev only information like the
owner.",Sebastian Markbåge,2024-05-03T20:29:00Z
738ddf74197d405e03e284d2a48760f23555c197,"Support <fbs> in addition to <fbt>

ghstack-source-id: 1ab99ebb5cef3f42399682a338feb12c4cf55f4c
Pull Request resolved: https://github.com/facebook/react-forget/pull/2933",Pieter Vanderwerff,2024-05-03T20:27:51Z
0a0a3af75a740d0920ebf7f4affaf8d1ce8c107f,"Bundle config: inline internal hook wrapper (#28978)

Bundle config: inline internal hook wrapper

Instead of reading this wrapper from 2 files for ""start"" and ""end"" and
then string modifying the templates, just inline them like the other
wrappers in this file.",Jan Kassens,2024-05-03T18:08:10Z
38cd73b25b0805f7538e29ac2f96ccf749093685,"Stop committing resources to an external repo (#28963)

This has been integrated into this repo (`builds/facebook-fbsource`) so
we no longer need the extra repo",Jon Janzen,2024-05-03T18:01:53Z
90863beaa89789a7791337b33a4be1d567be5733,"Expand the architecture doc

ghstack-source-id: 6ab453a3c5e23677d0c178cf4ea464c7a9e7ebf6
Pull Request resolved: https://github.com/facebook/react-forget/pull/2932",Joe Savona,2024-05-03T17:46:36Z
e3fbb51db603d6669359c9ff16f5288cf0640c14,"[DevTools] Enable inspected element context menu in Fusebox (#28972)

## Summary

Enables the inspected element context menu in React Native DevTools
(Fusebox).

## How did you test this change?

1. `yarn build` in `react-devtools-fusebox`
2. Copy artifacts to rn-chrome-devtools-frontend
3. Manually test the context menu


https://github.com/facebook/react/assets/2246565/b35cc20f-8d67-43b0-b863-7731e10fffac

NOTE: The serialised values sometimes expose React internals (e.g. Hook
data structures instead of just the values), but that seems to be a
problem equally on web, so I'm going for native<->web parity here.",Moti Zilberman,2024-05-03T16:33:21Z
8f7dd5592be25dfae816ab1d1aa3d2bba8871435,"[DevTools] Check in `frontend.d.ts` for react-devtools-fusebox, include in build output (#28970)

## Summary

The `react-devtools-fusebox` private package is used in the React Native
DevTools (Fusebox) frontend by checking build artifacts into RN's
[fork]([`facebookexperimental/rn-chrome-devtools-frontend`](https://github.com/facebookexperimental/rn-chrome-devtools-frontend))
of the Chrome DevTools (CDT) repo - see
https://github.com/facebookexperimental/rn-chrome-devtools-frontend/pull/22.

Currently, the CDT fork also includes a [manually written TypeScript
definition
file](https://github.com/facebookexperimental/rn-chrome-devtools-frontend/blob/1d5f8d5209ac49de97aec16732169d47bf525474/front_end/third_party/react-devtools/package/frontend.d.ts)
which describes `react-devtools-fusebox`'s API. This PR moves that file
into the React repo, next to the implementation of
`react-devtools-fusebox`, so we can update it atomically with changes to
the package.

As this is the first bit of TypeScript in this repo, the PR adds minimal
support for formatting `.d.ts` files with Prettier. It also opts out
`react-devtools-fusebox/dist/` from linting/formatting as a drive-by
fix.

For now, we'll just maintain the `.d.ts` file manually, but we could
consider leveraging
[`flow-api-translator`](https://www.npmjs.com/package/flow-api-translator)
to auto-generate it in the future.

## How did you test this change?

Build `react-devtools-fusebox`, observe that `dist/frontend.d.ts`
exists.",Moti Zilberman,2024-05-03T16:32:41Z
1beb73de0f7c3261a0de37620453b102caaa6236,"Add flag to test fast jsx (#28816)

Following #28768, add a path to testing Fast JSX on www.

We want to measure the impact of Fast JSX and enable a path to testing
before string refs are completely removed in www (which is a work in
progress).

Without `disableStringRefs`, we need to copy any object with a `ref` key
so we can pass it through `coerceStringRef()` and copy it into the
object. This de-opt path is what is gated behind
`enableFastJSXWithStringRefs`.

The additional checks should have no perf impact in OSS as the flags
remain true there and the build output is not changed. For www, I've
benchmarked the addition of the boolean checks with values cached at
module scope. There is no significant change observed from our
benchmarks and any latency will apply to test and control branches
evenly. This added experiment complexity is temporary. We should be able
to clean it up, along with the flag checks for `enableRefAsProp` and
`disableStringRefs` shortly.",Jack Pope,2024-05-03T14:47:13Z
1d618a9cf36948dbf94aa6a6f2eb9e6a64b52eb0,Enable Wave 1 of Feature Flags for React Native (#28977),Timothy Yung,2024-05-03T03:01:30Z
82137ec1846c2074c3f94a8baa85fcbd125bc015,"Rename react-compiler-runtime

ghstack-source-id: c6c825f5efdb4f9c413050b22b7713966871338c
Pull Request resolved: https://github.com/facebook/react-forget/pull/2931",Joe Savona,2024-05-03T00:14:26Z
1c8f8bfb89b6e2f1380990b7697d278c799d3f02,"Rename ReactForgetBabelPlugin locals

ghstack-source-id: 9cd5fe41ae322632dfeb3d5c7468268678006d94
Pull Request resolved: https://github.com/facebook/react-forget/pull/2929",Joe Savona,2024-05-03T00:14:25Z
95e3cdcfa19941d8b28ef8ac955f94338689dea3,"Rename {r,R}unReactForgetBabelPlugin

ghstack-source-id: e7f00aab61dd749dc6ba11ce7e4d14603bfeeab9
Pull Request resolved: https://github.com/facebook/react-forget/pull/2928",Joe Savona,2024-05-03T00:14:24Z
b844766e6c1f947f6b81053a386251ebd842ec9f,"Update references to Forget to React Compiler

ghstack-source-id: cce73f26b7b3903b8d79b70dbc24cbee09693d81
Pull Request resolved: https://github.com/facebook/react-forget/pull/2927",Joe Savona,2024-05-02T21:28:06Z
48e0c702923e32a8b96b89530773c1dc8d596aa4,"Rename babel plugin

ghstack-source-id: bb66913e2d3c814696311371ed655f3da03d1199
Pull Request resolved: https://github.com/facebook/react-forget/pull/2926",Joe Savona,2024-05-02T21:12:33Z
f5f2799a8d0b37487c9674159846cbb7696febd3,DevTools: Fix inspecting components with multiple reads of the same Context in React 17 (#28974),Sebastian Silbermann,2024-05-02T20:08:41Z
14f71db6b6f1668e61b29d376889ad298def4c6e,Devtools: Fix build-for-devtools (#28976),Sebastian Silbermann,2024-05-02T19:58:51Z
c44e9d1557ac076546811e2a56fcf8f2144ce6f5,Devtools: Streamline getting extension from branch (#28975),Sebastian Silbermann,2024-05-02T19:47:18Z
73bcdfbae57545aa8f88ecdf67426275610b5573,"Introduce a faster version of the addProperties function (#28969)

## Summary

This PR introduces a faster version of the `addProperties` function.
This new function is basically the `diffProperties` with `prevProps` set
to `null`, propagated constants, and all the unreachable code paths
collapsed.

## How did you test this change?

I've tested this change with [the benchmark
app](https://github.com/react-native-community/RNNewArchitectureApp/tree/new-architecture-benchmarks)
and got ~4.4% improvement in the view creation time.",Dmytro Rykun,2024-05-02T16:10:13Z
c7b1ae5a9ed58abece101d09c47ddd1e0b181fe2,"[Tooling] Update critical artifact list (#28966)

When a React PR is opened CI will report large size changes. But for
critical packages like react-dom it reports always. In React 19 we moved
the build for react-dom the client reconciler from react-dom to
react-dom/client

This change adds react-dom-client artifacts for stable and oss channels
since that is originally what was being tracked. But since
react-dom/client always imports react-dom I left the original react-dom
packages as critical as well. They are small but it would be good to
keep an eye on them",Josh Story,2024-05-02T14:39:10Z
29d3c83f0a84354b18ab3f064f2d43a4c116d6ed,ReactDOM: Fix missing form data when the submitter is outside the form (#28056),Juan Pinilla,2024-05-02T11:06:28Z
fddc0151fe5474de95534e0b722d771ec570057e,"Remove duplicated hermes-parser

ghstack-source-id: 79f3319d87909d05731ef821d0ffe86cb01b0432
Pull Request resolved: https://github.com/facebook/react-forget/pull/2920",Lauren Tan,2024-05-01T01:34:36Z
f93529e0be022b4f6acbb98433beb9c7828e5b60,"Don't compile node_modules by default

To make a first time setup of the compiler truly config-less, default to
not compiling node_modules unless a user provided `sources` (advanced
option) is provided

ghstack-source-id: b0798052404d772ce6ee471e577699d4b0871d56
Pull Request resolved: https://github.com/facebook/react-forget/pull/2919",Lauren Tan,2024-05-01T01:34:33Z
ebe58ee619f55eefad9efd433996069af2e6a70a,"Update babel plugin to use runtime from react/compiler-runtime (#2918)

This uses the compiler runtime from `react/compiler-runtime` by default unless `compilerRuntime` is specifified in the Babel options which then imports the runtime from there. The `useMemoCache` hook is now named `c` in accordance with https://github.com/facebook/react/commit/4508873393058e86bed308b56e49ec883ece59d1

Unfortunately, I couldn't figure out how to import `react@beta` which already has that import as various react verstions were conflicting. If someone can figure this out it'd be fantastic. As a result, I had to update the default for the test runner to default the `compilerRuntime` option to `react` to preserve the previous behavior to import from `react`. Once upgraded to React 19, we should be able to remove that override.",Jan Kassens,2024-05-01T17:53:44Z
85e6e9b469d6b1c437764d7662341c2f532bb3c4,"[hir] Mark MethodCalls as escaping

Treat MethodCalls similar to general CallExpressions and mark them
as escaping in PruneNonEscapingScopes pass.

ghstack-source-id: 3c81bdb17f58fbeef8be24e7cb363172d1867217
Pull Request resolved: https://github.com/facebook/react-forget/pull/2925",Sathya Gunsasekaran,2024-05-01T14:58:57Z
4ce5c56fee9e960b8b0702dc114455cbfa5d4e95,"[healthcheck] Refactor checks into separate files

Makes it easier to extend later, if we want to add more checks.

ghstack-source-id: 6fb3435555f1b988e1a185bfda8be9418eb622c5
Pull Request resolved: https://github.com/facebook/react-forget/pull/2924",Sathya Gunsasekaran,2024-05-01T15:05:11Z
c464445b91d0d19ed00ecb81d993666495a5191f,"[healthcheck] Check for incompatible libraries

Add a configurable list of known incompatible libraries.

Check all package.jsons for any uses of known incompatible libraries and
warn if found.

ghstack-source-id: 7329e3792b57458e681780cba3140a14a9b1a60d
Pull Request resolved: https://github.com/facebook/react-forget/pull/2923",Sathya Gunsasekaran,2024-05-01T14:34:40Z
36d775596f65470d9139e64ba7f32fe199ef371f,"[healthcheck] Check for StrictMode

ghstack-source-id: f05222073be785b77346c4e8760bf4d0bb4d658e
Pull Request resolved: https://github.com/facebook/react-forget/pull/2922",Sathya Gunsasekaran,2024-05-01T12:35:06Z
c88d3566033beb1edea13d93d8293874e32e572d,"[healthcheck] Add status message

Show compiling status message and not just block
UI.

ghstack-source-id: 67761c5d32216e105c4aa6404dfa07d76ae22583
Pull Request resolved: https://github.com/facebook/react-forget/pull/2921",Sathya Gunsasekaran,2024-05-01T12:35:03Z
86e0f87a5bf40ef08c8072a2a5800d755f68e194,"Dynamically detect reanimated plugin

Enables the Reanimated flag automatically if we find reanimated in the
user's list of plugins

ghstack-source-id: 20e83374612362a30d6c8cc7a903d9320e8cc23a
Pull Request resolved: https://github.com/facebook/react-forget/pull/2915",Lauren Tan,2024-04-30T18:24:03Z
4508873393058e86bed308b56e49ec883ece59d1,"Move useMemoCache hook to react/compiler-runtime (#28954)

Move useMemoCache hook to react/compiler-runtime

For Meta-internal purposes, we keep the export on `react` itself to
reduce churn.",Jan Kassens,2024-04-30T16:00:22Z
d779eba4b375134f373b7dfb9ea98d01c84bc48e,"[react-native] Add unit test to ReactNativeAttributePayload (#28955)

## Summary

I'm looking at cleaning up some unnecessary manual property flattening
in React Native and wanted to verify this behaviour is working as
expected, where properties from nested objects will always overwrite
properties from the base object.

## How did you test this change?

Unit tests",Pieter De Baets,2024-04-30T02:57:32Z
190cc990e01e5131a6b26f1a3212444cebd794e2,Import correct prod version of jsx-dev-runtime for react-server (#28939),Sebastian Silbermann,2024-04-27T20:25:25Z
8090457c77573f3916df136d582d5f44040da043,fix: add `react-server` condition for `react/jsx-dev-runtime` (#28921),Alex Yang,2024-04-27T19:45:52Z
4ddff7355f696ec693c5ce2bda4e7707020c3510,Add changelog for 18.3.1 (#28932),Ricky,2024-04-26T20:03:03Z
95e610da13e50c2cb92e003dd7dbfa4a8262bdd2,"Add changelog for 18.3 (#28929)

Fixes https://github.com/facebook/react/issues/28924",Ricky,2024-04-26T16:45:08Z
c4083616a232028588a2cbaa9ba8992481d1deb7,Create React 19 issue template,Ricky,2024-04-25T19:32:31Z
1181043d804af6b3f9473eb21b8be9a3ad7b8545,"Disable ValidateNoCapitalizedCalls by default

As discussed earlier, let's disable this validation pass by default for
oss since it still has many false positives

ghstack-source-id: fa3c21dde7cc4c3e4bb91dfa707e64bc7a9e088b
Pull Request resolved: https://github.com/facebook/react-forget/pull/2908",Lauren Tan,2024-04-25T18:19:21Z
18f4a388a90ea39fd33fc2dc6b644c4ae1cce41f,"[hir-rewrite] Remove breaks to HIR ScopeTerminal after converting to reactiveFunction IR

ghstack-source-id: 67e979e1533b23ced762973e239a4290111e2242
Pull Request resolved: https://github.com/facebook/react-forget/pull/2911",Mofei Zhang,2024-04-29T18:08:30Z
6db5f36aa739169266d385f6f5fb4d585ac055b8,"[tests] Add fixtures showing HIR rewrite changes

ghstack-source-id: 5e8b1680e95d112e1e5b2cb8c4e6c414360e0a77
Pull Request resolved: https://github.com/facebook/react-forget/pull/2900",Mofei Zhang,2024-04-29T18:08:29Z
2b2d30519991f0d956a37d149a3947cca6784ec1,"[hir] Rewrite buildReactiveBlocks -> buildReactiveScopeTerminalsHIR

ghstack-source-id: 1e804dd31d4b5f74070c94c0ea56f55539e46703
Pull Request resolved: https://github.com/facebook/react-forget/pull/2853",Mofei Zhang,2024-04-29T18:08:29Z
94eed63c49d989861ae7cd62e111de6d717f0a10,"(Land #28798) Move Current Owner (and Cache) to an Async Dispatcher (#28912)

Rebasing and landing https://github.com/facebook/react/pull/28798

This PR was approved already but held back to give time for the sync.
Rebased and landing here without pushing to seb's remote to avoid
possibility of lost updates

---------

Co-authored-by: Sebastian Markbage <sebastian@calyptus.eu>",Josh Story,2024-04-25T17:40:40Z
f8a8eac86bac406724f327325f804e65e594dd68,"Update canary channel label to ""beta"" (#28905)

During the beta period, canaries will be published as
`19.0.0-beta-<COMMIT_SHA>-<DATE>`. They will also be tagged as `beta`
when published to npm.",Andrew Clark,2024-04-25T17:14:33Z
82d8129e585cccff30cc0f5fe1bbee6082dd36a5,Reconciler: Change `commitUpdate` signature to account for unused `updatePayload` parameter (#28909),Sebastian Silbermann,2024-04-25T17:14:06Z
d285b3acbade77f9b17e6171dbda69ff4a033878,"Go back to shared refs instance object (#28911)

It turns out we already made refs writable in #25696, which has been in
canary for over a year. The approach in that PR also has the benefit of
being slightly more perf sensitive because it still uses a shared object
until the fiber is mounted. So let's just go back to that.",Andrew Clark,2024-04-25T17:03:21Z
ed71a3ad2965617c27c6e7ca7577f15b8ca4152c,"Support ref cleanup function for imperative handle refs (#28910)

Support ref cleanup function for imperative handle refs",Jan Kassens,2024-04-25T16:51:41Z
1c7e34cdb623ac03f2d1373c5d533880792c148b,"Stop reporting errors on mutations of primitives (and associated false positives)

ghstack-source-id: 4dc9b3c51953f8ed2184ebc5e438bc877959b5d0
Pull Request resolved: https://github.com/facebook/react-forget/pull/2903",Joe Savona,2024-04-25T16:39:20Z
0a7f4427f13d70cd4cafe0388eb7d6b44ef1832e,"Fix invariant on mutable context values

ghstack-source-id: cb105318bf66d876a546b1c52e28286839d30032
Pull Request resolved: https://github.com/facebook/react-forget/pull/2904",Joe Savona,2024-04-25T15:00:56Z
59e37b088b4f7c8711c90a9248701ab6a4c08a21,"[HIR] Detect more cases of invalid block nesting

ghstack-source-id: 9e08fa69807ee1b5e99675f9aefc8acd13c16827
Pull Request resolved: https://github.com/facebook/react-forget/pull/2899",Mofei Zhang,2024-04-26T16:40:36Z
a44559b0a5f6fc01f9963d2f3b216a2dd7179fd4,"[hir] Re-implement mergeOverlappingReactiveScopes (+ bugfix)

ghstack-source-id: 06d49edffe5ae3c31eb6ef642078752c056c617c
Pull Request resolved: https://github.com/facebook/react-forget/pull/2852",Mofei Zhang,2024-04-26T16:40:35Z
f196e1f7030a5ed4597d4095b6116cb08e6fdaa1,"[hir][patch] Fix small bug in duplicate scope merging logic

ghstack-source-id: 98966dd4c2b264329acad077427febc2a34a5edc
Pull Request resolved: https://github.com/facebook/react-forget/pull/2906",Mofei Zhang,2024-04-25T15:07:22Z
cf5ab8b8b2c92523aba0b982fb403add053a9110,"Add descriptions of new methods to the react-reconciler readme (#28750)

Add new reconciler methods since last breaking change to the README
based on usage and comments.

---------

Co-authored-by: Josh Story <josh.c.story@gmail.com>",Jack Pope,2024-04-25T13:37:55Z
c516cefc7dbb717f50bcb53de83591b1ef9d93ac,"warn -> error for Test Renderer deprecation (#28904)

We use `console.error` for deprecations. `console.warn` is for less
critical issues, like performance anti-patterns.",Andrew Clark,2024-04-24T18:54:39Z
cb151849e13f46ec64570519cb93d5939fb60cab,"[react-dom] move all client code to `react-dom/client` (#28271)

This PR reorganizes the `react-dom` entrypoint to only pull in code that
is environment agnostic. Previously if you required anything from this
entrypoint in any environment the entire client reconciler was loaded.
In a prior release we added a server rendering stub which you could
alias in server environments to omit this unecessary code. After landing
this change this entrypoint should not load any environment specific
code.

While a few APIs are truly client (browser) only such as createRoot and
hydrateRoot many of the APIs you import from this package are only
useful in the browser but could concievably be imported in shared code
(components running in Fizz or shared components as part of an RSC app).
To avoid making these require opting into the client bundle we are
keeping them in the `react-dom` entrypoint and changing their
implementation so that in environments where they are not particularly
useful they do something benign and expected.

#### Removed APIs
The following APIs are being removed in the next major. Largely they
have all been deprecated already and are part of legacy rendering modes
where concurrent features of React are not available
* `render`
* `hydrate`
* `findDOMNode`
* `unmountComponentAtNode`
* `unstable_createEventHandle`
* `unstable_renderSubtreeIntoContainer`
* `unstable_runWithPrioirty`

#### moved Client APIs
These APIs were available on both `react-dom` (with a warning) and
`react-dom/client`. After this change they are only available on
`react-dom/client`
* `createRoot`
* `hydrateRoot`

#### retained APIs
These APIs still exist on the `react-dom` entrypoint but have normalized
behavior depending on which renderers are currently in scope
* `flushSync`: will execute the function (if provided) inside the
flushSync implemention of FlightServer, Fizz, and Fiber DOM renderers.
* `unstable_batchedUpdates`: This is a noop in concurrent mode because
it is now the only supported behavior because there is no legacy
rendering mode
* `createPortal`: This just produces an object. It can be called from
anywhere but since you will probably not have a handle on a DOM node to
pass to it it will likely warn in environments other than the browser
* preloading APIS such as `preload`: These methods will execute the
preload across all renderers currently in scope. Since we resolve the
Request object on the server using AsyncLocalStorage or the current
function stack in practice only one renderer should act upon the
preload.

In addition to these changes the server rendering stub now just rexports
everything from `react-dom`. In a future minor we will add a warning
when using the stub and in the next major we will remove the stub
altogether",Josh Story,2024-04-24T15:50:32Z
b039be627dd7403d7d2f63a48c8d263d955ce456,"Unrevert ""Support writing to this.refs from userspace"" (#28879)

Reverts facebook/react#28877

We found the cause of the regression and should be able to land this
again.",Jan Kassens,2024-04-24T14:03:09Z
6f6e375fce9d0700434f863f70f0e2e5ea180426,"Create short link for jsx warning (#28899)

Short link created in https://github.com/reactjs/react.dev/pull/6772",Ricky,2024-04-24T13:32:11Z
6f18664b82b61d34b30c794a151d7b032f8eabe0,eslint-plugin-react-hooks: Add support for ESLint v9 (#28773),Sebastian Silbermann,2024-04-23T21:29:01Z
f22dd62ab8e2056b89fb29193d0ed30a98fd5ff4,"[HIR] Followup to pruneUnusedLabelsHIR (#2866)

Followup to https://github.com/facebook/react-forget/pull/2866

ghstack-source-id: 087d5da53787cb7cff6495b6a791326ff8a952b4
Pull Request resolved: https://github.com/facebook/react-forget/pull/2896",Mofei Zhang,2024-04-23T18:58:31Z
2d569a3353012d23b025847fd70869fbd20ef6fa,"Add detection of dynamic hooks

ghstack-source-id: 3acfa4fde5dfd65353fa407378057ca937ee3599
Pull Request resolved: https://github.com/facebook/react-forget/pull/2901",Joe Savona,2024-04-24T22:15:34Z
89f2f7fcef11aeaa1abf947a274275fc8a91f472,"Make DropManualMemoization error message more accurate

This was probably a leftover from a previous time, but since this error
message throws when the dependency list is not an array literal, and not
just when its a rest spread, this PR updates the message to match.

ghstack-source-id: 28f2338212e56a67d3d477cea5abb6e9f3826488
Pull Request resolved: https://github.com/facebook/react-forget/pull/2902",Lauren Tan,2024-04-25T14:19:29Z
08b777d6dc0c1261d344e7807738ffc0a7794c7c,"[be] Rename NextIterableOf -> AdvanceIterator

ghstack-source-id: 024ec00511483cf342d851fde001c96348a2d3c6
Pull Request resolved: https://github.com/facebook/react-forget/pull/2898",Joe Savona,2024-04-24T21:59:09Z
21b2af8ba0b3b81e88887ac111be64041e7783ae,"More precisely model for..of semantics with separate init/test blocks

ghstack-source-id: 827c35466d04f7b7143ddf1adefeff926d4b22cd
Pull Request resolved: https://github.com/facebook/react-forget/pull/2893",Joe Savona,2024-04-24T21:59:08Z
da004f18853f84c16c2c053a9336f069d80c6755,"Add GetIterator instruction

ghstack-source-id: 8ed2deed7606c48414de74cb2781a5fde6cd6f59
Pull Request resolved: https://github.com/facebook/react-forget/pull/2892",Joe Savona,2024-04-24T21:59:08Z
6304e98902a451b53f3e2ce9315584252443e6ac,"Repro for for..of scoping bug

ghstack-source-id: 6147b6e70d24203350664e8ab24691d1ec5c5b2a
Pull Request resolved: https://github.com/facebook/react-forget/pull/2891",Joe Savona,2024-04-24T21:59:07Z
a94838df1c598a3993316ff453c84f3688537a97,"Remove automatic fetch `cache` instrumentation (#28896)

This removes the automatic patching of the global `fetch` function in
Server Components environments to dedupe requests using `React.cache`, a
behavior that some RSC framework maintainers have objected to.

We may revisit this decision in the future, but for now it's not worth
the controversy.

Frameworks that have already shipped this behavior, like Next.js, can
reimplement it in userspace.

I considered keeping the implementation in the codebase and disabling it
by setting `enableFetchInstrumentation` to `false` everywhere, but since
that also disables the tests, it doesn't seem worth it because without
test coverage the behavior is likely to drift regardless. We can just
revert this PR later if desired.",Andrew Clark,2024-04-23T18:14:12Z
d4e78c42a94be027b4dc7ed2659a5fddfbf9bd4e,"Add ref callback test for cleanup fn vs null call (#28895)

Used this test scenario to clarify how callback refs work when detached
based on the availability of a cleanup function to update documentation
in https://github.com/reactjs/react.dev/pull/6770

Checking it in for additional test coverage and test-based documentation",Jack Pope,2024-04-23T16:13:09Z
f8c0363a92d909fbd0dd9b407e3e8e299d1123d9,"[healthcheck] Rename package to healthcheck

Make it one word, instead of two words and a hyphen.

ghstack-source-id: ef05e8acbd7cf17e2dd04c362dcee785eda79e82
Pull Request resolved: https://github.com/facebook/react-forget/pull/2895",Sathya Gunsasekaran,2024-04-23T11:33:51Z
e0dbe47ad6c92380f4ddb80fce0f07bb5104ab9f,"[healthcheck] Only count actionable failures

It's not useful to output count of all failures,
as it's not actionable for the developer.

We'll still capture all failures in case we want
to add a rage option to this script.

ghstack-source-id: 4d5a1dd6a9616e6fd5e1166bb97fa047829b9273
Pull Request resolved: https://github.com/facebook/react-forget/pull/2889",Sathya Gunsasekaran,2024-04-23T11:28:43Z
dff05237c582d379c730bf1132c0fc8e7e0b627a,"[healthcheck] Compile sources

Run the compiler on the globbed soruces.

The logger is used to capture the success and
failure compilation cases at the component level.
(If we were to compile the entire file directly,
we wouldn't get this granularity)

For now, we just log the number of success and
failures. In the future, we can provide a better
report building on this.

ghstack-source-id: 6d2d918190b6ed5d42b795491bbce29a950b9741
Pull Request resolved: https://github.com/facebook/react-forget/pull/2888",Sathya Gunsasekaran,2024-04-23T11:28:42Z
8d234c64eb2169b699503dea68899c7e4c408fba,"[hir] Remove hermes parser

Exporting the hermes parser breaks the playground
as the hermes parser can not work in the browser.

No one is using this directly anyway -- snap and
others bundle hermes parser on their own, so,
let's remove it.

ghstack-source-id: d448c346eb137f8ba6ada4ad113e41a90b29baff
Pull Request resolved: https://github.com/facebook/react-forget/pull/2890",Sathya Gunsasekaran,2024-04-23T11:28:42Z
9e15ade17729a9a694dc9aa4b2afda0a717e3969,"[healthcheck] Read files from globbed path

ghstack-source-id: a79336c2b1c85ae4d5b941ffbeffb3df10816448
Pull Request resolved: https://github.com/facebook/react-forget/pull/2887",Sathya Gunsasekaran,2024-04-23T11:28:41Z
a6cc5bc87403e8af06a03c5c121fb433b97cd0bd,"[healthcheck] Read glob of src path

Use yargs to parse input of glob expression
matching the path of src files to compile.

ghstack-source-id: 6a35e958428cd08ef5c96e0014e072d3faf04064
Pull Request resolved: https://github.com/facebook/react-forget/pull/2886",Sathya Gunsasekaran,2024-04-23T11:28:41Z
706e04722f3a5a2177455d8c65e5166188d430c7,"[healthcheck] Init tsconfig

ghstack-source-id: 52339f8e5cde29d4e132762de2e4e4b31f25f8c1
Pull Request resolved: https://github.com/facebook/react-forget/pull/2885",Sathya Gunsasekaran,2024-04-23T11:28:40Z
6019ef0a43d115d85ddff13a20dd1b84008a7c0f,"[healthcheck] New package for checking violations

This package will be used to check for violations
of the rules of react and other heuristics to
determine the health of a codebase.

The health of a codebase gives an expectation of
how easy it will be onboard on to the compiler.

ghstack-source-id: b52fc4e44f704e0544f15066d8905825a256dc4a
Pull Request resolved: https://github.com/facebook/react-forget/pull/2884",Sathya Gunsasekaran,2024-04-23T11:28:40Z
10e11c4a88b53f22f481ea92115ee62c05332469,"[HIR] Assert program blocks and scopes are properly nested

ghstack-source-id: e3fe9b5fb8d1314e16e562581f40ca2b2a555b97
Pull Request resolved: https://github.com/facebook/react-forget/pull/2867",Mofei Zhang,2024-04-23T09:18:50Z
40474b8eaff43bfa6b8b0d84181a0f37a9970e3c,"[HIR] Naive implementation of pruneUnusedLabels in HIR

ghstack-source-id: 6d55db3d5c0fd7736a59d48c6afb2de9b5729d16
Pull Request resolved: https://github.com/facebook/react-forget/pull/2866",Mofei Zhang,2024-04-23T09:18:50Z
555100ca83049ce94cac210098ed7c367fd8751c,"[HIR] Nonnullable block fallthroughs

ghstack-source-id: 6f24b60056c741e5d4e9836f91bc4fce0f9e8fdd
Pull Request resolved: https://github.com/facebook/react-forget/pull/2865",Mofei Zhang,2024-04-23T09:18:49Z
1efb3cae0aac523064ed5ea649651eb1ab03fae2,"[HIR] Add new unreachable terminal

ghstack-source-id: cffdbbbd78a0aa7e1587a234ce27366ea626ee5e
Pull Request resolved: https://github.com/facebook/react-forget/pull/2864",Mofei Zhang,2024-04-23T09:18:48Z
d87ba1b9df3eb1a079fea57f76147441c35274b2,"[be] Stabilize block ids

ghstack-source-id: 83aedf9f086ccb4819655eab803f25f944b75c7b
Pull Request resolved: https://github.com/facebook/react-forget/pull/2851",Mofei Zhang,2024-04-23T09:18:48Z
b21ca44efc75178d797a6bd0427f83c966b2a00a,"[repro] bug repro

ghstack-source-id: 64d3266bf39ce5b1b9e9b9470910e029f0e951eb
Pull Request resolved: https://github.com/facebook/react-forget/pull/2849",Mofei Zhang,2024-04-23T09:18:47Z
699d03ce1a175442fe3443e1d1bed14f14e9c197,Cleanup `replayFailedUnitOfWorkWithInvokeGuardedCallback`and `enableProfilerNestedUpdateScheduledHook` (#28891),Sebastian Silbermann,2024-04-22T19:35:11Z
9f2eebd807bf53b7d9901cf0b768762948224cae,"[Fiber/Fizz] Support AsyncIterable as Children and AsyncGenerator Client Components (#28868)

Stacked on #28849, #28854, #28853. Behind a flag.

If you're following along from the side-lines. This is probably not what
you think it is.

It's NOT a way to get updates to a component over time. The
AsyncIterable works like an Iterable already works in React which is how
an Array works. I.e. it's a list of children - not the value of a child
over time.

It also doesn't actually render one component at a time. The way it
works is more like awaiting the entire list to become an array and then
it shows up. Before that it suspends the parent.

To actually get these to display one at a time, you have to opt-in with
`<SuspenseList>` to describe how they should appear. That's really the
interesting part and that not implemented yet.

Additionally, since these are effectively Async Functions and uncached
promises, they're not actually fully ""supported"" on the client yet for
the same reason rendering plain Promises and Async Functions aren't.
They warn. It's only really useful when paired with RSC that produces
instrumented versions of these. Ideally we'd published instrumented
helpers to help with map/filter style operations that yield new
instrumented AsyncIterables.

The way the implementation works basically just relies on unwrapThenable
and otherwise works like a plain Iterator.

There is one quirk with these that are different than just promises. We
ask for a new iterator each time we rerender. This means that upon retry
we kick off another iteration which itself might kick off new requests
that block iterating further. To solve this and make it actually
efficient enough to use on the client we'd need to stash something like
a buffer of the previous iteration and maybe iterator on the iterable so
that we can continue where we left off or synchronously iterate if we've
seen it before. Similar to our `.value` convention on Promises.

In Fizz, I had to do a special case because when we render an iterator
child we don't actually rerender the parent again like we do in Fiber.
However, it's more efficient to just continue on where we left off by
reusing the entries from the thenable state from before in that case.",Sebastian Markbåge,2024-04-22T17:25:05Z
3b551c82844bcfde51f0febb8e42c1a0d777df2c,"Rename the react.element symbol to react.transitional.element (#28813)

We have changed the shape (and the runtime) of React Elements. To help
avoid precompiled or inlined JSX having subtle breakages or deopting
hidden classes, I renamed the symbol so that we can early error if
private implementation details are used or mismatching versions are
used.

Why ""transitional""? Well, because this is not the last time we'll change
the shape. This is just a stepping stone to removing the `ref` field on
the elements in the next version so we'll likely have to do it again.",Sebastian Markbåge,2024-04-22T16:39:56Z
896d1b00273958ddad6cb8b1fafae3cd13cced5a,"[dx] Improve error message from InferReferenceEffects

ghstack-source-id: 06265d9676b671a5b02ca05433a219dd219be4f1
Pull Request resolved: https://github.com/facebook/react-forget/pull/2883",Joe Savona,2024-04-22T15:14:35Z
b11074772b39c65189d9e923f5830f727b1ee06d,"InferReferenceEffects defers function effects until used

ghstack-source-id: 186951086ac1dd8ebd75d6fdfca5c1a41e54a33e
Pull Request resolved: https://github.com/facebook/react-forget/pull/2881",Joe Savona,2024-04-22T15:14:34Z
db913d8e17db25045e0518f3621f1640f2390525,"Remove warning for ref cleanup function (#28883)

Resources
- RFC: https://github.com/reactjs/rfcs/pull/205
- Warning implemented in https://github.com/facebook/react/pull/22313
- Warning enabled in https://github.com/facebook/react/pull/23145
- Feature added in https://github.com/facebook/react/pull/25686

We have warned to prevent the old behavior since 18.0.0.

The new feature has been on in canary for a while but still triggering
the warning. This PR cleans up the warning for 19",Jack Pope,2024-04-22T14:57:31Z
5b903cdaa94c78e8fabb985d8daca5bd7d266323,"[Flight] Support (Async) Generator ServerComponent (#28849)

Stacked on #28853 and #28854.

React supports rendering `Iterable` and will soon support
`AsyncIterable`. As long as it's multi-shot since during an update we
may have to rerender with new inputs an loop over the iterable again.
Therefore the `Iterator` and `AsyncIterator` types are not supported
directly as a child of React - and really it shouldn't pass between
Hooks or components neither for this reason. For parity, that's also the
case when used in Server Components.

However, there is a special case when the component rendered itself is a
generator function. While it returns as a child an `Iterator`, the React
Element itself can act as an `Iterable` because we can re-evaluate the
function to create a new generator whenever we need to.

It's also very convenient to use generator functions over constructing
an `AsyncIterable`. So this is a proposal to special case the
`Generator`/`AsyncGenerator` returned by a (Async) Generator Function.

In Flight this means that when we render a Server Component we can
serialize this value as an `Iterable`/`AsyncIterable` since that's
effectively what rendering it on the server reduces down to. That way if
Fiber can receive the result in any position.

For SuspenseList this would also need another special case because the
children of SuspenseList represent ""rows"".

`<SuspenseList><Component /></SuspenseList>` currently is a single ""row""
even if the component renders multiple children or is an iterator. This
is currently different if Component is a Server Component because it'll
reduce down to an array/AsyncIterable and therefore be treated as one
row per its child. This is different from `<SuspenseList><Component
/><Component /></SuspenseList>` since that has a wrapper array and so
this is always two rows.

It probably makes sense to special case a single-element child in
`SuspenseList` to represent a component that generates rows. That way
you can use an `AsyncGeneratorFunction` to do this.",Sebastian Markbåge,2024-04-21T17:10:10Z
bf426f9b1de6ef6adfeff30297beba96464f5efb,"[Flight / Flight Reply] Encode Iterator separately from Iterable (#28854)

For [`AsyncIterable`](https://github.com/facebook/react/pull/28847) we
encode `AsyncIterator` as a separate tag.

Previously we encoded `Iterator` as just an Array. This adds a special
encoding for this. Technically this is a breaking change.

This is kind of an edge case that you'd care about the difference but it
becomes more important to treat these correctly for the warnings here
#28853.",Sebastian Markbåge,2024-04-21T16:52:04Z
368202181e772d411b2445930aea1edd9428b09b,"Warn for Child Iterator of all types but allow Generator Components (#28853)

This doesn't change production behavior. We always render Iterables to
our best effort in prod even if they're Iterators.

But this does change the DEV warnings which indicates which are valid
patterns to use.

It's a footgun to use an Iterator as a prop when you pass between
components because if an intermediate component rerenders without its
parent, React won't be able to iterate it again to reconcile and any
mappers won't be able to re-apply. This is actually typically not a
problem when passed only to React host components but as a pattern it's
a problem for composability.

We used to warn only for Generators - i.e. Iterators returned from
Generator functions. This adds a warning for Iterators created by other
means too (e.g. Flight or the native Iterator utils). The heuristic is
to check whether the Iterator is the same as the Iterable because that
means it's not possible to get new iterators out of it. This case used
to just yield non-sense like empty sets in DEV but not in prod.

However, a new realization is that when the Component itself is a
Generator Function, it's not actually a problem. That's because the
React Element itself works as an Iterable since we can ask for new
generators by calling the function again. So this adds a special case to
allow the Generator returned from a Generator Function's direct child.
The principle is “don’t pass iterators around” but in this case there is
no iterator floating around because it’s between React and the JS VM.

Also see #28849 for context on AsyncIterables.

Related to this, but Hooks should ideally be banned in these for the
same reason they're banned in Async Functions.",Sebastian Markbåge,2024-04-21T16:51:45Z
f39dd1b82f71e5390f9dbca2b9b10824a4958f72,"InferReferenceEffects s/reference/referenceAndRecordEffects/

ghstack-source-id: 4d7439e7ada77e65991869593aa6a5d88d5ad600
Pull Request resolved: https://github.com/facebook/react-forget/pull/2882",Joe Savona,2024-04-20T19:18:28Z
857ee8cdf9af81bc94a7f04528fbda7fb2510eb4,"Don't minify symbols in production builds (#28881)

This disables symbol renaming in production builds. The original
variable and function names are preserved. All other forms of
compression applied by Closure (dead code elimination, inlining, etc)
are unchanged — the final program is identical to what we were producing
before, just in a more readable form.

The motivation is to make it easier to debug React issues that only
occur in production — the same reason we decided to start shipping
sourcemaps in #28827 and #28827.

However, because most apps run their own minification step on their npm
dependencies, it's not necessary for us to minify the symbols before
publishing — it'll be handled the app, if desired.

This is the same strategy Meta has used to ship React for years. The
React build itself has unminified symbols, but they get minified as part
of Meta's regular build pipeline.

Even if an app does not minify their npm dependencies, gzip covers most
of the cost of symbol renaming anyway.

This saves us from having to ship sourcemaps, which means even apps that
don't have sourcemaps configured will be able to debug the React build
as easily as they would any other npm dependency.",Andrew Clark,2024-04-20T15:23:46Z
c98c02f8e69145168f5747a0e2f5e6c03906c1ca,"InferReferenceEffects propagates context effects with precise locations

ghstack-source-id: f9517b98013613a3a80a78b4a6110006ee8b4de7
Pull Request resolved: https://github.com/facebook/react-forget/pull/2880",Joe Savona,2024-04-20T02:03:01Z
f7a643c7b25e5932da85b2755282375311fadede,"Add ContextMutation variant of FunctionEffect

ghstack-source-id: f3da80ed22acd916db0cecad9f2b80ba4c01c6eb
Pull Request resolved: https://github.com/facebook/react-forget/pull/2879",Joe Savona,2024-04-20T00:44:08Z
12f314fa9878ac500777e41f27fd978a26f54411,"Extend ValueReason w context identifiers

ghstack-source-id: 5157b988b0ff15299d585aa906831c1d640f6a40
Pull Request resolved: https://github.com/facebook/react-forget/pull/2878",Joe Savona,2024-04-20T00:44:04Z
ea26e38e33bffeba1ecc42688d7e8cd7e0da1c02,"[Experiment] Reuse memo cache after interruption (#28878)

Adds an experimental feature flag to the implementation of useMemoCache,
the internal cache used by the React Compiler (Forget).

When enabled, instead of treating the cache as copy-on-write, like we do
with fibers, we share the same cache instance across all render
attempts, even if the component is interrupted before it commits.

If an update is interrupted, either because it suspended or because of
another update, we can reuse the memoized computations from the previous
attempt. We can do this because the React Compiler performs atomic
writes to the memo cache, i.e. it will not record the inputs to a
memoization without also recording its output.

This gives us a form of ""resuming"" within components and hooks.

This only works when updating a component that already mounted. It has
no impact during initial render, because the memo cache is stored on the
fiber, and since we have not implemented resuming for fibers, it's
always a fresh memo cache, anyway.

However, this alone is pretty useful — it happens whenever you update
the UI with fresh data after a mutation/action, which is extremely
common in a Suspense-driven (e.g. RSC or Relay) app.

So the impact of this feature is faster data mutations/actions (when the
React Compiler is used).",Andrew Clark,2024-04-19T23:30:01Z
9f9f4a9f1138eabdc466cc10544d6b0727dca027,"Fix gating mode hoisting check to skip type references

ghstack-source-id: f83e9e28c1cdf31dba718e62db12aaa3a5f9ddab
Pull Request resolved: https://github.com/facebook/react-forget/pull/2876",Joe Savona,2024-04-19T22:16:19Z
07ba52bc1a09d7650685fab1c0da01e208ea96b9,"Repro for false positive gating mode hoisting check

ghstack-source-id: c4f5777b85751e9d5f0323384160adfba55d883f
Pull Request resolved: https://github.com/facebook/react-forget/pull/2875",Joe Savona,2024-04-19T22:16:15Z
446aa9a632670eb9a373d897309452e24c10c55e,"Build react-reconciler for FB builds (#28880)

Meta uses various tools built on top of the ""react-reconciler"" package
but that package needs to match the version of the ""react"" package.

This means that it should be synced at the same time. However, more than
that the feature flags between the ""react"" package and the
""react-reconciler"" package needs to line up. Since FB has custom feature
flags, it can't use the OSS version of react-reconciler.",Sebastian Markbåge,2024-04-19T22:06:01Z
0e0b69321a6fcfe8a3eaae3b1016beb110437b38,"Run Closure on non-minified prod builds, too (#28827)

In #26446 we started publishing non-minified versions of our production
build artifacts, along with source maps, for easier debugging of React
when running in production mode.

The way it's currently set up is that these builds are generated
*before* Closure compiler has run. Which means it's missing many of the
optimizations that are in the final build, like dead code elimination.

This PR changes the build process to run Closure on the non-minified
production builds, too, by moving the sourcemap generation to later in
the pipeline.

The non-minified builds will still preserve the original symbol names,
and we'll use Prettier to add back whitespace. This is the exact same
approach we've been using for years to generate production builds for
Meta.

The idea is that the only difference between the minified and non-
minified builds is whitespace and symbol mangling. The semantic
structure of the program should be identical.

To implement this, I disabled symbol mangling when running Closure
compiler. Then, in a later step, the symbols are mangled by Terser. This
is when the source maps are generated.",Andrew Clark,2024-04-19T18:22:38Z
f5ce642deed7c74c5ae5df54ec4340a8d028eac9,"Revert ""Support writing to this.refs from userspace"" (#28877)

Reverts facebook/react#28867

It broke some tests, reverting until we figure out why to avoid having
too much delay in the sync.",Jan Kassens,2024-04-19T16:35:06Z
33a32441e991e126e5e874f831bd3afc237a3ecf,"Remove `renderToStaticNodeStream` (#28873)

Stacked on #28872 

renderToStaticNodeStream was not originally deprecated when
renderToNodeStream was deprecated because it did not yet have a clear
analog in the modern streaming implementation for SSR. In React 19 we
have already removed renderToNodeStream. This change removes
renderToStaticNodeStream as well because you can replicate it's
semantics using renderToPipeableStream with onAllReady or
renderToReadableStream with await stream.allready.",Josh Story,2024-04-19T04:06:04Z
d329ff9d9e87f3f909f98cf63701ef3795cf2584,"Deprecate `renderToStaticNodeStream` (#28872)

This commit adds warnings indicating that `renderToStaticNodeStream`
will be removed in an upcoming React release. This API has been legacy,
is not widely used (renderToStaticMarkup is more common) and has
semantically eqiuvalent implementations with renderToReadableStream and
renderToPipeableStream.",Josh Story,2024-04-19T01:33:53Z
561c023708bc0cb04613f89da821dc3c55245f01,"[Fizz] escape <script> textContent similar to bootstrapScript (#28871)

stacked on #28870 

inline script children have been encoded as HTML for a while now but
this can easily break script parsing so practically if you were
rendering inline scripts you were using dangerouslySetInnerHTML. This is
not great because now there is no escaping at all so you have to be even
more careful. While care should always be taken when rendering untrusted
script content driving users to use dangerous APIs is not the right
approach and in this PR the escaping functionality used for
bootstrapScripts and importMaps is being extended to any inline script.

the approach is to escape 's' or 'S"" with the appropriate unicode code
point if it is inside a <script or </script sequence. This has the nice
benefit of minimally escaping the text for readability while still
preserving full js parsing capabilities. As articulated when we
introduced this escaping for prior use cases this is only safe because
we are escaping the entire script content. It would be unsafe if we were
not escaping the entirety of the script because we would no longer be
able to ensure there are no earlier or later <script sequences that put
the parser in unexpected states.",Josh Story,2024-04-19T00:38:43Z
aead514db2808a2e82c128aa4db459939ab88b58,"[Fizz] escape <style> textContent as css (#28870)

style text content has historically been escaped as HTML which is
non-sensical and often leads users to using dangerouslySetInnerHTML as a
matter of course. While rendering untrusted style rules is a security
risk React doesn't really provide any special protection here and
forcing users to use a completely unescaped API is if anything worse. So
this PR updates the style escaping rules for Fizz to only escape the
text content to ensure the tag scope cannot be closed early. This is
accomplished by encoding ""s"" and ""S"" as hexadecimal unicode
representation ""\73 "" and ""\53 "" respectively when found within a
sequence like </style>. We have to be careful to support casing here
just like with the script closing tag regex for bootstrap scripts.",Josh Story,2024-04-19T00:24:27Z
4c34a7ffc59207e8baa19e8c4698a2f90a46177c,"Add missing bundle types for ReactCacheOld (#28860)

Add missing bundle types for ReactCacheOld

These are used at FB and we need to update them for the SecretInternals
update.",Jan Kassens,2024-04-18T21:26:03Z
92f5c3ac7bb4b8fa152d69dcecd8d2eec04a7979,"[Devtools] Rename Forget badge  (#28858)

## Summary

The Forget codename needs to be hidden from the UI to avoid confusion.
Going forward, we'll be referring to this set of features as part of the
larger React compiler. We'll be describing the primary feature that
we've built so far as auto-memoization, and this badge helps devs see
which components have been automatically memoized by the compiler.

## How did you test this change?

- force Forget badge on with and without the presence of other badges
- confirm colors/UI in light and dark modes
- force badges on for `ElementBadges`, `InspectableElementBadges`,
`IndexableElementBadges`
- Running yarn start in packages/react-devtools-shell

[demo
video](https://github.com/facebook/react/assets/973058/fa829018-7644-4425-8395-c5cd84691f3c)",Jason Bonta,2024-04-18T20:55:53Z
a78da09640bc2899588e9143cfda3f166cc06974,"Move global reassignment validation to InferReferenceEffects

ghstack-source-id: fcda8140310d6e1201df35f399020b22b6dccb08
Pull Request resolved: https://github.com/facebook/react-forget/pull/2872",Joe Savona,2024-04-18T20:51:47Z
1cd77a4ff7a2189003965246a3cfc475d2d9857d,"Remove ReactFlightFB bundles (#28864)

Remove ReactFlightFB bundles",Jan Kassens,2024-04-18T20:41:04Z
d870c979a127e210856484e25c0affa5615faeec,"Add StoreGlobal instruction

ghstack-source-id: a715b1385da6648d867118d2b7486ffdb0ff89f6
Pull Request resolved: https://github.com/facebook/react-forget/pull/2871",Joe Savona,2024-04-18T20:21:31Z
1f0701c11e424347cb333e88154c59e1c7016b30,"Write Diff Train import branch to this repo (#28869)

For fbsource we've historically used a separate repo for imports due to
internal limitations in Diff Train. Those have been lifted so we can now
commit this branch here and then we can import from this repo (and get
rid of the other repo)",Jon Janzen,2024-04-18T19:08:52Z
682f5a920a238ff87a317689d3f7e20fb3117fa6,"[dx] Update capitalized call error messages

ghstack-source-id: dbc012018ecc73007dfb3e745615605512ab6867
Pull Request resolved: https://github.com/facebook/react-forget/pull/2870",Joe Savona,2024-04-18T18:07:10Z
ea24427d16f3ac9b0f3bb45cdc7919ac208130c9,"Support writing to this.refs from userspace (#28867)

Previously, the `refs` property of a class component instance was
read-only by user code — only React could write to it, and until/unless
a string ref was used, it pointed to a shared empty object that was
frozen in dev to prevent userspace mutations.

Because string refs are deprecated, we want users to be able to codemod
all their string refs to callback refs. The safest way to do this is to
output a callback ref that assigns to `this.refs`.

So to support this, we need to make `this.refs` writable by userspace.",Andrew Clark,2024-04-18T17:37:54Z
a9732d65b48b73c1dabb3e3d218eed7d3a1885cc,"[dx] Improve error messages for unpreserved memoization

ghstack-source-id: ff5bcaa7ab219035f57dc3dc3396c9a324896d4b
Pull Request resolved: https://github.com/facebook/react-forget/pull/2869",Joe Savona,2024-04-18T16:49:27Z
0061ca6cf47c5124d2ebe708481fb03da9e8e267,"Add early return to diffProperties (#28842)

## Summary

This PR adds early return to the `diff` function. We don't need to go
through all the entries of `nextProps`, process and deep-diff the values
if `nextProps` is the same object as `prevProps`. Roughly 6% of all
`diffProperties` calls can be skipped.

## How did you test this change?

RNTester.",Dmytro Rykun,2024-04-18T16:24:07Z
da6c4612a36d8358fc735f75bbe2e7d9ff64a3c4,"[dx] Consistently use backticks for quoting input in error messages

ghstack-source-id: 34e5507c08fb883c987c88f415158fac781a5f8e
Pull Request resolved: https://github.com/facebook/react-forget/pull/2863",Joe Savona,2024-04-18T16:21:24Z
e3d0f4bce842e8687f2bb2032b167549d30126fb,"[dx] Update NoRefAccessInRender error messages

ghstack-source-id: a5623aa4f29e15c89d2dfbe855bab9843e240a8a
Pull Request resolved: https://github.com/facebook/react-forget/pull/2862",Joe Savona,2024-04-18T16:21:23Z
8c8bd00c04177eedebf31b3284f9c2a2b4958d66,"[dx] Update error messages for manual memo validation

ghstack-source-id: 1a88145049d7f7acb01748ad6ec4dd1500781766
Pull Request resolved: https://github.com/facebook/react-forget/pull/2861",Joe Savona,2024-04-18T16:21:22Z
36e62c6034281f23e5eb5aac776f5835faf06bfb,"delete useless eslint-disable-next-line (#28859)

<!--
  Thanks for submitting a pull request!
We appreciate you spending the time to work on these changes. Please
provide enough information so that others can review your pull request.
The three fields below are mandatory.

Before submitting a pull request, please make sure the following is
done:

1. Fork [the repository](https://github.com/facebook/react) and create
your branch from `main`.
  2. Run `yarn` in the repository root.
3. If you've fixed a bug or added code that should be tested, add tests!
4. Ensure the test suite passes (`yarn test`). Tip: `yarn test --watch
TestName` is helpful in development.
5. Run `yarn test --prod` to test in the production environment. It
supports the same options as `yarn test`.
6. If you need a debugger, run `yarn test --debug --watch TestName`,
open `chrome://inspect`, and press ""Inspect"".
7. Format your code with
[prettier](https://github.com/prettier/prettier) (`yarn prettier`).
8. Make sure your code lints (`yarn lint`). Tip: `yarn linc` to only
check changed files.
  9. Run the [Flow](https://flowtype.org/) type checks (`yarn flow`).
  10. If you haven't already, complete the CLA.

Learn more about contributing:
https://reactjs.org/docs/how-to-contribute.html
-->

## Summary

<!--
Explain the **motivation** for making this change. What existing problem
does the pull request solve?
-->

## How did you test this change?

<!--
Demonstrate the code is solid. Example: The exact commands you ran and
their output, screenshots / videos if the pull request changes the user
interface.
How exactly did you verify that your PR solves the issue you wanted to
solve?
  If you leave this empty, your PR will very likely be closed.
-->",zhangenming,2024-04-18T15:49:55Z
c84ff16afba0d5b72d0252e0e96be71fcb16848f,"[dx] Update error message for reassigning globals

ghstack-source-id: 48ce4b55a8b4b5a22c8ec29f6787732ab2a67778
Pull Request resolved: https://github.com/facebook/react-forget/pull/2860",Joe Savona,2024-04-18T14:46:22Z
4fdbac075fd1e804080068b3fd0e86528bf1c9b0,"Revert ""convert circleci workflow devtools_regression_tests to github actions"" (#28865)

Reverts facebook/react#27800, tests fail on main",Ricky,2024-04-18T14:18:53Z
496e8733bb7fdee8f8678100c8b601ead8a2d23b,"convert circleci workflow devtools_regression_tests to github actions (#27800)

## Summary

This pull request converts the CircleCI workflows to GitHub actions
workflows. [Github Actions
Importer](https://github.com/github/gh-actions-importer) was used to
convert the workflows initially, then I edited them manually to correct
errors in translation.

**Issues**
1. facebook/react/devtools_regression_tests  
The scripts that this workflow calls need to be modified.

## How did you test this change?

I tested these changes in a forked repo. You can [view the logs of this
workflow in my fork](https://github.com/robandpdx/react/actions).

https://fburl.com/workplace/f6mz6tmw",Rob Anderson,2024-04-18T14:04:27Z
87993f333adf28003bca97a24507be6ddc13a2f4,"[dx] Update suppression error messages

ghstack-source-id: 0c362a349de86a07b4e9e381b942939ce4a24e69
Pull Request resolved: https://github.com/facebook/react-forget/pull/2859",Joe Savona,2024-04-18T01:25:40Z
4666bf8c17b7af893157d91e7eeafed0d1a87b61,"[dx] Improve BuildHIR error messages

ghstack-source-id: cbf62aec4e768249a8c7f44fe6f3852183127415
Pull Request resolved: https://github.com/facebook/react-forget/pull/2858",Joe Savona,2024-04-18T01:16:33Z
fc7467ac0ed735aefbfdddc7889d9f1b7aefccf1,"[dx] Update error messages for config parsing

ghstack-source-id: 693a3526a73f1fbd25f4e59416f8c65a0f8f1235
Pull Request resolved: https://github.com/facebook/react-forget/pull/2857",Joe Savona,2024-04-18T01:16:32Z
b5e5ce8e0a899345dab1ce71c74bc1d1c28c6a0d,"Update ReactNativeTypes for root options (part 2) (#28857)

Forgot to push a change before mergin
https://github.com/facebook/react/pull/28850",Ricky,2024-04-17T18:56:43Z
da6ba53b10d8240fc251ba14a3e5878604d3dc7d,"[UMD] Remove umd builds (#28735)

In React 19 React will finally stop publishing UMD builds. This is
motivated primarily by the lack of use of UMD format and the added
complexity of maintaining build infra for these releases. Additionally
with ESM becoming more prevalent in browsers and services like esm.sh
which can host React as an ESM module there are other options for doing
script tag based react loading.

This PR removes all the UMD build configs and forks.

There are some fixtures that still have references to UMD builds however
many of them already do not work (for instance they are using legacy
features like ReactDOM.render) and rather than block the removal on
these fixtures being brought up to date we'll just move forward and fix
or removes fixtures as necessary in the future.",Josh Story,2024-04-17T18:15:27Z
0c245df1dc162d387ce6f5483505921b6cd4cfe2,Complete the typo fix (#28856),Sebastian Silbermann,2024-04-17T18:04:22Z
f82051d7abf9a2137f62cb84f0dd3618397951bc,"console test utils fix: match entire string, not just first letter (#28855)

Fixes issue where if the first letter of the expected string appeared
anywhere in actual message, the assertion would pass, leading to false
negatives. We should check the entire expected string.

---------

Co-authored-by: Ricky <rickhanlonii@gmail.com>",Andrew Clark,2024-04-17T17:04:54Z
4ca20fd36b2444a74279e7022f89894710b1daab,"Test top level fragment inside lazy semantics (#28852)

This wasn't clearly articulated and tested why the code structure is
like this but I think the logic is correct - or at least consistent with
the weird semantics.

We place this top-level fragment check inside the recursion so that you
can resolve how many every Lazy or Usable wrappers you want and it still
preserves the same semantics if they weren't there (which they might not
be as a matter of a race condition).

However, we don't actually recurse with the top-level fragment
unwrapping itself because nesting a bunch of keyless fragments isn't the
same as a single fragment/element.",Sebastian Markbåge,2024-04-17T16:37:51Z
c0cf7c696cf454b49b35d8dae01ab111739dab46,"Promote ASYNC_ITERATOR symbol to React Symbols (#28851)

So that when we end up referring to it in more places, it's only one.

We don't do this same pattern for regular `Symbol.iterator` because we
also support the string `""@@iterator""` for backwards compatibility.",Sebastian Markbåge,2024-04-17T16:29:08Z
657428a9e960cc9c208498be7d2e293007d85cbd,"Add ReactNativeTypes for root options (#28850)

Flow should have failed for this but didn't, we need these options
sync'd over in the types too.",Ricky,2024-04-17T01:18:16Z
7909d8eabb7a702618f51e16a351df41aa8da88e,"[Flight] Encode ReadableStream and AsyncIterables (#28847)

This adds support in Flight for serializing four kinds of streams:

- `ReadableStream` with objects as a model. This is a single shot
iterator so you can read it only once. It can contain any value
including Server Components. Chunks are encoded as is so if you send in
10 typed arrays, you get the same typed arrays out on the other side.
- Binary `ReadableStream` with `type: 'bytes'` option. This supports the
BYOB protocol. In this mode, the receiving side just gets `Uint8Array`s
and they can be split across any single byte boundary into arbitrary
chunks.
- `AsyncIterable` where the `AsyncIterator` function is different than
the `AsyncIterable` itself. In this case we assume that this might be a
multi-shot iterable and so we buffer its value and you can iterate it
multiple times on the other side. We support the `return` value as a
value in the single completion slot, but you can't pass values in
`next()`. If you want single-shot, return the AsyncIterator instead.
- `AsyncIterator`. These gets serialized as a single-shot as it's just
an iterator.

`AsyncIterable`/`AsyncIterator` yield Promises that are instrumented
with our `.status`/`.value` convention so that they can be synchronously
looped over if available. They are also lazily parsed upon read.

We can't do this with `ReadableStream` because we use the native
implementation of `ReadableStream` which owns the promises.

The format is a leading row that indicates which type of stream it is.
Then a new row with the same ID is emitted for every chunk. Followed by
either an error or close row.

`AsyncIterable`s can also be returned as children of Server Components
and then they're conceptually the same as fragment arrays/iterables.
They can't actually be used as children in Fizz/Fiber but there's a
separate plan for that. Only `AsyncIterable` not `AsyncIterator` will be
valid as children - just like sync `Iterable` is already supported but
single-shot `Iterator` is not. Notably, neither of these streams
represent updates over time to a value. They represent multiple values
in a list.

When the server stream is aborted we also close the underlying stream.
However, closing a stream on the client, doesn't close the underlying
stream.

A couple of possible follow ups I'm not planning on doing right now:

- [ ] Free memory by releasing the buffer if an Iterator has been
exhausted. Single shots could be optimized further to release individual
items as you go.
- [ ] We could clean up the underlying stream if the only pending data
that's still flowing is from streams and all the streams have cleaned
up. It's not very reliable though. It's better to do cancellation for
the whole stream - e.g. at the framework level.
- [ ] Implement smarter Binary Stream chunk handling. Currently we wait
until we've received a whole row for binary chunks and copy them into
consecutive memory. We need this to preserve semantics when passing
typed arrays. However, for binary streams we don't need that. We can
just send whatever pieces we have so far.",Sebastian Markbåge,2024-04-16T16:20:07Z
13eb61d0566bdcb6e41a19e433f66ec2ebf62bde,"Move enableUseDeferredValueInitialArg to canary (#28818)

Per team discussion, this upgrades the `initialValue` argument for
`useDeferredValue` from experimental to canary.

- Original implementation PR:
https://github.com/facebook/react/pull/27500
- API documentation PR: https://github.com/reactjs/react.dev/pull/6747

I left it disabled at Meta for now in case there's old code somewhere
that is still passing an `options` object as the second argument.",Andrew Clark,2024-04-16T16:12:32Z
8afa144bdc08f6d28c55f4169868148f1b4636fb,"Enable flag disableClientCache (#28846)

Enable flag disableClientCache

Forcing a `__VARIANT__` in the mock file so we keep testing this until
fully removing it.",Jan Kassens,2024-04-16T14:59:36Z
6bf64df5383113d71bf6ebc8823c6a3ef412e6d0,"[babel] Add a sources option

This allows the plugin to be configured to run on an allowlist, rather
than compiling all files helping with an incremental rollout plan.

The sources option takes both an array of path strings or a function
to be flexible.

For now I've left this be optional but we can make it required.

ghstack-source-id: 282a33dc8d08d47f699894692e0fcc813dff5b77
Pull Request resolved: https://github.com/facebook/react-forget/pull/2855",Sathya Gunsasekaran,2024-04-16T13:41:16Z
5bceb3cb3b0542eef57ffedad1cff1b6aa2132dc,"[.gitignore] Add bundle script

No need to commit this in the repo, but keeping this locally helps with
building the feedback repo.

ghstack-source-id: 28f08992b1ab856567a5338af07e12ac820a7298
Pull Request resolved: https://github.com/facebook/react-forget/pull/2854",Sathya Gunsasekaran,2024-04-16T13:41:13Z
734956ace6450bc0c95d8d749dee74f4a140597b,Devtools: Add support for useFormStatus (#28413),Sebastian Silbermann,2024-04-16T08:28:16Z
8f212cc7893e1bd7cb92aac0cfa715dadea626c2,Ensure sizebot doesn't swallow large diffs (#28845),Sebastian Silbermann,2024-04-16T07:56:25Z
17e920c00d314bfc6833e99ff4cb5c91fb3da254,"[Flight Reply] Encode Typed Arrays and Blobs (#28819)

With the enableBinaryFlight flag on we should encode typed arrays and
blobs in the Reply direction too for parity.

It's already possible to pass Blobs inside FormData but you should be
able to pass them inside objects too.

We encode typed arrays as blobs and then unwrap them automatically to
the right typed array type.

Unlike the other protocol, I encode the type as a reference tag instead
of row tag. Therefore I need to rename the tags to avoid conflicts with
other tags in references. We are running out of characters though.",Sebastian Markbåge,2024-04-16T02:32:08Z
fd35655fae9f88284e01754cadb0707abaca795b,"Delete AUTHORS.md (#28844)

This hasn't been updated in a long time, and it getting really large. 

You can view the authors locally via the git history with:

``
git shortlog -se | perl -spe 's/^\s+\d+\s+//'
``",Ricky,2024-04-15T19:23:30Z
0347fcd0073cf529f67a05be86a0545c3efab8e2,"Add on(Caught|Uncaught|Recoverable) opts to RN (#28836)

## Overview

There's currently a bug in RN now that we no longer re-throw errors. The
`showErrorDialog` function in React Native only logs the errors as soft
errors, and never a fatal. RN was depending on the global handler for
the fatal error handling and logging.

Instead of fixing this in `ReactFiberErrorDialog`, we can implement the
new root options in RN to handle caught/uncaught/recoverable in the
respective functions, and delete ReactFiberErrorDialog. I'll follow up
with a RN PR to implement these options and fix the error handling.",Ricky,2024-04-15T16:03:28Z
c113503ad131101b19b4a5c1e4639b8588ecd993,"Flush direct streams in Bun (#28837)

<!--
  Thanks for submitting a pull request!
We appreciate you spending the time to work on these changes. Please
provide enough information so that others can review your pull request.
The three fields below are mandatory.

Before submitting a pull request, please make sure the following is
done:

1. Fork [the repository](https://github.com/facebook/react) and create
your branch from `main`.
  2. Run `yarn` in the repository root.
3. If you've fixed a bug or added code that should be tested, add tests!
4. Ensure the test suite passes (`yarn test`). Tip: `yarn test --watch
TestName` is helpful in development.
5. Run `yarn test --prod` to test in the production environment. It
supports the same options as `yarn test`.
6. If you need a debugger, run `yarn test --debug --watch TestName`,
open `chrome://inspect`, and press ""Inspect"".
7. Format your code with
[prettier](https://github.com/prettier/prettier) (`yarn prettier`).
8. Make sure your code lints (`yarn lint`). Tip: `yarn linc` to only
check changed files.
  9. Run the [Flow](https://flowtype.org/) type checks (`yarn flow`).
  10. If you haven't already, complete the CLA.

Learn more about contributing:
https://reactjs.org/docs/how-to-contribute.html
-->

## Summary

<!--
Explain the **motivation** for making this change. What existing problem
does the pull request solve?
-->

The ReadableStreamController for [direct
streams](https://bun.sh/docs/api/streams#direct-readablestream) in Bun
supports a flush() method to flush all buffered items to its underlying
sink.

Without manually calling flush(), all buffered items are only flushed to
the underlying sink when the stream is closed. This behavior causes the
shell rendered against Suspense boundaries never to be flushed to the
underlying sink.

## How did you test this change?

<!--
Demonstrate the code is solid. Example: The exact commands you ran and
their output, screenshots / videos if the pull request changes the user
interface.
How exactly did you verify that your PR solves the issue you wanted to
solve?
  If you leave this empty, your PR will very likely be closed.
-->

A lot of changes to the test runner will need to be made in order to
support the Bun runtime. A separate test was manually run in order to
ensure that the changes made are correct.

The test works by sanity-checking that the shell rendered against
Suspense boundaries are emitted first in the stream.

This test was written and run on Bun v1.1.3.

```ts
import { Suspense } from ""react"";
import { renderToReadableStream } from ""react-dom/server"";

if (!import.meta.resolveSync(""react-dom/server"").endsWith(""server.bun.js"")) {
  throw new Error(""react-dom/server is not the correct version:\n  "" + import.meta.resolveSync(""react-dom/server""));
}

const A = async () => {
  await new Promise(resolve => setImmediate(resolve));
  return <div>hi</div>;
};

const B = async () => {
  return (
    <Suspense fallback={<div>loading</div>}>
      <A />
    </Suspense>
  );
};

const stream = await renderToReadableStream(<B />);

let text = """";
let count = 0;
for await (const chunk of stream) {
  text += new TextDecoder().decode(chunk);
  count++;
}

if (
  text !==
  `<!--$?--><template id=""B:0""></template><div>loading</div><!--/$--><div hidden id=""S:0""><div>hi</div></div><script>$RC=function(b,c,e){c=document.getElementById(c);c.parentNode.removeChild(c);var a=document.getElementById(b);if(a){b=a.previousSibling;if(e)b.data=""$!"",a.setAttribute(""data-dgst"",e);else{e=b.parentNode;a=b.nextSibling;var f=0;do{if(a&&8===a.nodeType){var d=a.data;if(""/$""===d)if(0===f)break;else f--;else""$""!==d&&""$?""!==d&&""$!""!==d||f++}d=a.nextSibling;e.removeChild(a);a=d}while(a);for(;c.firstChild;)e.insertBefore(c.firstChild,a);b.data=""$""}b._reactRetry&&b._reactRetry()}};$RC(""B:0"",""S:0"")</script>`
) {
  throw new Error(""unexpected output"");
}
if (count !== 2) {
  throw new Error(""expected 2 chunks from react ssr stream"");
}
```",Kenta Iwasaki,2024-04-15T15:25:08Z
b28bb19e44d4624ffda33ff5f3a7a2dcce291635,"[codegen] Don't drop directives in simple arrow fn

The compiler has an optimisation where it transforms a simple arrow
function with only a return statement to a implicit arrow function.

In the case, there's a directive in this simple arrow function, the
directive gets dropped.

Instead of dropping the directive, the compiler should perform this
optimisation only if there are no directives.

ghstack-source-id: 514cd2440025986a2d6d950694a7339d779b09f2
Pull Request resolved: https://github.com/facebook/react-forget/pull/2848",Sathya Gunsasekaran,2024-04-15T14:52:45Z
2d128ff041e4cd97f92c0dfe9ce5ab73eab27ae9,"React DevTools 5.0.2 -> 5.1.0 (#28840)

Full list of changes:
* Look for a ReactMemoCacheSentinel on state
([gsathya](https://github.com/gsathya) in
[#28831](https://github.com/facebook/react/pull/28831))
* Use use() in the Cache if available
([sebmarkbage](https://github.com/sebmarkbage) in
[#28793](https://github.com/facebook/react/pull/28793))
* feat[devtools-fusebox]: support theme option
([hoxyq](https://github.com/hoxyq) in
[#28832](https://github.com/facebook/react/pull/28832))
* feat[devtools]: add package for fusebox integration
([hoxyq](https://github.com/hoxyq) in
[#28553](https://github.com/facebook/react/pull/28553))
* feat[devtools]: add method for connecting backend with custom
messaging protocol ([hoxyq](https://github.com/hoxyq) in
[#28552](https://github.com/facebook/react/pull/28552))
* Rename SECRET INTERNALS to
`__CLIENT_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE`
([sebmarkbage](https://github.com/sebmarkbage) in
[#28789](https://github.com/facebook/react/pull/28789))
* Flatten ReactSharedInternals
([sebmarkbage](https://github.com/sebmarkbage) in
[#28783](https://github.com/facebook/react/pull/28783))
* feat[devtools]: ship source maps for content scripts and ignore list
installHook script ([hoxyq](https://github.com/hoxyq) in
[#28730](https://github.com/facebook/react/pull/28730))
* Track Owner for Server Components in DEV
([sebmarkbage](https://github.com/sebmarkbage) in
[#28753](https://github.com/facebook/react/pull/28753))
* Move ReactDOMLegacy implementation into RootFB
([sebmarkbage](https://github.com/sebmarkbage) in
[#28656](https://github.com/facebook/react/pull/28656))
* Reland #28672: Remove IndeterminateComponent
([gnoff](https://github.com/gnoff) in
[#28681](https://github.com/facebook/react/pull/28681))
* Remove reference to deleted <Cache> in un-linted file
([josephsavona](https://github.com/josephsavona) in
[#28715](https://github.com/facebook/react/pull/28715))
* [be] Remove unshipped experimental <Cache> element type
([josephsavona](https://github.com/josephsavona) in
[#28698](https://github.com/facebook/react/pull/28698))
* Revert ""Remove module pattern function component support""
([rickhanlonii](https://github.com/rickhanlonii) in
[#28670](https://github.com/facebook/react/pull/28670))
* Remove module pattern function component support
([gnoff](https://github.com/gnoff) in
[#27742](https://github.com/facebook/react/pull/27742))
* [RTR] Enable warning flag ([jackpope](https://github.com/jackpope) in
[#28419](https://github.com/facebook/react/pull/28419))
* Update error messages ([rickhanlonii](https://github.com/rickhanlonii)
in [#28652](https://github.com/facebook/react/pull/28652))
* fix[devtools/ci]: split profiling cache test for different react
versions and toEqual checker ([hoxyq](https://github.com/hoxyq) in
[#28628](https://github.com/facebook/react/pull/28628))
* Guard against legacy context not being supported in DevTools fixture
([eps1lon](https://github.com/eps1lon) in
[#28596](https://github.com/facebook/react/pull/28596))
* Use `declare const` instead of `declare var`
([kassens](https://github.com/kassens) in
[#28599](https://github.com/facebook/react/pull/28599))
* Update isConcurrent RTR option usage
([jackpope](https://github.com/jackpope) in
[#28546](https://github.com/facebook/react/pull/28546))
* Disable legacy context ([kassens](https://github.com/kassens) in
[#27991](https://github.com/facebook/react/pull/27991))
* Remove invokeGuardedCallback and replay trick
([sebmarkbage](https://github.com/sebmarkbage) in
[#28515](https://github.com/facebook/react/pull/28515))
* Remove remaining usages of ReactTestUtils in tests unrelated to
`react-dom/test-util` ([eps1lon](https://github.com/eps1lon) in
[#28534](https://github.com/facebook/react/pull/28534))
* fix[devtools/e2e]: fixed source inspection in e2e tests
([hoxyq](https://github.com/hoxyq) in
[#28518](https://github.com/facebook/react/pull/28518))
* Devtools: Display actual pending state when inspecting `useTransition`
([eps1lon](https://github.com/eps1lon) in
[#28499](https://github.com/facebook/react/pull/28499))",Ruslan Lesiutin,2024-04-15T13:56:57Z
d486051de7a77236e729d395a18acac2c5ece35f,"[Devtools] Look for a ReactMemoCacheSentinel on state (#28831)

The useMemoCache polyfill doesn't have access to the fiber, and it
simply uses state, which does not work with the existing devtools 
badge for the compiler.

With this PR, devtools will look on the very first hook's state for the
memo cache sentinel and display the Forget badge if present.

The polyfill will add this sentinel to it's state (the cache array).",Sathya Gunasekaran,2024-04-15T12:05:05Z
1683cb186c17dd610ecf83675aded1348a9bb3ff,"Use use() in the Cache if available (#28793)

This is a follow up to
https://github.com/facebook/react/pull/28789#discussion_r1557232202

Revert to use the old readContext detection if not to support older
React.

I haven't actually tested this. Just opening as a suggestion.",Sebastian Markbåge,2024-04-15T12:03:29Z
9defcd56bc3cd53ac2901ed93f29218007010434,Remove redundant props assign (#28829),Sebastian Silbermann,2024-04-12T19:55:51Z
ed4023603632787db6416bee8e85e68d98ad29bd,"Fix mistaken ""react-server"" condition (#28835)

This is a Fizz server.",Sebastian Markbåge,2024-04-12T19:53:41Z
ba1a9797eebee694f6872e425b3a697c39a17dfc,"Remove `flight-browser` fixture  (#28828)

The flight-browser fixtures doesn't make sense. It also uses UMD builds
which are being removed so we'd have to make it use esm.sh or something
and really it just won't work because it needs to be built by webpack to
not error. We could potentially shim the webpack globals but really the
right thing is to publish the esm version of react-server and use esm.sh
to load a browser only esm demo of react-server. This change removes the
flight-browser fixture",Josh Story,2024-04-12T16:48:40Z
7625f0d501bea50efe1e3cfc7208329c18e3369e,"feat[devtools-fusebox]: support theme option (#28832)

Support propagating theme from Chrome DevTools frontend, the field is
optional.

Next step, which is out of scope of this project and general improvement
for React DevTools: teach RDT to listen to theme changes and if the
theme preference is set to `auto` in settings, update the theme
accordingly with the browser devtools.",Ruslan Lesiutin,2024-04-12T16:26:37Z
441024318c2286f75979292577ef7e25fbb2cffb,"[polyfill] Add sentinel to array

To make the polyfill work well with devtools, we add this sentinel.

Devtools will look for this sentinel before adding the Forget badge.

ghstack-source-id: d246040f67da48fa46f818753c8bf26dff56f390
Pull Request resolved: https://github.com/facebook/react-forget/pull/2847",Sathya Gunsasekaran,2024-04-12T14:32:12Z
96c58466109c2944adb817001fec38088a7c431e,"feat[devtools]: add package for fusebox integration (#28553)

## Summary

Stacked on https://github.com/facebook/react/pull/28552. Review only the
[last commit at the
top](https://github.com/facebook/react/pull/28553/commits/c69952f1bf6e23252d47e0f7eb98efbbb2cc2c55).

These changes add new package `react-devtools-fusebox`, which is the
entrypoint for the RDT Frontend, which will be used in Chrome DevTools
panel. The main differences from other frontend shells (extension,
standalone) are:
1. This package builds scripts in ESM format, this is required by Chrome
DevTools, see webpack config:

https://github.com/facebook/react/blob/c69952f1bf6e23252d47e0f7eb98efbbb2cc2c55/packages/react-devtools-fusebox/webpack.config.frontend.js#L50-L52
2. The build includes styles in a separate `.css` file, which is
required for Chrome DevTools: styles are loaded lazily once panel is
mounted.",Ruslan Lesiutin,2024-04-12T14:29:35Z
d012a32f840cf575b9d07bf1ed96af34af99e060,"feat[devtools]: add method for connecting backend with custom messaging protocol (#28552)

## Summary

RDT backend will now expose method `connectWithCustomMessagingProtocol`,
which will be similar to the classic `connectToDevTools` one, but with
few differences:
1. It delegates the communication management between frontend and
backend to the owner (whos injecting RDT backend). Unlike the
`connectToDevTools`, which is relying on websocket connection and
receives host and port as an arguments.
2. It returns a callback, which can be used for unsubscribing the
current backend instance from the global DevTools hook.


This is a prerequisite for any non-browser RDT integration, which is not
designed to be based on websocket.",Ruslan Lesiutin,2024-04-12T14:17:07Z
c8a035036d0f257c514b3628e927dd9dd26e5a09,"[Fizz] hoistables should never flush before the preamble (#28802)

Hoistables should never flush before the preamble however there is a
surprisingly easy way to trigger this to happen by suspending in the
shell of the app. This change modifies the flushing behavior to not emit
any hoistables before the preamble has written. It accomplishes this by
aborting the flush early if there are any pending root tasks remaining.
It's unfortunate we need this extra condition but it's essential that we
don't emit anything before the preamble and at the moment I don't see a
way to do that without introducing a new condition.

There is a test that began to fail with this update. It turns out that
in node the root can be blocked during a resume even for a component
inside a Suspense boundary if that boundary was part of the prerender.
This means that with the current heuristic in this PR boundaries cannot
be flushed during resume until the root is unblocked. This is not ideal
but this is already how Edge works because the root blocks the stream in
that case. This just makes Node deopt in a similar way to edge. We
should improve this but we ought to do so in a way that works for edge
too and it needs to be more comprehensive.",Josh Story,2024-04-11T22:13:04Z
4f5c812a3c4e52d9ea5d908a27a317ac0f26590a,DevTools: Rely on sourcemaps to compute hook name of built-in hooks in newer versions (#28593),Sebastian Silbermann,2024-04-11T20:00:54Z
435415962371adc69e6a7211f7c65a5d72fc609c,"Backwards compatibility for string refs on WWW (#28826)

Seeing errors with undefined string ref values when trying to sync
https://github.com/facebook/react/pull/28473

Added a test that reproduces the failing pattern.

@acdlite pushed
https://github.com/facebook/react/pull/28826/commits/a786481ae5702f1966ecdb62f3667f3d72966e78
with fix

---------

Co-authored-by: Jack Pope <jackpope@meta.com>
Co-authored-by: Andrew Clark <git@andrewclark.io>",Jack Pope,2024-04-11T19:30:37Z
adb71739386c1d8800ee80d11713a401ccdc7af8,Fix nightly release job for real (#28825),Sebastian Silbermann,2024-04-11T16:28:10Z
a2582074b84e95f8e9be6d9f51c80f09dd620ad7,Fix nightly release job (#28824),Sebastian Silbermann,2024-04-11T16:08:13Z
608edcc90a9e1dcee896c6c93cb381d0a61aac37,"[tests] add `assertConsole<method>Dev` helpers (#28732)

## Overview
**Internal React repo tests only**

Depends on https://github.com/facebook/react/pull/28710

Adds three new assertions:
- `assertConsoleLogDev`
- `assertConsoleWarnDev`
- `assertConsoleErrorDev`

These will replace this pattern:

```js
await expect(async () => {
  await expect(async () => {
    await act(() => {
      root.render(<Fail />)
    });
  }).toThrow();
}).toWarnDev('Warning');
```

With this:

```js
await expect(async () => {
  await act(() => {
    root.render(<Fail />)
  });
}).toThrow();

assertConsoleWarnDev('Warning');
```

It works similar to our other `assertLog` matchers which clear the log
and assert on it, failing the tests if the log is not asserted before
the test ends.

## Diffs

There are a few improvements I also added including better log diffs and
more logging.

When there's a failure, the output will look something like:

<img width=""655"" alt=""Screenshot 2024-04-03 at 11 50 08 AM""
src=""https://github.com/facebook/react/assets/2440089/0c4bf1b2-5f63-4204-8af3-09e0c2d752ad"">


Check out the test suite for snapshots of all the failures we may log.",Ricky,2024-04-11T12:19:46Z
da69b6af9697b8042834644b14d0e715d4ace18a,"ReactDOM.requestFormReset  (#28809)

Based on:

- #28808
- #28804 

---

This adds a React DOM method called requestFormReset that schedules a
form reset to occur when the current transition completes.

Internally, it's the same method that's called automatically whenever a
form action is submitted. It only affects uncontrolled form inputs. See
https://github.com/facebook/react/pull/28804 for details.

The reason for the public API is so UI libraries can implement their own
action-based APIs and maintain the form-resetting behavior, something
like this:

```js
function onSubmit(event) {
  // Disable default form submission behavior
  event.preventDefault();
  const form = event.target;
  startTransition(async () => {
    // Request the form to reset once the action
    // has completed
    requestFormReset(form);

    // Call the user-provided action prop
    await action(new FormData(form));
  })
}
```",Andrew Clark,2024-04-10T20:56:55Z
374b5d26c2a379fe87ee6817217c8956c4e39aac,"Scaffolding for requestFormReset API (#28808)

Based on:

- #28804 

---

This sets adds a new ReactDOM export called requestFormReset, including
setting up the export and creating a method on the internal ReactDOM
dispatcher. It does not yet add any implementation.

Doing this in its own commit for review purposes.

The API itself will be explained in the next PR.",Andrew Clark,2024-04-10T20:55:15Z
41950d14a538aa7411b00b28bcd94ae95a45976e,"Automatically reset forms after action finishes (#28804)

This updates the behavior of form actions to automatically reset the
form's uncontrolled inputs after the action finishes.

This is a frequent feature request for people using actions and it
aligns the behavior of client-side form submissions more closely with
MPA form submissions.

It has no impact on controlled form inputs. It's the same as if you
called `form.reset()` manually, except React handles the timing of when
the reset happens, which is tricky/impossible to get exactly right in
userspace.

The reset shouldn't happen until the UI has updated with the result of
the action. So, resetting inside the action is too early.

Resetting in `useEffect` is better, but it's later than ideal because
any effects that run before it will observe the state of the form before
it's been reset.

It needs to happen in the mutation phase of the transition. More
specifically, after all the DOM mutations caused by the transition have
been applied. That way the `defaultValue` of the inputs are updated
before the values are reset. The idea is that the `defaultValue`
represents the current, canonical value sent by the server.

Note: this change has no effect on form submissions that aren't
triggered by an action.",Andrew Clark,2024-04-10T20:54:24Z
dc6a7e01e1d2fa5eb4974f9bb66e9e8fb40f6ef8,"[Float] Don't preload images inside `<noscript>` (#28815)

`<noscript>` scopes should be considered inert from the perspective of
Fizz since we assume they'll only be used in rare and adverse
circumstances. When we added preload support for img tags we did not
include the noscript scope check in the opt-out for preloading. This
change adds it in

fixes: #27910",Josh Story,2024-04-10T19:15:04Z
d2018c51e14f79c33cdeb2a702116607d2a724bf,"[playground] Editing input shouldn't toggle diff view

ghstack-source-id: f9e80fc0c928e1ce1ec698d4d952e11402054843
Pull Request resolved: https://github.com/facebook/react-forget/pull/2833",Mofei Zhang,2024-04-10T18:53:38Z
c836a0158b8720fa368574068dfca925d28430b5,"Fix usage of renamed React internals

ghstack-source-id: d646c84815c324bd490584d34488a73f5e39d589
Pull Request resolved: https://github.com/facebook/react-forget/pull/2845",Lauren Tan,2024-04-11T15:10:42Z
6e65445911e15e51a549fe456a428d342ba745e5,"Fix playground e2e test for real

ghstack-source-id: 1b52cb312a5f26e8e058bfe4a29b586ffaeb25d7
Pull Request resolved: https://github.com/facebook/react-forget/pull/2843",Lauren Tan,2024-04-11T16:13:59Z
ec05176fb3950f905f16616934c560d4150130d3,"Make string values for config case-insensitive

Fixes a tiny inconsistency with compiler options where one was all
uppercase and one all lowercase by normalizing to lowercase regardless
of the casing of the user's config.

ghstack-source-id: fe60a3259de89a1b3fdd7475950e16e96cc57f6b
Pull Request resolved: https://github.com/facebook/react-forget/pull/2832",Lauren Tan,2024-04-11T14:45:35Z
9cdd6b243e8e633c4322424cd4b963e03819b1f9,"Fix playground e2e test

ghstack-source-id: 3904ff9beea21ffbb79a6a15fcfbb72f04a2d170
Pull Request resolved: https://github.com/facebook/react-forget/pull/2842",Lauren Tan,2024-04-10T22:17:38Z
200b0f233378f8450fc3078c6200d56cc720f2ea,"Add aria-label to playground tabs

ghstack-source-id: 1c23bbbb55c1582a03674897b57c5061b895be83
Pull Request resolved: https://github.com/facebook/react-forget/pull/2841",Lauren Tan,2024-04-10T22:17:37Z
f990948a1f9fef6a5181d68fbc15e3c0e56f936a,"Small style tweaks to playground vertical tabs

ghstack-source-id: 56e72c56782274bdac92fdd131d2c9b33eb19052
Pull Request resolved: https://github.com/facebook/react-forget/pull/2840",Lauren Tan,2024-04-10T22:17:36Z
ed3bad0c2f75ef280c2e6721b8db9adf604fe19e,"Add aria-label to playground header buttons

ghstack-source-id: 4fdf672f02144e550d50b17f396a5d6d82dab5bd
Pull Request resolved: https://github.com/facebook/react-forget/pull/2839",Lauren Tan,2024-04-10T22:17:36Z
7083231f6d872d126fa2c2cb7cec386c02cc51a9,"Add link to GitHub repo in playground header

ghstack-source-id: 9fd0c2f8d70f8782602b0e4f8535b6be3ed89782
Pull Request resolved: https://github.com/facebook/react-forget/pull/2838",Lauren Tan,2024-04-10T22:17:35Z
b6c01f7f787917bda4b74c3d21206b2ff148c140,"Remove playground wipe button

It was never clear to me what the difference between Wipe and Reset was.
Let's just get rid of one and reset to something more useful instead of
fibonacci.

ghstack-source-id: 4f88a1c1da2d0fd9e1f26e4859c12db0fc961af2
Pull Request resolved: https://github.com/facebook/react-forget/pull/2837",Lauren Tan,2024-04-10T21:46:35Z
9ae3e74c3e480f4fa433ed52344b5b049ed50706,"Rename references to ""forget"" in playground

ghstack-source-id: fc2d58e4d5195c3ec157f65b3e1c94de39ff2070
Pull Request resolved: https://github.com/facebook/react-forget/pull/2836",Lauren Tan,2024-04-10T21:46:35Z
594f3352010fcd0dfdefcbcd07598e319aadaffb,"Show alert when url copied

ghstack-source-id: e8dba44d246d53f60a0858710cedf75c77c6c7e4
Pull Request resolved: https://github.com/facebook/react-forget/pull/2835",Lauren Tan,2024-04-10T21:46:34Z
2f66d37cfd9a0bb1b502147ebc8212ed416f9bec,"Use lz-string for playground state uri param

This compresses more efficiently than the base64 encoding we were
previously using, which makes sharing URLs a little less unwieldy and
takes up less space in local storage. Using
some real code as an example, lz-string compresses to 8040 bytes,
whereas the original base64 encoding we were using compresses to 16504
bytes

ghstack-source-id: b8f1089889b94b07d6f419606b798ffddb8863ba
Pull Request resolved: https://github.com/facebook/react-forget/pull/2834",Lauren Tan,2024-04-10T21:46:33Z
3f947b1b468a2a2a419227ce26842c4b6ba31082,"[tests] Assert scheduler log empty in internalAct (#28737)

We should force `assertLog` to be called before each `act` block to
ensure the queue is empty.

Requires fixing tests:
- https://github.com/facebook/react/pull/28745
- https://github.com/facebook/react/pull/28758
- https://github.com/facebook/react/pull/28759
- https://github.com/facebook/react/pull/28760
- https://github.com/facebook/react/pull/28761
- https://github.com/facebook/react/pull/28762
- https://github.com/facebook/react/pull/28763
- https://github.com/facebook/react/pull/28812",Ricky,2024-04-10T18:13:46Z
870e4045ab67020e9cc0f0940d46db7bbbffad3b,"[tests] add assertLog for legacy mode tests (#28814)

A few more tests for https://github.com/facebook/react/pull/28737",Ricky,2024-04-10T18:01:59Z
a8a83f7a5996b86f3901d5dc505b13506dd12caf,"Removes the react-interactions project which is unused (#28799)

Removes the react-interactions project which is unused

This project uses `unstable_createEventHandle` which is being removed
from React in version 19",Josh Story,2024-04-10T16:18:33Z
bf09089f64cec31680b0bb63b2ebaa81e210c492,"Remove Scheduler.log from ReactSuspenseFuzz-test (#28812)

These test don't `assertLog` or `waitFor` so we don't need to
`Scheduler.log`. Ideally we would, but since they're fuzzers it's a bit
difficult to know what the expected log is from the helper.

Since this doesn't regress current test behavior, we can improve them
after this to unblock https://github.com/facebook/react/pull/28737",Ricky,2024-04-10T15:40:22Z
84cb3b4cb250bd592f4eb9495e66b50d33c8cd1e,"Hardcode disableIEWorkarounds for www (#28811)

This has landed and is true everywhere, but let's keep the flag until it
lands in the stable release.",Ricky,2024-04-10T15:14:33Z
2243b40abad449fe90a9af10f592d0c5c52591d5,"[tests] assertLog before act in useEffectEvent (#28763)

Fixes tests blocking https://github.com/facebook/react/pull/28737",Ricky,2024-04-10T14:34:34Z
dfc64c6e31586f63703b81284b69b4ee5be82e5b,"[tests] assertLog before act in ReactUse (#28762)

Fixes tests blocking https://github.com/facebook/react/pull/28737",Ricky,2024-04-10T14:34:27Z
b02199d322c3876f213dc9bba815acaa839609fd,"[tests] assertLog before act in ReactErrorBoundaries (#28761)

Fixes tests blocking https://github.com/facebook/react/pull/28737",Ricky,2024-04-10T14:34:19Z
6e1e2f2198b9c1f9259417cb569d92206ccf55f5,"[tests] assertLog before act in ReactUpdates (#28760)

Fixes tests blocking https://github.com/facebook/react/pull/28737",Ricky,2024-04-10T14:34:11Z
88df5242d6f8e319d7903f6fa984e3a02cd44b34,"[tests] assertLog before act in ReactDOMServerSelectiveHydration (#28759)

Fixes tests blocking https://github.com/facebook/react/pull/28737",Ricky,2024-04-10T14:34:02Z
e36ee763faf9f273f162ad3292b36382834bdf30,"[tests] assertLog before act in ReactCompositeComponentState (#28758)

Fixes tests blocking https://github.com/facebook/react/pull/28737",Ricky,2024-04-10T14:33:51Z
42eff4bc78a3636953c55096ca0b220c611a74cc,"[tests] Fix assertions not flushed before act (#28745)

Fixes some easy cases blocking
https://github.com/facebook/react/pull/28737, I'll follow up with more
complex/interesting cases in other PRs.",Ricky,2024-04-10T14:33:41Z
ed3c65caf042f75fe2fdc2a5e568a9624c6175fb,"Warn if outdated JSX transform is detected (#28781)

We want to warn if we detect that an app is using an outdated JSX
transform. We can't just warn if `createElement` is called because we
still support `createElement` when it's called manually. We only want to
warn if `createElement` is output by the compiler.

The heuristic is to check for a `__self` prop, which is an optional,
internal prop that older transforms used to pass to `createElement` for
better debugging in development mode.

If `__self` is present, we `console.warn` once with advice to upgrade to
the modern JSX transform. Subsequent elements will not warn.

There's a special case we have to account for: when a static ""key"" prop
is defined _after_ a spread, the modern JSX transform outputs
`createElement` instead of `jsx`. (This is because with `jsx`, a spread
key always takes precedence over a static key, regardless of the order,
whereas `createElement` respects the order.) To avoid a false positive
warning, we skip the warning whenever a `key` prop is present.",Andrew Clark,2024-04-09T21:13:19Z
3f9e237a2feb74f1fca23b76d9d2e9e1713e2ba1,"Fix: Suspend while recovering from hydration error (#28800)

Fixes a bug that happens when an error occurs during hydration, React
switches to client rendering, and then the client render suspends. It
works correctly if there's a Suspense boundary on the stack, but not if
it happens in the shell of the app.

Prior to this fix, the app would crash with an ""Unknown root exit
status"" error.

I left a TODO comment for how we might refactor this code to be less
confusing in the future.",Andrew Clark,2024-04-09T21:11:46Z
64c8d2d45d49dbb2f59ea23e5e739eb79e124abc,"Attempt to fix diff syncing for Meta (#28801)

#28796 broke Meta's PR syncing tool, hoping this fixes it",Joseph Savona,2024-04-09T21:05:18Z
7f5d25e23e82adef262493794010385f1955f0b6,"Fix cloneElement using string ref w no owner (#28797)

Fix for an issue introduced in #28473 where cloneElement() with a string
ref fails due to lack of an owner. We should use the current owner in
this case.

---------

Co-authored-by: Rick Hanlon <rickhanlonii@fb.com>",Joseph Savona,2024-04-09T20:43:49Z
bf40b024421a0e1f2f882fd7171ea39cd74c88df,"[Fizz] Stop publishing external-runtime to stable channel (#28796)

The external runtime is not vetted for stability yet. We should stop
publishing it with our stable build",Josh Story,2024-04-09T18:57:58Z
67ff96e12df1e5da9a23668fbc21a5888021c523,"[Tests][Fizz] Test script runtime even when external runtime is available (#28794)

Previously if the external runtime was enabled Fizz tests would use it
exclusively. However now that this flag is enabled for OSS and Meta
builds this means we were no longer testing the inline script runtime.
This changes the test flags to produce some runs where we test the
inline script runtime and others where we test the external runtime

the external runtime will be tested if the flag is enabled and
* Meta Builds: variant is true
* OSS Builds: experiemental is true

this gives us decent coverage. long term we should probably bring
variant to OSS builds since we will eventually want to test both modes
even when the external runtime is stable.",Josh Story,2024-04-09T18:50:02Z
7f93cb41c8e1352eec158e508bc612025425266d,"[DOM] Infer react-server entries bundles if not explicitly configured (#28795)

When packaging we want to infer that a bundle exists for a
`react-server` file even if it isn't explicitly configured. This is
useful in particular for the react-server entrypoints that error on
import that were recently added to `react-dom`

This change also cleans up a wayward comment left behind in a prior PR",Josh Story,2024-04-09T17:39:25Z
f6131653570bbbf62d642ba9343b9cd0ab1ae97c,"Rename SECRET INTERNALS to `__CLIENT_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE` (#28789)

Follow up to #28783 and #28786.

Since we've changed the implementations of these we can rename them to
something a bit more descriptive while we're at it, since anyone
depending on them will need to upgrade their code anyway.

""react"" with no condition:
`__CLIENT_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE`
""react"" with ""react-server"" condition:
`__SERVER_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE`
""react-dom"":
`__DOM_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE`",Sebastian Markbåge,2024-04-09T16:20:22Z
50895bc161ee47ad3b5cd56a58babeda0f0543e1,CI: Run with Node.js 18.20 (#28774),Sebastian Silbermann,2024-04-09T14:02:22Z
cffbcac8e3d67edf8696cbc71c5144cc32a64667,Run stale job hourly (#28769),Jan Kassens,2024-04-09T13:21:20Z
9644d206e8d92d0e31a9252d78933a48c62eb427,"Soften useFormState warning (#28788)

It's not deprecated, it's really just renamed. Let's make the warning
less scary.",Ricky,2024-04-09T03:22:17Z
c771016e19384e4b6e42e1c275bdf03fe51c2907,"Rename The Secret Export of Server Internals (#28786)

We have a different set of dispatchers that Flight uses. This also
includes the `jsx-runtime` which must also be aliased to use the right
version.

To ensure the right versions are used together we rename the export of
the SharedInternals from 'react' and alias it in relevant bundles.",Sebastian Markbåge,2024-04-09T02:34:59Z
57d746e3c4a89aefb9ec59912120ea284e74e1c5,"HIR terminal for representing reactive scopes

ghstack-source-id: f7d5b68bc5217555b6060ade3bfa253bb15660ad
Pull Request resolved: https://github.com/facebook/react-forget/pull/2830",Joe Savona,2024-04-09T00:43:41Z
0c6fe1ba359af3dc75732ab7debcb9bb53124943,"Cleanup range printing

ghstack-source-id: 42c49348a93921fc03ec5defcf68a364952a3f88
Pull Request resolved: https://github.com/facebook/react-forget/pull/2829",Joe Savona,2024-04-09T00:31:35Z
f707cb5ff321d1e5c66068274c224d5e7f3bb079,"HIR-based MergeOverlappingScopes

ghstack-source-id: 93ac68114683044d7e6332fe7898b0dcc5dc6685
Pull Request resolved: https://github.com/facebook/react-forget/pull/2828",Joe Savona,2024-04-09T00:09:07Z
d50323eb845c5fde0d720cae888bf35dedd05506,"Flatten ReactSharedInternals (#28783)

This is similar to #28771 but for isomorphic. We need a make over for
these dispatchers anyway so this is the first step. Also helps flush out
some internals usage that will break anyway.

It flattens the inner mutable objects onto the ReactSharedInternals.",Sebastian Markbåge,2024-04-08T23:23:23Z
acef2f811125af250631965e6c1a8c7479b30b42,"[DOM] Fix package.json files for #28784 (#28785)

Missed some files for the react-server disallow client change in #28784",Josh Story,2024-04-08T22:49:18Z
556a087de3c94761d3834b11c30630dcaa82600c,"[DOM] disallow client entrypoints with react-server condition (#28784)

`react-server` precludes loading code that expects to be run in a client
context. This includes react-dom/client react-dom/server
react-dom/unstable_testing react-dom/profiling and react-dom/static

This update makes importing any of these client only entrypoints an
error",Josh Story,2024-04-08T22:37:06Z
f62cf8c62052ae780d351090013f7155cf9a868c,"[Float] treat `props.async` in Float consistent with the rest of react-dom (#26760)

Treat async (boolean prop) consistently with Float. Previously float
checked if `props.async === true` (or not true) but the rest of
react-dom considers anything truthy that isn't a function or symbol as
`true`. This PR normalizes the Float behavior.",Josh Story,2024-04-08T21:26:58Z
dfd3d5af83cadd9bfc904c0a62a30adc20e414c9,"Add support for transition{run,start,cancel} events (#27345)",Hugo Sales,2024-04-08T21:23:04Z
1f8327f834d923aa5a99cc0e81d2c9fc9d38c75d,"[Fiber] Use real event priority for hydration scheduling (#28765)

Stacked on #28751 

Historically explicit hydration scheduling used the reconciler's update
priority to schedule the hydration. There was a lingering todo to switch
to using event priority in the absence of an explicit update priority.
This change updates the hydration priority by referring to the event
priority if no update priority is set",Josh Story,2024-04-08T21:05:17Z
97c90ed8835401e325e42de22f38a803c5e6fc6d,"[DOM] Shrink ReactDOMCurrentDispatcher method names (#28770)

Stacked on #28771 

ReactDOMCurrentDispatcher has longer property names for various methods.
These methods are only ever called internally and don't need to be
represented with as many characters. This change shortens the names and
aligns them with the hint codes we use in Flight. This alignment is
passive since not all dispatcher methods will exist as flight
instructions but where they can line up it seems reasonable to make them
do so",Josh Story,2024-04-08T20:54:30Z
f4fbeb88038523edfb37646bc9d5314c0f7423ed,"HIR-based AlignReactiveScopesToBlockScopes

ghstack-source-id: ae560a93f24fdbdb4ed73cdd889feb084bb172e5
Pull Request resolved: https://github.com/facebook/react-forget/pull/2822",Joe Savona,2024-04-08T20:48:22Z
9007fdc8f103a5d9247be384791496db9a3be91d,"[DOM] Shrink ReactDOMSharedInternals source representation (#28771)

Stacked on #28751 

ReactDOMSharedInternals uses properties of considerable length to model
mutuable state. These properties are not mangled during minification and
contribute a not insigificant amount to the uncompressed bundle size and
to a lesser degree compressed bundle size.

This change rewrites the DOMInternals in a way that shortens property
names so we can have smaller builds.
It also treats the entire object as a mutable container rather than
having different mutable sub objects.

The same treatment should be given to ReactSharedInternals",Josh Story,2024-04-08T20:39:39Z
14f50ad1554f0adf20fa1b5bc62859ed32be0bc6,"[Flight] Allow lazily resolving outlined models (#28780)

We used to assume that outlined models are emitted before the reference
(which was true before Blobs). However, it still wasn't safe to assume
that all the data will be available because an ""import"" (client
reference) can be async and therefore if it's directly a child of an
outlined model, it won't be able to update in place.

This is a similar problem as the one hit by @unstubbable in #28669 with
elements, but a little different since these don't follow the same way
of wrapping.

I don't love the structuring of this code which now needs to pass a
first class mapper instead of just being known code. It also shares the
host path which is just an identity function. It wouldn't necessarily
pass my own review but I don't have a better one for now. I'd really
prefer if this was done at a ""row"" level but that ends up creating even
more code.

Add test for Blob in FormData and async modules in Maps.",Sebastian Markbåge,2024-04-08T19:40:11Z
01bb3c5632ef47751b0ef78a693cab9102c1ed0d,"[TestUtils] Build limited test-utils (#28782)

We landed a flag to disable test utils in many builds but we need to
fork the entrypoint to make it work with tests properly. This also
removes test-utils implementations from builds that do not support it.
Currently in OSS builds the only thing in test-utils is a reexport of
`act`",Josh Story,2024-04-08T19:27:20Z
6de7733e73152ecb9a0cb8bcf73dcc1c96ca7dde,"feat[devtools]: ship source maps for content scripts and ignore list installHook script (#28730)

## Summary

1. RDT browser extension's content scripts will now ship source maps
(without source in prod, to save some bundle size).
2. `installHook` content script will be ignore listed via `ignoreList`
field in the corresponding source map.
3. Previously, source map for backend file used `x_google_ignoreList`
naming, now `ignoreList`.

## How did you test this change?

1. `ignoreList-test.js`
2. Tested manually that I don't see `installHook` in stack traces when
`console.error` is called.",Ruslan Lesiutin,2024-04-08T17:10:09Z
4c12339ce3fa398050d1026c616ea43d43dcaf4a,"[DOM] move `flushSync` out of the reconciler (#28500)

This PR moves `flushSync` out of the reconciler. there is still an
internal implementation that is used when these semantics are needed for
React methods such as `unmount` on roots.

This new isomorphic `flushSync` is only used in builds that no longer
support legacy mode.

Additionally all the internal uses of flushSync in the reconciler have
been replaced with more direct methods. There is a new
`updateContainerSync` method which updates a container but forces it to
the Sync lane and flushes passive effects if necessary. This combined
with flushSyncWork can be used to replace flushSync for all instances of
internal usage.

We still maintain the original flushSync implementation as
`flushSyncFromReconciler` because it will be used as the flushSync
implementation for FB builds. This is because it has special legacy mode
handling that the new isomorphic implementation does not need to
consider. It will be removed from production OSS builds by closure
though",Josh Story,2024-04-08T16:03:20Z
8e1462e8c471fbec98aac2b3e1326498d0ff7139,"[Fiber] Move updatePriority tracking to renderers (#28751)

Currently updatePriority is tracked in the reconciler. `flushSync` is
going to be implemented reconciler agnostic soon and we need to move the
tracking of this state to the renderer and out of reconciler. This
change implements new renderer bin dings for getCurrentUpdatePriority
and setCurrentUpdatePriority.

I was originally going to have the getter also do the event priority
defaulting using window.event so we eliminate getCur rentEventPriority
but this makes all the callsites where we store the true current
updatePriority on the stack harder to work with so for now they remain
separate.

I also moved runWithPriority to the renderer since it really belongs
whereever the state is being managed and it is only currently exposed in
the DOM renderer.

Additionally the current update priority is not stored on
ReactDOMSharedInternals. While not particularly meaningful in this
change it opens the door to implementing `flushSync` outside of the
reconciler",Josh Story,2024-04-08T15:53:17Z
5bf2323880ec6e00b21d2cbaea98ce9dbf83dbeb,"Fix missing playground snapshot

ghstack-source-id: f2c8a542b525ab8c91beaad6327c128a96d122f6
Pull Request resolved: https://github.com/facebook/react-forget/pull/2827",Lauren Tan,2024-04-08T15:23:29Z
0b3b8a6a354b90fe76a9d82bb34487e5d2f71203,"jsx: Remove unnecessary hasOwnProperty check (#28775)

Follow up to #28768.

The modern JSX runtime (`jsx`) does not need to check if each prop is a
direct property with `hasOwnProperty` because the compiler always passes
a plain object.

I'll leave the check in the old JSX runtime (`createElement`) since that
one can be called manually with any kind of object, and if there were
old user code that relied on this for some reason, it would be using
that runtime.",Andrew Clark,2024-04-08T15:12:40Z
e63918d2cd53b03c19119b475e116d1b45fd0f84,Add Promise as a child test to Flight fixture (#28778),Sebastian Silbermann,2024-04-08T15:06:17Z
9a6cb241504027688c166f7fedba8bd443cb9639,"[ez] Fix comments to be star blocks

ghstack-source-id: 6a9e844a3ba548d3bf2b7373dc023ad42c2e719b
Pull Request resolved: https://github.com/facebook/react-forget/pull/2826",Lauren Tan,2024-04-08T14:55:55Z
0d0f7c2ad178cc546f04bf5b302d0c27609bc3cc,"Update ValidatePreservedManualMemoization severity to
CannotPreserveMemoization

We do need to fix the error location to point to the ""callsite"" rather
than the definition of the useMemo callback, but that aside, even if the
error message were perfect, it's not meant to be actionable to the user.

So let's change the severity to CannotPreserveMemoization. This
preserves the validation, but the eslint plugin won't report it.

ghstack-source-id: 722c88922884de05e89030a7b001bd93e0a2a114
Pull Request resolved: https://github.com/facebook/react-forget/pull/2825",Lauren Tan,2024-04-08T14:55:54Z
1f35f7e320bd2f75421a7d4b0b13cf2a7604a980,"Add new ErrorSeverity.CannotPreserveMemoization

This adds a new category of error where the compiler cannot preserve
memoization exactly how as it was originally authored. We're adding a
new category here because it's not an actionable error, and allows us to
more specifically control whether it's reportable or not.

ghstack-source-id: 9693cd42ca64b980248c6202091bdd4c827e1cd4
Pull Request resolved: https://github.com/facebook/react-forget/pull/2824",Lauren Tan,2024-04-08T14:55:53Z
f86afca090b668d8be10b642750844759768d1ad,docs: fix typo in fixtures/nesting/README.md (#27507),Surav Shrestha,2024-04-06T17:11:19Z
2acfb7b60922bdc8376dd144ca7bc532df78254b,"[Flight] Support FormData from Server to Client (#28754)

We currently support FormData for Replies mainly for Form Actions. This
supports it in the other direction too which lets you return it from an
action as the response. Mainly for parity.

We don't really recommend that you just pass the original form data back
because the action is supposed to be able to clear fields and such but
you could potentially at least use this as the format and could clear
some fields.

We could potentially optimize this with a temporary reference if the
same object was passed to a reply in case you use it as a round trip to
avoid serializing it back again. That way the action has the ability to
override it to clear fields but if it doesn't you get back the same as
you sent.

#28755 adds support for Blobs when the `enableBinaryFlight` is enabled
which allows them to be used inside FormData too.",Sebastian Markbåge,2024-04-05T18:32:18Z
d1547defe34cee6326a61059148afc83228d8ecf,"Fast JSX: Don't clone props object (#28768)

(Unless ""key"" is spread onto the element.)

Historically, the JSX runtime clones the props object that is passed in.
We've done this for two reasons.

One reason is that there are certain prop names that are reserved by
React, like `key` and (before React 19) `ref`. These are not actual
props and are not observable by the target component; React uses them
internally but removes them from the props object before passing them to
userspace.

The second reason is that the classic JSX runtime, `createElement`, is
both a compiler target _and_ a public API that can be called manually.
Therefore, we can't assume that the props object that is passed into
`createElement` won't be mutated by userspace code after it is passed
in.

However, the new JSX runtime, `jsx`, is not a public API — it's solely a
compiler target, and the compiler _will_ always pass a fresh, inline
object. So the only reason to clone the props is if a reserved prop name
is used.

In React 19, `ref` is no longer a reserved prop name, and `key` will
only appear in the props object if it is spread onto the element.
(Because if `key` is statically defined, the compiler will pass it as a
separate argument to the `jsx` function.) So the only remaining reason
to clone the props object is if `key` is spread onto the element, which
is a rare case, and also triggers a warning in development.

In a future release, we will not remove a spread key from the props
object. (But we'll still warn.) We'll always pass the object straight
through.

The expected impact is much faster JSX element creation, which in many
apps is a significant slice of the overall runtime cost of rendering.",Andrew Clark,2024-04-05T17:25:24Z
bfd8da807c75a2d123627415f9eaf2d36ac3ed6a,"Make class prop resolution faster (#28766)

`delete` causes an object (in V8, and maybe other engines) to deopt to a
dictionary instead of a class. Instead of `assign` + `delete`, manually
iterate over all the properties, like the JSX runtime does.

To avoid copying the object twice I moved the `ref` prop removal to come
before handling default props. If we already cloned the props to remove
`ref`, then we can skip cloning again to handle default props.",Andrew Clark,2024-04-05T17:06:39Z
cbb6f2b5461cdce282c7e47b9c68a0897d393383,"[Flight] Support Blobs from Server to Client (#28755)

We currently support Blobs when passing from Client to Server so this
adds it in the other direction for parity - when `enableFlightBinary` is
enabled.

We intentionally only support the `Blob` type to pass-through, not
subtype `File`. That's because passing additional meta data like
filename might be an accidental leak. You can still pass a `File`
through but it'll appear as a `Blob` on the other side. It's also not
possible to create a faithful File subclass in all environments without
it actually being backed by a file.

This implementation isn't great but at least it works. It creates a few
indirections. This is because we need to be able to asynchronously emit
the buffers but we have to ""block"" the parent object from resolving
while it's loading.

Ideally, we should be able to create the Blob on the client early and
then stream in it lazily. Because the Blob API doesn't guarantee that
the data is available synchronously. Unfortunately, the native APIs
doesn't have this. We could implement custom versions of all the data
read APIs but then the blobs still wouldn't work with native APIs. So we
just have to wait until Blob accepts a stream in the constructor.

We should be able to stream each chunk early in the protocol though even
though we can't unblock the parent until they've all loaded. I didn't do
this yet mostly because of code structure and I'm lazy.",Sebastian Markbåge,2024-04-05T16:49:25Z
f33a6b69c6cb406ea0cc51d07bc4d3fd2d8d8744,"Track Owner for Server Components in DEV (#28753)

This implements the concept of a DEV-only ""owner"" for Server Components.
The owner concept isn't really super useful. We barely use it anymore,
but we do have it as a concept in DevTools in a couple of cases so this
adds it for parity. However, this is mainly interesting because it could
be used to wire up future owner-based stacks.

I do this by outlining the DebugInfo for a Server Component
(ReactComponentInfo). Then I just rely on Flight deduping to refer to
that. I refer to the same thing by referential equality so that we can
associate a Server Component parent in DebugInfo with an owner.

If you suspend and replay a Server Component, we have to restore the
same owner. To do that, I did a little ugly hack and stashed it on the
thenable state object. Felt unnecessarily complicated to add a stateful
wrapper for this one dev-only case.

The owner could really be anything since it could be coming from a
different implementation. Because this is the first time we have an
owner other than Fiber, I have to fix up a bunch of places that assumes
Fiber. I mainly did the `typeof owner.tag === 'number'` to assume it's a
Fiber for now.

This also doesn't actually add it to DevTools / RN Inspector yet. I just
ignore them there for now.

Because Server Components can be async the owner isn't tracked after an
await. We need per-component AsyncLocalStorage for that. This can be
done in a follow up.",Sebastian Markbåge,2024-04-05T16:48:52Z
e3ebcd54b98a4f8f5a9f7e63982fa75578b648ed,"Move string ref coercion to JSX runtime (#28473)

Based on:

- #28464

---

This moves the entire string ref implementation out Fiber and into the
JSX runtime. The string is converted to a callback ref during element
creation. This is a subtle change in behavior, because it will have
already been converted to a callback ref if you access element.prop.ref
or element.ref. But this is only for Meta, because string refs are
disabled entirely in open source. And if it leads to an issue in
practice, the solution is to switch to a different ref type, which Meta
is going to do regardless.",Andrew Clark,2024-04-05T14:53:11Z
76bb13cd26717312fc5fc5d4a69b4938e7ce27a9,"First attempt at making the linter work with advanced TypeScript syntax 

First attempt at making the linter work with advanced TypeScript syntax 

Falls back to the babel parser for some advanced syntax like string template 
syntax. 

This is pretty hacky as it doesn't take in any parsing options that are 
configured for the outer ESLint parser, not sure how that could be handled.",Jan Kassens,2024-04-04T22:31:31Z
fd0da3eef1e23b7dd5071fef21de414da8e5038e,"Remove _owner field from JSX elements in prod if string refs are disabled (#28739)

In prod, the `_owner` field is only used for string refs so if we have
string refs disabled, we don't need this field. In fact, that's one of
the big benefits of deprecating them.",Sebastian Markbåge,2024-04-04T15:20:15Z
48b4ecc9012638ed51b275aad24b2086b8215e32,"Remove defaultProps support (except for classes)  (#28733)

This removes defaultProps support for all component types except for
classes. We've chosen to continue supporting defaultProps for classes
because lots of older code relies on it, and unlike function components,
(which can use default params), there's no straightforward alternative.

By implication, it also removes support for setting defaultProps on
`React.lazy` wrapper. So this will not work:

```js
const MyClassComponent = React.lazy(() => import('./MyClassComponent'));
// MyClassComponent is not actually a class; it's a lazy wrapper. So
// defaultProps does not work.
MyClassComponent.defaultProps = { foo: 'bar' };
```

However, if you set the default props on the class itself, then it's
fine.

For classes, this change also moves where defaultProps are resolved.
Previously, defaultProps were resolved by the JSX runtime. This change
is only observable if you introspect a JSX element, which is relatively
rare but does happen.

In other words, previously `<ClassWithDefaultProp />.props.aDefaultProp`
would resolve to the default prop value, but now it does not.",Andrew Clark,2024-04-04T14:59:19Z
7966ccddc8e9a0d9901c40ad556220ea23785088,"Enable stale action (#28729)

Follows #28695

Now that the action has run successfully in debug mode
([logs](https://github.com/facebook/react/actions/runs/8532177618/job/23372921455#step:2:35)),
let's enable it to persist changes.

Also changes the number of operations per run from the default of 30 to
100 since we have a large backlog of issues and PRs to work through.

Finally adds enhancement label as exempt from stale.",Jack Pope,2024-04-04T14:27:29Z
6090cab099a8f7f373e04c7eb2937425a8f80f80,"Use a Wrapper Error for onRecoverableError with a ""cause"" Field for the real Error (#28736)

We basically have four kinds of recoverable errors:

- Hydration mismatches.
- Server errored but client didn't.
- Hydration render errored but client render didn't (in Root or Suspense
boundary).
- Concurrent render errored but synchronous render didn't.

For the first three we log an additional error that the root or Suspense
boundary didn't error. This provides some context about what happened.
However, the problem is that for hydration mismatches that's unnecessary
extra context that is confusing. We also don't log any additional
context for concurrent render errors that could recover. This used to be
the only recoverable error so it didn't need extra context but now we
need to distinguish them. When we log these to `reportError` it's
confusing to just see the error because you didn't see anything error on
the page. It's also hard to group them together as one.

In this PR, I remove the unnecessary context for hydration mismatches.

For hydration and concurrent errors, I now wrap them in an error that
describes that what happened but then use the new `cause` field to link
the original error so we can keep that as the cause. The error that
happened was that hydration client rendered or you deopted to sync
render, the cause of that error is some other error.

For server errors, we control the Error object so I already had added
some context to that error object's message. Since we hide the message
in prod, it's nice not to have the raw message in DEV neither. We could
potentially split these into two errors for parity though.",Sebastian Markbåge,2024-04-04T01:53:07Z
583eb6770d56e9793d3660bd9c6782fdebc93729,"Emit Server Error Prefix in the .stack Property Too (#28738)

Follow up to #28684.

V8 includes the message in the stack and printed errors include just the
stack property which is assumed to contain the message. Without this,
the prefix doesn't get printed in the console.

<img width=""578"" alt=""Screenshot 2024-04-03 at 6 32 04 PM""
src=""https://github.com/facebook/react/assets/63648/d98a2db4-6ebc-4805-b669-59f449dfd21f"">

A possible alternative would be to use a nested error with a `cause`
like #28736 but that would need some more involved serializing since
this prefix is coming from the server. Perhaps as a separate attribute.",Sebastian Markbåge,2024-04-04T01:52:54Z
9a9e03b9150eb1421e74bae912d366cd94494ba2,"Add playground e2e to ci 

This only runs on main since it takes a while to run (about ~4 mins)",Lauren Tan,2024-04-03T22:12:30Z
07a3404c5f1b7bebe8750de9f6be2429b743bbdf,Add basic playwright e2e test to playground,Lauren Tan,2024-04-03T22:12:29Z
ee24e3fc16ee2482c76e22bef85e9e6f5a4b08f0,Dogfood uMC polyfill in playground,Lauren Tan,2024-04-03T22:12:29Z
a5aedd1e15733311d64ccab3fdd14db630067496,"Move console mocks to internal-test-utils (#28710)

Moving this to `internal-test-utils` so I can add helpers in the next PR
for:
- assertLogDev
- assertWarnDev
- assertErrorDev

Which will be exported from `internal-test-utils`. This isn't strictly
necessary, but it makes the factoring nicer, so internal-test-until
doesn't need to depend on `scripts/jest`.",Ricky,2024-04-03T20:02:04Z
20e710aeab3e03809c82d134171986ea270026a0,"Cleanup enableUseRefAccessWarning flag (#28699)

Cleanup enableUseRefAccessWarning flag

I don't think this flag has a path forward in the current
implementation. The detection by stack trace is too brittle to detect
the lazy initialization pattern reliably (see e.g. some internal tests
that expect the warning because they use lazy intialization, but a
slightly different pattern then the expected pattern.

I think a new version of this could be to fully ban ref access during
render with an alternative API for the exceptional cases that today
require ref access during render.",Jan Kassens,2024-04-03T17:35:38Z
3761acb42bf9979314fff130d4d9505408bcb651,"Classes consume ref prop during SSR, too (#28731)

Same as #28719 but for SSR.",Andrew Clark,2024-04-03T16:55:57Z
f33e63838d99aac5efc84a38cde84966f15801a1,"Update copyrights to reference Meta instead of Facebook 

Thanks @zpao!!! This was mostly his work, i just fixed up the last bit.",Joe Savona,2024-04-03T15:43:36Z
7a2609eedc571049a3272e60d5f7d84601ffca3f,"Cleanup enableBigIntSupport flag (#28711)

Cleanup enableBigIntSupport flag",Jan Kassens,2024-04-03T13:25:02Z
4e8121a75ec7fa838fc781cbab418d40218678a9,"Remove @providesModule remnants (#28720)

Remove @providesModule remnants

Removes `@providesModule` from the generated RN modules and CI
validation that no `@providesModule` is added which should no longer be
needed as this has been the case for years now.",Jan Kassens,2024-04-03T13:10:00Z
cb6dc7a6a03ea10a38b84e9e5737739e0d468435,"[FB] use modern entrypoint in tests (#28724)

Removes the entrypoint hack in tests since we gate legacy mode tests now",Josh Story,2024-04-03T05:23:54Z
0846daaa54537d3df212903bf37bab92e44f9c07,"Commit message script captures non-ghstack messages 

Tested by manually passing in the commit message from 
https://github.com/facebook/react-forget/commit/1028504dc809d29992954553d34cf6f55a1fefad 
and verifying that it grabbed the description from GH.",Joe Savona,2024-04-03T03:55:41Z
852301828b505c3e8489fc7faa6d2f60ce921758,Remove reactive_ir crate,Joe Savona,2024-04-03T04:03:25Z
131f020c098c2ffeca1283e281c083f6fc99f1e3,"Enable feature flags for v19 (#28647)

The canary channel now represents v19, so we can turn these flags on.",Andrew Clark,2024-04-03T03:33:13Z
dc545c8d6eaca87c8d5cabfab6e1c768ecafe426,"Fix: Class components should ""consume"" ref prop (#28719)

When a ref is passed to a class component, the class instance is
attached to the ref's current property automatically. This different
from function components, where you have to do something extra to attach
a ref to an instance, like passing the ref to `useImperativeHandle`.

Existing class component code is written with the assumption that a ref
will not be passed through as a prop. For example, class components that
act as indirections often spread `this.props` onto a child component. To
maintain this expectation, we should remove the ref from the props
object (""consume"" it) before passing it to lifecycle methods. Without
this change, much existing code will break because the ref will attach
to the inner component instead of the outer one.

This is not an issue for function components because we used to warn if
you passed a ref to a function component. Instead, you had to use
`forwardRef`, which also implements this ""consuming"" behavior.

There are a few places in the reconciler where we modify the fiber's
internal props object before passing it to userspace. The trickiest one
is class components, because the props object gets exposed in many
different places, including as a property on the class instance.

This was already accounted for when we added support for setting default
props on a lazy wrapper (i.e. `React.lazy` that resolves to a class
component).

In all of these same places, we will also need to remove the ref prop
when `enableRefAsProp` is on.

Closes #28602

---------

Co-authored-by: Jan Kassens <jan@kassens.net>",Andrew Clark,2024-04-03T03:15:04Z
8f55a6aa5739ed8ca80c3066fb54f4ea4cfe600a,"Move ReactDOMLegacy implementation into RootFB (#28656)

Only the FB entry point has legacy mode now so we can move the remaining
code in there.

Also enable disableLegacyMode in modern www builds since it doesn't
expose those entry points.

Now dependent on #28709.

---------

Co-authored-by: Josh Story <story@hey.com>",Sebastian Markbåge,2024-04-03T01:56:23Z
5de8703646cdd3838cb1686f761b10c0692743aa,"Use the disableLegacyMode where ever we check the ConcurrentMode mode (#28657)

Saves some bytes and ensures that we're actually disabling it.

Turns out this flag wasn't disabling React Native/Fabric, React Noop and
React ART legacy modes so those are updated too.

Should be rebased on #28681.",Sebastian Markbåge,2024-04-03T01:07:28Z
5998a775194f491afa5d3badd9afe9ceaf12845e,"Reland #28672: Remove IndeterminateComponent (#28681)

This PR relands #28672 on top of the flag removal and the test
demonstrating a breakage in Suspense for legacy mode.

React has deprecated module pattern Function Components for many years
at this point. Supporting this pattern required React to have a concept
of an indeterminate component so that when a component first renders it
can turn into either a ClassComponent or a FunctionComponent depending
on what it returns. While this feature was deprecated and put behind a
flag it is still in stable. This change remvoes the flag, removes the
warnings, and removes the concept of IndeterminateComponent from the
React codebase.

While removing IndeterminateComponent type Seb and I discovered that we
needed a concept of IncompleteFunctionComponent to support Suspense in
legacy mode. This new work tag is only needed as long as legacy mode is
around and ideally any code that considers this tag will be excludable
from OSS builds once we land extra gates using `disableLegacyMode` flag.",Josh Story,2024-04-03T00:42:43Z
8a43e954a24b65604a9096f38ca43d3b0871ebaf,s/Forget/React Compiler/ in Rust port,Joe Savona,2024-04-02T23:49:31Z
5ec3f02ee59795a50c8720c6c0d334a354b3674a,Rename docs/architecture.md to design_goals per contents,Joe Savona,2024-04-02T23:05:11Z
90dd2084e2e3d3083a09cbf781e14ff2610cba6d,ValidateNoCapitalizedCalls checks capitalized methods,Joe Savona,2024-04-03T15:02:40Z
4c1aae4f3b5a6996823168c23f298eed5ed517c6,[be] Cleanup removed directories from prettier script,Joe Savona,2024-04-03T15:02:39Z
94156d701461399f6d441f74b977e7cb0e204535,Repro for unmemoized value due to assignment to a context variable,Joe Savona,2024-04-03T15:02:38Z
284f7764205f2c707d39ad493b7676f74f980c07,"[be] Clean up already fixed ""bug"" fixtures 

These are already fixed, renamed to clarify that they are just repros of 
previous bugs",Joe Savona,2024-04-02T19:43:44Z
5fcaa0a832db9573364cb73738e0a3b4cf2d27f2,"Make ART Concurrent if Legacy Mode is disabled (#28662)

Pulling this out of #28657.

This runs react-art in concurrent mode if disableLegacyMode is true.
Effectively this means that the OSS version will be in concurrent mode
and the `.modern.js` version for Meta will be in concurrent mode, once
the flag flips for modern, but the `.classic.js` version for Meta will
be in legacy mode.

Updates flowing in from above flush synchronously so that they commit as
a unit. This also ensures that refs are resolved before the parent life
cycles. setStates deep in the tree will now be batched using ""discrete""
priority but should still happen same task.",Sebastian Markbåge,2024-04-02T19:00:30Z
a53f208f5e4dfc3cf7c34a4b51e44c07a9a24880,"Fixture for conditional use() 

This is mostly to ensure we don't flag this as a conditional hook, but since i'm 
here i made it a proper test.",Joe Savona,2024-04-02T18:36:11Z
8b9edafa95f5657cbccb11e4c226abd7953df8f0,"Support use operator 

Implements support for use: 

* Teaches InferReactivePlaces to treat use() result as reactive 

* Teaches FlattenScopesWithHooks to also flatten scopes with use() 

Handles both `use()` and `React.use()`.",Joe Savona,2024-04-02T18:28:01Z
8cb6a1c0347a69ad4c580c5cf5f28d8be544d6d4,"[be] Remove unused, experimental getCacheSignal API (#28706)

Similar to #28698, this removes the `unstable_getCacheSignal()` API
since we don't intend to ship this to stable.",Joseph Savona,2024-04-02T17:54:31Z
e61f9832643ee988a75a49dbf11bc3a52ae3d708,Fix yarn dev,Lauren Tan,2024-04-02T16:18:12Z
5485ed0855dd457f9f1065062911f23aff2264b9,Standardize on banner2 plugin,Lauren Tan,2024-04-02T16:13:41Z
f01f74d9e17c259db9ea2567f49a5138f9851ce5,"Also build react-forget-runtime with rollup 

This adds rollup to the runtime and adds a new plugin to add the license banner 
+ inject the `""use no memo""` directive. We need to inject it there as rollup 
currently strips out unknown directives during bundling.",Lauren Tan,2024-04-02T16:13:40Z
b4eeae6f5d16aa998a5f1fc2493f9d65d27346dc,Share rollup packages across workspace,Lauren Tan,2024-04-02T16:13:39Z
91826d492452a05dd19af53cff29dcf1d37554f9,"Configure rollup to strip comments and whitespace 

For now this configures rollup to strip out comments in DEV builds and 
whitespace. Unfortunately there's no easy way to do this in just terser alone or 
other minifiers/manglers, so I had to add prettier as well to re-format the 
minified code. This does make the build a little bit slower: 

``` before: yarn build  118.96s user 12.38s system 185% cpu 1:10.81 total after: 
 yarn build  121.55s user 12.90s system 183% cpu 1:13.17 total ``` 

Eventually I would like to have a similar setup to React's rollup config where 
we can have DEV and prod builds. After the repo merge we could probably share or 
reuse bits of React's rollup config.",Lauren Tan,2024-04-02T16:13:38Z
48ec17b865f439754fcdaa289ef0aa98f15a05c2,"Differentiate null and undefined in Custom Elements - removing sets to undefined (#28716)

In React DOM, in general, we don't differentiate between `null` and
`undefined` because we expect to target DOM APIs. When we're setting a
property on a Custom Element, in the new heuristic, the goal is to allow
passing whatever data type instead of normalizing it. Switching between
`undefined` and `null` as an explicit value should therefore be
respected.

However, in this mode if `undefined` is used for the initial value, we
don't actually set the property at all. If passing `null` we will now
initialize it to the value `null`. Meaning `undefined` kind of
represents the default.

### Removing Properties

There is a pretty complex edge case which is what should happen when a
prop used to exist but was removed from the props object. This doesn't
have any kind of defined semantics. It really should mean - return to
""default"". Because in the declarative world it means the same as if it
was just created - i.e. we can't just leave it as it was.

The closest might be `delete object.property` but that's not really the
intended way that properties on custom elements / classes are supposed
to operate. Additionally, for a property to even hit our heuristic it
must pass the `in` test and must exist to being with so the default must
have a value.

Since the point of these properties is to contain any kind of type,
there isn't really a conceptual default value. E.g. a numeric default
value might be zero `0` while a default string might be empty `""""` and
default object might `null`. Additionally, the conceptual default can
really be initialized to anything. There's also varied precedence in the
ecosystem here and really no consensus. Anything we pick would be kind
of wrong, so we used to just pick `null`.

_The safest way to consume a Custom Element is to always pass the same
set of props._

JS does have a concept of a ""default value"" though and that is described
as the value `undefined`. That's why default argument / object property
initializers are initialized if the value is `undefined`.

The problem with using `undefined` as value is that [you shouldn't
actually ever set the value of a class property to
`undefined`](https://twitter.com/sebmarkbage/status/1774082540296388752).
A property should always be initialized to some value. It can't be left
missing and shouldn't be initialized to the value `undefined` for hidden
class optimizations. If we just mutate it to be `undefined` it would be
potentially bad for perf and shouldn't really be the value after
removing property - it should be returned to default.

Every property should really have a setter to be useful since it is what
is used to trigger reactivity when it changes. Sometimes you can just
use the properties passively when something else happens but most of the
time it should be a setter but to reach parity with DOM it should really
be always so that the active value can be normalized.

Those setters can have default argument initializers to represent what
the default value should be. Therefore Custom Element properties should
be used like this:

```js
class CustomElement extends HTMLElement {
  _textLabel = '';
  _price = 0;
  _items = null;
  
  constructor() {
    super();
  }
  set textLabel(value = '') {
    this._textLabel = value;
  }
  get textLabel() {
    return this._textLabel;
  }
  set price(value = 0) {
    this._price = value;
  }
  get price() {
    return this._price;
  }
  set items(value = null) {
    this._items = value;
  }
  get items() {
    return this._items;
  }
}
```

The default initializer can be used to initialize a value back to its
original default when `undefined` is passed to it. Therefore, we pass
`undefined`, not because we expect that to be the value of a property
but because that's the value that represents ""return to default"".

This fixes #28203 but not really for the reason specified in the issue.
We don't expect you to actually store the `undefined` value but to use a
setter to set the property to something else that represents the
default. When we initialize the element the first time, we won't set
anything if it's the value `undefined` so we assume that the property
initializers running in the constructor is going to set the same default
value as if we set the property to `undefined`.

cc @josepharhar",Sebastian Markbåge,2024-04-02T15:48:27Z
4ecea96c55a936c208f770e151cc5e3985817c9a,Update RTR readme (#28705),Jack Pope,2024-04-02T15:41:31Z
ba5496d411a2d3067b5aae58b882aa2041807e77,"Hardcode enableLegacyFBSupport flag (#28701)

Hardcode enableLegacyFBSupport flag",Jan Kassens,2024-04-02T15:35:18Z
e3afd026c8d922b008c2759eec48297d518e7634,"Remove reference to deleted <Cache> in un-linted file (#28715)

I missed this in #28698 bc the file isn't linted",Joseph Savona,2024-04-02T15:13:15Z
28fc980ef2c563e3086ae5b0b2e6293de48ae0d4,Cleanup enableNewBooleanProps (#28712),Sebastian Silbermann,2024-04-02T15:09:43Z
7659c4d9e0e4de2ec758c9a03ad7cbf07fc696d0,"Remove dynamic www flag for disableInputAttributeSyncing (#28703)

Remove dynamic www flag for disableInputAttributeSyncing",Jan Kassens,2024-04-02T14:57:23Z
7319c61b18274ee7e7c20bd2e533b93c922d8fe0,"[be] Remove unshipped experimental <Cache> element type (#28698)

Removes the `<Cache />` element type since we're going with a simpler
caching strategy.",Joseph Savona,2024-04-02T14:57:08Z
c97564d7ac3b8ee344719d78e6a28e81854dd7a2,"Upgrade flow to 0.232.0 (#28697)

Upgrade flow to 0.232.0",Jan Kassens,2024-04-02T14:40:03Z
4eb241a94ff42d4226e4f9d6d397f4f8a8fadc8e,"Bump nvmrc to Node.js v18 (#28707)

Bump nvmrc to Node.js v18

Node.js v16 is long deprecated, seems like for v20 there's some more
stuff to fix.",Jan Kassens,2024-04-02T14:04:19Z
f0806c43fe97a0a858416d5caadd01f6b141bed4,Remove flag for enableEarlyReturnInReactiveScopes (always enable),Joe Savona,2024-04-01T22:37:03Z
ef285e0702e7b6a928d6f44480e38a1ddfff976a,Remove memoizeJsxElements flag,Joe Savona,2024-04-01T22:34:42Z
b00300c4cfa1e05321851b061c3eed9ebc8f3f08,Remove disableAllMemoization flag,Joe Savona,2024-04-01T22:18:59Z
69f03dc4c44bca1a0d94151bd1539931ec86aeb0,"Remove unused environment flags 

These flags aren't used anymore",Joe Savona,2024-04-01T22:16:31Z
cd3f56bb18a88562d767d466ecae489fb3c2fb86,"[eslint] Enforce generic array type syntax 

Fix and enforce generic array type syntax",Sathya Gunasekaran,2024-04-02T14:31:25Z
1de6c5aea207ac2beac375aa80287acfcfb567a0,"[eslint] Don't lint generated files 

drive by fix multi line comments in .eslintrc",Sathya Gunasekaran,2024-04-02T11:03:26Z
ba661c80f3716eaaf8845b480a9d4558d0fb7e4a,Remove comments in builds,Lauren Tan,2024-04-02T14:32:24Z
4e6aa4277329dc41a8970751bcce0a1fdc107840,"Upgrade to typescript 5.4.3 

This PR makes all packages share the same typescript version and updates us to 
latest versions of typescript, ts-node, typescript-eslint/eslint-plugin and 
typescript-eslint/parser. 

I also noticed that the tsconfig we were extending (node18-strictest) was 
deprecated, so I switched us over to one that's more up to date. 

Also had to make a couple of small changes to the playground so that continues 
to build correctly.",Lauren Tan,2024-04-02T14:32:23Z
5516cbb7089c8c42b79f2eb169ec2eb271ae0765,[ez] Fix unneeded path in copyright script,Lauren Tan,2024-04-02T14:32:22Z
0af58d6c9ed22f5784010a5bc72974e21d82f664,[ez] Clean up unused test filters,Lauren Tan,2024-04-02T14:32:21Z
d5b6e584fbca6ae7dbdda8d2bbf16cf0af3831d4,"[hir] Add support for directives 

Previously, we would drop directives inside a component or hook but this is 
problematic with reanimated which uses `'worklet'` to mark components from 
compilation. 

This PR adds a directive to HIRFunction and ReactiveFunction and codegens the 
directive add the end. No processing is done on the directives themselves. 

Babel seems to store the directives on a BlockStatement, rather than on the 
Function but I've stored it on the Function types because we only support 
compiling functions and the spec defines directives as occuring in the initial 
statement list of a function: > A Directive Prologue is the longest sequence of 
ExpressionStatements > occurring as the initial StatementListItems or 
ModuleItems of a > FunctionBody, a ScriptBody, or a ModuleBody and where each > 
ExpressionStatement in the sequence consists entirely of a > StringLiteral token 
followed by a semicolon.",Sathya Gunasekaran,2024-04-02T10:25:10Z
1c3313707f78caadd72869eca481f418b68b7f15,ReactiveTerminal: add loc and id to all variants,Joe Savona,2024-04-01T22:03:47Z
6e650109999e5f483fcb910ff20fe8148a566cb2,"[tests] Disallow unasserted console.log (#28708)

Followup from https://github.com/facebook/react/pull/28693 and
https://github.com/facebook/react/pull/28680.

In CI, we fail the test for any unasserted console.log. In DEV, we don't
fail, but you can still use the matchers and we'll assert on them.",Ricky,2024-04-01T21:45:49Z
832285fed2aaaff58001539a5eebe6d580cb280a,"Only create mutable ranges for phis *mutated* later 

This PR was the result of a long chain of ~yak-shaving~ debugging kicked off as 
a result of fixing up invariants. Where this started was that i noticed some 
cases of loops where the first instance we saw of a reactive scope was after its 
starting instruction. Eg instruction N would have an operand with scope 
Start:End, where Start was _before_  N. One of the cases involved a phi with a 
backedge. Then i noticed that we assign scopes differently for phis with and 
without backedges: 

``` 

[1] let x0 = init; 

[2] if (x0 < limit) { 

[3] x1 += increment; 

} 

x2 = phi(x0, x1); 

[4] x2; 

``` 

The phi isn't mutated _or_ reassigned after its creation, so we don't assign a 
mutable range to the phi or any of its operands. We also don't create a scope 
for `x`. 

But change the `if` to a `while` and now the phi moves - now there's a backedge: 

``` 

[1] let x0 = init; 

[2] while (x0 < limit) { 

x2 = phi(x0, x2); // now this is ""mutated"" later!!! 

[3] x2 += increment; 

} 

[4] x2; 

``` 

What was happening here is that x2 has a mutable range which is ""after"" the phi 
instruction, so it would appear that the phi was actually being mutated later. 
Ie, this was treated equivalently to the original ""if"" version, but with a 
mutation: 

``` 

let x = []; 

if (cond) { 

x = {}; 

} 

mutate(x); // later mutation of the phi 

``` 

But these latter two cases are different! We only need to (should) create a 
mutable range for a phi _if its value is actually mutated_. If it's just being 
reassigned, well then it shouldn't matter if there are back edges or not. 

So this PR implements that intuition: only create a mutable range for a phi if 
it is actually _mutated_ later, ie don't assign a mutable range if it is only 
_reassigned_ later. Concretely in InferMutableRanges: 

* InferMutableLifetimes no longer has to initialize a range for phis during the 
first pass (inferMutableRangesForStores=false). We wait to see if the phi is 
mutated during the main fixpoint iteration of InferMutableRanges 

* The main fixpoint iteration in InferMutableRanges already aliases phi operands 
if the phi is later mutated, which will extend the end of the mutable range of 
all the operands accordingly. 

* Finally, InferMutableLifetimes's second run 
(inferMutableRangesForStores=true), we ensure that any phis mutated later have a 
valid mutable range, specifically setting the `start` of the range since the 
fixpoint only updates the `end` value.",Joe Savona,2024-04-01T21:21:48Z
8833338c8f929281cd1f2d39e11dd2b5e0739f10,"Convert deprecated stalebot to github action (#28695)

## Summary

This repo uses [Stalebot](https://github.com/probot/stale) to manage
stale Issues and PRs. Stalebot hasn't been maintained for a couple of
years and is officially archived. The number of open Issues and PRs has
increased rapidly since early 2022. Some of this looks like issues with
Stalebot reliability where labels were not applied or close actions were
not taken even when meeting the criteria in the config.

In order to make it easier for maintainers to spend time on current
Issues and PRs, let's upgrade to the Github Stale Action. For now this
PR applies the same config to the new action but we can iterate on it as
needed. The goal is to clean up abandoned and no-longer-relevant
submissions, not to close Issues that describe active bugs or feedback.

## How did you test this change?

Added `debug-only: 'true'` to this PR so we can run the action and
review the logs before allowing the action to run on schedule. We may
see a large amount of label changes and close actions on the first run
as the action clears out previously ignored stale submissions.",Jack Pope,2024-04-01T18:32:28Z
5ab97b73457e2da72749322a1925a970a967f3bc,"Land useModernStrictMode in www (#28696)

this has landed",Ricky,2024-04-01T17:05:08Z
93f91795a0c71bae4aadd7f082b91de0068a0f91,"[Flight] Update stale blocked values in `createModelResolver` (#28669)

Alternative to #28620.

Instead of emitting lazy references to not-yet-emitted models in the
Flight Server, this fixes the observed issue in
https://github.com/unstubbable/ai-rsc-test/pull/1 by adjusting the lazy
model resolution in the Flight Client to update stale blocked root
models, before assigning them as chunk values. In addition, the element
props are not outlined anymore in the Flight Server to avoid having to
also handle their staleness in blocked elements.

fixes #28595",Hendrik Liebau,2024-04-01T16:37:27Z
95e6f032cf59f27b41e150e8a7746ee689acf634,"Clarify RTR native feature flags are fb specific (#28679)

Make it more clear that these flags aren't used in RN OSS.
- Rename
`packages/shared/forks/ReactFeatureFlags.test-renderer.native.js` to
`packages/shared/forks/ReactFeatureFlags.test-renderer.native-fb.js`
- Remove RN OSS build cases consuming the feature flags since there is
no RN OSS RTR build.",Jack Pope,2024-04-01T14:56:28Z
496fd3da5aa39733f772918004401f59e315cfa2,"[ESLint] Update README links to react.dev (#28692)

Update ESLint plugin README to redirect to https://react.dev for more
details (instead of legacy docs)",Jean-François Greffier,2024-04-01T14:52:34Z
e9ae2c8f352289a8c942b4271b9afe7af68dd5c0,"Clean up console.log tests (#28693)

Followups to https://github.com/facebook/react/pull/28680

One of these test don't need to use `console.log`. 

The others are specifically testing `console.log` behavior, so I added a
comment.",Ricky,2024-04-01T14:50:48Z
df95577db0d1d7ca383f281bc1d9e6ba5579bef2,"Finish cleaning up digest from onRecoverableError (#28686)

Don't need to track it separately on the captured value anymore.

Shouldn't be in the types.

I used a getter for the warning instead because Proxies are kind of
heavy weight options for this kind of warning. We typically use getters.",Sebastian Markbåge,2024-03-30T22:32:20Z
9f835e69ab1c87192b5da4421519b69785c12f69,Suppress console output in unit tests (#28680),Timothy Yung,2024-03-30T16:36:23Z
b9149cc6e6442389accf1f7c34a77ba2e6e52b5e,"Include regular stack trace in serialized errors from Fizz (#28684)

We previously only included the component stack.
    
Cleaned up the fields in Fizz server that wasn't using consistent hidden
classes in dev vs prod.

Added a prefix to errors serialized from server rendering. It can be a
bit confusing to see where this error came from otherwise since it
didn't come from elsewhere on the client. It's really kind of confusing
with other recoverable errors that happen on the client too.",Sebastian Markbåge,2024-03-30T15:08:54Z
5d4b7587da52dd81bc5c366b909c4511e2970cd1,"Don't let error boundaries catch errors during hydration (#28675)

When an error boundary catches an error during hydration it'll try to
render the error state which will then try to hydrate that state,
causing hydration warnings.

When an error happens inside a Suspense boundary during hydration, we
instead let the boundary catch it and restart a client render from
there. However, when it's in the root we instead let it fail the root
and do the sync recovery pass. This didn't consider that we might hit an
error boundary first so this just skips the error boundary in that case.

We should probably instead let the root do a concurrent client render in
this same pass instead to unify with Suspense boundaries.",Sebastian Markbåge,2024-03-29T20:43:22Z
2aed507a76a0b1524426c398897cbe47d80c51e5,"Remove React.createFactory (#27798)

`React.createFactory` has been long deprecated. This removes it for the
next release.",Jan Kassens,2024-03-29T20:29:48Z
13f35433bca9fc08fc7c4ab001f39c982cbde051,"Mock modules in tests using `Module` (#28678)

## Summary

Fixes a type validation error introduced in newer versions of Node.js
when calling `Module.prototype._compile` in our unit tests. (I tried but
have yet to pinpoint the precise change in Node.js that introduced this
vaildation.)

The specific error that currently occurs when running unit tests with
Node.js v18.16.1:

```
TypeError: The ""mod"" argument must be an instance of Module. Received an instance of Object

      80 |
      81 |     if (useServer) {
    > 82 |       originalCompile.apply(this, arguments);
         |                       ^
      83 |
      84 |       const moduleId: string = (url.pathToFileURL(filename).href: any);
      85 |
```

This fixes the type validation error by mocking modules using `new
Module()` instead of plain objects.

## How did you test this change?

Ran the unit tests successfully:

```
$ node --version
v18.16.1

$ yarn test
```",Timothy Yung,2024-03-29T20:19:54Z
6cd6ba703de77e332ab201518b6e30e47cd49aaf,"Land enableNewBooleanProps everywhere (#28676)

Rolled out internally. Removing flag.",Jack Pope,2024-03-29T20:02:32Z
425f72bdd4263dcaba829cf52545309bbfde56b4,"Align React Native OSS/Test Feature Flags (#28677)

## Summary

Makes a few changes to align React Native feature flags for open source
and internal test renderer configurations.

* Enable `enableSchedulingProfiler` for profiling builds.
* Align `ReactFeatureFlags.test-renderer.native.js` (with
`ReactFeatureFlags.native-fb.js`).
  * Enable `enableUseMemoCacheHook`.
  * Enable `enableFizzExternalRuntime`.
  * Disable `alwaysThrottleRetries`.

## How did you test this change?

Ran the following successfully:

```
$ yarn test
$ yarn flow native
$ yarn flow fabric
```",Timothy Yung,2024-03-29T19:47:00Z
23b32d3f8d273c87f114ad3ec2dcd44d16a5c624,"Test for ReactTestRenderer (#28674)

This is a repro for a breakage that #28672 would introduce for legacy
sync rendering.",Jan Kassens,2024-03-29T18:01:45Z
18812b645c93a9c42f931fae57bbbab9c1f402b8,"Warn when using useFormState (#28668)

## Overview

useFormState has been replaced with useActionState. Warn when it's used.

Also removes the `experimental_useFormState` warnings.",Ricky,2024-03-29T17:40:54Z
19c7c2929be68f87cfa6b7947c4ab9ffc5608e48,"Revert ""Remove zoom from special cases list"" (#28673)

Reverts facebook/react#26631

This got specced: https://github.com/w3c/csswg-drafts/pull/9699

I left msZoom because it seems plausible someone will still be using it
for backwards compat.",Sophie Alpert,2024-03-29T17:39:12Z
eb510a33048fabd95d272b1c0b65f941e2909240,"Land enableCustomElementPropertySupport for React 19 (#27450)

We've rolled out this flag internally on WWW. This PR removed flag
`enableCustomElementPropertySupport`

Test plan:
 -- `yarn test`

Co-authored-by: Ricky Hanlon <rickhanlonii@gmail.com>",Andrey Lunyov,2024-03-29T17:06:07Z
8d2cd323a449e49ef041227dfe8d9f9d2ad2f395,"Include package.json when bundling for oss 

This was causing issues for an external partner's build pipeline which expected 
each package to have its own package.json.",Lauren Tan,2024-03-29T16:19:04Z
a73c3450e1b528fa6cb3e94fa4d4359c7a4b61f1,"Remove module pattern function component support (flag only) (#28671)

Remove module pattern function component support (flag only)

> This is a redo of #27742, but only including the flag removal,
excluding further simplifications.

The module pattern

```
function MyComponent() {
  return {
    render() {
      return this.state.foo
    }
  }
}
```

has been deprecated for approximately 5 years now. This PR removes
support for this pattern.",Jan Kassens,2024-03-29T15:16:17Z
f2690747239533fa266612d2d4dd9ae88ea92fbc,"Revert ""Remove module pattern function component support"" (#28670)

This breaks internal tests, so must be something in the refactor. Since
it's the top commit let's revert and split into two PRs, one that
removes the flag and one that does the refactor, so we can find the bug.",Ricky,2024-03-29T14:10:11Z
5656d5f078ee071ccd564e59d21d9a30d89e7f0a,[config] Change compiler defaults to prepare for oss,Mofei Zhang,2024-03-29T13:31:09Z
cc56bed38cbe5a5c76dfdc4e9c642fab4884a3fc,"Remove module pattern function component support (#27742)

The module pattern

```
function MyComponent() {
  return {
    render() {
      return this.state.foo
    }
  }
}
```

has been deprecated for approximately 5 years now. This PR removes
support for this pattern. It also simplifies a number of code paths in
particular related to the concept of `IndeterminateComponent` types.",Josh Story,2024-03-28T20:08:08Z
63651c49e068a04cdc6ee1e2fa9c6125167987d2,"Noop unstable_batchedUpdates (#28120)

## Overview

`unstable_batchedUpdates` is effectively a no-op outside of legacy mode,
this PR makes it an actual no-op outside legacy mode.",Ricky,2024-03-28T18:15:37Z
78328c0c4d70c9b9ee4ad2d6a2319c95e628dd2d,"Add support for preload media to ReactDOM (#28635)

This PR adds support for `media` option to `ReactDOM.preload()`, which
is needed when images differ between screen sizes (for example mobile vs
desktop)",Marius Craciunoiu,2024-03-28T17:04:59Z
05797ccebd285999343ab4fb94eb542f84be23b1,"s/form state/action state (#28631)

Rename internals from ""form state"" to ""action state""",Ricky,2024-03-28T15:34:24Z
299a9c0598576f7dba170771b1c0b821281b1e15,"[Fiber] Remove the digest property from errorInfo passed to onRecoverableError (#28222)

Removes the digest property from errorInfo passed to onRecoverableError
when handling an error propagated from the server. Previously we warned
in Dev but still provided the digest on the errorInfo object. This
change removes digest from error info but continues to warn if it is
accessed. The reason for retaining the warning is the version with the
warning was not released as stable but we will include this deprecated
removal in our next major so we should communicate this change at
runtime.",Josh Story,2024-03-28T15:01:35Z
9d20aa2819d5d0a6e56e49183b7e9b8e9f3dccc7,Don't compile node_modules on playground,Lauren Tan,2024-03-28T14:46:56Z
7748ce8f3ff89065b7c25622873f86e3693a5667,Update compiler naming in remaining error text,Lauren Tan,2024-03-28T14:40:05Z
df5ff9753a7d338b90c57a1d1471fb01fb405870,Fix jest script,Lauren Tan,2024-03-28T14:40:05Z
f4229cdb7fd53cf95bdb79209fa86f4216701c9b,Rename error type,Lauren Tan,2024-03-28T14:40:04Z
638f8e3ddc9a73036d527dfc396e21fa8862a20f,Remove [ReactForget] prefix from error messages,Lauren Tan,2024-03-28T14:40:03Z
e10a7b5cd541882a78ff659147c1a0294413ccb0,"Don't log onRecoverableError if the current commit fail (#28665)

We didn't recover after all.

Currently we might log a recoverable error in the recovery pass. E.g.
the SSR server had an error. Then the client component fails to render
which errors again. This ends up double logging.

So if we fail to actually complete a fully successful commit, we ignore
any recoverable errors because we'll get real errors logged.

It's possible that this might cover up some other error that happened at
the same time.",Sebastian Markbåge,2024-03-28T14:39:49Z
323b6e98a76fe6ee721f10d327a9a682334d1a97,"Remove errorHydratingContainer (#28664)

I originally added this in #21021 but I didn't mention why and I don't
quite remember why. Maybe because there were no other message? However
at the time the recoverable errors mechanism didn't exist.

Today I believe all cases where this happens will trigger another
recoverable error. Namely these two:


https://github.com/facebook/react/blob/9f33f699e4f832971dc0f2047129f832655a3b6d/packages/react-reconciler/src/ReactFiberBeginWork.js#L1442-L1446


https://github.com/facebook/react/blob/9f33f699e4f832971dc0f2047129f832655a3b6d/packages/react-reconciler/src/ReactFiberBeginWork.js#L2962-L2965

Therefore this is just an extra unnecessary log.",Sebastian Markbåge,2024-03-28T03:48:18Z
51668692046ebd997d93c45a91f7cc1ca1479fac,"[patch] Fix control flow bug in PropagateScopeDeps 

A dependency D from either an instruction or scope is poisoned if there may be a 
(non-linear) jump instruction between it and the start of its immediate parent 
scope. Poisoned dependencies are added as conditional dependencies to their 
parent scope. 

(done: reduce false positives in scopes that begin after return/throw) (done: 
fix bugs in recording and joining exhaustive conditional deps) (done: flesh out 
commit message, clean up PR, add more fixtures) 

--- \## Bug details: 

Take a simple example: ```js target: {   instrA;   if (...) {     instrB;     
break target;   } else {     instrC;   }   instrD;   // ... } instrE; // ... ``` 

This diagram shows how we represent this program in the reactive IR. - Blocks 
are represented as a list of nodes. - Green nodes show instructions and value 
blocks (simplified as a single instruction). - Pink nodes show terminals, which 
transfer control to a subtree of nodes. <img width=""450"" alt=""image"" 
src=""https://github.com/facebook/react-forget/assets/34200447/930789f2-39cd-4ea8-b12a-530042807b46""> 

Prior to this PR, PropagateReactiveScopeDeps was incorrect because it assumed 
that a block's instructions are evaluated unconditionally (which is how HIR 
basic blocks work). E.g. if a reactive scope enclosed `block 1`, we assume that 
`instrA` and `instrD` both will evaluate unconditionally. 

This failed to account for `jump` instructions like break, continue, return, and 
throw. This may result in invalid hoisting of PropertyLoads (i.e. Forget output 
may throw when source does not throw). Note that other terminals (e.g. if and 
loops) are not affected as they are self contained subtrees that evaluate 
sequentially. 

With the changes in this PR, we mark `block 1` as poisoned upon encountering the 
`break` instruction. While `block 1` is active and poisoned, it will determine 
how visited dependencies are added. 

Here, added solid lines show unconditional dependencies, dashed lines show 
conditionally accessed dependencies: - dependencies from `instrB, instrC` are 
conditional because they are within conditional subtrees - dependencies from 
`instrD` are conditional because it is within a poisoned block within its parent 
scope. 

<img width=""450"" alt=""image"" 
src=""https://github.com/facebook/react-forget/assets/34200447/81980f68-7e65-4bd7-ba94-3f0c26550e5c""> 

--- Recapping an offline discussion with @josephsavona: this pass would really 
benefit from operating on HIR. The minimal work needed for this pass to run on 
HIR is to rewrite and reorder  `AlignReactiveScopesToBlockScopes` to operate on 
HIR. 

The following diagram shows what HIR blocks look like for the same code. 
Evaluating hoistable PropertyLoad dependencies for a scope enclosing 
`instr{A-D}` is much simpler:  just evaluate whether the PropertyLoad evaluates 
for every path between `bb0` and `bb4`. <img width=""250"" alt=""image"" 
src=""https://github.com/facebook/react-forget/assets/34200447/44b38939-defb-4b29-878d-4445ec6ccc06""> 

---",Mofei Zhang,2024-03-28T00:26:18Z
b98b569017c1fd896159ba2430faadcf03d7bf70,"[DeriveMinimalDeps] Account for conditional / poisoned accesses within 
conditionals 

This change is needed for #2752. To minimize renaming `error.fixture` -> 
`fixture` files, I'm reordering this PR to earlier in the stack. 

Prior to the fix in #2752, we only expected unconditional accesses within 
`depsInCurrentConditional`, which records instructions directly within a 
conditional block (not including nested conditional blocks).",Mofei Zhang,2024-03-28T00:26:18Z
2782fa2664784d7c3c941aa708349e570418103d,"[rhir] Preserve block labels + target blockIds for break/continue terminals 

RFC: we can either retain break/continue target ids (instead of pruning them in 
`buildReactiveFunction`) or re-implement the same logic in `propagateScopeDeps` 
(ignore implicit breaks; match unlabeled break / continues to their closest loop 
/ while parent terminal). 

If we go ahead with this approach, I'll clean up this PR (add relevant types and 
comments)",Mofei Zhang,2024-03-28T00:26:17Z
877c490fa3ab5ea23d5b35a55a9139d8a200a6ba,[visitors] Visit loop body before update,Mofei Zhang,2024-03-28T00:26:16Z
1515cb32182e48c25369673607abb76ba773bab6,[be][sprout] Add ErrorBoundary to test exceptions in sequentialRenders,Mofei Zhang,2024-03-28T00:26:15Z
4d37a599e302ec11647c75b9cedfce52922256b8,[be][tests] Move PropagateScopeDep fixtures to separate directory,Mofei Zhang,2024-03-28T00:26:14Z
a37f242f593c685f0a71a8ff35d9f0ebd4e8391a,[be][DeriveMinimalDeps] Check current assumptions for conditional control flow,Mofei Zhang,2024-03-28T00:26:13Z
fd3ae0ca0a548df5e77b16bf993dd7cc4feb4fe3,"[type] Conservatively type return values from reanimated 

Typing them as mixed read only seems safe because the fields are primitives but 
lets be conservative and type as Poly.",Sathya Gunasekaran,2024-03-28T12:32:25Z
0a3d1c3d31ce83d18906357c29381e722cbec8b4,"Add type defs for reanimated 

The reanimated babel plugin specifically looks for args to their hooks that are 
callbacks, then it workletizes the body of that callback so it can run on the 
main thread. 

But, forget extracts that callback into a temporary variable and then replaces 
the previously inlined callback as an identifier, so that breaks reanimated's 
babel plugin. so what happens is some of the previously workletized functions no 
longer do after forget runs, which throws a runtime error about a non-worklet 
function running on the main thread. 

Reanimated expects this: ``` const animatedGProps = useAnimatedProp(function () 
{ ... }) ``` 

But forget does this: ``` const t0 =function () { ... } const animatedGProps = 
useAnimatedProp(t0) ``` 

With the type definitions, Forget no longer assumes the args to reanimated APIs 
escape so Forget does not memoize and they stay as is.",Sathya Gunasekaran,2024-03-28T12:26:22Z
a6c6855dd12b0e3fb40b6b987e6c7ad60045c026,"[be] Remove unused properties arg from addHook 

This is never used by any caller.",Sathya Gunasekaran,2024-03-28T12:26:22Z
9f33f699e4f832971dc0f2047129f832655a3b6d,"Dymanic favorSafetyOverHydrationPerf (#28663)

For rollout",Ricky,2024-03-27T21:43:25Z
9ad40b1440a2c0b61530f3710e5dae3847611b9c,"[react-dom] Remove `findDOMNode` from OSS builds (#28267)

In the next major `findDOMNode` is being removed. This PR removes the
API from the react-dom entrypoints for OSS builds and re-exposes the
implementation as part of internals.

`findDOMNode` is being retained for Meta builds and so all tests that
currently use it will continue to do so by accessing it from internals.
Once the replacement API ships in an upcoming minor any tests that were
using this API incidentally can be updated to use the new API and any
tests asserting `findDOMNode`'s behavior directly can stick around until
we remove it entirely (once Meta has moved away from it)",Josh Story,2024-03-27T21:43:12Z
8436bcca6287077a5409b3c9180f8af0361b16a5,"[Fizz][Legacy] Remove renderToNodeStream (#28607)

Stacked on #28606 

renderToNodeStream has been deprecated since React 18 with a warning
indicating users should upgrade to renderToPipeableStream. This change
removes renderToNodeStream",Josh Story,2024-03-27T19:02:36Z
2b036d3f1f016fbe8b121d223d96f09e785b97e1,Deprecate `act` from `react-dom/test-utils` in favor of act from `react` (#28597),Sebastian Silbermann,2024-03-27T15:28:01Z
ec4d26ceb8bbb622188c858b6b3d1a5f1e86f2f7,ReactDOM: Remove every test-util except `act()` (#28541),Sebastian Silbermann,2024-03-27T15:04:56Z
4cc0f8ee609068739308d03bac75b5d38f016f73,Remove orphaned disableJavaScriptURLs reference (#28660),Sebastian Silbermann,2024-03-27T13:53:42Z
a0537160771bafae90c6fd3154eeead2f2c903e7,"Make onUncaughtError and onCaughtError Configurable (#28641)

Stacked on #28627.

This makes error logging configurable using these
`createRoot`/`hydrateRoot` options:

```
onUncaughtError(error: mixed, errorInfo: {componentStack?: ?string}) => void
onCaughtError(error: mixed, errorInfo: {componentStack?: ?string, errorBoundary?: ?React.Component<any, any>}) => void
onRecoverableError(error: mixed, errorInfo: {digest?: ?string, componentStack?: ?string}) => void
```

We already have the `onRecoverableError` option since before.

Overriding these can be used to implement custom error dialogs (with
access to the `componentStack`).

It can also be used to silence caught errors when testing an error
boundary or if you prefer not getting logs for caught errors that you've
already handled in an error boundary.

I currently expose the error boundary instance but I think we should
probably remove that since it doesn't make sense for non-class error
boundaries and isn't very useful anyway. It's also unclear what it
should do when an error is rethrown from one boundary to another.

Since these are public APIs now we can implement the
ReactFiberErrorDialog forks using these options at the roots of the
builds. So I unforked those files and instead passed a custom option for
the native and www builds.

To do this I had to fork the ReactDOMLegacy file into ReactDOMRootFB
which is a duplication but that will go away as soon as the FB fork is
the only legacy root.",Sebastian Markbåge,2024-03-27T04:51:37Z
9f8daa6cb5aae476cf54611874ea7522243c6ba6,"[Breaking] Remove disableJavaScriptURLs (#28615)

## Overview

This has landed, so we can remove the flag

## Changelog

This change blocks using javascript URLs such as:

```html
<a href=""javascript:notfine"">p0wned</a>
```

We previously announced dropping support for this via a warning:

> A future version of React will block javascript: URLs as a security
precaution. Use event handlers instead if you can. If you need to
generate unsafe HTML try using dangerouslySetInnerHTML instead.",Ricky,2024-03-27T03:45:34Z
6786563f3cbbc9b16d5a8187207b5bd904386e53,"[Fiber] Don't Rethrow Errors at the Root (#28627)

Stacked on top of #28498 for test fixes.

### Don't Rethrow

When we started React it was 1:1 setState calls a series of renders and
if they error, it errors where the setState was called. Simple. However,
then batching came and the error actually got thrown somewhere else.
With concurrent mode, it's not even possible to get setState itself to
throw anymore.

In fact, all APIs that can rethrow out of React are executed either at
the root of the scheduler or inside a DOM event handler.
If you throw inside a React.startTransition callback that's sync, then
that will bubble out of the startTransition but if you throw inside an
async callback or a useTransition we now need to handle it at the hook
site. So in 19 we need to make all React.startTransition swallow the
error (and report them to reportError).

The only one remaining that can throw is flushSync but it doesn't really
make sense for it to throw at the callsite neither because batching.
Just because something rendered in this flush doesn't mean it was
rendered due to what was just scheduled and doesn't mean that it should
abort any of the remaining code afterwards. setState is fire and forget.
It's send an instruction elsewhere, it's not part of the current
imperative code.

Error boundaries never rethrow. Since you should really always have
error boundaries, most of the time, it wouldn't rethrow anyway.

Rethrowing also actually currently drops errors on the floor since we
can only rethrow the first error, so to avoid that we'd need to call
reportError anyway. This happens in RN events.

The other issue with rethrowing is that it logs an extra console.error.
Since we're not sure that user code will actually log it anywhere we
still log it too just like we do with errors inside error boundaries
which leads all of these to log twice.
The goal of this PR is to never rethrow out of React instead, errors
outside of error boundaries get logged to reportError. Event system
errors too.

### Breaking Changes

The main thing this affects is testing where you want to inspect the
errors thrown. To make it easier to port, if you're inside `act` we
track the error into act in an aggregate error and then rethrow it at
the root of `act`. Unlike before though, if you flush synchronously
inside of act it'll still continue until the end of act before
rethrowing.

I expect most user code breakages would be to migrate from `flushSync`
to `act` if you assert on throwing.

However, in the React repo we also have `internalAct` and the
`waitForThrow` helpers. Since these have to use public production
implementations we track these using the global onerror or process
uncaughtException. Unlike regular act, includes both event handler
errors and onRecoverableError by default too. Not just render/commit
errors. So I had to account for that in our tests.

We restore logging an extra log for uncaught errors after the main log
with the component stack in it. We use `console.warn`. This is not yet
ignorable if you preventDefault to the main error event. To avoid
confusion if you don't end up logging the error to console I just added
`An error occurred`.

### Polyfill

All browsers we support really supports `reportError` but not all test
and server environments do, so I implemented a polyfill for browser and
node in `shared/reportGlobalError`. I don't love that this is included
in all builds and gets duplicated into isomorphic even though it's not
actually needed in production. Maybe in the future we can require a
polyfill for this.

### Follow Ups

In a follow up, I'll make caught vs uncaught error handling be
configurable too.

---------

Co-authored-by: Ricky Hanlon <rickhanlonii@gmail.com>",Sebastian Markbåge,2024-03-27T03:44:07Z
5910eb34567a8699d1faa73b546baafd94f26411,"Add Flag to Favor Hydration Performance over User Safety (#28655)

If false, this ignores text comparison checks during hydration at the
risk of privacy safety.

Since React 18 we recreate the DOM starting from the nearest Suspense
boundary if any of the text content mismatches. This ensures that if we
have nodes that otherwise line up correctly such as if they're the same
type of Component but in a different order, then we don't accidentally
transfer state or attributes to the wrong one.

If we didn't do this e.g. attributes like image src might not line up
with the text. E.g. you might show the wrong profile picture with the
wrong name. However, the main reason we do this is because it's a
security/privacy concern if state from the original node can transfer to
the other one. For example if you start typing into a text field to
reply to a story but then it turns out that the hydration was in a
different order, you might submit that text into a different story than
you intended. Similarly, if you've already clicked an item and that gets
replayed using Action replaying or is synchronously force hydrated -
that click might end up applying to a different item in the list than
you intended. E.g. liking the wrong photo.

Unfortunately a common case where this happens is when Google Translate
is applied to a page. It'll always cause mismatches and recreate the
tree. Most of the time this wouldn't be visible to users because it'd
just recreate to the same thing and then translate again. It can affect
metrics that trace when this hydration happened though.

Meta can use this flag to decide if they favor this perf metric over the
risk to user privacy.

This is similar to the old enableClientRenderFallbackOnTextMismatch flag
except this flag doesn't patch up the text when there's a mismatch.
Because we don't have the patching anymore. The assumption is that it is
safe to ignore the safety concern because we assume it's a match and
therefore favoring not patching it will lead to better perf.",Sebastian Markbåge,2024-03-27T02:52:46Z
2ec2aaea98588178525f83495669e11e96815a00,"Add Diffs to Hydration Warnings (#28512)

Stacked on #28502.

This builds on the mechanism in #28502 by adding a diff of everything
we've collected so far to the thrown error or logged error.

This isn't actually a longest common subsequence diff. This means that
there are certain cases that can appear confusing such as a node being
added/removed when it really would've appeared later in the list. In
fact once a node mismatches, we abort rendering so we don't have the
context of what would've been rendered. It's not quite right to use the
result of the recovery render because it can use client-only code paths
using useSyncExternalStore which would yield false differences. That's
why diffing the HTML isn't quite right.

I also present abstract components in the stack, these are presented
with the client props and no diff since we don't have the props that
were on the server. The lack of difference might be confusing but it's
useful for context.

The main thing that's data new here is that we're adding some siblings
and props for context.

Examples in the [snapshot
commit](https://github.com/facebook/react/pull/28512/commits/e14532fd8df858a319d3eca687d83227209a498c).",Sebastian Markbåge,2024-03-27T00:02:18Z
f7aa5e0aa3e2aa51279af4b6cb5413912cacd7f5,"Move Hydration Mismatch Errors to Throw or Log Once (Kind of) (#28502)

Stacked on #28476.

We used to `console.error` for every mismatch we found, up until the
error we threw for the hydration mismatch.

This changes it so that we build up a set of diffs up until we either
throw or complete hydrating the root/suspense boundary. If we throw, we
append the diff to the error message which gets passed to
onRecoverableError (which by default is also logged to console). If we
complete, we append it to a `console.error`.

Since we early abort when something throws, it effectively means that we
can only collect multiple diffs if there were preceding non-throwing
mismatches - i.e. only properties mismatched but tag name matched.

There can still be multiple logs if multiple siblings Suspense
boundaries all error hydrating but then they're separate errors
entirely.

We still log an extra line about something erroring but I think the goal
should be that it leads to a single recoverable or console.error.

This doesn't yet actually print the diff as part of this message. That's
in a follow up PR.",Sebastian Markbåge,2024-03-27T00:01:41Z
4b8dfd6215bf855402ae1a94cb0ae4f467afca9a,"Move Hydration Warnings from the DOM Config into the Fiber reconciliation (#28476)

Stacked on #28458.

This doesn't actually really change the messages yet, it's just a
refactor.

Hydration warnings can be presented either as HTML or React JSX format.
If presented as HTML it makes more sense to make that a DOM specific
concept, however, I think it's actually better to present it in terms of
React JSX.

Most of the time the errors aren't going to be something messing with
them at the HTML/HTTP layer. It's because the JS code does something
different. Most of the time you're working in just React. People don't
necessarily even know what the HTML form of it looks like. So this takes
the approach that the warnings are presented in React JSX in their rich
object form.

Therefore, I'm moving the approach to yield diff data to the reconciler
but it's the reconciler that's actually printing all the warnings.",Sebastian Markbåge,2024-03-26T23:04:18Z
bb66aa3cef4e42aee790200d03cf7a82659da121,"Use concurrent root in RTR (#28498)

Based on
- https://github.com/facebook/react/pull/28497
- https://github.com/facebook/react/pull/28419

Reusing the disableLegacyMode flag, we set ReactTestRenderer to always
render with concurrent root where legacy APIs are no longer available.
If disableLegacyMode is false, we continue to allow the
unstable_isConcurrent option determine the root type.

Also checking a global `IS_REACT_NATIVE_TEST_ENVIRONMENT` so we can
maintain the existing behavior for RN until we remove legacy root
support there.",Jack Pope,2024-03-26T22:53:09Z
1f9befef5c6045c6f65f5c667d83fbe6ab025d81,"Remove react-test-renderer/shallow export (#28497)

Based on
- https://github.com/facebook/react/pull/28419

## Summary

The shallow renderer was extracted from the repo years ago and published
by enzyme: https://github.com/enzymejs/react-shallow-renderer

We no longer need to reexport under the react-test-renderer namespace.
People can import `react-shallow-renderer` as needed

## How did you test this change?

- Observe shallow.js in react-test-renderer package from standard build
- Run build with changes on this branch
- Observe no more shallow.js export in build output",Jack Pope,2024-03-26T22:04:47Z
84c84d72f11ff1961a103b3cd59919876e48f759,"Remove enableClientRenderFallbackOnTextMismatch flag (#28458)

Build on top of #28440.

This lets us remove the path where updates are tracked on differences in
text.",Sebastian Markbåge,2024-03-26T21:55:14Z
f73d11f0923ace72b867bec6a9f48930c3a4b9b6,"[RTR] Enable warning flag (#28419)

## Summary

Based on
- https://github.com/facebook/react/pull/27903

This PR
- Silence warning in React tests
- Turn on flag

We want to finish cleaning up internal RTR usage, but let's prioritize
the deprecation process. We do this by silencing the internal warning
for now.

## How did you test this change?

`yarn build`
`yarn test ReactHooksInspectionIntegration -b`",Jack Pope,2024-03-26T21:44:31Z
670d61bea23470e980ba13c1c8441e375779b0b8,"Remove legacy hydration mode (#28440)

While Meta is still using legacy mode and we can't remove completely,
Meta is not using legacy hydration so we should be able to remove that.

This is just the first step. Once removed, we can vastly simplify the
DOMConfig for hydration.

This will have to be rebased when tests are upgraded.",Sebastian Markbåge,2024-03-26T21:41:49Z
dbfbfb3312db019183ef92fd2ef110cc7d807e80,"Update error messages (#28652)

## Overview

The error messages that say:

> ReactDOM.hydrate is no longer supported in React 18

Don't make sense in the React 19 release. Instead, they should say:

> ReactDOM.hydrate was removed in React 19.

For legacy mode, they should say:

> ReactDOM.hydrate has not been supported since React 18.",Ricky,2024-03-26T21:25:53Z
f24cf4a1af4e677dd85fce66001eee42b75b1cf7,"Remove zoom from special cases list (#26631)

Looks like [it's getting removed
anyway](https://groups.google.com/a/chromium.org/g/blink-dev/c/V7q43bgutbo/m/-7jneTl8CQAJ?pli=1).

Maybe should wait for a major though.",Sebastian Markbåge,2024-03-26T21:19:02Z
1a6d36b1a3ec43cb5700e28d7315b3aa2822365d,Remove unmountComponentAtNode outside of legacy mode (#28650),Ricky,2024-03-26T20:32:43Z
91f7bc8be7837ded7664220a30e447a8aae5b87b,"Ensure valid mutable ranges for all scopes; fix ranges for context vars 

Our current validation fails to detect some invalid cases of mutable ranges — 
namely, ranges that are fully or partially uninitialized, with start or 
start+end still set to zero. 

This PR fixes these cases, starting by validating that the ranges for _all_ 
reactive scopes are valid: start >= 1, and end <= (last instr id + 1). This 
exposed the invalid cases, which are also fixed here: 

* During AnalyzeFunctions, we need to reset identifier ranges and scopes when 
exiting an inner function. This has to happen *after* the effects have been 
translated to the function deps/context operands, in order for 
InferRefenceEffects to continue working on the outer function. Previously I did 
this at the start of InferReactiveScopeVariables, but that's insufficient bc the 
incorrect ranges could also influence InferMutableRanges. AnalyzeFunctions is 
the point at which we compute the ranges for identifiers in the inner function, 
so it's the most ideal place to clean those up so they don't influence the outer 
function. 

* In InferMutableLifetimes, we need to ensure that context variable identifiers 
end up with a mutable range starting where they are declared, and ending with 
their last assignment. We now track declarations and extend their mutable range 
to account for each reassignment.",Joe Savona,2024-03-26T20:29:24Z
56efb2e2271492288b1ba37c247df2a65d9046b7,"Bump canary versions to v19-canary (#28646)

This bumps the canary versions to v19 to communicate that the next
release will be a major. Once this lands, we can start merging breaking
changes into `main`.",Andrew Clark,2024-03-26T19:31:57Z
738993da0b32508e275627d60ace58d972af464b,"Turn on enableRenderableContext in experimental (#28645)

Let's get this into experimental to get more usage and allow other
renderers to test against the changes easier.",Jack Pope,2024-03-26T18:17:43Z
0a444356748ec1619acfbb60f9b112451c709343,"Add useActionState to CHANGELOG-canary.md (#28632)

Co-authored-by: Sébastien Lorber <slorber@users.noreply.github.com>",Ricky,2024-03-26T17:15:08Z
6fd0cb9a9feeccea2f70d993dc2d53f11cab0b5d,"Cleanup `alwaysThrottleDisappearingFallbacks` Flag (#28639)

## Summary

After realizing that this feature flag is entangled with
`alwaysThrottleRetries`, we're going to undo
https://github.com/facebook/react/pull/28550

## How did you test this change?

```
$ yarn test
$ yarn flow dom-browser
$ yarn flow dom-fb
$ yarn flow fabric
```",Timothy Yung,2024-03-26T17:01:38Z
95319ab5afd384f5858f7c080573b9736e6b2f9c,"Switch facebook-www build version to file content hash (#28633)

Unifies the React version string pattern with RN just to simplify the
build script a tiny bit and not have 2 mechanisms for the Meta-internal
build.",Jan Kassens,2024-03-26T16:13:46Z
c3048aab4c3346dca90ab0052a89fdb48450570f,"Fix tests on main (#28643)

Not sure how these broke when merging
https://github.com/facebook/react/pull/28299 and
https://github.com/facebook/react/pull/28361",Ricky,2024-03-26T15:26:42Z
75de4ff72aa8b53a0af1f6b1f23e338329069c74,"fix[devtools/ci]: split profiling cache test for different react versions and toEqual checker (#28628)

This should fix the failing backwards-compatibility tests on CI:
-
https://app.circleci.com/pipelines/github/facebook/react/51347/workflows/9d319db5-7a29-4e9a-a3a0-8d49a24ee9bd/jobs/809381
-
https://app.circleci.com/pipelines/github/facebook/react/51347/workflows/9d319db5-7a29-4e9a-a3a0-8d49a24ee9bd/jobs/809386

Started failing after https://github.com/facebook/react/pull/27991.

Brief summary:
1. Revert changes to `profilingCache-test` in
https://github.com/facebook/react/pull/27991.
2. Scope previous test to react versions 16.9 - 18.2
3. Add a new test for react versions > 18.2 (includes testing react from
souce), which is also gated with `!disableLegacyContext`.

> [!IMPORTANT]
> `@gate` pragma expects the test to throw. Jest doesn't throw any
exceptions when snapshots are mismatched, this is why I've migrated test
from `toMatchInlineSnapshot` checker to `toEqual`.
> If the test doesn't throw, we will fail it manually:
>
https://github.com/facebook/react/blob/5a75f9e78544fa6d052aff7fe99607e48f35b979/scripts/jest/setupTests.js#L291-L295",Ruslan Lesiutin,2024-03-26T10:55:07Z
fbd68eef7f8fad5dd1fdceb0fb79162c3d972e59,"Fix for invalid mutable range in phi with backedge 

Fixes the repro added in 947832009997bf9149e88e583c46cc39f6a6136c - previously 
when computing mutable ranges of phis, we didn't check that all operands had 
been visited. This meant that a backedge could allow a phi's mutable range to 
start at 0. Then in PropagateScopeDeps, we might see reject dependencies of a 
scope since they appeared to start after a scope — only because the scope's 
start was incorrectly too early. 

The fix here is to initially set phi.id mutable ranges based on only on operands 
that are already visited. Then, during/after the fixpoint iteration of 
InferMutableRanges, we start account for all operands since we know they've been 
visited at least once and have a real range.",Joe Savona,2024-03-26T04:36:33Z
07def0cc5a377fc36c410b85112fdc51485ecc11,"Add test for throttling suspended siblings (#28361)

# Overview

Adds a test to show the combination of the new throttling behavior and
not pre-rendering siblings results in pushing out content that could
have rendered much faster.

- Without the new throttling, the sibling content would render in 30ms.
- Without removing pre-rendering, the sibling content would render in
0ms.
- With both, the sibling content takes 600ms.

## Example


https://github.com/facebook/react/assets/2440089/abd62dc4-93f9-4b7b-a5aa-b795827c1a3a",Ricky,2024-03-26T04:02:46Z
67e6fa6d17b52e0f7d759e6079b49b9b164cf9ba,"Test for suspending with modern strict mode (#28513)

## Overview

Adds a test to show the cause of an infinite loop in Relay related to
[these effects in
Relay](https://github.com/facebook/relay/blob/448aa67d2a11e7d45cd7b4492b9f599b498cb39e/packages/react-relay/relay-hooks/useLazyLoadQueryNode.js#L77-L104)
and `useModernStrictMode`. The bug is related to effect behavior when
committing trees that re-suspend after initial mount.

With `useModernStrictEffect`, when you:
- initial mount
- update
- suspend (to fallbacks)
- resolve
- re-commit

We fire strict effects during the second mount, like it's a new tree.
This creates weird cases, where if there was an update while we
suspended, we'll first fire only the effects that changed dependencies,
and then fire strict effects.

Creating a test to demonstrate the behavior to see if it's a bug.",Ricky,2024-03-26T04:02:16Z
d3037405c4c9ce8158ef9017e960ec97fb089df4,"Test showing mismatches after suspending force fallbacks to be shown (#28299)

While investigating https://github.com/facebook/react/issues/28285 I
found a possible bug in handling Suspense and mismatches. As the tests
show, if the first sibling in a boundary suspends, and the second has a
mismatch, we will NOT show a fallback. If the first sibling is a
mismatch, and the second sibling suspends, we WILL show a fallback.

[Here's a stackbliz showing the behavior on
Canary](https://stackblitz.com/edit/stackblitz-starters-bh3snf?file=src%2Fstyle.css,public%2Findex.html,src%2Findex.tsx).

This breakage was introduced by:
https://github.com/facebook/react/pull/26380. Before this PR, we would
not show a fallback in either case. That PR makes it so that we don't
pre-render siblings of suspended trees, so presumably, whatever
detection we had to avoid fallbacks on mismatches, requires knowing
there's a mismatch in the tree when we suspend.",Ricky,2024-03-26T00:33:31Z
48ecaf92d51813a1b1f1bcba1cdcbf48a501f2c6,"Reset scopes from AnalyzeFunctions in InferReactiveScopeVariables 

Updates InferReactiveScopeVariables to first prune scopes attached during 
AnalyzeFunctions. This ensures that after this pass the only scopes that exist 
on identifiers in the outer program are those that the pass explicitly inferred, 
and not accidentally leftover.",Joe Savona,2024-03-25T22:31:23Z
29ab0f835e199d8f943b8a68634533c24fe74324,"Repro for scopes from AnalyzeFunction influencing outer compilation 

We share identifiers between outer functions and inner function expressions, 
which means that scopes inferred during AnalyzeFunctions can be retained on 
Identifiers in the outer function. If InferReactiveScopeVariables doesn't happen 
to visit an identifier we currently retain that scope information and use it 
when constructing scopes, even if there doesn't technically need to be a scope 
for that value. 

Fixed in the next PR.",Joe Savona,2024-03-25T22:31:22Z
e6ce5e49229ac410b35809a37b209ef3bd747202,[eslint] Update devDep to match types,Lauren Tan,2024-03-25T19:00:34Z
15abd38911585ce82a3eb4f55530b3aacf2ac754,"Cleanup unused eslint-browser and js-fuzzer packages 

These were never used, so let's clean them up",Lauren Tan,2024-03-25T19:00:31Z
5a75f9e78544fa6d052aff7fe99607e48f35b979,"Make enableBigIntSupport a dynamic flag for Meta (#28617)

Make enableBigIntSupport a dynamic flag for Meta

Should be an easy launch, but let's make this a dynamic flag to be safe.",Jan Kassens,2024-03-25T17:48:22Z
50cdf158d81a799763818308baf86c7db17d0931,"Bump webpack-dev-middleware from 5.3.3 to 5.3.4 in /fixtures/flight (#28618)

Bumps
[webpack-dev-middleware](https://github.com/webpack/webpack-dev-middleware)
from 5.3.3 to 5.3.4.
<details>
<summary>Release notes</summary>
<p><em>Sourced from <a
href=""https://github.com/webpack/webpack-dev-middleware/releases"">webpack-dev-middleware's
releases</a>.</em></p>
<blockquote>
<h2>v5.3.4</h2>
<h3><a
href=""https://github.com/webpack/webpack-dev-middleware/compare/v5.3.3...v5.3.4"">5.3.4</a>
(2024-03-20)</h3>
<h3>Bug Fixes</h3>
<ul>
<li><strong>security:</strong> do not allow to read files above (<a
href=""https://redirect.github.com/webpack/webpack-dev-middleware/issues/1779"">#1779</a>)
(<a
href=""https://github.com/webpack/webpack-dev-middleware/commit/189c4ac7d2344ec132a4689e74dc837ec5be0132"">189c4ac</a>)</li>
</ul>
</blockquote>
</details>
<details>
<summary>Changelog</summary>
<p><em>Sourced from <a
href=""https://github.com/webpack/webpack-dev-middleware/blob/v5.3.4/CHANGELOG.md"">webpack-dev-middleware's
changelog</a>.</em></p>
<blockquote>
<h3><a
href=""https://github.com/webpack/webpack-dev-middleware/compare/v5.3.3...v5.3.4"">5.3.4</a>
(2024-03-20)</h3>
<h3>Bug Fixes</h3>
<ul>
<li><strong>security:</strong> do not allow to read files above (<a
href=""https://redirect.github.com/webpack/webpack-dev-middleware/issues/1779"">#1779</a>)
(<a
href=""https://github.com/webpack/webpack-dev-middleware/commit/189c4ac7d2344ec132a4689e74dc837ec5be0132"">189c4ac</a>)</li>
</ul>
</blockquote>
</details>
<details>
<summary>Commits</summary>
<ul>
<li><a
href=""https://github.com/webpack/webpack-dev-middleware/commit/86071ead69e946ada25497d3e281923e885229a4""><code>86071ea</code></a>
chore(release): 5.3.4</li>
<li><a
href=""https://github.com/webpack/webpack-dev-middleware/commit/189c4ac7d2344ec132a4689e74dc837ec5be0132""><code>189c4ac</code></a>
fix(security): do not allow to read files above (<a
href=""https://redirect.github.com/webpack/webpack-dev-middleware/issues/1779"">#1779</a>)</li>
<li>See full diff in <a
href=""https://github.com/webpack/webpack-dev-middleware/compare/v5.3.3...v5.3.4"">compare
view</a></li>
</ul>
</details>
<br />


[![Dependabot compatibility
score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=webpack-dev-middleware&package-manager=npm_and_yarn&previous-version=5.3.3&new-version=5.3.4)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)

Dependabot will resolve any conflicts with this PR as long as you don't
alter it yourself. You can also trigger a rebase manually by commenting
`@dependabot rebase`.

[//]: # (dependabot-automerge-start)
[//]: # (dependabot-automerge-end)

---

<details>
<summary>Dependabot commands and options</summary>
<br />

You can trigger Dependabot actions by commenting on this PR:
- `@dependabot rebase` will rebase this PR
- `@dependabot recreate` will recreate this PR, overwriting any edits
that have been made to it
- `@dependabot merge` will merge this PR after your CI passes on it
- `@dependabot squash and merge` will squash and merge this PR after
your CI passes on it
- `@dependabot cancel merge` will cancel a previously requested merge
and block automerging
- `@dependabot reopen` will reopen this PR if it is closed
- `@dependabot close` will close this PR and stop Dependabot recreating
it. You can achieve the same result by closing it manually
- `@dependabot show <dependency name> ignore conditions` will show all
of the ignore conditions of the specified dependency
- `@dependabot ignore this major version` will close this PR and stop
Dependabot creating any more for this major version (unless you reopen
the PR or upgrade to it yourself)
- `@dependabot ignore this minor version` will close this PR and stop
Dependabot creating any more for this minor version (unless you reopen
the PR or upgrade to it yourself)
- `@dependabot ignore this dependency` will close this PR and stop
Dependabot creating any more for this dependency (unless you reopen the
PR or upgrade to it yourself)
You can disable automated security fix PRs for this repo from the
[Security Alerts
page](https://github.com/facebook/react/network/alerts).

</details>

Signed-off-by: dependabot[bot] <support@github.com>
Co-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>",dependabot[bot],2024-03-25T17:37:11Z
b35be36fb4a3fb3713ecb252f20ca1050a29122f,"Bump webpack-dev-middleware from 5.3.3 to 5.3.4 (#28621)

Bumps
[webpack-dev-middleware](https://github.com/webpack/webpack-dev-middleware)
from 5.3.3 to 5.3.4.
<details>
<summary>Release notes</summary>
<p><em>Sourced from <a
href=""https://github.com/webpack/webpack-dev-middleware/releases"">webpack-dev-middleware's
releases</a>.</em></p>
<blockquote>
<h2>v5.3.4</h2>
<h3><a
href=""https://github.com/webpack/webpack-dev-middleware/compare/v5.3.3...v5.3.4"">5.3.4</a>
(2024-03-20)</h3>
<h3>Bug Fixes</h3>
<ul>
<li><strong>security:</strong> do not allow to read files above (<a
href=""https://redirect.github.com/webpack/webpack-dev-middleware/issues/1779"">#1779</a>)
(<a
href=""https://github.com/webpack/webpack-dev-middleware/commit/189c4ac7d2344ec132a4689e74dc837ec5be0132"">189c4ac</a>)</li>
</ul>
</blockquote>
</details>
<details>
<summary>Changelog</summary>
<p><em>Sourced from <a
href=""https://github.com/webpack/webpack-dev-middleware/blob/v5.3.4/CHANGELOG.md"">webpack-dev-middleware's
changelog</a>.</em></p>
<blockquote>
<h3><a
href=""https://github.com/webpack/webpack-dev-middleware/compare/v5.3.3...v5.3.4"">5.3.4</a>
(2024-03-20)</h3>
<h3>Bug Fixes</h3>
<ul>
<li><strong>security:</strong> do not allow to read files above (<a
href=""https://redirect.github.com/webpack/webpack-dev-middleware/issues/1779"">#1779</a>)
(<a
href=""https://github.com/webpack/webpack-dev-middleware/commit/189c4ac7d2344ec132a4689e74dc837ec5be0132"">189c4ac</a>)</li>
</ul>
</blockquote>
</details>
<details>
<summary>Commits</summary>
<ul>
<li><a
href=""https://github.com/webpack/webpack-dev-middleware/commit/86071ead69e946ada25497d3e281923e885229a4""><code>86071ea</code></a>
chore(release): 5.3.4</li>
<li><a
href=""https://github.com/webpack/webpack-dev-middleware/commit/189c4ac7d2344ec132a4689e74dc837ec5be0132""><code>189c4ac</code></a>
fix(security): do not allow to read files above (<a
href=""https://redirect.github.com/webpack/webpack-dev-middleware/issues/1779"">#1779</a>)</li>
<li>See full diff in <a
href=""https://github.com/webpack/webpack-dev-middleware/compare/v5.3.3...v5.3.4"">compare
view</a></li>
</ul>
</details>
<br />


[![Dependabot compatibility
score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=webpack-dev-middleware&package-manager=npm_and_yarn&previous-version=5.3.3&new-version=5.3.4)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)

Dependabot will resolve any conflicts with this PR as long as you don't
alter it yourself. You can also trigger a rebase manually by commenting
`@dependabot rebase`.

[//]: # (dependabot-automerge-start)
[//]: # (dependabot-automerge-end)

---

<details>
<summary>Dependabot commands and options</summary>
<br />

You can trigger Dependabot actions by commenting on this PR:
- `@dependabot rebase` will rebase this PR
- `@dependabot recreate` will recreate this PR, overwriting any edits
that have been made to it
- `@dependabot merge` will merge this PR after your CI passes on it
- `@dependabot squash and merge` will squash and merge this PR after
your CI passes on it
- `@dependabot cancel merge` will cancel a previously requested merge
and block automerging
- `@dependabot reopen` will reopen this PR if it is closed
- `@dependabot close` will close this PR and stop Dependabot recreating
it. You can achieve the same result by closing it manually
- `@dependabot show <dependency name> ignore conditions` will show all
of the ignore conditions of the specified dependency
- `@dependabot ignore this major version` will close this PR and stop
Dependabot creating any more for this major version (unless you reopen
the PR or upgrade to it yourself)
- `@dependabot ignore this minor version` will close this PR and stop
Dependabot creating any more for this minor version (unless you reopen
the PR or upgrade to it yourself)
- `@dependabot ignore this dependency` will close this PR and stop
Dependabot creating any more for this dependency (unless you reopen the
PR or upgrade to it yourself)
You can disable automated security fix PRs for this repo from the
[Security Alerts
page](https://github.com/facebook/react/network/alerts).

</details>

Signed-off-by: dependabot[bot] <support@github.com>
Co-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>",dependabot[bot],2024-03-25T17:36:03Z
527ed72bfd9f5c0045da468ad01db968a9961ad7,"Cleanup enableFormActions flag (#28614)

Cleanup enableFormActions flag",Jan Kassens,2024-03-25T17:25:14Z
70302048a0eff4efcd3d0324b2387bd7945be0c0,Update yarn.lock,Sathya Gunasekaran,2024-03-25T16:41:13Z
e373190faf3b994707f09488c1a7832f4a91e15a,Guard against legacy context not being supported in DevTools fixture (#28596),Sebastian Silbermann,2024-03-25T13:30:08Z
0711ff17638ed41f9cdea712a19b92f01aeda38f,"Add Type: Feature Request to stalebot ignore (#28625)

Prevent issues like https://github.com/facebook/react/issues/12525 from
closing due to inactivity.",Ricky,2024-03-24T16:48:12Z
2ce112dbf2442c87f89b649e31dd132c170d64fd,"Repro for missing dep with while/if using externally declared ""index"" variable 

What happens here is that the phi node for `i` has its mutable range set to 
start at 0, because it has a back edge and we haven't initialized the mutable 
ranges of all its operands yet when we iterate the operands and set range.start 
= min(start of operand starts). 

Then the corresponding scope has its range set to start at 0 too. When 
PropagateScopeDeps runs it sees that `b` is from instruction 1, which is after 
the start of the scope (0), so it thinks `b` isn't a valid dependency. 

The fix is in InferMutableRanges, where we need to make sure that phis ignore 
their operand's ranges until those ranges are initialized.",Joe Savona,2024-03-23T04:49:39Z
db7e7c7fae69e54fee8751b10790827e2dea0ac2,"Support method call when validating useEffect 

Treat MethodCall similarly to CallExpression when validation useEffect",Sathya Gunasekaran,2024-03-22T23:42:27Z
1f45b13fda8a1fea5691d9fcc5ab2c5dca469857,Update yarn.lock,Lauren Tan,2024-03-22T22:59:44Z
200d2c379dd3acb024ec0b2ef9d649bb1d149bdd,Fix for loops with value block index initial value,Joe Savona,2024-03-22T21:51:36Z
f4ff1a28e714a2d013615a142257523ea9da17cf,Fix for destructuring with partial context variables,Joe Savona,2024-03-22T21:32:50Z
73fa712108dcd7b1a103291650087f561be613b4,Repro for destructuring with partial context variables,Joe Savona,2024-03-22T21:32:47Z
d7d82e7bee33dbfbc4ef5aedcced57fa628b8b2a,"Correct eslint-plugin-react-compiler dependencies 

Correct eslint-plugin-react-compiler dependencies 

- The eslint plugin doesn't actually depend on the babel plugin as it compiles 
in the dependencies. - `zod` and `zod-validation-error` were missing, but 
required to run the plugin. - Update to the `hermes-parser` dependency just to 
keep it updated.",Jan Kassens,2024-03-22T21:03:30Z
4575c8a5f6cb2bc006d586a1a0c025d677a62c99,"Detect hoisting where the reference is a reassignment 

Our logic to detect hoisting relies on Babel's `isReferencedIdentifier()` to 
determine whether a reference to an identifier is a reference or a declaration. 
The idea is that we want to find references to variables that may be hoistable, 
before the declaration — the definition of hoisting. But due to the bug in 
isReferencedIdentifier, we skipped over reassignments of hoisted variables. The 
hack here checks if an identifier is a direct child of an AssignmentExpression, 
ensuring we visit reassignments.",Joe Savona,2024-03-22T20:49:50Z
fb0f7e5c39c01ee726205746439ecd7a1ceedb75,"Repro for closures reassigning hoisted let variables 

Adds examples for closures that reassign hoisted let bindings. We currently 
compile these as context variables without hoisting, so we hit an invariant in 
InferReferenceEffects when the variable is referenced before being declared.",Joe Savona,2024-03-22T18:53:29Z
e7d0c81d13a0358916bcb4db5a5ad944098e482a,"Add todo for for loops with context iterator variable 

Detect the previous case — for loops where the iterator is a context variables — 
and throw a todo rather than hitting the invariant.",Joe Savona,2024-03-22T18:46:28Z
f09e1599d631051a559974578a6d4c06effd95eb,"Fix test after merge conflict (#28616)

Something went wrong when rebasing #28491  and renaming the hook.",Jan Kassens,2024-03-22T18:05:55Z
5c65b27587c0507d66a84e055de948fc62d471d4,"Add `React.useActionState` (#28491)

## Overview

_Depends on https://github.com/facebook/react/pull/28514_

This PR adds a new React hook called `useActionState` to replace and
improve the ReactDOM `useFormState` hook.

## Motivation

This hook intends to fix some of the confusion and limitations of the
`useFormState` hook.

The `useFormState` hook is only exported from the `ReactDOM` package and
implies that it is used only for the state of `<form>` actions, similar
to `useFormStatus` (which is only for `<form>` element status). This
leads to understandable confusion about why `useFormState` does not
provide a `pending` state value like `useFormStatus` does.

The key insight is that the `useFormState` hook does not actually return
the state of any particular form at all. Instead, it returns the state
of the _action_ passed to the hook, wrapping it and returning a
trackable action to add to a form, and returning the last returned value
of the action given. In fact, `useFormState` doesn't need to be used in
a `<form>` at all.

Thus, adding a `pending` value to `useFormState` as-is would thus be
confusing because it would only return the pending state of the _action_
given, not the `<form>` the action is passed to. Even if we wanted to
tie them together, the returned `action` can be passed to multiple
forms, creating confusing and conflicting pending states during multiple
form submissions.

Additionally, since the action is not related to any particular
`<form>`, the hook can be used in any renderer - not only `react-dom`.
For example, React Native could use the hook to wrap an action, pass it
to a component that will unwrap it, and return the form result state and
pending state. It's renderer agnostic.

To fix these issues, this PR:
- Renames `useFormState` to `useActionState`
- Adds a `pending` state to the returned tuple
- Moves the hook to the `'react'` package

## Reference

The `useFormState` hook allows you to track the pending state and return
value of a function (called an ""action""). The function passed can be a
plain JavaScript client function, or a bound server action to a
reference on the server. It accepts an optional `initialState` value
used for the initial render, and an optional `permalink` argument for
renderer specific pre-hydration handling (such as a URL to support
progressive hydration in `react-dom`).

Type:

```ts
function useActionState<State>(
        action: (state: Awaited<State>) => State | Promise<State>,
        initialState: Awaited<State>,
        permalink?: string,
    ): [state: Awaited<State>, dispatch: () => void, boolean];
```

The hook returns a tuple with:
- `state`: the last state the action returned
- `dispatch`: the method to call to dispatch the wrapped action
- `pending`: the pending state of the action and any state updates
contained

Notably, state updates inside of the action dispatched are wrapped in a
transition to keep the page responsive while the action is completing
and the UI is updated based on the result.

## Usage

The `useActionState` hook can be used similar to `useFormState`:

```js
import { useActionState } from ""react""; // not react-dom

function Form({ formAction }) {
  const [state, action, isPending] = useActionState(formAction);

  return (
    <form action={action}>
      <input type=""email"" name=""email"" disabled={isPending} />
      <button type=""submit"" disabled={isPending}>
        Submit
      </button>
      {state.errorMessage && <p>{state.errorMessage}</p>}
    </form>
  );
}
```

But it doesn't need to be used with a `<form/>` (neither did
`useFormState`, hence the confusion):

```js
import { useActionState, useRef } from ""react"";

function Form({ someAction }) {
  const ref = useRef(null);
  const [state, action, isPending] = useActionState(someAction);

  async function handleSubmit() {
    // See caveats below
    await action({ email: ref.current.value });
  }

  return (
    <div>
      <input ref={ref} type=""email"" name=""email"" disabled={isPending} />
      <button onClick={handleSubmit} disabled={isPending}>
        Submit
      </button>
      {state.errorMessage && <p>{state.errorMessage}</p>}
    </div>
  );
}
```

## Benefits

One of the benefits of using this hook is the automatic tracking of the
return value and pending states of the wrapped function. For example,
the above example could be accomplished via:

```js
import { useActionState, useRef } from ""react"";

function Form({ someAction }) {
  const ref = useRef(null);
  const [state, setState] = useState(null);
  const [isPending, setIsPending] = useTransition();

  function handleSubmit() {
    startTransition(async () => {
      const response = await someAction({ email: ref.current.value });
      setState(response);
    });
  }

  return (
    <div>
      <input ref={ref} type=""email"" name=""email"" disabled={isPending} />
      <button onClick={handleSubmit} disabled={isPending}>
        Submit
      </button>
      {state.errorMessage && <p>{state.errorMessage}</p>}
    </div>
  );
}
```

However, this hook adds more benefits when used with render specific
elements like react-dom `<form>` elements and Server Action. With
`<form>` elements, React will automatically support replay actions on
the form if it is submitted before hydration has completed, providing a
form of partial progressive enhancement: enhancement for when javascript
is enabled but not ready.

Additionally, with the `permalink` argument and Server Actions,
frameworks can provide full progressive enhancement support, submitting
the form to the URL provided along with the FormData from the form. On
submission, the Server Action will be called during the MPA navigation,
similar to any raw HTML app, server rendered, and the result returned to
the client without any JavaScript on the client.

## Caveats
There are a few Caveats to this new hook:
**Additional state update**: Since we cannot know whether you use the
pending state value returned by the hook, the hook will always set the
`isPending` state at the beginning of the first chained action,
resulting in an additional state update similar to `useTransition`. In
the future a type-aware compiler could optimize this for when the
pending state is not accessed.

**Pending state is for the action, not the handler**: The difference is
subtle but important, the pending state begins when the return action is
dispatched and will revert back after all actions and transitions have
settled. The mechanism for this under the hook is the same as
useOptimisitic.

Concretely, what this means is that the pending state of
`useActionState` will not represent any actions or sync work performed
before dispatching the action returned by `useActionState`. Hopefully
this is obvious based on the name and shape of the API, but there may be
some temporary confusion.

As an example, let's take the above example and await another action
inside of it:

```js
import { useActionState, useRef } from ""react"";

function Form({ someAction, someOtherAction }) {
  const ref = useRef(null);
  const [state, action, isPending] = useActionState(someAction);

  async function handleSubmit() {
    await someOtherAction();

    // The pending state does not start until this call.
    await action({ email: ref.current.value });
  }

  return (
    <div>
      <input ref={ref} type=""email"" name=""email"" disabled={isPending} />
      <button onClick={handleSubmit} disabled={isPending}>
        Submit
      </button>
      {state.errorMessage && <p>{state.errorMessage}</p>}
    </div>
  );
}

```

Since the pending state is related to the action, and not the handler or
form it's attached to, the pending state only changes when the action is
dispatched. To solve, there are two options.

First (recommended): place the other function call inside of the action
passed to `useActionState`:

```js
import { useActionState, useRef } from ""react"";

function Form({ someAction, someOtherAction }) {
  const ref = useRef(null);
  const [state, action, isPending] = useActionState(async (data) => {
    // Pending state is true already.
    await someOtherAction();
    return someAction(data);
  });

  async function handleSubmit() {
    // The pending state starts at this call.
    await action({ email: ref.current.value });
  }

  return (
    <div>
      <input ref={ref} type=""email"" name=""email"" disabled={isPending} />
      <button onClick={handleSubmit} disabled={isPending}>
        Submit
      </button>
      {state.errorMessage && <p>{state.errorMessage}</p>}
    </div>
  );
}
```

For greater control, you can also wrap both in a transition and use the
`isPending` state of the transition:

```js
import { useActionState, useTransition, useRef } from ""react"";

function Form({ someAction, someOtherAction }) {
  const ref = useRef(null);

  // isPending is used from the transition wrapping both action calls.
  const [isPending, startTransition] = useTransition();

  // isPending not used from the individual action.
  const [state, action] = useActionState(someAction);

  async function handleSubmit() {
    startTransition(async () => {
      // The transition pending state has begun.
      await someOtherAction();
      await action({ email: ref.current.value });
    });
  }

  return (
    <div>
      <input ref={ref} type=""email"" name=""email"" disabled={isPending} />
      <button onClick={handleSubmit} disabled={isPending}>
        Submit
      </button>
      {state.errorMessage && <p>{state.errorMessage}</p>}
    </div>
  );
}
```

A similar technique using `useOptimistic` is preferred over using
`useTransition` directly, and is left as an exercise to the reader.

## Thanks

Thanks to @ryanflorence @mjackson @wesbos
(https://github.com/facebook/react/issues/27980#issuecomment-1960685940)
and [Allan
Lasser](https://allanlasser.com/posts/2024-01-26-avoid-using-reacts-useformstatus)
for their feedback and suggestions on `useFormStatus` hook.",Ricky,2024-03-22T17:03:44Z
fabd6d3a64aa20aca940142a29a14a82d1cefd31,"Better NEXT_MAJOR support for RN flags (#28583)

The `__NEXT_MAJOR__` value in the RN flags doesn't make sense because:

a) The flags are for the next RN major, since it only impacts the
renderers
b) The flags are off, so they're not currently in the next major, they
need enabled
c) the flag script didn't support it

This PR adds two aliases to the RN file:
- `__TODO_NEXT_RN_MAJOR__`: flags that need enabled before the next RN
major.
- `__NEXT_RN_MAJOR__`: flags that have been enabled since the last RN
major.

These values will need to be manually kept up to date when we cut a RN
version, but once RN switches to the canary build and aligns all the
flags, this entire file can be deleted.

## Script screen
Notably, I added a TODO value and a legend that prints at the end of the
script:

<img width=""1078"" alt=""Screenshot 2024-03-18 at 8 11 27 PM""
src=""https://github.com/facebook/react/assets/2440089/14da9066-f77d-437f-8188-830a31a843c5"">",Ricky,2024-03-22T17:02:04Z
fa0efa1ae3b83e573e21dfd6d0620039fa7fedd3,"Update RN dynamic flag types (#28427)

Updates the RN flag flow types to work like www does, so we can use the
`.native-fb-dynamic.js` file as the type/shim for the dynamically
imported file.",Ricky,2024-03-22T16:23:38Z
208ceeb46ca2838c9bf24cd341435f87b2d50569,"Cleanup enableFloat flag (#28613)

Cleanup enableFloat flag",Jan Kassens,2024-03-22T16:22:30Z
bc516409a6ab98a2179fc7628fe75a49827d85c7,"Repro of for loop with context variable iterator variable 

`let` bindings of context variables are lowered to a DeclareContext + 
StoreContext, which breaks codegen for `for` loops which expect that all 
statements of the init block will lower to variable declarations. The two 
instructions produce a variable declaration and a reassignment.",Joe Savona,2024-03-22T16:15:29Z
7dc08d79be1bd7938757d03bd58fc662f647bbd7,"PropagateScopeDeps treats switch w only default as unconditional 

If we have a switch with only a default case, then that code will be executed 
unconditionally. PropagateScopeDeps can take advantage of this to record 
dependencies in these cases as unconditional, which avoids the issue seen in the 
previous PR.",Joe Savona,2024-03-22T16:02:56Z
32293022225c47bcaa642a7919da5ded2f477900,"Repro for ""expect trees to be >=2 elements long"" invariant 

These cases have a switch with only a default, so we create a ""conditional"" 
child dependency tree and no other trees which hits the invariant.",Joe Savona,2024-03-22T15:53:30Z
ee93b62f510e28e4696ebea3ef0384d9db046b09,[ez] Patch BuildHIR to match unlabeled breaks to switch and loops,Mofei Zhang,2024-03-22T20:34:09Z
f6472522da8a756e300ca6914d081b8ea82f4646,"[repro] Fixture for incorrect lowering for break (label within loop) 

--- 

unlabeled breaks must goto the nearest iteration or switch boundary (not labeled 
block) 

--- 

Sprout fails with the following: 

``` 

FAIL: bug-unlabeled-break-within-label-loop 

>> Unexpected error during test: 

Found differences in evaluator results 

Non-forget (expected): 

(kind: ok) [""0 @A"",""0 @B"",""0 @C"",""1 @A""] 

Forget: 

(kind: ok) [""0 @A"",""0 @B"",""0 @C"",""1 @A"",""1 @C""] 

```",Mofei Zhang,2024-03-22T20:14:35Z
67081159377b438b48e3c2f2278af8e5f56b9f64,"Use `declare const` instead of `declare var` (#28599)

Use `declare const` instead of `declare var`",Jan Kassens,2024-03-22T15:20:18Z
fee786a057774ab687aff765345dd86fce534ab2,"[Fizz] Recover from errors thrown by progressive enhancement form generation (#28611)

This a follow up to #28564. It's alternative to #28609 which takes
#28610 into account.

It used to be possible to return JSX from an action with
`useActionState`.

```js
async function action(errors, payload) {
  ""use server"";
  try {
    ...
  } catch (x) {
    return <div>Error message</div>;
  }
}
```

```js
const [errors, formAction] = useActionState(action);
return <div>{errors}</div>;
```

Returning JSX from an action is itself not anything problematic. It's
that it also has to return the previous state to the action reducer
again that's the problem. When this happens we accidentally could
serialize an Element back to the server.

I fixed this in #28564 so it's now blocked if you don't have a temporary
reference set.

However, you can't have that for the progressive enhancement case. The
reply is eagerly encoded as part of the SSR render. Typically you
wouldn't have these in the initial state so the common case is that they
show up after the first POST back that yields an error and it's only in
the no-JS case where this happens so it's hard to discover.

As noted in #28609 there's a security implication with allowing elements
to be sent across this kind of payload, so we can't just make it work.

When an error happens during SSR our general policy is to try to recover
on the client instead. After all, SSR is mainly a perf optimization in
React terms and it's not primarily intended for a no JS solution.

This PR takes the approach that if we fail to generate the progressive
enhancement payload. I.e. if the serialization of previous state /
closures throw. Then we fallback to the replaying semantics just client
actions instead which will succeed.

The effect of this is that this pattern mostly just works:

- First render in the typical case doesn't have any JSX in it so it just
renders a progressive enhanced form.
- If JS fails to hydrate or you click early we do a form POST. If that
hits an error and it tries to render it using JSX, then the new page
will render successfully - however this time with a Replaying form
instead.
- If you try to submit the form again it'll have to be using JS.

Meaning if you use JSX as the error return value of form state and you
make a first attempt that fails, then no JS won't work because either
the first or second attempt has to hydrate.

We have ideas for potentially optimizing away serializing unused
arguments like if you don't actually use previous state which would also
solve it but it wouldn't cover all cases such as if it was deeply nested
in complex state.

Another approach that I considered was to poison the prev state if you
passed an element back but let it through to the action but if you try
to render the poisoned value, it wouldn't work. The downside of this is
when to error. Because in the progressive enhancement case it wouldn't
error early but when you actually try to invoke it at which point it
would be too late to fallback to client replaying. It would probably
have to always error even on the client which is unfortunate since this
mostly just works as long as it hydrates.",Sebastian Markbåge,2024-03-21T23:51:38Z
e047db8d037f63884a41575ea733c27fe8bd1f14,"[repro] Repro for control flow bug in PropagateScopeDependency 

--- 

Thanks to @josephsavona for finding this bug. This is another example of why we 
really want hir-everywhere. 

Forget output currently nullthrows because we believe `obj.a` is run 
unconditionally in source (missing the break/returns out of this scope)",Mofei Zhang,2024-03-21T21:44:13Z
3a6a2e7e4a807003bc42e103d157ae783602c362,"Repro for ""context variables are always mutable"" error w callbacks 

I haven't debugged to understand exactly why this pattern fails, but there are a 
few instances of this internally. It's especially weird because 

```javascript 

// @enableAssumeHooksFollowRulesOfReact 
@enableTransitivelyFreezeFunctionExpressions 

function Component(props) { 

const [_state, setState] = useState(); 

const a = () => { 

return b(); 

}; 

const b = () => { 

return ( 

<> 

<div onClick={() => onClick(true)} /> 

<div onClick={() => onClick(false)} /> // <---- only repros if there's a second 
call! 

</> 

); 

}; 

const onClick = (value) => { 

setState(value); 

}; 

return <div>{a()}</div>; 

} 

``` 

Here, if `b()` only had one nested function expression that called `onClick` it 
would work. Also, if we disable `@enableTransitivelyFreezeFunctionExpressions` 
then it works. 

But the combination of multiple calls plus that mode causes ""context variables 
are always mutable"". I'm guessing we're freezing `onClick` twice and the second 
time reports an error since it calls `setState`.",Joe Savona,2024-03-22T04:40:02Z
f18a01bf59be6107daa817432f20b9e912e84d35,"Add todo for destructuring to context variables 

We don't have `DestructureContext` yet, this adds a todo for the cases where we 
should use one.",Joe Savona,2024-03-22T00:12:09Z
e8073ff16cc75e0e5be098a1ee0870544725bd60,"Repro for destructure declaration of context variable 

We don't have a `DestructureContext` equivalent of `StoreContext`, so variables 
that are declared via destructuring and later reassigned trigger the invariant 
that all mentions of a variable must be consistently local or context. The next 
PR adds a todo for this case.",Joe Savona,2024-03-22T00:12:09Z
231f29f6f3ef5c8612cfbb050695d7a1e96ebd78,"Fix using context variable as JSX element tag 

Updates the lowering for JSX element tag names to check if the identifier is a 
context or local variable and use the appropriate instruction kind.",Joe Savona,2024-03-22T00:12:08Z
21bb8f9e75be24a7730c890409a53bc2120eef68,"Repro for inconsistent context/local variable reference 

We currently assume JSX element tags are always locals, and need to check which 
load kind to use. Fixed in the next PR.",Joe Savona,2024-03-22T00:12:08Z
0e72e2a00e9644801fa2fab2142e60f7076bfc0c,Repro for nested method calls causing promoted property load invariant,Joe Savona,2024-03-21T21:11:07Z
1b6afa187923bb080084935e71ab99ece7767a82,Repro for uninitialized value due to shadowed function name,Joe Savona,2024-03-21T21:11:06Z
a6b3adbe68b0ee1e50fd4f0d632e5e1ce60dedcd,Repro for unsupported recursive function expressions,Joe Savona,2024-03-21T21:11:06Z
d31e10b406163928589649466a3b0f76ae45c5cc,Fix for type aliases in function inferring as function deps,Joe Savona,2024-03-21T21:11:05Z
4bc676d3dbd78f5c4c3f9be7f86c3b084a268ac9,"Repro for undefined ""hoisted"" variable from type alias 

We inadvertently think the type annotation on the function expression param is 
an identifier and create a LoadLocal for it, which fails. This happens to trip 
up on the InferReferenceEffects initialization check, which we had assumed would 
only fire for invalid hoisting cases (hence the specific error message).",Joe Savona,2024-03-21T21:11:04Z
241b35463c662a9da230b511dc161fd9aa943634,"Fix PruneMaybeThrows to update phi operand predecessor ids 

When PruneMaybeThrows removes maybe-throw terminals, it's possible that the 
block in question reassigned a value s.t. it appears as a later phi operand. 
That phi has to be rewritten to reflect the updated predecessor block. 

Here we track these rewrites (transitively) and rewrite phi operands 
accordingly.",Joe Savona,2024-03-21T21:11:04Z
72e02a8350309c6228ec1d9f21a5b09b84456fb8,"[Flight Reply] Don't allow Symbols to be passed to a reply (#28610)

As mentioned in #28609 there's a potential security risk if you allow a
passed value to the server to spoof Elements because it allows a hacker
to POST cross origin. This is only an issue if your framework allows
this which it shouldn't but it seems like we should provide an extra
layer of security here.

```js
function action(errors, payload) {
  try {
    ...
  } catch (x) {
    return [newError].concat(errors);
  }
}
```
```js
const [errors, formAction] = useActionState(action);
return <div>{errors}</div>;
```
This would allow you to construct a payload where the previous ""errors""
set includes something like `<script src=""danger.js"" />`.

We could block only elements from being received but it could
potentially be a risk with creating other React types like Context too.
We use symbols as a way to securely brand these.

Most JS don't use this kind of branding with symbols like we do. They're
generally properties which we don't support anyway. However in theory
someone else could be using them like we do. So in an abundance of
carefulness I just ban all symbols from being passed (except by
temporary reference) - not just ours.

This means that the format isn't fully symmetric even beyond just React
Nodes.

#28611 allows code that includes symbols/elements to continue working
but may have to bail out to replaying instead of no JS sometimes.
However, you still can't access the symbols inside the server - they're
by reference only.",Sebastian Markbåge,2024-03-21T20:53:02Z
c47fee55d9886b2d9746a4b71c48bbd8b8ac9d3a,"[Fizz][Legacy] use static markup mode for renderToStaticNodeStream (#28606)

Since it was first implemented renderToStaticNodeStream never correctly
set the renderer state to mark the output as static markup which means
it was functionally the same as renderToNodeStream. This change fixes
this oversight. While we are removing renderToNodeStream in a future
version we never did deprecate the static version of this API because it
has no immediate analog in the modern APIs.",Josh Story,2024-03-21T18:03:09Z
7263b4f80a52036060257cc9a0e388351a05f231,"Update RTR usage in ReactLazy-test (#28598)

- Make all test cases in ReactLazy use RTR with concurrent root
- Except, two cases with ""legacy mode"" specified in description. These
are moved to a separate description block where the disableLegacyMode
flag is turned off to allow RTR to use legacy root after
https://github.com/facebook/react/pull/28498",Jack Pope,2024-03-21T17:28:20Z
1cf8d9bc8b8ce905ce55043707fffb0b0c504e4f,"Repro for missing predecessor with try/catch 

Found when running the compiler on a large swath of internal code. 
PruneMaybeThrows rewrites terminals, but the logic to update subsequent phis was 
incorrectly dropping phis rather than rewriting them. Fixed in the next PR.",Joe Savona,2024-03-20T21:07:28Z
14d54869ed934d20912fd65f12017a2b03d71008,"[patch][codegen] don't reuse babel nodes in codegen for dependencies 

--- 

Reusing optionalMemberExpression nodes recently led to a bug when compiling 
Forget playground. 

```js 

// the two a?.b's here should be different nodes! 

if (a?.b !== $[0]) { 

// ... 

$[0] = a?.b; 

} 

``` 

Forget playground uses `babel-plugin-react-forget` and `next/babel`. Reusing the 
same node in two positions in the AST lead to invalid mutations: 

- the first `a?.b` is visited and transpiled to `a === void 0 ? ...`, which (1) 
inserts nodes between the original node and its parent and (2) mutates `a?.b` in 
place to a non-optional call 

- the second `a?.b` in source gets updated to `a.b` and does not get visited 
again 

```js 

// Source in `EditorImpl.tsx` 

compilerOutput.kind === ""err"" ? compilerOutput.error.details : [] 

// Forget transformed: 

if ($[2] !== compilerOutput.kind || $[3] !== compilerOutput.error?.details) { 

t4 = compilerOutput.kind === ""err"" ? compilerOutput.error.details : []; 

$[2] = compilerOutput.kind; 

// this is good! 

$[3] = compilerOutput.error?.details; 

$[4] = t4; 

} else { 

t4 = $[4]; 

} 

// After next/babel 

if ($[2] !== compilerOutput.kind || $[3] !== ((_compilerOutput$error = 
compilerOutput.error) === null || _compilerOutput$error === void 0 ? void 0 : 
_compilerOutput$error.details)) { 

t4 = compilerOutput.kind === ""err"" ? compilerOutput.error.details : []; 

$[2] = compilerOutput.kind; 

// Oh no!! 

$[3] = _compilerOutput$error.details; 

$[4] = t4; 

} else { 

t4 = $[4]; 

} 

```",Mofei Zhang,2024-03-20T23:29:02Z
4daa4eceb7577918fb07eea8b03dcd70cfa84e81,"[validation] More detailed error diagnostics for validatePreserveExistingMemo 

--- 

This should make it easier to grep through error diagnostics to understand state 
of the codebase: 

- no matching dependences -> likely that source is ignoring eslint failures 

- differences in ref.current access -> non-backwards compatible refs 

- subpath -> should be fixable in the compiler (unless source is ignore eslint 
failures)",Mofei Zhang,2024-03-20T20:05:24Z
63bb781781ef1b4b08ee169b43f08dece4232a39,"[validation] Reduce false positives in validatePreserveExistingMemo 

--- 

Previously (in #2663), we check that inferred dependencies exactly match source 
dependencies. As @validatePreserveExistingMemoizationGuarantees checks that 
Forget output does not invalidate *any more* than source, we now allow more 
specific inferred dependencies when neither the inferred dep or matching source 
dependency reads into a ref (based on `.current` access). 

See added comments for more details",Mofei Zhang,2024-03-20T20:05:23Z
b35779c6a442fd98473706a8d552ecb5a9db573a,"[logger] Add CompilerDiagnostic category, thread Logger into environment",Mofei Zhang,2024-03-20T17:48:18Z
a4939017ffe2e04a94efca0f48b661bc778a6fa4,"Concurrent RTR in ReactHooksInspectionIntegration-test (#28549)

More test updates to use concurrent root in RTR

`yarn test
packages/react-debug-tools/src/__tests__/ReactHooksInspectionIntegration-test.js`",Jack Pope,2024-03-20T15:15:32Z
8ef14cf24219addedca3607dabb3bef37fb2e013,"Ensure dispatch from `useFormState` works in `StrictMode` (#28557)

Co-authored-by: Andrew Clark <git@andrewclark.io>",Sebastian Silbermann,2024-03-20T15:15:22Z
5cec48e145f6b43879b9ef40cdda812b88fff31c,DevTools: Read context values from context dependencies (#28467),Sebastian Silbermann,2024-03-20T11:16:42Z
29a6ca33a548ba372942dd5f0ae1c777e405610b,"Update gate pragma to detect global error events (#28591)

If a global error event is dispatched during a test, Jest reports that
test as a failure.

Our `@gate` pragma feature should account for this — if the gate
condition is false, and the global error event is dispatched, then the
test should be reported as a success.

The solution is to install an error event handler right before invoking
the test function. Because we install our own handler, Jest will not
report the test as a failure if a global error event is dispatched; it's
conceptually as if we wrapped the whole test event in a try-catch.",Andrew Clark,2024-03-20T01:08:37Z
346f6c13a838a3c99dac3a3c01d67f32da28e366,"Todo for fbt with multiple fbt:enum 

I need to do more debugging to figure out exactly why the example earlier fails 
— but whatever it is, it's clearly a matter of the fbt plugin relying on some 
specifics of source locations. 

Here we just detect multiple instances of `<fbt:enum>` within a given `<fbt>` 
tag and throw a todo.",Joe Savona,2024-03-19T23:39:05Z
f2b0b656b255fbf9efaf12c316988ff8a34332a2,"More accurate source locations for JSX opening/closing tags 

<img width=""553"" alt=""Screenshot 2024-03-19 at 4 41 15 PM"" 
src=""https://github.com/facebook/react-forget/assets/6425824/e87ee704-6c67-4e10-824b-71e97e7e19f5""> 

Slightly improves source locations for JSX elements so that the opening and 
closing tag have distinct locations that match up with source. The identifier 
itself within the closing tag still has the wrong location, but at least this is 
an improvement. 

Doesn't fix the fbt thing but it was worth a try.",Joe Savona,2024-03-19T23:26:32Z
501481ccea2dc1ba844a9f8a926db22a23e1f322,"Repro for fbt:enum source location issue 

Fbt enums appear to rely on source locations and something that we're doing 
(maybe destructuring?) isn't preserving locations such that the fbt plugin 
breaks.",Joe Savona,2024-03-19T22:21:55Z
82c6595e758679adf518e69794ba8d11b97a6bd1,"Bump es5-ext from 0.10.53 to 0.10.63 in /fixtures/dom (#28459)

Bumps [es5-ext](https://github.com/medikoo/es5-ext) from 0.10.53 to
0.10.63.
<details>
<summary>Release notes</summary>
<p><em>Sourced from <a
href=""https://github.com/medikoo/es5-ext/releases"">es5-ext's
releases</a>.</em></p>
<blockquote>
<h2>0.10.63 (2024-02-23)</h2>
<h3>Bug Fixes</h3>
<ul>
<li>Do not rely on problematic regex (<a
href=""https://github.com/medikoo/es5-ext/commit/3551cdd7b2db08b1632841f819d008757d28e8e2"">3551cdd</a>),
addresses <a
href=""https://redirect.github.com/medikoo/es5-ext/issues/201"">#201</a></li>
<li>Support ES2015+ function definitions in
<code>function#toStringTokens()</code> (<a
href=""https://github.com/medikoo/es5-ext/commit/a52e95736690ad1d465ebcd9791d54570e294602"">a52e957</a>),
addresses <a
href=""https://redirect.github.com/medikoo/es5-ext/issues/021"">#021</a></li>
<li>Ensure postinstall script does not crash on Windows, fixes <a
href=""https://redirect.github.com/medikoo/es5-ext/issues/181"">#181</a>
(<a
href=""https://github.com/medikoo/es5-ext/commit/bf8ed799d57df53096da9d908ff577f305e1366f"">bf8ed79</a>)</li>
</ul>
<h3>Maintenance Improvements</h3>
<ul>
<li>Simplify the manifest message (<a
href=""https://github.com/medikoo/es5-ext/commit/7855319f41b9736639cf4555bd2c419f17addf55"">7855319</a>)</li>
</ul>
<hr />
<p><a
href=""https://github.com/medikoo/es5-ext/compare/v0.10.62...v0.10.63"">Comparison
since last release</a></p>
<h2>0.10.62 (2022-08-02)</h2>
<h3>Maintenance Improvements</h3>
<ul>
<li><strong>Manifest improvements:</strong>
<ul>
<li>(<a
href=""https://redirect.github.com/medikoo/es5-ext/issues/190"">#190</a>)
(<a
href=""https://github.com/medikoo/es5-ext/commit/b8dc53fa439b98541644c64c1275f25d9f2e2235"">b8dc53f</a>)</li>
<li>(<a
href=""https://github.com/medikoo/es5-ext/commit/c51d552c03967858b8f14a4afa305338ba648cce"">c51d552</a>)</li>
</ul>
</li>
</ul>
<hr />
<p><a
href=""https://github.com/medikoo/es5-ext/compare/v0.10.61...v0.10.62"">Comparison
since last release</a></p>
<h2>0.10.61 (2022-04-20)</h2>
<h3>Bug Fixes</h3>
<ul>
<li>Ensure postinstall script does not error (<a
href=""https://github.com/medikoo/es5-ext/commit/a0be4fdacdbc3aefd6f2952b7b9215827d362bbb"">a0be4fd</a>)</li>
</ul>
<h3>Maintenance Improvements</h3>
<ul>
<li>Bump dependencies (<a
href=""https://github.com/medikoo/es5-ext/commit/d7e0a612b7d895c1c7238c779feae1e39d4634c4"">d7e0a61</a>)</li>
</ul>
<hr />
<p><a
href=""https://github.com/medikoo/es5-ext/compare/v0.10.60...v0.10.61"">Comparison
since last release</a></p>
<h2>0.10.60 (2022-04-07)</h2>
<h3>Maintenance Improvements</h3>
<ul>
<li>Improve <code>postinstall</code> script configuration (<a
href=""https://github.com/medikoo/es5-ext/commit/ab6b121f0ca4f033bba9b6f400b24d07869bd716"">ab6b121</a>)</li>
</ul>
<hr />
<p><a
href=""https://github.com/medikoo/es5-ext/compare/v0.10.59...v0.10.60"">Comparison
since last release</a></p>
<h2>0.10.59 (2022-03-17)</h2>
<h3>Maintenance Improvements</h3>
<ul>
<li>Improve manifest wording (<a
href=""https://redirect.github.com/medikoo/es5-ext/issues/122"">#122</a>)
(<a
href=""https://github.com/medikoo/es5-ext/commit/eb7ae59966774a8c26f1717415c627d90bb3d954"">eb7ae59</a>)</li>
<li>Update data in manifest (<a
href=""https://github.com/medikoo/es5-ext/commit/3d2935ac6f1a0969c7569840d5b3bdeed6940e56"">3d2935a</a>)</li>
</ul>
<!-- raw HTML omitted -->
</blockquote>
<p>... (truncated)</p>
</details>
<details>
<summary>Changelog</summary>
<p><em>Sourced from <a
href=""https://github.com/medikoo/es5-ext/blob/main/CHANGELOG.md"">es5-ext's
changelog</a>.</em></p>
<blockquote>
<h3><a
href=""https://github.com/medikoo/es5-ext/compare/v0.10.62...v0.10.63"">0.10.63</a>
(2024-02-23)</h3>
<h3>Bug Fixes</h3>
<ul>
<li>Do not rely on problematic regex (<a
href=""https://github.com/medikoo/es5-ext/commit/3551cdd7b2db08b1632841f819d008757d28e8e2"">3551cdd</a>),
addresses <a
href=""https://redirect.github.com/medikoo/es5-ext/issues/201"">#201</a></li>
<li>Support ES2015+ function definitions in
<code>function#toStringTokens()</code> (<a
href=""https://github.com/medikoo/es5-ext/commit/a52e95736690ad1d465ebcd9791d54570e294602"">a52e957</a>),
addresses <a
href=""https://redirect.github.com/medikoo/es5-ext/issues/021"">#021</a></li>
<li>Ensure postinstall script does not crash on Windows, fixes <a
href=""https://redirect.github.com/medikoo/es5-ext/issues/181"">#181</a>
(<a
href=""https://github.com/medikoo/es5-ext/commit/bf8ed799d57df53096da9d908ff577f305e1366f"">bf8ed79</a>)</li>
</ul>
<h3>Maintenance Improvements</h3>
<ul>
<li>Simplify the manifest message (<a
href=""https://github.com/medikoo/es5-ext/commit/7855319f41b9736639cf4555bd2c419f17addf55"">7855319</a>)</li>
</ul>
<h3><a
href=""https://github.com/medikoo/es5-ext/compare/v0.10.61...v0.10.62"">0.10.62</a>
(2022-08-02)</h3>
<h3>Maintenance Improvements</h3>
<ul>
<li><strong>Manifest improvements:</strong>
<ul>
<li>(<a
href=""https://redirect.github.com/medikoo/es5-ext/issues/190"">#190</a>)
(<a
href=""https://github.com/medikoo/es5-ext/commit/b8dc53fa439b98541644c64c1275f25d9f2e2235"">b8dc53f</a>)</li>
<li>(<a
href=""https://github.com/medikoo/es5-ext/commit/c51d552c03967858b8f14a4afa305338ba648cce"">c51d552</a>)</li>
</ul>
</li>
</ul>
<h3><a
href=""https://github.com/medikoo/es5-ext/compare/v0.10.60...v0.10.61"">0.10.61</a>
(2022-04-20)</h3>
<h3>Bug Fixes</h3>
<ul>
<li>Ensure postinstall script does not error (<a
href=""https://github.com/medikoo/es5-ext/commit/a0be4fdacdbc3aefd6f2952b7b9215827d362bbb"">a0be4fd</a>)</li>
</ul>
<h3>Maintenance Improvements</h3>
<ul>
<li>Bump dependencies (<a
href=""https://github.com/medikoo/es5-ext/commit/d7e0a612b7d895c1c7238c779feae1e39d4634c4"">d7e0a61</a>)</li>
</ul>
<h3><a
href=""https://github.com/medikoo/es5-ext/compare/v0.10.59...v0.10.60"">0.10.60</a>
(2022-04-07)</h3>
<h3>Maintenance Improvements</h3>
<ul>
<li>Improve <code>postinstall</code> script configuration (<a
href=""https://github.com/medikoo/es5-ext/commit/ab6b121f0ca4f033bba9b6f400b24d07869bd716"">ab6b121</a>)</li>
</ul>
<h3><a
href=""https://github.com/medikoo/es5-ext/compare/v0.10.58...v0.10.59"">0.10.59</a>
(2022-03-17)</h3>
<h3>Maintenance Improvements</h3>
<ul>
<li>Improve manifest wording (<a
href=""https://redirect.github.com/medikoo/es5-ext/issues/122"">#122</a>)
(<a
href=""https://github.com/medikoo/es5-ext/commit/eb7ae59966774a8c26f1717415c627d90bb3d954"">eb7ae59</a>)</li>
<li>Update data in manifest (<a
href=""https://github.com/medikoo/es5-ext/commit/3d2935ac6f1a0969c7569840d5b3bdeed6940e56"">3d2935a</a>)</li>
</ul>
<h3><a
href=""https://github.com/medikoo/es5-ext/compare/v0.10.57...v0.10.58"">0.10.58</a>
(2022-03-11)</h3>
<h3>Maintenance Improvements</h3>
<ul>
<li>Improve &quot;call for peace&quot; manifest (<a
href=""https://github.com/medikoo/es5-ext/commit/3beace4b3d00f02da61b72dd328f90cf069d46de"">3beace4</a>)</li>
</ul>
<h3><a
href=""https://github.com/medikoo/es5-ext/compare/v0.10.56...v0.10.57"">0.10.57</a>
(2022-03-08)</h3>
<!-- raw HTML omitted -->
</blockquote>
<p>... (truncated)</p>
</details>
<details>
<summary>Commits</summary>
<ul>
<li><a
href=""https://github.com/medikoo/es5-ext/commit/de4e03c4776a303284142f73f3f181a070615817""><code>de4e03c</code></a>
chore: Release v0.10.63</li>
<li><a
href=""https://github.com/medikoo/es5-ext/commit/3fd53b755ec883be8f119c747f0b04130741e456""><code>3fd53b7</code></a>
chore: Upgrade<code> lint-staged</code> to v13</li>
<li><a
href=""https://github.com/medikoo/es5-ext/commit/bf8ed799d57df53096da9d908ff577f305e1366f""><code>bf8ed79</code></a>
chore: Ensure postinstall script does not crash on Windows</li>
<li><a
href=""https://github.com/medikoo/es5-ext/commit/2cbbb0717bd8de6e38fcba1f0d45bc876e7a1951""><code>2cbbb07</code></a>
chore: Bump dependencies</li>
<li><a
href=""https://github.com/medikoo/es5-ext/commit/22d0416ea170000a115609f22a560dfa9193ebb0""><code>22d0416</code></a>
chore: Bump LICENSE year</li>
<li><a
href=""https://github.com/medikoo/es5-ext/commit/a52e95736690ad1d465ebcd9791d54570e294602""><code>a52e957</code></a>
fix: Support ES2015+ function definitions in
<code>function#toStringTokens()</code></li>
<li><a
href=""https://github.com/medikoo/es5-ext/commit/3551cdd7b2db08b1632841f819d008757d28e8e2""><code>3551cdd</code></a>
fix: Do not rely on problematic regex</li>
<li><a
href=""https://github.com/medikoo/es5-ext/commit/7855319f41b9736639cf4555bd2c419f17addf55""><code>7855319</code></a>
chore: Simplify the manifest message</li>
<li><a
href=""https://github.com/medikoo/es5-ext/commit/78e041fe780ab39e73b7e580407e3ce1e52f4e38""><code>78e041f</code></a>
chore: Release v0.10.62</li>
<li><a
href=""https://github.com/medikoo/es5-ext/commit/c51d552c03967858b8f14a4afa305338ba648cce""><code>c51d552</code></a>
chore: Improve manifest</li>
<li>Additional commits viewable in <a
href=""https://github.com/medikoo/es5-ext/compare/v0.10.53...v0.10.63"">compare
view</a></li>
</ul>
</details>
<br />


[![Dependabot compatibility
score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=es5-ext&package-manager=npm_and_yarn&previous-version=0.10.53&new-version=0.10.63)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)

Dependabot will resolve any conflicts with this PR as long as you don't
alter it yourself. You can also trigger a rebase manually by commenting
`@dependabot rebase`.

[//]: # (dependabot-automerge-start)
[//]: # (dependabot-automerge-end)

---

<details>
<summary>Dependabot commands and options</summary>
<br />

You can trigger Dependabot actions by commenting on this PR:
- `@dependabot rebase` will rebase this PR
- `@dependabot recreate` will recreate this PR, overwriting any edits
that have been made to it
- `@dependabot merge` will merge this PR after your CI passes on it
- `@dependabot squash and merge` will squash and merge this PR after
your CI passes on it
- `@dependabot cancel merge` will cancel a previously requested merge
and block automerging
- `@dependabot reopen` will reopen this PR if it is closed
- `@dependabot close` will close this PR and stop Dependabot recreating
it. You can achieve the same result by closing it manually
- `@dependabot show <dependency name> ignore conditions` will show all
of the ignore conditions of the specified dependency
- `@dependabot ignore this major version` will close this PR and stop
Dependabot creating any more for this major version (unless you reopen
the PR or upgrade to it yourself)
- `@dependabot ignore this minor version` will close this PR and stop
Dependabot creating any more for this minor version (unless you reopen
the PR or upgrade to it yourself)
- `@dependabot ignore this dependency` will close this PR and stop
Dependabot creating any more for this dependency (unless you reopen the
PR or upgrade to it yourself)
You can disable automated security fix PRs for this repo from the
[Security Alerts
page](https://github.com/facebook/react/network/alerts).

</details>

Signed-off-by: dependabot[bot] <support@github.com>
Co-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>",dependabot[bot],2024-03-19T22:13:39Z
7257c9b4f80889eaadf884dade07be8783c90fdc,"Fix for <fbt> with local import 

Fbt violates the JSX spec by using a lowercase function as a tagname, even 
though lowercase names are reserved for builtins. Here we detect cases where 
there is an `<fbt>` tag where `fbt` is a local identifier and throw a todo.",Joe Savona,2024-03-19T21:51:35Z
37676aba76a9b97e1059e6dec39c3f401f44248d,"Also apply content hash for experimental files (#28590)

Also apply content hash for experimental files

In #28582 I missed that experimental files have a copy of this build
function setting the version strings.",Jan Kassens,2024-03-19T21:50:24Z
83409a1fdd14b2e5b33c587935a7ef552607780f,"[Flight] Encode React Elements in Replies as Temporary References (#28564)

Currently you can accidentally pass React Element to a Server Action. It
warns but in prod it actually works because we can encode the symbol and
otherwise it's mostly a plain object. It only works if you only pass
host components and no function props etc. which makes it potentially
error later. The first thing this does it just early hard error for
elements.

I made Lazy work by unwrapping though since that will be replaced by
Promises later which works.

Our protocol is not fully symmetric in that elements flow from Server ->
Client. Only the Server can resolve Components and only the client
should really be able to receive host components. It's not intended that
a Server can actually do something with them other than passing them to
the client.

In the case of a Reply, we expect the client to be stateful. It's
waiting for a response. So anything we can't serialize we can still pass
by reference to an in memory object. So I introduce the concept of a
TemporaryReferenceSet which is an opaque object that you create before
encoding the reply. This then stashes any unserializable values in this
set and encode the slot by id. When a new response from the Action then
returns we pass the same temporary set into the parser which can then
restore the objects. This lets you pass a value by reference to the
server and back into another slot.

For example it can be used to render children inside a parent tree from
a server action:

```
export async function Component({ children }) {
  ""use server"";
  return <div>{children}</div>;
}
```

(You wouldn't normally do this due to the waterfalls but for advanced
cases.)

A common scenario where this comes up accidentally today is in
`useActionState`.

```
export function action(state, formData) {
  ""use server"";
   if (errored) {
     return <div>This action <strong>errored</strong></div>;
   }
   return null;
}
```

```
const [errors, formAction] = useActionState(action);
return <div>{errors}<div>;
```

It feels like I'm just passing the JSX from server to client. However,
because `useActionState` also sends the previous state *back* to the
server this should not actually be valid. Before this PR this actually
worked accidentally. You get a DEV warning but it used to work in prod.
Once you do something like pass a client reference it won't work tho. We
could perhaps make client references work by stashing where we got them
from but it wouldn't work with all possible JSX.

By adding temporary references to the action implementation this will
work again - on the client. It'll also be more efficient since we don't
send back the JSX content that you shouldn't introspect on the server
anyway.

However, a flaw here is that the progressive enhancement of this case
won't work because we can't use temporary references for progressive
enhancement since there's no in memory stash. What is worse is that it
won't error if you hydrate. ~It also will error late in the example
above because the first state is ""undefined"" so invoking the form once
works - it errors on the second attempt when it tries to send the error
state back again.~ It actually errors on the first invocation because we
need to eagerly serialize ""previous state"" into the form. So at least
that's better.

I think maybe the solution to this particular pattern would be to allow
JSX to serialize if you have no temporary reference set, and remember
client references so that client references can be returned back to the
server as client references. That way anything you could send from the
server could also be returned to the server. But it would only deopt to
serializing it for progressive enhancement. The consequence of that
would be that there's a lot of JSX that might accidentally seem like it
should work but it's only if you've gotten it from the server before
that it works. This would have to have pair them somehow though since
you can't take a client reference from one implementation of Flight and
use it with another.",Sebastian Markbåge,2024-03-19T20:59:52Z
93e0815b263e2cf341231ae36de0053a4394f586,"Remove unnecessary scopes for value blocks 

The example earlier in the stack had unreachable code in the output because 
there was an unnecessary memoization block around an assignment. This was a 
holdover from before we moved the logic to expand mutable ranges for phis from 
LeaveSSA to InferMutableRanges. We were conservatively assigning a mutable range 
to all variables with a phi, even those that didn't strictly need one. 

Removing the range extension logic in LeaveSSA fixed the issue, but uncovered 
the fact that AlignReactiveScopesToBlockScopes was missing a case to handle 
optionals. 

## Test Plan 

Synced internally and ran a snapshot/comparison of compilation before/after 
(P1197734337 for those curious). The majority of components get fewer memo slots 
thanks to not needing to memoize non-allocating value block expressions like 
ternaries/optionals. In a few cases, the fact that we're no longer assigning a 
mutable range for value blocks (unless there is actually a mutation!) means we 
get more fine-grained memoization and increase the number of memoization blocks. 
So overall this appears to be correct, improve memoization, and reduce code 
size.",Joe Savona,2024-03-19T20:28:47Z
c03f1c809aeaf69ed26eda39df9dbd7242bc014d,"Extract shared-runtime helper for validating memoization 

Extracts a helper from the repro earlier in the stack into a helper in 
shared-runtime. This makes it easy to verify that memoization is actually 
working.",Joe Savona,2024-03-19T20:28:47Z
57fcf7d305125784b5b98dd740cdd8a3a4125304,"Repro for nonproblematic unreachable code 

This case is specific to early return inside an inlined IIFE (which can often 
occur as a result of dropping manual memoization). When we inline IIFEs, as a 
reminder we wrap the body in a labeled block and convert returns to assignment 
of a temporary + break out of the label. 

Those reassignments themselves are getting a reactive scope assigned since the 
reassigned value has a mutable range. They don't really need a mutable range or 
scope, though. And then the presence of the `break` statements means that we can 
sometimes exit out of the scope before reaching the end - leading to unreachable 
code. 

This can only occur though where _all the values are already memoized_. So the 
code works just fine and even memoizes just fine - it's just that we have some 
extraneous scopes and there is technically unreachable code. I'll fix in a 
follow-up, adding a repro here.",Joe Savona,2024-03-19T20:28:46Z
cb076b593cec3a92338958f58468cce19cb8f0d9,"Change to content hash for RN canary VERSION strings (#28582)

With this change, the different files in RN will have *different*
hashes. This replaces the git hash and means that the file content
(including version) is only updated when the rest of the file content
actually changes. This should remove ""noop"" changes that need to be
synced that only update the version string.

A difference to the www implementation here is (and I'd be looking at
updating www as well if this lands well) that each file has an
individual hash instead of a combined content hash. This further reduces
the number of updated files and I couldn't find a reason we need to have
these in sync. The best I can gather is that this hash is used so folks
don't directly compare version string and make future updates harder.",Jan Kassens,2024-03-19T20:16:34Z
b5a7fe4e1cd69e016934dabc754adb9f99f36859,[hir] Improve error message for mutating state,Sathya Gunasekaran,2024-03-19T17:06:17Z
9358aeab34e750c3d1e3fe86fd504a0450a43cbd,[scripts] Add script to pull commit message from PR description,Sathya Gunasekaran,2024-03-19T11:23:43Z
9c75cd5e84c4c524f42e65027cfd3dce746d6916,Set disableModulePatternComponents flag to __NEXT_MAJOR__ (#28579),Jan Kassens,2024-03-18T21:25:28Z
e02f87f139fae4b17234c0cc592ff4e0825c18db,"Use RTR with concurrent root in ReactHooks-test.internal (#28578)

Continued cleanup of legacy root usage from RTR",Jack Pope,2024-03-18T19:49:30Z
bc13750bdf9ca29c7d23a71c5760c21a78cf3fc4,"Concurrent rendering for ReactART-test (#28521)

## Summary

We need to unblock flipping the default for RTR to be concurrent
rendering. Update ReactART-test to use `unstable_isConcurrent` in place.

## How did you test this change?

`yarn test packages/react-art/src/__tests__/ReactART-test.js`",Jack Pope,2024-03-18T19:40:02Z
cea84a41bc6f3bb0909cd25859d471b0a2a3181a,"validatePreserveExistingMemoizationGuarantees ensures compiler preserves subset 
of dependencies from source 

--- 

`validatePreserveExistingMemoizationGuarantees` previously checked 

- manual memoization dependencies and declarations (the returned value) do not 
""lose"" memoization due to inferred mutations 

``` 

function useFoo() { 

const y = {}; 

// bail out because we infer that y cannot be a dependency of x as its 
mutableRange 

// extends beyond 

const x = useMemo(() => maybeMutate(y), [y]); 

// similarly, bail out if we find that x or y are mutated here 

return x; 

} 

``` 

- manual memoization deps and decls do not get deopted due to hook calls 

``` 

function useBar() { 

const x = getArray(); 

useHook(); 

mutate(x); 

return useCallback(() => [x], [x]); 

} 

``` 

This PR updates `validatePreserveExistingMemoizationGuarantees` with the 
following correctness conditions: 

*major change* All inferred dependencies of reactive scopes between 
`StartMemoize` and `StopMemoize` instructions (e.g. scopes containing manual 
memoization code) must either: 

1. be produced from earlier within the same manual memoization block 

2. exactly match an element of depslist from source 

This assumes that the source codebase mostly follows the `exhaustive-deps` lint 
rule, which ensures that deps lists are (1) simple expressions composing of 
reads from named identifiers + property loads and (2) exactly match deps usages 
in the useMemo/useCallback itself. 

--- 

Validated that this does not change source by running internally on ~50k files 
(no validation on `main`, no validation on this PR, and validation on this PR).",Mofei Zhang,2024-03-18T18:50:15Z
0aab065eb3250a9714a62dc05587cbb571da7f71,"Add `alwaysThrottleDisappearingFallbacks` Flag (#28550)

## Summary

Creates a new `alwaysThrottleDisappearingFallbacks` feature flag that
gates the changes from https://github.com/facebook/react/pull/26802
(instead of being controlled by `alwaysThrottleRetries`). The values of
this new flag mirror the current values of `alwaysThrottleRetries` such
that there is no behavior difference.

This additional feature flag allows us to incrementally validate the
change (arguably bug fix) from
https://github.com/facebook/react/pull/26802 independently from
`alwaysThrottleRetries`.

## How did you test this change?

```
$ yarn test
$ yarn flow dom-browser
$ yarn flow dom-fb
$ yarn flow fabric
```",Timothy Yung,2024-03-18T18:16:47Z
7959a1dd28a8b0df9c80dc36bb51a4fa25123d3e,"Upgrade flow to 0.231.0 (#28576)

Upgrade flow to 0.231.0",Jan Kassens,2024-03-18T17:23:07Z
6a01aca75b77da01b0e6513fe61a4842637c7dfd,"Fix ReactHooksInspectionIntegration-test (#28577)

Resolve conflict between #28508 and #28546",Jack Pope,2024-03-18T17:15:23Z
81695f62c2b544b2f5c91cc032a01ab1a52fcef9,"[refactor] Refactor Memoize to two instructions: Start and Finish 

--- 

Previously, we always emitted `Memoize dep` instructions after the function 
expression literal and depslist instructions 

```js 

// source 

useManualMemo(() => {...}, [arg]) 

// lowered 

$0 = FunctionExpression(...) 

$1 = LoadLocal (arg) 

$2 = ArrayExpression [$1] 

$3 = Memoize (arg) 

$4 = Call / LoadLocal 

$5 = Memoize $4 

``` 

Now, we insert `Memoize dep` before the corresponding function expression 
literal: 

```js 

// lowered 

$0 = StartMemoize (arg)      <---- this moved up! 

$1 = FunctionExpression(...) 

$2 = LoadLocal (arg) 

$3 = ArrayExpression [$2] 

$4 = Call / LoadLocal 

$5 = FinishMemoize $4 

``` 

Design considerations: 

- #2663 needs to understand which lowered instructions belong to a manual 
memoization block, so we need to emit `StartMemoize` instructions before the 
`useMemo/useCallback` function argument, which contains relevant memoized 
instructions 

- we choose to insert StartMemoize instructions to (1) avoid unsafe instruction 
reordering of source and (2) to ensure that Forget output does not change when 
enabling validation 

This PR only renames `Memoize` -> `Start/FinishMemoize` and hoists 
`StartMemoize` as described. The latter may help with stricter validation for 
`useCallback`s, although testing is left to the next PR. 

#2663 contains all validation changes",Mofei Zhang,2024-03-18T16:09:37Z
37452089fba2492cbc622b80d9e987193f343054,"[ez] CompilerError: optional description and suggestions 

--- 

Many compiler errors have neither descriptions nor suggestions (e.g. most `todo` 
or `invariant` errors), so let's make those optional",Mofei Zhang,2024-03-18T16:09:36Z
8c8e318bd4182186699814992e56245ba64c89b3,"Remove private header from playground 

Remove private header from playground 

Before we miss removing this from the public release, I think we can remove this 
header now already. We're still behind a secret URL + password.",Jan Kassens,2024-03-18T20:53:47Z
74cb1bdfec296af4ac3eda383fb6b5a9324803f3,"Bump follow-redirects from 1.15.4 to 1.15.6 in /fixtures/ssr (#28571)

Bumps
[follow-redirects](https://github.com/follow-redirects/follow-redirects)
from 1.15.4 to 1.15.6.
<details>
<summary>Commits</summary>
<ul>
<li><a
href=""https://github.com/follow-redirects/follow-redirects/commit/35a517c5861d79dc8bff7db8626013d20b711b06""><code>35a517c</code></a>
Release version 1.15.6 of the npm package.</li>
<li><a
href=""https://github.com/follow-redirects/follow-redirects/commit/c4f847f85176991f95ab9c88af63b1294de8649b""><code>c4f847f</code></a>
Drop Proxy-Authorization across hosts.</li>
<li><a
href=""https://github.com/follow-redirects/follow-redirects/commit/8526b4a1b2ab3a2e4044299377df623a661caa76""><code>8526b4a</code></a>
Use GitHub for disclosure.</li>
<li><a
href=""https://github.com/follow-redirects/follow-redirects/commit/b1677ce00110ee50dc5da576751d39b281fc4944""><code>b1677ce</code></a>
Release version 1.15.5 of the npm package.</li>
<li><a
href=""https://github.com/follow-redirects/follow-redirects/commit/d8914f7982403ea096b39bd594a00ee9d3b7e224""><code>d8914f7</code></a>
Preserve fragment in responseUrl.</li>
<li>See full diff in <a
href=""https://github.com/follow-redirects/follow-redirects/compare/v1.15.4...v1.15.6"">compare
view</a></li>
</ul>
</details>
<br />


[![Dependabot compatibility
score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=follow-redirects&package-manager=npm_and_yarn&previous-version=1.15.4&new-version=1.15.6)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)

Dependabot will resolve any conflicts with this PR as long as you don't
alter it yourself. You can also trigger a rebase manually by commenting
`@dependabot rebase`.

[//]: # (dependabot-automerge-start)
[//]: # (dependabot-automerge-end)

---

<details>
<summary>Dependabot commands and options</summary>
<br />

You can trigger Dependabot actions by commenting on this PR:
- `@dependabot rebase` will rebase this PR
- `@dependabot recreate` will recreate this PR, overwriting any edits
that have been made to it
- `@dependabot merge` will merge this PR after your CI passes on it
- `@dependabot squash and merge` will squash and merge this PR after
your CI passes on it
- `@dependabot cancel merge` will cancel a previously requested merge
and block automerging
- `@dependabot reopen` will reopen this PR if it is closed
- `@dependabot close` will close this PR and stop Dependabot recreating
it. You can achieve the same result by closing it manually
- `@dependabot show <dependency name> ignore conditions` will show all
of the ignore conditions of the specified dependency
- `@dependabot ignore this major version` will close this PR and stop
Dependabot creating any more for this major version (unless you reopen
the PR or upgrade to it yourself)
- `@dependabot ignore this minor version` will close this PR and stop
Dependabot creating any more for this minor version (unless you reopen
the PR or upgrade to it yourself)
- `@dependabot ignore this dependency` will close this PR and stop
Dependabot creating any more for this dependency (unless you reopen the
PR or upgrade to it yourself)
You can disable automated security fix PRs for this repo from the
[Security Alerts
page](https://github.com/facebook/react/network/alerts).

</details>

Signed-off-by: dependabot[bot] <support@github.com>
Co-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>",dependabot[bot],2024-03-18T15:59:57Z
c94110c5f3d66838c22bb23e8abfbfd8e58a55b9,"Bump follow-redirects from 1.15.4 to 1.15.6 in /fixtures/concurrent/time-slicing (#28572)

Bumps
[follow-redirects](https://github.com/follow-redirects/follow-redirects)
from 1.15.4 to 1.15.6.
<details>
<summary>Commits</summary>
<ul>
<li><a
href=""https://github.com/follow-redirects/follow-redirects/commit/35a517c5861d79dc8bff7db8626013d20b711b06""><code>35a517c</code></a>
Release version 1.15.6 of the npm package.</li>
<li><a
href=""https://github.com/follow-redirects/follow-redirects/commit/c4f847f85176991f95ab9c88af63b1294de8649b""><code>c4f847f</code></a>
Drop Proxy-Authorization across hosts.</li>
<li><a
href=""https://github.com/follow-redirects/follow-redirects/commit/8526b4a1b2ab3a2e4044299377df623a661caa76""><code>8526b4a</code></a>
Use GitHub for disclosure.</li>
<li><a
href=""https://github.com/follow-redirects/follow-redirects/commit/b1677ce00110ee50dc5da576751d39b281fc4944""><code>b1677ce</code></a>
Release version 1.15.5 of the npm package.</li>
<li><a
href=""https://github.com/follow-redirects/follow-redirects/commit/d8914f7982403ea096b39bd594a00ee9d3b7e224""><code>d8914f7</code></a>
Preserve fragment in responseUrl.</li>
<li>See full diff in <a
href=""https://github.com/follow-redirects/follow-redirects/compare/v1.15.4...v1.15.6"">compare
view</a></li>
</ul>
</details>
<br />


[![Dependabot compatibility
score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=follow-redirects&package-manager=npm_and_yarn&previous-version=1.15.4&new-version=1.15.6)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)

Dependabot will resolve any conflicts with this PR as long as you don't
alter it yourself. You can also trigger a rebase manually by commenting
`@dependabot rebase`.

[//]: # (dependabot-automerge-start)
[//]: # (dependabot-automerge-end)

---

<details>
<summary>Dependabot commands and options</summary>
<br />

You can trigger Dependabot actions by commenting on this PR:
- `@dependabot rebase` will rebase this PR
- `@dependabot recreate` will recreate this PR, overwriting any edits
that have been made to it
- `@dependabot merge` will merge this PR after your CI passes on it
- `@dependabot squash and merge` will squash and merge this PR after
your CI passes on it
- `@dependabot cancel merge` will cancel a previously requested merge
and block automerging
- `@dependabot reopen` will reopen this PR if it is closed
- `@dependabot close` will close this PR and stop Dependabot recreating
it. You can achieve the same result by closing it manually
- `@dependabot show <dependency name> ignore conditions` will show all
of the ignore conditions of the specified dependency
- `@dependabot ignore this major version` will close this PR and stop
Dependabot creating any more for this major version (unless you reopen
the PR or upgrade to it yourself)
- `@dependabot ignore this minor version` will close this PR and stop
Dependabot creating any more for this minor version (unless you reopen
the PR or upgrade to it yourself)
- `@dependabot ignore this dependency` will close this PR and stop
Dependabot creating any more for this dependency (unless you reopen the
PR or upgrade to it yourself)
You can disable automated security fix PRs for this repo from the
[Security Alerts
page](https://github.com/facebook/react/network/alerts).

</details>

Signed-off-by: dependabot[bot] <support@github.com>
Co-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>",dependabot[bot],2024-03-18T15:56:04Z
d79807537b85cb3e58bc6cc4df00b873fe652aa1,"Bump follow-redirects from 1.13.0 to 1.15.6 in /fixtures/dom (#28560)

Bumps
[follow-redirects](https://github.com/follow-redirects/follow-redirects)
from 1.13.0 to 1.15.6.
<details>
<summary>Commits</summary>
<ul>
<li><a
href=""https://github.com/follow-redirects/follow-redirects/commit/35a517c5861d79dc8bff7db8626013d20b711b06""><code>35a517c</code></a>
Release version 1.15.6 of the npm package.</li>
<li><a
href=""https://github.com/follow-redirects/follow-redirects/commit/c4f847f85176991f95ab9c88af63b1294de8649b""><code>c4f847f</code></a>
Drop Proxy-Authorization across hosts.</li>
<li><a
href=""https://github.com/follow-redirects/follow-redirects/commit/8526b4a1b2ab3a2e4044299377df623a661caa76""><code>8526b4a</code></a>
Use GitHub for disclosure.</li>
<li><a
href=""https://github.com/follow-redirects/follow-redirects/commit/b1677ce00110ee50dc5da576751d39b281fc4944""><code>b1677ce</code></a>
Release version 1.15.5 of the npm package.</li>
<li><a
href=""https://github.com/follow-redirects/follow-redirects/commit/d8914f7982403ea096b39bd594a00ee9d3b7e224""><code>d8914f7</code></a>
Preserve fragment in responseUrl.</li>
<li><a
href=""https://github.com/follow-redirects/follow-redirects/commit/65858205e59f1e23c9bf173348a7a7cbb8ac47f5""><code>6585820</code></a>
Release version 1.15.4 of the npm package.</li>
<li><a
href=""https://github.com/follow-redirects/follow-redirects/commit/7a6567e16dfa9ad18a70bfe91784c28653fbf19d""><code>7a6567e</code></a>
Disallow bracketed hostnames.</li>
<li><a
href=""https://github.com/follow-redirects/follow-redirects/commit/05629af696588b90d64e738bc2e809a97a5f92fc""><code>05629af</code></a>
Prefer native URL instead of deprecated url.parse.</li>
<li><a
href=""https://github.com/follow-redirects/follow-redirects/commit/1cba8e85fa73f563a439fe460cf028688e4358df""><code>1cba8e8</code></a>
Prefer native URL instead of legacy url.resolve.</li>
<li><a
href=""https://github.com/follow-redirects/follow-redirects/commit/72bc2a4229bc18dc9fbd57c60579713e6264cb92""><code>72bc2a4</code></a>
Simplify _processResponse error handling.</li>
<li>Additional commits viewable in <a
href=""https://github.com/follow-redirects/follow-redirects/compare/v1.13.0...v1.15.6"">compare
view</a></li>
</ul>
</details>
<br />


[![Dependabot compatibility
score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=follow-redirects&package-manager=npm_and_yarn&previous-version=1.13.0&new-version=1.15.6)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)

Dependabot will resolve any conflicts with this PR as long as you don't
alter it yourself. You can also trigger a rebase manually by commenting
`@dependabot rebase`.

[//]: # (dependabot-automerge-start)
[//]: # (dependabot-automerge-end)

---

<details>
<summary>Dependabot commands and options</summary>
<br />

You can trigger Dependabot actions by commenting on this PR:
- `@dependabot rebase` will rebase this PR
- `@dependabot recreate` will recreate this PR, overwriting any edits
that have been made to it
- `@dependabot merge` will merge this PR after your CI passes on it
- `@dependabot squash and merge` will squash and merge this PR after
your CI passes on it
- `@dependabot cancel merge` will cancel a previously requested merge
and block automerging
- `@dependabot reopen` will reopen this PR if it is closed
- `@dependabot close` will close this PR and stop Dependabot recreating
it. You can achieve the same result by closing it manually
- `@dependabot show <dependency name> ignore conditions` will show all
of the ignore conditions of the specified dependency
- `@dependabot ignore this major version` will close this PR and stop
Dependabot creating any more for this major version (unless you reopen
the PR or upgrade to it yourself)
- `@dependabot ignore this minor version` will close this PR and stop
Dependabot creating any more for this minor version (unless you reopen
the PR or upgrade to it yourself)
- `@dependabot ignore this dependency` will close this PR and stop
Dependabot creating any more for this dependency (unless you reopen the
PR or upgrade to it yourself)
You can disable automated security fix PRs for this repo from the
[Security Alerts
page](https://github.com/facebook/react/network/alerts).

</details>

Signed-off-by: dependabot[bot] <support@github.com>
Co-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>",dependabot[bot],2024-03-18T15:55:56Z
4d686a2da138cad9e76c7de9feadd81ca2aa29e5,"Performance: avoid triggering map deopt in V8 (#28569)

The shape of the objects changed by this PR are both created in 2
locations with 2 different shapes, which most JS engines won't like.
I've noticed this in particular in V8 while benchmarking production
code.


https://github.com/facebook/react/blob/1293047d6063f3508af15e68cca916660ded791e/packages/react-reconciler/src/ReactFiberCacheComponent.js#L66-L77


https://github.com/facebook/react/blob/1293047d6063f3508af15e68cca916660ded791e/packages/react-reconciler/src/ReactFiberHostContext.js#L47-L54


https://github.com/facebook/react/blob/1293047d6063f3508af15e68cca916660ded791e/packages/react-reconciler/src/ReactFiberHooks.js#L3530-L3531


https://github.com/facebook/react/blob/1293047d6063f3508af15e68cca916660ded791e/packages/react-reconciler/src/ReactFiberHooks.js#L3492-L3493",Rom Grk,2024-03-18T15:54:34Z
45d56071b8ce1dbccf1765acf3867263fe3e595b,"Bump follow-redirects from 1.15.4 to 1.15.6 (#28573)

Bumps
[follow-redirects](https://github.com/follow-redirects/follow-redirects)
from 1.15.4 to 1.15.6.
<details>
<summary>Commits</summary>
<ul>
<li><a
href=""https://github.com/follow-redirects/follow-redirects/commit/35a517c5861d79dc8bff7db8626013d20b711b06""><code>35a517c</code></a>
Release version 1.15.6 of the npm package.</li>
<li><a
href=""https://github.com/follow-redirects/follow-redirects/commit/c4f847f85176991f95ab9c88af63b1294de8649b""><code>c4f847f</code></a>
Drop Proxy-Authorization across hosts.</li>
<li><a
href=""https://github.com/follow-redirects/follow-redirects/commit/8526b4a1b2ab3a2e4044299377df623a661caa76""><code>8526b4a</code></a>
Use GitHub for disclosure.</li>
<li><a
href=""https://github.com/follow-redirects/follow-redirects/commit/b1677ce00110ee50dc5da576751d39b281fc4944""><code>b1677ce</code></a>
Release version 1.15.5 of the npm package.</li>
<li><a
href=""https://github.com/follow-redirects/follow-redirects/commit/d8914f7982403ea096b39bd594a00ee9d3b7e224""><code>d8914f7</code></a>
Preserve fragment in responseUrl.</li>
<li>See full diff in <a
href=""https://github.com/follow-redirects/follow-redirects/compare/v1.15.4...v1.15.6"">compare
view</a></li>
</ul>
</details>
<br />


[![Dependabot compatibility
score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=follow-redirects&package-manager=npm_and_yarn&previous-version=1.15.4&new-version=1.15.6)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)

Dependabot will resolve any conflicts with this PR as long as you don't
alter it yourself. You can also trigger a rebase manually by commenting
`@dependabot rebase`.

[//]: # (dependabot-automerge-start)
[//]: # (dependabot-automerge-end)

---

<details>
<summary>Dependabot commands and options</summary>
<br />

You can trigger Dependabot actions by commenting on this PR:
- `@dependabot rebase` will rebase this PR
- `@dependabot recreate` will recreate this PR, overwriting any edits
that have been made to it
- `@dependabot merge` will merge this PR after your CI passes on it
- `@dependabot squash and merge` will squash and merge this PR after
your CI passes on it
- `@dependabot cancel merge` will cancel a previously requested merge
and block automerging
- `@dependabot reopen` will reopen this PR if it is closed
- `@dependabot close` will close this PR and stop Dependabot recreating
it. You can achieve the same result by closing it manually
- `@dependabot show <dependency name> ignore conditions` will show all
of the ignore conditions of the specified dependency
- `@dependabot ignore this major version` will close this PR and stop
Dependabot creating any more for this major version (unless you reopen
the PR or upgrade to it yourself)
- `@dependabot ignore this minor version` will close this PR and stop
Dependabot creating any more for this minor version (unless you reopen
the PR or upgrade to it yourself)
- `@dependabot ignore this dependency` will close this PR and stop
Dependabot creating any more for this dependency (unless you reopen the
PR or upgrade to it yourself)
You can disable automated security fix PRs for this repo from the
[Security Alerts
page](https://github.com/facebook/react/network/alerts).

</details>

Signed-off-by: dependabot[bot] <support@github.com>
Co-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>",dependabot[bot],2024-03-18T15:49:53Z
38327309a4172a52cf94e8e264990bedafc1df6e,"Update isConcurrent RTR option usage (#28546)

Reverting some of https://github.com/facebook/react/pull/27804 which
renamed this option to stable. This PR just replaces internal usage to
make upcoming PRs cleaner.

Keeping isConcurrent unstable for the next major release in order to
enable a broader deprecation of RTR and be consistent with concurrent
rendering everywhere for next major.
(https://github.com/facebook/react/pull/28498)
- Next major will use concurrent root
- The old behavior (legacy root by default, concurrent root with
unstable option) will be preserved for React Native until new
architecture is fully shipped.
- Flag and legacy root usage can be removed after RN dependency is
unblocked without an additional breaking change",Jack Pope,2024-03-18T15:35:16Z
b09e102ff1e2aaaf5eb6585b04609ac7ff54a5c8,"[Fizz] Prevent uncloned large precomputed chunks without relying on render-time assertions (#28568)

A while back we implemented a heuristic that if a chunk was large it was
assumed to be produced by the render and thus was safe to stream which
results in transferring the underlying object memory. Later we ran into
an issue where a precomputed chunk grew large enough to trigger this
hueristic and it started causing renders to fail because once a second
render had occurred the precomputed chunk would not have an underlying
buffer of bytes to send and these bytes would be omitted from the
stream. We implemented a technique to detect large precomputed chunks
and we enforced that these always be cloned before writing.
Unfortunately our test coverage was not perfect and there has been for a
very long time now a usage pattern where if you complete a boundary in
one flush and then complete a boundary that has stylehsheet dependencies
in another flush you can get a large precomputed chunk that was not
being cloned to be sent twice causing streaming errors.

I've thought about why we even went with this solution in the first
place and I think it was a mistake. It relies on a dev only check to
catch paired with potentially version specific order of operations on
the streaming side. This is too unreliable. Additionally the low limit
of view size for Edge is not used in Node.js but there is not real
justification for this.

In this change I updated the view size for edge streaming to match Node
at 2048 bytes which is still relatively small and we have no data one
way or another to preference 512 over this. Then I updated the assertion
logic to error anytime a precomputed chunk exceeds the size. This
eliminates the need to clone these chunks by just making sure our view
size is always larger than the largest precomputed chunk we can possibly
write. I'm generally in favor of this for a few reasons.

First, we'll always know during testing whether we've violated the limit
as long as we exercise each stream config because the precomputed chunks
are created in module scope. Second, we can always split up large chunks
so making sure the precomptued chunk is smaller than whatever view size
we actually desire is relatively trivial.",Josh Story,2024-03-16T19:39:37Z
1293047d6063f3508af15e68cca916660ded791e,Fix log assertion in cancels tasks in Scheduler-test (#28562),sweetliquid,2024-03-15T20:21:46Z
4d85c666a3e0c433453a73bdb78ee9cbdfb3fc82,Remove excess `ms` prop from Suspense tests (#28566),Sebastian Silbermann,2024-03-15T19:57:42Z
9372c63116fc1e855c51d93d83f5150661371ec3,"Revert rollout state of enableCache in React Native to next major only (#28565)

## Summary

We're working on enabling the use of microtasks in React Native by
default when using the new architecture. To enable this we need to
synchronize the RN renderers from React, but doing this causes an error
because the renderers now rely on an object defined in
`React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED`
(`ReactCurrentCache`) that's hasn't been released as a stable version
yet (cache).

This reverts the change done in #28519 to avoid enabling the cache API
in RN until we release a new version of React in npm.

## How did you test this change?

Manually built the RN renderer, copied it to the RN repository and
tested e2e in RNTester.",Rubén Norte,2024-03-15T18:02:46Z
a870b2d5494351d75b68c3d9baf03a52fd40a8ef,"Make `enableNewBooleanProps` www dynamic (#28559)

Feature: https://github.com/facebook/react/pull/24730",Sebastian Silbermann,2024-03-14T15:50:11Z
7268dacf70cd6a7f5705a19053aad46b5289ab72,Devtools: Ensure component control flow is consistent with commit when using `useDeferredValue (#28508),Sebastian Silbermann,2024-03-14T14:41:50Z
a540f536162f9ddcce5bb63260e99b21eb603744,Add passing exhaustive-deps test for type parameters in TypeScript (#20432),Sebastian Silbermann,2024-03-14T14:41:37Z
9ffe9102ffd08ca7a56c60aa6952208890d213ce,Fix a spelling mistake. (#28555),bubucuo,2024-03-14T14:04:44Z
bbc571aee431d44799ae6a70832ea834325a5af9,React DOM: Support boolean values for `inert` prop (#24730),Sebastian Silbermann,2024-03-13T22:10:41Z
d5e2d9f8d594f81693b24d0472b5109388cdbd0c,"Handle fbt:param with only leading or trailing whitespace 

Fixes T180504437. We expected `<fbt:param>` to always have no surrounding 
whitespace or have both leading and trailing whitespace, it can have one but not 
the other, though such cases are rare in practice.",Joe Savona,2024-03-13T21:54:39Z
bf64a826a4881d9ee25500e7cdab416797e12aab,Repro for fbt with unexpected child count,Joe Savona,2024-03-13T21:54:35Z
d5eca2ed8584fd9cbb75403b34741c0f058db395,"Repro for scope with no declarations (already fixed on this stack) 

Repro from T180504728 which reproduced internally and on playground, neither of 
which have #2687 yet. That PR (earlier in this stack) already fixes the issue, 
so i'm just adding the repro to help prevent regressions.",Joe Savona,2024-03-15T15:26:43Z
ec3d36b865afa296e92e392618cf06bf2d717092,"Convert unhandled value block terminal to todo 

While i'm here, we know that there are a variety of cases that are not supported 
yet around combining value blocks with other syntax constructs. Since we're 
aware of these cases and detect them, we can make this a todo instead of an 
invariant.",Joe Savona,2024-03-14T05:25:18Z
1301e68ae6e47a9f67d9ca100e1d57668c993c9f,"Add todo for label as value block terminal 

We need to revisit the conversion from value blocks into ReactiveFunction. Or 
just revisit ReactiveFunction altogether (see my post about what this would look 
like). For now, makes this case a todo.",Joe Savona,2024-03-14T05:20:59Z
d70b2c2c4e85c2a7061214c15a8ff13167d10422,"Repro for unexpected label as value block terminal 

This was one of the last invariants firing internally, this PR adds a minimal 
repro and the next PR makes it a todo.",Joe Savona,2024-03-14T05:20:56Z
459679f91e94e868db7f1b5109a44b4bcce0351c,"Support type alias syntax 

""Support"" in the sense of dropping these on the floor and compiling, rather than 
bailing out with a todo. 

We already don't make any guarantees about which type annotations we'll preserve 
through to the output, so it seems fine for now to just drop type aliases.",Joe Savona,2024-03-14T05:17:19Z
1b5ae0638ee36b7f68a89641f6808c1afc9b217e,"Fix block scoping of declarations with early return 

I addressed some of the cases that lead to this invariant but there were still 
more. In this case, we have scopes like this: 

``` 

scope @1 declarations=[t$0] { 

let t$0 = ArrayExpression [] 

if (...) { 

return null; 

} 

} 

scope @2 deps=[t$0] declarations=[t$1] { 

let t$1 = Jsx children=[t$0] ... 

} 

``` 

Because scope 1 has an early return, PropagateEarlyReturns wraps its contents in 
a label and converts the returns to breaks: 

``` 

scope @1 declarations=[t$0] earlyReturn={t$2} { 

let t$2 

bb0: { 

let t$0 = ArrayExpression [] 

if (...) { 

t$2 = null; 

break bb0; 

} 

} 

} 

scope @2 deps=[t$0] declarations=[t$1] { 

let t$1 = Jsx children=[t$0] ... 

} 

``` 

But then MergeReactiveScopesThatInvalidateTogether smushes them together: 

``` 

scope @1 declarations=[t$1] earlyReturn={t$2} { 

let t$2 

bb0: { 

let t$0 = ArrayExpression [] // <--- Oops! We're inside a block now 

if (...) { 

t$2 = null; 

break bb0; 

} 

} 

let t$1 = Jsx children=[t$0] ... 

} 

``` 

Note that the `t$0` binding is now created inside the labeled block, so it's no 
longer accessible to the Jsx instruction which follows the labeled block. This 
isn't an issue with promoting temporaries or propagating outputs, but a simple 
issue of the labeled block (used for early return) introducing a new block 
scope. The solution here is to simply reorder the passes so that we transform 
for early returns after other optimizations. This means the jsx element will 
basically move inside the labeled block, solving the scoping issue: 

``` 

scope @1 declarations=[t$1] earlyReturn={t$2} { 

let t$2 

bb0: { 

let t$0 = ArrayExpression [] // ok, same block scope as its use 

if (...) { 

t$2 = null; 

break bb0; 

} 

let t$1 = Jsx children=[t$0] // note this moved inside the labeled block 

} 

} 

```",Joe Savona,2024-03-14T04:29:58Z
f7ca10a0c7085002076bf85a24a9a4b07598e5f7,"Repro for ""no value for temporary"" 

I addressed some of the cases that lead to this invariant but there were still 
more. In this case, we have scopes like this: 

``` 

scope @1 declarations=[t$0] { 

let t$0 = ArrayExpression [] 

if (...) { 

return null; 

} 

} 

scope @2 deps=[t$0] declarations=[t$1] { 

let t$1 = Jsx children=[t$0] ... 

} 

``` 

Because scope 1 has an early return, PropagateEarlyReturns wraps its contents in 
a label and converts the returns to breaks: 

``` 

scope @1 declarations=[t$0] earlyReturn={t$2} { 

let t$2 

bb0: { 

let t$0 = ArrayExpression [] 

if (...) { 

t$2 = null; 

break bb0; 

} 

} 

} 

scope @2 deps=[t$0] declarations=[t$1] { 

let t$1 = Jsx children=[t$0] ... 

} 

``` 

But then MergeReactiveScopesThatInvalidateTogether smushes them together: 

``` 

scope @1 declarations=[t$1] earlyReturn={t$2} { 

let t$2 

bb0: { 

let t$0 = ArrayExpression [] // <--- Oops! We're inside a block now 

if (...) { 

t$2 = null; 

break bb0; 

} 

} 

let t$1 = Jsx children=[t$0] ... 

} 

``` 

Note that the `t$0` binding is now created inside the labeled block, so it's no 
longer accessible to the Jsx instruction which follows the labeled block. This 
isn't an issue with promoting temporaries or propagating outputs, but a simple 
issue of the labeled block (used for early return) introducing a new block 
scope. The solution (in the next PR) is to simply reorder the passes so that we 
transform for early returns after other optimizations. This means the jsx 
element will basically move inside the labeled block, solving the scoping issue: 

``` 

scope @1 declarations=[t$1] earlyReturn={t$2} { 

let t$2 

bb0: { 

let t$0 = ArrayExpression [] // ok, same block scope as its use 

if (...) { 

t$2 = null; 

break bb0; 

} 

let t$1 = Jsx children=[t$0] // note this moved inside the labeled block 

} 

} 

```",Joe Savona,2024-03-14T04:29:54Z
72d374e9788c6f130c97087b8a2494cabb8954cb,"[linter] rename ReactForgetDiagnostics to ReactCompilerRule 

[linter] rename ReactForgetDiagnostics to ReactCompilerRule",Jan Kassens,2024-03-14T15:53:32Z
ca8e0d4527302f6af6a7890ba6e19b5eb5ebaa97,"Support multiple declarations in for init 

This was an oversight in codegen. The entire pipeline supports multiple values 
in a for initializer, but codegen was dropping all but the first initializer.",Joe Savona,2024-03-13T22:45:50Z
fe29f46de8ef57d30c29ccffde780927c1c986f5,Repro for multiple declarations in for initializer codegen issue,Joe Savona,2024-03-13T22:31:51Z
2940440dfb011173758e332da88ede7720b2509b,"Fix for mutable ranges ended early with interleaving 

Fixes T180504437. In MergeOverlappingReactiveScopes we track the active scopes 
and mark them as ""ended"" when reaching the first instruction after their mutable 
range. However, in cases of interleaving that will be merged, we could 
previously mark a scope as complete when it's original range was completed, even 
though the range would get extended post-merge. The fix here detects 
interleaving earlier, and eagerly updates the mutable ranges of the merged 
scopes to ensure that neither is ""ended"" earlier than it should. 

The repro here fails without this change.",Joe Savona,2024-03-13T20:52:29Z
79e3fc0acb3c4d3b8cd1caf86880b764e657ec42,"Fix for method call not memoizing in same scope as outer call 

Fixes T175282980. InferReactiveScopeVariables had logic to force assigning a 
scope to MethodCall property lookups with the idea of forcing the method call 
lookup to be in the same scope as the method call itself. But this doesn't work 
if we never assign a scope to the method call! That can happen if we're able to 
infer that the method call produces a primitive and doesn't need memoization. 

This PR changes things so that: 

* InferReactiveScopeVariables no longer assumes that MethodCall property values 
need a scope 

* We run a separate pass that ensures that _if_ a MethodCall has a scope, that 
it's property is in the scope, and that otherwise its property doesn't get a 
scope. This is similar to the existing passes that force a single scope for 
related instructions like ObjectMethod+ObjectExpression and fbt operands/calls.",Joe Savona,2024-03-13T20:52:29Z
dc7ed065c0d77e5e3df689f906f3a941032257b5,"Fix missing declaration invariant for ""for"" within try/catch 

Fixes T180509722. What happened is that the logic in LeaveSSA to find 
declarations within for initializers wasn't working with try/catch because the 
initializer block gets broken up with a maybe-throw after every instruction that 
can throw. These maybe-throws can then get turned into gotos by 
PruneMaybeThrows, so LeaveSSA has to handle both cases. 

The new logic scans from the start of the init block until reaching the end, and 
creates declarations for all StoreLocals. Note that we don't yet support 
maybe-throw in value blocks — that's already a todo — so the change here simply 
allows us to compile farther until reaching that other todo. But i've 
double-checked the HIR and it looks correct for this case, so it should just 
work once we fix that todo. I've also added a comment to help us remember (and 
of course, we'd have to add a snap fixture too)",Joe Savona,2024-03-13T20:52:28Z
b666bd163759df5afa8bcadc2c14f87f0d294a49,"[lint] do not report issues when a matching flow suppression is present 

Based on implementation of a similar case in D54776832.",Jan Kassens,2024-03-13T15:40:35Z
bb0944fe5bdd619be918621a9a1647204d6e7ce1,"[RN] Use microtasks in the RN renderer based on a global flag defined by RN (#28472)

## Summary

We want to enable the new event loop in React Native
(https://github.com/react-native-community/discussions-and-proposals/pull/744)
for all users in the new architecture (determined by the use of
bridgeless, not by the use of Fabric). In order to leverage that, we
need to also set the flag for the React reconciler to use microtasks for
scheduling (so we'll execute them at the right time in the new event
loop).

This migrates from the previous approach using a dynamic flag (to be
used at Meta) with the check of a global set by React Native. The reason
for doing this is:
1) We still need to determine this dynamically in OSS (based on
Bridgeless, not on Fabric).
2) We still need the ability to configure the behavior at Meta, and for
internal build system reasons we cannot access the flag that enables
microtasks in
[`ReactNativeFeatureFlags`](https://github.com/facebook/react-native/blob/6c28c87c4d5d8a9f5be5e02cd7d3eba5b4aaca8c/packages/react-native/src/private/featureflags/ReactNativeFeatureFlags.js#L121).

## How did you test this change?

Manually synchronized the changes to React Native and ran all tests for
the new architecture on it. Also tested manually.

> [!NOTE]
> This change depends on
https://github.com/facebook/react-native/pull/43397 which has been
merged already",Rubén Norte,2024-03-13T10:00:10Z
d46989150e9225f2bf299dbca2270596d0829a58,"Disable legacy context (#27991)

Disable legacy context

This enables the `disableLegacyContext` flag for web and React Native.",Jan Kassens,2024-03-12T22:00:26Z
17eaacaac167addf0c4358b4983f054073a0626d,"Add pending state to useFormState (#28514)

## Overview

Adds a `pending` state to useFormState, which will be replaced by
`useActionState` in the next diff. We will keep `useFormState` around
for backwards compatibility, but functionally it will work the same as
`useActionState`, which has an `isPending` state returned.",Ricky,2024-03-12T19:50:11Z
3e6bc7d2d7098d9c8a30ba6e7a877df70f4d8d34,"Revert ""Land enableClientRenderFallbackOnTextMismatch for www"" (#28548)

We're looking to run further experiments on this.

Reverts facebook/react#28538",Jan Kassens,2024-03-12T19:29:41Z
eb33bd74779df6e91c54a47e8f07b22b72a073c7,"Remove renderSubtreeIntoContainer_DO_NOT_USE (#28526)

Since D54648741 we no longer need this shim. 

NOTE: There is still some work left to remove the
`unstable_renderSubtreeIntoContainer` export.",Jan Kassens,2024-03-12T15:31:34Z
89021fb4ec9aa82194b0788566e736a4cedfc0e4,"Remove invokeGuardedCallback and replay trick (#28515)

We broke the ability to ""break on uncaught exceptions"" by adding a
try/catch higher up in the scheduling. We're giving up on fixing that so
we can remove the replay trick inside an event handler.

The issue with that approach is that we end up double logging a lot of
errors in DEV since they get reported to the page.

It's also a lot of complexity around this feature.",Sebastian Markbåge,2024-03-12T00:17:07Z
7d6f1e3c13686272c1d76813992d4e782fcb84e6,Remove ReactTestUtils from ReactBrowserEventEmitter-test (#28533),Sebastian Silbermann,2024-03-11T21:11:52Z
9c48fb25ecc467b37abb3e145c6e25e311dcdde5,"Remove ReactTestUtils from refs-destruction-test (#28532)

```diff
-expect(ReactTestUtils.isDOMComponent(maybeElement)).toBe(true);
+expect(maybeElement).toBeInstanceOf(Element);
```

It's not equivalent since `isDOMComponent` checks `maybeElement.nodeType
=== Element.ELEMENT_NODE && !!maybeElement.tagName` but `instanceof`
check seems sufficient here. Checking `nodeType` is mostly for
cross-realm checks and checking falsy `tagName` seems like a check
specifically for incomplete DOM implementations because tagName can't be
empty by spec I believe.",Sebastian Silbermann,2024-03-11T21:11:40Z
58cd0ef35decebd1f29609a25f12ca030bf40c97,Remove ReactTestUtils from ReactLegacyUpdates-test (#28531),Sebastian Silbermann,2024-03-11T21:11:31Z
56d96ba2033496e3458631b02e079c0bf73235e7,"[forget-runtime] Remove invariant dep 

Reduces a dep needed to be installed by users of the polyfill",Lauren Tan,2024-03-11T20:31:46Z
eebdbf4454e3791bd3fc4b0c7186cdee581863cf,"Remove RTR from ReactProfiler-test (#28407)

## Summary

Internal cleanup of ReactTestRenderer

## How did you test this change?

`yarn test packages/react/src/__tests__/ReactProfiler-test.internal.js`",Jack Pope,2024-03-11T19:07:58Z
605b7c018d61601e72f72c232b0c965b0164914e,"Concurrent rendering in ReactDevToolsHooksIntegration-test (#28522)

## Summary

We need to unblock flipping the default for RTR to be concurrent
rendering. Update ReactDevToolsHooksIntegration-test to use
`unstable_isConcurrent` in place.

## How did you test this change?

`yarn test
packages/react-debug-tools/src/__tests__/ReactDevToolsHooksIntegration-test.js`",Jack Pope,2024-03-11T19:06:35Z
e09c631afff3c7284cabcd9368d59fcfe3b7ec1e,"[be][snap] Make testfilter file recognize glob patterns, remove @skip",Mofei Zhang,2024-03-11T17:55:24Z
c84b81797298cccc95e653ba7387063ceee7268a,[be][snap] Warm up workers when in watch + filter mode,Mofei Zhang,2024-03-11T17:55:22Z
2fc910d58025d143562fe0f2287af9d510a91946,"[optim] NewExpressions do not mutate the caller (class type) 

``` 

function Foo() { 

const MyClass = getClass(); 

// following line is not expected to change MyClass 

return new MyClass(); 

} 

```",Mofei Zhang,2024-03-11T17:03:45Z
56e20051c3c1611f9495081d01f1946184332c6b,"Land enableClientRenderFallbackOnTextMismatch for www (#28538)

This is landed, we can hardcode the flag",Ricky,2024-03-11T15:40:48Z
0d1ae5d753044fae99bc37a7815aa947447de3f8,"cleanup enableProfilerNestedUpdateScheduledHook feature flag (#28509)

## Summary

Looks like this was added years ago for instrumentation at meta that
never ended up rolling out. Should be safe to clean up.

## How did you test this change?
`yarn test`",Noah Lemen,2024-03-11T15:37:17Z
dfaed5582550f11b27aae967a8e7084202dd2d90,"Remove remaining usages of ReactTestUtils in tests unrelated to `react-dom/test-util` (#28534)

Batched the remaining usages since these were straight forward.
Completes removal of `ReactTestUtils` from tests unrelated to
`react-dom/test-util` together with:
- https://github.com/facebook/react/pull/28531
- https://github.com/facebook/react/pull/28532
- https://github.com/facebook/react/pull/28533",Sebastian Silbermann,2024-03-11T12:27:03Z
706d95f486fbdec35b771ea4aaf3e78feb907249,"Configure Dynamic Feature Flags for React Native (#28527)

## Summary

This PR is a subset of https://github.com/facebook/react/pull/28425,
which only includes the feature flags that will be configured as
dynamic.

The following list summarizes the feature flag changes:

* RN FB
  * Change to Dynamic
    * consoleManagedByDevToolsDuringStrictMode
    * enableAsyncActions
    * enableDeferRootSchedulingToMicrotask
    * enableRenderableContext
    * useModernStrictMode

## How did you test this change?

Ran the following successfully:

```
$ yarn test
$ yarn flow native
$ yarn flow fabric
```",Timothy Yung,2024-03-09T00:14:09Z
71c4699de36579097098b690b668abf5a0cf9fb6,"Upgrade flow to 0.230.0 (#28528)

Upgrade flow to 0.230.0

Ran
```
yarn add -W flow-bin flow-remove-types hermes-parser hermes-eslint
```",Jan Kassens,2024-03-08T22:39:27Z
df84152780880dfc159e9b8089e5e2e3ebac12aa,"[hir] Attach fnType to HIRFunction 

--- 

(This came out of running a sync and observing hundreds of bailouts due from 
this validation) 

Reading `fnType` from environment overgeneralizes, as inner functions are 
usually not the type of the outer react function. 

``` 

// Component type 

function Component() { 

// not Component type 

const helper = () => {...}; 

} 

``` 

Let's attach fnType to `HIRFunction` and use that for our inference + 
validations",Mofei Zhang,2024-03-08T22:06:37Z
16852386a5ac9ccffa265ad96f2d7e1db544aecb,"Support more cases of reassignment within value blocks 

Fixes T175283039 — it's totally fine to have a StoreLocal as an instruction in a 
value block, so long as its a reassignment.",Joe Savona,2024-03-08T21:59:22Z
5f3ed3f7241df57cfbc98edabf84100ceea7bfb1,"Fixture for reassignment within value block 

Fixture from T175283039, a reassignment within an expression can sometimes 
generate a StoreLocal within a value block. Depending on the case this can end 
up as the last instruction of the block, which then hits an invariant.",Joe Savona,2024-03-08T21:59:21Z
052f5fe973e2d5c08293509063163b0b63a6d948,"Todo for ""unreachable"" possibly-hoisted functions 

Adds a todo in HIRBuilder, before we prune unreachable code we check if there 
were any function expressions. Realistically that's only going to occur for 
hoisted functions, so this lets us target a todo rather than hit an invariant.",Joe Savona,2024-03-08T21:59:20Z
7605e89a50baf37780976f33a441086a3793d643,"Repro for ""unreachable"" hoisted function 

For T175282529. We already detect hoisted functions and have a specific todo for 
them, but in this case the function is in unreachable code that gets pruned 
during BuildHIR. The later check for hoisted functions doesn't find it.",Joe Savona,2024-03-08T21:59:20Z
4e2fe10fa388d499ba20a2821c9ddb1a6b129320,"Configure ""Always On"" Feature Flags for React Native (#28519)

## Summary

This PR is a subset of https://github.com/facebook/react/pull/28425,
which only includes the feature flags that will be configured as ""always
on"" (i.e. not ""dynamic"").

The following list summarizes the feature flag changes:

* RN FB
  * Always Enable
    * enableCache
    * enableCustomElementPropertySupport
* RN OSS
  * Always Enable
    * disableLegacyContext
    * enableCache
    * enableCustomElementPropertySupport
* RN Test
  * Always Enable
    * disableModulePatternComponents
    * enableCustomElementPropertySupport

## How did you test this change?

Ran the following successfully:

```
$ yarn test
$ yarn flow native
$ yarn flow fabric
```",Timothy Yung,2024-03-08T17:20:03Z
338dddc089d5865761219f02b5175db85c54c489,"Remove RTR from DebugTracing-test (#28411)

## Summary

Internal cleanup of ReactTestRenderer

## How did you test this change?

`yarn test
packages/react-reconciler/src/__tests__/DebugTracing-test.internal.js`",Jack Pope,2024-03-07T21:36:50Z
c35b9b05fee039a8c3a99fdb7e35d5ca30db9eb0,"Fix ReactHooksInspection-test.js (#28520)

## Summary

Currently, `ReactHooksInspection-test.js` fails because something is
polluting the resulting `Promise` with symbol properties. This changes
the unit test to be more resilient to such symbol properties.

## How did you test this change?

Ran the following successfully:

```
$ yarn test
```",Timothy Yung,2024-03-07T19:22:42Z
447fc27e3613d9fd026fbf48aa8a5e5a3f5167d4,"fix[devtools/e2e]: fixed source inspection in e2e tests (#28518)

DevTools e2e tests started to fail after landing
https://github.com/facebook/react/pull/28471:
-
https://app.circleci.com/pipelines/github/facebook/react/50984/workflows/a7be25ed-9547-40e9-87bd-b14d9d2e87da/jobs/798270
-
https://app.circleci.com/pipelines/github/facebook/react/50984/workflows/a7be25ed-9547-40e9-87bd-b14d9d2e87da/jobs/798275
-
https://app.circleci.com/pipelines/github/facebook/react/50984/workflows/a7be25ed-9547-40e9-87bd-b14d9d2e87da/jobs/798271
-
https://app.circleci.com/pipelines/github/facebook/react/50984/workflows/a7be25ed-9547-40e9-87bd-b14d9d2e87da/jobs/798274
-
https://app.circleci.com/pipelines/github/facebook/react/50984/workflows/a7be25ed-9547-40e9-87bd-b14d9d2e87da/jobs/798269

There are 2 reasons for that:
1. Versions 16.0 and 16.5 use legacy renderer, which doesn't support
source inspection by design:

https://github.com/facebook/react/blob/850fac4915864a487e7cb9ecae8a75dbac144174/packages/react-devtools-shared/src/backend/legacy/renderer.js#L831

The corresponding e2e test is now gated for versions >=16.8
2. For other versions (>=16.8), the source is actually
`e2e-app-regression.js`, because these regression tests open a different
page (not the one we open for tests against React from source)

https://github.com/facebook/react/blob/850fac4915864a487e7cb9ecae8a75dbac144174/packages/react-devtools-inline/playwright.config.js#L15-L17",Ruslan Lesiutin,2024-03-07T17:59:37Z
fe91bcefd2bbc3da9f1998befb466acc8b4afdca,"Fix promotion of catch bindings w/in function expressions 

One of our visitors wasn't visiting TryTerminal's handlerBinding, which meant 
that we missed renaming those identifiers in RenameVariables. I also updated the 
printers to print this binding.",Joe Savona,2024-03-07T17:21:33Z
449aa70f99c4984e7550fb9ef1aa16b1b60d6544,Fix promotion of locals referenced outside of scopes,Joe Savona,2024-03-07T00:19:28Z
854a810f0598def185f3f9593b070960433b21fd,"Turn value block within try/catch into todo (from invariant) 

Within a try/catch, every instruction is followed by a maybe-throw terminal. 
This currently breaks the logic in BuildReactiveFunction which tries to 
reassemble the value block, since it isn't expecting the maybe-throw. 
Conceptually the logic should just ignore it — we could even flatten away 
maybe-throw terminals before this pass — but for now since this pattern is rare 
we can just make it a todo.",Joe Savona,2024-03-06T23:28:36Z
52875a72fef2722347e4aa37ed5da30d7bd4f31e,"Invariant if codegen tries to emit a temporary as an identifier 

For T181507827 — adds an invariant in codegen when emitting identifiers to 
ensure that we only create babel Identifier nodes for nodes that the compiler 
has explicitly promoted to valid, named identifiers. This means that we'll fail 
for unnamed temporaries (previously caught), as well as promoted temporaries 
that somehow didn't get renamed by RenameVariables (newly caught).",Joe Savona,2024-03-07T05:50:03Z
850fac4915864a487e7cb9ecae8a75dbac144174,Link to reactjs/react.dev repo instead of reactjs/reactjs.org  (#28493),이동현,2024-03-06T23:20:57Z
ebbada309db9094cae1c0a2a4e5faffae0422318,"MemoizeFbtOperandsInSameScope operates on HIR 

Moves this pass to operate against HIRFunction instead of ReactiveFunction, no 
logic changes.",Joe Savona,2024-03-06T22:02:18Z
e7fcc4e6a8116e1fde722b383dc7ad54e550a55a,"Rename promoteTemporary helpers 

Renames the helpers for promoting temporaries to named identifiers, per feedback 
earlier in the stack.",Joe Savona,2024-03-06T19:16:44Z
b7026ede39dc86f6181d1b0d83b2d542835da9e9,"Avoid generating conflicts w global names 

Adds a visitor to collect all the globals that are referenced within the 
function, and then uses this list to avoid synthesizing variables with 
conflicting names. This is used in both RenameVariables (for promoted 
temporaries) and Codegen (for `$` and change variables only, so far, but this 
can be extended in follow-ups).",Joe Savona,2024-03-06T19:07:11Z
8faed2af4cfd39b32063189f3e7c845984e513ea,"Avoid conflicting names for reactive scope codegen 

This is a key part of avoiding generating conflicting names in our output. To 
start, RenameVariables now returns a Set of the unique identifier names that 
exist in the function. Codegen uses this to avoid generating duplicate names for 
change variables and for the `$` useMemoCache variable. Rather than always emit 
`$` or `c_N`, codegen checks that this name would not conflict and appends an 
incrementing suffix until it finds a unique name. 

Note that it's still possible for us to generate conflicts with global 
variables, both during RenameVariable and Codegen. The next step will be to 
avoid conflicts with globals.",Joe Savona,2024-03-06T19:07:11Z
2ae0f36543e3306bc4b72de01a1ad8554c9176bf,"Promote and rename within nested functions 

Another title for this PR could be ""Yet another reason for HIR-everywhere"" 

ReactiveFunctionVisitor doesn't traverse into HIRFunctions from 
FunctionExpression and ObjectMethod values. This means that 
PromoteUsedTemporaries and RenameVariables also weren't traversing into such 
functions, and those values weren't getting promoted and renamed correctly. 

This PR updates ReactiveFunctionVisitor with a method that can optionally be 
invoked to traverse an HIRFunction and call the appropriate visitor methods. 
PromoteUsedTemporaries and RenameVariables invoke this to ensure they visit all 
places, even in nested HIRFunctions.",Joe Savona,2024-03-06T19:07:10Z
99b9da4b009b4eccda12a6546747497bcd00f5fb,"Move remaining promotion of temporaries out of codegen 

I realized that codegen still had a fallback for generating identifier nodes for 
unnamed temporaries. This PR updates codegen to throw if it needs to generate an 
identifier for a temporary, and updates earlier passes to promote temporaries to 
named values in all the cases that were missed: 

* BuildHIR needs to promote temporaries for temporaries in destructuring 
bindings and catch clause bindings 

* PromoteUsedTemporaries has to promote temporaries for destructured function 
parameters or function params that are context variables.",Joe Savona,2024-03-06T19:07:09Z
31e128a4413e2902e5fbfda5e5f6e9fdfc1e7619,"Use opaque type for Identifier.name for improved correctness 

Uses an enum for Identifier.name to distinguish originally named identifiers vs 
promoted temporaries. An opaque type for the named identifier variant makes it 
hard to accidentally create that type.",Joe Savona,2024-03-06T19:07:08Z
329bb555a0bfd99d22eb8374835699c2278224f9,"[RFC] Stabilize naming of promoted temporaries 

When the compiler promotes temporary values to named variables, we currently 
eagerly assign a name using the temporary's IdentifierId. This means that we're 
sort of stuck with this name later in compilation, and RenameVariables can't be 
100% sure whether a 't0' variable is a temporary or not. As a result, the names 
of these promoted temporaries is influenced by how many temporaries we happened 
to create during compilation (and what the next available identifier id was), 
making them fluctuate more as we iterate on the compiler. 

This is an RFC for showing how we can stabilize these names. The key elements: 

* Distinguish promoted temporaries from other named identifiers. Here we use a 
hack, naming them starting with '#t' or '#T', since '#' isn't a valid identifier 
starting point. This lets us keep all of our logic that looks for non-null 
identifiers names to distinguish named/unnamed, while also distinguishing real 
names from generated names (if this was Rust, we'd use an Enum and have a 
""isNamed()"" method on it that was true for real/temporary names and false 
otherwise) 

* In RenameVariables, detect generated names and fall back to generating the 
next available `tN`-style name (or `TN` for JSX tags). 

* To reduce thrash overall, RenameVariables no longer keeps a global ""next id"" 
value that uses to distinguish all conflicting identifiers, instead we restart 
at 0 whenever we find a conflict, and keep bumping until we find a free name. 
Thus if both `foo` and `bar` had conflicts, we previously would end up with 
`foo$0` and `bar$1` as the deduped names, but now will end up with `foo$0` and 
`bar$0`. 

## RFC 

I'm open to feedback on the approach. Two main questions: 

* How to annotate promoted temporaries. The most type-safe option is to change 
`Identifier.name` to be a union of `{kind: 'named', value: string} | `{kind: 
'promoted', value: string} | `{kind: 'temporary'}` though TS then wouldn't allow 
`identifier.name.value` (even as nullable) since it doesn't exist on one of the 
variants. Maybe we could type the temporary one as `{kind: 'temporary', value?: 
null}` so the value has to be null but you can always access that property? 

* ?? Other concerns about the approach? We could keep the global 
auto-incrementing id rather than attempting to reset to 0 for each conflict.",Joe Savona,2024-03-06T19:07:08Z
d1d6310f25cd74ce9f79ab22ec947fec67eecec5,"Conditional assignment of unmemoized value doesnt invalidate later scopes 

The previous implementation used IdentifierId, but since this pass operates 
after LeaveSSA the identifier ids are no longer distinct for different SSA 
instances. Instead we use the Identifier instance, which preserves SSA 
information (even ever LeaveSSA) and allows distinguishing between variables 
whose value always changes vs variables that may be reassigned such that they 
don't always invalidate. 

In the future when we use HIR everywhere, this pass should use the HIR CFG to 
understand that phi nodes whose operands all will always invalidate can also be 
treated as always invalidating. 

## Test Plan 

Synced to www, 91 files have output changes 
(https://fburl.com/everpaste/3e3hjpjs). I spot checked these and confirmed that 
they are all from cases where there was already missing memoization of earlier 
values, where we now can prune later reactive scopes that depend on the 
un-memoized values.",Joe Savona,2024-03-06T19:07:07Z
64f354cf27a17c4e5b0dfcd908e47940cf947771,"Remove unused returnFiber (#28504)

There is no use of `returnFiber` here, it can be removed.",bubucuo,2024-03-06T19:02:51Z
4af3ff1e759682c05336341f242bb886a81839f3,"Fixture for transitive invalidation of effect dep 

This fixture shows that this optimization partially improves transitive checking 
for validateMemoizedEffectDependencies.",Joe Savona,2024-03-06T17:28:03Z
f4455ef51a11570a397c341a4119eab76955f267,"Prune scopes whose deps always invalidate 

Implements the optimization described in the previous PR: if we know that a 
scope's dependency will _always_ invalidate (it is not memoized and it is 
guaranteed to be a new object if the instruction executes, such as an array or 
object literal), then we can prune that scope. The invalidation is transitive: 
we track always-invalidating types from within scopes, and if their scope gets 
invalidated we prune downstream scope that depend on them. 

## Test Plan 

Tested via #2639 - see https://fburl.com/everpaste/3e3hjpjs. 91 files change 
output due to reactive scopes which would always invalidate due to always 
invalidating dependencies.",Joe Savona,2024-03-06T17:28:02Z
48e08c42be4ce37269b1ddc49ab349c1b74807cf,"Fixtures where unmemoized value invalidates later scopes 

These fixtures demonstrate how currently, even if the dependency of a scope 
doesn't get memoized (ie the scope gets pruned), we don't remove later scopes 
that depend on that value. Those later scopes will always invalidate, so we 
might as well remove them.",Joe Savona,2024-03-06T17:28:01Z
0066e0b68d90cc71a137f26b7c5bf6af73398fc2,Devtools: Display actual pending state when inspecting `useTransition` (#28499),Sebastian Silbermann,2024-03-06T14:38:01Z
c11b196ae3e2e3c5d143d9102b35a6b6fa97c849,"Move tail hydration mismatch back to hydration context (#28501)

In #23176 we added a special case in completeWork for SuspenseBoundaries
if they still have trailing children. However, that misses a case
because it doesn't log a recoverable error for the hydration mismatch.
So we get an error that we rerendered.

I think this special case was done to avoid contexts getting out of
sync. I don't know why we didn't just move where the pop happens though
so that's what I did here and let the regular pass throw instead. Seems
to be pass the tests.",Sebastian Markbåge,2024-03-06T01:54:24Z
22ea72d4e909e607d79bca8b46f09ded00153e06,"Allow global mutation within useEffect (#2646)

Summary: Currently Forget bails on mutations to globals within any callback function. However, callbacks passed to useEffect should not bail and are not subject to the rules of react in the same way.

We allow this by instead of immediately raising errors when we see illegal writes, storing the error as part of the function. When the function is called, or passed to a position that could call it during rendering, we bail as before; but if it's passed to `useEffect`, we don't raise the errors.",Michael Vitousek,2024-03-05T19:54:29Z
966d17483c2a628fda36794bc193c7ad2c3124eb,"React DevTools 5.0.1 -> 5.0.2 (#28496)

* feat[devtools]: symbolicate source for inspected element
([hoxyq](https://github.com/hoxyq) in
[#28471](https://github.com/facebook/react/pull/28471))
* refactor[devtools]: lazily define source for fiber based on component
stacks ([hoxyq](https://github.com/hoxyq) in
[#28351](https://github.com/facebook/react/pull/28351))
* fix[devtools/tree/element]: onClick -> onMouseDown to handle first
click correctly ([hoxyq](https://github.com/hoxyq) in
[#28486](https://github.com/facebook/react/pull/28486))
* [DOM] disable legacy mode behind flag
([gnoff](https://github.com/gnoff) in
[#28468](https://github.com/facebook/react/pull/28468))
* Fix Broken Links In Documentation
([justindhillon](https://github.com/justindhillon) in
[#28321](https://github.com/facebook/react/pull/28321))
* Update /link URLs to react.dev
([rickhanlonii](https://github.com/rickhanlonii) in
[#28477](https://github.com/facebook/react/pull/28477))
* [tests] add support for @gate pragma
([gnoff](https://github.com/gnoff) in
[#28479](https://github.com/facebook/react/pull/28479))
* Devtools: Unwrap Promise in useFormState
([eps1lon](https://github.com/eps1lon) in
[#28319](https://github.com/facebook/react/pull/28319))
* Add support for rendering BigInt
([eps1lon](https://github.com/eps1lon) in
[#24580](https://github.com/facebook/react/pull/24580))
* Include server component names in the componentStack in DEV
([sebmarkbage](https://github.com/sebmarkbage) in
[#28415](https://github.com/facebook/react/pull/28415))",Ruslan Lesiutin,2024-03-05T14:11:30Z
e5287287aacd3c51d24e223651b7f38ece584c49,"feat[devtools]: symbolicate source for inspected element (#28471)

Stacked on https://github.com/facebook/react/pull/28351, please review
only the last commit.

Top-level description of the approach:
1. Once user selects an element from the tree, frontend asks backend to
return the inspected element, this is where we simulate an error
happening in `render` function of the component and then we parse the
error stack. As an improvement, we should probably migrate from custom
implementation of error stack parser to `error-stack-parser` from npm.
2. When frontend receives the inspected element and this object is being
propagated, we create a Promise for symbolicated source, which is then
passed down to all components, which are using `source`.
3. These components use `use` hook for this promise and are wrapped in
Suspense.

Caching:
1. For browser extension, we cache Promises based on requested resource
+ key + column, also added use of
`chrome.devtools.inspectedWindow.getResource` API.
2. For standalone case (RN), we cache based on requested resource url,
we cache the content of it.",Ruslan Lesiutin,2024-03-05T12:32:11Z
61bd00498d2a6e23885bac42f3aeb0e02cadb8eb,"refactor[devtools]: lazily define source for fiber based on component stacks (#28351)

`_debugSource` was removed in
https://github.com/facebook/react/pull/28265.

This PR migrates DevTools to define `source` for Fiber based on
component stacks. This will be done lazily for inspected elements, once
user clicks on the element in the tree.

`DevToolsComponentStackFrame.js` was just copy-pasted from the
implementation in `ReactComponentStackFrame`.

Symbolication part is done in
https://github.com/facebook/react/pull/28471 and stacked on this commit.",Ruslan Lesiutin,2024-03-05T12:10:36Z
aa4eae6b99a6081afabf180d02fa0a8b0cb1b3ab,"fix[devtools/tree/element]: onClick -> onMouseDown to handle first click correctly (#28486)

There is a weird behaviour in all shells of RDT: when user opens
`Components` tab and scrolls down a tree (without any prior click or
focus event), and then clicks on some element, the `click` event will
not be fired. Because `click` event hasn't been fired, the `focus` event
is fired for the whole list and we pre-select the first (root) element
in the tree:

https://github.com/facebook/react/blob/034130c02ffb47b0026059b57d17e9b080976ff3/packages/react-devtools-shared/src/devtools/views/Components/Tree.js#L217-L226

Check the demo (before) what is happening. I don't know exactly why
`click` event is not fired there, but it only happens:
1. For elements, which were not previously rendered (for virtualization
purposes).
2. When HTML-element (div), which represents the container for the tree
was not focused previously.

Unlike the `click` event, the `mousedown` event is fired consistently.

### Before


https://github.com/facebook/react/assets/28902667/9f3ad75d-55d0-4c99-b2d0-ead63a120ea0

### After



https://github.com/facebook/react/assets/28902667/e34816be-644c-444c-8e32-562a79494e44


Tested that it works in all shells, including the select / deselect
features (with `metaKey` param in event).",Ruslan Lesiutin,2024-03-05T11:42:10Z
0ae2b13412e0e4cf10a799ec645035213834556c,"[Test] Update `flushSync` tests to use react-dom (#28490)

Updates the `flushSync` tests to use react-dom instead of ReactNoop.
flushSync is primarily a react-dom API and asserting the implementation
of ReactNoop is not really ideal especially since we are going to be
refactoring flushSync soon to not be implemented in the reconciler
internals.

ReactNoop still have a flushSync api and it can still be used in other
tests that are primarily about testing other functionlity and use
ReactNoop as the renderer.",Josh Story,2024-03-05T05:40:15Z
f5d99baf8e64530473fac5fe0dd2bd489f3bf8fc,"Add config option to ignore 'use no forget' directives 

This will let us test without taking into account the existing 'use no forget' 
directives to better understand what validations we may need to build. 

There are two other files that look for this directive that do not seem to take 
compiler options: 

1. 
https://github.com/facebook/react-forget/blob/408617ec8a5caa815f61d4204cb3fec0775593ca/react/scripts/babel/transform-forget.js#L25 

2. 
https://github.com/facebook/react-forget/blob/408617ec8a5caa815f61d4204cb3fec0775593ca/packages/babel-plugin-react-forget/scripts/jest/makeTransform.ts#L119 

Do I need to do anything for those?",Jordan Brown,2024-03-05T00:00:48Z
113ab9af08c46e8a548a397154f5c9dfeb96ab6a,"[Flight][Fizz][Fiber] Chain HostDispatcher implementations (#28488)

The idea here is that host dispatchers are not bound to renders so we
need to be able to dispatch to them at any time. This updates the
implementation to chain these dispatchers so that each renderer can
respond to the dispatch. Semantically we don't always want every
renderer to do this for instance if Fizz handles a float method we don't
want Fiber to as well so each dispatcher implementation can decide if it
makes sense to forward the call or not. For float methods server
disaptchers will handle the call if they can resolve a Request otherwise
they will forward. For client dispatchers they will handle the call and
always forward. The choice needs to be made for each dispatcher method
and may have implications on correct renderer import order. For now we
just live with the restriction that if you want to use server and client
together (such as renderToString in the browser) you need to import the
server renderer after the client renderer.",Josh Story,2024-03-04T20:27:15Z
1c02b9d2bdc18091cc6afec810fc1b361f00abdd,"[DOM] disable legacy mode behind flag (#28468)

Adds a flag to disable legacy mode. Currently this flag is used to cause
legacy mode apis like render and hydrate to throw. This change also
removes render, hydrate, unmountComponentAtNode, and
unstable_renderSubtreeIntoContainer from the experiemntal entrypoint.
Right now for Meta builds this flag is off (legacy mode is still
supported). In OSS builds this flag matches __NEXT_MAJOR__ which means
it currently is on in experiemental. This means that after merging
legacy mode is effectively removed from experimental builds. While this
is a breaking change, experimental builds are not stable and users can
pin to older versions or update their use of react-dom to no longer use
legacy mode APIs.",Josh Story,2024-03-04T16:19:17Z
034130c02ffb47b0026059b57d17e9b080976ff3,"Fix Broken Links In Documentation (#28321)

## Summary

I used [link-inspector](https://github.com/justindhillon/link-inspector)
to find a bunch of broken links in this projects documentation. Here is
what I fixed:

https://www.html5rocks.com/en/tutorials/canvas/hidpi/ -->
https://web.dev/articles/canvas-hidipi


https://w3c.github.io/webcomponents/spec/custom/#custom-elements-core-concepts
--> https://www.w3.org/TR/custom-elements/


https://github.com/facebookarchive/fixed-data-table/blob/main/src/vendor_upstream/dom/normalizeWheel.js
-->
https://github.com/facebookarchive/fixed-data-table/blob/master/src/vendor_upstream/dom/normalizeWheel.js

https://upload.wikimedia.org/wikipedia/commons/e/ee/Atom_%282%29.png -->
https://upload.wikimedia.org/wikipedia/commons/1/1b/Atom.png

## Support my work

I used [link-inspector](https://github.com/justindhillon/link-inspector)
to find and fix this issue. If you find this PR useful, give the repo a
:star:",Justin Dhillon,2024-03-03T22:44:27Z
1940cb27b260c2eab79c76763d1151ba18353ff8,"Update /link URLs to react.dev (#28477)

Depends on https://github.com/reactjs/react.dev/pull/6670 [merged]",Ricky,2024-03-03T22:34:33Z
30ae0baed1cfe670dea41d7c7abdc375c9a4859a,"[devtools][tests] add support for @gate pragma (#28479)

Adds support for `// @gate` pragma in devtools tests
Adds a couple gate test assertions to ensure they continue to work",Josh Story,2024-03-01T21:26:07Z
11828bf529ed1b1c1b94e7afe9da2ea072316d8e,"Remove loose-envify dep and browserify configs (#28480)

Browserify isn't widely used, and at this point I don't think it makes
sense to have a special config just for the sake of it. Let's remove it?",dan,2024-03-01T20:49:51Z
5f2c6b74db031991ff2cdee2767c4d006ddc83d7,"Update homepage URLs to react.dev (#28478)

Updates the package.json ""homepage"" entry to react.dev",Ricky,2024-03-01T19:35:18Z
2f8f7760223241665f472a2a9be16650473bce39,"Move ref type check to receiver (#28464)

The runtime contains a type check to determine if a user-provided ref is
a valid type — a function or object (or a string, when
`disableStringRefs` is off). This currently happens during child
reconciliation. This changes it to happen only when the ref is passed to
the component that the ref is being attached to.

This is a continuation of the ""ref as prop"" change — until you actually
pass a ref to a HostComponent, class, etc, ref is a normal prop that has
no special behavior.",Andrew Clark,2024-03-01T02:26:36Z
bb4b147da9a892529995f55f15f19f46a00cf4f6,"Clean up empty string special cases (#28475)

This was fixed in https://github.com/facebook/react/pull/22807 so we
don't need these special cases anymore.",Sebastian Markbåge,2024-03-01T01:27:26Z
7f994241b0ad54436b024c7097112e15b7cf0f26,"Infer type of ref argument 

Extend type inference to infer second argument of component as a ref type",Sathya Gunasekaran,2024-02-29T22:47:52Z
ad8f19675cbde7af76f824a85c051bc57d03a173,"Infer type of React function 

Infer if a function is a component or hook when we're deciding to compile a 
function and store that in the environment. 

This is used in passes like InferReferenceEffects rather than having to re-parse 
the name in each pass.",Sathya Gunasekaran,2024-02-29T22:47:51Z
19e44a4a69c87ab0fef540f06fa5e65ca0380055,"Allow ref argument to be mutated 

Previously, Forget would throw if _any_ of the arguments to a component are 
modified. This isn't quite right as a ref argument can be modified. 

This PR assumes the second argument of a component to be a ref and allows it to 
be mutable. 

A future PR will add types to this argument so the validateRefAccessDuringRender 
can catch if ref is mutated in render. This PR contains a todo test for this.",Sathya Gunasekaran,2024-02-29T22:47:49Z
b8da12e8f8e6a6b087f6531c1c791ab41e5273d4,"Add dynamic flag for infinite loop detection on React Native FB (#28456)

Add dynamic flag for infinite loop detection on React Native FB",Jan Kassens,2024-02-29T21:19:12Z
9d25ced0187a9d9b591ac9e394a95f846c8772c7,[instrument] Optional globalGating means no global gating,Mofei Zhang,2024-02-29T18:04:37Z
01454d1414c3dbb700fb9a38561868093458f547,[other] Make global gating (e.g. DEV) check configurable,Mofei Zhang,2024-02-29T17:44:28Z
fb10a2c66a923d218471b535fdaf0dbc530417ee,Devtools: Unwrap Promise in useFormState (#28319),Sebastian Silbermann,2024-02-28T22:52:59Z
6dbec55791dd858cceb4fb145df2300bab12281a,Support prefixed useState due to pre-bundling,Joe Savona,2024-02-28T21:12:56Z
01ab35a9a731dec69995fbd28f3ac7eaad11e183,Run `yarn flags` in CI (#28345),Sebastian Silbermann,2024-02-27T23:12:53Z
c6bb12edd081423f3640285a08a04c2b41518a56,Remove ReactTestUtils from ReactJSXRuntime (#28337),Sebastian Silbermann,2024-02-27T23:12:17Z
e7849b50bcefc0742ca342d70284d82cfcf990e5,Remove ReactTestUtils from ReactJSXElementValidator (#28335),Sebastian Silbermann,2024-02-27T23:12:08Z
d88fb321a3c5ccadb9d617364b6f50cb943765eb,Move enableRenderableContext back to dynamic (#28466),Ricky,2024-02-27T23:11:42Z
dee1aac77f71e887c44bb79ecfe9c7a34ab3e74c,"Turn on disableJavaScriptURLs for experimental (#28462)

This is on everywhere, ready to turn on in the next major.",Ricky,2024-02-27T21:33:14Z
9d5a01359faf1652eda92952aa6e40d2e61968e1,"Move creation of scopes for primitives into a separate pass

Rather than force scopes to be created for primitives within
InferReactiveScopeVariables, here we move the creation of scopes for these
instructions to a later pass. Later in the pipeline we have more context, such
as whether e.g. a primitive or propertyload is being accessed within a scope or
not, and whether it therefore needs its own scope or not.",Joe Savona,2024-02-27T20:01:32Z
45216dc3d9112251feeaa1e981fe887156d5f83d,"Track next scope id on Environment 

Currently we allocate all reactive scopes during a single pass, 
InferReactiveScopeVariables, using a local incrementing number to assign 
ScopeIds. This means we can't easily create additional scopes later since we 
don't know the next available scope id. 

Here we add `Environment.nextScopeId` and use that to synthesize scope ids.",Joe Savona,2024-02-27T19:39:22Z
130b809ac2006ebfb381244bfa4bf3828304ea67,"Allow property loads from hook 

Looking up certain properties on a hook is a common pattern for logging. 

It's non-ideal but it's not a bug to do this. 

This updates Forget to not error on this pattern.",Sathya Gunasekaran,2024-02-29T00:19:43Z
8879a2dd498dd6d6d936f1ea2831312a88c0f5c4,Remove sprout from package.json,Sathya Gunasekaran,2024-02-28T23:22:13Z
a06ded902a9d8da050cbbd1ee162ed2c7d83f828,"[other] Change instrumentation to use an optional gating identifier; record 
filepath 

Internal rollout currently has a good number of test failures. 
`enableEmitInstrumentForget` can help developers understand which functions / 
files they should look at: 

``` 

// input 

function Foo() { 

userCode(); 

// ... 

} 

// output 

function Foo() { 

if (__DEV__ && inE2eTestMode) { 

logRender(""Foo"", ""/path/to/filename.js""); 

} 

const $ = useMemoCache(...); 

userCode(); 

} 

```",Mofei Zhang,2024-02-28T06:06:36Z
c9798954e26a2354a951cc65607f2901a45bf035,"Remove string refs (behind flag)  (#28322)

Depends on:

- https://github.com/facebook/react/pull/28398

---

This removes string refs, which has been deprecated in Strict Mode for
seven years.

I've left them behind a flag for Meta, but in open source this fully
removes the feature.",Andrew Clark,2024-02-27T16:43:04Z
3bcd2de01b5716202eabe8faa338f51bdc59ce26,"clean up isInputPending in Scheduler (#28444)

## Summary

`isInputPending` is not in use. This PR cleans up the flags controlling
its gating and parameters to simplify Scheduler.

Makes `frameYieldMs` feature flag static, set to 10ms in www, which we
found built on the wins provided by a broader yield interval via
`isInputPending`. Flag remains set to 5ms in OSS builds.

## How did you test this change?
`yarn test Scheduler`",Noah Lemen,2024-02-27T15:39:43Z
5acfc13575274ad52f1a84d9e222ec24ed9c318c,"Repro for invariant on value block in try/catch 

The code for value block handling assumes a small set of terminal kinds, but 
try/catch causes the entire body to get wrapped in MaybeThrow terminals. We need 
to skip over these and delegate to the inner content.",Joe Savona,2024-02-27T00:21:56Z
84ed1f2a37cbe17975bd3691cb0e2a61d2a6285f,"Update scope declaration invariant to support error grouping 

This invariant interpolated values into the `reason` which prevent our internal 
tooling from grouping related errors. This PR updates to make the reason static 
and interpolate the description.",Joe Savona,2024-02-26T23:08:42Z
d81da8e2f55ae9f46384a7a9d73e43fdca26994a,"Fix JSXMemberExpression dependency calculation 

Fixes T173101142 — we previously computed incorrect function expression 
dependencies for JSXMemberExpressions. This PR applies similar logic to 
JSXMemberExpression as we use for MemberExpression. 

## Test Plan 

Synced internally, only one file changes output. I manually investigated to 
confirm — the change is that a function expression's dependencies are more 
precise and correct. See https://fburl.com/everpaste/4dqewxqv",Joe Savona,2024-02-26T23:04:44Z
915a0b8389cc26eabdd32183030aa210f6c83042,"[be] Consolidate sprout -> snap 

--- 

No changes to snap or sprout's functionality. 

Tweaks to consolidate sprout into snap while keeping its simple interface and 
most developer patterns. 

- to keep `filter` mode fast, we do not run sprout in filter mode 

- sprout is run in non-filter mode for both test and update 

~~Small qol improvement: `--watch` will start you in `filter` mode~~ 

### Cost of this change 

`performance.now()` is quite noisy due to background processes and ThreadPool 
logic (especially with asymmetric task distribution), so I used 
`process.cpuUsage` which reports time spent in user-space. This was much less 
noisy (1-4% standard dev / mean) 

Running all tests becomes slower by ~50%. Initial runs are slower because they 
load in Forget's `require` chains. 

- 23.9s previous initial run 

- 34.6s current initial run 

- 11.5s previous subsequent runs 

- 15.4s current subsequent runs 

Running filtered tests remains very fast (~100ms on the average case) 

--- 

Additional modes or commands could be added as needed (e.g. run tests in filter 
mode, with sprout output)",Mofei Zhang,2024-02-27T14:54:30Z
172a7f629a972fedb9e43fbae4fad0e9b1dc7fee,Convert ReactDOMServerIntegrationLegacyContextDisabled to createRoot (#28448),Sebastian Silbermann,2024-02-26T20:55:23Z
e6d83747289f9e7f8746ed01ebc46e6ef03bc9d7,Convert ReactDOMServerIntegrationLegacyContext to createRoot (#28449),Sebastian Silbermann,2024-02-26T20:55:03Z
2314227de55b23e5819f7b96443693df16b5e911,"Convert ReactTestUtils to createRoot (#28446)

it'll be removed soon anyway but until then let's unblock moving legacy
APIs behind a flag.",Sebastian Silbermann,2024-02-26T20:54:46Z
f637f6a4736a9a02ab18067ef4b1c5e033c8d6f4,Convert ReactServerRenderingHydration to createRoot (#28447),Sebastian Silbermann,2024-02-26T19:59:43Z
2f240c91ed54900adee213565cb2039e161629e9,Add support for rendering BigInt (#24580),Sebastian Silbermann,2024-02-26T18:18:50Z
6c3b8dbfed6f879440f484bd0bf801fac67ec684,"Turn on enableRenderableContext for www (#28438)

We can land for www now",Ricky,2024-02-26T15:08:47Z
239d06e2b8b0f2dabd6bc154e5f24d594ac5840d,Make enableClientRenderFallbackOnText dynamic (#28436),Ricky,2024-02-25T18:20:42Z
aed00dacfb79d17c53218404c52b1c7aa59c4a89,devtools: Use context displayName for context hook name (#25954),Sebastian Silbermann,2024-02-24T10:54:26Z
118ad2afa75a44fe3715ad7fb0023c408125bef7,"Validate DOM nesting for hydration before the hydration warns / errors (#28434)

If there's invalid dom nesting, there will be mismatches following but
the nesting is the most important cause of the problem.

Previously we would include the DOM nesting when rerendering thanks to
the new model of throw and recovery. However, the log would come during
the recovery phase which is after we've already logged that there was a
hydration mismatch.

People would consistently miss this log. Which is fair because you
should always look at the first log first as the most probable cause.

This ensures that we log in the hydration phase if there's a dom nesting
issue. This assumes that the consequence of nesting will appear such
that the won't have a mismatch before this. That's typically the case
because the node will move up and to be a later sibling. So as long as
that happens and we keep hydrating depth first, it should hold true.
There might be an issue if there's a suspense boundary between the nodes
we'll find discover the new child in the outer path since suspense
boundaries as breadth first.

Before:

<img width=""996"" alt=""Screenshot 2024-02-23 at 7 34 01 PM""
src=""https://github.com/facebook/react/assets/63648/af70cf7f-898b-477f-be39-13b01cfe585f"">

After:

<img width=""853"" alt=""Screenshot 2024-02-23 at 7 22 24 PM""
src=""https://github.com/facebook/react/assets/63648/896c6348-1620-4f99-881d-b6069263925e"">

Cameo: RSC stacks.",Sebastian Markbåge,2024-02-24T05:45:42Z
52612819856f9452ae30604806603b34891de959,"move reassignment-related range adjustments to
InferReactiveScopeVariables",Joe Savona,2024-02-24T00:58:10Z
d3589367b03356b1032679a3331343cc7c49323c,Handle scopes with reassignment (by expanding scopes to avoid it),Joe Savona,2024-02-23T22:41:27Z
a815d481c07e6b7f348d0496bb48a6f252c95cc0,"Support scopes with multiple declarations

Expands support for reactive scopes that have multiple declarations. We
return an array and destructure after, preserving the reactivity.",Joe Savona,2024-02-23T22:41:26Z
ca1e92ad91456cf70bd8810c406c7d6ba7efe065,Compile partial reassignments into a single derived scope,Joe Savona,2024-02-23T22:41:25Z
16d3f7833d25b1ea026add83dd109601b60f138e,"Delete use of `source` in JSX runtime (#28433)

Only remaining place it was being used was in a warning message.",Andrew Clark,2024-02-23T21:52:00Z
d579e7748218920331252b0528850943d5e2dd31,"Remove method name prefix from warnings and errors (#28432)

This pattern is a petpeeve of mine. I don't consider this best practice
and so most don't have these prefixes. Very inconsistent.

At best this is useless and noisey that you have to parse because the
information is also in the stack trace.

At worse these are misleading because they're highlighting something
internal (like validateDOMNesting) which even suggests an internal bug.
Even the ones public to React aren't necessarily what you called because
you might be calling a wrapper around it.

That would be properly reflected in a stack trace - which can also
properly ignore list so that the first stack you see is your callsite,

Which might be like `render()` in react-testing-library rather than
`createRoot()` for example.",Sebastian Markbåge,2024-02-23T20:16:54Z
8fb0233a845974b4b1049e54b6c25dc54d6dd173,"Include server component names in the componentStack in DEV (#28415)

I'm a bit ambivalent about this one because it's not the main strategy
that I plan on pursuing. I plan on replacing most DEV-only specific
stacks like `console.error` stacks with a new take on owner stacks and
native stacks. The future owner stacks may or may not be exposed to
error boundaries in DEV but if they are they'd be a new errorInfo
property since they're owner based and not available in prod.

The use case in `console.error` mostly goes away in the future so this
PR is mainly for error boundaries. It doesn't hurt to have it in there
while I'm working on the better stacks though.

The `componentStack` property exposed to error boundaries is more like
production behavior similar to `new Error().stack` (which even in DEV
won't ever expose owner stacks because `console.createTask` doesn't
affect these). I'm not sure it's worth adding server components in DEV
(this PR) because then you have forked behavior between dev and prod.

However, since even in the future there won't be any other place to get
the *parent* stack, maybe this can be useful information even if it's
only dev. We could expose a third property on errorInfo that's DEV only
and parent stack but including server components. That doesn't seem
worth it over just having the stack differ in dev and prod.

I don't plan on adding line/column number to these particular stacks.

A follow up could be to add this to Fizz prerender too but only in DEV.",Sebastian Markbåge,2024-02-23T17:04:55Z
66c8346401d271588e4c400921c5dab5478fc623,"[RTR] Add usage warning behind flag (#27903)

## Summary

Moving towards deprecation of ReactTestRenderer. Log a warning on each
render so we can remove the exports in a future major version.

We can enable this flag in web RTR without disrupting RN tests by
flipping the flag in
`packages/shared/forks/ReactFeatureFlags.test-renderer.js`

## How did you test this change?

`yarn test
packages/react-test-renderer/src/__tests__/ReactTestRenderer-test.js`",Jack Pope,2024-02-23T16:33:18Z
98b8359f656ef714cc44828d7bfd2409ca16b9b3,"[RN] Move unifiedSyncLane back to dynamic (#28430)

This surfaced a bug because it wasn't on everywhere, moving back to
dynamic while we investigate the bug",Ricky,2024-02-23T15:31:01Z
aaa4acb1280fcda398defb805db47a8623df6c0f,"Add `enableComponentStackLocations` to `ReactNativeInternalFeatureFlags` libdef (#28424)

## Summary

Fixing something I accidentally broke this in
https://github.com/facebook/react/commit/25dbb3556ee9802c18f45c278abf3c33711237eb.

## How did you test this change?

Ran the following successfully:

```
$ yarn flow dom-node
```",Timothy Yung,2024-02-22T23:58:12Z
25dbb3556ee9802c18f45c278abf3c33711237eb,"Dynamic `enableComponentStackLocations` Flag for React Native (FB) (#28400)

## Summary

Changes the `enableComponentStackLocations` feature flag to be dynamic
for React Native (FB), so that it can be evaluated for compatibility
before eventually being enabled for React Native.

## How did you test this change?

I'll be importing this PR to test it.",Timothy Yung,2024-02-22T23:40:12Z
07c2543e54f0e2ccd91908ec765683b47bc2f532,"Ignore /fixtures for dependabot (#28422)

We'll keep these up to date out of band, they are just for testing and
don't ship in the npm packages.",Ricky,2024-02-22T20:44:37Z
aaf85f3af8c30252edaab5c24975cd086937b2a4,"Make enableRefAsProp www dynamic (#28423)

Going to start rolling this out",Ricky,2024-02-22T20:35:52Z
e4b816ba1a1ea7c1874cf3f82dd841830b71341a,"s/getRootNode/ownerDocument (#28412)

getRootNode isn't always available, use ownerDocument instead",Ricky,2024-02-22T19:53:02Z
288cf747c96cea278a6ddce126ce7a0484678afd,"React DevTools 5.0.0 -> 5.0.1 (#28418)

Full list of changes (not a public CHANGELOG):

* feature[REMOVED][devtools]: turn off / hide location based component
filters ([hoxyq](https://github.com/hoxyq) in
[#28417](https://github.com/facebook/react/pull/28417))
* Add useSyncExternalStore and useTransition to getPrimitiveStackCache
([jamesbvaughan](https://github.com/jamesbvaughan) in
[#28399](https://github.com/facebook/react/pull/28399))
* chore[devtools]: use react-window from npm and bump
react-virtualized-auto-sizer to ^1.0.23
([hoxyq](https://github.com/hoxyq) in
[#28408](https://github.com/facebook/react/pull/28408))
* Pass ref as normal prop ([acdlite](https://github.com/acdlite) in
[#28348](https://github.com/facebook/react/pull/28348))
* Combine createElement and JSX modules
([acdlite](https://github.com/acdlite) in
[#28320](https://github.com/facebook/react/pull/28320))
* [Debug Tools] Always use includeHooksSource option
([sebmarkbage](https://github.com/sebmarkbage) in
[#28309](https://github.com/facebook/react/pull/28309))
* Revert ""[Tests] Reset modules by default""
([acdlite](https://github.com/acdlite) in
[#28318](https://github.com/facebook/react/pull/28318))
* Switch <Context> to mean <Context.Provider>
([gaearon](https://github.com/gaearon) in
[#28226](https://github.com/facebook/react/pull/28226))
* [Debug Tools] Introspect Promises in use()
([sebmarkbage](https://github.com/sebmarkbage) in
[#28297](https://github.com/facebook/react/pull/28297))
* fix[devtools/useModalDismissSignal]: use getRootNode for shadow root
case support ([hoxyq](https://github.com/hoxyq) in
[#28145](https://github.com/facebook/react/pull/28145))
* fix: define IS_ACT_ENVIRONMENT global for tests with concurrent mode
and synchronous act ([hoxyq](https://github.com/hoxyq) in
[#28296](https://github.com/facebook/react/pull/28296))
* chore: gate legacy apis for react-devtools-shell
([hoxyq](https://github.com/hoxyq) in
[#28273](https://github.com/facebook/react/pull/28273))
* DevTools: Add support for use(Context)
([eps1lon](https://github.com/eps1lon) in
[#28233](https://github.com/facebook/react/pull/28233))
* Remove __self and __source location from elements
([sebmarkbage](https://github.com/sebmarkbage) in
[#28265](https://github.com/facebook/react/pull/28265))
* chore: use versioned render in inspectedElement test
([hoxyq](https://github.com/hoxyq) in
[#28246](https://github.com/facebook/react/pull/28246))
* chore: use versioned render in TimelineProfiler test and gate some for
legacy rendering ([hoxyq](https://github.com/hoxyq) in
[#28218](https://github.com/facebook/react/pull/28218))
* [Tests] Reset modules by default
([rickhanlonii](https://github.com/rickhanlonii) in
[#28254](https://github.com/facebook/react/pull/28254))
* chore: use versioned render in preprocessData test and gate some for …
([hoxyq](https://github.com/hoxyq) in
[#28219](https://github.com/facebook/react/pull/28219))
* chore: use versioned render in storeStressSync test and gate them for
legacy rendering ([hoxyq](https://github.com/hoxyq) in
[#28216](https://github.com/facebook/react/pull/28216))
* Patch devtools before running useMemo function in strict mode
([gsathya](https://github.com/gsathya) in
[#28249](https://github.com/facebook/react/pull/28249))
* chore: use versioned render in storeComponentFilters test
([hoxyq](https://github.com/hoxyq) in
[#28241](https://github.com/facebook/react/pull/28241))
* chore: use versioned render in profilerContext test
([hoxyq](https://github.com/hoxyq) in
[#28243](https://github.com/facebook/react/pull/28243))
* chore: use versioned render in profilingCommitTreeBuilder test and
gate some for legacy rendering ([hoxyq](https://github.com/hoxyq) in
[#28236](https://github.com/facebook/react/pull/28236))
* chore: use versioned render in profilingHostRoot test and gate some
for legacy rendering ([hoxyq](https://github.com/hoxyq) in
[#28237](https://github.com/facebook/react/pull/28237))
* chore: use versioned render in profilingCache test
([hoxyq](https://github.com/hoxyq) in
[#28242](https://github.com/facebook/react/pull/28242))
* chore: use versioned render in ownersListContext test
([hoxyq](https://github.com/hoxyq) in
[#28240](https://github.com/facebook/react/pull/28240))
* chore: use versioned render in editing test
([hoxyq](https://github.com/hoxyq) in
[#28239](https://github.com/facebook/react/pull/28239))
* chore: use versioned render in treeContext test
([hoxyq](https://github.com/hoxyq) in
[#28245](https://github.com/facebook/react/pull/28245))
* chore: use versioned render in store test
([hoxyq](https://github.com/hoxyq) in
[#28244](https://github.com/facebook/react/pull/28244))
* chore: use versioned render in profilerStore test
([hoxyq](https://github.com/hoxyq) in
[#28238](https://github.com/facebook/react/pull/28238))
* chore: use versioned render in profilingCharts test
([hoxyq](https://github.com/hoxyq) in
[#28235](https://github.com/facebook/react/pull/28235))
* chore: use versioned render in profilerChangeDescriptions test
([hoxyq](https://github.com/hoxyq) in
[#28221](https://github.com/facebook/react/pull/28221))
* chore: use versioned render in storeOwners test
([hoxyq](https://github.com/hoxyq) in
[#28215](https://github.com/facebook/react/pull/28215))
* chore: use versioned render in componentStacks test
([hoxyq](https://github.com/hoxyq) in
[#28214](https://github.com/facebook/react/pull/28214))
* chore: use versioned render in console test
([hoxyq](https://github.com/hoxyq) in
[#28213](https://github.com/facebook/react/pull/28213))
* chore: use versioned render in useEditableValue test
([hoxyq](https://github.com/hoxyq) in
[#28212](https://github.com/facebook/react/pull/28212))
* chore: use versioned render in FastRefreshDevToolsIntegration test
([hoxyq](https://github.com/hoxyq) in
[#28211](https://github.com/facebook/react/pull/28211))
* chore: add versioned render implementation for DevTools tests
([hoxyq](https://github.com/hoxyq) in
[#28210](https://github.com/facebook/react/pull/28210))
* chore: add single versioned implementation of act for DevTools tests
([hoxyq](https://github.com/hoxyq) in
[#28186](https://github.com/facebook/react/pull/28186))
* DevTools: Add support for useFormState
([eps1lon](https://github.com/eps1lon) in
[#28232](https://github.com/facebook/react/pull/28232))
* DevTools: Add support for useOptimistic Hook
([eps1lon](https://github.com/eps1lon) in
[#27982](https://github.com/facebook/react/pull/27982))
* Add stable React.act export ([acdlite](https://github.com/acdlite) in
[#28160](https://github.com/facebook/react/pull/28160))
* [flow] upgrade to 0.225.1 ([kassens](https://github.com/kassens) in
[#27871](https://github.com/facebook/react/pull/27871))
* fix[devtools/e2e]: add fallback for act in integration tests
([hoxyq](https://github.com/hoxyq) in
[#27842](https://github.com/facebook/react/pull/27842))
* Add stable concurrent option to react-test-renderer
([jackpope](https://github.com/jackpope) in
[#27804](https://github.com/facebook/react/pull/27804))
* Update act references in tests ([gnoff](https://github.com/gnoff) in
[#27805](https://github.com/facebook/react/pull/27805))
* Flow: make more objects exact ([kassens](https://github.com/kassens)
in [#27790](https://github.com/facebook/react/pull/27790))",Ruslan Lesiutin,2024-02-22T19:45:55Z
d54b4cf303143b459c3caae54d14ae926a8ee09a,"fix[devtools]: fixed Tree indentation logic after updating react-windows (#28421)

Forward-fixing the indentation after landing
https://github.com/facebook/react/pull/28408. Could potentially be
related to `ref` changes in `react`, but haven't validated yet.

Haven't occured while testing the previous PR, but reproduced while
testing the https://github.com/facebook/react/pull/28418, for which I've
rebuilt all dependencies, including `react`.

This change basically removes the props passing from original parent,
`rest` should include only `ref`:
https://github.com/bvaughn/react-window/blob/efad3d8909753fd74aad7c47dc902b26f0919651/src/createListComponent.js#L382",Ruslan Lesiutin,2024-02-22T19:18:30Z
d4cac3f96c01b4222f917a2e5a8ce85754f706f8,"feature[REMOVED][devtools]: turn off / hide location based component filters (#28417)

Following https://github.com/facebook/react/pull/28265, this should
disable location-based component filters.

```
// Following __debugSource removal from Fiber, the new approach for finding the source location
// of a component, represented by the Fiber, is based on lazily generating and parsing component stack frames
// To find the original location, React DevTools will perform symbolication, source maps are required for that.
// In order to start filtering Fibers, we need to find location for all of them, which can't be done lazily.
// Eager symbolication can become quite expensive for large applications.
```

I am planning to publish a patch version of RDT soon, so I think its
better to remove this feature, instead of shipping it in a broken state.

The reason for filtering out these filters is a potential cases, where
we load filters from the backend (like in RN, where we storing some
settings on device), or these filters can be stored in user land
(`window.__REACT_DEVTOOLS_COMPONENT_FILTERS__`).

Explicitly tested the case when:
1. Load current RDT extension, add location-based component filter
2. Reload the page and observe that previously created component filter
is preserved
3. Re-load RDT extension with these changes, observe there is no
previously created component filter and user can't create a new
location-based filter
4. Reload RDT extension without these changes, no location-based filters
saved, user can create location-based filters",Ruslan Lesiutin,2024-02-22T16:59:29Z
47beb96ccf1085fe048c4d79d1f762566166d94e,"Add useSyncExternalStore and useTransition to getPrimitiveStackCache (#28399)

<!--
  Thanks for submitting a pull request!
We appreciate you spending the time to work on these changes. Please
provide enough information so that others can review your pull request.
The three fields below are mandatory.

Before submitting a pull request, please make sure the following is
done:

1. Fork [the repository](https://github.com/facebook/react) and create
your branch from `main`.
  2. Run `yarn` in the repository root.
3. If you've fixed a bug or added code that should be tested, add tests!
4. Ensure the test suite passes (`yarn test`). Tip: `yarn test --watch
TestName` is helpful in development.
5. Run `yarn test --prod` to test in the production environment. It
supports the same options as `yarn test`.
6. If you need a debugger, run `yarn test --debug --watch TestName`,
open `chrome://inspect`, and press ""Inspect"".
7. Format your code with
[prettier](https://github.com/prettier/prettier) (`yarn prettier`).
8. Make sure your code lints (`yarn lint`). Tip: `yarn linc` to only
check changed files.
  9. Run the [Flow](https://flowtype.org/) type checks (`yarn flow`).
  10. If you haven't already, complete the CLA.

Learn more about contributing:
https://reactjs.org/docs/how-to-contribute.html
-->

## Summary

<!--
Explain the **motivation** for making this change. What existing problem
does the pull request solve?
-->

This solves the problem of the devtools extension failing to parse hook
names for components that make use of `useSyncExternalStore` or
`useTransition`.

See #27889 

## How did you test this change?

<!--
Demonstrate the code is solid. Example: The exact commands you ran and
their output, screenshots / videos if the pull request changes the user
interface.
How exactly did you verify that your PR solves the issue you wanted to
solve?
  If you leave this empty, your PR will very likely be closed.
-->

I tested this against my own codebases and against the example repro
project that I linked in #27889.

To test, I opened up the Components tab of the dev tools extension,
selected a component with hooks that make use of `useSyncExternalStore`
or `useTransition`, clicked the ""parse hook names"" magic wand button,
and observed that it now succeeds.",James Vaughan,2024-02-22T11:42:52Z
404ed926588ec1cb7e9524d4dbb75b7297130adc,"chore[devtools]: use react-window from npm and bump react-virtualized-auto-sizer to ^1.0.23 (#28408)

1. Bumps `react-virtualized-auto-sizer` to 1.0.23, which has a fix for
cases with multiple realms -
https://github.com/bvaughn/react-virtualized-auto-sizer/pull/82
2. Removes `react-window` from react-devtools-shared/src/node_modules,
now listed as dependency in `package.json` and bumped to 1.8.10

Tested:
- Chrome extension
- Standalone shell with RN",Ruslan Lesiutin,2024-02-22T11:31:10Z
81d2a51a97ca8ea7cfbce885ecab070a668732ab,Add smoke test for flight fixture (#28350),Sebastian Silbermann,2024-02-21T22:47:36Z
59fe6c3ac1d52e4e568be52b908905b8898a4777,"Remove RTR from StrictEffectsMode-test (#28387)

## Summary

Cleaning up internal usage of ReactTestRenderer

## How did you test this change?

`yarn test
packages/react-reconciler/src/__tests__/StrictEffectsMode-test.js`",Jack Pope,2024-02-21T20:17:52Z
c0274063f0d625d6e17e82f3436f4a0b78b7e58f,"[Flight] Prefix Replayed Console Logs with a Badge (#28403)

Builds on top of #28384.

This prefixes each log with a badge similar to how we badge built-ins
like ""ForwardRef"" and ""Memo"" in the React DevTools. The idea is that we
can add such badges in DevTools for Server Components too to carry on
the consistency.

This puts the ""environment"" name in the badge which defaults to
""Server"". So you know which source it is coming from.

We try to use the same styling as the React DevTools. We use light-dark
mode where available to support the two different color styles, but if
it's not available I use a fixed background so that it's always readable
even in dark mode.

In Terminals, instead of hard coding colors that might not look good
with some themes, I use the ANSI color code to flip
background/foreground colors in that case.

In earlier commits I had it on the end of the line similar to the
DevTools badges but for multiline I found it better to prefix it. We
could try various options tough.

In most cases we can use both ANSI and the `%c` CSS color specifier,
because node will only use ANSI and hide the other. Chrome supports both
but the color overrides ANSI if it comes later (and Chrome doesn't
support color inverting anyway). Safari/Firefox prints the ANSI, so it
can only use CSS colors.

Therefore in browser builds I exclude ANSI.

On the server I support both so if you use Chrome inspector on the
server, you get nice colors on both terminal and in the inspector.

Since Bun uses WebKit inspector and it prints the ANSI we can't safely
emit both there. However, we also can't emit just the color specifier
because then it prints in the terminal.
https://github.com/oven-sh/bun/issues/9021 So we just use a plain string
prefix for now with a bracket until that's fixed.

Screen shots:

<img width=""758"" alt=""Screenshot 2024-02-21 at 12 56 02 AM""
src=""https://github.com/facebook/react/assets/63648/4f887ffe-fffe-4402-bf2a-b7890986d60c"">
<img width=""759"" alt=""Screenshot 2024-02-21 at 12 56 24 AM""
src=""https://github.com/facebook/react/assets/63648/f32d432f-f738-4872-a700-ea0a78e6c745"">
<img width=""514"" alt=""Screenshot 2024-02-21 at 12 57 10 AM""
src=""https://github.com/facebook/react/assets/63648/205d2e82-75b7-4e2b-9d9c-aa9e2cbedf39"">
<img width=""489"" alt=""Screenshot 2024-02-21 at 12 57 34 AM""
src=""https://github.com/facebook/react/assets/63648/ea52d1e4-b9fa-431d-ae9e-ccb87631f399"">
<img width=""516"" alt=""Screenshot 2024-02-21 at 12 58 23 AM""
src=""https://github.com/facebook/react/assets/63648/52b50fac-bec0-471d-a457-1a10d8df9172"">
<img width=""956"" alt=""Screenshot 2024-02-21 at 12 58 56 AM""
src=""https://github.com/facebook/react/assets/63648/0096ed61-5eff-4aa9-8a8a-2204e754bd1f"">",Sebastian Markbåge,2024-02-21T19:59:08Z
9a5b6bd84ffa69bfd8b2859ce23e56d17daa8c40,"[Flight] Instrument the Console in the RSC Environment and Replay Logs on the Client (#28384)

When developing in an RSC environment, you should be able to work in a
single environment as if it was a unified environment. With thrown
errors we already serialize them and then rethrow them on the client.

Since by default we log them via onError both in Flight and Fizz, you
can get the same log in the RSC runtime, the SSR runtime and on the
client.

With console logs made in SSR renders, you typically replay the same
code during hydration on the client. So for example warnings already
show up both in the SSR logs and on the client (although not guaranteed
to be the same). You could just spend your time in the client and you'd
be fine.

Previously, RSC logs would not be replayed because they don't hydrate.
So it's easy to miss warnings for example.

With this approach, we replay RSC logs both during SSR so they end up in
the SSR logs and on the client. That way you can just stay in the
browser window during normal development cycles. You shouldn't have to
care if your component is a server or client component when working on
logical things or iterating on a product.

With this change, you probably should mostly ignore the Flight log
stream and just look at the client or maybe the SSR one. Unless you're
digging into something specific. In particular if you just naively run
both Flight and Fizz in the same terminal you get duplicates. I like to
run out fixtures `yarn dev:region` and `yarn dev:global` in two separate
terminals.

Console logs may contain complex objects which can be inspected. Ideally
a DevTools inspector could reach into the RSC server and remotely
inspect objects using the remote inspection protocol. That way complex
objects can be loaded on demand as you expand into them. However, that
is a complex environment to set up and the server might not even be
alive anymore by the time you inspect the objects. Therefore, I do a
best effort to serialize the objects using the RSC protocol but limit
the depth that can be rendered.

This feature is only own in dev mode since it can be expensive.

In a follow up, I'll give the logs a special styling treatment to
clearly differentiate them from logs coming from the client. As well as
deal with stacks.",Sebastian Markbåge,2024-02-21T19:47:55Z
41b3c31bcbe9f238697b4c79b39017916e0f131c,"remove RTR from ReactCacheOld-test (#28409)

## Summary

swaps `react-test-renderer` for `react-noop-rendererer` in
ReactCacheOld-test

## How did you test this change?

`yarn test-www ReactCacheOld`",Noah Lemen,2024-02-21T18:31:43Z
dc30644ca77e52a2760e81fbdbcfbd2f2fd4979c,"Convert string ref props to callback props (#28398)

When enableRefAsProp is on, we should always use the props as the source
of truth for refs. Not a field on the fiber.

In the case of string refs, this presents a problem, because string refs
are not passed around internally as strings; they are converted to
callback refs. The ref used by the reconciler is not the same as the one
the user provided.

But since this is a deprecated feature anyway, what we can do is clone
the props object and replace it with the internal callback ref. Then we
can continue to use the props object as the source of truth.

This means the internal callback ref will leak into userspace. The
receiving component will receive a callback ref even though the parent
passed a string. Which is weird, but again, this is a deprecated
feature, and we're only leaving it around behind a flag so that Meta can
keep using string refs temporarily while they finish migrating their
codebase.",Andrew Clark,2024-02-21T16:41:29Z
ddd736d2589c972e1ac75402f2e2e833e97ad61a,"refactor: remove dead types of fiber (#28405)

The properties `firstEffect` and `lastEffect` of the Fiber are currently
not being used and are considered to be dead code, and can be removed.",bubucuo,2024-02-21T11:17:21Z
353ecd05160a318a3f75260ee7906fd12e05cb9d,"Remove JSX propTypes validation (#28328)

This removes the remaining `propTypes` validation calls, making
declaring `propTypes` a no-op. In other words, React itself will no
longer validate the `propTypes` that you declare on your components.

In general, our recommendation is to use static type checking (e.g.
TypeScript). If you'd like to still run propTypes checks, you can do so
manually, same as you'd do outside React:

```js
import checkPropTypes from 'prop-types/checkPropTypes';

function Button(props) {
  checkPropTypes(Button.propTypes, prop, 'prop', Button.name)
  // ...
}
```

This could be automated as a Babel plugin if you want to keep these
checks implicit. (We will not be providing such a plugin, but someone in
community might be interested in building or maintaining one.)",dan,2024-02-21T11:15:51Z
4ea424e63d1a74ce57ef675b64a8c4eabfdb2fdc,"Capitalize the default Flight environment (#28402)

It's cleaner and more in line with how we style other badges like ""Memo""
and ""ForwardRef"" in DevTools.",Sebastian Markbåge,2024-02-21T03:30:23Z
3b260007ed28593ca4ad0505591387dd57c57b0d,"Remove RTR from ReactCreateRef-test (#28386)

## Summary

Cleaning up internal usage of ReactTestRenderer

## How did you test this change?

`yarn test packages/react/src/__tests__/ReactCreateRef-test.js`",Jack Pope,2024-02-20T22:49:51Z
0778f61321ebb235b49e4630e43e734a9badbd5c,"Remove RTR usage from useSubscription-test (#28388)

## Summary

Cleaning up internal usage of ReactTestRenderer

## How did you test this change?

`yarn test
packages/use-subscription/src/__tests__/useSubscription-test.js`",Jack Pope,2024-02-20T22:49:26Z
cefc1c66c179e5cca255f1ff53610a0ed9f8e710,Remove unused ReactTestUtils from ReactDOMServerIntegration tests (#28379),Sebastian Silbermann,2024-02-20T21:49:34Z
51c9146072395b13ab56834393a1c30f3ddedec8,Bump actions/checkout (#28383),Masato Nakamura,2024-02-20T21:46:43Z
90a0ae101571f58781225dd0dc1948b0a15ea9e4,"Remove RTR from ReactSuspense-test (#28390)

## Summary

Cleaning up internal usage of ReactTestRenderer

## How did you test this change?

`yarn test
packages/react-reconciler/src/__tests__/ReactSuspense-test.internal.js`",Jack Pope,2024-02-20T20:40:16Z
49441e342f0c5252eb24bb352cf76ac59aef353c,"refactor: remove dead code of fiber (#28389)

The `nextEffect` property of the `fiber` is currently not being used and
has become dead code. It can be safely removed.",bubucuo,2024-02-20T19:31:15Z
8f012266dc127d7bd36e28c22e1ad77ec0ae95fa,"Rename default FlightClientConfigs to FlightClientStreamConfig (#28382)

Since this is more about specifically the streaming protocol and I'll
add other dimensions that don't map 1:1.

E.g. some configs need to be the same across all servers.",Sebastian Markbåge,2024-02-20T19:24:08Z
fa2f82addc7c817892c482792f56a35277e8b75a,"Pass ref as normal prop (#28348)

Depends on:

- #28317 
- #28320 

---

Changes the behavior of the JSX runtime to pass through `ref` as a
normal prop, rather than plucking it from the props object and storing
on the element.

This is a breaking change since it changes the type of the receiving
component. However, most code is unaffected since it's unlikely that a
component would have attempted to access a `ref` prop, since it was not
possible to get a reference to one.

`forwardRef` _will_ still pluck `ref` from the props object, though,
since it's extremely common for users to spread the props object onto
the inner component and pass `ref` as a differently named prop. This is
for maximum compatibility with existing code — the real impact of this
change is that `forwardRef` is no longer required.

Currently, refs are resolved during child reconciliation and stored on
the fiber. As a result of this change, we can move ref resolution to
happen only much later, and only for components that actually use them.
Then we can remove the `ref` field from the Fiber type. I have not yet
done that in this step, though.",Andrew Clark,2024-02-20T19:17:41Z
a515d753ba54566228b2c8622fa8e2de7e57bfef,Annotate legacy mode tests in ReactDOMInput (#28333),Sebastian Silbermann,2024-02-20T15:52:49Z
1deda7690fc95d873b14cbcb0ee6c8f1dd1395a3,Remove ReactTestUtils from ReactDOMComponent (#28334),Sebastian Silbermann,2024-02-20T15:52:30Z
48ca0e82985a1f0cdd2787a281166a59af4b88d0,Remove ReactTestUtils from ReactUpdates (#28378),Sebastian Silbermann,2024-02-20T15:52:11Z
7b196be09167f8fe9091168dab1769a552263065,Remove ReactTestUtils from ReactDOM-test (#28377),Sebastian Silbermann,2024-02-20T15:51:44Z
3c9560b29e77f11b2dc39ccb05a92361e9af2a1d,Remove ReactTestUtils from ReactComponentLifeCycle (#28376),Sebastian Silbermann,2024-02-20T15:51:10Z
e68431c89fe7ed36f7eac4f607a9d4836d3788fd,Remove ReactTestUtils from ReactJSXTransformIntegration (#28338),Sebastian Silbermann,2024-02-20T15:50:52Z
7ab84fb1168d14b895fc9569b6b6899a10bfdc78,Remove usage of ReactTestUtils from ReactFunctionComponent (#28331),Sebastian Silbermann,2024-02-20T15:50:34Z
b559f5fefed48a7e95afe3bece9e625d4b4b82a2,Remove ReactTestUtils from refs-test (#28336),Sebastian Silbermann,2024-02-20T15:50:17Z
5fb2c93f3924ba980444da5698f60651b5ef0689,"Combine createElement and JSX modules (#28320)

Depends on:

- #28317 

---

There's a ton of overlap between the createElement implementation and
the JSX implementation, so I combined them into a single module.

In the actual build output, the shared code between JSX and
createElement will get duplicated anyway, because react/jsx-runtime and
react (where createElement lives) are separate, flat build artifacts.

So this is more about code organization — with a few key exceptions, the
implementations of createElement and jsx are highly coupled.",Andrew Clark,2024-02-20T03:45:18Z
ec160f32c28ccab798c73ecccbb36ce121e1640e,"Combine ReactJSXElementValidator with main module (#28317)

There are too many layers to the JSX runtime implementation. I think
basically everything should be implemented in a single file, so that's
what I'm going to do.

As a first step, this deletes ReactJSXElementValidator and moves all the
code into ReactJSXElement. I can already see how this will help us
remove more indirections in the future.

Next I'm going to do start moving the `createElement` runtime into this
module as well, since there's a lot of duplicated code.",Andrew Clark,2024-02-20T03:14:29Z
c820097716c3d9765bf85bf58202a4975d99e450,"Move all markRef calls into begin phase (#28375)

Certain fiber types may have a ref attached to them. The main ones are
HostComponent and ClassComponent. During the render phase, we check if a
ref was passed to it, and if so, we schedule a Ref effect: `markRef`.

Currently, we're not consistent about whether we call `markRef` in the
begin phase or the complete phase. For some fiber types, I found that
`markRef` was called in both phases, causing redundant work.

After some investigation, I don't believe it's necessary to call
`markRef` in both the begin phase and the complete phase, as long as you
don't bail out before calling `markRef`.

I though that maybe it had to do with the
`attemptEarlyBailoutIfNoScheduledUpdates` branch, which is a fast path
that skips the regular begin phase if no new props, state, or context
were passed. But if the props haven't changed (referentially — the
`memo` and `shouldComponentUpdate` checks happen later), then it follows
that the ref couldn't have changed either. This is true even in the old
`createElement` runtime where `ref` is stored on the element instead of
as a prop, because there's no way to pass a new ref to an element
without also passing new props. You might argue this is a leaky
assumption, but since we're shifting ref to be just a regular prop
anyway, I think it's the correct way to think about it going forward.

I think the pattern of calling `markRef` in the complete phase may have
been left over from an earlier iteration of the implementation before
the bailout logic was structured like it is today.

So, I removed all the `markRef` calls from the complete phase. In the
case of ScopeComponent, which had no corresponding call in the begin
phase, I added one.

We already had a test that asserted that a ref is reattached even if the
component bails out, but I added some new ones to be extra safe.

The reason I'm changing this this is because I'm working on a different
change to move the ref handling logic in `coerceRef` to happen in render
phase of the component that accepts the ref, instead of during the
parent's reconciliation.",Andrew Clark,2024-02-20T02:06:43Z
2e84e1629924e6cb278638305fa92040f6ef6eb5,"[Flight] Better error message if you pass a function as a child to a client component (#28367)

Similar to #28362 but if you pass it to a client component.",Sebastian Markbåge,2024-02-19T17:36:16Z
65a0e2b25ec4642f83c32d7599b5252c3955a60b,"[Flight] Warn if this argument is passed to .bind of a Server Reference (#28380)

This won't ever be serialized and is likely just a mistake.

This should be covered by the ""use server"" compiler since it ensures
that something that accepts a ""this"" won't be allowed to compile and if
it doesn't accept it, TypeScript should ideally forbid it to be passed.

So maybe this is unnecessary.",Sebastian Markbåge,2024-02-19T16:50:13Z
017397d7d33f151f2c2a9936c4b130fded68d08b,"Recover from SSR error in Flight fixture (#28368)

If an error happens before the shell, we need to handle it. In this case
we choose the strategy of rendering a blank document and client
rendering the app. Which will intentionally have a hydration mismatch.",Sebastian Markbåge,2024-02-19T16:50:04Z
9444c51c7e44936c24e1f44db905cfd45c51cff3,"[Flight] Allow a Server Reference to be registered twice (#28343)

It's possible for the same function instance to appear more than once in
the same graph or even the same file.

Currently this errors on trying to reconfigure the property but it
really doesn't matter which one wins. First or last.

Regardless there will be an entry point generated that can get them.",Sebastian Markbåge,2024-02-19T16:49:38Z
c323f8290c2336713b62c69322bb30ed63234c24,"Encode better error messages when part of the context is a client reference (#28355)

Alternative to #28354.

If a client reference is one of the props being describes as part of
another error, we call toString on it, which errors.

We should error explicitly when a Symbol prop is extracted.

However, pragmatically I added the toString symbol tag even though we
don't know what the real tostring will be but we also lie about the
typeof.

We can however in addition to this give it a different description
because describing this property as an object isn't quite right.

We probably could extract the export name but that's kind of renderer
specific and I just added this shared module to Fizz which doesn't have
that which is unfortunate an consequence.

For default exports we don't have a good name of what the alias was in
the receiver. Could maybe call it ""default"" but for now I just call it
""client"".",Sebastian Markbåge,2024-02-19T16:49:25Z
59831c98cffe0edf706238b067928e7cf54d1065,Improve stack trace when gated test fails (#28374),Sebastian Silbermann,2024-02-18T17:17:02Z
c1fd2a91b1042c137d750be85e5998f699a54d2a,"Include the function name for context on invalid function child (#28362)

Also warn for symbols.

It's weird because for objects we throw a hard error but functions we do
a dev only check. Mainly because we have an object branch anyway.

In the object branch we have some built-ins that have bad errors like
forwardRef and memo but since they're going to become functions later, I
didn't bother updating those. Once they're functions those names will be
part of this.",Sebastian Markbåge,2024-02-17T21:41:59Z
fef30c2e0403e0c6986904be89fcd01e665866ee,Fix crash running `yarn flags --sort flag` (#28344),Sebastian Silbermann,2024-02-17T14:28:35Z
62a9c7db185b0852fccd0e48797a3de05520f120,"Annotate legacy mode test in ReactDOMSingletonComponents (#28339)

These are mainly regression tests for legacy root.",Sebastian Silbermann,2024-02-17T14:28:18Z
6a44f352ecdfa93949cade1d2e74755e7d7e9aaa,"Consume the RSC stream twice in the Flight fixture (#28353)

We have an unresolved conflict where the Flight client wants to execute
inside Fizz to emit side-effects like preloads (which can be early) into
that stream. However, the FormState API requires the state to be passed
at the root, so if you're getting that through the RSC payload it's a
Catch 22.

#27314 used a hack to mutate the form state array to fill it in later,
but that doesn't actually work because it's not always an array. It's
sometimes null like if there wasn't a POST. This lead to a bunch of
hydration errors - which doesn't have the best error message for this
case neither. It probably should error with something that specifies
that it's form state.

This fixes it by teeing the stream into two streams and consuming it
with two Flight clients. One to read the form state and one to emit
side-effects and read the root.",Sebastian Markbåge,2024-02-16T23:25:09Z
d6406d8360c5d90fc777dfd1a720ba235c5a8a12,"Validate hook calls in object methods 

Adds some test cases for hook calls in object methods. Initially we didn't catch 
these because InferTypes doesn't actually visit ObjectMethod bodies. Once we fix 
that we correctly reject these examples.",Joe Savona,2024-02-16T19:27:52Z
9c419dfd804efa4646784120790e606bb74bd905,"Disallow calling hooks in functions 

> Don’t call Hooks inside loops, conditions, or nested functions 

Per https://react.dev/warnings/invalid-hook-call-warning#breaking-rules-of-hooks 
it is invalid to call hooks inside function expressions. We now validate this by 
default, i'll verify internally before landing. 

Note the validation is somewhat more conservative and we only disallow known 
hook calls here, this seems like a reasonable tradeoff but i'm open to 
suggestions. We could reuse the same known/potential hook mechanism here but it 
would take some more refactoring.",Joe Savona,2024-02-16T19:00:56Z
a4234bcfbff4dc209b06f8d4612ef71410333bcb,"infer mode only compiles component/hook decls

Forks the logic from Program.ts, letting us customize what
gets compiled.",Joe Savona,2024-02-18T01:37:00Z
ca3d16c5eff02672fb818639716f7dd7c3f961c9,"Enable hook syntax support 

Updates the compiler to understand Flow hook syntax. Like component syntax, in 
infer mode hooks are compiled by default unless opted out. 

Looking ahead, i can imagine splitting up our compilation modes as follows: 

* Annotations: opt-in explicitly 

* Declarations: annotations + component/hook declarations 

* Infer: annotations, component/hook declarations, + component/hook-like 
functions 

This also suggest an alternative annotation strategy: ""use react"" (or ""use 
component"" / ""use hook"") as a general way to tell the compiler that a function 
is intended for React. Then opting out of memoization could do ""use 
react(nomemo)"".",Joe Savona,2024-02-18T01:31:47Z
1e3f9130f37a2d723e57510b36c72b457753f774,"Rewrite reactive scopes to computed with lambda

Updates LowerReactiveScopes to rewrite to a ReactiveFunctionValue
(ReactiveFunction-based) instead of a FunctionExpression (HIR-based). This lets
us include terminals and even nested reactive scopes in the result.",Joe Savona,2024-02-16T22:59:01Z
191064b55c4001306f16d8d7cb42de89b0c0262d,"Add ReactiveFunctionValue variant

Per the previous PR, we don't have a way to rewrite an arbitrary subset of a
ReactiveFunction into a function expression, since FunctionExpression's contents
is still in HIR.

While long-term our plan is to move to HIR everywhere, this PR adds a stopgap of
adding a ReactiveFunctionValue variant of ReactiveValue. As a reminder,
ReactiveValue is a union of (HIR) InstructionValue | SequenceExpression |
LogicalExpression | ConditionalExpression.

For now i did a first stab at the visitors and transforms with the idea that:

* By default, visitors/transforms _don't_ look into these function expressions,
since we didn't previously traverse into (HIR-based) FunctionExpression either

* But there is a visitor/transform method that you can override if you need to.",Joe Savona,2024-02-16T22:59:00Z
03874a29b388c7a5accd153a8c62c8c449fce62d,"Repro for needing function body rewriting in ReactiveFunction phase

Adds an example demonstrating why we need the ability to rewrite parts of a
ReactiveFunction into a function expression. Here, the reactive scope needs to
contain an `if` terminal, but we can't put a ReactiveIfTerminal inside a
function expression, since that expects HIR.

There are two main paths forward:

* Use HIR everywhere. I wrote this up and we're all agreed, it's just a bunch of
work.

* Add an alternative FunctionExpression variant to ReactiveFunction

For now i'm going to take the second route.",Joe Savona,2024-02-16T22:58:59Z
770ca4ab3ee173ab975d61d5022728f0cef5c67f,"[Babel] Add support for ""use memo"" 

We want to start moving away from ""Forget"", so this PR adds support ""use memo"" 
and ""use no memo"" 

I've left ""use forget"" and ""use no forget"" directives unchanged for now, as we 
need to migrate existing users first and then come back and delete support for 
these directives.",Sathya Gunasekaran,2024-02-19T17:48:49Z
ef72271c2d1234c9d1e1358f8083021089a50faa,"Add useModernStrictMode as dynamic flag on www (#28346)

## Summary

Preparing modern strict mode rollout with dynamic feature flag

## How did you test this change?

![Screenshot 2024-02-15 at 10 09
49 AM](https://github.com/facebook/react/assets/8965173/9e90efc2-3578-4e63-ae2c-63d4a4e194b3)",Jack Pope,2024-02-16T16:21:35Z
a9cc32511a12c261ee719e5383818182800d6af4,"stash the component stack on the thrown value and reuse (#25790)

ErrorBoundaries are currently not fully composable. The reason is if you
decide your boundary cannot handle a particular error and rethrow it to
higher boundary the React runtime does not understand that this throw is
a forward and it recreates the component stack from the Boundary
position. This loses fidelity and is especially bad if the boundary is
limited it what it handles and high up in the component tree.

This implementation uses a WeakMap to store component stacks for values
that are objects. If an error is rethrown from an ErrorBoundary the
stack will be pulled from the map if it exists. This doesn't work for
thrown primitives but this is uncommon and stashing the stack on the
primitive also wouldn't work",Josh Story,2024-02-16T04:44:44Z
2ba1b7856975fb350ff1cabe575e6364cc6e8465,"Downgrade pmmmwh/react-refresh-webpack-plugin in the Flight fixture (#28352)

The newer version triggers an error due to require() not being compiled.

This was upgraded in #27328. I'm not sure why that was needed. Maybe it
was just because it was allowed by the caret and something else upgraded
but I haven't been able to make it work with the newer version. So I'll
just pin it.",Sebastian Markbåge,2024-02-16T03:23:30Z
fea900e45447214ddd6ef69076ab7e38433b5ffd,"Remove non-JSX propTypes checks (#28326)

Removes all `propTypes` validation called from outside the JSX
factories. Haven't touched JSX.

Tests that verify related behavior are stripped down to the
non-`propTypes` logic.",dan,2024-02-16T00:35:22Z
530f2c293d6b104c6ada1f2328fa7372be502c5f,"Add test fixture showing invalid location 

Add test fixture showing invalid location 

The error should be on the node mutating the output, not in the read location.",Jan Kassens,2024-02-16T00:00:21Z
ac8971275021c3488a03cf32620c2d563468770b,"Add code frame to snap errors 

Add code frame to snap errors 

This should make it easier (possible) to see if errors point at the right lines. 

No idea why I had to add 1 to the column, you'd think it's all babel-standard 
(whatever it is) and there wouldn't be off by one errors, but I'm not quite in 
the mood to debug babel issues more then necessary right now...",Jan Kassens,2024-02-15T23:42:21Z
d3bca420c049e600e176d1f1b58e17d93ec593aa,"Opt out react-forget-runtime from being Forgotten 

This caused a build error when Forget was used in an Expo app as the 
react-forget-runtime package was itself being compiled with Forget. This broke 
Metro as metro serializes modules to iifes, but the import syntax that was 
injected by the useMemoCachePolyfill flag was left behind 

In practice I don't think the runtime package needs to ever be compiled by 
Forget, so this PR opts out the whole file. This would also prevent builds from 
breaking if someone decided to use the ""all"" compilation mode. 

Test plan: Ran the expo app and verified that it now builds with no errors",Lauren Tan,2024-02-15T22:44:44Z
5142affc26d61aa32f2088541e6c93f08f21a79f,"Allow module level ""use no forget"" 

Currently we only allow adding the directive to function bodies, but there may 
be cases where we want to always opt out an entire module from being compiled by 
Forget",Lauren Tan,2024-02-15T22:44:44Z
92686722cae09ebc3dd5f4aec61b0d067fba1203,"[Flight] Fix `reference` param type in `registerServerReference` (#27688)

The `reference` that is passed into `registerServerReference` can be a
plain function. It does not need to have the three additonal properties
of a `ServerRefeference`. In fact, adding these properties (plus `bind`)
is precisely what `registerServerReference` does.",Hendrik Liebau,2024-02-15T21:09:25Z
0745e6bee9edb9842dfa7efa6f9835e5be6d8b98,Remove usage of ReactTestUtils from ReactContextValidator (#28329),Sebastian Silbermann,2024-02-15T18:14:35Z
710d5137e27db578dfec723b2c006821a1a61973,Remove ReactTestUtils from ReactIdentity (#28332),Sebastian Silbermann,2024-02-15T18:14:19Z
2e470a788e359e34feeadb422daaff046baf66cc,"[Fizz] Align recoverable error serialization in dev mode (#28340)

Same as #28327 but for Fizz.

One thing that's weird about this recoverable error is that we don't
send the regular stack for it, just the component stack it seems. This
is missing some potential information and if we move toward integrated
since stacks it would be one thing.",Sebastian Markbåge,2024-02-15T01:15:59Z
21c563157003ded36fcc54589a6075d2dd157c90,"[be] Prune implicit breaks when flattening unused labels 

A labeled block will generally end with an implicit break out of the label. 
However, if there are no _explicit_ breaks to the label, we'll end up with a 
ReactiveFunction along the lines of: 

``` 

bb1: { 

...instructions with no explicit `break bb1`... 

(implicit) break; 

} 

``` 

The `PruneUnusedLabels` pass removes such unused labels, inlining the content of 
label terminal into the surrounding block. However, we weren't pruning the 
`break`! This wasn't a problem in practice since codegen, and future passes, 
would just ignore this. But it's more correct to go and find these unnecessary 
implicit breaks and prune them, which this PR does. 

Again, this shouldn't have any impact other than producing cleaner 
ReactiveFunction data during debugging.",Joe Savona,2024-02-14T23:36:40Z
ad5a27239392d02ffec168cdbffc582ee1cb3969,Skip functions using same rules as regular pipeline,Joe Savona,2024-02-14T23:23:37Z
a7144f297c1c6fe457ca30ce6a211ab59feac11e,"[Flight] Improve error message when it's not a real Error object (#28327)

Also deals with symbols. Alternative to #28312.

We currently always normalize rejections or thrown values into `Error`
objects. Partly because in prod it'll be an error object and you
shouldn't fork behavior on knowing the value outside a digest. We might
want to even make the message always opaque to avoid being tempted and
then discover in prod that it doesn't work.

However, we do include the message in DEV.

If this is a non-Error object we don't know what the properties mean.
Ofc, we don't want to include too much information in the rendered
string, so we use the general `describeObjectForErrorMessage` helper.
Unfortunately it's pretty conservative about emitting values so it's
likely to exclude any embedded string atm. Could potentially expand it a
bit.

We could in theory try to serialize as much as possible and re-throw the
actual object to allow for inspection to be expanded inside devtools
which is what I plan on for consoles, but since we're normalizing to an
Error this is in conflict with that approach.",Sebastian Markbåge,2024-02-14T23:21:07Z
09d122a20e0fc416a4056e43549241a0d2d7e1c6,"[be] Remove @enableMergeConsecutiveScopes flag, feature is stable 

Continuing on my quest to clean up our feature flags, the logic for merging 
consecutive feature flags is stable. Let's remove 
`@enableMergeConsecutiveScopes` since this is enabled everywhere.",Joe Savona,2024-02-14T23:13:00Z
a927040b7a67b2304ad484c903bb56e55f511b3b,"Add an optional validation to bail out on capitalized function calls 

Some components stop being components over time and are used as regular 
functions instead, but they may have lingering hook calls. Those hook calls make 
it so the capitalized function calling them do not error (they appear to be a 
function to existing eslint rules), but they are nonetheless unsafe to memoize. 
This diff adds a conservative option to bail out on all capitalized function 
calls. 

There are a handful of known-non-component capitalized functions, like 
`Boolean`, `String`, and `Number`. This diff also adds the ability to supply 
capitalized function names that should not be considered in this analysis. 

I added three tests: 

1. Ensure an error occurs in the obvious case 

2. Ensure an error occurs when the value is aliased simply 

3. Ensure the allowlist works 

This is my first commit so please go hard on me. I was unsure about where this 
code should live, so please nitpick.",Jordan Brown,2024-02-14T18:23:32Z
adadb8169e781ff645c61aa558dc901b1c2c97f4,"Rewrite tests that depend on propTypes warnings (#28325)

In preparation for https://github.com/facebook/react/pull/28207.

These tests aren't actually testing propTypes, they just use them to
verify we can display a meaningful component name. We've mostly moved
away from warnings that display component names directly in favor of
component stacks. So let's just replace these with tests asserting the
component names show up in stacks.",dan,2024-02-14T17:07:33Z
64e755d7374d753c75dc16ba1a4a09ce7b8689dd,"Remove propTypes checks for legacy context (#28324)

Part of https://github.com/facebook/react/pull/28207, this is easy to
land in isolation.

The approach I'm taking is slightly different — instead of leaving
validation on for legacy context, I disable the validation (it's
DEV-only) and leave just the parts that drive the runtime logic. I.e.
`contexTypes` and `childContextTypes` *values* are now ignored, the keys
are used just like before.",dan,2024-02-14T16:22:30Z
f0e808e5bcbfdaa24a8a0893cd718f4d189f2369,"[Debug Tools] Always use includeHooksSource option (#28309)

This option was added defensively but it's not needed. There's no cost
to including it always.

I suspect this optional was added mainly to avoid needing to update
tests. That's not a reason to have an unnecessary public API though.

We have a praxis for dealing with source location in tests to avoid them
failing tests. I also ported them to inline snapshots so that additions
to the protocol isn't such a pain.",Sebastian Markbåge,2024-02-14T16:07:35Z
dc3178151b8cb0359e5c36b8ed57458b807ae8e3,"Add ignoreList to our source maps (#28310)

All our sources are considered third party and should be hidden in stack
traces unless expanded. Our internals aren't actionable anyway.

This doesn't really do much without tooling that actually forwards this
to new generated source maps, in which case they probably just add them
to ignorelist anyway.",Sebastian Markbåge,2024-02-13T17:54:06Z
0d108f218222d0221cb90ee88a92a66cd9970aab,Enable more noop RN flags (#28307),Ricky,2024-02-13T17:15:55Z
4867a3365e9d2f19c795463caa5a6294c2915269,"Enable disableJavaScriptURLs for RN (#28306)

This is DOM only",Ricky,2024-02-13T17:15:44Z
5d445b50a670d6cdc52943ca4e5ab3422792c57c,Land enableAsyncActions enableFormActions in www (#28315),Ricky,2024-02-13T16:48:56Z
015ff2ed66c1d164111752263682d1d757c97f3e,"Revert ""[Tests] Reset modules by default"" (#28318)

This was causing a slowdown in one of the tests
ESLintRuleExhaustiveDeps-test.js. Reverting until we figure out why.",Andrew Clark,2024-02-13T16:39:45Z
14fd9630ee04387f4361da289393234e2b7d93b6,"Switch <Context> to mean <Context.Provider> (#28226)

Previously, `<Context>` was equivalent to `<Context.Consumer>`. However,
since the introduction of Hooks, the `<Context.Consumer>` API is rarely
used. The goal here is to make the common case cleaner:

```js
const ThemeContext = createContext('light')

function App() {
  return (
    <ThemeContext value=""dark"">
      ...
    </ThemeContext>
  )
}

function Button() {
  const theme = use(ThemeContext)
  // ...
}
```

This is technically a breaking change, but we've been warning about
rendering `<Context>` directly for several years by now, so it's
unlikely much code in the wild depends on the old behavior. [Proof that
it warns today (check
console).](https://codesandbox.io/p/sandbox/peaceful-nobel-pdxtfl)

---

**The relevant commit is 5696782b428a5ace96e66c1857e13249b6c07958.** It
switches `createContext` implementation so that `Context.Provider ===
Context`.

The main assumption that changed is that a Provider's fiber type is now
the context itself (rather than an intermediate object). Whereas a
Consumer's fiber type is now always an intermediate object (rather than
it being sometimes the context itself and sometimes an intermediate
object).

My methodology was to start with the relevant symbols, work tags, and
types, and work my way backwards to all usages.

This might break tooling that depends on inspecting React's internal
fields. I've added DevTools support in the second commit. This didn't
need explicit versioning—the structure tells us enough.",dan,2024-02-13T15:04:49Z
32df74dba67207300511cf9b7c5ef82dd708c0c1,"Fix jest inline snapshots (#28308)

Prettier 3 is not supported for jest inline snapshots:
https://jestjs.io/docs/configuration#prettierpath-string",Ricky,2024-02-13T03:03:50Z
8d48183291870898ec42ac1f84482d9d26789424,"[Flight] Allow custom encoding of the form action (#27563)

There are three parts to an RSC set up:

- React
- Bundler
- Endpoints

Most customizability is in the bundler configs. We deal with those as
custom builds.

To create a full set up, you need to also configure ways to expose end
points for example to call a Server Action. That's typically not
something the bundler is responsible for even though it's responsible
for gathering the end points that needs generation. Exposing which
endpoints to generate is a responsibility for the bundler.

Typically a meta-framework is responsible for generating the end points.

There's two ways to ""call"" a Server Action. Through JS and through a
Form. Through JS we expose the `callServer` callback so that the
framework can call the end point.

Forms by default POST back to the current page with an action serialized
into form data, which we have a decoder helper for. However, this is not
something that React is really opinionated about just like we're not
opinionated about the protocol used by callServer.

This exposes an option to configure the encoding of the form props.
`encodeFormAction` is to the SSR is what `callServer` is to the Browser.",Sebastian Markbåge,2024-02-13T01:02:42Z
7a32d718b9ea0eb9ea86e9d21d56a5af6c4ce9ed,"[Debug Tools] Introspect Promises in use() (#28297)

Alternative to #28295.

Instead of stashing all of the Usables eagerly, we can extract them by
replaying the render when we need them like we do with any other hook.
We already had an implementation of `use()` but it wasn't quite
complete.

These can also include further DebugInfo on them such as what Server
Component rendered the Promise or async debug info. This is nice just to
see which use() calls were made in the side-panel but it can also be
used to gather everything that might have suspended.

Together with https://github.com/facebook/react/pull/28286 we cover the
case when a Promise was used a child and if it was unwrapped with use().
Notably we don't cover a Promise that was thrown (although we do support
that in a Server Component which maybe we shouldn't). Throwing a Promise
isn't officially supported though and that use case should move to the
use() Hook.

The pattern of conditionally suspending based on cache also isn't really
supported with the use() pattern. You should always call use() if you
previously called use() with the same input. This also ensures that we
can track what might have suspended rather than what actually did.

One limitation of this strategy is that it's hard to find all the places
something might suspend in a tree without rerendering all the fibers
again. So we might need to still add something to the tree to indicate
which Fibers may have further debug info / thenables.",Sebastian Markbåge,2024-02-12T22:54:28Z
3f93ca1c8dec1fd85df4dbb748a2df9438fc699f,"[Fiber] Transfer `_debugInfo` from Arrays, Lazy, Thenables and Elements to the inner Fibers. (#28286)

That way we can use it for debug information like component stacks and
DevTools. I used an extra stack argument in Child Fiber to track this as
it's flowing down since it's not just elements where we have this info
readily available but parent arrays and lazy can merge this into the
Fiber too. It's not great that this is a dev-only argument and I could
track it globally but seems more likely to make mistakes.

It is possible for the same debug info to appear for multiple child
fibers like when it's attached to a fragment or a lazy that resolves to
a fragment at the root. The object identity could be used in these
scenarios to infer if that's really one server component that's a parent
of all children or if each child has a server component with the same
name.

This is effectively a public API because you can use it to stash
information on Promises from a third-party service - not just Server
Components. I started outline the types for this for some things I was
planning to add but it's not final.

I was also planning on storing it from `use(thenable)` for when you
suspend on a Promise. However, I realized that there's no Hook instance
for those to stash it on. So it might need a separate data structure to
stash the previous pass over of `use()` that resets each render.

No tests yet since I didn't want to test internals but it'll be covered
once we have debugging features like component stacks.",Sebastian Markbåge,2024-02-12T19:56:59Z
9e7944f67c72b9a69a8db092ba6bd99fe9c731e2,"Suspend Thenable/Lazy if it's used in React.Children and unwrap (#28284)

This pains me because `React.Children` is really already
pseudo-deprecated.

`React.Children` takes any children that `React.Node` takes. We now
support Lazy and Thenable in this position elsewhere, but it errors in
`React.Children`.

This becomes an issue with async Server Components which can resolve
into a Lazy and in the future Lazy will just become Thenables. Which
causes this to error.

There are a few different semantics we could have:

1) Error like we already do (#28280). `React.Children` is about
introspecting children. It was always sketchy because you can't
introspect inside an abstraction anyway. With Server Components we fold
away the components so you can actually introspect inside of them kind
of but what they do is an implementation detail and you should be able
to turn it into a Client Component at any point. The type of an Element
passing the boundary actually reduces to `React.Node`.
2) Suspend and unwrap the Node (this PR). If we assume that Children is
called inside of render, then throwing a Promise if it's not already
loaded or unwrapping would treat it as if it wasn't there. Just like if
you rendered it in React. This lets you introspect what's inside which
isn't really something you should be able to do. This isn't compatible
with deprecating throwing-a-Promise and enable static compilation like
`use()` does. We'd have to deprecate `React.Children` before doing that
which we might anyway.
3) Wrap in a Fragment. If a Server Component was instead a Client
Component, you couldn't introspect through it anyway. Another
alternative might be to let it pass through but then it wouldn't be
given a flat key. We could also wrap it in a Fragment that is keyed.
That way you're always seeing an element. The issue with this solution
is that it wouldn't see the key of the Server Component since that gets
forwarded to the child that is yet to resolve. The nice thing about that
strategy is it doesn't depend on throw-a-Promise but it might not be
keyed correctly when things move.",Sebastian Markbåge,2024-02-12T18:39:30Z
629541bcc09fc7c0cc5c257541d084ee27457512,"[Flight] Transfer Debug Info in Server-to-Server Flight Requests (#28275)

A Flight Server can be a consumer of a stream from another Server. In
this case the meta data is attached to debugInfo properties on lazy,
Promises, Arrays or Elements that might in turn get forwarded to the
next stream. In this case we want to forward this debug information to
the client in the stream.

I also added a DEV only `environmentName` option to the Flight Server.
This lets you name the server that is producing the debug info so that
you can trace the origin of where that component is executing. This
defaults to `""server""`. DevTools could use this for badges or different
colors.",Sebastian Markbåge,2024-02-12T18:38:14Z
947e7962ad43bd0fe8826c48d94a9df8d5206850,"fix[devtools/useModalDismissSignal]: use getRootNode for shadow root case support (#28145)

In our custom implementation for handling modals dismiss signal, we use
element's `ownerDocument` field, which expectedly doesn't work well with
shadow root. Now using
[`getRootNode`](https://developer.mozilla.org/en-US/docs/Web/API/Node/getRootNode)
instead of `ownerDocument` to support shadow root case.

Without this, if RDT Frontend is hosted inside the shadow root, the
modal gets closed after any click, including on the buttons hosted by
modal:

https://github.com/facebook/react/blob/00d42ac3542179c55f936f395ede7abaeb5900a3/packages/react-devtools-shared/src/devtools/views/hooks.js#L228-L238

Test plan:
- Modals work as expected for Chrome DevTools integration
- Modals work as expected at every other surfaces: browser extension,
electron wrapper for RN, inline version for web",Ruslan Lesiutin,2024-02-12T16:56:28Z
269edb88b28b7394335fb504d9924acd35d4ef38,"Add jsx-runtime.react-server.js to file allowlist (#28301)

https://github.com/facebook/react/pull/28217 doesn't work without this
since it's not included in the files list.

See https://github.com/dai-shi/waku/pull/467#issuecomment-1936965080.

This should fix that.",dan,2024-02-11T03:19:30Z
35b2c28178bf4f79898d11dce0bc2a7ce675f670,"Remove deprecated methods from react-is (#28224)

These aren't being used anywhere and don't even correspond to real APIs.",dan,2024-02-11T00:25:17Z
8a3def923bf88d23cc705a55416cd955e3dc169a,Fixed sprout test failure,Mike Vitousek,2024-02-10T00:48:13Z
11a5254b9c1f18107a6e8ed77fa695a96aa2f5c0,add output,Mike Vitousek,2024-02-09T23:24:51Z
966932c525f1aeaa30bec7381e2899de9a6c074b,fix again :(,Mike Vitousek,2024-02-09T23:17:55Z
c10d711309922b170100f0fcf4cf8167ab4dcba2,Further test fix,Mike Vitousek,2024-02-09T23:09:26Z
8c7685ed40a421652a2189e8b72c6a64fbd70ddf,Fix breakages and add fixture entrypoint,Mike Vitousek,2024-02-09T23:00:05Z
48024b76bbb29028ea94f816efb5b69eeb01e948,Fix lints,Mike Vitousek,2024-02-09T22:50:06Z
19476aa5f6f448a97733dc95739b4873a8f8ab12,Option to bail on Flow react-rule suppressions,Mike Vitousek,2024-02-09T22:21:07Z
24ed13e1f04ccc843f559948137405a7191b4b13,Update error message and comments,Joe Savona,2024-02-14T00:45:18Z
fea7b5ac0d04d9749acf3fe1f0134cfb56a1648e,"Move useMemoCache outside of hook guards 

The hook guards are incompatible with using a forget-runtime. Specifically, 
forget-runtime needs to make a call to `useState()` or some other hook to attach 
data to the fiber, but all the builtin hooks are overridden to disallow calling 
them outside of explicit boundaries. We'd either have to wrap the useMemoCache 
call in a push/pop to allow it to call other hooks, or as in this PR, just move 
it outside the enforcement.",Joe Savona,2024-02-14T00:45:18Z
69247869734374dd3f66076228f78df8ee0ca238,"[be] Change validate functions to not return unnecessary Result 

These validations needs to be able to transitively check for violations within 
function expressions, without immediately erroring. So the inner ""-Impl"" helpers 
return a Result. But the outer, exported validate functions don't need to return 
a Result, especially since TS has no Rust-style enforcement that return values 
are actually used. Unwrapping within the validation means the caller can't 
forget to do so and inadvertently silence the errors.",Joe Savona,2024-02-14T00:45:17Z
19b4abed69643be0c6410c6d4a4fdb23c276ef0e,"[be] Remove unused validateRefAccessDuringRenderFunctionExpressions flag 

I had split this up from the main validation since function validation was less 
precise; now that previous PRs fix the false positives we can remove this extra 
flag.",Joe Savona,2024-02-14T00:45:17Z
bde30f02840ad49119c2433d54ad352e95f53420,"[be] Remove ValidateFrozenLambdas 

This pass doesn't really make sense in light of 
`@enableTransitivelyFreezeFunctionExpressions`. The original idea of 
ValidateFrozenLambdas was that trying to pass a ""mutable"" lambda to a frozen 
value was invalid. But since then we've realized that the better heuristic is 
that freezing a lambda is transitive.",Joe Savona,2024-02-14T00:45:16Z
5f1b8fd57f672601fc11a44f537aaeec2b793c03,"Improve validateNoRefAccessInRender 

Rewrites the validation to not rely on the mutable range of functions to 
determine whether they are called or not, since the range can be extended for 
other reasons (they happen to reference a mutable value that is mutated later, 
even though the function isn't called during render). 

Instead we use the same approach as validateNoSetStateInRender, explicitly 
tracking references to function expressions that access refs, and checking if 
those function expressions appear to be called. This can have false negatives, 
as with the setState validation, but catches lots of obviously incorrect code 
without false positives.",Joe Savona,2024-02-14T00:45:15Z
6dae958eab3b19a6d89ea13242b87ac8cad81e97,[be] Extract computeUnconditionalBlocks() helper,Joe Savona,2024-02-14T00:45:15Z
f7f05501e07bbd693637f50c635a15a492a7d0e8,"Support destructuring assignment of context variables 

Fixes T178003134. Previously we did not check whether values reassigned during a 
destructuring assignment were context variables. This would either miscompile, 
or as of my fix earlier in #2579, would fail validation. Specifically, this 
happened on AssignmentEpression with an object/array pattern lvalue, where the 
pattern contained an identifier that is a context variable. 

This is now fixed: we track whether the outermost assignment is a normal 
assignment or destructuring, and force destructuring to a temporary whenever the 
identifier is a context variable. We apply the same logic to variable 
declarations that are destructuring to a context variable.",Joe Savona,2024-02-14T00:45:14Z
a107ba81ed08e25696cb17a015b6c6f8bac606b0,"[BE] Remove navigator; edit sprout fixtures 

--- 

I recall adding the navigator override because some React library file had done 
an unconditional access, but this doesn't seem to be the case anymore. 
Regardless, newer versions of nodejs comes with a global `navigator` [see 
thread](https://github.com/nodejs/node/issues/39540) that error on writes",Mofei Zhang,2024-02-13T00:12:01Z
06e410ec608820b65d81536bb4630228b4e04d48,"Move modern strict to experimental (#28152)

Turn this on 

Edited: ope, nvm
<details>
Looks like there's still an outstanding issue with this. The original PR
turned off a strict effects test, which causes a stray
`componentWillUnmount` to fire.


https://github.com/facebook/react/commit/5d1ce651393524639a3b4b1e861a0413a4d25629#diff-19df471970763c4790c2cc0811fd2726cc6a891b0e1d5dedbf6d0599240c127aR70


Before:
```js
expect(log).toEqual([
      'constructor',
      'constructor',
      'getDerivedStateFromProps',
      'getDerivedStateFromProps',
      'render',
      'render',
      'componentDidMount',
    ]);
```

After:

```js
expect(log).toEqual([
      'constructor',
      'constructor',
      'getDerivedStateFromProps',
      'getDerivedStateFromProps',
      'render',
      'render',
      'componentDidMount',
      'componentWillUnmount',
      'componentDidMount',
    ]);
```

So there's a bug somewhere
</details>",Ricky,2024-02-09T21:59:47Z
5dd55e881b374a5a0b8c5c962c08bee194297f15,"[lower][patch] Recognize UpdateExpression as lval assignment 

--- 

Oops, I broke this in #2552. We never handled UpdateExpressions to context 
variables previously, so this PR also adds a todo bailout",Mofei Zhang,2024-02-09T21:18:37Z
d4cdaf252337027615812a01c366c7ae0265ea95,"Fix assignment expression with context variables 

Fixes the one case discovered in the previous PR; for AssignmentExpression we 
correctly lowered the store instruction to a local/context, but then always used 
a `LoadLocal` to read the result back. 

The load instruction appears like it might be dangling - i think what was 
happening is that DCE cleaned up the unused LoadLocal whereas it leaves the 
LoadContext alone. But this works for now, we can always clean up the extra 
instruction later since this case isn't too common.",Joe Savona,2024-02-09T22:25:33Z
6da1912eed161c766689eb4bde336b9854e912e7,"Validate that all variable references are consistently local/context 

Validates that all references to a variable (pre-SSA) are consistently ""local"" 
references or ""context"" references. Ie, if a variable is declared as 
DeclareContext, any accesses must be eg LoadContext or StoreContext, not 
LoadLocal/StoreLocal. This will help with the issue from #2577 (assuming that we 
know a variable _is_ a context variable) but also provides a more precise 
bailout for an existing case with destructuring assignment to a context 
variable.",Joe Savona,2024-02-09T22:09:55Z
374fd68a50f00237555cdeb60ad01cba171328f9,fix: define IS_ACT_ENVIRONMENT global for tests with concurrent mode and synchronous act (#28296),Ruslan Lesiutin,2024-02-09T19:03:40Z
d27c1ac1128327280607389c187e7db8dab06f84,"Upgrade flow to 0.228.0 (#28294)

Upgrade flow to 0.228.0",Jan Kassens,2024-02-09T16:17:00Z
d8c1fa6b0b8da0512cb5acab9cd4f242451392f3,"Add infinite update loop detection (#28279)

This is a partial redo of https://github.com/facebook/react/pull/26625.
Since that was unlanded due to some detected breakages. This now
includes a feature flag to be careful in rolling this out.",Jan Kassens,2024-02-09T16:14:37Z
03d6f7cf007cb3b2a3a65e6ec29be02aafd87870,"chore: gate legacy apis for react-devtools-shell (#28273)

- `react-devtools-shell` is only used for e2e tests
- Based on the React version we testing against, we will show/hide roots
using legacy render",Ruslan Lesiutin,2024-02-09T11:27:12Z
36b078cc7a50ad0cd66e7f6b4b8e4a1295e47f67,"unify feature flags between fb and oss for React Native renderer (#28269)

# Affected flags:

### alwaysThrottleRetries

In RN OSS changed from `true` to `false`. This is what FB build uses.
This flag was a root cause for big perf regression internally.

### enableDeferRootSchedulingToMicrotask

In RN OSS build changed from `true` to `false`. This is what FB build
uses.

### debugRenderPhaseSideEffectsForStrictMode

Changed from true to __DEV__ in FB and OSS build. The flag is only used
in debug builds and was previously `false` in RN OSS builds

### enableUnifiedSyncLane

Changed from `__VARIANT__` to `true` in FB build. This is what OSS build
uses. This flag is shipped internally. cc @tyao1

### enableLegacyHidden

In RN FB changed from `true` to `false`.  This is what OSS uses.

### allowConcurrentByDefault

In RN FB changed from `true` to `false`. 




I ran `yarn flags --diff rn rn-fb` to get the difference between feature
flags and unify them.

## Before
```
yarn run v1.22.19
$ node ./scripts/flags/flags.js --diff rn rn-fb
┌───────────────────────────────────────────────┬────────┬───────┐
│                    (index)                    │ RN OSS │ RN FB │
├───────────────────────────────────────────────┼────────┼───────┤
│ allowConcurrentByDefault                      │  '❌'  │ '✅'  │
│ debugRenderPhaseSideEffectsForStrictMode      │  '❌'  │ '✅'  │
│ disableModulePatternComponents                │  '❌'  │ '✅'  │
│ enableCPUSuspense                             │  '❌'  │ '✅'  │
│ enableCacheElement                            │  '❌'  │ '✅'  │
│ enableGetInspectorDataForInstanceInProduction │  '❌'  │ '✅'  │
│ enableLegacyHidden                            │  '❌'  │ '✅'  │
│ enableSchedulingProfiler                      │  '❌'  │ '📊'  │
│ enableUseDeferredValueInitialArg              │  '❌'  │ '✅'  │
│ enableUseMemoCacheHook                        │  '❌'  │ '✅'  │
│ enableUseRefAccessWarning                     │  '❌'  │ '🧪'  │
│ passChildrenWhenCloningPersistedNodes         │  '❌'  │ '🧪'  │
│ useMicrotasksForSchedulingInFabric            │  '❌'  │ '🧪'  │
│ alwaysThrottleRetries                         │  '✅'  │ '🧪'  │
│ enableDeferRootSchedulingToMicrotask          │  '✅'  │ '🧪'  │
│ enableUnifiedSyncLane                         │  '✅'  │ '🧪'  │
└───────────────────────────────────────────────┴────────┴───────┘
```

## After
```
yarn run v1.22.19
$ node ./scripts/flags/flags.js --diff rn rn-fb
┌───────────────────────────────────────────────┬────────┬───────┐
│                    (index)                    │ RN OSS │ RN FB │
├───────────────────────────────────────────────┼────────┼───────┤
│ alwaysThrottleRetries                         │  '❌'  │ '🧪'  │
│ disableModulePatternComponents                │  '❌'  │ '✅'  │
│ enableCPUSuspense                             │  '❌'  │ '✅'  │
│ enableCacheElement                            │  '❌'  │ '✅'  │
│ enableDeferRootSchedulingToMicrotask          │  '❌'  │ '🧪'  │
│ enableGetInspectorDataForInstanceInProduction │  '❌'  │ '✅'  │
│ enableSchedulingProfiler                      │  '❌'  │ '📊'  │
│ enableUseDeferredValueInitialArg              │  '❌'  │ '✅'  │
│ enableUseMemoCacheHook                        │  '❌'  │ '✅'  │
│ enableUseRefAccessWarning                     │  '❌'  │ '🧪'  │
│ passChildrenWhenCloningPersistedNodes         │  '❌'  │ '🧪'  │
│ useMicrotasksForSchedulingInFabric            │  '❌'  │ '🧪'  │
└───────────────────────────────────────────────┴────────┴───────┘
```",Samuel Susla,2024-02-09T09:46:42Z
ba5e6a8329c7194a2c573c037a37f24ce45ee58f,"[Flight] Serialize deduped elements by direct reference even if they suspend (#28283)

In #28123 I switched these to be lazy references. However that creates a
lazy wrapper even if they're synchronously available. We try to as much
as possible preserve the original data structure in these cases.

E.g. here in the dev outlining I only use a lazy wrapper if it didn't
complete synchronously:
https://github.com/facebook/react/pull/28272/files#diff-d4c9c509922b3671d3ecce4e051df66dd5c3d38ff913c7a7fe94abc3ba2ed72eR638

Unfortunately we don't have a data structure that tracks the status of
each emitted row. We could store the task in the map but then they
couldn't be GC:ed as they complete. We could maybe store the status of
each element but seems so heavy.

For now I just went back to direct reference which might be an issue
since it can suspend something higher up when deduped.",Sebastian Markbåge,2024-02-08T23:45:40Z
e41ee9ea70f8998144fdd959ac11fd7a40e4ee20,"Throw a better error when Lazy/Promise is used in React.Children (#28280)

We could in theory actually support this case by throwing a Promise when
it's used inside a render. Allowing it to be synchronously unwrapped.
However, it's a bit sketchy because we officially only support this in
the render's child position or in `use()`.

Another alternative could be to actually pass the Promise/Lazy to the
callback so that you can reason about it and just return it again or
even unwrapping with `use()` - at least for the forEach case maybe.",Sebastian Markbåge,2024-02-08T22:10:19Z
cd63ef79218a1d53c8739da75b154014f3b7cc73,"Add simulateEventDispatch to test ReactDOMEventListener (#28079)

## Overview

For events, the browser will yield to microtasks between calling event
handers, allowing time to flush work inbetween. For example, in the
browser, this code will log the flushes between events:

```js
<body onclick=""console.log('body'); Promise.resolve().then(() => console.log('flush body'));"">
  <div onclick=""console.log('div'); Promise.resolve().then(() => console.log('flush div'));"">
    hi
  </div>
</body>

// Logs
div 
flush div 
body 
flush body 
```


[Sandbox](https://codesandbox.io/s/eloquent-noether-mw2cjg?file=/index.html)

The problem is, `dispatchEvent` (either in the browser, or JSDOM) does
not yield to microtasks. Which means, this code will log the flushes
after the events:

```js
const target = document.getElementsByTagName(""div"")[0];
const nativeEvent = document.createEvent(""Event"");

nativeEvent.initEvent(""click"", true, true);
target.dispatchEvent(nativeEvent);

// Logs
div
body
flush div
flush body
```

## The problem
This mostly isn't a problem because React attaches event handler at the
root, and calls the event handlers on components via the synthetic event
system. We handle flushing between calling event handlers as needed.

However, if you're mixing capture and bubbling events, or using multiple
roots, then the problem of not flushing microtasks between events can
come into play. This was found when converting a test to `createRoot` in
https://github.com/facebook/react/pull/28050#discussion_r1462118422, and
that test is an example of where this is an issue with nested roots.

Here's a sandox for
[discrete](https://codesandbox.io/p/sandbox/red-http-2wg8k5) and
[continuous](https://codesandbox.io/p/sandbox/gracious-voice-6r7tsc?file=%2Fsrc%2Findex.js%3A25%2C28)
events, showing how the test should behave. The existing test, when
switched to `createRoot` matches the browser behavior for continuous
events, but not discrete. Continuous events should be batched, and
discrete should flush individually.

## The fix

This PR implements the fix suggested by @sebmarkbage, to manually
traverse the path up from the element and dispatch events, yielding
between each call.",Ricky,2024-02-08T21:06:03Z
04b59928d867dae1639f12f19700347d8f5d4cac,DevTools: Add support for use(Context) (#28233),Sebastian Silbermann,2024-02-08T17:47:40Z
da8ca6e95400ec7ae6685ddc5cc3fdb01d4fc023,[types] Check propType when checking if two types are equal,Sathya Gunasekaran,2024-02-08T16:19:55Z
3c431f9afe4e48d31801fbfdadf3b4be55ebd5a9,[types] Check the shapeId as part of the object type equals check,Sathya Gunasekaran,2024-02-08T16:19:55Z
d3def47935e8912c197f78c78c97c2476fa1a77a,"Delete more redundant JSX code (#28276)

Found another redundant implementation of JSX code. Not being used
anywhere so safe to delete.",Andrew Clark,2024-02-08T16:04:09Z
b229f540e2da91370611945f9875e00a96196df6,"[Flight] Emit debug info for a Server Component (#28272)

This adds a new DEV-only row type `D` for DebugInfo. If we see this in
prod, that's an error. It can contain extra debug information about the
Server Components (or Promises) that were compiled away during the
server render. It's DEV-only since this can contain sensitive
information (similar to errors) and since it'll be a lot of data, but
it's worth using the same stream for simplicity rather than a
side-channel.

In this first pass it's just the Server Component's name but I'll keep
adding more debug info to the stream, and it won't always just be a
Server Component's stack frame.

Each row can get more debug rows data streaming in as it resolves and
renders multiple server components in a row.

The data structure is just a side-channel and it would be perfectly fine
to ignore the D rows and it would behave the same as prod. With this
data structure though the data is associated with the row ID / chunk, so
you can't have inline meta data. This means that an inline Server
Component that doesn't get an ID otherwise will need to be outlined. The
way I outline Server Components is using a direct reference where it's
synchronous though so on the client side it behaves the same (i.e.
there's no lazy wrapper in this case).

In most cases the `_debugInfo` is on the Promises that we yield and we
also expose this on the `React.Lazy` wrappers. In the case where it's a
synchronous render it might attach this data to Elements or Arrays
(fragments) too.

In a future PR I'll wire this information up with Fiber to stash it in
the Fiber data structures so that DevTools can pick it up. This property
and the information in it is not limited to Server Components. The name
of the property that we look for probably shouldn't be `_debugInfo`
since it's semi-public. Should consider the name we use for that.

If it's a synchronous render that returns a string or number (text node)
then we don't have anywhere to attach them to. We could add a
`React.Lazy` wrapper for those but I chose to prioritize keeping the
data structure untouched. Can be useful if you use Server Components to
render data instead of React Nodes.",Sebastian Markbåge,2024-02-08T16:01:32Z
f0cffef0a22f8c1b78d656001af6b12432821f7c,Fix hook pattern matching for custom hooks,Joe Savona,2024-02-08T01:34:10Z
37d901e2b81e12d40df7012c6f8681b8272d2555,"Remove __self and __source location from elements (#28265)

Along with all the places using it like the `_debugSource` on Fiber.
This still lets them be passed into `createElement` (and JSX dev
runtime) since those can still be used in existing already compiled code
and we don't want that to start spreading to DOM attributes.

We used to have a DEV mode that compiles the source location of JSX into
the compiled output. This was nice because we could get the actual call
site of the JSX (instead of just somewhere in the component). It had a
bunch of issues though:

- It only works with JSX.
- The way this source location is compiled is different in all the
pipelines along the way. It relies on this transform being first and the
source location we want to extract but it doesn't get preserved along
source maps and don't have a way to be connected to the source hosted by
the source maps. Ideally it should just use the mechanism other source
maps use.
- Since it's expensive it only works in DEV so if it's used for
component stacks it would vary between dev and prod.
- It only captures the callsite of the JSX and not the stack between the
component and that callsite. In the happy case it's in the component but
not always.

Instead, we have another zero-cost trick to extract the call site of
each component lazily only if it's needed. This ensures that component
stacks are the same in DEV and PROD. At the cost of worse line number
information.

The better way to get the JSX call site would be to get it from `new
Error()` or `console.createTask()` inside the JSX runtime which can
capture the whole stack in a consistent way with other source mappings.
We might explore that in the future.

This removes source location info from React DevTools and React Native
Inspector. The ""jump to source code"" feature or inspection can be made
lazy instead by invoking the lazy component stack frame generation. That
way it can be made to work in prod too. The filtering based on file path
is a bit trickier.

When redesigned this UI should ideally also account for more than one
stack frame.

With this change the DEV only Babel transforms are effectively
deprecated since they're not necessary for anything.",Sebastian Markbåge,2024-02-07T21:38:00Z
5c08662301d99d1305e164c701fe8e4da1bc526c,Add enableServerComponentKeys to NEXT_MAJOR (#28259),Sebastian Markbåge,2024-02-07T20:21:59Z
2cd19ed1dd86889bc8038fb8b541699e3965ea5c,"Convert ReactRenderDocument to hydrateRoot (#28153)

Co-authored-by: Sebastian Silbermann <sebastian.silbermann@klarna.com>",Ricky,2024-02-07T14:54:46Z
bfdc12c1912143ae4ec6d7466e619130adc911c5,chore: use versioned render in inspectedElement test (#28246),Ruslan Lesiutin,2024-02-07T10:50:26Z
d1829775adeee0f888ec7d464eb3041cfe23f1c3,chore: use versioned render in TimelineProfiler test and gate some for legacy rendering (#28218),Ruslan Lesiutin,2024-02-07T10:30:54Z
a1ace9d3c2a0fc53703f11e30f32d0a009c5a8c9,"Improve flagging of `React.cache` to remove indirection in bundled code (#28263)

Uses a better technique for conditionally disabling cache on the client",Josh Story,2024-02-07T01:40:06Z
91caa96e4261704d42333f5e02ba32d870379fc4,"jsx(): Treat __self and __source as normal props (#28257)

These used to be reserved props because the classic React.createElement
runtime passed this data as props, whereas the jsxDEV() runtime passes
them as separate arguments.

This brings us incrementally closer to being able to pass the props
object directly through to React instead of cloning a subset into a new
object.

The React.createElement runtime is unaffected.",Andrew Clark,2024-02-07T01:03:02Z
f07ac1e2680a26c5b3bf9c651d62c792de71d46d,"[Flight] Unify plain Server Component and forwardRef under one function (#28261)

This used to be trivial but it's no longer trivial.

In Fizz and Fiber this is split into renderWithHooks and
finishFunctionComponent since they also support indeterminate
components.

Interestingly thanks to this unification we always call functions with
an arity of 2 which is a bit weird - with the second argument being
undefined in everything except forwardRef and legacy context consumers.

This makes Flight makes the same thing but we could also call it with an
arity of 1.

Since Flight errors early if you try to pass it a ref, and there's no
legacy context, the second arg is always undefined.

The practical change in this PR is that returning a Promise from a
forwardRef now turns it into a lazy. We previously didn't support async
forwardRef since it wasn't supported on the client. However, since
eventually this will be supported by child-as-a-promise it seems fine to
support it.",Sebastian Markbåge,2024-02-07T00:41:05Z
1beb94133a93a433669a893aef02dd5afec07394,"jsx(): Inline reserved prop checks (#28262)

The JSX runtime (both the new one and the classic createElement runtime)
check for reserved props like `key` and `ref` by doing a lookup in a
plain object map with `hasOwnProperty`.

There are only a few reserved props so this inlines the checks instead.",Andrew Clark,2024-02-06T23:56:18Z
0d11563b4a96e0f4f2361cdf7375b12375688163,"[Flight] Move pendingChunks ref count increment into createTask (#28260)

Every time we create a task we need to wait for it so we increase a ref
count. We can do this in `createTask`. This is in line with what Fizz
does too.

They differ in that Flight counts when they're actually flushed where as
Fizz decrements them when they complete.

Flight should probably count them when they complete so it's possible to
wait for the end before flushing for buffering purposes.",Sebastian Markbåge,2024-02-06T21:17:59Z
66924457594bc28eb2f3f39c7c61d54b931c188e,"Delete duplicate jsx() implementation (#28258)

Not sure how this happened but there are two identical implementations
of the jsx and jsxDEV functions. One of them was unreachable. I deleted
that one.",Andrew Clark,2024-02-06T20:05:08Z
7cbd026ff4ff833db2a2f2271f95cb2b91cb3895,[Fresh] Update the list of built-in hooks (#27864),Damian Stasik,2024-02-06T18:57:46Z
30e2938e04c8cf51688509a457a494d36bcc4269,"[Tests] Reset modules by default (#28254)

## Overview

Sets `resetModules: true` in the base Jest config, and deletes all the
`jest.resetModule()` calls we don't need.",Ricky,2024-02-06T17:43:27Z
8b5f0c43ad49943eba6e522a708cdbb47c5f9b26,chore: use versioned render in preprocessData test and gate some for … (#28219),Ruslan Lesiutin,2024-02-06T17:34:41Z
97fd3e7064b162f05b1bac3962ed10c6559c346c,Ensure useState and useReducer initializer functions are double invoked in StrictMode (#28248),Sebastian Silbermann,2024-02-06T16:53:08Z
08d6cef46ab7310b6e8f4330e2fd23586a026a9c,chore: use versioned render in storeStressSync test and gate them for legacy rendering (#28216),Ruslan Lesiutin,2024-02-06T16:51:58Z
db120f69ec7a0b8c7f38ca7a1ddb1886de92e465,"Patch devtools before running useMemo function in strict mode (#28249)

This fixes a regression https://github.com/facebook/react/pull/25583
where we stopped patching before calling useMemo function.

Fixes https://github.com/facebook/react/issues/27989",Sathya Gunasekaran,2024-02-06T16:45:18Z
12d56fca3da06328ac61d86976afa728b97b49d6,chore: use versioned render in storeComponentFilters test (#28241),Ruslan Lesiutin,2024-02-06T16:25:03Z
ad720f36ec3328c70aa30277f12985e30bc0e880,chore: use versioned render in profilerContext test (#28243),Ruslan Lesiutin,2024-02-06T15:58:11Z
5446b098a8ba23b8d1bd39e552bff9b09b52c334,"Convert ReactBrowserEventEmitter to createRoot (#28253)

pretty boring",Ricky,2024-02-06T15:43:37Z
65d95b837e797a0690221dd1824955d3d3afd278,"fix: gate react/jsx-runtime upgrade only for React >= 17 tests (#28256)

https://github.com/facebook/react/pull/28252 broke RDT tests with React
16.x.

These changes gate the `jsx-runtime` upgrade only for cases when we are
testing against React >= 17.

Validated with:
```
 ./scripts/circleci/download_devtools_regression_build.js 16.0 --replaceBuild && node ./scripts/jest/jest-cli.js --build --project devtools --release-channel=experimental --reactVersion 16.0 --ci && ./scripts/circleci/download_devtools_regression_build.js 16.5 --replaceBuild && node ./scripts/jest/jest-cli.js --build --project devtools --release-channel=experimental --reactVersion 16.5 --ci && ./scripts/circleci/download_devtools_regression_build.js 16.8 --replaceBuild && node ./scripts/jest/jest-cli.js --build --project devtools --release-channel=experimental --reactVersion 16.8 --ci && ./scripts/circleci/download_devtools_regression_build.js 17.0 --replaceBuild && node ./scripts/jest/jest-cli.js --build --project devtools --release-channel=experimental --reactVersion 17.0 --ci && ./scripts/circleci/download_devtools_regression_build.js 18.0 --replaceBuild && node ./scripts/jest/jest-cli.js --build --project devtools --release-channel=experimental --reactVersion 18.0 --ci
 ```",Ruslan Lesiutin,2024-02-06T15:03:36Z
103cddbb9d433b08622c43336b170ffc63acdee3,chore: use versioned render in profilingCommitTreeBuilder test and gate some for legacy rendering (#28236),Ruslan Lesiutin,2024-02-06T12:26:50Z
6fef0cb568517766a39dd83b21f1a5f32e45dd2c,chore: use versioned render in profilingHostRoot test and gate some for legacy rendering (#28237),Ruslan Lesiutin,2024-02-06T11:40:50Z
cb78d2f1f3a09dcacf730273a584c769f69c47b3,chore: use versioned render in profilingCache test (#28242),Ruslan Lesiutin,2024-02-06T11:24:54Z
af6e837b60fcdf1ae77e119f63afc4a6cff41459,"Fix destructuring with mixed local/scope declarations 

Fixes T176436488. The logic for rewriting Destructure instructions was correct, 
but the visitor implementation was accidentally dropping subsequent Destructure 
instructions within a block after encountering one that needed a rewrite. 
Switching to use the transform infra (added after this pass was written) fixes 
it.",Joe Savona,2024-02-06T06:29:53Z
0a53c465743264d3b0544f4579f26c7b4a8053fb,"Update ReactDOMServerSuspense-test to not use legacy rendering APIs (#28251)

Updates ReactDOMServerSuspense-test to not use legacy rendering APIs
Also removes an experimental only gate that is not necessary",Josh Story,2024-02-06T05:25:22Z
952aa74f8e45ed35ac6bf1de10ad5ed5410deac6,"Upgrade tests to use react/jsx-runtime (#28252)

Instead of createElement.

We should have done this when we initially released jsx-runtime but
better late than never. The general principle is that our tests should
be written using the most up-to-date idioms that we recommend for users,
except when explicitly testing an edge case or legacy behavior, like for
backwards compatibility.

Most of the diff is related to tweaking test output and isn't very
interesting.

I did have to workaround an issue related to component stacks. The
component stack logic depends on shared state that lives in the React
module. The problem is that most of our tests reset the React module
state and re-require a fresh instance of React, React DOM, etc. However,
the JSX runtime is not re-required because it's injected by the compiler
as a static import. This means its copy of the shared state is no longer
the same as the one used by React, causing any warning logged by the JSX
runtime to not include a component stack. (This same issue also breaks
string refs, but since we're removing those soon I'm not so concerned
about that.) The solution I went with for now is to mock the JSX runtime
with a proxy that re-requires the module on every function invocation. I
don't love this but it will have to do for now. What we should really do
is migrate our tests away from manually resetting the module state and
use import syntax instead.",Andrew Clark,2024-02-06T04:07:41Z
2bc7d336ae7db689699baeb1fffc2c03d8753ffe,"Add flag to disable caching behavior of `React.cache` on the client (#28250)

Adds a feature flag to control whether the client cache function is just
a passthrough. before we land breaking changes for the next major it
will be off and then we can flag it on when we want to break it.

flag is off for OSS for now and on elsewhere (though the parent flag
enableCache is off in some cases)",Josh Story,2024-02-06T00:32:03Z
0277bc4d54437bfb2ff4df7c80b68f3f0eee22a2,"Separate snap flags for watch/update/filter 

This is not that big a deal but a constant papercut, i often want to jump 
directly to watch mode with a filter applied. I know @poteto likes to (or at 
least used to) run watch with update enabled. Now instead of passing a mode, you 
can pass `--watch`, `--filter`, and `--update` independently.",Joe Savona,2024-02-05T23:55:08Z
472854820bfd0058dfc85524051171c7b7c998c1,"[Flight] Delete Server Context (#28225)

Server Context was never documented, and has been deprecated in
https://github.com/facebook/react/pull/27424.

This PR removes it completely, including the implementation code.

Notably, `useContext` is removed from the shared subset, so importing it
from a React Server environment would now should be a build error in
environments that are able to enforce that.",dan,2024-02-05T22:39:15Z
707d9643dd810f7c6bf7c4ef1e855cb80ec7c72e,"[logger] Log todo when encountering ""use no forget"" 

--- 

This change simply logs on every function we encounter with a `use no forget` 
directive. A few nuances -- `compilationMode: ""infer""` only compiles functions 
we infer to be 'react functions'. 

```js 

// `add` would not be compiled, as it has no jsx, no hook calls, 

// and is not named as a component or hook 

function add(a, b) { 

return a + b; 

} 

``` 

With this PR, we would report todos for functions that Forget wouldn't 
ordinarily try to compile. 

```js 

// Todo: Skipped due to ""use no forget"" directive. 

function add(a, b) { 

""use no forget""; 

return a + b; 

} 

``` 

This seems fine to me as (1) it's a bit nonsensical to have a `use no forget` 
direction on a non-react function, and (2) we're goalling on getting `use no 
forget`s down to 0.",Mofei Zhang,2024-02-05T21:05:09Z
195b5e5a24f095256d61a557ad27782193f4ff8d,Fix sprout,Joe Savona,2024-02-06T05:51:18Z
b79a5289fc21647b444eca397b5a02d5b64f5d2b,"Resolve type aliases

The goal of this PR is to move towards a uniform representation for all type
declarations, whether they are named type aliases, function declarations, or
inline annotations. We now assign every non-primitive type declaration (named or
anonymous) a unique DeclarationId. In the next PR, we'll also re-map inline
annotations back to this declaration id when encountering them.

This PR is extremely gross and my intent is to refactor a bunch of things in the
HIR to allow this to be less gross. Challenges:

* Babel name resolution requires using scopes but i really want to just work
with plain nodes, since NodePath and TypeScript do _not_ get along. So here, i
find all identifiers and store a mapping of identifier -> scope, so that i can
later look them up if necessary.

* HIR doesn't have a notion of a declaration id, and in general we don't want
to extend HIR. So i end up with a whole bunch of side table information and
indirection. For example, a function doesn't know it's own declaration id.
So we have to look it up. Function params don't track their Forest type, so
we have to look them up on the function declaration. Etc.",Joe Savona,2024-02-06T05:51:13Z
292a247cc44d6647d87ef4eaa6ef54521550a669,Add type to DeclareLocal,Joe Savona,2024-02-06T05:51:11Z
76aaf32c55c0ff410d6b6bbc02a440dcfd7bfde9,HIR StoreLocal.type uses babel type,Joe Savona,2024-02-06T05:51:09Z
9ec9331def3f740882038b5641db24e9b5aab98c,Emit function param and return type annotations,Joe Savona,2024-02-06T05:51:09Z
95ec128399a8b34884cc6bd90a041e03ce5c1844,"[Flight] Support Keyed Server Components (#28123)

Conceptually a Server Component in the tree is the same as a Client
Component.

When we render a Server Component with a key, that key should be used as
part of the reconciliation process to ensure the children's state are
preserved when they move in a set. The key of a child should also be
used to clear the state of the children when that key changes.

Conversely, if a Server Component doesn't have a key it should get an
implicit key based on the slot number. It should not inherit the key of
its children since the children don't know if that would collide with
other keys in the set the Server Component is rendered in.

A Client Component also has an identity based on the function's
implementation type. That mainly has to do with the state (or future
state after a refactor) that Component might contain. To transfer state
between two implementations it needs to be of the same state type. This
is not a concern for a Server Components since they never have state so
identity doesn't matter.

A Component returns a set of children. If it returns a single child,
that's the same as returning a fragment of one child. So if you
conditionally return a single child or a fragment, they should
technically reconcile against each other.

The simple way to do this is to simply emit a Fragment for every Server
Component. That would be correct in all cases. Unfortunately that is
also unfortunate since it bloats the payload in the common cases. It
also means that Fiber creates an extra indirection in the runtime.

Ideally we want to fold Server Component aways into zero cost on the
client. At least where possible. The common cases are that you don't
specify a key on a single return child, and that you do specify a key on
a Server Component in a dynamic set.

The approach in this PR treats a Server Component that returns other
Server Components or Lazy Nodes as a sequence that can be folded away.
I.e. the parts that don't generate any output in the RSC payload.
Instead, it keeps track of their keys on an internal ""context"". Which
gets reset after each new reified JSON node gets rendered.

Then we transfer the accumulated keys from any parent Server Components
onto the child element. In the simple case, the child just inherits the
key of the parent.

If the Server Component itself is keyless but a child isn't, we have to
add a wrapper fragment to ensure that this fragment gets the implicit
key but we can still use the key to reset state. This is unusual though
because typically if you keyed something it's because it was already in
a fragment.

In the case a Server Component is keyed but forks its children using a
fragment, we need to key that fragment so that the whole set can move
around as one. In theory this could be flattened into a parent array but
that gets tricky if something suspends, because then we can't send the
siblings early.

The main downside of this approach is that switching between single
child and fragment in a Server Component isn't always going to reconcile
against each other. That's because if we saw a single child first, we'd
have to add the fragment preemptively in case it forks later. This
semantic of React isn't very well known anyway and it might be ok to
break it here for pragmatic reasons. The tests document this
discrepancy.

Another compromise of this approach is that when combining keys we don't
escape them fully. We instead just use a simple `,` separated concat.
This is probably good enough in practice. Additionally, since we don't
encode the implicit 0 index slot key, you can move things around between
parents which shouldn't really reconcile but does. This keeps the keys
shorter and more human readable.",Sebastian Markbåge,2024-02-05T17:33:35Z
86b95edb0ae68a68f7611aca56d3139e7934fb75,chore: use versioned render in ownersListContext test (#28240),Ruslan Lesiutin,2024-02-05T17:32:31Z
6a21244671eda81cd93f729946f9e0ac810bb23e,chore: use versioned render in editing test (#28239),Ruslan Lesiutin,2024-02-05T17:30:46Z
09de4b2cfe9d3aa4f90b694c243f34bc9bb6b300,chore: use versioned render in treeContext test (#28245),Ruslan Lesiutin,2024-02-05T17:29:10Z
23f318f23fdfa387aae673e158c618995513aa14,chore: use versioned render in store test (#28244),Ruslan Lesiutin,2024-02-05T17:24:22Z
49d89b149746094c18da7f24c42b906aceb4e040,chore: use versioned render in profilerStore test (#28238),Ruslan Lesiutin,2024-02-05T17:20:05Z
e6979aa14299f8119bbe858d767e71b88c4c8f64,chore: use versioned render in profilingCharts test (#28235),Ruslan Lesiutin,2024-02-05T17:18:32Z
761d5750ce51cec527a311a36190426fbc3470db,chore: use versioned render in profilerChangeDescriptions test (#28221),Ruslan Lesiutin,2024-02-05T17:17:07Z
4f82bf4f59a91e81191f39fa328a3d26aba6371a,chore: use versioned render in storeOwners test (#28215),Ruslan Lesiutin,2024-02-05T17:15:16Z
7e77e29ca93857b68bfc31bcd5cd566b33b7cd15,chore: use versioned render in componentStacks test (#28214),Ruslan Lesiutin,2024-02-05T17:14:00Z
09c0769448655deaf69e2bf65eecc74268fda02a,chore: use versioned render in console test (#28213),Ruslan Lesiutin,2024-02-05T17:12:40Z
f244fd3884adbe5717b7e46da18911e9899cade9,chore: use versioned render in useEditableValue test (#28212),Ruslan Lesiutin,2024-02-05T17:11:22Z
f3a70990a5a03bb26e6a71e43c204849392d2b07,chore: use versioned render in FastRefreshDevToolsIntegration test (#28211),Ruslan Lesiutin,2024-02-05T17:09:26Z
88b0809447d3c20af8773a3c060ee5ace0d695f8,"fix: partially revert jest setup config removal to fix regression tests (#28247)

Partially reverting what has been removed in
https://github.com/facebook/react/pull/28186.

We need `'scheduler/tracing'` mock for React >= 16.8.
The error:
```
Invariant Violation: It is not supported to run the profiling version of a renderer (for example, `react-dom/profiling`) without also replacing the `scheduler/tracing` module with `scheduler/tracing-profiling`. Your bundler might have a setting for aliasing both modules. Learn more at http://fb.me/react-profiling
```

Validated by running regression tests for the whole version matrix:
```
./scripts/circleci/download_devtools_regression_build.js 16.0 --replaceBuild && node ./scripts/jest/jest-cli.js --build --project devtools --release-channel=experimental --reactVersion 16.0 --ci && ./scripts/circleci/download_devtools_regression_build.js 16.5 --replaceBuild && node ./scripts/jest/jest-cli.js --build --project devtools --release-channel=experimental --reactVersion 16.5 --ci && ./scripts/circleci/download_devtools_regression_build.js 16.8 --replaceBuild && node ./scripts/jest/jest-cli.js --build --project devtools --release-channel=experimental --reactVersion 16.8 --ci && ./scripts/circleci/download_devtools_regression_build.js 17.0 --replaceBuild && node ./scripts/jest/jest-cli.js --build --project devtools --release-channel=experimental --reactVersion 17.0 --ci && ./scripts/circleci/download_devtools_regression_build.js 18.0 --replaceBuild && node ./scripts/jest/jest-cli.js --build --project devtools --release-channel=experimental --reactVersion 18.0 --ci
```",Ruslan Lesiutin,2024-02-05T17:07:41Z
596827f6a72f6c4df0181e941c524fcbd0048914,"chore: add versioned render implementation for DevTools tests (#28210)

Adding getter-functions for renderer implementations, which can be used
for jest tests. If we are testing against React with version < 18, we
are going to use legacy rendering, otherwise the concurrent one.",Ruslan Lesiutin,2024-02-05T15:53:23Z
9a1db2d21fac88a42094fa3fc266d1692551a5bd,"chore: add single versioned implementation of act for DevTools tests (#28186)

- Moving `act` implementation to a single getter-function, which is
based on React version we are testing RDT against.
- Removing unused mocks for `act`, which were designed for legacy
versions of React, validated with running tests against React 16 build.",Ruslan Lesiutin,2024-02-05T15:38:48Z
56cd10beb40586d09e91157e8f6ac531478a62be,"DevTools: Add support for useFormState (#28232)

## Summary

Add support for `useFormState` Hook fixing ""Unsupported hook in the
react-debug-tools package: Missing method in Dispatcher: useFormState""
when inspecting components using `useFormState`

## How did you test this change?

- Added test to ReactHooksInspectionIntegration
- Added dedicated section for form actions to devtools-shell
![Screenshot 2024-02-04 at 12 02
05](https://github.com/facebook/react/assets/12292047/bb274789-64b8-4594-963e-87c4b6962144)",Sebastian Silbermann,2024-02-05T14:39:45Z
214fe84f53c5ba9d40c3427b72c5e6fb9be830e5,Convert ReactMultiChildReconcile to createRoot (#28169),Sebastian Silbermann,2024-02-04T14:44:46Z
f5a3158a784ad9677d071004b37b100f26c6c4e3,Convert ReactDOMEventPropagation to createRoot (#28177),Sebastian Silbermann,2024-02-04T10:29:06Z
93a5f40cbf05a6efb63a78748d238605dfe35e0c,Convert ReactFresh to createRoot (#28170),Sebastian Silbermann,2024-02-04T10:09:49Z
c7bf1c25ce0c869c3d30709fa15e6ba9a85a021c,Convert ReactDOMSuspensePlaceholder to createRoot (#28168),Sebastian Silbermann,2024-02-04T10:02:22Z
3d6fcf958233a004ff9bd0af8f1f65b8f22f1b3c,Convert ReactErrorBoundaries-test.internal.js to createRoot (#28122),Matt Carroll,2024-02-03T01:41:56Z
85cc01743bc992a689770a4f37e3d5441f14f082,"DevTools: Add support for useOptimistic Hook (#27982)

## Summary

Add support for `useOptimistic` Hook fixing ""Unsupported hook in the
react-debug-tools package: Missing method in Dispatcher: useOptimistic""
when inspecting components using `useOptimistic`

## How did you test this change?

- Added test following the same pattern as for `useDeferredValue`",Sebastian Silbermann,2024-02-02T22:18:16Z
00f9acb12c036ef24a2b6d7957d75359c6280087,"add RSC entrypoint for jsx-runtime (#28217)

Adds a new entrypoint for the production jsx-runtime when using
react-server condition. Currently the entrypoints are the same but in
the future we will potentially change the implementation of the runtime
in ways that can only be optimized for react-server constraints and we
want to have the entrypoint already separated so environments using it
will be pulling in the right version",Josh Story,2024-02-02T21:37:48Z
cf925ebc3c25e295658c17d4513dfa046e5074e9,"convert ReactElementValidator-test to createRoot (#28223)

## Summary

Converts `ReactTestUtils.renderIntoDocument` and `ReactDOM.findDOMNode`
to `ReactDOMClient.createRoot`

## How did you test this change?
`yarn test ReactElementValidator`",Noah Lemen,2024-02-02T20:19:55Z
38ef167ee67cea85574c8b89287ed37569601c5b,Convert ReactJSXElement to createRoot (#28208),Ricky,2024-02-02T17:56:30Z
7db2446c3d10ddd22746f5a1cf8173156f23654e,Convert ReactJSXElementValidator to createRoot (#28209),Ricky,2024-02-02T17:56:18Z
29cb62ad6ca2e3d491df038e1cc8cbe882fa31a4,Add type information for jsx/runtime,Sathya Gunasekaran,2024-02-02T15:56:44Z
4b2a1115a743fc24d37ae1174d0568e8a3798095,Convert SyntheticMouseEvent to createRoot (#28200),Sebastian Silbermann,2024-02-02T15:52:29Z
b3a79c41339f1aca0e2d9a27b2b32551b07fdcaf,Convert BeforeInputEventPlugin to createRoot (#28199),Sebastian Silbermann,2024-02-02T15:52:19Z
fada283639aeb79767abb3aefd05958452730032,Convert multiple-copies-of-react to createRoot (#28198),Sebastian Silbermann,2024-02-02T08:15:53Z
7026806d4b158abd5d3e2468712607771d1aa0ee,Convert ReactDOMIframe to createRoot (#28197),Sebastian Silbermann,2024-02-02T08:15:43Z
02946228e1af3744878d964a58ea7cd55b563468,Convert createReactClassIntegration to createRoot (#28196),Sebastian Silbermann,2024-02-02T08:15:33Z
c4e9ed3fefcd744b48e9cce39df0f52cbc014e1a,"Convert ReactCompositeComponentDOMMinimalism to createRoot (#28194)

Not sure if this was also meant to test findDOMNode. But sounded like it
was more interested in the rendering aspect and findDOMNode was just
used as a utility. If we want to keep the findDOMNode tests, I'd just
rename it to a legacy test to indicate it needs to be flagged.",Sebastian Silbermann,2024-02-02T08:15:19Z
3cfe0cc0c2916352b8f18d14251be27f6d484eac,Convert ReactChildReconciler to createRoot (#28192),Sebastian Silbermann,2024-02-02T08:15:10Z
457ea7b9d67b7b6ef32021a7a0ab7834d2d9dbbf,Convert ReactChildren to createRoot (#28191),Sebastian Silbermann,2024-02-02T08:15:01Z
796d05e82c26d252215d764f2a947f7a11cbcba0,Convert EnterLeaveEventPlugin to createRoot (#28182),Sebastian Silbermann,2024-02-02T08:14:52Z
f8b26862d6fdd4708a78638b697f37cebfb074db,Convert CSSProperty to createRoot (#28181),Sebastian Silbermann,2024-02-02T08:14:43Z
f28f022f22ce9cb737f12a16675f7003e95e9c93,Convert InvalidEventListeners to createRoot (#28180),Sebastian Silbermann,2024-02-02T08:14:34Z
e9c13cde644753e554c060bc71fd57077288ae35,Convert ReactComponentLifeycle to createRoot (#28178),Sebastian Silbermann,2024-02-02T08:14:25Z
11aa263844cc90b3677782c9b8bafa3fe22fd389,Remove usage of /test-utils in ReactLegacyCompositeComponent (#28201),Sebastian Silbermann,2024-02-02T08:14:05Z
7f8798a3f2cba588c1b7e5b19d488bce3520f62a,Convert ReactDOMSelection to createRoot (#28176),Sebastian Silbermann,2024-02-02T07:58:30Z
fa8a34bfac9be820269b52f1e55afe9fe89bfcf1,Convert ReactStrictMode to createRoot (#28162),Sebastian Silbermann,2024-02-02T07:57:56Z
b25dcd3958872322cbeff797ba99c0856de1ebbc,"Add ReactDOMClient to ServerIntegration tests (minor fixes) (#28131)

## Overview 

Branched off https://github.com/facebook/react/pull/28130

Converts to `createRoot`, with a few additional in-line conversions in
each file.",Ricky,2024-02-02T00:01:16Z
2a45118b1039bc81a44bad81f8e3b1fb2395da1b,Convert ResponderEventPlugin to createRoot (#28190),Sebastian Silbermann,2024-02-01T23:53:25Z
2dc428f746c080bb5bfe478556a051e75eac6e05,Convert ReactScope to createRoot (#28172),Sebastian Silbermann,2024-02-01T23:51:10Z
44952dc9840d335fe76bf1501919ec36f54591e9,Convert ReactComponent to createRoot (#28171),Sebastian Silbermann,2024-02-01T23:50:38Z
a7f1622117d7bbd9b2f681e962dcfba4aed62456,Convert SyntheticFocusEvent to createRoot (#28173),Sebastian Silbermann,2024-02-01T23:49:40Z
bc219090e3c4e54cc504215db13b08c6e8f1bddb,Convert SyntheticClipboardEvent to createRoot (#28174),Sebastian Silbermann,2024-02-01T23:49:18Z
c39ec17e66552d8ea8d6d3e11c1d7f85a9f7247f,Convert ReactErrorBoundariesHooks to createRoot (#28175),Sebastian Silbermann,2024-02-01T23:48:58Z
4bd5e3ea5c449fdd2089f6bdfb07fb1120b0eec7,"Add ReactDOMClient to ServerIntegrationReconnecting (#28136)

## Overview

Branched off https://github.com/facebook/react/pull/28130

## Why

In https://github.com/facebook/react/pull/24276 we changed the new root
behavior to error when a client-render is forced for certain cases, so
these now expect a mismatch even though they're using
`suppressHydrationWarning`.",Ricky,2024-02-01T23:32:38Z
fa6674b5bcf52610e92d19a5105308e56091c386,"Add ReactDOMClient to ServerIntegration(Hooks|NewContext) (#28135)

## Overview

Branched off https://github.com/facebook/react/pull/28130

### ~Failing~ Fixed by @eps1lon 
Most of the tests pass, but there are 3 tests that have additional
warnings due to client render error retries.

For example, before we would log:

```
Warning: Do not call Hooks inside useEffect(...), useMemo(...), or other built-in Hooks.
Warning: Expected server HTML to contain a matching text node for ""0"" in <div>.
```

And now we log

```
Warning: Do not call Hooks inside useEffect(...), useMemo(...), or other built-in Hooks.
Warning: Expected server HTML to contain a matching text node for ""0"" in <div>.
Warning: Do not call Hooks inside useEffect(...), useMemo(...), or other built-in Hooks.
```

We can't just update the expected error count for these tests, because
the additional error only happens on the client. So I need some guidance
on how to fix these.

---------

Co-authored-by: Sebastian Silbermann <sebastian.silbermann@klarna.com>",Ricky,2024-02-01T23:32:27Z
c0d927713002fe27c4d58717d35cd930e6814c2b,"Add ReactDOMClient to ServerIntegrationElements (#28134)

## Overview 

Branched off https://github.com/facebook/react/pull/28130

## ~Failing~ Fixed by @eps1lon 

The tests are currently failing because of two tests covering special
characters. I've tried a few ways to fix, but I'm stuck and will need
some help understanding why they fail and how to fix.

---------

Co-authored-by: Sebastian Silbermann <sebastian.silbermann@klarna.com>",Ricky,2024-02-01T23:32:18Z
278199b3deeee73f969a242c777c2d38406f8bfe,"Add ReactDOMClient to ServerIntegrationBasic (#28133)

## Overview

Branched off https://github.com/facebook/react/pull/28130

In `hydrateRoot`, we now error if you pass `undefined`:

```
Warning: Must provide initial children as second argument to hydrateRoot. 
```

So we expect 1 error for this now.",Ricky,2024-02-01T23:32:04Z
c42e7c7adc3a036c0c176d5b3dd7cf9215862815,"Add ReactDOMClient to ServerIntegrationSelect (#28132)

## Overview

Branched off https://github.com/facebook/react/pull/28130

## React for count changing
### Before
These tests are weird because on main they pass, but log to the console:

```
We expected 2 warning(s), but saw 1 warning(s).
We saw these warnings:
    Warning: Expected server HTML to contain a matching <select> in <div>.
        at select
```

The other one is ignored. The `expect(console.errors).toBeCalledWith(2)`
doesn't account for ignored calls, so the test passes with the two
expected (the +1 is in the test utiles). The ignored warning is

```
Warning: ReactDOM.hydrate is no longer supported in React 18. Use hydrateRoot instead. 
```

So the mismatch is in the ignored warnings. 

### After

After switching to `createRoot`, it still logs:

```
We expected 2 warning(s), but saw 1 warning(s).
We saw these warnings:
    Warning: Expected server HTML to contain a matching <select> in <div>.
        at select
```

But the test fails due to an unexpected error count. The new ignored
errors are:

```
Error: Uncaught [Error: Hydration failed because the initial UI does not match what was rendered on the server.]
Warning: An error occurred during hydration. The server HTML was replaced with client content in <div>.
Error: Hydration failed because the initial UI does not match what was rendered on the server.
Error: There was an error while hydrating. Because the error happened outside of a Suspense boundary, the entire root will switch to client rendering.
```

These seem to be the correct warnings to fire in `createRoot`, so the
fix is to update the number of warnings we expect.",Ricky,2024-02-01T23:31:52Z
6054be9c86f2e01e5e24c1fe2182479fec8667e4,"Add ReactDOMClient to ServerIntegrationTestUtils (#28130)

## Overview

Adds support for `ReactDOMClient` for  `ServerIntegration*` tests. 

Also converts tests that pass without any other changes. Will follow up
with other PRs for more complex cases.",Ricky,2024-02-01T23:26:33Z
2efa38332adc1fc1500753d79fcba41a0197a7a6,"fix(eslint-plugin-react-hooks): accepting `as` expression as a callback (#28202)

## Summary

Closes #20750

## How did you test this change?

Added a test case",StyleShit,2024-02-01T20:08:21Z
3d1da1f9ab7d54984c096e6a04c8729f3a50fd8a,"Remove createRootStrictEffectsByDefault flag (#28102)

There's no need to separate strict mode from strict effects mode any
more.

I didn't clean up the `StrictEffectMode` fiber flag, because it's used
to prevent strict effects in legacy mode. I could replace those checks
with `LegacyMode` checks, but when we remove legacy mode, we can remove
that flag and condense them into one StrictMode flag away.",Ricky,2024-02-01T19:54:20Z
4dd475c97799f3fb83bdd2fff2d028e0e30041cf,"convert ReactElement-test from renderIntoDocument (#28161)

## Summary

refactors ReactElement-test to use `createRoot` instead of
`renderIntoDocument`, which uses `ReactDOM.render` under the hood

## How did you test this change?
`yarn test ReactElement`",Noah Lemen,2024-02-01T19:49:30Z
94259cd57a72123af224d6786c96f5915de06d63,"convert ReactElementClone-test from renderIntoDocument (#28193)

## Summary

migrates to createRoot – renderIntoDocument uses ReactDOM.render

## How did you test this change?

yarn test ReactElementClone",Noah Lemen,2024-02-01T19:45:06Z
6f8f0005926cc1cdf1d12b3e1c2cc9fce1a17baa,Update react docs link in issue template (#28195),Ricky,2024-02-01T19:44:26Z
a1433ca0bacff76f720ffec9a0020f56e8c9ffed,"fix(eslint-plugin-react-hooks): accepting `as` expressions as deps array (#28189)

## Summary

This PR closes #25844
The original issue talks about `as const`, but seems like it fails for
any `as X` expressions since it adds another nesting level to the AST.

EDIT: Also closes #20162

## How did you test this change?

Added unit tests",StyleShit,2024-02-01T19:30:17Z
53b12e46a17549ec7644e13c126440ed2f3629fd,"Add stable React.act export (#28160)

Starting in version 19, users can import the `act` testing API from the
`react` package instead of using a renderer specific API, like
`react-dom/test-utils`.",Andrew Clark,2024-02-01T18:28:14Z
4384a7bcd351c2218c5727a949cf7fff20c3d9d4,"[flow] ignore hidden directories (#28096)

[flow] ignore hidden directories",Jan Kassens,2024-02-01T16:24:04Z
7bce30242137b4668b656feb866184a418cb537a,"Make Other mutation validation message more generic 

The current error message ""This mutates a global or a variable after it 

was passed to React"" no longer makes sense since we now have more 

specific error messages for different kinds of Effect.Mutate or 

Effect.Stores. This replaces the fallthrough ""Other"" case with a 

more generic message. It's not perfect, but it's a little more accurate 

than what is currently emitted 

The proper fix might be to treat functions as mutable objects and allow 

the mutation, or special case `Function.displayName`. For now though 

this PR just updates the message in the meantime so it's less 

confusing.",Lauren Tan,2024-02-01T16:02:30Z
a0aa66ca8f68bdc66f04e8aa55a7f41a52c41f0d,"Add test for function property mutation 

There were no previous test paths that tested it, so I'm adding the example from 
https://github.com/facebookexternal/forget-feedback/issues/32 as a fixture",Lauren Tan,2024-02-01T16:02:30Z
1219d57fc9fcbf44c873c0b10e5acbd31f613c15,"[Fizz] Support aborting with Postpone (#28183)

Semantically if you make your reason for aborting a Postpone instance
the render should not hit the error pathways but should instead follow
the postpone pathways. It's awkward today to actually get your hands on
a Postpone instance because you have to catch the throw from postpone
and then pass that into `abort()` or `AbortController.abort()`
(depending on the renderer API you are using)

This change makes it so that in most circumstances if you abort with a
postpone the `onPostpone` handler will be called and the Suspense
boundaries still pending will be put into client render mode with the
appropriate postpone digest to avoid trigger recoverable error pathways
on the client.

Similar to postponing in the shell during a resume or render however if
you abort before the shell is complete in a resume or render we will
fatally error. The fatal error is contextualized by React to avoid
passing the postpone object itself to the `onError` and related options.",Josh Story,2024-02-01T15:14:08Z
d29f7d973da616a02d6240ea10306a6f33e35ca1,"Enable enableFilterEmptyStringAttributesDOM everywhere (#28125)

## Summary

Stacked on [#28124](https://github.com/facebook/react/pull/28124) ([Diff
against
#28124](https://github.com/facebook/react/compare/eps1lon:fix/anchor-href-empty...eps1lon:feat/enableFilterEmptyStringAttributesDOM-canary))

Enables `enableFilterEmptyStringAttributesDOM` everywhere. I don't think
this needs to be enabled behind `__VARIANT__` for RN since this flag is
only used in DOM.

## How did you test this change?

- CI",Sebastian Silbermann,2024-01-31T16:23:21Z
f7ce4164c90990bd43b2671bf0b1db45e160fc15,"chore: remove eslint-plugin-flowtype from dev dependencies (#28157)

While trying to resolve some issues with Flow in ESLint, noticed that we
are still listing `eslint-plugin-flowtype` as dev dependency, but it has
been deprecated in favour of `eslint-plugin-ft-flow`.",Ruslan Lesiutin,2024-01-31T14:52:52Z
45582c6c4d8b73229c71febbba43ee60fbab81fb,"Add script to output flag values (#28115)

## Overview

Depends on: https://github.com/facebook/react/pull/28116

Add `yarn flags` to output at table of all feature flags. 

Provides options to output a csv file, diff two or more builds, and
sort.

### Options
<img width=""1154"" alt=""Screenshot 2024-01-26 at 4 06 53 PM""
src=""https://github.com/facebook/react/assets/2440089/c3dbd632-adb9-4416-9488-1c603ee4e789"">

### `yarn flags --diff next canary`
<img width=""637"" alt=""Screenshot 2024-01-26 at 4 15 03 PM""
src=""https://github.com/facebook/react/assets/2440089/1a681ae8-ce33-42d0-9d1f-3f415a8e1c3d"">


### `yarn flags --diff canary experimental`
<img width=""637"" alt=""Screenshot 2024-01-26 at 4 14 51 PM""
src=""https://github.com/facebook/react/assets/2440089/c66f66cb-3cee-4df6-a1d1-b24600ebd4b3"">


### `yarn flags` (all flags)

<img width=""1054"" alt=""Screenshot 2024-01-26 at 4 16 30 PM""
src=""https://github.com/facebook/react/assets/2440089/4ce99c7c-825e-4bca-9b83-ca5d6e2bc1a9"">",Ricky,2024-01-31T04:15:50Z
d55420c430cee6338fcc63ad663cb4b778af55de,"Allow prefixed hooks for compiling bundled code 

We're doing some internal benchmarking using a lightweight bundler that @pieterv 
wrote for experimentation purposes. It's designed to fully preserve Flow type 
annotations so we can experiment with type-driven compilation and test out what 
benefits we might get from ""cross-module"" compilation more easily (ie by just 
bundling together a few modules so we can see them all as one). 

However, the bundler renames local variables and imports, so that a reference to 
`useMemo()` might end up as `React$useMemo()` or similar. This PR adds a flag to 
tell the compiler that builtin hooks might be prefixed and resolve them 
appropriately.",Joe Savona,2024-01-31T03:11:17Z
d0bb1fed61cba004f8014337488b3e8c398ab880,"[be] Explicit todo diagnostics for hoisting 

--- 

Currently, we error on non-hoisted identifiers in EnterSSA with a somewhat 
cryptic message. This PR changes `BuildHIR` hoisting logic to find ALL hoistable 
bindings, then error when we try to lower hoisting for unsupported declaration 
types. 

Two benefits to this refactoring: 

- Dedups ""unhandled identifier declaration"" logic (previous to #2552 and this 
PR, we did this check in three places). 

- More explicit todo diagnostic messages when we cannot hoist a declaration",Mofei Zhang,2024-01-31T15:59:25Z
69733c5ad8cfb66204c53a71eb9f2545ba937a73,"[hoisting][patch] use Babel identifier apis in BuildHIR hoisting logic 

--- 

Three functional changes: 

- Instead of visiting all identifier references, explicitly traverse only 
function decls/exprs. This avoids bugs like accidentally hoisting inline 
references 

```js 

// input 

const x = identity(y); 

const y = 2; 

// lowered HIR before this PR (simplified) 

[0] DeclareContext HoistedConst y$0 

[1] LoadContext y$0 

[2] StoreLocal Const x$5 = identity([1]) 

``` 

- Rely on `isReferencedIdentifier()` instead of manually checking member 
properties / assignments, which is error prone 

```js 

// added fixture hoisting-repro-variable-used-in-assignment 

const callbk = () => { 

// before this PR, we skip hoisting x because it's part of a declaration 

const copy = x; 

return copy; 

}; 

const x = 2; 

return callbk(); 

``` 

- Visit lvalues after rvalues. This allows for recursive self-references (e.g. 
factorial) 

From the Babel side, this change relies heavily on babel's scope binding 
resolution logic. My understanding is: 

- Babel guarantees node objects are uniqued (`node1 === node2` <--> node1 and 
node2 are the same node in the ast) 

- Each binding has exactly one `bindingIdentifier` (`binding.identifier`, 
`getBindingIdentifier`, etc) which is identifier node @ its declaration site 

```js 

// x is a binding identifier 

const x = 2; 

// foo is a binding identifier 

function foo() { 

} 

// param is a binding identifier 

(param) => {...} 

// this bar is a binding identifier 

let bar; 

// but not this bar 

bar = 2; 

```",Mofei Zhang,2024-01-31T15:59:25Z
f3ce87ab650f07774e1df9bc3f8033e023973d10,"Restore old behavior for empty `href` props on anchor tags (#28124)

Treat `<a href="""" />` the same with and without
`enableFilterEmptyStringAttributesDOM`

in https://github.com/facebook/react/pull/18513 we started to warn and
ignore for empty `href` and `src` props since it usually hinted at a
mistake. However, for anchor tags there's a valid use case since `<a
href=""""></a>` will by spec render a link to the current page. It could
be used to reload the page without having to rely on browser
affordances.

The implementation for Fizz is in the spirit of
https://github.com/facebook/react/pull/21153. I gated the fork behind
the flag so that the fork is DCE'd when the flag is off.",Sebastian Silbermann,2024-01-30T23:43:40Z
af7e8c7a71c60278e3935dfb20fac7b562769bb4,Convert trustedTypes to createRoot (#28163),Sebastian Silbermann,2024-01-30T21:22:33Z
13aae52aea07b59b17aebaf65fd83d1c67c6ecb4,Convert SimpleEventPlugin to createRoot (#28164),Sebastian Silbermann,2024-01-30T21:22:02Z
417188314dd1d6df54efc8cd6a0c5d4830615888,"Update www flags (#28150)

Adds an experiment for `enableFormActions` and hardcodes
`enableCustomElementPropertySupport` on www since this is shipped.",Ricky,2024-01-30T19:24:41Z
178f4351947a842ff0b56700e9115b25ae8f20d0,"Always warn if client component suspends with an uncached promise (#28159)

Previously we only warned during a synchronous update, because we
eventually want to support async client components in controlled
scenarios, like during navigations. However, we're going to warn in all
cases for now until we figure out how that should work.",Andrew Clark,2024-01-30T19:23:39Z
554fc49f41465d914b15dc8eb2ec094f37824f7e,"[Fizz] improve Hoistable handling for Elements and Resources inside Suspense Boundaries (#28069)

Updates Fizz to handle Hoistables (Resources and Elements) in a way that
better aligns with Suspense fallbacks

1. Hoistable Elements inside a fallback (regardless of how deep and how
many additional boundaries are intermediate) will be ignored. The
reasoning is fallbacks are transient and since there is not good way to
clean up hoistables because they escape their Suspense container its
better to not emit them in the first place. SSR fallbacks are already
not full fidelity because they never hydrate so this aligns with that
somewhat.
2. Hoistable stylesheets in fallbacks will only block the reveal of a
parent suspense boundary if the fallback is going to flush with that
completed parent suspense boundary. Previously if you rendered a
stylesheet Resource inside a fallback any parent suspense boundaries
that completed after the shell flushed would include that resource in
the set required to resolve before the boundary reveal happens on the
client. This is not a semantic change, just a performance optimization
3. preconnect and preload hoistable queues are gone, if you want to
optimize resource loading you shoudl use `ReactDOM.preconnect` and
`ReactDOM.preload`. `viewport` meta tags get their own queue because
they need to go before any preloads since they affect the media state.

In addition to those functional changes this PR also refactors the
boundary resource tracking by moving it to the task rather than using
function calls at the start of each render and flush. Tasks also now
track whether they are a fallback task

supercedes prior work here: https://github.com/facebook/react/pull/27534",Josh Story,2024-01-30T18:14:59Z
1c958aa4abf9e6b638489b1d73cdb1b6dc7c3ab6,"[Fiber] Use a safer strategy to track the last precedence (#28110)

Uses a safer strategy to track the last precedence to avoid the need to
consistently remember to preprend `'p'` to the precedence value",Josh Story,2024-01-30T18:10:19Z
2477384650bd184d3ac4a881130118f2636f8551,"Complete DOMPluginEventSystem migration to createRoot (#28148)

Follow-up to
https://github.com/facebook/react/pull/28139#discussion_r1468852457

I mistakenly kept the tests using comment nodes as containers as legacy
tests. It's not that comments nodes aren't allowed in createRoot
entirely. Only behind `disableCommentsAsDOMContainers`. We already had
one test following that pattern so I just applied the same pattern to
the other tests for consistency.

Now `DOMPluginEventSystem` no longer uses any legacy roots.",Sebastian Silbermann,2024-01-30T08:11:58Z
c3e9cba0bb71c1fa315d75272c759081faad3599,[patch] PruneHoistedContexts should traverse lambdas,Mofei Zhang,2024-01-29T22:45:44Z
74d8a18637587334a011d572afa52c3c60382611,"[optim] All nested properties in refs are ref values 

Forget currently removes memoization of callbacks that have `mutate` effects on 
`ref` inner properties. @gsathya pointed out that our existing compiler behavior 
is to (1) NOT extend mutable ranges for functions that mutate `ref.current` and 
(2) extend mutable ranges for functions that mutate `ref.current.inner`. 

```js 

// input 

function Component() { 

const ref = useRef({ text: null }); 

const handleChange = useCallback((e) => { 

ref.current.text = e.target.value; 

}); 

return <input onChange={handleChange} />; 

} 

// output 

function Component() { 

const ref = useRef({ text: null }); 

// now unmemoized! 

const handleChange = (e) => { 

ref.current.text = e.target.value; 

};",Mofei Zhang,2024-01-29T22:04:52Z
4d6c47baa3bf40bb7dea23642dd42e97eba4232d,"Clean up experimental flags (#28116)

## Overview

Adds a new global to disambiguate experimental flags that we intend to
land when we can make breaking changes.",Ricky,2024-01-29T19:03:39Z
4c73da8cbdbd2493827f86ed1991c3770ecb9625,"Convert ReactCompositeComponent to createRoot (#28099)

Moves tests depending on legacy APIs to `ReactLegacyCompositeComponents`
and updates the rest.",Ricky,2024-01-29T19:03:16Z
61df8caa3b96a0395b550d8c2a3dca7269761d55,"Remove duplicate dynamic scheduler flags (#28100)

These were made dynamic again in
https://github.com/facebook/react/pull/27919, and already have the
dynamic flags set. It's a bummer to push this around, we should come up
with a better way.",Ricky,2024-01-29T18:39:39Z
cc7d4216299e1d23a6e77b58d4c32ec1b8864ead,"Add lint tests that should fail (#28147)

These though fail.

Anon default export: https://github.com/facebook/react/issues/21181
Promise callbacks: https://github.com/facebook/react/issues/26186
Returning anon functions: https://github.com/facebook/react/issues/22520",Ricky,2024-01-29T17:54:32Z
971b62f479a5dbd84688ba2b2c507de2a1d22dcc,Convert useFocusWithin to createRoot (#28128),Sebastian Silbermann,2024-01-29T16:02:49Z
cdfaae73c4768ddcce724872b1aa45130b39c85f,"Convert ReactDOMTextarea to createRoot (#28126)

Also removes usage of `ReactTestUtils`",Sebastian Silbermann,2024-01-29T16:02:20Z
00d42ac3542179c55f936f395ede7abaeb5900a3,Convert DOMPluginEventSystem to createRoot (#28139),Sebastian Silbermann,2024-01-29T08:12:20Z
6d2a1d0334581c1cdb269863f6a73d152a671c49,Convert ReactMultiChildText to createRoot (#28140),Sebastian Silbermann,2024-01-29T08:11:24Z
313e4d4129088b3ed99ab64d15dd8b6de175261b,Convert ReactDOMTextComponent to createRoot (#28141),Sebastian Silbermann,2024-01-29T08:11:02Z
1c8901f750fe09396de311e9c9e1e337599b2e9c,Convert ReactDOMSelect to createRoot (#28142),Sebastian Silbermann,2024-01-29T08:10:34Z
7aa45db6a2d30e62cf5ace08e17d971c8e8b977c,Convert refs to createRoot (#28113),Sebastian Silbermann,2024-01-28T09:41:47Z
3e58b0af0caebf5f1b507ce5f360c85cb57bf528,Convert ReactDOMInvalidARIAHook to createRoot (#28129),Sebastian Silbermann,2024-01-27T21:08:01Z
e2b93afc604f857f7b59788920533ff7d1c72563,"Convert renderSubtreeIntoContainer-test.js to createRoot (#28114)

Co-authored-by: Ricky <rickhanlonii@gmail.com>",Matt Carroll,2024-01-27T00:30:02Z
407faf5a69955f23f3549cff77b1a37199daa95f,"Remove ReactDOM.render tests in ReactDOMConsoleErrorReporting-test (#28053)

Each it block here was duplicated to cover ReactDOM.render and
ReactDOMClient.createRoot. Here we delete the ReactDOM.render coverage.

Co-authored-by: Jack Pope <jackpope@meta.com>",Jack Pope,2024-01-27T00:29:45Z
91212b09ed53c8d5a0f414ed93972681caa5ac7e,"Clean up legacy render from ReactTestUtilsAct-test (#28091)

Co-authored-by: Jack Pope <jackpope@meta.com>",Jack Pope,2024-01-27T00:29:25Z
54f2314e9cfe82baf1c040a55ed4dfff6488f84e,"Use createRoot in ReactMockedComponent-test (#28087)

Co-authored-by: Jack Pope <jackpope@meta.com>",Jack Pope,2024-01-26T22:28:58Z
4c41c09ccc28e5cf85cbb706908b740c95ff5a97,Use createRoot in ReactDOMComponentTree-test (#28112),Jack Pope,2024-01-26T22:18:03Z
38997cf19ac5223a7c748ba975b40d649b9c4c52,Use createRoot in ReactTestUtilsActUnmockedScheduler-test (#28086),Jack Pope,2024-01-26T22:17:34Z
766eac46bb52bda28f87c11740214a4444ca881b,"Remove outdated enableSchedulerDebugging flag (#28101)

This flag was moved to the scheduler feature flags, so these flags don't
do anything.",Ricky,2024-01-26T21:53:01Z
37bdff675c28e247333ffe35055534ad94941e8c,Convert ReactIdentity-test.js to createRoot (#28106),Matt Carroll,2024-01-26T21:18:48Z
759811b0627384e5dde8ac81397cb2b8c7390298,Convert ReactMultiChild-test.js to createRoot (#28117),Matt Carroll,2024-01-26T21:18:19Z
8f998bf93fdc417ea9e8f99dedfe3a7c3d6e5bbc,Convert SyntheticEvent-test.js to createRoot (#28118),Matt Carroll,2024-01-26T21:17:44Z
788182f7099cf927a454ff0c37d25d94b4f0e895,"[patch] Patch edge case: RenameVariables should visit lvalues 

--- 

This is likely a rare edge case, but it does produce a parse error. 

RenameVariables visits all identifier references to ensure we don't end up 
producing conflicting variable declarations, using a stack of block scopes to 
check ""in scope variables"". 

This pass is currently built to be conservative -- we explicitly rename shadowed 
variables, and visit all rvalue references. The issue is for this IR: 

``` 

{ 

1.  decl t0; 

2.  scope 0 { 

3.    reassign t0 = ... 

4.    read(t0) 

5.  } 

6.  let t0 = ... 

7.  read(t0); 

} 

``` 

We currently visit t0 only on line 4 and 7 (and never rename t0). Instead we 
should visit lvalues (declaration sites) which occur earlier than rvalues 
(visiting lines 1 and 6 will show conflicting declarations)",Mofei Zhang,2024-01-26T20:29:09Z
4ec05660a2f56aa47d9d82eaeeb8a34df56f8dbc,"[be] Update to node 20 actions 

Node.js 16 which various github actions (v3) were using is no longer supported 
by github and was spewing a bunch of warnings",Lauren Tan,2024-01-30T20:46:19Z
bc145f6f1fb469a7e09608c1714d074734620871,"Support customizable eslint suppressions 

The compiler bails out of compiling code that contains suppressions of the 
official React ESLint rules. However, some apps may use additional rules that 
they want to trigger bailouts for, or use the official rules under a different 
name (we do this at Meta). This PR adds a compiler flag to specify a custom set 
of line rule names, suppression of which should trigger a bailout.",Joe Savona,2024-01-29T21:58:49Z
742a6f09bf7c7f39d22f73bedc8b1109b8597407,[ez] Get rid of caniuse warning,Lauren Tan,2024-01-30T19:54:04Z
7c79dafb71cab8808749e3284eab3c623e9c2360,Convert ReactDOMServerIntegrationUntrustedURL-test.js to createRoot (#28105),Matt Carroll,2024-01-26T20:18:14Z
9aef5d225b489ceeba753c5c86b236259baf816c,"Use modern rendering APIs for attribute-behavior fixture (#27883)

The attribute-behavior fixture now uses `createRoot().render()` and
`renderToReadableStream` instead of depdrecated APIs.

This revealed some changes to the snapshots that I annotated for
discussion.

I also added some new tests related to upcoming changes for easier
future diffing.

Also adds support for running the attribute-behavior fixture using Apple
Silicon chips (Apple MBP M-series).",Sebastian Silbermann,2024-01-26T18:03:42Z
60f190a55948a7512d4e2a336f03b45fd38d6a80,"Capture React.startTransition errors and pass to reportError (#28111)

To make React.startTransition more consistent with the hook form of
startTransition, we capture errors thrown by the scope function and pass
them to the global reportError function. (This is also what we do as a
default for onRecoverableError.)

This is a breaking change because it means that errors inside of
startTransition will no longer bubble up to the caller. You can still
catch the error by putting a try/catch block inside of the scope
function itself.

We do the same for async actions to prevent ""unhandled promise
rejection"" warnings.

The motivation is to avoid a refactor hazard when changing from a sync
to an async action, or from useTransition to startTransition.",Andrew Clark,2024-01-26T17:10:33Z
51c380d6ed303a54dad7b55258dd7aa8c6bb3fe1,Use createRoot in ReactEmptyComponent-test (#28095),Jack Pope,2024-01-26T16:37:51Z
763612647ceb66d95f728af896ca5e18a8181db8,"fix incorrect insertion order of stylesheets (#28108)

## Summary

In the precendences Map every key is prefixed with `p`. This fixes one
case where this is missing.

## How did you test this change?

<!--
Demonstrate the code is solid. Example: The exact commands you ran and
their output, screenshots / videos if the pull request changes the user
interface.
How exactly did you verify that your PR solves the issue you wanted to
solve?
  If you leave this empty, your PR will very likely be closed.
-->",Tobias Koppers,2024-01-26T15:54:58Z
6c64428d904f8339cddaa0f4850cba89acabe0bb,Convert ChangeEventPlugin to createRoot (#28090),Sebastian Silbermann,2024-01-26T09:20:26Z
36baa43560f839f0add7e0ec8125580e3b85235c,Convert ReactDOMAttribute to createRoot (#28089),Sebastian Silbermann,2024-01-26T09:17:26Z
0c45e8307135dc275b18b3a8fa5c85ba97d20a42,Convert SelectEventPlugin to createRoot (#28076),Sebastian Silbermann,2024-01-26T09:17:13Z
b30ec67c4342c9e4ccf42e7b3f17e00ea3bf28bd,Convert ReactDOMSVG to createRoot (#28074),Sebastian Silbermann,2024-01-26T09:17:09Z
fbb21066a2117c7cfbbca21260d2d9f3b2973286,Convert SyntheticWheelEvent-test.js to createRoot (#28103),Matt Carroll,2024-01-26T08:05:08Z
9bad8ed9a6719f406759b34e436fc508f0dac305,"Convert validateDOMNesting to createRoot (#28098)

ezpz",Ricky,2024-01-26T03:30:56Z
85b296e9b6ded4accd9ec3389297f95091fb1ac0,"Async action support for React.startTransition (#28097)

This adds support for async actions to the ""isomorphic"" version of
startTransition (i.e. the one exported by the ""react"" package).
Previously, async actions were only supported by the startTransition
that is returned from the useTransition hook.

The interesting part about the isomorphic startTransition is that it's
not associated with any particular root. It must work with updates to
arbitrary roots, or even arbitrary React renderers in the same app. (For
example, both React DOM and React Three Fiber.)

The idea is that React.startTransition should behave as if every root
had an implicit useTransition hook, and you composed together all the
startTransitions provided by those hooks. Multiple updates to the same
root will be batched together. However, updates to one root will not be
batched with updates to other roots.

Features like useOptimistic work the same as with the hook version.

There is one difference from from the hook version of startTransition:
an error triggered inside an async action cannot be captured by an error
boundary, because it's not associated with any particular part of the
tree. You should handle errors the same way you would in a regular
event, e.g. with a global error event handler, or with a local
`try/catch`.",Andrew Clark,2024-01-26T02:54:45Z
382190c595126837ee7e43b4fa953f4edd30e01c,"[Flight/Fizz] Reset ThenableState Only in Branches Where It's Added (#28068)

Before, we used to reset the thenable state and extract the previous
state very early so that it's only the retried task that can possibly
consume it. This is nice because we can't accidentally consume that
state for any other node.

However, it does add a lot of branches of code that has to pass this
around. It also adds extra bytes on the stack per node. Even though it's
mostly just null.

This changes it so that where ever we can create a thenable state (e.g.
entering a component with hooks) we first extract this from the task.
The principle is that whatever could've created the thenable state in
the first place, must always be rerendered so it'll take the same code
paths to get there and so we'll always consume it.",Sebastian Markbåge,2024-01-26T00:52:00Z
c7e735f625450d11438a87bb6ff6af15b3958a8f,"Convert ReactLegacyContextDisabled-test.internal to createRoot (#28093)

Convert ReactLegacyContextDisabled-test.internal to createRoot",Jan Kassens,2024-01-25T21:02:13Z
991b72a39209012b05384a8f9a60a4a22d5dbb29,"Upgrade flow to 0.227.0 (#28094)

Upgrade flow to 0.227.0",Jan Kassens,2024-01-25T21:01:40Z
772475457354c7c417bee4caf15311d28c9b3a2c,"Convert ReactFreshIntegration-test to createRoot (#28073)

Convert ReactFreshIntegration-test to createRoot",Jan Kassens,2024-01-25T20:07:57Z
a7fa58d8b6e8306f9c4f4135e702f1bc7a099a49,"Convert ReactDOMInput-test to createRoot (#28084)

Convert ReactDOMInput-test to createRoot",Jan Kassens,2024-01-25T19:22:12Z
0b32b3edd2c49b25fa25412fa6a6a31d43e15653,Convert ReactCompositeComponentState to createRoot (#28063),Ricky,2024-01-25T18:36:04Z
43a3653b1958164f2b6b4dd57bceb75a95344570,Convert ReactContextValidator to createRoot (#28085),Sebastian Silbermann,2024-01-25T17:37:07Z
a41ebfc5f64933019a0accb13d147c7361a9c281,Use createRoot in useFocus-test (#28083),Jack Pope,2024-01-25T17:10:56Z
b123b9c4f054a7def7ed84e350ccd46cc86672a6,"[Flight] Refactor the Render Loop to Behave More Like Fizz (#28065)

This refactors the Flight render loop to behave more like Fizz with
similar naming conventions. So it's easier to apply similar techniques
across both. This is not necessarily better/faster - at least not yet.

This doesn't yet implement serialization by writing segments to chunks
but we probably should do that since the built-in parts that
`JSON.stringify` gets us isn't really much anymore (except serializing
strings). When we switch to that it probably makes sense for the whole
thing to be recursive.

Right now it's not technically fully recursive because each recursive
render returns the next JSON value to encode. So it's kind of like a
trampoline. This means we can't have many contextual things on the
stack. It needs to use the Server Context `__POP` trick. However, it
does work for things that are contextual only for one sequence of server
component abstractions in a row. Since those are now recursive.

An interesting observation here is that `renderModel` means that
anything can suspend while still serializing the outer siblings.
Typically only Lazy or Components would suspend but in principle a Proxy
can suspend/postpone too and now that is left serialized by reference to
a future value. It's only if the thing that we rendered was something
that can reduce to Lazy e.g. an Element that we can serialize it as a
lazy.

Similarly to how Suspense boundaries in Fizz can catch errors, anything
that can be reduced to Lazy can also catch an error rather than bubbling
it. It only errors when the Lazy resolves. Unlike Suspense boundaries
though, those things don't render anything so they're otherwise going to
use the destructive form. To ensure that throwing in an Element can
reuse the current task, this must be handled by `renderModel`, not for
example `renderElement`.",Sebastian Markbåge,2024-01-25T17:09:11Z
6b49c4f2d594a5ad6e2df699c0c4c6e29881246c,"[eslint-plugin] Cleanup package.json 

Removes some unused packages and unused package.json fields",Lauren Tan,2024-01-25T15:29:32Z
8bb6ee1d33ca6c7e34342bc4b17aac0449ab6899,"Update ReactUpdates-test (#28061)

## Overview

These tests are important for `ReactDOM.render`, so instead of just
re-writing them to `createRoot` and losing coverage:
- Moved the `.render` tests to `ReactLegacyUpdates`
- Re-wrote the tests in `ReactUpdates` to use `createRoot`
- Remove `unstable_batchedUpdates` from `ReactUpdates`

In a future PR, when I flag `batchedUpdates` with a Noop, I can add the
gate to just the tests in `ReactLegacyUpdates`.",Ricky,2024-01-25T06:17:03Z
696953fd51deaf60fd55733493a372cc3520d8b7,"Convert ReactDOMFiber to createRoot (#28077)

Copies the existing tests to `ReactDOMLegacyFiber`, and updates
`ReactDOMFiber` to new root.",Ricky,2024-01-25T04:55:42Z
5420c4ea08a4ccf06b04f0c0abdf1f5e8d84223a,"Convert ReactMount to createRoot (#28075)

To convert this file, I started replacing all the calls in line, and
quickly realized that we already have most of these tests covered in
other files. So I found the test that we didn't already have for
`create/hydrateRoot` and added them, then renamed `ReactMount` to
`ReactLegacyMount`.",Ricky,2024-01-25T04:55:21Z
11c9fd0c53133f24f5270d36591b65b8fc2ebd25,"Batch async actions even if useTransition is unmounted (#28078)

If there are multiple updates inside an async action, they should all be
rendered in the same batch, even if they are separate by an async
operation (`await`). We currently implement this by suspending in the
`useTransition` hook to block the update from committing until all
possible updates have been scheduled by the action. The reason we did it
this way is so you can ""cancel"" an action by navigating away from the UI
that triggered it.

The problem with that approach, though, is that even if you navigate
away from the `useTransition` hook, the action may have updated shared
parts of the UI that are still in the tree. So we may need to continue
suspending even after the `useTransition` hook is deleted.

In other words, the lifetime of an async action scope is longer than the
lifetime of a particular `useTransition` hook.

The solution is to suspend whenever _any_ update that is part of the
async action scope is unwrapped during render. So, inside useState and
useReducer.

This fixes a related issue where an optimistic update is reverted before
the async action has finished, because we were relying on the
`useTransition` hook to prevent the optimistic update from finishing.

This also prepares us to support async actions being passed to the
non-hook form of `startTransition` (though this isn't implemented yet).",Andrew Clark,2024-01-25T04:54:53Z
2efb1426067322cdb08304432b3ac849dee52bd9,Convert ReactDOMEventListener to createRoot (#28050),Ricky,2024-01-25T04:17:20Z
72411c45f94565c30215b51cbadb16fcc3479d37,Convert refs-destruction to createRoot (#28011),Ricky,2024-01-24T19:22:07Z
ee1eb4826f4f7beb4e06f2c15f03145bb5bddf5b,"Use react@17 for useSyncExternalStore shim tests (#28055)

The tests for the shim need to test with ReactDOM.render in React 17.",Ricky,2024-01-24T16:27:30Z
3d9b201327706cfc183eb3e1437c2d1663b42dd0,Convert ReactCompositeComponentNestedState to createRoot (#28066),Ricky,2024-01-24T15:58:07Z
6480eea157b033996a11264ae34993e2305833e8,Convert ReactDOMFiberAsync to createRoot (#28067),Ricky,2024-01-24T15:57:47Z
f161ceaa743fc14ef472e9d7b3e5a0b99ed9e970,"Convert ReactServerRenderingHydration-test to createRoot (partially) (#28010)

Convert ReactServerRenderingHydration-test to createRoot (partially)

Some tests seem to be specifically testing the legacy APIs, maybe we
need to keep those around. Keeping this PR to the simple updates.",Jan Kassens,2024-01-24T15:38:28Z
4217d324ae5766b3201e682bb4d67b8855652694,"Convert ReactDOMTestSelectors-test.js to createRoot (#27993)

Straightforward adding createRoot and act",Ricky,2024-01-24T04:01:53Z
46174f16ed304743eb4ad37ad95bd5109dd72e8e,Use createRoot in ReactEventIndependence-test (#28052),Jack Pope,2024-01-23T22:33:49Z
6e03d0df82020a77a8c6afff7ef31a4f6d31911e,"Use createRoot in ReactART-test (#28060)

Stacked on #28059

---------",Jack Pope,2024-01-23T22:25:18Z
9e13800e5731435a1e8ff4bd0266e7cd4adc8d4f,Remove ReactTestUtils from ReactArt-test (#28059),Jack Pope,2024-01-23T22:05:01Z
c92ad38375fe0f0c99460583c7195e8ec74eafec,"Fix block scoping issues from MergeConsecutiveBlocks 

Fixes the issues from the previous PR. It's a simple fix — we don't merge 
consecutive blocks if the successor block is some terminal's fallthrough.",Joe Savona,2024-01-23T19:41:00Z
b2f44c103b45b3bdded2e140b14042101a59b829,"Fixtures demonstrating incorrect block scoping due to MergeConsecutiveBlocks 

Fixtures from T173102122 and T173101739 demonstrating cases where 
MergeConsecutiveBlocks can move code out of its correct block scope, changing 
behavior or breaking the program, in cases where a control flow structure (such 
as switch) only has one non-returning control flow path. In these cases, the 
non-returning path gets merged with the fallthrough, effectively lifting that 
code out of the control flow structure and moving it into the outer scope. This 
can create dead code or just invalid code (with references to variables that are 
not in scope). 

Sprout fails on both of these fixtures: 

<img width=""812"" alt=""Screenshot 2024-01-23 at 11 25 36 AM"" 
src=""https://github.com/facebook/react-forget/assets/6425824/d397ea22-3fa3-436e-b655-09a45781274b"">",Joe Savona,2024-01-23T19:40:56Z
f9f084087f7eb8a6b56a89db850cb4dddef0ac66,"Fixture for reactively-controlled context variables 

Mofei considered this case, it works thanks to the handling for function 
expressions earlier in the stack.",Joe Savona,2024-01-23T16:59:21Z
a023a2da723b730149667d783b1e08aadccbfeae,"Fixtures for control values that become reactive due to interleaving 

See the previous PR, interleaved mutation can cause values that were not 
reactive to become reactive. I swear I had a case where this was observable, but 
I came up with it before reordering the PRs in this stack. I think my repro 
relied on an immutable reference to a mutable value, which is now handled in 
InferReactivePlaces. So here i'm just adding fixtures, and allowing this case 
since it's unobservable.",Joe Savona,2024-01-23T16:59:20Z
b2d637128c89d450355622379e97c6c6b1c79435,"Convert ReactDOMComponent-test to createRoot (#28034)

Convert ReactDOMComponent-test to createRoot",Jan Kassens,2024-01-23T15:04:13Z
cb9899955b3d2c6e1e4477585f06068c2007efec,"Fix ReactFreshIntegration-test not running all tests as assumed (#28033)

Fix ReactFreshIntegration-test not running all tests as assumed

`testCommon` was executed twice without setting `compileDestructuring`
ever to true.
This fixes this and removes one layer of abstraction in this test by
using `describe.each`.",Jan Kassens,2024-01-23T14:59:14Z
bf32989264ff2faa9a009550401f573f29db4df2,Convert ReactMountDestruction (partially) to createRoot (#28004),Sebastian Silbermann,2024-01-23T09:30:19Z
4d84bee1723ad024058dda7e9a47774146912c77,"Propagate reactive scope dependencies transitively 

During PruneNonReactiveDependencies, we sometimes need to promote a value from 
non-reactive to reactive if it ended up being grouped in the same reactive scope 
as some other reactive value. This generally happens due to interleaving 
mutations. 

In this case all downstream usage of the promoted value need to also be 
considered reactive. Fully propagating the reactivity requires re-running 
InferReactivePlaces, to account for things like control reactivity. We can't yet 
reuse that pass here though, because we haven't unified the pipeline on HIR yet. 

For now, we propagate the reactivity through local variables and downstream 
reactive scopes. See test fixtures for some examples that now correctly 
propagate reactivity and some that need the full reactivity inference to run 
correctly. The latter cases are handled in the next PR.",Joe Savona,2024-01-22T23:35:56Z
57163f0a52bed6229364cc558a786595cd6fa9d3,"InferReactivePlaces account for immutable aliases of mutably aliased values 

I found this by adding logic to reject inputs where reactivity gets newly 
propagated in PruneNonReactiveDependencies. It's possible to create a readonly 
alias to a mutable value such that we don't know the value is reactive yet when 
the alias is created. Thus we need to do a fixpoint iteration even if there are 
no loops in order to be able to revisit such aliases and reflow the reactivity 
forward. Example: 

```javascript 

const x = []; 

const y = x; 

const z = [y]; // y isn't reactive yet when we first visit this, so z is 
initially non-reactive 

y.push(props.value); // then we realize y is reactive. we need a fixpoint to 
propagate this back to z 

const a = [z]; // need an indirection to get past the partial propagation in 
PruneNonReactiveDependencies 

let b = 0; 

if (a[0][0]) { 

b = 1; 

} 

return [b]; 

``` 

Existing fixtures don't change because the basic reactivity propagation in 
PruneNonReactiveDependencies is enough to make common cases work. I confirmed 
that the new fixture does not work on previous PR in the stack.",Joe Savona,2024-01-22T23:35:55Z
2f803b47c7d225c9199275b7ddd255a23f60d929,Use createRoot for ReactTreeTraversal-test (#28051),Jack Pope,2024-01-22T22:13:10Z
ec19db4266b72ad8d94f851c050eb46c2c4d031a,Convert ReactElementJSX to createRoot (#28012),Ricky,2024-01-22T20:50:20Z
e1d20fc0c0b671601389b8c48a84a38e9c535654,Convert describeComponentFrame to createRoot (#28001),Sebastian Silbermann,2024-01-22T14:08:39Z
206934f0270d248b9eec186e2f70b0c7a4f99e1d,Convert ReactDOMOption to createRoot (#28002),Sebastian Silbermann,2024-01-22T08:21:40Z
0894e35d94fa84136e68403c7135c276a5f7898a,More fixtures for reactivity and mutable aliasing (property load case),Joe Savona,2024-01-20T03:12:58Z
8be56418d31ba6ff0113c3ccb91ce3f3d11ee4fd,"InferReactivePlaces accounts for mutable aliasing 

Fixes T175227223. When inferring reactivity, mutation of a value with a reactive 
input marks the mutable value as reactive. However, we also need to account for 
aliases: 

```javascript 

const x = []; 

const y = x; 

y.push(props.value); 

``` 

Previously we would have only considered `y` reactive here, but `x` also becomes 
reactive. 

The implementation extracts out a helper from InferReactiveScopeVariables that 
builds a `DisjointSet<Identifier>` of disjoint sets of mutably aliased values. 
InferReactivePlaces then treats all instances of each mutable alias group as 
equivalent for reactivity purposes.",Joe Savona,2024-01-20T00:03:58Z
29fbf6f62625c4262035f931681c7b7822ca9843,Convert ReactError-test to createRoot (#27995),Ricky,2024-01-19T19:35:56Z
a272cf9b0c46e2be49a5a05feb4a4a2dd1628a80,"Reactive control fixtures use multipass evaluation 

Updates all of the reactive control dependency fixtures to use multipass 
evaluation in sprout.",Joe Savona,2024-01-19T19:04:18Z
4c63dc7bddeea8b44466e918708ea44f76b05378,"Convert getEventKey-test to createRoot (#28006)

Convert getEventKey-test to createRoot",Jan Kassens,2024-01-19T18:51:20Z
64d0c94724bea32fa41d6b21cc4ee4938473be1e,"Convert ReactUpdaters-test.internal to createRoot (#28005)

Convert ReactUpdaters-test.internal to createRoot",Jan Kassens,2024-01-19T18:37:10Z
624b51388b25143398a71e42225c612a9a785218,"Convert SyntheticKeyboardEvent-test to createRoot (#28007)

Convert SyntheticKeyboardEvent-test to createRoot",Jan Kassens,2024-01-19T18:36:05Z
a2eaa21ac70ef898535479cb9fc9ea546854e072,"Convert dangerouslySetInnerHTML-test to createRoot (#28008)

Convert dangerouslySetInnerHTML-test to createRoot",Jan Kassens,2024-01-19T18:35:43Z
24d1c6f0fa28f95e5ea5f9fa23c31a1058e2d1a1,"Convert ReactDOM-test to createRoot (#28009)

Convert ReactDOM-test to createRoot",Jan Kassens,2024-01-19T18:35:15Z
c8323f3b42887e292fec37a7dbb476f0fabc1d09,"Mutation within a reactively controlled block propagates reactivity 

In InferReactivePlaces, we already account for reactively controlled values: 
where a value is never assigned a non-reactive value, but _which_ value is 
assigned is based on a reactive condition (the test conditions of an if, switch, 
loop, etc). 

This PR extends that reactively-controlled inference to mutation that is 
conditioned upon a reactive value. From the test case: 

```javascript 

let x = []; 

if (props.cond) { 

// This mutation has no reactive inputs. 

// *But* the mutation conditionally occurs based on props.cond which is reactive 

x.push(1); 

} 

let y = false; 

if (x[0]) { // therefore the value observed here is reactive 

y = true; 

} 

// so the value of y here is reactive via the reactive control dependency x[0] 

return [y]; 

```",Joe Savona,2024-01-19T18:03:51Z
34c89458f2db439c24e7f5e6c762ca75066b4787,[entrypoint] Allow ref params to component functions,Mofei Zhang,2024-01-19T19:59:52Z
4c58fc2ad8f1055f9b543147b283e5a3f795fd27,Convert ReactFreshMultipleRenderer to createRoot (#28000),Sebastian Silbermann,2024-01-19T17:21:15Z
601dba82175edd321c833395514081fe3aa6f445,Convert ReactErrorLoggingRecovery to createRoot (#28003),Sebastian Silbermann,2024-01-19T17:07:08Z
feed8f3f95836a99eeaf5dc64d1c9ed62217c1de,Convert ReactFunctionComponent to createRoot (#27997),Ricky,2024-01-19T03:32:04Z
4aa60d32b954ce14ad84892f5b4f937df3e42e28,"[patch][dce] Patch dce to have separate mark and sweep phases 

--- 

Previously, our logic was something like: 

```js 

fixed-point-loop { 

foreach instruction { 

mark referenced identifiers 

// assume that usages are always visited before declarations 

if (instruction is decl) { 

prune(instruction); 

} 

} 

foreach instruction { 

if not referenced { 

delete(instruction); 

} 

} 

``` 

This contained a bug, as not all usages of a variable are guaranteed to be 
visited before its declaration. 

```js 

// input 

let x = 0; 

while(x < 10) { 

x += 2; 

} 

return x; 

// hir 

entry: 

x$0 = 0 

goto loop-test 

loop-test: 

x$1 = phi(x$0, x$2) 

if ... goto loop-body else goto fallthrough 

loop-body: 

x$2 = x$1 ... 

goto loop-test 

fallthrough: 

return x$1 

``` 

In this example,`x$2` is defined by `loop-body` and used by `loop-test`. 
Similarly, `x$1` is defined by `loop-test` and used by `loop-body`. 

--- 

TODO: trying to come up with more test fixtures",Mofei Zhang,2024-01-18T23:29:19Z
a0e90065c60223ed14caa0a233e2bcf5a903a821,"[patch][babel] check babel identifier before lowering to HoistedConst 

Same babel identifier issue as #2510 but for HoistedConst 

Not sure how we should best test this -- one possibility is using constant prop. 
Currently, we have false positives for HoistedConst that prevent constant 
propagation. I don't want to over-rotate on babel apis tests in our fixtures 
(instead of semantically interesting ones) 

```js 

// input 

function Component() { 

{ x: 4 }; 

const x = 2; 

return x; 

} 

// output 

function Component() { 

const $ = useMemoCache(1); 

let x; 

if ($[0] === Symbol.for(""react.memo_cache_sentinel"")) { 

x = 2; 

$[0] = x; 

} else { 

x = $[0]; 

} 

return x; 

} 

```",Mofei Zhang,2024-01-18T23:29:19Z
f88e7fe4120b8355ec290acea54036874edec641,[repro] add fixture repro for destructuring bug,Mofei Zhang,2024-01-18T23:29:18Z
241a615732a71e8da90e17812d855e4c40f0d3b9,"[babel][contextvar] Patch context identifier babel logic; only use referenced 
identifiers 

--- 

A few fixes for finding context identifiers: 

Previously, we counted every babel identifier as a reference. This is 
problematic because babel counts every string symbol as an identifier. 

```js 

print(x);  // x is an identifier as expected 

obj.x      // x is.. also an identifier here 

{x: 2}     // x is also an identifier here 

``` 

This PR adds a check for `isReferencedIdentifier`. Note that only non-lval 
references pass this check 

```js 

print(x);  // isReferencedIdentifier(x) -> true 

obj.x      // isReferencedIdentifier(x) -> false 

{x: 2}     // isReferencedIdentifier(x) -> false 

x = 2      // isReferencedIdentifier(x) -> false 

``` 

Which brings us to change #2. 

Previously, we counted assignments as references due to the identifier visiting 
+ checking logic. The logic was roughly the following (from #1691) 

```js 

contextVars = intersection(reassigned, referencedByInnerFn); 

``` 

Now that assignments (lvals) and references (rvals) are tracked separately, the 
equivalent logic is this. Note that assignment to a context variable does not 
need to be modeled as a read (`console.log(x = 5)` always will evaluates and 
prints 5, regardless of the previous value of x). 

``` 

contextVars = union(reassignedByInnerFn, intersection(reassigned, 
referencedByInnerFn)) 

``` 

--- 

Note that variables that are never read do not need to be modeled as context 
variables, but this is unlikely to be a common pattern. 

```js 

function fn() { 

let x = 2; 

const inner = () => { 

x = 3; 

} 

} 

```",Mofei Zhang,2024-01-18T23:29:18Z
8f18b8233f2e68d00e8d175a8bed61c9db601f50,"[patch][contextvars] Patch for variables reassigned after objectmethod 
definitions",Mofei Zhang,2024-01-18T23:29:18Z
f0ef0b7d0b2f09e1f7c502b202a1f8d67ee10c65,Edit .git-blame-ignore-revs,Mofei Zhang,2024-01-18T23:29:17Z
b3003047101b4c7a643788a8faf576f7e370fb45,"Update error decoder URL (#27240)

Updates the error decoder to the URL for the new docs site.

- Switches the domain from reactjs.org to react.dev
- Switches to put the error code in the URL for SSG
- All params are still in the query

Example without args:

- Before: `https://reactjs.org/docs/error-decoder.html?invariant=200`
- After: ` https://react.dev/errors/200`

Example with args:
- Before:
`https://reactjs.org/docs/error-decoder.html?invariant=124?args[]=foo&args[]=bar
`
- After: ` https://react.dev/errors/124?args[]=foo&args[]=bar`


Requires: https://github.com/reactjs/react.dev/pull/6214

---------

Co-authored-by: Jan Kassens <jkassens@meta.com>",Ricky,2024-01-18T02:41:07Z
5c607369ceebe56d85175df84b7b6ad58dd25e1f,"Remove client caching from cache() API (#27977)

We haven't yet decided how we want `cache` to work on the client. The
lifetime of the cache is more complex than on the server, where it only
has to live as long as a single request.

Since it's more important to ship this on the server, we're removing the
existing behavior from the client for now. On the client (i.e. not a
Server Components environment) `cache` will have not have any caching
behavior. `cache(fn)` will return the function as-is.

We intend to implement client caching in a future major release. In the
meantime, it's only exposed as an API so that Shared Components can use
per-request caching on the server without breaking on the client.",Andrew Clark,2024-01-17T01:27:15Z
f16344ea6db5bcc108de80dbc39a41ec28e8210d,"Refactor React Server entrypoint to not depend on the client one (#27940)

This refactors the Server Components entrypoint for the `react` package
(ReactServer.js) so that it doesn't depend on the client entrypoint
(React.js). I also renamed React.js to ReactClient.js to make the
separation clearer.

This structure will make it easier to add client-only and server-only
features.",Andrew Clark,2024-01-17T01:19:01Z
5d1b15a4f06fa93e76cd89f37ea5bfd62cc66183,"Rename ""shared subset"" to ""server"" (#27939)

The internal file ReactSharedSubset is what the `react` module resolves
to when imported from a Server Component environment. We gave it this
name because, originally, the idea was that Server Components can access
a subset of the APIs available on the client.

However, since then, we've also added APIs that can _only_ by accessed
on the server and not the client. In other words, it's no longer a
subset, it's a slightly different overlapping set.

So this commit renames ReactSharedSubet to ReactServer and updates all
the references. This does not affect the public API, only our internal
implementation.",Andrew Clark,2024-01-17T00:58:11Z
da7c466f07f2d13d7bd760a982e448ed449e72df,"Rename eslint-plugin-react-forget to eslint-plugin-react-compiler 

Rename eslint-plugin-react-forget to eslint-plugin-react-compiler",Jan Kassens,2024-01-16T22:36:37Z
9b6605d313bad279722ac8ef7ed0e03bb16d111e,"Remove [ReactForget] prefix from eslint messages 

Remove [ReactForget] prefix from eslint messages 

No other lint warnings have a prefix, removing this is cleaner.",Jan Kassens,2024-01-16T18:47:20Z
fb0cf4f83307ff7d4da06f6ce0c90d4ef45bdc37,"Make collapsed playground tabs more compact 

Make collapsed playground tabs more compact 

We have a lot of steps creating a lot of tabs by now. This makes them visually a 
lot more compact without a full redesign. 

Makes it a bit harder to read and less modern looking, but I think usability was 
a bit bad with the wide tabs. 

**Before:** 


![image](https://github.com/facebook/react-forget/assets/11849/a87c8f7e-d60c-43c1-aaea-1a1f77e082d0) 

**After:** 


![image](https://github.com/facebook/react-forget/assets/11849/227ebf1e-055f-439a-bfc9-e69bae091f6a)",Jan Kassens,2024-01-16T18:10:32Z
38d34239705ca20b693bd549e16e0673a9f9be97,Treat function expression deps as conditional,Sathya Gunasekaran,2024-01-15T12:44:22Z
121e72a342839383abfa750a8e9e29ce722a9a59,Add flag for treating function deps as conditional,Sathya Gunasekaran,2024-01-15T12:44:22Z
6d133111a9a71363daff068f2f9408a704b5cbfb,"Add test for function deps not treated as conditional 

In the test, unconditionally reading props.bar.length will throw when props.bar 
is null.",Sathya Gunasekaran,2024-01-15T12:44:22Z
25ec9fcea453dd53c518bc9d6ca4f9e0e1a81747,"Add .git-blame-ignore-revs 

Ignore commits that just change formatting and file structures",Sathya Gunasekaran,2024-01-15T12:44:22Z
60a927d04ad3888facebcdf7da620aa1cfc9528f,"Fix: useOptimistic should return passthrough value when there are no updates pending (#27936)

This fixes a bug that happened when the canonical value passed to
useOptimistic without an accompanying call to setOptimistic. In this
scenario, useOptimistic should pass through the new canonical value.

I had written tests for the more complicated scenario, where a new value
is passed while there are still pending optimistic updates, but not this
simpler one.",Andrew Clark,2024-01-14T02:37:35Z
33068c9db9153a479bb29d138397cb9c32fabfdd,"Upgrade ReactDOMShorthandCSSPropertyCollision-test to createRoot (#27924)

Upgrade ReactDOMShorthandCSSPropertyCollision-test to createRoot

Using the codemod from #27921 as a starting point, this migrates the
test to `createRoot`.",Jan Kassens,2024-01-12T20:51:31Z
90348cc8739da51bf3a3358efa784321e52966c2,"[housekeeping] Remove disabled test262 setup 

I sincerely appreciate the effort to get test262 up and running. This was my 
idea, it seemed like a really good way to test our correctness on edge cases of 
JS. Unfortunately test262 relies heavily on a few specific features that we 
don't support, like classes and `var`, which has meant that we never actually 
use this as a test suite. 

In the meantime we've created a pretty extensive test suite and have tools like 
Sprout to test actual memoization behavior at runtime, which is the right place 
to invest our energy. Let's remove?",Joe Savona,2024-01-12T20:26:30Z
bcbbbec1f58eeb714ded2b6d824344490b323fb0,"[housekeeping] Remove unused test fixtures 

We don't use these fixtures, let's just clean them up.",Joe Savona,2024-01-12T20:22:23Z
33118be83592961ef4c07b4b7fc043c44ba47b71,"[housekeeping] Remove fixtures/ 

Do we still use these? I'm happy to close this PR if we still want this but it 
feels like these may have served their purpose and no longer be necessary.",Joe Savona,2024-01-12T20:22:19Z
653373141a36a120a1c09391e0e6d3d81be5750c,Extra fixture for validating preserved memoization of non-escaping callbacks,Joe Savona,2024-01-12T22:32:35Z
0c866672b07ae47d8d6f80d1aac9029e5ae73d90,"Fix false positive on preserving memo of non-escaping values 

Fixes the false positive in the previous PR. When we prune a scope because it's 
values are non-escaping, we now also remove any `Memoize` instructions for that 
scope. The intuition being that we're actively removing unnecessary memoization, 
so we don't need to check that the memoization occurred anymore.",Joe Savona,2024-01-12T01:13:41Z
8e4d2fb69d690695db0a33001fb1aee586bde15f,"Repro for false positive in validatePreserveMemoization on non-escaping value 

This demonstrates a false positive in validatePreserveExistingManualMemoization. 
We prune memoization of non-escaping values, but the validation pass just sees 
that the value ""should"" have a scope and that scope doesn't exist, and thinks we 
failed to preserve memoization.",Joe Savona,2024-01-12T00:52:57Z
c3a947643fae3fbbbda42a676c1b89dfd5d21945,"Update hoisting error message to allow error aggregation 

Interpolating values into the `reason` field of an error breaks our error 
aggregation. This PR moves the offending function name into the `description` 
field which isn't used for aggregation.",Joe Savona,2024-01-11T23:54:55Z
f6f042d747be336e272c6b0d205fb15b6e7de8f6,"Switch test262 submodule to https url 

I had trouble checking out the repo using Sapling because the submodule couldn't 
clone properly. I got 

> Error: Permission denied (publickey) 

In my branch I tested that the https URL format seems to work okay with Sapling.",Jan Kassens,2024-01-12T20:07:24Z
8a634bc1c0a3658a23f50662d1c0225ae6212720,"Add frozen reason for props and hook arguments 

Add frozen reason for props and hook arguments 

Improves the error message when mutating props or hook arguments. 

Previously, this would print a generic error about mutating global variables.",Jan Kassens,2024-01-12T19:51:59Z
0ac3ea471fbcb7d79bc7d36179e960c72c779e76,"Use getComponentNameFromType for debug info for the key warning (#27930)

If this is a client reference we shouldn't dot into it, which would
throw in the proxy.

Interestingly our client references don't really have a `name`
associated with them for debug information so a component type doesn't
show up in error logs even though it seems like it should.",Sebastian Markbåge,2024-01-11T22:24:26Z
6639ed3b3a44f7736beb629144a7996145008f09,"refactor[isChildPublicInstance]: don't leak ReactNativeFiberHostComponent to Fabric implementation (#27923)

While inspecting the build artifacts for Fabric in
https://www.internalfb.com/diff/D51816108, I've noticed it has some
leaking implementation details from Paper, such as
`ReactNativeFiberHostComponent`.

The reason for it is the single implementation of
`isChildPublicInstance` in `ReactNativePublicCompat`, in which we were
using `instanceof ReactNativeFiberHostComponent`.

This new implementation removes the `ReactNativeFiberHostComponent`
leak, but decreases the Flow coverage.",Ruslan Lesiutin,2024-01-11T14:26:39Z
c80f0f022c135704e955d36516bf81d071f40ba6,"useContext returns frozen values 

This was an oversight in the original definition of useContext (oops my bad). 
Context values are owned by React and should not be modified. I found this 
because some cases of existing useMemo were not preserved (tested via the 
validatePreserveExistingManualMemo flag) due to function calls referencing 
context being assumed to mutate. 

This change will allow more memoization, it's also just more correct for the 
rules of React. Note the new ValueReason variant so that we can provide a 
precise error message about mutating context values.",Joe Savona,2024-01-11T00:12:17Z
49439b4db858b2cfc17a601ae087d392479121da,"Upgrade Flow to 0.216.0 (#27922)

Upgrade Flow to 0.216.0

```
yarn add -W flow-bin flow-remove-types hermes-parser hermes-eslint
```",Jan Kassens,2024-01-10T18:43:04Z
08cd087cada28bf05165b87b6e31a97c6ac598b4,"Convert ReactPureComponent-test to createRoot (#27917)

Convert ReactPureComponent-test to createRoot",Jan Kassens,2024-01-10T15:17:15Z
2594caa09e0aca49493cd62659c1e3d1d3488a7e,"Convert ReactComponentLifeCycle-test to createRoot (#27916)

Convert ReactComponentLifeCycle-test to createRoot",Jan Kassens,2024-01-10T15:16:51Z
344a6675a9974d9e7b14542dd4e8bddb81a235e5,"Convert ReactElement-test to createRoot (#27918)

Convert ReactElement-test to createRoot",Jan Kassens,2024-01-10T15:16:38Z
c81f4e02bab9d03e1583047d041fdb5e4eb19415,"re-add dynamic feature flags for isInputPending (#27919)

## Summary

these were removed in https://github.com/facebook/react/pull/26617. adds
them back so we can conduct another experiment.

## How did you test this change?
`yarn test-www`",Noah Lemen,2024-01-09T22:20:42Z
9723093df319f06886fe488d6d88ff615a3e8fc3,"Convert createReactClassIntegration-test to createRoot (#27914)

Convert createReactClassIntegration-test to createRoot",Jan Kassens,2024-01-09T20:30:56Z
ef2859d50bb6b4b31b304f4fe4bb43dc273a9b54,"Convert DOMPropertyOperations-test to createRoot (#27911)

Convert DOMPropertyOperations-test to createRoot

---
[//]: # (BEGIN SAPLING FOOTER)
Stack created with [Sapling](https://sapling-scm.com). Best reviewed
with [ReviewStack](https://reviewstack.dev/facebook/react/pull/27911).
* #27914
* __->__ #27911",Jan Kassens,2024-01-09T20:30:27Z
9c08b96a788196e6ed42c9e6c934b0296a8bcd99,"Bump follow-redirects from 1.7.0 to 1.15.4 (#27909)

Bumps
[follow-redirects](https://github.com/follow-redirects/follow-redirects)
from 1.7.0 to 1.15.4.
<details>
<summary>Commits</summary>
<ul>
<li><a
href=""https://github.com/follow-redirects/follow-redirects/commit/65858205e59f1e23c9bf173348a7a7cbb8ac47f5""><code>6585820</code></a>
Release version 1.15.4 of the npm package.</li>
<li><a
href=""https://github.com/follow-redirects/follow-redirects/commit/7a6567e16dfa9ad18a70bfe91784c28653fbf19d""><code>7a6567e</code></a>
Disallow bracketed hostnames.</li>
<li><a
href=""https://github.com/follow-redirects/follow-redirects/commit/05629af696588b90d64e738bc2e809a97a5f92fc""><code>05629af</code></a>
Prefer native URL instead of deprecated url.parse.</li>
<li><a
href=""https://github.com/follow-redirects/follow-redirects/commit/1cba8e85fa73f563a439fe460cf028688e4358df""><code>1cba8e8</code></a>
Prefer native URL instead of legacy url.resolve.</li>
<li><a
href=""https://github.com/follow-redirects/follow-redirects/commit/72bc2a4229bc18dc9fbd57c60579713e6264cb92""><code>72bc2a4</code></a>
Simplify _processResponse error handling.</li>
<li><a
href=""https://github.com/follow-redirects/follow-redirects/commit/3d42aecdca39b144a0a2f27ea134b4cf67dd796a""><code>3d42aec</code></a>
Add bracket tests.</li>
<li><a
href=""https://github.com/follow-redirects/follow-redirects/commit/bcbb096b32686ecad6cd34235358ed6f2217d4f0""><code>bcbb096</code></a>
Do not directly set Error properties.</li>
<li><a
href=""https://github.com/follow-redirects/follow-redirects/commit/192dbe7ce671ecad813c074bffe3b3f5d3680fee""><code>192dbe7</code></a>
Release version 1.15.3 of the npm package.</li>
<li><a
href=""https://github.com/follow-redirects/follow-redirects/commit/bd8c81e4f32d12f28a35d265f88b1716703687c6""><code>bd8c81e</code></a>
Fix resource leak on destroy.</li>
<li><a
href=""https://github.com/follow-redirects/follow-redirects/commit/9c728c314b06f9595dcd7f245d40731e8a27d79f""><code>9c728c3</code></a>
Split linting and testing.</li>
<li>Additional commits viewable in <a
href=""https://github.com/follow-redirects/follow-redirects/compare/v1.7.0...v1.15.4"">compare
view</a></li>
</ul>
</details>
<br />


[![Dependabot compatibility
score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=follow-redirects&package-manager=npm_and_yarn&previous-version=1.7.0&new-version=1.15.4)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)

Dependabot will resolve any conflicts with this PR as long as you don't
alter it yourself. You can also trigger a rebase manually by commenting
`@dependabot rebase`.

[//]: # (dependabot-automerge-start)
[//]: # (dependabot-automerge-end)

---

<details>
<summary>Dependabot commands and options</summary>
<br />

You can trigger Dependabot actions by commenting on this PR:
- `@dependabot rebase` will rebase this PR
- `@dependabot recreate` will recreate this PR, overwriting any edits
that have been made to it
- `@dependabot merge` will merge this PR after your CI passes on it
- `@dependabot squash and merge` will squash and merge this PR after
your CI passes on it
- `@dependabot cancel merge` will cancel a previously requested merge
and block automerging
- `@dependabot reopen` will reopen this PR if it is closed
- `@dependabot close` will close this PR and stop Dependabot recreating
it. You can achieve the same result by closing it manually
- `@dependabot show <dependency name> ignore conditions` will show all
of the ignore conditions of the specified dependency
- `@dependabot ignore this major version` will close this PR and stop
Dependabot creating any more for this major version (unless you reopen
the PR or upgrade to it yourself)
- `@dependabot ignore this minor version` will close this PR and stop
Dependabot creating any more for this minor version (unless you reopen
the PR or upgrade to it yourself)
- `@dependabot ignore this dependency` will close this PR and stop
Dependabot creating any more for this dependency (unless you reopen the
PR or upgrade to it yourself)
You can disable automated security fix PRs for this repo from the
[Security Alerts
page](https://github.com/facebook/react/network/alerts).

</details>

Signed-off-by: dependabot[bot] <support@github.com>
Co-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>",dependabot[bot],2024-01-09T17:05:06Z
31603f19d7114b751e89846d6eec73a8fbcdae71,"Bump follow-redirects from 1.14.0 to 1.15.4 in /fixtures/concurrent/time-slicing (#27907)

Bumps
[follow-redirects](https://github.com/follow-redirects/follow-redirects)
from 1.14.0 to 1.15.4.
<details>
<summary>Commits</summary>
<ul>
<li><a
href=""https://github.com/follow-redirects/follow-redirects/commit/65858205e59f1e23c9bf173348a7a7cbb8ac47f5""><code>6585820</code></a>
Release version 1.15.4 of the npm package.</li>
<li><a
href=""https://github.com/follow-redirects/follow-redirects/commit/7a6567e16dfa9ad18a70bfe91784c28653fbf19d""><code>7a6567e</code></a>
Disallow bracketed hostnames.</li>
<li><a
href=""https://github.com/follow-redirects/follow-redirects/commit/05629af696588b90d64e738bc2e809a97a5f92fc""><code>05629af</code></a>
Prefer native URL instead of deprecated url.parse.</li>
<li><a
href=""https://github.com/follow-redirects/follow-redirects/commit/1cba8e85fa73f563a439fe460cf028688e4358df""><code>1cba8e8</code></a>
Prefer native URL instead of legacy url.resolve.</li>
<li><a
href=""https://github.com/follow-redirects/follow-redirects/commit/72bc2a4229bc18dc9fbd57c60579713e6264cb92""><code>72bc2a4</code></a>
Simplify _processResponse error handling.</li>
<li><a
href=""https://github.com/follow-redirects/follow-redirects/commit/3d42aecdca39b144a0a2f27ea134b4cf67dd796a""><code>3d42aec</code></a>
Add bracket tests.</li>
<li><a
href=""https://github.com/follow-redirects/follow-redirects/commit/bcbb096b32686ecad6cd34235358ed6f2217d4f0""><code>bcbb096</code></a>
Do not directly set Error properties.</li>
<li><a
href=""https://github.com/follow-redirects/follow-redirects/commit/192dbe7ce671ecad813c074bffe3b3f5d3680fee""><code>192dbe7</code></a>
Release version 1.15.3 of the npm package.</li>
<li><a
href=""https://github.com/follow-redirects/follow-redirects/commit/bd8c81e4f32d12f28a35d265f88b1716703687c6""><code>bd8c81e</code></a>
Fix resource leak on destroy.</li>
<li><a
href=""https://github.com/follow-redirects/follow-redirects/commit/9c728c314b06f9595dcd7f245d40731e8a27d79f""><code>9c728c3</code></a>
Split linting and testing.</li>
<li>Additional commits viewable in <a
href=""https://github.com/follow-redirects/follow-redirects/compare/v1.14.0...v1.15.4"">compare
view</a></li>
</ul>
</details>
<br />


[![Dependabot compatibility
score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=follow-redirects&package-manager=npm_and_yarn&previous-version=1.14.0&new-version=1.15.4)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)

Dependabot will resolve any conflicts with this PR as long as you don't
alter it yourself. You can also trigger a rebase manually by commenting
`@dependabot rebase`.

[//]: # (dependabot-automerge-start)
[//]: # (dependabot-automerge-end)

---

<details>
<summary>Dependabot commands and options</summary>
<br />

You can trigger Dependabot actions by commenting on this PR:
- `@dependabot rebase` will rebase this PR
- `@dependabot recreate` will recreate this PR, overwriting any edits
that have been made to it
- `@dependabot merge` will merge this PR after your CI passes on it
- `@dependabot squash and merge` will squash and merge this PR after
your CI passes on it
- `@dependabot cancel merge` will cancel a previously requested merge
and block automerging
- `@dependabot reopen` will reopen this PR if it is closed
- `@dependabot close` will close this PR and stop Dependabot recreating
it. You can achieve the same result by closing it manually
- `@dependabot show <dependency name> ignore conditions` will show all
of the ignore conditions of the specified dependency
- `@dependabot ignore this major version` will close this PR and stop
Dependabot creating any more for this major version (unless you reopen
the PR or upgrade to it yourself)
- `@dependabot ignore this minor version` will close this PR and stop
Dependabot creating any more for this minor version (unless you reopen
the PR or upgrade to it yourself)
- `@dependabot ignore this dependency` will close this PR and stop
Dependabot creating any more for this dependency (unless you reopen the
PR or upgrade to it yourself)
You can disable automated security fix PRs for this repo from the
[Security Alerts
page](https://github.com/facebook/react/network/alerts).

</details>

Signed-off-by: dependabot[bot] <support@github.com>
Co-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>",dependabot[bot],2024-01-09T16:05:08Z
531c7ad21e8d48badab910deda6154e3d3977d91,"Bump follow-redirects from 1.13.3 to 1.15.4 in /fixtures/ssr (#27906)

Bumps
[follow-redirects](https://github.com/follow-redirects/follow-redirects)
from 1.13.3 to 1.15.4.
<details>
<summary>Commits</summary>
<ul>
<li><a
href=""https://github.com/follow-redirects/follow-redirects/commit/65858205e59f1e23c9bf173348a7a7cbb8ac47f5""><code>6585820</code></a>
Release version 1.15.4 of the npm package.</li>
<li><a
href=""https://github.com/follow-redirects/follow-redirects/commit/7a6567e16dfa9ad18a70bfe91784c28653fbf19d""><code>7a6567e</code></a>
Disallow bracketed hostnames.</li>
<li><a
href=""https://github.com/follow-redirects/follow-redirects/commit/05629af696588b90d64e738bc2e809a97a5f92fc""><code>05629af</code></a>
Prefer native URL instead of deprecated url.parse.</li>
<li><a
href=""https://github.com/follow-redirects/follow-redirects/commit/1cba8e85fa73f563a439fe460cf028688e4358df""><code>1cba8e8</code></a>
Prefer native URL instead of legacy url.resolve.</li>
<li><a
href=""https://github.com/follow-redirects/follow-redirects/commit/72bc2a4229bc18dc9fbd57c60579713e6264cb92""><code>72bc2a4</code></a>
Simplify _processResponse error handling.</li>
<li><a
href=""https://github.com/follow-redirects/follow-redirects/commit/3d42aecdca39b144a0a2f27ea134b4cf67dd796a""><code>3d42aec</code></a>
Add bracket tests.</li>
<li><a
href=""https://github.com/follow-redirects/follow-redirects/commit/bcbb096b32686ecad6cd34235358ed6f2217d4f0""><code>bcbb096</code></a>
Do not directly set Error properties.</li>
<li><a
href=""https://github.com/follow-redirects/follow-redirects/commit/192dbe7ce671ecad813c074bffe3b3f5d3680fee""><code>192dbe7</code></a>
Release version 1.15.3 of the npm package.</li>
<li><a
href=""https://github.com/follow-redirects/follow-redirects/commit/bd8c81e4f32d12f28a35d265f88b1716703687c6""><code>bd8c81e</code></a>
Fix resource leak on destroy.</li>
<li><a
href=""https://github.com/follow-redirects/follow-redirects/commit/9c728c314b06f9595dcd7f245d40731e8a27d79f""><code>9c728c3</code></a>
Split linting and testing.</li>
<li>Additional commits viewable in <a
href=""https://github.com/follow-redirects/follow-redirects/compare/v1.13.3...v1.15.4"">compare
view</a></li>
</ul>
</details>
<br />


[![Dependabot compatibility
score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=follow-redirects&package-manager=npm_and_yarn&previous-version=1.13.3&new-version=1.15.4)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)

Dependabot will resolve any conflicts with this PR as long as you don't
alter it yourself. You can also trigger a rebase manually by commenting
`@dependabot rebase`.

[//]: # (dependabot-automerge-start)
[//]: # (dependabot-automerge-end)

---

<details>
<summary>Dependabot commands and options</summary>
<br />

You can trigger Dependabot actions by commenting on this PR:
- `@dependabot rebase` will rebase this PR
- `@dependabot recreate` will recreate this PR, overwriting any edits
that have been made to it
- `@dependabot merge` will merge this PR after your CI passes on it
- `@dependabot squash and merge` will squash and merge this PR after
your CI passes on it
- `@dependabot cancel merge` will cancel a previously requested merge
and block automerging
- `@dependabot reopen` will reopen this PR if it is closed
- `@dependabot close` will close this PR and stop Dependabot recreating
it. You can achieve the same result by closing it manually
- `@dependabot show <dependency name> ignore conditions` will show all
of the ignore conditions of the specified dependency
- `@dependabot ignore this major version` will close this PR and stop
Dependabot creating any more for this major version (unless you reopen
the PR or upgrade to it yourself)
- `@dependabot ignore this minor version` will close this PR and stop
Dependabot creating any more for this minor version (unless you reopen
the PR or upgrade to it yourself)
- `@dependabot ignore this dependency` will close this PR and stop
Dependabot creating any more for this dependency (unless you reopen the
PR or upgrade to it yourself)
You can disable automated security fix PRs for this repo from the
[Security Alerts
page](https://github.com/facebook/react/network/alerts).

</details>

Signed-off-by: dependabot[bot] <support@github.com>
Co-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>",dependabot[bot],2024-01-09T16:04:58Z
f9dddcbbb1c0b73f974e78b9488927b778630682,"[Fizz] Fix Client Render after Postpone (#27905)

If we end up client rendering a boundary due to an error after we have
already injected a postponed hole in that boundary we'll end up trying
to target a missing segment. Since we never insert segments for an
already errored boundary into the HTML. Normally an errored prerender
wouldn't be used but if it is, such as if it was an intentional client
error it triggers this case. Those should really be replaced with
postpones though.

This is a bit annoying since we eagerly build up the postponed path. I
took the easy route here and just cleared out the suspense boundary
itself from having any postponed slots. However, this still creates an
unnecessary replay path along the way to the boundary. We could probably
walk the path and remove any empty parent nodes.

What is worse is that if this is the only thing that postponed, we'd
still generate a postponed state even though there's actually nothing to
resume. Since this is a bit of an edge case already maybe it's fine.

In my test I added a check for the `error` event on `window` since this
error only surfaces by throwing an ignored error. We should really do
that globally for all tests. Our tests should fail by default if there's
an error logged to the window.",Sebastian Markbåge,2024-01-09T04:52:33Z
f1039be4a48384e7e4b0a87d4d92c48e900053b9,"Fix: useDeferredValue initialValue suspends forever without switching to final (#27888)

Fixes a bug in the experimental `initialValue` option for
`useDeferredValue` (added in #27500).

If rendering the `initialValue` causes the tree to suspend, React should
skip it and switch to rendering the final value instead. It should not
wait for `initialValue` to resolve.

This is not just an optimization, because in some cases the initial
value may _never_ resolve — intentionally. For example, if the
application does not provide an instant fallback state. This capability
is, in fact, the primary motivation for the `initialValue` API.

I mostly implemented this correctly in the original PR, but I missed
some cases where it wasn't working:

- If there's no Suspense boundary between the `useDeferredValue` hook
and the component that suspends, and we're not in the shell of the
transition (i.e. there's a parent Suspense boundary wrapping the
`useDeferredValue` hook), the deferred task would get incorrectly
dropped.
- Similarly, if there's no Suspense boundary between the
`useDeferredValue` hook and the component that suspends, and we're
rendering a synchronous update, the deferred task would get incorrectly
dropped.

What these cases have in common is that it causes the `useDeferredValue`
hook itself to be replaced by a Suspense fallback. The fix was the same
for both. (It already worked in cases where there's no Suspense fallback
at all, because those are handled differently, at the root.)

The way I discovered this was when investigating a particular bug in
Next.js that would happen during a 'popstate' transition (back/forward),
but not during a regular navigation. That's because we render popstate
transitions synchronously to preserve browser's scroll position — which
in this case triggered the second scenario above.",Andrew Clark,2024-01-08T04:17:20Z
7ca3b004aee982ee637dc06ccb5fe890c9f6e5ba,"Early branch with new type inference foundation

It's starting to get complex just with a couple of extra
passes — we either need to substantially extend the HIR or (as i've done so far)
pass information from early passes to later ones. This PR changes things so that
very early in the babel plugin we fork into a separate mode. Forest has
its own `compileProgram()` equivalent, its own pipeline, its own codegen, etc.",Joe Savona,2024-01-03T18:47:47Z
bd37fbe06acca8e11a00ea48752fb5e86146f42f,"[wip] Fix phi inference, expose InferMutableRange issue 

> Update: this is now passing all tests. The approach is likely wrong, and even 
if it's fine it needs some cleanup. Putting up for review as folks (esp 
@gsathya) have time. 

## Background 

InferTypes was intended to infer types for phi identifiers, but by accident we 
ended up storing the inferred type on `phi.type` instead of `phi.id.type`, which 
is the type that usages of the phi will reference. Because of this, we weren't 
actually inferring types for several cases, for example if both if/else branches 
assign `x` to an array literal, we'd ideally like the corresponding phi id to be 
typed as a BuiltInArray: 

```javascript 

let x; 

let y = { ... }; 

if (cond) { 

x = []; 

} else { 

x = []; 

} 

// x should be BuiltnArray here. We inferred that on Phi.type but the x here 
wouldn't get that type previously 

x.push(y); 

``` 

## Circular Types 

I started by removing the `Phi.type` property and updating inference to store 
the result of phi unification on `phi.id.type` — but this revealed other issues. 

First was this can create circular types when there are loops. The solution is 
to basically allow circular types _for phis only_, and when we detect them we 
remove the cycle. Basically whenever we have a situation where we have some type 
variable X, and a type Y that is a (nested) phi type one of whose transitive 
operands contains X, we remove X from the transitive type and attempt to 
collapse the phi type upwards if all of its remaining operands are the same: 

``` 

X=Type(1) 

Y=Phi [ 

Type(2), 

Type(3) = Phi [ 

Type(1), // <-- cycle but we can prune this 

Type(2), 

Type(2), 

] 

] 

=> 

X=Type(1) 

Y=Phi [ 

Type(2), 

Type(3) = Phi [ // all remaining operands are the same, we can prune this 

Type(2), 

Type(2), 

] 

] 

=> 

X=Type(1) 

Y=Phi [ // all remaining operands are the same, we can prune this 

Type(2), 

Type(2), 

] 

=> 

X=Type(1) 

Y=Type(2) 

``` 

We have to do this not just doing unify(), but also in `get()` since there are 
cases where we don't know yet which type variables we can remove from a phi. 
Without also doing the pruning in get, we get an infinite loop. 

## Reactive Scope Alignment 

The above fixed the circular types, but exposed some new cases that can occur in 
terms of mutable ranges and ast structures: it wasn't possible before to have a 
Store on a phi node in practice, since that relied on type information which we 
didn't have for phis. 

The new validation that all instructions for a scope are part of that scope 
caught a couple issues, which were basically like this: 

``` 

[1] Sequence 

... 

[9] StoreLocal x@0[9:28] 

[10] ... 

``` 

Note that scope 0 starts at instruction 9, but that instruction is not at the 
block scope level. The first instruction at the block scope level that is within 
the range of scope 0 is instruction 10, which is after the scope should have 
started! So I also had to update AlignScopesToBlockScopes to handle the case of 
logical, conditional, and sequence expressions: we sometime need to adjust a 
scope start earlier in case they contain instructions that should start a scope.",Joe Savona,2024-01-02T23:31:57Z
1d5667a1273386f84e416059af7b6aba069e068e,"[churn] remove Node 19 from dev engines, add 21 (#27870)

This allows running `yarn` with Node 21 installed, also removes Node 19
which is no longer supported according to
https://nodejs.org/en/about/previous-releases",Jan Kassens,2024-01-02T19:39:25Z
45d61cf7effdba6bbd9835bb427c99c95beb7e17,"[flow] upgrade to 0.225.1 (#27871)

This Flow upgrade includes 2 fixes:
- Remove `React$StatelessFunctionalComponent` as that was replaced by
just `React$AbstractComponent` as Flow doesn't make any guarantees, see
the Flow change here:
https://github.com/facebook/flow/commit/521317c48f44ffb5eac072a7b2548a72b0745095
- Flow no longer allows `number` type indexing into objects which
discovered an incorrect type that is actually an array of the data.

Used this command to upgrade
```
yarn add -W flow-bin flow-remove-types hermes-parser hermes-eslint
```
and ran `yarn flow-ci` to check for errors in different configurations.",Jan Kassens,2024-01-02T19:39:14Z
bf859705b55a8ccaedbed8546cd4d9c6c003bf62,"Enable early return support by default 

This PR enables the new feature flag by default, but keeps the flag around so 
that we can quickly turn it off if there are issues.",Joe Savona,2023-12-20T21:52:43Z
fcc2182641b628cd6fcf46d2ea59c2cc05f7ddb8,"Handle scopes with only early return and no decls/deps/reassigns 

Fixes the case from the previous PR by using a different sentinel for 
uninitialized cache values and early returns. I confirmed with console.log that 
the reactive scope for `x` only evaluates on the first execution, after which we 
figure out that we don't need to execute it again.",Joe Savona,2023-12-20T21:52:42Z
a753a326ad77145e4d8eb6a44e40758d82869669,Fixture for only early return without decls/deps/reassigns,Joe Savona,2023-12-20T21:52:41Z
ad57e661f49f1a340a437a597bef2214c017eabb,"Sprout support for rendering multiple times w different props 

RFC. This is a quick sketch of adding support to Sprout to render the same 
component instance multiple times with different props. This doesn't test 
memoization (though it forms a basis for testing it, more below), but does allow 
us to test that the code properly reacts to inputs and doesn't get ""stuck"" 
always returning the same output even when inputs change. 

Possible extensions: 

- Support calling non-component functions multiple times 

- Test memoization by having the `toJSON()` helper track objects it has 
encountered before, assign each object a unique id, and then emit subsequent 
references to the same value as the id instead of the printed form of the 
object. 

For example if we call a memoized function with the same input twice in a row, 
today we might get output like: 

``` 

[{a: 1}], 

[{a: 1}], 

``` 

Which doesn't tell us if the object is equal. Instead we could emit output like: 

``` 

[{a: 1}] #0, 

#0, 

``` 

Which allows verifying that memoization actually happened. Or we could automate 
this and just assert that anything structurally equal has to be referentially 
equal — though there are cases with conditionals that break this.",Joe Savona,2023-12-20T21:52:41Z
a86d279c462938c78dd08de5b011fbe6e553546a,"Initial (flagged) support for reactive scopes with early return 

Adds support for early returns within reactive scopes, behind a new feature 
flag. The flag is off by default, where this case continues to throw a Todo 
bailout. 

Since implementing a sketch of the codegen in the previous PR I realized that 
it's easy enough to implement the more optimal output, so i've updated that 
here. Rather than both the if and else branch of the reactive scope having an 
""if the return value was not a sentinel return it"" check, we instead make the 
return temporary a proper declaration of the reactive scope. Then, since it's 
actually an output it's available in the outer block scope, and we could do a 
single if-return after the reactive scope. 

Edit: see comment below for thoughts on test cases.",Joe Savona,2023-12-20T21:52:40Z
3175056935ed76ea3790c6e956fedd354587ca5d,"Codegen for early returns in reactive scopes 

Implements codegen for reactive scopes with early returns, though we don't ever 
construct such a case yet. See comments in the code. There is a slightly more 
optimal output that would require a larger refactor (also described in code 
comments), for now i'm starting with the simpler approach since this is 
relatively rare so we don't need to optimize code size / runtime as much.",Joe Savona,2023-12-20T21:52:39Z
ed9d6a2ca163422efd703a85511774d196aebf1e,"Scaffolding for early return from reactive scopes 

Adds a new `earlyReturnValue` property on ReactiveScope which will be set if the 
scope had one or more early returns, with information about the temporary 
identifier that the early return value will be assigned to, as well as the label 
to be used for breaking (to simulate the early-return). The next PR shows the 
intended codegen.",Joe Savona,2023-12-20T21:52:38Z
4c68da2e60d2c5de46097eab914e6874806bf385,"Todo for early return within reactive scopes 

Adds a new compiler pass that will eventually actually handle early returns 
within reactive scopes. For now it just detects them and throws a Todo error.",Joe Savona,2023-12-20T21:52:37Z
c5b9375767e2c4102d7e5559d383523736f1c902,"[Fizz] Only compute component stacks in DEV and prerenders (#27850)

If you have a lot of intentional throws (or postpones) from client-only
rendering then computing the stack is too much.",Sebastian Markbåge,2023-12-19T23:04:11Z
cb2439624f43c510007f65aea5c50a8bb97917e4,"[RSC @ Meta] Simplify implementation of isClientReference, getClientReferenceKey, resolveClientReferenceMetadata (#27839)

For clientReferences we can just check the instance of the
`clientReference`.
The implementation of `isClientReference` is provided via configuration.
The class for ClientReference has to implement an interface that has
`getModuleId() method.",Andrey Lunyov,2023-12-19T14:17:40Z
f504eaa16ecbfc1000d9fc9fc007b2ec313f7dda,"Add back transitive freeze functions option 

Adds back a mode to transitively freeze function expressions, independently from 
the mode to preserve existing manual memoization. This lets us experiment with a 
few variants: 

* Preserve existing memoization 

* Validate existing memoization with: 

* `enableAssumeHooksFollowRulesOfReact` && 
`enableTransitivelyFreezeFunctionExpressions` 

* `enableAssumeHooksFollowRulesOfReact` only 

* neither of those flags 

Note that `enableTransitivelyFreezeFunctionExpressions` alone probably doesn't 
make sense, it's more aggressive than 

`enableAssumeHooksFollowRulesOfReact` so we might as well try them together.",Joe Savona,2023-12-18T23:33:02Z
3e00e58a6ac7f73a3660f31d3129fb06d344167e,"fix[devtools/e2e]: add fallback for act in integration tests (#27842)

https://github.com/facebook/react/pull/27805 broke integration tests for
React DevTools with React 17, these changes introduce a fallback for
such case when `act` is not available in `react`, but available in
`react-dom`, like before.",Ruslan Lesiutin,2023-12-17T13:17:45Z
8b1547b671f9ea9a2db38f2404557fb59b84afc0,docs: fix typo in README.md (#27841),Ondrysak,2023-12-16T23:37:42Z
8b8d265bd9a4cab7bbd04a9a13950fdc946ea51c,"[Flight] Wire up async_hooks in Node.js DEV for inspecting Promises (#27840)

This wires up the use of `async_hooks` in the Node build (as well as the
Edge build when a global is available) in DEV mode only. This will be
used to track debug info about what suspended during an RSC pass.

Enabled behind a flag for now.",Sebastian Markbåge,2023-12-16T02:38:01Z
63310df2b243b6c3b2f01e8b121e7d115e839cfb,"[Fizz] Add Component Stacks to `onError` and `onPostpone` when in dev mode or during prerenders in prod mode (#27761)

Historically React would produce component stacks for dev builds only.
There is a cost to tracking component stacks and given the prod builds
try to optimize runtime performance these stacks were left out. More
recently React added production component stacks to Fiber in because it
can be immensely helpful in tracking down hard to debug production
issues. Fizz was not updated to have a similar behavior.

With the advent of prerendering however stacks for production in Fizz
are more relevant because prerendering is not really a dev-time task. If
you want the ability to reason about errors or postpones that happen
during a prerender having component stacks to interrogate is helpful and
these component stacks need to be available in production otherwise you
are really never going to see them. (it is possible that you could do
dev-mode prerenders but we don't expect this to be a common dev mode
workflow)

To better support the prerender use case and to make error logging in
Fizz more useful the following changes have been made

1. `onPostpone` now accepts a second `postponeInfo` argument which will
contain a componentStack. Postpones always originate from a component
render so the stack should be consistently available. The type however
will indicate the stack is optional so we can remove them in the future
if we decide the overhead is the wrong tradeoff in certain cases
2. `onError` now accepts a second `errorInfo` argument which may contain
a componentStack. If an error originated from a component a stack will
be included in the following cases.

This change entails tracking the component hierarchy in prod builds now.
While this isn't cost free it is implemented in a relatively lean
manner. Deferring the most expensive work (reifying the stack) until we
are actually in an error pathway.

In the course of implementing this change a number of simplifications
were made to the code which should make the stack tracking more
resilient. We no longer use a module global to curry the stack up to
some handler. This was delicate because you needed to always reset it
properly. We now curry the stack on the task itself.

Another change made was to track the component stack on SuspenseBoundary
instances so that we can provide the stack when aborting suspense
boundaries to help you determine which ones were affected by an abort.",Josh Story,2023-12-16T02:06:35Z
c77acb3ac664a85d303f898220eb35dc8d2c0bca,"Separate mode to validate preserving manual memoization 

Adds a new mode which validates that existing manual memoization is preserved 
_without_ using information from the manual memoization to affect compilation. 
This gives us a way to try out the more aggressive version of Forget — ignoring 
manual memoization — first and see how much code bails out and what patterns 
cause this. 

We can then proceed to enable the mode to actually _preserve_ existing memo 
guarantees only where necessary.",Joe Savona,2023-12-16T01:12:06Z
3e79c386048c4fe569afb023d85b71ed2ffe5b8e,More useCallback with ref fixtures,Joe Savona,2023-12-16T00:59:19Z
af1aa8d0d31ffac773dd6d4081fcd64beac22919,"Validation that useMemo/useCallback is preserved in the output 

Extends `@enablePreserveExistingMemoization` to validate that all of the 
original values were actually memoized. This works nearly identically to how we 
validate effect deps are memoized. We look for Memoize instructions whose values 
need memoization but whose range extends past the memoize instruction, or where 
the value isn't memoized at all.",Joe Savona,2023-12-16T00:22:17Z
0b32173d0995ad581513ff5d226b010fd117395c,"More fixtures for useCallback with refs 

Extra fixture confirming that some usage of refs can break memoization, both in 
normal mode and in preserve-existing-memo mode.",Joe Savona,2023-12-16T00:22:13Z
721b6a4f91b883f353217f42e5d90f4e4efbf1da,[patch] Compile hooks with any number of args in infer mode,Sathya Gunasekaran,2023-12-18T13:35:56Z
c6200d1a2bdfaee1b91f9a6364e7eecc060d5989,"Fix comments, extend fixtures",Joe Savona,2023-12-15T23:19:41Z
6747d4e33c1ea25612f475be2153f666b55c2b93,"PreserveMemo for useCallback transitively freezes function exprs 

Merges `@enableTransitivelyFreezeFunctionExpressions` into the new 
`@enablePreserveExistingMemoizationGuarantees` mode, since they are both 
motivated by the same use case of preserving effect behavior by preserving 
existing memoization behavior. 

The idea is that `useCallback` has an implicit assumption: that the variables 
captured by the callback aren't subsequently modified. Previous PRs treated the 
values directly captured by the callback as frozen. But if those variables were 
themselves another function expression, and that expression captured a mutable 
value, then we wouldn't consider the freeze to be transitive: 

```javascript 

const object = makeObject(); 

useHook(); // oops, hook call inside `object`'s mutable range, can't memoize 
object, log, or onClick! 

const log = () => { console.log(object) }; 

const onClick = useCallback(() => { log() }); 

maybeMutate(object); 

``` 

However, the assumption of such code is that it _doesn't_ modify such 
transitively captured values. So here we merge 
`@enableTransitivelyFreezeFunctionExpressions` mode into the 
memoization-preserving mode. Now, the memoize instructions emitted for 
useCallback (and useMemo) will transitively freeze captured function 
expressions, allowing us to memoize. 

The flip side of this is that some code may be violating these rules. We'll rely 
on runtime validation to detect such cases.",Joe Savona,2023-12-15T23:19:40Z
08e92a3a8d3646138002322ab86b5d6fba9c162e,"More test cases for useCallback 

Adds test cases per the previous PR for useCallback: 

* callback that references another callback, which in turn references a 
possibly-mutated value 

* callback that references a ref",Joe Savona,2023-12-15T23:19:39Z
5bfd70ac6fd36983a9e5e532a81b9cf2c6f994a4,"Preserve memoization guarantees for useCallback 

Improves `@enablePreserveExistingMemoizationGuarantees` for the useCallback 
case. Similar to useMemo, we add an explicit `Memoize` instruction for the 
callback function itself _and_ for its dependencies. This means we'll assume the 
callback doesn't mutate any captured variables. 

TODO: check this with cases involving refs (should be allowed, but also not 
accidentally freeze the ref) and reassignment of locals (should be disallowed, 
though that might just be a validation we're missing today)",Joe Savona,2023-12-15T21:47:24Z
86e2edfa879f4cbd06a1f6bbaf0c8a6ab08cf59b,"Prune memoize instructions in codegen 

The previous PR introduced `memoize` instructions whose lvalues aren't used, but 
which can't be pruned by DCE due to pipeline ordering. Here we change to make 
memoize an instruction intended for its side effects only, and prune during 
codegen.",Joe Savona,2023-12-15T21:47:23Z
723b616c6778fa46fb817e2e4e000fdc7fd1b46d,"enablePreserveMemo treats memo deps as frozen 

See discussion on #2448 for full context. In the new 
`@enablePreserveExistingMemoizationGuarantees` mode, the goal is to preserve the 
existing referential equality guarantees from the original code. #2448 lays the 
groundwork by explicitly marking the _output_ of each useMemo block as memoized, 
hinting to the compiler that the value cannot subsequently change. This ensures 
the mutable range doesn't extend _later_, possibly overlapping a hook call and 
causing memoization to gett pruned. 

This PR fixes the other direction. There are cases where free variables 
referenced in the useMemo block could have been inferred as mutated, which could 
then extend the _start_ of the range earlier past a hook: 

```javascript 

const foo = createObject(); 

useBar(); 

const baz = useMemo(() => { 

const baz = createObject(); 

maybeMutate(foo, baz); 

return baz; 

}, [foo]); 

``` 

Here the compiler would infer that both `baz` and `foo` are mutable at the 
`maybeMutate()` call, grouping them in the same scope. But that scope would span 
the `useBar()` call, and be pruned, meaning that `baz` went unmemoized. 

However, useMemo blocks shouldn't be mutating free variables. Only variables 
newly created within the useMemo block should be mutable. So this PR extends the 
feature to treat all free variables referenced in a useMemo block as frozen as 
of the block itself.",Joe Savona,2023-12-15T21:47:22Z
ec27708024d134ee13fbd11bfe4043b4cdda148b,"[be] Remove unnecessary check for SetState type in analyzefunctions 

This was used as part of the previous ValidateNoSetStateInRender, but i rewrote 
that to not rely on the mutable range of function expressions.",Joe Savona,2023-12-15T21:47:21Z
2abd439b43679f77c2fb9ba2f38907fa37f953eb,"Option to preserve existing memoization guarantees 

Adds an option to preserve existing memoization guarantees for values produced 
with useMemo and useCallback. We still discard the calls to these hooks, but we 
preserve the information that the value is frozen at that point in the program. 
Because these values are produced solely within the useMemo/useCallback 
callback, their mutation cannot have any interspersed hook calls. This means 
that the values mutable range will never span a hook and end at the point of the 
useMemo, ensuring that they are memoized at the same point. 

The main things that can change (relative to the orignal code) are: 

* Forget will infer a precise set of dependencies, ignoring the user-provided 
values. In practice this should only occur if the original code had a lint 
violation, which Forget would bail out on. So in practice this shouldn't happen 
unless the code doesn't use the React linter. 

* Forget may start the memoization block earlier than the developer did if other 
values are mutated along with the value being produced. This can cause 
memoization to fail, but only in situations where it would have failed 
previously: 

```javascript 

const a = []; 

useFoo(); 

const b = useMemo(() => { 

const c = a; 

c.push(1); 

return c; 

}, [a]); 

``` 

In this example (sans Forget) the useMemo will invalidate on every render 
because `a` will always be a new array and its listed as a dependency of the 
useMemo. Forget would correctly determine that the memoization would have to 
work as follows: 

```javascript 

let c; 

if (...) { 

const a = [] 

useFoo(); // OOPS we made a hook call conditional 

const t0 = a; 

t0.push(1); 

c = t0; 

... 

} else { 

c = $[...] 

} 

``` 

Because this is invalid, Forget would (later in the pipeline) strip out this 
memoization block and (as with the original) leave `c` un-memoized. 

In this same example, removing the hook would cause Forget to be able to memoize 
a value that wasn't memoized before: 

```javascript 

const a = []; 

const b = useMemo(() => { 

const c = a; 

c.push(1); 

return c; 

}, [a]); 

``` 

This invalidates every render without Forget, but would memoize correctly with 
Forget (it would expand the memoization block to include the declaration of 
`a`).",Joe Savona,2023-12-15T21:47:20Z
fc3604301983d8adcd1b5c4b8dce4ece48d4f615,"Fixture for pruning unmemoized nonreactive deps 

Adds a fixture for our existing behavior that reactive scope dependencies 
exclude values which are non-reactive. The idea is that regardless of whether 
the value may actually get recreated over time or not, a ""nonreactive"" value 
cannot semantically change and therefore we can ignore changes in its pointer 
address.",Joe Savona,2023-12-14T20:05:25Z
873a286029b86a9696b4f4fae9e465e8ace6d44f,Convert value block terminal invariant to todo,Joe Savona,2023-12-13T00:52:24Z
a6e65e83e8b0fb8407509e994a85422a9d3f933d,"Prefer reporting conditional hook violations over ""hook as value"" violations 

After running the latest hook validation internally, I found some cases where 
there was a violation but the error message was not ideal. For example on this 
code: 

```javascript 

usePossiblyNullHook?.(); 

``` 

We reported a ""hooks can't be used as normal values"" violation, when we'd 
ideally report a ""hooks can't be called conditionally"" violation. The solution 
in this PR is to track errors by source location, and upgrade the former 
violation to the latter, more serious violation. See fixtures for examples.",Joe Savona,2023-12-13T00:42:51Z
afbaa8d3caf2bd2be72b5c5dbe2280808b4c4b20,Add a reason to ValueKind for better error messages (#2447),Jan Kassens,2023-12-15T15:20:14Z
06376b906d173ee03e49bbbb6277393b9015cf0a,"[patch] Generate hook guards as function expressions 

--- 

Arrow functions are not compatible with es3, which we sometimes target. This 
helps us make babel transform logic less complex",Mofei Zhang,2023-12-15T00:42:24Z
651d3448acb3afcd4e59bf9d27a43d69d60bd54d,"[vscode] update settings for v1.85 

See https://code.visualstudio.com/updates/v1_85#_code-actions-on-save-and-auto",Sathya Gunasekaran,2023-12-14T15:47:38Z
a3c48def1c39af88f789ae74e7f6cb760d171b84,"Add Babel plugin to annotate react components 

This can be used to figure out all the components in the bundle by grepping the 
bundle for the typeof check.",Sathya Gunasekaran,2023-12-14T15:52:17Z
201b46d947195376ffcf47337f8f2e13b009b0f9,"[eslint] Make the plugin configurable 

As part of this PR, we remove the custom defined logger and use the logger from 
the plugin options.",Sathya Gunasekaran,2023-12-14T15:37:41Z
12de013aa4b75dbe1251f816bcb16d0a2869f7bd,"[patch] ObjectMethods should have the same scope as their parent 
ObjectExpressions 

--- 

Currently, we're removing all reactive scopes containing object methods. This 
could produce incorrect output as object method instructions may still be 
included in other reactive scopes (and will lose their dependencies).",Mofei Zhang,2023-12-12T22:44:01Z
0966480d169efa261d4116162c9a1dda15e80c5f,[be] More tests for object methods,Mofei Zhang,2023-12-12T22:44:01Z
493610f299ddf7d06e147e60dc4f2b97482982d2,"[ci] remove fuzz tests from CircleCI (#27831)

These have been migrated to GitHub Actions with
c01ac689e9628c952761ba0583d6c00ba5521c6a.",Jan Kassens,2023-12-12T20:38:26Z
c01ac689e9628c952761ba0583d6c00ba5521c6a,"convert circleci worklfow fuzz_tests to github actions (#27801)

## Summary

This pull request converts the CircleCI workflows to GitHub actions
workflows. [Github Actions
Importer](https://github.com/github/gh-actions-importer) was used to
convert the workflows initially, then I edited them manually to correct
errors in translation.

## How did you test this change?

I tested these changes in a forked repo. You can [view the logs of this
workflow in my fork](https://github.com/robandpdx/react/actions).

https://fburl.com/workplace/f6mz6tmw",Rob Anderson,2023-12-12T19:55:43Z
4c2b89288f3613a66996ec50826cc3d448db1223,"[be][fixtures] Pass message directly instead of overwriting Error object 

--- 

Started getting crashes in watch mode from trying to overwrite `error.message` 
(invalid setter or frozen object). This should fix",Mofei Zhang,2023-12-12T03:59:33Z
bfa0aa2813a03ffc98dd8ec4b602bac77d6cde97,[be][test] use mutateAndReturn in test to render more values,Mofei Zhang,2023-12-12T03:59:33Z
a1c7a26fc62c4ef0fc2a5845eaba69b12ee8824c,Put type-annotation-based inference behind feature flag,Joe Savona,2023-12-11T19:34:29Z
12fbfc4fee2eba6d36250a04a0a7dd9a4eb3822a,"Use variable type annotations to drive inference 

Builds on the utilities added previously to infer types from type annotations on 
variable declarations. This is a limited form, where currently we only infer for 
local identifiers (not function parameters) and only infer a type for the 
variable initializer and not subsequent reassignments.",Joe Savona,2023-12-11T19:34:29Z
8b3898c164837ecc4d5d69a4e84ccb99375c31b0,"Use type assertions to drive inference 

This PR uses the information from type cast expressions (`as`  or `(variable: 
type)`)  to inform type inference. BuildHIR converts the type annotation to our 
internal type format where possible, falling back to the generic `makeType()`. 
This is then used in InferTypes to help set the value's type.",Joe Savona,2023-12-11T19:34:28Z
d163c0b7c3900db9f595c3dd95cee68517b4704a,"Support TS type annotations in TypeCastExpression instr 

Adds support for TSAsExpression in BuildHIR, which lowers to a 
TypeCastExpression, and to Codegen to reproduce the `as` expression.",Joe Savona,2023-12-11T19:34:28Z
59b32f0813fae57908029d4b3e2003e82a87a0f0,"🌲 Property/Computed load from props is a signal 

Extends the previous analysis to work for PropertyLoad and ComputedLoad, so that 
if the object is a prop we track the resulting value as a signal. We also 
disallow PropertyLoad/ComputedLoad outside of a reactive scope where the object 
is a signal (since that would drop reactivity).",Joe Savona,2023-12-11T19:34:27Z
3f4a9bd330a3500824cd223bd9a8984b60153eb9,"ReactiveFunctionTransform allows replacing values w transformValue 

Previously the only way to replace a value was to override transformInstruction 
and transformTerminal, and to be careful to find nested values. This PR adds 
`ReactiveFunctionTransform#transformValue()` which allows returning an optional 
new value, which if present will replace the value in whatever context it 
appeared. ReactiveFunctionTransform now reimplements all the methods necessary 
to replace any value anywhere in the AST. See the next PR for an example usage.",Joe Savona,2023-12-11T19:34:24Z
fa8f47eb4167cdafb3bba325f2f0a05ff280eca1,"InferReactivePlaces understands setState type 

I realized this while working on Forest. When computing the dependencies of a 
reactive scope we can omit setState functions in the general case (exception 
described below). Currently that's implemented in PruneNonReactiveDependencies. 
However, this causes us to miss some optimizations — a value isn't reactive if 
its only dependency is a setState, and that may allow further downstreams values 
to become non-reactive. We lose out on that by only filtering out setStates in 
PruneNonReactiveDependencies — this logic really belongs in InferReactivePlaces. 

So this PR moves the check for setState types to that pass. The updated fixtures 
show that this already uncovers some wins. The _new_ fixtures covers the 
exception. It's possible for a value to be typed as being a setState function, 
but to still be reactive: if its a local that is conditionally assigned 
different setState function values. Currently this test happens to work because 
our phi type inference is incomplete (see #2296). I'm adding the test now though 
to prevent regressions when we fix phi type inference.",Joe Savona,2023-12-11T19:34:24Z
9be2efdc57d84f8bb202c8e4c290ed76afbeb82a,"🌲 Create scopes for primitive operations 

In normal React certain operations don't allocate new objects (property loads, 
binary expressions, etc) and therefore don't need a reactive scope in Forget. 
For example, property loads only extract part of an existing value and don't 
allocate something new, while binary expressions are known to produce primitive 
values that don't allocate. We rely on the fact that whenever their inputs 
change we will re-run the component/hook and propagate the result forward. 

For Forest, the only way to propagate data is via reactive scopes: the component 
code is equivalent to a ""setup"" function. This PR updates some of our passes to 
ensure that we create (and don't prune) scopes for these types of operations. I 
started with a conservative set for now.",Joe Savona,2023-12-11T19:34:23Z
1debb59830c7873ac8455c54e43b2b534f4ab77a,"🌲 Remove reactive scope handling from codegen 

The previous PR converts reactive scopes to normal instructions, so that Forest 
mode won't have any scopes left by the time we reach codegen. This PR removes 
the now-unused codegen logic for forest.",Joe Savona,2023-12-11T19:34:22Z
b3391295c84dd9ccf38720d31ae9585aa6b735f6,"🌲 Separate pass for lowering reactive scopes 

For Forest, we previously converted reactive scopes into derived signals during 
Codegen. I'm moving this to a separate pass primarily to keep codegen simple 
since there's enough complexity just dealing with core JS semantics. Ideally 
we'd do a similar setup even for regular Forget, ie lower reactive scopes just 
prior to codegen. 

At the same time i also reordered the forget passes to be just before codegen, 
and cleaned things up a bit. For state lowering, we now just rewrite `useState` 
-> `createState`, because we actually need to keep around the setter function to 
trigger scheduling updates in addition to writing the signal value.",Joe Savona,2023-12-11T19:34:22Z
1b5ef83b783530ac7ccafea0208921080cd2f2d6,"🌲 Separate flag for jsx compilation 

Per discussion w @pieterv we'd like to have a mode where we compile JSX 
separately, so splitting this flag into two variants.",Joe Savona,2023-12-11T19:34:21Z
0cdfef19b96cc6202d48e0812b5069c286d12b04,"Add feature flags for expiration times (#27821)

It seems worthwhile to me to run a test to experiment with different
expiration times. This moves the expiration times for scheduler and
reconciler into FeatureFlags for the facebook build. Non-facebook should
not be affected by these changes.",Jan Kassens,2023-12-11T14:58:18Z
40f653d13c363c6f81b13de67ce391991fb1f870,"Remove WARNINGS file from FB (#27820)

The test was migrated to the generated JS file that allows Jest to track
the dependencies, we can now remove this file generation.",Jan Kassens,2023-12-08T21:21:15Z
5bcade5fcf5610e82e7cda05cc6de574bdace0c7,"[Flight] Support postponing through a serialized promise (#27818)

Postponing in a promise that is being serialized to the client from the
server should be possible however prior to this change Flight treated
this case like an error rather than a postpone. This fix adds support
for postponing in this position and adds a test asserting you can
successfully prerender the root if you unwrap this promise inside a
suspense boundary.",Josh Story,2023-12-08T19:05:32Z
8ff2c236a233a78c18d6f524dd74baec9153fd37,"Add header to ReactAllWarnings Meta-only file (#27819)

Adds missing headers to the generated file.",Jan Kassens,2023-12-08T18:44:20Z
d3ed07bce036df61fbce52151f1531a5762ba6d6,"[ci] try to fix commit_artifacts step (#27817)

Tries to fix the failure from
https://github.com/facebook/react/actions/runs/7142005723/job/19450371514

I think it failed because we cannot `mv` into a folder with existing
files or folders.",Jan Kassens,2023-12-08T17:38:35Z
f193213d29e7fabf68b21951c4b96701aeaecbf8,"Add a regression test for an infinite suspense + Fix (#27703)

Add a regression test for the [minimal
repro](https://codesandbox.io/s/react-18-suspense-state-never-resolving-bug-hmlny5?file=/src/App.js)
from @kassens

And includes the fix from @acdlite: 
> This is another place we special-case Retry lanes to opt them out of
expiration. The reason is we rely on time slicing to unwrap uncached
promises (i.e. async functions during render). Since that ability is
still experimental, and enableRetryLaneExpiration is Meta-only, we can
remove the special case when enableRetryLaneExpiration is on, for now.

---------

Co-authored-by: Andrew Clark <git@andrewclark.io>",Tianyu Yao,2023-12-08T17:21:36Z
a3aae7fb01ecf4ac12a8ba53abcf0403a4c7c3f8,"feat:-added tests for more coverage in reactDom-input and reactText-area (#27796)

Small test similar to few tests added in #27740 , the `reactDom-input`
error message was just modified to match the error message, and the
`reactDomTextarea-test.js` has tests added to ensure more coverage.",BIKI DAS,2023-12-08T13:34:09Z
af1fc87b54686d5e15204cd588e2227a92ae40ac,"[meta] copy ReactAllWarnings.js file (#27811)

I recently added generation of this file in #27786, which builds the
file in CircleCI, but missed actually copying it to the facebook build
on GitHub Actions.

This adds the later.",Jan Kassens,2023-12-07T22:08:52Z
9e267714dbcd410aecd7f188dd1051717bb9fe25,[patch] Compile hooks with any number of args in infer mode,Mofei Zhang,2023-12-07T21:14:25Z
b36ae8d7aab94dae285d9d6a1c5f004e6fc19fc9,"Add stable concurrent option to react-test-renderer (#27804)

## Summary

Concurrent rendering has been the default since React 18 release.
ReactTestRenderer requires passing `{unstable_isConcurrent: true}` to
match this behavior, which means by default tests written with RTR use a
different rendering method than the code they test.

Eventually, RTR should only use ConcurrentRoot. As a first step, let's
add a version of the concurrent option that isn't marked unstable. Next
we will follow up with removing the unstable option when it is safe to
merge.

## How did you test this change?

`yarn test
packages/react-test-renderer/src/__tests__/ReactTestRendererAsync-test.js`",Jack Pope,2023-12-07T15:26:33Z
be8aa76873e231555676483a36534bb48ad1b1a3,"Enable flag disableModulePatternComponents for native-fb (#27807)

#27742 will remove this feature flag altogether, this just already
removes the dynamic flag for the Meta React Native build ahead of time.",Jan Kassens,2023-12-06T21:02:52Z
9cae4428a13c1377df9b4a752f8d87646df461ec,"Update act references in tests (#27805)

As part of the process of removing the deprecated `react-dom/test-utils`
package references to `act` from this module are replaced with
references to `unstable_act` in `react`. It is likely that the unstable
act implementation will be made stable. The test utils act is just a
reexport of the unstable_act implementation in react itself.",Josh Story,2023-12-06T20:57:14Z
995f4b0528430c6d37e03e0726fbd22ea8273cf7,[bugfix] Fix constant propagation to ObjectMethods,Mofei Zhang,2023-12-06T18:20:50Z
d3e84d4dffdbcea8d2d8371d056f1cb670a045d5,"[repro] repro for ContextVariable bug (ObjectMethod) 

Found from eslint validator on www after doing a local sync + RunForget test of 
#2432 

P898168203 

> New Errors: 

> no-undef:'VARIABLE_NAME' is not defined.",Mofei Zhang,2023-12-06T18:20:49Z
7e9f6ecfea52a750077cc36c869185123bcd635e,"[patch] Make holey array handling compatible with older babel versions 

--- 

Copied from comments 

Older versions of babel have a validation bug fixed by 

- https://github.com/babel/babel/pull/10917 

- (code pointer) 
https://github.com/babel/babel/commit/e7b80a2cb93cf28010207fc3cdd19b4568ca35b9#diff-19b555d2f3904c206af406540d9df200b1e16befedb83ff39ebfcbd876f7fa8aL52 

Link to buggy older version (observe that elements must be PatternLikes here) 


https://github.com/babel/babel/blob/v7.7.4/packages/babel-types/src/definitions/es2015.js#L50-L53 

Link to newer versions with correct validation (observe elements can be 
PatternLike | null) 


https://github.com/babel/babel/blob/v7.23.0/packages/babel-types/src/definitions/core.ts#L1306-L1311 

Tested on 3000+ components in fb: 

P898166848 

> Unexpected Errors 

> (count = 0) 

[patch] Make holey array handling compatible with older babel versions 

--- 

Copied from comments 

Older versions of babel have a validation bug fixed by 

- https://github.com/babel/babel/pull/10917 

- (code pointer) 
https://github.com/babel/babel/commit/e7b80a2cb93cf28010207fc3cdd19b4568ca35b9#diff-19b555d2f3904c206af406540d9df200b1e16befedb83ff39ebfcbd876f7fa8aL52 

Link to buggy older version (observe that elements must be PatternLikes here) 


https://github.com/babel/babel/blob/v7.7.4/packages/babel-types/src/definitions/es2015.js#L50-L53 

Link to newer versions with correct validation (observe elements can be 
PatternLike | null) 


https://github.com/babel/babel/blob/v7.23.0/packages/babel-types/src/definitions/core.ts#L1306-L1311 

Tested on 3000+ components in fb: 

P898166848 

> Unexpected Errors 

> (count = 0)",Mofei Zhang,2023-12-06T18:20:49Z
01c1b16db45b5894d248363fcc7c15874448c284,"[patch] Make Codegen ObjectMethod call compatible with babel v7.7 

--- 

Tested on - with RunForget 
([before](P897673438), 
[after](P897678035)) 

Compiles 12 more files",Mofei Zhang,2023-12-06T18:20:48Z
41b164ed248d7cd423aa79eca007ba90a167cceb,"[validation] Runtime validation for hook calls 

--- 

I modeled guards as try-finally blocks to be extremely explicit. An alternative 
implementation could flatten all nested hooks and only set / restore hook guards 
when entering / exiting a React function (i.e. hook or component) -- this 
alternative approach would be the easiest to represent as a separate pass 

```js 

// source 

function Foo() { 

const result = useHook(useContext(Context)); 

... 

} 

// current output 

function Foo() { 

try { 

pushHookGuard(); 

const result = (() => { 

try { 

pushEnableHook(); 

return useHook((() => { 

try { 

pushEnableHook(); 

return useContext(Context); 

} finally { 

popEnableHook(); 

} 

})()); 

} finally { 

popEnableHook(); 

}; 

})(); 

// ... 

} finally { 

popHookGuard(); 

} 

} 

// alternative output 

function Foo() { 

try { 

// check current is not lazyDispatcher; 

// save originalDispatcher, set lazyDispatcher 

pushHookGuard(); 

allowHook(); // always set originalDispatcher 

const t0 = useContext(Context); 

disallowHook(); // always set LazyDispatcher 

allowHook(); // always set originalDispatcher 

const result = useHook(t0); 

disallowHook(); // always set LazyDispatcher 

// ... 

} finally { 

popHookGuard(); // restore originalDispatcher 

} 

} 

``` 

Checked that IG Web works as expected 

Unless I add a sneaky useState: 

<img width=""705"" alt=""Screenshot 2023-12-05 at 6 44 59 PM"" 
src=""https://github.com/facebook/react-forget/assets/34200447/3790bd76-7d71-44b5-a62e-f53256fb5736"">",Mofei Zhang,2023-12-05T20:02:34Z
37e1975050bad30f1170f58973a9fdbb5bdf4565,"[be] Move codegen logic Program.ts -> Codegen 

--- 

Prior to this PR, we were mutating functions after CodegenReactiveFunction 
completes (in `Entrypoint/Program.ts`). 

The reasoning for this separation was that we wanted to keep non-compiler logic 
out of the core Pipeline. However, it made our code difficult to read and reason 
about. 

Open to other alternatives, like adding a pass after Codegen.",Mofei Zhang,2023-12-05T20:02:33Z
346350f77d2aa73ee7b93edbee2c2b3a4afddfab,"Revert: revert tsconfig module change for rollup 

--- 

Currently on main, rollup does not inline source files 

```js 

// in packages/babel-plugin-react-forget 

// $yarn build 

// output 

var CompilerError_1 = require(""./CompilerError""); 

Object.defineProperty(exports, ""CompilerError"", { enumerable: true, get: 
function () { return CompilerError_1.CompilerError; } }); 

// ... 

``` 

I debugged a bit but not familiar with node or rollup. 

- It seems that rollup fails to recognize source file imports with this setting, 
as resolveId no longer gets called 

- current `module` option defaults to `ESNext`, which works for some reason. 

Let's revert for now to unblock syncs. 

Sanity checked my repro by reinstalling node-modules and cleaning rollup cache.",Mofei Zhang,2023-12-05T22:22:37Z
aba93acb6c87c4fe87a5966d955f67acbf527bf4,"[easy] remove unused deps coveralls and @actuallyworks/node-fetch (#27792)

I do not see references to these modules. Unless there's some dynamic
loading going on (hopefully we should see that in CI) these seem like
they can be removed.",Jan Kassens,2023-12-05T19:15:23Z
c29ca23af91d8aeb9e175c08a0866ba54286f0f3,"fix: add isChildPublicInstance to ReactNativeTypes (#27788)

Follow-up on https://github.com/facebook/react/pull/27783.

React Native is actually using `ReactNativeTypes`, which are synced from
this repo. In order to make `isChildPublicInstance` visible for
renderers inside React Native repository, we need to list it in
`ReactNativeTypes`.

Because of current circular dependency between React Native and React,
it is impossible to actually type it properly:
- Can't import any types in `ReactNativeTypes` from local files, because
it will break React Native, once synced.
- Implementations can't use real types in their definitions, because it
will break these checks:


https://github.com/facebook/react/blob/223db40d5a04dc3311f963f5296675f7f43139e8/packages/react-native-renderer/fabric.js#L12-L13


https://github.com/facebook/react/blob/223db40d5a04dc3311f963f5296675f7f43139e8/packages/react-native-renderer/index.js#L12-L14",Ruslan Lesiutin,2023-12-05T13:00:59Z
5ab6bbb4b058e22658fc6d4734db5acfbf393345,"package.json: cleanup deprecated scripts (#26852)

I think these have been dead for a while now. If the purpose is
documentation, we should see if we need to improve `yarn test --help` or
something instead.",Jan Kassens,2023-12-04T21:20:49Z
f498aa299292d4d1e999f66d1c769440ad10d57c,"Flow: make more objects exact (#27790)

This makes a couple objects more exact. Nothing critical, just noticed
this old branch I had created when doing some Flow upgrades in the past.",Jan Kassens,2023-12-04T21:10:36Z
1d36764ca9dbf8bd1683c0431ee669f72fab7747,[be] Align tsconfig module/moduleResolution settings,Joe Savona,2023-12-04T19:19:41Z
223db40d5a04dc3311f963f5296675f7f43139e8,"Create warnings JS file for Meta (#27786)

The `WARNINGS` file isn't picked up by the test dependency analyzer,
this creates a JS version of the file that I think should work.",Jan Kassens,2023-12-04T18:33:44Z
f391cdab02e90d7e9156a7e6d20c7d92a3c375ac,"Update warnings extraction to hermes-parser (#27785)

`hermes-parser` is recommended for all Flow files as it supports the
latest features. I noticed we were still using babel here.

Test Plan:
no diff in output before and after",Jan Kassens,2023-12-04T18:25:53Z
1729b499ed8cd456ef3d8bccd413cdecd9931abc,"feat[Fabric/Paper]: support isChildPublicInstance api method (#27783)

Adds `isChildPublicInstance` method to both renderers (Fabric and
Paper), which will receive 2 public instances and return if first
argument is an ancestor of the second, based on fibers.

This will be used as a fallback when DOM node APIs are not available:
for Paper renderer or for Fabric without DOM node APIs.

How it is going to be used: to determine which `AppContainer` component
in RN is responsible for highlighting an inspected element on the
screen.",Ruslan Lesiutin,2023-12-04T17:22:03Z
e3fb6ac862e895d7e491628589fca8300f308887,"[flow] upgrade to 0.213.2 (#27784)

No significant changes from Flow, just keeping us current.

[Changelog](https://github.com/facebook/flow/blob/main/Changelog.md)",Jan Kassens,2023-12-04T16:35:27Z
640ccebb7d9669f1efbd20e86f6f84086c3d698d,"[lint] treat React.use() the same as use() (#27769)

We should probably treat `React.use()` the same as `use()` to allow it
within loops and conditionals.

Ideally this would implement a test that `React` is imported or required
from `'react'`, but we don't otherwise implement such a test.",Jan Kassens,2023-12-01T20:02:11Z
d7b45ec9b765575e63e034fb7d844027a323b06c,"Bump @adobe/css-tools from 4.0.1 to 4.3.2 in /fixtures/flight (#27766)

Bumps [@adobe/css-tools](https://github.com/adobe/css-tools) from 4.0.1
to 4.3.2.
<details>
<summary>Changelog</summary>
<p><em>Sourced from <a
href=""https://github.com/adobe/css-tools/blob/main/History.md""><code>@​adobe/css-tools</code>'s
changelog</a>.</em></p>
<blockquote>
<h1>4.3.2 / 2023-11-28</h1>
<ul>
<li>Fix redos vulnerability with specific crafted css string -
CVE-2023-48631</li>
<li>Fix Problem parsing with :is() and nested :nth-child() <a
href=""https://redirect.github.com/adobe/css-tools/issues/211"">#211</a></li>
</ul>
<h1>4.3.1 / 2023-03-14</h1>
<ul>
<li>Fix redos vulnerability with specific crafted css string -
CVE-2023-26364</li>
</ul>
<h1>4.3.0 / 2023-03-07</h1>
<ul>
<li>Update build tools</li>
<li>Update exports path and files</li>
</ul>
<h1>4.2.0 / 2023-02-21</h1>
<ul>
<li>Add <a
href=""https://github.com/container""><code>@​container</code></a>
support</li>
<li>Add <a href=""https://github.com/layer""><code>@​layer</code></a>
support</li>
</ul>
<h1>4.1.0 / 2023-01-25</h1>
<ul>
<li>Support ESM Modules</li>
</ul>
<h1>4.0.2 / 2023-01-12</h1>
<ul>
<li><a
href=""https://redirect.github.com/adobe/css-tools/issues/71"">#71</a> :
<a href=""https://github.com/import""><code>@​import</code></a> does not
work if url contains ';'</li>
<li><a
href=""https://redirect.github.com/adobe/css-tools/issues/77"">#77</a> :
Regression in selector parsing: Attribute selectors not parsed
correctly</li>
</ul>
</blockquote>
</details>
<details>
<summary>Commits</summary>
<ul>
<li>See full diff in <a
href=""https://github.com/adobe/css-tools/commits"">compare view</a></li>
</ul>
</details>
<br />


[![Dependabot compatibility
score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=@adobe/css-tools&package-manager=npm_and_yarn&previous-version=4.0.1&new-version=4.3.2)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)

Dependabot will resolve any conflicts with this PR as long as you don't
alter it yourself. You can also trigger a rebase manually by commenting
`@dependabot rebase`.

[//]: # (dependabot-automerge-start)
[//]: # (dependabot-automerge-end)

---

<details>
<summary>Dependabot commands and options</summary>
<br />

You can trigger Dependabot actions by commenting on this PR:
- `@dependabot rebase` will rebase this PR
- `@dependabot recreate` will recreate this PR, overwriting any edits
that have been made to it
- `@dependabot merge` will merge this PR after your CI passes on it
- `@dependabot squash and merge` will squash and merge this PR after
your CI passes on it
- `@dependabot cancel merge` will cancel a previously requested merge
and block automerging
- `@dependabot reopen` will reopen this PR if it is closed
- `@dependabot close` will close this PR and stop Dependabot recreating
it. You can achieve the same result by closing it manually
- `@dependabot show <dependency name> ignore conditions` will show all
of the ignore conditions of the specified dependency
- `@dependabot ignore this major version` will close this PR and stop
Dependabot creating any more for this major version (unless you reopen
the PR or upgrade to it yourself)
- `@dependabot ignore this minor version` will close this PR and stop
Dependabot creating any more for this minor version (unless you reopen
the PR or upgrade to it yourself)
- `@dependabot ignore this dependency` will close this PR and stop
Dependabot creating any more for this dependency (unless you reopen the
PR or upgrade to it yourself)
You can disable automated security fix PRs for this repo from the
[Security Alerts
page](https://github.com/facebook/react/network/alerts).

</details>

Signed-off-by: dependabot[bot] <support@github.com>
Co-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>",dependabot[bot],2023-12-01T19:56:14Z
108fd8cab015688e6e8e57956c2f1ed1a0c054f2,"Add sideEffects flag to react-is for tree shaking (#27701)

## Summary

This PR:

- Adds the `""sideEffects"": false` flag to the `react-is` package, to
enable proper tree-shaking

## How did you test this change?

React-Redux v9 beta switches its artifacts from separate JS files to
pre-bundled artifacts. While testing builds locally, I noticed that our
use of `react-is` was no longer getting tree-shaken from Vite builds,
despite `react-is` only being used by our `connect` API and `connect`
itself getting shaken out of the final bundle.

Hand-adding `""sideEffects"": false` to the `react-is` package locally
convinced Vite (+Rollup) to properly tree-shake `react-is` out of the
bundle when it wasn't being used.

I'd love to see this published as v18.2.1 as soon as this PR is merged -
we're hoping to release React-Redux v9 in the next few weeks!",Mark Erikson,2023-12-01T19:38:15Z
dc40571b3efd18d4d08fdf6146ad5ec980ea12dd,"Update .prettierrc.js (#27732)

jsxBracketSameLine deprecated in v2.4.0 of Prettier, replaced by
bracketSameLine.

https://prettier.io/docs/en/options.html#deprecated-jsx-brackets

<!--
  Thanks for submitting a pull request!
We appreciate you spending the time to work on these changes. Please
provide enough information so that others can review your pull request.
The three fields below are mandatory.

Before submitting a pull request, please make sure the following is
done:

1. Fork [the repository](https://github.com/facebook/react) and create
your branch from `main`.
  2. Run `yarn` in the repository root.
3. If you've fixed a bug or added code that should be tested, add tests!
4. Ensure the test suite passes (`yarn test`). Tip: `yarn test --watch
TestName` is helpful in development.
5. Run `yarn test --prod` to test in the production environment. It
supports the same options as `yarn test`.
6. If you need a debugger, run `yarn test --debug --watch TestName`,
open `chrome://inspect`, and press ""Inspect"".
7. Format your code with
[prettier](https://github.com/prettier/prettier) (`yarn prettier`).
8. Make sure your code lints (`yarn lint`). Tip: `yarn linc` to only
check changed files.
  9. Run the [Flow](https://flowtype.org/) type checks (`yarn flow`).
  10. If you haven't already, complete the CLA.

Learn more about contributing:
https://reactjs.org/docs/how-to-contribute.html
-->

## Summary

<!--
Explain the **motivation** for making this change. What existing problem
does the pull request solve?
-->

I've always wanted to contribute to open source, even if it's in the
smallest way possible. Resolves deprecated feature with currently used
version of Prettier (2.4+). Those doing things like using React as a
reference for their "".prettierrc"" files will be using the non-deprecated
versions.

## How did you test this change?

Modified line 969 of App.js to push </h1> to line 971, saved the file,
then ran ""yarn prettier"" and formatting returned it to original position
confirming that jsxBracketSameLine acts in the same fashion to
bracketSameLine, but also is no longer deprecated that has additional
features which may be useful in the future to the project.


<!--
Demonstrate the code is solid. Example: The exact commands you ran and
their output, screenshots / videos if the pull request changes the user
interface.
How exactly did you verify that your PR solves the issue you wanted to
solve?
  If you leave this empty, your PR will very likely be closed.
-->

λ yarn prettier
yarn run v1.22.19
$ node ./scripts/prettier/index.js write-changed
> git merge-base HEAD main
> git diff --name-only --diff-filter=ACMRTUB
bbb9cb116dbf7b6247721aa0c4bcb6ec249aa8af
> git ls-files --others --exclude-standard
Done in 1.52s.",WilliamDecker,2023-12-01T19:30:42Z
5dd35968bef791ccc5948c657fabf191a77fff3f,"fix: select console error to not suggest to set readonly to true (#27740)

fix #27657 

added test in the `ReactDOMSELECT-test.js` to not allow regession to
happen in future.

After changes this is what the error message looks like


https://github.com/facebook/react/assets/72331432/53dcbe2a-70d2-43d2-a52d-a4fc389fdfbf",BIKI DAS,2023-12-01T15:55:55Z
3e97c00debbd6706b6ec6b7da15094bf2ba81ef4,"Rename fork ReactSharedInternals -> ReactSharedInternalsClient (#27767)

## Summary

Follow up from #27717 based on feedback to rename the fork module itself

## How did you test this change?

- `yarn build`
- `yarn test
packages/scheduler/src/__tests__/SchedulerUMDBundle-test.internal.js`

Co-authored-by: Jack Pope <jackpope@meta.com>",Jack Pope,2023-12-01T14:48:04Z
9fb3a2617498d122a9c3dc7368155e7c25445903,"Add logging for number of memo *blocks* (in addition to slots) 

Useful for understanding and comparing how much memoization Forget applies vs 
how much developers previously memoized by hand.",Joe Savona,2023-11-30T23:20:01Z
3639704f2bd923c48864622acde53d1115970644,Enable hooks validation in eslint,Joe Savona,2023-12-04T16:22:51Z
0c0bedd3775251a1ada059df05e0494797d9e9b9,"New approach to hook validation 

New approach to hooks validation per recent discussion. The idea is to avoid 
false positives while still preventing serious violations. See the comments in 
the file for more details about the approach. It uses a somewhat similar idea to 
InferReferenceEffects in that we track a ""Kind"" for each IdentifierId, and 
various instructions propagate or derive a result Kind from the operands. Kinds 
form a lattice and can be joined, allowing us to be more precise about known vs 
potential hooks, and known vs potential _sources_ of hooks.",Joe Savona,2023-12-04T16:15:26Z
b8be034f07e1abc59863742063f5baeff20e33fe,"[lint] move use lint to non-experimental (#27768)

`use` is being stabilized, so let's make sure the lint is updated for
the next release.",Jan Kassens,2023-11-30T22:39:00Z
60ad3693a554f24b116f3f9afdb171fb4beb6d02,"Update README.md with react.dev links (#27765)

## Summary

Update legacy reactjs.org links and update to the corresponding ones on
react.dev

## How did you test this change?

Verify all links go to the expected pages",Kathryn Middleton,2023-11-30T17:08:44Z
7da906d64802bd33f8c004df5f67504b7635e972,"Fix Array#at and similar cases to capture if receiver is mutable 

The previous PR helped me realize we weren't handling Array#at correctly. If the 
receiver is a mutable value its effect should be Capture and the lvalue effect 
needs to be Store. This PR updates the definition for Array#at to make the 
receiver Capture, and then updates inference to automatically set the lvalue 
effect to Store if _any_ argument (or the receiver) was Capture.",Joe Savona,2023-11-29T20:05:25Z
75c7fdcbd0e73a846899e69b13062c82f0fac468,"MutableIfOperandsAreMutable flag handles mutation via capturing 

There was one missing piece to the optimization from the previous PR: Array#map 
can return an alias to the receiver in its output, which means that mutations of 
the result have to be treated as mutations of the receiver. This means we need 
to use a Capture effect on the receiver. If that doesn't get downgraded to a 
Read bc the value was immutable, we then also need to make the lvalue effect a 
Store (so that InferMutableRanges actually looks at it for aliasing).",Joe Savona,2023-11-29T18:46:44Z
f7d16db54480558fe792d04d44ae3b8d18603894,"[RFC] Refine memoization for Array#map with non-mutating callbacks 

Improves memoization for cases such as #2409: 

```javascript 

const x = []; 

useEffect(...); 

return <div>{x.map(item => <span>{item}</span>)}</div>; 

``` 

We previously thought that the `x.map(...)` call mutated `x` since its kind was 
Mutable. However, in this case we can determine that the map call cannot mutate 
`x` (or anything else): the lambda does not mutate any free variables and does 
not mutate its arguments. 

This PR adds a new flag to function signatures, used for method calls only, that 
checks for such cases. The idea is that if the receiver is the only thing that 
is mutable — including that there are no args which are function expressions 
which mutate their parameters — then we can infer the effect as a read. See 
tests which confirm that function expressions which capture or mutate their 
params bypass the optimization.",Joe Savona,2023-11-29T18:46:43Z
65c54e2d703409c726b830b24678bd5ad5d8e5c6,"Repro for unmemoized array due to mutation surrounding hook 

Distilled repro of an internal example we found. Forget determines a mutable 
range for the array, but that mutable range spans a hook call, so the reactive 
scope gets pruned. That's all working as expected. 

What isn't ideal though is that if we know `x` is an array and `f` can't mutate 
its arguments, then `x.map(f)` shouldn't count as a mutation of `x`, since 
Array.prototype.map can only mutate the receiver via the callback (if the 
callback mutates its args). 

Improving on this example requires a) we have to know it's an Array, via type 
information or bc we saw an array literal and b) being precise about which 
functions could possibly mutate their parameters, which is tricky because of 
indirect mutations via stores, etc.",Joe Savona,2023-11-29T18:46:42Z
b952bc3d87062a6b63080cf26236efa86d32078d,"[be] Consistently use known returnValueKind from signatures 

We were using `returnValueKind` from function signatures for CallExpression but 
not MethodCall; this PR changes to use this signature information for both 
instruction kinds.",Joe Savona,2023-11-29T18:46:42Z
87cb0bf182c59192047d6adaec228d821c298f4a,"React DevTools 4.28.5 -> 5.0.0 (#27759)

### Breaking
* refactor[devtools]: highlight an array of elements for native
([hoxyq](https://github.com/hoxyq) in
[#27734](https://github.com/facebook/react/pull/27734))

### Features
* feat[devtools]: display Forget badge for the relevant components
([hoxyq](https://github.com/hoxyq) in
[#27709](https://github.com/facebook/react/pull/27709))

### Other
* Added windows powershell syntax to build scripts
([PrathamLalwani](https://github.com/PrathamLalwani) in
[#27692](https://github.com/facebook/react/pull/27692))
* refactor[react-devtools-shared]: minor parsing improvements and
modifications ([hoxyq](https://github.com/hoxyq) in
[#27661](https://github.com/facebook/react/pull/27661))",Ruslan Lesiutin,2023-11-29T18:27:53Z
359b9b1589bcbe7988ff782ae88dcfaa2bdba927,"[ez] Patch unsound array destructuring 

--- 

Going to hold off on landing until after codefreeze, it's not urgent as we 
already fixed playground in #2404. All other internal pipelines do error 
handling through Entrypoint, which catches and creates UnexpectedErrors as 
needed.",Mofei Zhang,2023-11-28T22:48:22Z
0a6d3b31deb8201c5c965d0624923fb79f76fad1,Add compilation failure test for Logger,Sathya Gunasekaran,2023-11-28T15:35:48Z
e53e944580d4972f97d392de1470697c7a661019,[test] Add test for Logger,Sathya Gunasekaran,2023-11-28T15:35:46Z
18d4913406d7cb628b2d110f9b4767ce108e99d2,"[babel] Don't use source location for hoisting check 

Instead of using the source location to check for hoisting, just stop checking 
for a given component after we reach it's declaration. 

By definition all references to it before are (potential) hoisting errors. 

Note that there could be false positives but that's ok.",Sathya Gunasekaran,2023-11-28T14:18:24Z
42fa01ec876f32e2c2da091c6934f25c3ddff562,"[test] Add failing test for component syntax with refs 

The desugaring of Component syntax with refs is not compatible with our gating 
lowering.",Sathya Gunasekaran,2023-11-28T14:18:24Z
be034396870aff5fcfebf29d0453124eb493199d,"[yarn] Update hermes-parser 

Need new version for component syntax updates",Sathya Gunasekaran,2023-11-28T14:18:24Z
1ebb7ae376ca95e9e038ac3f0fb3eca69c533051,"[eslint] Assume external modules are non side-effecting 

This lets us tree shake out the `chalk` module entirely",Sathya Gunasekaran,2023-11-28T14:10:48Z
0ba3065812ea769bf2885df80c97ee6621728016,[eslint] Don't rollup zod,Sathya Gunasekaran,2023-11-28T14:10:48Z
c17a27ef492d9812351aecdfb017488e8e8404ce,"FB-specific builds of Flight Server, Flight Client, and React Shared Subset (#27579)

This PR adds a new FB-specific configuration of Flight. We also need to
bundle a version of ReactSharedSubset that will be used for running
Flight on the server.

This initial implementation does not support server actions yet.

The FB-Flight still uses the text protocol on the server (the flag
`enableBinaryFlight` is set to false). It looks like we need some
changes in Hermes to properly support this binary format.",Andrey Lunyov,2023-11-27T23:34:58Z
445baf9ae4356acb9e19dd04f31159a49171ca2a,"Extend effect dep validation to handle pruned memoization 

Extends the validation that effect deps are memoized to handle an additional 
case that @gsathya  pointed out: when a dependency has a reactive scope but that 
scope ends up being pruned. We track reactive scopes which actually exist in the 
ReactiveFunction, and reject useEffect deps that have an associated reactive 
scope but where that scope does not exist (bc it got pruned).",Joe Savona,2023-11-27T20:31:27Z
d7db416167c1fcc1c1938d2880c8b0f919fd376b,"[RFC] useEffect dependency memoization check 

This is one approach to testing whether useEffect dependencies are memoized. The 
idea is based off the observation that the only reason dependencies wouldn't be 
memoized (other than compiler bugs) is that they are mutated later. If they're 
mutated later, then the dep array will have a mutable range which encompasses 
the InstructionId of the useEffect call. So we look for that pattern and throw a 
validation error. 

The downside of this approach is that we might reject code that happens to be 
valid: specifically, that the lack of memoization isn't a problem in practice 
because the effect won't trigger a loop. But (per test plan) this doesn't seem 
to introduce that many new bailouts on www. Rather than implement a complex 
validation that checks whether we un-memoized something that was memoized in the 
input, it seems more practical to: 

1. Enable this more comprehensive validation against any form of un-memo'd 
effect dependency 

2. Flip the default for hooks (to assume they follow the rules), which will fix 
the primary cause of Forget pessimistically not memoizing dependencies. 

## Test Plan 

Synced to www and checked output via the upgrade script: a few components stop 
getting memoized bc they have un-memoized effect dependencies. Let's chat!",Joe Savona,2023-11-27T18:20:43Z
6c7b41da3de12be2d95c60181b3fe896f824f13a,"feat[devtools]: display Forget badge for the relevant components (#27709)

Adds `Forget` badge to all relevant components.

Changes:
- If component is compiled with Forget and using a built-in
`useMemoCache` hook, it will have a `Forget` badge next to its display
name in:
  - components tree
  - inspected element view
  - owners list
- Such badges are indexable, so Forget components can be searched using
search bar.

Fixes:
- Displaying the badges for owners list inside the inspected component
view

Implementation:
- React DevTools backend is responsible for identifying if component is
compiled with Forget, based on `fiber.updateQueue.memoCache`. It will
wrap component's display name with `Forget(...)` prefix before passing
operations to the frontend. On the frontend side, we will parse the
display name and strip Forget prefix, marking the corresponding element
by setting `compiledWithForget` field. Almost the same logic is
currently used for HOC display names.",Ruslan Lesiutin,2023-11-23T18:37:21Z
fbc9b68d61aba17a5a1119caac22647d0897486a,"refactor[devtools]: highlight an array of elements for native (#27734)

We are currently just pass the first element, which diverges from the
implementation for web. This is especially bad if you are inspecting
something like a list, where host fiber can represent multiple elements.

This part runs on the backend of React DevTools, so it should not affect
cases for React Native when frontend version can be more up-to-date than
backend's. I will double-check it before merging.

Once version of `react-devtools-core` is updated in React Native, this
should be supported, I will work on that later.",Ruslan Lesiutin,2023-11-23T11:31:07Z
a3172e933c7eb54aa02ec1d303453a96bc76181b,"Add dynamic `disableModulePatternComponents` flag for native-fb (#27739)

Makes `disableModulePatternComponents` a flag to allow us a slow rollout
for RN internally.",Jan Kassens,2023-11-22T18:05:24Z
5b8e94c6d84342a906612d95315f239f9caea8c1,"[ez][wip] Make playground more resilient to crashes 

--- 

<img width=""1031"" alt=""image"" 
src=""https://github.com/facebook/react-forget/assets/34200447/8e475472-45c3-4ef0-aa4b-d187e72b999c""> 

Behold! No instacrash on `useMemo()`",Mofei Zhang,2023-11-21T15:30:29Z
6a6ef0ab594f051ef1bcba45c6c95f9347bfb24b,"[repro] Forget outputs invalid code when we bailout 

Sprout output: 

``` 

$ sprout --filter --verbose 

FAIL: bug-invalid-code-when-bailout 

Difference in forget and non-forget results. 

Expected result: { 

""kind"": ""ok"", 

""value"": ""{}"", 

""logs"": [] 

} 

Found: { 

""kind"": ""exception"", 

""value"": ""Cannot access 'bar' before initialization"", 

""logs"": [ 

""'The above error occurred in one of your React components:\\n' +\n  '\\n' +\n  
'    at globalThis.WrapperTestComponent 
(/Users/feifei0/fb/react-forget/packages/sprout/dist/runner-evaluator.js:30:26)\\n' 
+\n  '\\n' +\n  'Consider adding an error boundary to your tree to customize 
error handling behavior.\\n' +\n  'Visit 
https://reactjs.org/link/error-boundaries to learn more about error 
boundaries.'"" 

] 

} 

```",Mofei Zhang,2023-11-21T15:06:15Z
bfefbf3fcee57f5a038774a3e4234a7cff0d56c9,[repro] dce bug for JSX memberexpr tags in lambda,Mofei Zhang,2023-11-21T15:06:14Z
bbb9cb116dbf7b6247721aa0c4bcb6ec249aa8af,"Update fork for ReactSharedInternalsClient export (#27717)

## Summary

After changes in https://github.com/facebook/react/pull/27436, UMD
builds no longer expose Scheduler from ReactSharedInternals. This module
is forked in rollup for UMD builds and the path no longer matches. This
PR updates the path name to match the new module:
ReactSharedInternalsClient.

## How did you test this change?

- `yarn build`
- Inspect `react.development.js` UMD build, observe `Scheduler:
Scheduler` is set in `ReactSharedInternals`, matching
[18.2.0](https://unpkg.com/react@18.2.0/umd/react.development.js)
- ran attribute-behavior fixture app
- Observe no more error `Uncaught (in promise) TypeError: Cannot read
properties of undefined (reading 'unstable_cancelCallback')`

Co-authored-by: Jack Pope <jackpope@meta.com>",Jack Pope,2023-11-17T14:00:56Z
8176ebb5468a492710ca3482015c7b172912f279,"BuildHIR lowers FunctionDecl instead of rewriting to FuncExpr 

We were modifying the Babel AST as a shortcut to lowering function declarations, 
instead we can explicitly lower them equivalently to a `let <id> = 
<function-expression>`.",Joe Savona,2023-11-16T23:41:19Z
a1e389118951ff7b83c753245ee96793a898bfe0,"[rfc][babel] InvalidConfig always throws 

When you have your panic threshold set to ""NONE"" as we recommend, it's easy to 
miss that your config is wrong (which makes everything not compile) because 
those errors were being silenced. This made debugging FluentUI and the 
forget-feedback testapp pretty difficult to figure out at first, and defeats the 
purpose of having config validation in the first place. 

This pr makes it so InvalidConfig errors always throw, regardless of the panic 
threshold set. In general our plugin should never throw at build time due to 
component bailouts, but because an InvalidConfig would bailout everything from 
being compiled at all, it seems reasonable to throw here",Lauren Tan,2023-11-17T17:01:20Z
6d101435d401d612c3a797fe88258b7c59fe7f49,"[Babel] Fix up eslint suppression logic 

Babel doesn't attach Comment nodes to anything, so they dangle off of 

the Program node while only specifying a range. This meant that 

previously we first had to traverse all of the Program's comments to 

find an eslint suppression of the rules of React, then during traversal 

of the individual functions, we would check if there were any *global* 

eslint suppressions, then bailout all components. 

This PR updates our logic to determine if individual functions are 

affected by an eslint suppression range: 

- If an eslint suppression range falls within its body; or 

- If an eslint suppression wraps the function",Lauren Tan,2023-11-17T15:22:46Z
fbcc21c37a50b50cb7ed1aef9329ad598a236110,"Add repro for bug with 'use no forget' 

For some reason, when there are other hooks/components defined in the file, the 
'use no forget' directive stops working",Lauren Tan,2023-11-17T15:22:45Z
96f10e058b76372885f99b948e5194842bd02dc4,"[be][tests] Change fixtures to evaluate successfully instead of throwing 

--- 

Not dependent on changes from #2366, but now the fix is easy to review",Mofei Zhang,2023-11-16T23:12:00Z
66748b00f25b2111731d65a8cde6c777c741bbe5,"[be][sprout] Snapshot files for sprout with shared utils 

--- 

16 out of ~150 recently added sprout fixtures have exceptions that reflect 
easy-to-miss mistakes in the fixture input, like forgetting to import 
`useState`. 

This PR adds snapshot files for sprout to prevent these mistakes (or catch them 
at diff review time). This describes what it implements, but happy to take other 
suggestions as well! 

1. One sprout snapshot file for each input. 

This significantly increases the number of files we have, but makes it clear 
what the fixture is testing. I was hoping to expand on these snapshots to record 
the result of multiple re-renders, or mounts (with different parameters), but 
the tradeoff is that adding / changing fixtures will now require running `yarn 
sprout --mode update`. 

Some alternatives I've considered: 

- Only record snapshots for fixtures that error (`result.kind == ""exception""`). 
This change would be pretty easy. This doesn't help sanity check sprout results 
for general mistakes though (""am I testing what I want to test?) 

- Warn loudly for fixtures that error -- seems like these are easy to ignore, 
but.. worth it for the convenience? 

- Some github action that runs and comments on your PR with sprout fixture 
changes; i.e. never manually update sprout files? 

2. Sprout and snap share a common snapshot file, with some parsing hackery. 

Previously, the implementation added new files to a separate sprout snapshot 
directory, assuming that devs don't need to read these often. 

After feedback from @josephsavona, I updated to have snap and sprout write to 
the same file for ease of reviewing / debugging (to be able to see the input / 
output side by side). 

- `snap --mode update` will update snap's part of the file. 

- `sprout --mode update` will update sprout's part 

- `snap` and `sprout` will both compare oldSnapshot (read from the file) with 
`newSnapshot = merge(oldSnapshot, newData)` to determine if a test pass. 

3. Some hacks 😅 Absolute paths to project directory (e.g. stack traces) are 
replaced with `<project_root>` in a mocked `console.log`",Mofei Zhang,2023-11-16T23:12:00Z
fa07eb0b3b65189b2446df080adf1b92e6cc157b,"[be] make evaluator and worker easier to debug in sprout 

--- 

jsdom and other libraries seem to cause jest workers to exit with 
`forceExit:true`. Not sure what option I set (or global I've overwritten) but 
console logs aren't flushed as a result, making debugging a bit confusing. 

This PR: 

- Moves some code from `eval(...)` to a typechecked real js function. I always 
had trouble debugging the `eval`ed code, so smaller code snippet is better here. 

- waits for jest workers to end before exiting",Mofei Zhang,2023-11-16T23:12:00Z
1a65d036ef057b07a6b15f5604e399f91bc5ed73,"[cleanup] remove enableHostSingletons feature flag (#27583)

The flag is enabled everywhere, I think we can remove it now.",Jan Kassens,2023-11-16T22:42:03Z
0de5b11485b9edc5aec0f5a95ef886a294c03b2d,"Bump @babel/traverse from 7.14.2 to 7.23.3 in /fixtures/ssr2 (#27713)

Bumps
[@babel/traverse](https://github.com/babel/babel/tree/HEAD/packages/babel-traverse)
from 7.14.2 to 7.23.3.
<details>
<summary>Release notes</summary>
<p><em>Sourced from <a
href=""https://github.com/babel/babel/releases""><code>@​babel/traverse</code>'s
releases</a>.</em></p>
<blockquote>
<h2>v7.23.3 (2023-11-09)</h2>
<h4>:bug: Bug Fix</h4>
<ul>
<li><code>babel-plugin-transform-typescript</code>
<ul>
<li><a
href=""https://redirect.github.com/babel/babel/pull/16071"">#16071</a>
Strip type-only TS namespaces (<a
href=""https://github.com/colinaaa""><code>@​colinaaa</code></a>)</li>
</ul>
</li>
<li><code>babel-generator</code>
<ul>
<li><a
href=""https://redirect.github.com/babel/babel/pull/16078"">#16078</a> Fix
indentation when generating comments with <code>concise: true</code> (<a
href=""https://github.com/liuxingbaoyu""><code>@​liuxingbaoyu</code></a>)</li>
</ul>
</li>
<li><code>babel-compat-data</code>,
<code>babel-plugin-bugfix-v8-static-class-fields-redefine-readonly</code>,
<code>babel-preset-env</code>
<ul>
<li><a
href=""https://redirect.github.com/babel/babel/pull/14295"">#14295</a> Add
a bugfix plugin for <a
href=""https://crbug.com/v8/12421"">https://crbug.com/v8/12421</a> (<a
href=""https://github.com/nicolo-ribaudo""><code>@​nicolo-ribaudo</code></a>)</li>
</ul>
</li>
<li><code>babel-plugin-transform-object-super</code>
<ul>
<li><a
href=""https://redirect.github.com/babel/babel/pull/15948"">#15948</a>
fix: <code>super.x</code> in a loop (<a
href=""https://github.com/liuxingbaoyu""><code>@​liuxingbaoyu</code></a>)</li>
</ul>
</li>
<li><code>babel-helper-module-transforms</code>,
<code>babel-plugin-transform-modules-amd</code>,
<code>babel-plugin-transform-modules-commonjs</code>,
<code>babel-plugin-transform-modules-umd</code>
<ul>
<li><a
href=""https://redirect.github.com/babel/babel/pull/16015"">#16015</a>
fix: handle <code>__proto__</code> exports name in CJS/AMD/UMD (<a
href=""https://github.com/magic-akari""><code>@​magic-akari</code></a>)</li>
</ul>
</li>
</ul>
<h4>:memo: Documentation</h4>
<ul>
<li><a
href=""https://redirect.github.com/babel/babel/pull/16044"">#16044</a>
docs: Update links in <code>@​babel/eslint-parser</code> README (<a
href=""https://github.com/aryehb""><code>@​aryehb</code></a>)</li>
</ul>
<h4>:house: Internal</h4>
<ul>
<li><code>babel-core</code>, <code>babel-preset-env</code>
<ul>
<li><a
href=""https://redirect.github.com/babel/babel/pull/15988"">#15988</a>
Refactor handling of modules plugins in <code>preset-env</code> (<a
href=""https://github.com/nicolo-ribaudo""><code>@​nicolo-ribaudo</code></a>)</li>
</ul>
</li>
</ul>
<h4>:running_woman: Performance</h4>
<ul>
<li><code>babel-generator</code>
<ul>
<li><a
href=""https://redirect.github.com/babel/babel/pull/16061"">#16061</a>
perf: Improve <code>@babel/generator</code> performance (<a
href=""https://github.com/liuxingbaoyu""><code>@​liuxingbaoyu</code></a>)</li>
</ul>
</li>
<li><code>babel-traverse</code>
<ul>
<li><a
href=""https://redirect.github.com/babel/babel/pull/16060"">#16060</a>
Avoid dynamic dispatch when calling wrapCheck (<a
href=""https://github.com/yepitschunked""><code>@​yepitschunked</code></a>)</li>
</ul>
</li>
</ul>
<h4>:microscope: Output optimization</h4>
<ul>
<li><code>babel-plugin-transform-computed-properties</code>
<ul>
<li><a
href=""https://redirect.github.com/babel/babel/pull/6652"">#6652</a>
Optimize computed properties output (byte-wise) (<a
href=""https://github.com/Andarist""><code>@​Andarist</code></a>)</li>
</ul>
</li>
</ul>
<h4>Committers: 9</h4>
<ul>
<li>Babel Bot (<a
href=""https://github.com/babel-bot""><code>@​babel-bot</code></a>)</li>
<li>Colin (<a
href=""https://github.com/colinaaa""><code>@​colinaaa</code></a>)</li>
<li>Huáng Jùnliàng (<a
href=""https://github.com/JLHwung""><code>@​JLHwung</code></a>)</li>
<li>Mateusz Burzyński (<a
href=""https://github.com/Andarist""><code>@​Andarist</code></a>)</li>
<li>Nicolò Ribaudo (<a
href=""https://github.com/nicolo-ribaudo""><code>@​nicolo-ribaudo</code></a>)</li>
<li><a href=""https://github.com/aryehb""><code>@​aryehb</code></a></li>
<li><a
href=""https://github.com/liuxingbaoyu""><code>@​liuxingbaoyu</code></a></li>
<li><a
href=""https://github.com/magic-akari""><code>@​magic-akari</code></a></li>
<li><a
href=""https://github.com/yepitschunked""><code>@​yepitschunked</code></a></li>
</ul>
<h2>v7.23.2 (2023-10-11)</h2>
<p><strong>NOTE</strong>: This release also re-publishes
<code>@babel/core</code>, even if it does not appear in the linked
release commit.</p>
<p>Thanks <a
href=""https://github.com/jimmydief""><code>@​jimmydief</code></a> for
your first PR!</p>
<h4>:bug: Bug Fix</h4>
<ul>
<li><code>babel-traverse</code></li>
</ul>
<!-- raw HTML omitted -->
</blockquote>
<p>... (truncated)</p>
</details>
<details>
<summary>Changelog</summary>
<p><em>Sourced from <a
href=""https://github.com/babel/babel/blob/main/CHANGELOG.md""><code>@​babel/traverse</code>'s
changelog</a>.</em></p>
<blockquote>
<h2>v7.23.3 (2023-11-09)</h2>
<h4>:bug: Bug Fix</h4>
<ul>
<li><code>babel-plugin-transform-typescript</code>
<ul>
<li><a
href=""https://redirect.github.com/babel/babel/pull/16071"">#16071</a>
Strip type-only TS namespaces (<a
href=""https://github.com/colinaaa""><code>@​colinaaa</code></a>)</li>
</ul>
</li>
<li><code>babel-generator</code>
<ul>
<li><a
href=""https://redirect.github.com/babel/babel/pull/16078"">#16078</a> Fix
indentation when generating comments with <code>concise: true</code> (<a
href=""https://github.com/liuxingbaoyu""><code>@​liuxingbaoyu</code></a>)</li>
</ul>
</li>
<li><code>babel-compat-data</code>,
<code>babel-plugin-bugfix-v8-static-class-fields-redefine-readonly</code>,
<code>babel-preset-env</code>
<ul>
<li><a
href=""https://redirect.github.com/babel/babel/pull/14295"">#14295</a> Add
a bugfix plugin for <a
href=""https://crbug.com/v8/12421"">https://crbug.com/v8/12421</a> (<a
href=""https://github.com/nicolo-ribaudo""><code>@​nicolo-ribaudo</code></a>)</li>
</ul>
</li>
<li><code>babel-plugin-transform-object-super</code>
<ul>
<li><a
href=""https://redirect.github.com/babel/babel/pull/15948"">#15948</a>
fix: <code>super.x</code> in a loop (<a
href=""https://github.com/liuxingbaoyu""><code>@​liuxingbaoyu</code></a>)</li>
</ul>
</li>
<li><code>babel-helper-module-transforms</code>,
<code>babel-plugin-transform-modules-amd</code>,
<code>babel-plugin-transform-modules-commonjs</code>,
<code>babel-plugin-transform-modules-umd</code>
<ul>
<li><a
href=""https://redirect.github.com/babel/babel/pull/16015"">#16015</a>
fix: handle <code>__proto__</code> exports name in CJS/AMD/UMD (<a
href=""https://github.com/magic-akari""><code>@​magic-akari</code></a>)</li>
</ul>
</li>
</ul>
<h4>:memo: Documentation</h4>
<ul>
<li><a
href=""https://redirect.github.com/babel/babel/pull/16044"">#16044</a>
docs: Update links in <code>@​babel/eslint-parser</code> README (<a
href=""https://github.com/aryehb""><code>@​aryehb</code></a>)</li>
</ul>
<h4>:house: Internal</h4>
<ul>
<li><code>babel-core</code>, <code>babel-preset-env</code>
<ul>
<li><a
href=""https://redirect.github.com/babel/babel/pull/15988"">#15988</a>
Refactor handling of modules plugins in <code>preset-env</code> (<a
href=""https://github.com/nicolo-ribaudo""><code>@​nicolo-ribaudo</code></a>)</li>
</ul>
</li>
</ul>
<h4>:running_woman: Performance</h4>
<ul>
<li><code>babel-generator</code>
<ul>
<li><a
href=""https://redirect.github.com/babel/babel/pull/16061"">#16061</a>
perf: Improve <code>@babel/generator</code> performance (<a
href=""https://github.com/liuxingbaoyu""><code>@​liuxingbaoyu</code></a>)</li>
</ul>
</li>
<li><code>babel-traverse</code>
<ul>
<li><a
href=""https://redirect.github.com/babel/babel/pull/16060"">#16060</a>
Avoid dynamic dispatch when calling wrapCheck (<a
href=""https://github.com/yepitschunked""><code>@​yepitschunked</code></a>)</li>
</ul>
</li>
</ul>
<h4>:microscope: Output optimization</h4>
<ul>
<li><code>babel-plugin-transform-computed-properties</code>
<ul>
<li><a
href=""https://redirect.github.com/babel/babel/pull/6652"">#6652</a>
Optimize computed properties output (byte-wise) (<a
href=""https://github.com/Andarist""><code>@​Andarist</code></a>)</li>
</ul>
</li>
</ul>
<h2>v7.23.2 (2023-10-11)</h2>
<h4>:bug: Bug Fix</h4>
<ul>
<li><code>babel-traverse</code>
<ul>
<li><a
href=""https://redirect.github.com/babel/babel/pull/16033"">#16033</a>
Only evaluate own String/Number/Math methods (<a
href=""https://github.com/nicolo-ribaudo""><code>@​nicolo-ribaudo</code></a>)</li>
</ul>
</li>
<li><code>babel-preset-typescript</code>
<ul>
<li><a
href=""https://redirect.github.com/babel/babel/pull/16022"">#16022</a>
Rewrite <code>.tsx</code> extension when using
<code>rewriteImportExtensions</code> (<a
href=""https://github.com/jimmydief""><code>@​jimmydief</code></a>)</li>
</ul>
</li>
<li><code>babel-helpers</code>
<ul>
<li><a
href=""https://redirect.github.com/babel/babel/pull/16017"">#16017</a>
Fix: fallback to typeof when toString is applied to incompatible object
(<a href=""https://github.com/JLHwung""><code>@​JLHwung</code></a>)</li>
</ul>
</li>
<li><code>babel-helpers</code>,
<code>babel-plugin-transform-modules-commonjs</code>,
<code>babel-runtime-corejs2</code>, <code>babel-runtime-corejs3</code>,
<code>babel-runtime</code>
<ul>
<li><a
href=""https://redirect.github.com/babel/babel/pull/16025"">#16025</a>
Avoid override mistake in namespace imports (<a
href=""https://github.com/nicolo-ribaudo""><code>@​nicolo-ribaudo</code></a>)</li>
</ul>
</li>
</ul>
<h2>v7.23.0 (2023-09-25)</h2>
<h4>:rocket: New Feature</h4>
<ul>
<li><code>babel-plugin-proposal-import-wasm-source</code>,
<code>babel-plugin-syntax-import-source</code>,
<code>babel-plugin-transform-dynamic-import</code>
<ul>
<li><a
href=""https://redirect.github.com/babel/babel/pull/15870"">#15870</a>
Support transforming <code>import source</code> for wasm (<a
href=""https://github.com/nicolo-ribaudo""><code>@​nicolo-ribaudo</code></a>)</li>
</ul>
</li>
<li><code>babel-helper-module-transforms</code>,
<code>babel-helpers</code>,
<code>babel-plugin-proposal-import-defer</code>,
<code>babel-plugin-syntax-import-defer</code>,
<code>babel-plugin-transform-modules-commonjs</code>,
<code>babel-runtime-corejs2</code>, <code>babel-runtime-corejs3</code>,
<code>babel-runtime</code>, <code>babel-standalone</code>
<ul>
<li><a
href=""https://redirect.github.com/babel/babel/pull/15878"">#15878</a>
Implement <code>import defer</code> proposal transform support (<a
href=""https://github.com/nicolo-ribaudo""><code>@​nicolo-ribaudo</code></a>)</li>
</ul>
</li>
<li><code>babel-generator</code>, <code>babel-parser</code>,
<code>babel-types</code>
<ul>
<li><a
href=""https://redirect.github.com/babel/babel/pull/15845"">#15845</a>
Implement <code>import defer</code> parsing support (<a
href=""https://github.com/nicolo-ribaudo""><code>@​nicolo-ribaudo</code></a>)</li>
</ul>
</li>
</ul>
<!-- raw HTML omitted -->
</blockquote>
<p>... (truncated)</p>
</details>
<details>
<summary>Commits</summary>
<ul>
<li><a
href=""https://github.com/babel/babel/commit/1bce5c9d51abda279f374b54cef79939c3cc608d""><code>1bce5c9</code></a>
v7.23.3</li>
<li><a
href=""https://github.com/babel/babel/commit/4fb4fa63e7d15b3993d466e79d5051ab1b1b8989""><code>4fb4fa6</code></a>
Avoid dynamic dispatch when calling wrapCheck (<a
href=""https://github.com/babel/babel/tree/HEAD/packages/babel-traverse/issues/16060"">#16060</a>)</li>
<li><a
href=""https://github.com/babel/babel/commit/6d9725cd62511816a1ac6a0ef6a4ef078fea6359""><code>6d9725c</code></a>
[babel 8] Inline <code>toSequenceExpression</code> into
<code>@babel/traverse</code> (<a
href=""https://github.com/babel/babel/tree/HEAD/packages/babel-traverse/issues/16057"">#16057</a>)</li>
<li><a
href=""https://github.com/babel/babel/commit/b4b9942a6cde0685c222eb3412347880aae40ad5""><code>b4b9942</code></a>
v7.23.2</li>
<li><a
href=""https://github.com/babel/babel/commit/b13376b346946e3f62fc0848c1d2a23223314c82""><code>b13376b</code></a>
Only evaluate own String/Number/Math methods (<a
href=""https://github.com/babel/babel/tree/HEAD/packages/babel-traverse/issues/16033"">#16033</a>)</li>
<li><a
href=""https://github.com/babel/babel/commit/ca58ec15cb6dde6812c36997477e44880bec0bba""><code>ca58ec1</code></a>
v7.23.0</li>
<li><a
href=""https://github.com/babel/babel/commit/0f333dafcf470f1970083e4e695ced6aec8bead0""><code>0f333da</code></a>
Add <code>createImportExpressions</code> parser option (<a
href=""https://github.com/babel/babel/tree/HEAD/packages/babel-traverse/issues/15682"">#15682</a>)</li>
<li><a
href=""https://github.com/babel/babel/commit/3744545649fdc21688a2f3c97e1e39dbebff0d21""><code>3744545</code></a>
Fix linting</li>
<li><a
href=""https://github.com/babel/babel/commit/c7e6806e2194deb36c330f543409c792592b22d4""><code>c7e6806</code></a>
Add <code>t.buildUndefinedNode</code> (<a
href=""https://github.com/babel/babel/tree/HEAD/packages/babel-traverse/issues/15893"">#15893</a>)</li>
<li><a
href=""https://github.com/babel/babel/commit/38ee8b4dd693f1e2bd00107bbc1167ce84736ea0""><code>38ee8b4</code></a>
Expand evaluation of global built-ins in <code>@babel/traverse</code>
(<a
href=""https://github.com/babel/babel/tree/HEAD/packages/babel-traverse/issues/15797"">#15797</a>)</li>
<li>Additional commits viewable in <a
href=""https://github.com/babel/babel/commits/v7.23.3/packages/babel-traverse"">compare
view</a></li>
</ul>
</details>
<br />


[![Dependabot compatibility
score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=@babel/traverse&package-manager=npm_and_yarn&previous-version=7.14.2&new-version=7.23.3)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)

Dependabot will resolve any conflicts with this PR as long as you don't
alter it yourself. You can also trigger a rebase manually by commenting
`@dependabot rebase`.

[//]: # (dependabot-automerge-start)
[//]: # (dependabot-automerge-end)

---

<details>
<summary>Dependabot commands and options</summary>
<br />

You can trigger Dependabot actions by commenting on this PR:
- `@dependabot rebase` will rebase this PR
- `@dependabot recreate` will recreate this PR, overwriting any edits
that have been made to it
- `@dependabot merge` will merge this PR after your CI passes on it
- `@dependabot squash and merge` will squash and merge this PR after
your CI passes on it
- `@dependabot cancel merge` will cancel a previously requested merge
and block automerging
- `@dependabot reopen` will reopen this PR if it is closed
- `@dependabot close` will close this PR and stop Dependabot recreating
it. You can achieve the same result by closing it manually
- `@dependabot show <dependency name> ignore conditions` will show all
of the ignore conditions of the specified dependency
- `@dependabot ignore this major version` will close this PR and stop
Dependabot creating any more for this major version (unless you reopen
the PR or upgrade to it yourself)
- `@dependabot ignore this minor version` will close this PR and stop
Dependabot creating any more for this minor version (unless you reopen
the PR or upgrade to it yourself)
- `@dependabot ignore this dependency` will close this PR and stop
Dependabot creating any more for this dependency (unless you reopen the
PR or upgrade to it yourself)
You can disable automated security fix PRs for this repo from the
[Security Alerts
page](https://github.com/facebook/react/network/alerts).

</details>

Signed-off-by: dependabot[bot] <support@github.com>
Co-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>",dependabot[bot],2023-11-16T19:08:02Z
94348be2d96b769a961bafc368fc52b64a6ab62c,"Enable ValidateNoSetStateInRender in ESLint plugin 

Same as previous: this rule is working accurately with no false positives, let's 
enable it.",Joe Savona,2023-11-16T15:52:13Z
2c338b16fd97634dba907f7ad612f64893dcb01c,"Added windows powershell syntax to build scripts (#27692)

## Summary

I had to change the commands to be windows specific so that it doesn't
cause any crashes

## How did you test this change?

I successfully built the different types of devtools extenstions on my
personal computer. In future may need to add a github action with
windows config to test these errors

 #27193",PrathamLalwani,2023-11-16T11:35:43Z
7b6b3706386f9416c4556e7249f36f841f3d964d,"Consolidate ValidateNoSetStateInRender flags 

I ran the plugin with the extended version of ValidateNoSetStateInRender enabled 
(incl. function expressions) and there are no false positives. Let's remove the 
flag for the function expression case since the whole rule is working 
accurately.",Joe Savona,2023-11-15T21:05:24Z
6a1343c82be8382cfa46605233334b7d1707dea9,"Repro of undefined expressioncontainer expression 

Repro from T169063835. This works, but since it came up it seems good to add a 
test case for it just in case there's something funny here that we could regress 
on w/o realizing it.",Joe Savona,2023-11-15T22:23:53Z
df42058237fdc0420116529a257f9550bce3312f,"Fix variable-resolution hoisting issues 

Fixes one category of bugs with const hoisting. The algorithm finds all consts 
that need to be hoisted, then looks through the statements of a block to find 
the first statement which references that const, delaying the emission of the 
HoistedConst instruction until its actually used. To determine if a statement 
references a const we find every identifier in the statement and check if its 
binding is one of the hoisted bindings. 

There's a very small bug here: when we resolve the binding of each identifier, 
we need to resolve it in its own scope. We're currently resolving these 
identifiers agains the outer block statement's scope, which can cause us to 
misattribute identifiers when there is shadowing: 

``` 

const items = props.items.map(x => x); // we scan this statement, resolve 'x' in 
the block statement scope, and mis-attribute it to the outer x. 

const x = 42; // (1) this x is a candidate for hoisting, so the binding is in 
the set of hoisted consts 

```",Joe Savona,2023-11-16T00:55:01Z
b55ccb1b84e4fb7f15a092c05b6c159c397c9922,"Repro for hoisting bug 

I had added a repro for this earlier but hadn't realized it was due to const 
hoisting. Renaming this test to clarify what's causing the problem and to make 
it easier to find.",Joe Savona,2023-11-16T00:34:28Z
eacf189eca0af417f3250b9bbf15a987e3710da3,"[playground] Remove button from error message 

We show the entire error in panel, no need to click to console.log 

This makes it easier to copy the error now. 

Before: 


https://github.com/facebook/react-forget/assets/565765/4c13abfe-a06d-4580-b3d7-b02792f53e57 

After: 


https://github.com/facebook/react-forget/assets/565765/0dff95cc-5207-48a5-a0b6-2055cadcb780",Sathya Gunasekaran,2023-11-16T12:01:59Z
ee68446ff198755bd38202ac9139275b657968b0,"[Fizz] handle errors in `onHeaders` (#27712)

`onHeaders` can throw however for now we can assume that headers are
optimistic values since the only things we produce for them are preload
links. This is a pragmatic decision because React could concievably have
headers in the future which were not optimistic and thus non-optional
however it is hard to imagine what these headers might be in practice.
If we need to change this behavior to be fatal in the future it would be
a breaking change.

This commit adds error logging when `onHeaders` throws and ensures the
request can continue to render successfully.",Josh Story,2023-11-15T20:53:38Z
369c315ac49806f5869ec3754cbd9747fe72993d,"[hir] Update error message to say global 

This is non ideal but at least it's a step in the right direction. 

Getting the correct error requires us to track every identifier and global, 
which seems a bit excessive for now. 

We can revisit and improve this error if this is starting to confuse folks.",Sathya Gunasekaran,2023-11-15T17:03:55Z
392a4fd9da8ff45f8cd050a17d4a01d89fc0c25f,"[test] Add tests for mutating a global 

The error is thrown correctly but the error message is incorrect.",Sathya Gunasekaran,2023-11-15T17:03:51Z
306fe03e7897199175780f80974b05bf376ad4f9,[printer] Print function name if available,Sathya Gunasekaran,2023-11-15T09:36:32Z
58947d907587272cd9a8e6106a3fca6b59bbd317,"[babel] Rename isReactFunction to isReactAPI 

Disambiguates better between this and the existing `isReactFunctionLike` 
function.",Sathya Gunasekaran,2023-11-15T09:36:31Z
696434fed83215829c6d907999ad7d636aa0baf5,Fix ValidateNoSetStateInRender for loops,Joe Savona,2023-11-14T19:33:39Z
aec521a96d3f1bebc2ba38553d14f4989c6e88e0,"fix[devtools/useMemoCache]: implement a working copy of useMemoCache (#27659)

In https://github.com/facebook/react/pull/27472 I've removed broken
`useMemoCache` implementation and replaced it with a stub. It actually
produces errors when trying to inspect components, which are compiled
with Forget.

The main difference from the implementation in
https://github.com/facebook/react/pull/26696 is that we are using
corresponding `Fiber` here, which has patched `updateQueue` with
`memoCache`. Previously we would check it on a hook object, which
doesn't have `updateQueue`.

Tested on pages, which are using Forget and by inspecting elements,
which are transpiled with Forget.",Ruslan Lesiutin,2023-11-14T18:23:39Z
c434ef4b704ede228471697a49ba1e48d9d2486b,"[validation] Patch false positives for hook calls after loops 

--- 

We were throwing `InvalidReact` errors on valid inputs. 

```js 

// Input 

function Foo() { 

log(""block0""); 

for (const _ of foo) { 

log(""loop""); 

} 

useBar(); 

} 

// IR 

bb0: 

// log(""block0""); 

ForOf init=bb2 loop=bb3 fallthrough=bb1 

bb2: 

// init 

Branch: then:bb3 else:bb1 

bb3: 

// log(""loop"") 

Goto(Continue) bb2 

bb1: 

// useBar(); 

Return 

``` 

We correctly compute post dominators here. 

```js 

// In validateUnconditionalHooks 

console.log(dominators.debug()); 

/* Output: 

(read x => y as x is the post-dominator for y (all paths from x to the exit must 
go through y)) 

""bb4"" => ""bb4"", 

""bb1"" => ""bb4"", 

""bb2"" => ""bb1"", 

""bb3"" => ""bb2"", 

""bb0"" => ""bb2"", 

*/ 

``` 

However, `findBlocksWithBackEdges` prevented us from adding `bb1` to the 
`unconditionalBlocks` set as `bb2` (its post dominator) has a back edge. I'm not 
sure what the `findBlocksWithBackEdges` was doing previously, so I replaced it 
with an invariant asserting that the loop terminates.",Mofei Zhang,2023-11-14T18:04:31Z
00abc5acf5e02fc72b1f7107d803efcdb358f441,"[be][tests] Run todo fixtures 

--- 

Snap should compile all fixtures to record changes in results, even `todo` 
prefixed ones. Previously, they were skipped as we noted the correlation of `// 
@skip` pragmas and file naming. 

Now, no fixture should be skipped as our compiler pipeline should be able to 
handle every kind of error.",Mofei Zhang,2023-11-14T18:04:28Z
593ecee66a609d4a4c2b36b39b1e5e23b2456dd1,"Add a feature flag to enable expiration of retry lanes (#27694)

An attempt to see if we can bring back expiration of retry lanes to
avoid cases resolving Suspense can be starved by frequent updates.

In the past, this caused increase browser crashes, but a lot of time has
passed since then. Just trying if we can re-enable this.

Old PR that reverted adding the timeout:
https://github.com/facebook/react/pull/21300",Jan Kassens,2023-11-14T15:15:17Z
2efd85f145c021ac61098844b69353fc49b3878d,Convert CompilationModeScham to zod type,Sathya Gunasekaran,2023-11-14T11:46:26Z
084e4325b9eaa26d4c5313f55c2d612579d379fb,Convert PanicThresholdOptions to zod type,Sathya Gunasekaran,2023-11-14T11:46:23Z
0821a57fa88021ffaca92043653c7ff8646f89ba,"[playground] Capture Babel parsing errors 

Before: 

<img width=""1416"" alt=""Screenshot 2023-11-14 at 9 09 53 AM"" 
src=""https://github.com/facebook/react-forget/assets/565765/f53daf34-080a-4804-9a61-77c141c05d21""> 

After: 

<img width=""1444"" alt=""Screenshot 2023-11-14 at 9 09 45 AM"" 
src=""https://github.com/facebook/react-forget/assets/565765/8861c266-9a49-4ff7-99cd-7240ca1750b1"">",Sathya Gunasekaran,2023-11-14T18:24:38Z
07d6c6d8aad8767f1b6dc9b6724e60951df5598d,"[playground] Show error when compiling unsupported functions 

Before: 

<img width=""1117"" alt=""Screenshot 2023-11-14 at 9 11 28 AM"" 
src=""https://github.com/facebook/react-forget/assets/565765/d1ec2b5f-1bc5-4d29-9811-effcd39581e4""> 

After: 

<img width=""1115"" alt=""Screenshot 2023-11-14 at 9 11 18 AM"" 
src=""https://github.com/facebook/react-forget/assets/565765/9a41889c-cf7b-4f31-8b6e-e26bfb204883"">",Sathya Gunasekaran,2023-11-14T09:10:31Z
0794aacdbf8b3a995cdbb49966c716cf8d6d224f,"Turn off validateNoSetStateInRender in babel-plugin 

There's false positives that we found in the Eslint plugin",Sathya Gunasekaran,2023-11-14T16:59:10Z
1641f94a8688c45c19261650c4df3fb516f41da4,"[eslint] Turn off validations 

We're seeing false positives",Sathya Gunasekaran,2023-11-14T16:59:09Z
07cc4a0002d0bbaaf8910404895eeb9c199831c4,"[Flight] Bound server references should be able to be bound again (#27695)

Wasn't consistent. Probably should use a shared helper maybe.",Sebastian Markbåge,2023-11-14T03:45:40Z
3da32312e7fff891330da287256a9973ad195e19,"[globals] type useEffect return value as primitive 

useEffect returns undefined",Sathya Gunasekaran,2023-11-13T10:51:08Z
480c11bdb199794160cab0ede3a7b696e47edb98,"[hoisting] Make hoisting related errors consolidatable 

Noticed from our paste that we weren't correctly rolling up hoisting related 
errors due to specific information being in the error title, so this PR moves 
them into description instead.",Lauren Tan,2023-11-13T21:54:54Z
800b874ed1841220e97737136a3a18b1a139eb31,"fix main 

Forgot to update snapshots when addressing PR feedback.",Joe Savona,2023-11-13T21:14:27Z
e6c5c9a0053a466b3049e3bd4513b92b5c18e1c5,"Improve NoSetStateInRender function expression check 

Updates the approach used in ValidateNoSetStateInRender to detect function 
expressions called during render. We now do the following: 

* Track function expression which are known to unconditionally call setState 
themselves- if these functions get called, that’s equivalent to calling 
setState. We call the validation recursively to compute this. 

* Track LoadLocal/StoreLocal indirections for such function expressions. 

* Check CallExpressions where the callee is either a known SetState (via type 
info) _or_ (new) where the callee is in the set of known-to-setState function 
expressions. 

The Set is shared throughout the analysis, so we can even find multiple levels 
of indirection (see new test case).",Joe Savona,2023-11-13T19:28:16Z
dcbdf064915fc2187687acc12cf62232ab2b2a47,"Extra test case related to memoization ""within"" freeze 

I found an interesting edge case in the previous diff with mutation of a value 
that appears in the expression of an object key: 

```javascript 

const key = {} 

const object = { 

[mutateAndReturnOtherValue(key)]: 42, 

}; 

mutate(key); 

``` 

We analyze and represent this correctly all the way through to codegen, but then 
we hit the bug that @mofeiZ has noticed before: the temporary for `t = 
mutateAndReturnOtherValue(key)` isn't emitted immediately (bc its a temporary). 
It gets emitted inside the memo block for `object`, which is incorrect. 

I tried to reproduce that here with JSX and it works as expected. It's an 
interesting case though so let's land this to ensure we don't regress.",Joe Savona,2023-11-13T19:03:00Z
8d415296009b3a014e4d4678c41a9520d5acd894,Support computed object keys,Joe Savona,2023-11-13T17:55:52Z
f47685c6020cf3a9b5cec21e2c6eef02c7303ec6,[be] Flag and test for unexpected exceptions during compilations,Mofei Zhang,2023-11-12T19:56:10Z
7db2388fff15a6c66a9b9e96ce596ccd3c98f099,[be] tsconfig: useUnknownInCatchVariables,Mofei Zhang,2023-11-12T19:44:15Z
3d2a05490f89676678080a598b6ac5a44e90fd7a,Update eslint plugin to enable more safe validations,Joe Savona,2023-11-11T01:08:26Z
fc85f24865a62f0cd3395fadf387b4f467be7f0c,"Separate flag for ref access violation within function expressions 

Adds a separate compiler flag for enabling the incomplete validation of ref 
access within function expressions. Unlike the previous PR for 
set-state-in-render validation, ref access in render can be okay in some 
circumstances so i'm leaving this off by default. The point of splitting this up 
is that our linting will be able to enable the rule without risk of false 
positives.",Joe Savona,2023-11-11T01:07:21Z
6e038f96990d18d06ca9480b2c16c15437de51cf,"Partially enable validateNoSetStateInRender 

The approach i initially took to validating function expressions was to try to 
extend the mutable range if they are called during render, and then use the 
mutable range of a function to determine if it's called during render later. 
However there are cases where the range can be extended for other reasons, as 
@poteto discovered, so we can't rely on the range extension. We've had several 
of our validations completely off as a result of this. 

In this PR i'm re-enabling @poteto's ValidateNoSetStateInRender pass by default, 
but making the function expression checking use a separate compiler flag. This 
means we'll have some false negatives, but should guarantee that we avoid false 
positives. This means we can definitely catch things like: 

``` 

const [state, setState] = useState(false); 

setState(true); 

``` 

Which we would have allowed by default before.",Joe Savona,2023-11-11T00:52:29Z
c08b7be34eb09868a49dfc52102375c5f6a1336b,[be] Add comments for LoggerEvent type,Mofei Zhang,2023-11-10T22:09:31Z
9965db70bdb7b97a12e791e1463d67fe169c2b50,"Revert ""[babel] Remove unused PipelineError"" 

This reverts commit 10d129a8406e9d226abdb6943bf8512e34ce91db 

--- 

Reverts #2311 due to undocumented assumptions being broken. I also added some 
comments to `LoggerEvents` to explain each event type. 

In `Program.ts`, we have something like the following code. `compile` could 
produce any number of errors (not just expected errors / instances of 
`CompilerError`). As an example, we sometimes error in `Codegen` due to babel 
version incompatibilities (`Error: ObjectMethod: Too many arguments passed. 
Received 7 but can receive no more than 5`). 

```js 

try { 

// any error could be thrown here 

compile(input); 

} catch (e) { 

// unknown type for e 

handleError(e, ...); 

} 

```",Mofei Zhang,2023-11-10T22:09:29Z
432b9f1d9729aaea010730d546bda89b9842eaa1,"Upgrade Flow to 0.221.0 (#27689)

Upgrades Flow and dependencies
```
yarn add -W flow-bin flow-remove-types hermes-parser hermes-eslint
```",Jan Kassens,2023-11-10T19:14:53Z
6b3834a45b585e4340734139841ae81dc1b1a75d,"Guard against unmounted components when accessing public instances on Fabric (#27687)

## Summary

This fixes an error in `getPublicInstanceFromInstanceHandle` where we
throw an error when trying to access the public instance from the fiber
of an unmounted component. This shouldn't throw but return `null`
instead.

## How did you test this change?

Updated unit tests.
Before: 
<img width=""969"" alt=""Screenshot 2023-11-10 at 15 26 14""
src=""https://github.com/facebook/react/assets/117921/ea161616-2775-4fab-8d74-da4bef48d09a"">

After: 
<img width=""1148"" alt=""Screenshot 2023-11-10 at 15 28 37""
src=""https://github.com/facebook/react/assets/117921/db18b918-b6b6-4925-9cfc-3b4b2f3ab92d"">",Rubén Norte,2023-11-10T15:49:07Z
6a7f3aa858b3a8670d6a4861e30f248b335e55bd,"[FeatureFlags] Enable useMemoCache for ReactTestRenderer (#27677)

## Summary
Forget compiled code currently cannot be tested with ReactTestRender as
`useMemoCache` is not being set on the dispatcher. This PR ensures that
projects can execute unit tests with Forget compilation in the test
build pipeline.

```js
// source code
function Component(props) {
  // ...
}

// transformed code, which also should be evaluated in unit tests
function Component(props) {
  const $ = useMemoCache(...);
  // ...
}
```

This PR enables the `enableUseMemoCacheHook` feature flag for all bundle
variations of ReactTestRenderer. Forget *should* be the only caller of
useMemoCache, so this should be a reversible change (in the event we
need to change the implementation or api of the hook).

## How did you test this change?
* Check that generated ReactTestRenderer bundles contain `useMemoCache`.
* Synced to Meta and checked that unit tests that use Forget +
@testing-library/react pass.

I did not add new tests to check that useMemoCache can be called when
using the test renderer as `useMemoCache` is not yet stable. Happy to
add a test case here if that would be helpful to reviewers though (I'm
guessing that would go in
`packages/react-test-renderer/src/__tests__/ReactTestRenderer-test.js` )",mofeiZ,2023-11-10T15:31:38Z
c4c87e049b891ebc38a7a14b8c93285c877e90af,"Small cleanup in ReactFiberCompleteWork (#27681)

These are all functionally equivalent changes.

- remove double negation and more explicit naming of
`hadNoMutationsEffects`
- use docblock syntax that's consumed by Flow
- remove useless cast",Jan Kassens,2023-11-10T15:20:52Z
0e352ea01c0209b6c5e23f0e857af4e01c783024,"[Fizz] Fix for failing id overwrites for postpone (#27684)

When we postpone during a render we inject a new segment synchronously
which we postpone. That gets assigned an ID so we can refer to it
immediately in the postponed state.

When we do that, the parent segment may complete later even though it's
also synchronous. If that ends up not having any content in it, it'll
inline into the child and that will override the child's segment id
which is not correct since it was already assigned one.

To fix this, we simply opt-out of the optimization in that case which is
unfortunate because we'll generate many more unnecessary empty segments.
So we should come up with a new strategy for segment id assignment but
this fixes the bug.

Co-authored-by: Josh Story <story@hey.com>",Sebastian Markbåge,2023-11-10T03:52:31Z
78c71bc545bf5c0fdeedc023b69fafe05d988067,"refactor[ci/build]: dont generate sourcemaps for BROWSER_SCRIPT bundles (#27665)

Instead of https://github.com/facebook/react/pull/27664, we can just
exclude `unstable_server-external-runtime.js` from having sourcemaps for
now.

We should consider removing manual copying of this artifact in
https://github.com/facebook/react/blob/52d542ad6d410008c495084f511247f43387055f/.github/workflows/commit_artifacts.yml#L136-L138


As described in https://github.com/facebook/react/pull/27664, this
artifact doesn't have any effect on the `hash`, which is used for
generating React version identifier.",Ruslan Lesiutin,2023-11-09T16:11:17Z
c47c306a7a23d3c796b148d303764e2832da480c,"refactor[ci/build]: preserve header format in artifacts (#27671)

In order to make Haste work with React's artifacts, It is important to
keep headers in this format:
```
/**
* ...
...
* ...
*/
```

For optimization purposes, Closure compiler will actually modify these
headers by removing * prefixes, which is expected.
We should pass sources to the compiler without license headers, with
these changes the current flow will be:
1. Apply top-level definitions. For UMD-bundles, for example, or
DEV-only bundles (e. g. `if (__DEV__) { ...`)
2. Apply licence headers for artifacts with sourcemaps: oss-production
and oss-profiling bundles, they don't need to preserve the header format
to comply with Haste. We need to apply these headers before passing
sources to Closure, so it can build correct mappings for sourcemaps.
3. Pass these sources to closure compiler for minification and
sourcemaps building.
4. Apply licence headers for artifacts without sourcemaps: dev bundles,
fb bundles. This way the header style will be preserved and not changed
by Closure.",Ruslan Lesiutin,2023-11-09T16:00:21Z
7bdd7cc2d8aca24ea46474ee8a5a5e300109332e,"Upgrade Flow to 0.220.1 (#27680)

Upgrade Flow to latest using
```
yarn add -W flow-bin flow-remove-types hermes-parser hermes-eslint
```

This also updates `createFlowConfigs.js` to get the Flow version from
`package.json` to avoid needing to bump the version there in the future.",Jan Kassens,2023-11-09T15:53:08Z
bd3661020e325378efd0bd2fe3e391ded9923ce0,Add test for bailouts skipping compilation,Sathya Gunasekaran,2023-11-09T12:00:37Z
69eb9ccccc93d0ac4bf63e64c515e544c6dbff16,[snap] Add option to set panicThreshold,Sathya Gunasekaran,2023-11-09T12:00:34Z
f92a058ca5ebde1566d70f85cfd40d7fb5cfc38b,Codegen comments to explain output,Joe Savona,2023-11-10T19:45:29Z
746890329452cbec8685eb3466847c5f17d9dc77,"[Static][Fizz] bootstrap scripts should only emit once (#27674)

I introduced a bug in a recent change to how bootstrap scripts are
handled. Rather than clearing out the bootstrap script state from
ResumableState on completion of the prerender I did it during the
flushing phase which comes later after the postponed state has likely
been serialized. We should freeze these objects in dev so this is not
possible to do easily in test (nor in actual code in real systems).

This fixes the bug by eliminating the bootstrap config during
getPostponedState which is before the state can be serialized.",Josh Story,2023-11-09T01:51:47Z
7508dcd5cc245e376860d65402972e418199264d,"[Static][Fizz] Carry forward bootstrap config to resume if postponing in the shell (#27672)

Previously it was possible to postpone in the shell during a prerender
and then during a resume the bootstrap scripts would not be emitted
leading to no hydration on the client. This change moves the bootstrap
configuration to `ResumableState` where it can be serialized after
postponing if it wasn't flushed as part of the static shell.",Josh Story,2023-11-08T18:43:38Z
88b00dec4778ffa230cceca81af3328f49e1efd9,"Update stack diffing algorithm in describeNativeComponentFrame (#27132)

## Summary

There's a bug with the existing stack comparison algorithm in
`describeNativeComponentFrame` — specifically how it attempts to find a
common root frame between the control and sample stacks. This PR
attempts to fix that bug by injecting a frame that can have a guaranteed
string in it for us to search for in both stacks to find a common root.

## Brief Background/How it works now

Right now `describeNativeComponentFrame` does the following to leverage
native browser/VM stack frames to get details (e.g. script path, row and
col #s) for a single component:
1. Throwing and catching a control error in the function
2. Calling the component which should eventually throw an error (most of
the time), that we'll catch as our sample error.
3. Diffing the stacks in the control and sample errors to find the line
which should represent our component call.

## What's broken

To account for potential stack trace truncation, the stack diffing
algorithm first attempts to find a common ""root"" frame by inspecting the
earliest frame of the sample stack and searching for an identical frame
in the control stack starting from the bottom. However, there are a
couple of scenarios which I've hit that cause the above approach to not
work correctly.

First, it's possible that for render passes of extremely large component
trees to have a lot of repeating internal react function calls, which
can result in an incorrect common or ""root"" frame found. Here's a small
example from a stack trace using React Fizz for SSR.
Our control frame can look like this:
```
Error:
    at Fake (...)
    at construct (native)
    at describeNativeComponentFrame (...)
    at describeClassComponentFrame (...)
    at getStackByComponentStackNode (...)
    at getCurrentStackInDEV (...)
    at renderNodeDestructive (...)
    at renderElement (...)
    at renderNodeDestructiveImpl (...) // <-- Actual common root frame with the sample stack
    at renderNodeDestructive (...)
    at renderElement (...)
    at renderNodeDestructiveImpl (...) // <-- Incorrectly chosen common root frame
    at renderNodeDestructive (...)
```

And our sample stack can look like this:
```
Error:
    at set (...)
    at PureComponent (...)
    at call (native)
    at apply (native)
    at ErrorBoundary (...)
    at construct (native)
    at describeNativeComponentFrame (...)
    at describeClassComponentFrame (...)
    at getStackByComponentStackNode (...)
    at getCurrentStackInDEV (...)
    at renderNodeDestructive (...)
    at renderElement (...)
    at renderNodeDestructiveImpl (...) // <-- Root frame that's common in the control stack
```

Here you can see that the earliest trace in the sample stack, the
`renderNodeDestructiveImpl` call, can exactly match with multiple
`renderNodeDestructiveImpl` calls in the control stack (including file
path and line + col #s). Currently the algorithm will chose the
earliest/last frame with the `renderNodeDestructiveImpl` call (which is
the second last frame in our control stack), which is incorrect. The
actual matching frame in the control stack is the latest or first frame
(when traversing from the top) with the `renderNodeDestructiveImpl`
call. This leads to the rest of the stack diffing associating an
incorrect frame (`at getStackByComponentStackNode (...)`) for the
component.

Another issue with this approach is that it assumes all VMs will
truncate stack traces at the *bottom*, [which isn't the case for the
Hermes
VM](https://github.com/facebook/hermes/blob/df07cf713a84a4434c83c08cede38ba438dc6aca/lib/VM/JSError.cpp#L688-L699)
which **truncates stack traces in the middle**, placing a

```
    at renderNodeDestructiveImpl (...)
    ... skipping {n} frames
    at renderNodeDestructive (...)
```

line in the middle of the stack trace for all stacks that contain more
than 100 traces. This causes stack traces for React Native apps using
the Hermes VM to potentially break for large component trees. Although
for this specific case with Hermes, it's possible to account for this by
either manually grepping and removing the `... skipping` line and
everything below it (see draft PR: #26999), or by implementing the
non-standard `prepareStackTrace` API which Hermes also supports to
manually generate a stack trace that truncates from the bottom ([example
implementation](https://github.com/facebook/react/compare/main...KarimP:react:component-stack-hermes-fix)).

## The Fix

I found different ways to go about fixing this. The first was to search
for a common stack frame starting from the top/latest frame. It's a
relatively small change ([see
implementation](https://github.com/facebook/react/compare/main...KarimP:react:component-stack-fix-2)),
although it is less performant by being n^2 (albeit with `n`
realistically being <= 5 here). It's also a bit more buggy for class
components given that different VMs insert a different amount of
additional lines for new/construct calls...

Another fix would be to actually implement a [longest common
substring](https://en.wikipedia.org/wiki/Longest_common_substring)
algorithm, which can also be roughly n^2 time (assuming the longest
common substring between control and sample will be most of the sample
frame).

The fix I ended up going with was have the lines that throw the control
error and the lines that call/instantiate the component be inside a
distinct method under an object property
(`""DescribeNativeComponentFrameRoot""`). All major VMs (Safari's
JavaScriptCore, Firefox's SpiderMonkey, V8, Hermes, and Bun) should
display the object property name their stack trace. I've also set the
`name` and `displayName` properties for method as well to account for
minification, any advanced optimizations (e.g. key crushing), and VM
inconsistencies (both Bun and Safari seem to exclusively use the value
under `displayName` and not `name` in traces for methods defined under
an object's own property...).

We can then find this ""common"" frame by simply finding the line that has
our special method name (`""DescribeNativeComponentFrameRoot""`), and the
rest of the code to determine the actual component line works as
expected. If by any chance we don't find a frame with our special method
name in either control or sample stack traces, we then revert back to
the existing approach mentioned above by searching for the last line of
the sample frame in the control frame.

## How did you test this change?

1. There are bunch of existing tests that ensure a properly formatted
component trace is logged for certain scenarios, so I ensured the
existing full test suite passed
2. I threw an error in a component that's deep in the component
hierarchy of a large React app (facebook) to ensure there's stack trace
truncation, and ensured the correct component stack trace was logged for
Chrome, Safari, and Firefox, and with and without minification.
3. Ran a large React app (facebook) on the Hermes VM, threw an error in
a component that's deep in the component hierarchy, and ensured that
component frames are generated despite stack traces being truncated in
the middle.",Karim Piyar Ali,2023-11-08T16:45:31Z
52d542ad6d410008c495084f511247f43387055f,"Enable enableUnifiedSyncLane (#27646)

<!--
  Thanks for submitting a pull request!
We appreciate you spending the time to work on these changes. Please
provide enough information so that others can review your pull request.
The three fields below are mandatory.

Before submitting a pull request, please make sure the following is
done:

1. Fork [the repository](https://github.com/facebook/react) and create
your branch from `main`.
  2. Run `yarn` in the repository root.
3. If you've fixed a bug or added code that should be tested, add tests!
4. Ensure the test suite passes (`yarn test`). Tip: `yarn test --watch
TestName` is helpful in development.
5. Run `yarn test --prod` to test in the production environment. It
supports the same options as `yarn test`.
6. If you need a debugger, run `yarn test --debug --watch TestName`,
open `chrome://inspect`, and press ""Inspect"".
7. Format your code with
[prettier](https://github.com/prettier/prettier) (`yarn prettier`).
8. Make sure your code lints (`yarn lint`). Tip: `yarn linc` to only
check changed files.
  9. Run the [Flow](https://flowtype.org/) type checks (`yarn flow`).
  10. If you haven't already, complete the CLA.

Learn more about contributing:
https://reactjs.org/docs/how-to-contribute.html
-->

## Summary

<!--
Explain the **motivation** for making this change. What existing problem
does the pull request solve?
-->
The flag has been tested internally on WWW, should be good to set to
true for OSS. Added a dynamic flag for fb RN.

## How did you test this change?

<!--
Demonstrate the code is solid. Example: The exact commands you ran and
their output, screenshots / videos if the pull request changes the user
interface.
How exactly did you verify that your PR solves the issue you wanted to
solve?
  If you leave this empty, your PR will very likely be closed.
-->
yarn test",Tianyu Yao,2023-11-08T00:45:33Z
2c8a139a593e0294c3a6953d74b451bd05fdcfca,"Generate sourcemaps for production build artifacts (#26446)

<!--
  Thanks for submitting a pull request!
We appreciate you spending the time to work on these changes. Please
provide enough information so that others can review your pull request.
The three fields below are mandatory.

Before submitting a pull request, please make sure the following is
done:

1. Fork [the repository](https://github.com/facebook/react) and create
your branch from `main`.
  2. Run `yarn` in the repository root.
3. If you've fixed a bug or added code that should be tested, add tests!
4. Ensure the test suite passes (`yarn test`). Tip: `yarn test --watch
TestName` is helpful in development.
5. Run `yarn test --prod` to test in the production environment. It
supports the same options as `yarn test`.
6. If you need a debugger, run `yarn test --debug --watch TestName`,
open `chrome://inspect`, and press ""Inspect"".
7. Format your code with
[prettier](https://github.com/prettier/prettier) (`yarn prettier`).
8. Make sure your code lints (`yarn lint`). Tip: `yarn linc` to only
check changed files.
  9. Run the [Flow](https://flowtype.org/) type checks (`yarn flow`).
  10. If you haven't already, complete the CLA.

Learn more about contributing:
https://reactjs.org/docs/how-to-contribute.html
-->

## Summary

This PR updates the Rollup build pipeline to generate sourcemaps for
production build artifacts like `react-dom.production.min.js`.
 
It requires the Rollup v3 changes that were just merged in #26442 .

Sourcemaps are currently _only_ generated for build artifacts that are
_truly_ ""production"" - no sourcemaps will be generated for development,
profiling, UMD, or `shouldStayReadable` artifacts.

The generated sourcemaps contain the bundled source contents right
before that chunk was minified by Closure, and _not_ the original source
files like `react-reconciler/src/*`. This better reflects the actual
code that is running as part of the bundle, with all the feature flags
and transformations that were applied to the source files to generate
that bundle. The sourcemaps _do_ still show comments and original
function names, thus improving debuggability for production usage.

Fixes #20186 .




<!--
Explain the **motivation** for making this change. What existing problem
does the pull request solve?
-->

This allows React users to actually debug a readable version of the
React bundle in production scenarios. It also allows other tools like
[Replay](https://replay.io) to do a better job inspecting the React
source when stepping through.

## How did you test this change?

- Generated numerous sourcemaps with various combinations of the React
bundle selections
- Viewed those sourcemaps in
https://evanw.github.io/source-map-visualization/ and confirmed via the
visualization that the generated mappings appear to be correct

I've attached a set of production files + their sourcemaps here:


[react-sourcemap-examples.zip](https://github.com/facebook/react/files/11023466/react-sourcemap-examples.zip)

You can drag JS+sourcemap file pairs into
https://evanw.github.io/source-map-visualization/ for viewing.

Examples:

- `react.production.min.js`:


![image](https://user-images.githubusercontent.com/1128784/226478247-e5cbdee0-83fd-4a19-bcf1-09961d3c7da4.png)

- `react-dom.production.min.js`:


![image](https://user-images.githubusercontent.com/1128784/226478433-b5ccbf0f-8f68-42fe-9db9-9ecb97770d46.png)

- `use-sync-external-store/with-selector.production.min.js`:


![image](https://user-images.githubusercontent.com/1128784/226478565-bc74699d-db14-4c39-9e2d-b775f8755561.png)


<!--
Demonstrate the code is solid. Example: The exact commands you ran and
their output, screenshots / videos if the pull request changes the user
interface.
How exactly did you verify that your PR solves the issue you wanted to
solve?
  If you leave this empty, your PR will very likely be closed.
-->",Mark Erikson,2023-11-07T18:59:27Z
2983249dd2bb1a295f27939e36ab0de9e4bfab76,"[Fizz] implement `onHeaders` and `headersLengthHint` options (#27641)

Adds a new option to `react-dom/server` entrypoints.

`onHeaders: (headers: Headers) => void` (non node envs)
`onHeaders: (headers: { Link?: string }) => void` (node envs)

When any `renderTo...` or `prerender...` function is called and this
option is provided the supplied function will be called sometime on or
before completion of the render with some preload link headers.

When provided during a `renderTo...` the callback will usually be called
after the first pass at work. The idea here is we want to get a set of
headers to start the browser loading well before the shell is ready. We
don't wait for the shell because if we did we may as well send the
preloads as tags in the HTML.

When provided during a `prerender...` the callback will be called after
the entire prerender is complete. The idea here is we are not responding
to a live request and it is preferable to capture as much as possible
for preloading as Headers in case the prerender was unable to finish the
shell.

Currently the following resources are always preloaded as headers when
the option is provided
1. prefetchDNS and preconnects
2. font preloads
3. high priority image preloads

Additionally if we are providing headers when the shell is incomplete
(regardless of whether it is render or prerender) we will also include
any stylesheet Resources (ones with a precedence prop)

There is a second option `maxHeadersLength?: number` which allows you to
specify the maximum length of the header content in unicode code units.
This is what you get when you read the length property of a string in
javascript. It's improtant to note that this is not the same as the
utf-8 byte length when these headers are serialized in a Response. The
utf8 representation may be the same size, or larger but it will never be
smaller.

If you do not supply a `maxHeadersLength` we defaul to `2000`. This was
chosen as half the value of the max headers length supported by commonly
known web servers and CDNs. many browser and web server can support
significantly more headers than this so you can use this option to
increase the headers limit. You can also of course use it to be even
more conservative. Again it is important to keep in mind there is no
direct translation between the max length and the bytelength and so if
you want to stay under a certain byte length you need to be potentially
more aggressive in the maxHeadersLength you choose.

Conceptually `onHeaders` could be called more than once as new headers
are discovered however if we haven't started flushing yet but since most
APIs for the server including the web standard Response only allow you
to set headers once the current implementation will only call it one
time",Josh Story,2023-11-07T18:16:33Z
c897260cffb6a237d5ad707a6043f68ddf9ab014,"refactor[react-devtools-shared]: minor parsing improvements and modifications (#27661)

Had these stashed for some time, it includes:
- Some refactoring to remove unnecessary `FlowFixMe`s and type castings
via `any`.
- Optimized version of parsing component names. We encode string names
to utf8 and then pass it serialized from backend to frontend in a single
array of numbers. Previously we would call `slice` to get the
corresponding encoded string as a subarray and then parse each
character. New implementation skips `slice` step and just receives
`left` and `right` ranges for the string to parse.
- Early `break` instead of `continue` when Store receives unexpected
operation, like removing an element from the Store, which is not
registered yet.",Ruslan Lesiutin,2023-11-07T16:39:34Z
ce2bc58a9f6f3b0bfc8c738a0d8e2a5f3a332ff5,"[activity] rename unstable_Offscreen to unstable_Activity (#27640)

`Activity` is the current candidate name. This PR starts the rename work
by renaming the exported unstable component name.

NOTE: downstream consumers need to rename the import when updating to
this commit.",Jan Kassens,2023-11-02T20:13:21Z
a17467e7e2cd8947c595d1834889b5d184459f12,"SchedulerPostTask: Reuse original TaskController (#27595)

## Summary

It's not clear to me why we currently create a new TaskController in
`runTask` – ultimately, we use the same signal and priority from the
original created in `unstable_scheduleCallback`

## How did you test this change?
```
yarn test SchedulerPostTask
```",Noah Lemen,2023-11-02T15:03:30Z
956c1ee7e22dfd401f3e9dfa3d38989c6c74d670,Repro for bug with incorrectly using context variables when name overlaps,Joe Savona,2023-11-02T00:42:14Z
ab0f6985852219ec5e708b694f5da44e96c3c4c7,"More tests for fbt whitespace handling 

I experimented with more variations but prettier collapses most of them: any run 
of consecutive whitespace within a jsxtext node will get collapsed into a single 
space, for example. So the main difference in practice is whether a jsxtext node 
(preceding a value) has a trailing space/newline or not: 

``` 

Text <fbt:param /> Text 

// vs 

Text<fbt:param />Text 

``` 

which we now have tests for.",Joe Savona,2023-11-10T19:21:10Z
127b5df7ca491bafe42f370374b7a4b1a7a688a6,[be] Group fbt fixtures in directory,Joe Savona,2023-11-10T19:21:07Z
6f2fe1e7e97a18992c9aefe86d9f2242535f65cb,"Fix FBT whitespace handling (again (again)) 

Nice find, @mofeiZ! I really tried to thoroughly test all the examples I could 
think of for FBT whitespace but i missed the newline case. Initially Mofei found 
[this code potentially related to whitespace 
handling](https://github.com/facebook/fbt/blob/main/packages/babel-plugin-fbt/src/fbt-nodes/FbtImplicitParamNode.js#L230-L233) 
but Babel never seems to produce consecutive JsxText nodes — this looks like 
maybe a leftover from older babel versions. 

I noticed that code wasn't actually trimming the whitspace but clearly it was 
happening somewhere, so i grepped for 'trim' and found that [this 
code](https://github.com/facebook/fbt/blob/0b4e0d13c30bffd0daa2a75715d606e3587b4e40/packages/babel-plugin-fbt/src/babel-processors/JSXFbtProcessor.js#L143) 
calls a 
[normalizeSpaces](https://github.com/facebook/fbt/blob/0b4e0d13c30bffd0daa2a75715d606e3587b4e40/packages/babel-plugin-fbt/src/FbtUtil.js#L86C10-L86C45) 
helper. Updating our logic to handle whitespace similarly just for children of 
fbt nodes produces the expected result.",Joe Savona,2023-11-10T18:21:10Z
82ed13b8b421faf0c5b24c73442f3d5ed6a9e458,"[eslint] Don't inline everything 

Turns out this will cause an OOM in node.js when running eslint as part of the 
IDE 

``` Before: 16M   packages/eslint-plugin-react-forget/dist/index.js After:  2.2M 
 packages/eslint-plugin-react-forget/dist/index.js ```",Lauren Tan,2023-11-10T18:49:30Z
2927792dca1f7339a8c3777961786103d77aec46,Extra tests for #2339,Joe Savona,2023-11-10T17:25:40Z
4742d27f9e80aa2ffcc11b94978e4d4eb0936769,"[be] Clarify naming in scope merging pass 

Anytime we have a nested `.scope` in code my brain hurts. For example 
`scope.scope.dependencies`. This PR updates the scope merging pass to use the 
name `scopeBlock` for a ReactiveScopeBlock and `scope` only for ReactiveScope 
values, to make things a bit more clear.",Joe Savona,2023-11-10T00:33:41Z
691cad6b51b03e8844104b9a55116903da33d3e9,"Optimization for scope merging when no deps 

Addresses T168684688 (#2242). MergeReactiveScopesThatInvalidateTogether does not 
merge scopes if their output is not guaranteed to change when their inputs do. 
So for example a case such as `{session_id: bar(props.bar)}` will not merge the 
scopes for `t0 = bar(props.bar)` and `t1 = {session_id: t0}`, because t0 isn't 
guaranteed to change when `props.bar` does, and we want to avoid recreating the 
t1 object unless it semantically changes. 

But there's a special case: if a scope has no dependencies, then we'll never 
execute it again anyway. So it doesn't matter what kind of value it produces and 
it's safe to merge with subsequent scopes: 

```javascript 

return {session_id: bar()} 

``` 

Without the reactive input, `bar()` will always return the same value since 
we'll only ever call it once anyway. So it's safe to then merge with the scope 
for the outer object literal.",Joe Savona,2023-11-10T00:21:00Z
e35df45eaf0ffb79cb9b1c738bafc972f3aaeb9d,"Test component name access in gated setup 

Jesse flagged this as a potential bug internally but this looks correct to me. 

Adding a test case so that we don't regress in the future.",Sathya Gunasekaran,2023-11-09T10:30:54Z
cdf39e79563d65b5376b846532fe455d347a779e,[sprout] Add ReactForgetFeatureFlag,Sathya Gunasekaran,2023-11-09T10:30:52Z
6c327b0f3ed7be5c39f36730b9b1e885ced4561c,"[repro] Repro for fbt preserve whitespace bug 

Current sprout output (if you remove the line in `SproutTodoFilter`): 

``` 

Failures: 

FAIL: bug-fbt-preserve-whitespace 

Difference in forget and non-forget results. 

Expected result: { 

""kind"": ""ok"", 

""value"": ""Before text hello world"", 

""logs"": [] 

} 

Found: { 

""kind"": ""ok"", 

""value"": ""Before texthello world"", 

""logs"": [] 

} 

``` 

`fbt` transforms run before jsx ones, so our lowering should also account for 
[fbt's whitespace 
rules](https://github.com/facebook/fbt/blob/main/packages/babel-plugin-fbt/src/fbt-nodes/FbtImplicitParamNode.js#L230-L233) 
in `BuildHIR:trimJsxText`.",Mofei Zhang,2023-11-09T23:55:06Z
59ddf537ed2b4672ce3ca3f330c360d05e5c9e9e,"[tests][fixtures] Enable sprout on basic existing fbt tests 

--- 

Output: 

``` 

$ yarn sprout:build && yarn sprout --verbose 

... 

PASS  fbt-call-complex-param-value 

ok <div>Hello, Sathya!</div> 

PASS  fbt-call 

ok <div>2 items</div> 

PASS  fbt-template-string-same-scope 

ok <div>{""children"":""for 3 experiences""}</div> 

... 

```",Mofei Zhang,2023-11-09T23:55:05Z
372696c541015163c77a131f02f77a4591e023a4,"[sprout] Add support for fbt 

Fbt + typescript [seems](https://github.com/facebook/fbt/issues/49) [to 
be](https://github.com/facebook/sfbt/issues/72) a non-blessed workflow. We do 
want to allow for both flow and typescript tests, so I followed some 
instructions [from a 
guide](https://dev.to/retyui/how-to-add-support-typescript-for-fbt-an-internationalization-framework-3lo0) 
to add support. 

- fbt tags desugar to.. ""fbt"" strings. By default, typescript removes unused 
imports at parse step (and on autoformat steps). We pass special 
babel-typescript configs and change vscode settings to mitigate this. 

- I tried adding `fbt` to the global scope, but the fbt transform asserts that 
`fbt` is actually imported in the source program. 

- Other hacks are available, like saying we'll only allow for fbt in flow files, 
or always patching the source code to have an ""fbt"" import. This seemed the most 
reasonable and easiest to debug / follow when writing tests",Mofei Zhang,2023-11-09T23:55:05Z
b25c14feb133ffad247cf5cb8358ecaebd75d962,"[tests][be] Clean up fixture selection logic 

--- 

Refactor selection logic to be easier to read; add support for .jsx test files 
(feels a bit weird adding a `.jsx` fixture and not seeing it get run)",Mofei Zhang,2023-11-09T21:50:00Z
2726484823e9690e207c435a7523f058f640c651,Add license to rolledup output,Lauren Tan,2023-11-09T18:00:13Z
a6e492d8d0132ddf4c15b0844af355ac775bd33a,"[feedback] Add script to build packages for testapp 

In order to make changes to the testapp's dependencies, we need to update the 
lockfile which means modules need to actually exist. This adds a new script to 
just run a build of the packages we sync so that module resolution in the 
testapp will work",Lauren Tan,2023-11-09T16:31:33Z
f13594280b13b2c2c321c33893d83e76dd73d5dc,[ez] Use BabelFn type,Sathya Gunasekaran,2023-11-09T08:38:00Z
bb92520ba5639fcf81dbf3189a68703b34459a9d,"Some existing InvalidConfig errors should be invariants 

Now that we have validation of the compiler config, these old errors weren't 
categorized correctly. Readjusted them to be invariants instead.",Lauren Tan,2023-11-08T19:10:18Z
973ec414bd78fc458f995ef865ec3ab1d7c2a37d,[eslint] Try inlining everything in build,Lauren Tan,2023-11-08T20:19:07Z
7aca04a0d677f2a4adcaff18c951992016f4605b,"[babel] Refactor handleError to pass the error first 

Pass the most important and required argument as the first parameter.",Sathya Gunasekaran,2023-11-08T16:09:19Z
4e7d4378804d982105bd35cf43dc8c6dcb779521,"[babel] Remove unused PipelineError 

Most of the use cases are already handled with ErrorSeverity.InvalidConfig",Sathya Gunasekaran,2023-11-08T16:09:18Z
0beeb1e7ad283a718fbf7a8ff67d8dff3be90dfd,Remove unncessary nullcheck,Sathya Gunasekaran,2023-11-08T16:09:18Z
521f0568750dbb3abb851c5bef11458b606863e9,"Always clone DEFAULT_HOOKS 

Reusing DEFAULT_HOOKS instance is a bit scary in case we mutate it by mistake 
and this gets reflected across all compiles. 

This isn't a concern now as we can't change the config during compilation. But 
this PR keeps us safe in case we change this behavior in the future. 

The tradeoff is a bit of perf which I think is the right tradeoff here.",Sathya Gunasekaran,2023-11-08T16:09:17Z
ec089d5454b9d711f15365616aebcc670cc414d6,"[test] Add test to make sure stringy enums are parsed correct 

Meta internal config is going to be stringy, so let's add tests.",Sathya Gunasekaran,2023-11-08T16:09:16Z
6d2fce8eb529862c985b8e19ceac1216b3164e23,"Make CustomHooks optional and add default value 

Don't propogate nullability into the plugin.",Sathya Gunasekaran,2023-11-08T16:09:16Z
8b12f179d3350d6719b0dacc83d4153d9cc3da23,Add tests to make sure our config validation error message doesn't regress,Sathya Gunasekaran,2023-11-08T16:09:15Z
3f7b9e23e38e9338a66e313cd5842a25e23a5668,"Don't allow null to be passed to validateEnvironmentConfig 

zod will throw an error if we pass null, so let's not do this. 

Adding a temporary workaround until we start validating PluginOptions.",Sathya Gunasekaran,2023-11-08T16:09:14Z
42497b60f5935c14fdbcd4b6250d507aa3149e63,"[error] Prefix side-effecting function names with throw 

I did a double take when I thought we didn't handle returning the 

error when reading the code and when I edited the code, typescript told 

me that there's no need to return as creating the error will throw. 

This PR makes it clear from the name of the function that we will throw.",Sathya Gunasekaran,2023-11-08T16:09:13Z
33ffde4836d5e72f8109282e8f97af20179313dc,[playground] turn of ppr,Sathya Gunasekaran,2023-11-08T15:46:43Z
6405c980ebbd3716b74651e61c73fdc241d77c92,Use starred-block for multi line comments,Sathya Gunasekaran,2023-11-08T08:27:41Z
3d6d81052db1da2e33f4ae68e0bfc5cb8de51474,[be] Upgrade Eslint to 8.27.0,Sathya Gunasekaran,2023-11-08T08:27:41Z
702aadd82b2548f87c579fead92476e3efc64ac7,"Fix to only add imports if we compiled something 

We should only add imports if we actually compiled anything, this is what caused 
the internal issue despite the file in question not having any functions 
opted-in to compilation.",Joe Savona,2023-11-08T00:22:03Z
64dffe9e78607dda0977b72f77cadf17c404a57b,repro for gating error despite no compiled functions,Joe Savona,2023-11-08T00:09:29Z
9d5ff320badcb81c914a010105fc033c2a595d4c,"[babel] Fix default value for `environment` option 

When an `environment` isn't explicitly provided by the user's config, we used to 
default this to `null` in `parsePluginOptions` which is called right at the 
start of the Babel plugin. These parsed options were then being passed to zod, 
which was expecting an object type, not null. 

Zod can reify a default config based on the schema, if an empty object is passed 
in. So by changing our default value to `{}` this should fix the compiler 
bailing out incorrectly on valid compiler options 

Test plan: tested this manually on the external repo by modifying node_modules",Lauren Tan,2023-11-07T23:58:21Z
00cb557b12ecc3991ed35570f69b3f0284a9a545,Add runtime validation for EnvironmentConfig,Sathya Gunasekaran,2023-11-07T11:04:37Z
1c53385db59536165e7b7468652ab962c4cfe769,"Don't plumb PartialEnvironmentConfig 

Let's do validation at the API level and pass around the fully parsed config 
inside the plugin.",Sathya Gunasekaran,2023-11-07T11:04:37Z
58a10c0ac1ce429aad943d7ee8da6b608e9e3cde,"[babel] Outline insertNewFunctionDeclaration 

This lets us use the parsed and validated `gating` and `instrumentForget` 
options.",Sathya Gunasekaran,2023-11-07T11:04:36Z
d8734b5136363891cfcabdae4bfa9fd6a1c16f00,"Remove hasForgetMutatedOriginalSource 

Derive it from compiledFns rather than duplicating state",Sathya Gunasekaran,2023-11-07T11:04:35Z
bccd06a6326978ca7dc6287880f0a8046d47140c,[babel] Simplify noEmit and hasCriticalError check,Sathya Gunasekaran,2023-11-07T11:04:35Z
688305a978958c087e3a204fc40db9ea5d2cfc7f,Check if critical error before throwing,Sathya Gunasekaran,2023-11-07T11:04:34Z
cf70ef899e50db5eb463d98ac41e1ed1f08ff031,Validate options before replacing with compiled function,Sathya Gunasekaran,2023-11-07T11:04:34Z
d6ff65ecc707af73a1775aa10e88b18049721d67,"Add runtime validation for ExternalFunction 

Use zod to do runtime validation and throw if incorrect. 

This PR only adds validation for ExternalFunction, will validate other options 
in follow on PRs.",Sathya Gunasekaran,2023-11-07T11:04:33Z
337c17a66fc326ded8f1614783712fbdf05b8d25,"More React API coverage 

Redo of #2248 in its own stack",Joe Savona,2023-11-07T00:27:11Z
72c27b6893188be833839923b33d739a93b3ed6e,"Feature flag for transitively freezing values 

This PR adds a feature flag to model a potential new-in-practice rule in React: 
that freezing a function expression also freezes its closed-over values, 
transitively. For example, in the following code `data` is frozen when the 
lambda that captures it is is passed to useEffect: 

```javascript 

const data = []; 

// useEffect freezes its argument (the function expr), which transitively 
freezes its captured value data 

useEffect(() => { 

foo(data); 

}, [data]); 

data.push(true); // ERROR: mutating a frozen value 

mutate(data); // we conservatively assume this doesn't mutate but could be wrong 

``` 

Note that this rule has never been written down or enforced. It is theoretically 
equivalent to the rule (already implemented in Forget) that values captured by 
JSX are frozen: 

```javascript 

const style = {...}; 

<div style={style}>...</div> 

style.width = 10; // ERROR: mutating a frozen value 

mutate(style); // we conservatively assume this doesn't mutate but could be 
wrong 

``` 

However, JSX is typically constructed toward the very end of a render function. 
Thus in practice there isn't much subsequent code that could even modify such a 
captured value. But for the useEffect case (and other hooks that take closures 
as arguments), they tend to occur much earlier in a render function. There's 
more code that can run later and still modify the captured values, without 
causing issues in practice. The _practical_ rule today is that you can't modify 
values captured by frozen lambdas _after the component returns_: it's fine in 
practice to modify captured values between calling eg useEffect and returning 
from render. 

Thus this feature flag is fairly likely to break some percent of real product 
code. I'm adding this so that we can experiment and see how unsafe it actually 
is.",Joe Savona,2023-11-06T16:33:32Z
c424cbbfa7822b47fc73b112514426d149d3c98a,"Add validation against instructions not part of their scope 

Adds an internal compiler assertion pass which checks that all the instructions 
which are necessary for constructing a given scope correctly end up within the 
corresponding ReactiveScopeBlock. All known cases where this can occur are fixed 
earlier in the stack, but this assertion will help us catch any other cases we 
haven't thought of. See docblock comment for more info. 

## Test Plan 

I manually reverted the fixes from the previous PRs while keeping the new 
fixtures, and verified that this new assertion pass flags the fixtures as 
invalid.",Joe Savona,2023-11-06T16:33:31Z
35fee3135561ec3259cce695f4e2bb0863f7d7e0,"Handle IIFE with logical mutated later 

The previous changes mostly meant that we removed the label terminal and didn't 
have instructions for the same scope split in a way that we couldn't merge. But 
logicals were still causing a split because MergeConsecutiveScopes can't merge 
the blocks in that case. Here we move PruneUnusedLabels earlier in the pipeline 
to ensure that instructions from IIFEs have floated up to the parent block scope 
level.",Joe Savona,2023-11-06T16:33:30Z
e502e69b2dedb5bd6bd08ef7d70a2b853294d953,"Restore React.useMemo validation 

This got lost by moving the validation earlier.",Joe Savona,2023-11-06T16:33:30Z
0d3f3884b871088c92a76822dd221d06bad40df6,"Fix for IIFE return values mutated later 

Fixes for the previous PR. What was happening is that our inference was 
inferring the correct mutable ranges and reactive scopes, but the inlining 
process left the instructions from the IIFEs inside a separate block, with a 
'label' terminal preceding it. When we converted to ReactiveFunction this was 
preserved as a ReactiveLabelTerminal, which meant that the first instruction for 
the mutable range could be nested inside one LabelTerminal, while more would be 
in a subsequent LabelTerminal. But we close blocks based on the block scope! 
This meant that we'd have leftover instructions (in the second LabelTerminal) 
that got left out of the block. 

Furthermore, because inlining was happening after EnterSSA we weren't creating 
phis correctly. This PR fixes a bunch of these issues, and a subsequent PR 
handles the remaining cases: 

* We move DropManualMemo and InlineIIFEs before EnterSSA. This means we lose the 
ability to use type information, but we ensure that we create proper SSA ids and 
phis for any reassignments within the IIFE 

* We also update PruneUnusedLabels to not just remove the unused labels, but to 
actually remove LabelTerminals that don't need them.",Joe Savona,2023-11-06T16:33:29Z
1607fb39c3148eb1dc31005af4b07a7024954de3,"Repro for incorrect memoization of iife 

We construct invalid mutable ranges in these cases because the range starts 
within a labeled block. We need to run merge consecutive scopes and EnterSSA 
after inlining so that the code is lifted out of the labeled block to the 
correct scope, and so that we create phis for reassignments within the IIFE.",Joe Savona,2023-11-06T16:33:28Z
60af6671d72540b472c1701ce7d42da4f4e3a16d,[ez] Check for use-before-decl only when gating is on,Sathya Gunasekaran,2023-11-02T19:32:40Z
48e709e7ad4b0f9936455e5556f7b0d13a8ae15e,"[eslint] Add test for classes 

This used to cause issues because I hadn't configured Babel in the eslint plugin 
properly, so adding this as a regression test",Lauren Tan,2023-11-03T20:32:53Z
3634980183b88501a0726ac318b600d706036ad4,"[eslint] Switch compiler to ""infer"" mode",Lauren Tan,2023-11-03T20:27:20Z
a2aa032276a9546a7bc06d118ca7de98a5fae651,"[eslint] Plugin should never throw 

This has caused issues for people when things like Babel cause issues. It's not 
actionable and it crashes eslint. Just like the Babel plugin, the eslint plugin 
should never throw. Instead, let's log the error so the data isn't lost.",Lauren Tan,2023-11-03T20:27:18Z
fe147cb16a3ec82220d2599bb59ee12fc7319687,[babel] Add hermes-parser type definitions to babel-plugin,Lauren Tan,2023-11-03T19:22:53Z
a030d05d95db4c919c36e8f5ecfff7b6d6cefac2,[eslint] Add test for component syntax,Lauren Tan,2023-11-03T19:22:52Z
a74982d660b1143baee3af1ec98cd9b613e36799,"[eslint] Update hermes-parser, add hermes-eslint",Lauren Tan,2023-11-03T15:49:02Z
4afee45440560fb810c60f37f3e290dc7e0d6ed3,[ez] Add missing ts type,Sathya Gunasekaran,2023-11-02T18:10:33Z
adadc21021f18ca774cccb8c8c23d729c5ca7a5a,[babel] Check if the gated component is used before decl,Sathya Gunasekaran,2023-11-02T18:10:30Z
d49eb8b580b535ea234275e10aa166cae461cd74,[ez] Run copyright script,Lauren Tan,2023-11-02T16:43:35Z
0cc473fc9ae3d4d8a97fb59b0010fb950b620cc2,[ez] Move copyright script to top level,Lauren Tan,2023-11-02T16:43:33Z
5bd9642578cefe51a6af8e11056aa8e1fc269ced,"[feedback] Combine bundle scripts and don't commit dist 

This combines our scripts and makes it so we no longer need to create a separate 
commit to add the forget-feedback/dist directory into the react-forget repo. I 
originally did that so I could run tests here, but now that the external repo is 
created and has its test suite hooked up to CI, this is now unnecessary friction 
to run a sync",Lauren Tan,2023-11-02T15:58:11Z
4a793bb86e6aa8c27b7dcba5783a2f8dbb5b68d0,[hoisting] Add more repros for hoisting bugs,Lauren Tan,2023-11-02T15:01:29Z
dca54c8932cfad5905c8b079be551ba741e07268,"[playground] Use standalone prettier 

All of these warnings go away: ``` ➜  playground git:(remove-prettier) ✗ yarn 
dev yarn run v1.22.19 $ NODE_ENV=development && next dev ready - started server 
on 0.0.0.0:3000, url: http://localhost:3000 warn  - You have enabled 
experimental feature (appDir) in next.config.js. warn  - Experimental features 
are not covered by semver, and may cause unexpected or broken application 
behavior. Use at your own risk. info  - Thank you for testing `appDir` please 
leave your feedback at https://nextjs.link/app-feedback 

event - compiled client and server successfully in 964 ms (199 modules) wait  - 
compiling /page (client and server)... warn  - 
../../node_modules/prettier/index.js Critical dependency: the request of a 
dependency is an expression 

../../node_modules/prettier/index.js Critical dependency: require function is 
used in a way in which dependencies cannot be statically extracted 

../../node_modules/prettier/index.js Critical dependency: the request of a 
dependency is an expression 

../../node_modules/prettier/index.js Critical dependency: the request of a 
dependency is an expression 

../../node_modules/prettier/third-party.js Critical dependency: the request of a 
dependency is an expression wait  - compiling... warn  - 
../../node_modules/prettier/index.js Critical dependency: the request of a 
dependency is an expression 

../../node_modules/prettier/index.js Critical dependency: require function is 
used in a way in which dependencies cannot be statically extracted 

../../node_modules/prettier/index.js Critical dependency: the request of a 
dependency is an expression 

../../node_modules/prettier/index.js Critical dependency: the request of a 
dependency is an expression 

../../node_modules/prettier/third-party.js Critical dependency: the request of a 
dependency is an expression ``` 

Standalone prettier is meant to be used in the browser: 
https://prettier.io/docs/en/browser",Sathya Gunasekaran,2023-11-02T14:00:05Z
faa65778b7c277e0020b8bb1fc172e11a863c0b7,Bump browserify-sign from 4.0.4 to 4.2.2 in /fixtures/expiration (#27600),dependabot[bot],2023-11-01T19:31:28Z
9ddfe614f228d89c8d9807a50009004aa8f014c6,Bump browserify-sign from 4.0.4 to 4.2.2 in /fixtures/packaging/brunch/prod (#27598),dependabot[bot],2023-11-01T19:30:25Z
6bfc0e032acc7e5ad6da2a09f3c4f47f3321da2c,"Support Flow `as` expressions in ESLint rules (#27590)

Support Flow `as` expressions in ESLint rules, e.g. `<expr> as <type>`.
This is the same syntax as TypeScript as expressions. I just looked for
any place referencing `TSAsExpression` (the TS node) or
`TypeCastExpression` (the previous Flow syntax) and added a case for
`AsExpression` as well.",George Zahariev,2023-11-01T19:24:06Z
3eaa0c3871b63b6542a939d9c0e7040bf42b75b7,"Bump browserify-sign from 4.0.4 to 4.2.2 in /fixtures/packaging/brunch/dev (#27606)

Bumps
[browserify-sign](https://github.com/crypto-browserify/browserify-sign)
from 4.0.4 to 4.2.2.
<details>
<summary>Changelog</summary>
<p><em>Sourced from <a
href=""https://github.com/browserify/browserify-sign/blob/main/CHANGELOG.md"">browserify-sign's
changelog</a>.</em></p>
<blockquote>
<h2><a
href=""https://github.com/browserify/browserify-sign/compare/v4.2.1...v4.2.2"">v4.2.2</a>
- 2023-10-25</h2>
<h3>Fixed</h3>
<ul>
<li>[Tests] log when openssl doesn't support cipher <a
href=""https://redirect.github.com/browserify/browserify-sign/issues/37""><code>[#37](https://github.com/crypto-browserify/browserify-sign/issues/37)</code></a></li>
</ul>
<h3>Commits</h3>
<ul>
<li>Only apps should have lockfiles <a
href=""https://github.com/browserify/browserify-sign/commit/09a89959393b3c89fedd4f7f3bafa4fec44371d7""><code>09a8995</code></a></li>
<li>[eslint] switch to eslint <a
href=""https://github.com/browserify/browserify-sign/commit/83fe46374b819e959d56d2c0b931308f7451a664""><code>83fe463</code></a></li>
<li>[meta] add <code>npmignore</code> and <code>auto-changelog</code> <a
href=""https://github.com/browserify/browserify-sign/commit/44181838e7dcc4d5d0c568f74312ea28f0bcdfd5""><code>4418183</code></a></li>
<li>[meta] fix package.json indentation <a
href=""https://github.com/browserify/browserify-sign/commit/9ac5a5eaaac8a11eb70ec2febd13745c8764ae02""><code>9ac5a5e</code></a></li>
<li>[Tests] migrate from travis to github actions <a
href=""https://github.com/browserify/browserify-sign/commit/d845d855def38e2085d5a21e447a48300f99fa60""><code>d845d85</code></a></li>
<li>[Fix] <code>sign</code>: throw on unsupported padding scheme <a
href=""https://github.com/browserify/browserify-sign/commit/8767739a4516289568bcce9fed8a3b7e23478de9""><code>8767739</code></a></li>
<li>[Fix] properly check the upper bound for DSA signatures <a
href=""https://github.com/browserify/browserify-sign/commit/85994cd6348b50f2fd1b73c54e20881416f44a30""><code>85994cd</code></a></li>
<li>[Tests] handle openSSL not supporting a scheme <a
href=""https://github.com/browserify/browserify-sign/commit/f5f17c27f9824de40b5ce8ebd8502111203fd6af""><code>f5f17c2</code></a></li>
<li>[Deps] update <code>bn.js</code>, <code>browserify-rsa</code>,
<code>elliptic</code>, <code>parse-asn1</code>,
<code>readable-stream</code>, <code>safe-buffer</code> <a
href=""https://github.com/browserify/browserify-sign/commit/a67d0eb4ffceabb366b69da69ce9a223e9d5e96b""><code>a67d0eb</code></a></li>
<li>[Dev Deps] update <code>nyc</code>, <code>standard</code>,
<code>tape</code> <a
href=""https://github.com/browserify/browserify-sign/commit/cc5350b96702fcba930e0662cf763844fd2f59bf""><code>cc5350b</code></a></li>
<li>[Tests] always run coverage; downgrade <code>nyc</code> <a
href=""https://github.com/browserify/browserify-sign/commit/75ce1d5c49a6591dd13422016c07f8f9cae13371""><code>75ce1d5</code></a></li>
<li>[meta] add <code>safe-publish-latest</code> <a
href=""https://github.com/browserify/browserify-sign/commit/dcf49ce85a1a66a6fb31689508d916d7894286a9""><code>dcf49ce</code></a></li>
<li>[Tests] add <code>npm run posttest</code> <a
href=""https://github.com/browserify/browserify-sign/commit/75dd8fd6ce56eb37b12e30807e5f913867b21733""><code>75dd8fd</code></a></li>
<li>[Dev Deps] update <code>tape</code> <a
href=""https://github.com/browserify/browserify-sign/commit/3aec0386dc8dfba8698be756ec770df863867c84""><code>3aec038</code></a></li>
<li>[Tests] skip unsupported schemes <a
href=""https://github.com/browserify/browserify-sign/commit/703c83ea72db2f45714fe749c6f04b05243ca9a8""><code>703c83e</code></a></li>
<li>[Tests] node &lt; 6 lacks array <code>includes</code> <a
href=""https://github.com/browserify/browserify-sign/commit/3aa43cfbc1fdde8481bcdd3bff581574159b869a""><code>3aa43cf</code></a></li>
<li>[Dev Deps] fix eslint range <a
href=""https://github.com/browserify/browserify-sign/commit/98d4e0d7ff18871b0ca07415f758a610ccf8ebbe""><code>98d4e0d</code></a></li>
</ul>
<h2><a
href=""https://github.com/browserify/browserify-sign/compare/v4.2.0...v4.2.1"">v4.2.1</a>
- 2020-08-04</h2>
<h3>Merged</h3>
<ul>
<li>bump elliptic <a
href=""https://redirect.github.com/browserify/browserify-sign/pull/58""><code>[#58](https://github.com/crypto-browserify/browserify-sign/issues/58)</code></a></li>
</ul>
<h2><a
href=""https://github.com/browserify/browserify-sign/compare/v4.1.0...v4.2.0"">v4.2.0</a>
- 2020-05-18</h2>
<h3>Merged</h3>
<ul>
<li>switch to safe buffer <a
href=""https://redirect.github.com/browserify/browserify-sign/pull/53""><code>[#53](https://github.com/crypto-browserify/browserify-sign/issues/53)</code></a></li>
</ul>
<h2><a
href=""https://github.com/browserify/browserify-sign/compare/v4.0.4...v4.1.0"">v4.1.0</a>
- 2020-05-05</h2>
<h3>Merged</h3>
<ul>
<li>update deps, modernise usage, use readable-stream <a
href=""https://redirect.github.com/browserify/browserify-sign/pull/49""><code>[#49](https://github.com/crypto-browserify/browserify-sign/issues/49)</code></a></li>
</ul>
</blockquote>
</details>
<details>
<summary>Commits</summary>
<ul>
<li><a
href=""https://github.com/browserify/browserify-sign/commit/4af5a90bf8acd9e76e5671dc0497f6ba71968a2c""><code>4af5a90</code></a>
v4.2.2</li>
<li><a
href=""https://github.com/browserify/browserify-sign/commit/3aec0386dc8dfba8698be756ec770df863867c84""><code>3aec038</code></a>
[Dev Deps] update <code>tape</code></li>
<li><a
href=""https://github.com/browserify/browserify-sign/commit/85994cd6348b50f2fd1b73c54e20881416f44a30""><code>85994cd</code></a>
[Fix] properly check the upper bound for DSA signatures</li>
<li><a
href=""https://github.com/browserify/browserify-sign/commit/9ac5a5eaaac8a11eb70ec2febd13745c8764ae02""><code>9ac5a5e</code></a>
[meta] fix package.json indentation</li>
<li><a
href=""https://github.com/browserify/browserify-sign/commit/dcf49ce85a1a66a6fb31689508d916d7894286a9""><code>dcf49ce</code></a>
[meta] add <code>safe-publish-latest</code></li>
<li><a
href=""https://github.com/browserify/browserify-sign/commit/44181838e7dcc4d5d0c568f74312ea28f0bcdfd5""><code>4418183</code></a>
[meta] add <code>npmignore</code> and <code>auto-changelog</code></li>
<li><a
href=""https://github.com/browserify/browserify-sign/commit/8767739a4516289568bcce9fed8a3b7e23478de9""><code>8767739</code></a>
[Fix] <code>sign</code>: throw on unsupported padding scheme</li>
<li><a
href=""https://github.com/browserify/browserify-sign/commit/5f6fb1755917851a40249db7d834da4265ed5950""><code>5f6fb17</code></a>
[Tests] log when openssl doesn't support cipher</li>
<li><a
href=""https://github.com/browserify/browserify-sign/commit/f5f17c27f9824de40b5ce8ebd8502111203fd6af""><code>f5f17c2</code></a>
[Tests] handle openSSL not supporting a scheme</li>
<li><a
href=""https://github.com/browserify/browserify-sign/commit/d845d855def38e2085d5a21e447a48300f99fa60""><code>d845d85</code></a>
[Tests] migrate from travis to github actions</li>
<li>Additional commits viewable in <a
href=""https://github.com/crypto-browserify/browserify-sign/compare/v4.0.4...v4.2.2"">compare
view</a></li>
</ul>
</details>
<details>
<summary>Maintainer changes</summary>
<p>This version was pushed to npm by <a
href=""https://www.npmjs.com/~ljharb"">ljharb</a>, a new releaser for
browserify-sign since your current version.</p>
</details>
<br />


[![Dependabot compatibility
score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=browserify-sign&package-manager=npm_and_yarn&previous-version=4.0.4&new-version=4.2.2)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)

Dependabot will resolve any conflicts with this PR as long as you don't
alter it yourself. You can also trigger a rebase manually by commenting
`@dependabot rebase`.

[//]: # (dependabot-automerge-start)
[//]: # (dependabot-automerge-end)

---

<details>
<summary>Dependabot commands and options</summary>
<br />

You can trigger Dependabot actions by commenting on this PR:
- `@dependabot rebase` will rebase this PR
- `@dependabot recreate` will recreate this PR, overwriting any edits
that have been made to it
- `@dependabot merge` will merge this PR after your CI passes on it
- `@dependabot squash and merge` will squash and merge this PR after
your CI passes on it
- `@dependabot cancel merge` will cancel a previously requested merge
and block automerging
- `@dependabot reopen` will reopen this PR if it is closed
- `@dependabot close` will close this PR and stop Dependabot recreating
it. You can achieve the same result by closing it manually
- `@dependabot show <dependency name> ignore conditions` will show all
of the ignore conditions of the specified dependency
- `@dependabot ignore this major version` will close this PR and stop
Dependabot creating any more for this major version (unless you reopen
the PR or upgrade to it yourself)
- `@dependabot ignore this minor version` will close this PR and stop
Dependabot creating any more for this minor version (unless you reopen
the PR or upgrade to it yourself)
- `@dependabot ignore this dependency` will close this PR and stop
Dependabot creating any more for this dependency (unless you reopen the
PR or upgrade to it yourself)
You can disable automated security fix PRs for this repo from the
[Security Alerts
page](https://github.com/facebook/react/network/alerts).

</details>

Signed-off-by: dependabot[bot] <support@github.com>
Co-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>",dependabot[bot],2023-11-01T19:20:57Z
00409516371ac536d0ba5a7093699a36f9316070,"Bump browserify-sign from 4.2.1 to 4.2.2 in /fixtures/dom (#27608)

Bumps
[browserify-sign](https://github.com/crypto-browserify/browserify-sign)
from 4.2.1 to 4.2.2.
<details>
<summary>Changelog</summary>
<p><em>Sourced from <a
href=""https://github.com/browserify/browserify-sign/blob/main/CHANGELOG.md"">browserify-sign's
changelog</a>.</em></p>
<blockquote>
<h2><a
href=""https://github.com/browserify/browserify-sign/compare/v4.2.1...v4.2.2"">v4.2.2</a>
- 2023-10-25</h2>
<h3>Fixed</h3>
<ul>
<li>[Tests] log when openssl doesn't support cipher <a
href=""https://redirect.github.com/browserify/browserify-sign/issues/37""><code>[#37](https://github.com/crypto-browserify/browserify-sign/issues/37)</code></a></li>
</ul>
<h3>Commits</h3>
<ul>
<li>Only apps should have lockfiles <a
href=""https://github.com/browserify/browserify-sign/commit/09a89959393b3c89fedd4f7f3bafa4fec44371d7""><code>09a8995</code></a></li>
<li>[eslint] switch to eslint <a
href=""https://github.com/browserify/browserify-sign/commit/83fe46374b819e959d56d2c0b931308f7451a664""><code>83fe463</code></a></li>
<li>[meta] add <code>npmignore</code> and <code>auto-changelog</code> <a
href=""https://github.com/browserify/browserify-sign/commit/44181838e7dcc4d5d0c568f74312ea28f0bcdfd5""><code>4418183</code></a></li>
<li>[meta] fix package.json indentation <a
href=""https://github.com/browserify/browserify-sign/commit/9ac5a5eaaac8a11eb70ec2febd13745c8764ae02""><code>9ac5a5e</code></a></li>
<li>[Tests] migrate from travis to github actions <a
href=""https://github.com/browserify/browserify-sign/commit/d845d855def38e2085d5a21e447a48300f99fa60""><code>d845d85</code></a></li>
<li>[Fix] <code>sign</code>: throw on unsupported padding scheme <a
href=""https://github.com/browserify/browserify-sign/commit/8767739a4516289568bcce9fed8a3b7e23478de9""><code>8767739</code></a></li>
<li>[Fix] properly check the upper bound for DSA signatures <a
href=""https://github.com/browserify/browserify-sign/commit/85994cd6348b50f2fd1b73c54e20881416f44a30""><code>85994cd</code></a></li>
<li>[Tests] handle openSSL not supporting a scheme <a
href=""https://github.com/browserify/browserify-sign/commit/f5f17c27f9824de40b5ce8ebd8502111203fd6af""><code>f5f17c2</code></a></li>
<li>[Deps] update <code>bn.js</code>, <code>browserify-rsa</code>,
<code>elliptic</code>, <code>parse-asn1</code>,
<code>readable-stream</code>, <code>safe-buffer</code> <a
href=""https://github.com/browserify/browserify-sign/commit/a67d0eb4ffceabb366b69da69ce9a223e9d5e96b""><code>a67d0eb</code></a></li>
<li>[Dev Deps] update <code>nyc</code>, <code>standard</code>,
<code>tape</code> <a
href=""https://github.com/browserify/browserify-sign/commit/cc5350b96702fcba930e0662cf763844fd2f59bf""><code>cc5350b</code></a></li>
<li>[Tests] always run coverage; downgrade <code>nyc</code> <a
href=""https://github.com/browserify/browserify-sign/commit/75ce1d5c49a6591dd13422016c07f8f9cae13371""><code>75ce1d5</code></a></li>
<li>[meta] add <code>safe-publish-latest</code> <a
href=""https://github.com/browserify/browserify-sign/commit/dcf49ce85a1a66a6fb31689508d916d7894286a9""><code>dcf49ce</code></a></li>
<li>[Tests] add <code>npm run posttest</code> <a
href=""https://github.com/browserify/browserify-sign/commit/75dd8fd6ce56eb37b12e30807e5f913867b21733""><code>75dd8fd</code></a></li>
<li>[Dev Deps] update <code>tape</code> <a
href=""https://github.com/browserify/browserify-sign/commit/3aec0386dc8dfba8698be756ec770df863867c84""><code>3aec038</code></a></li>
<li>[Tests] skip unsupported schemes <a
href=""https://github.com/browserify/browserify-sign/commit/703c83ea72db2f45714fe749c6f04b05243ca9a8""><code>703c83e</code></a></li>
<li>[Tests] node &lt; 6 lacks array <code>includes</code> <a
href=""https://github.com/browserify/browserify-sign/commit/3aa43cfbc1fdde8481bcdd3bff581574159b869a""><code>3aa43cf</code></a></li>
<li>[Dev Deps] fix eslint range <a
href=""https://github.com/browserify/browserify-sign/commit/98d4e0d7ff18871b0ca07415f758a610ccf8ebbe""><code>98d4e0d</code></a></li>
</ul>
</blockquote>
</details>
<details>
<summary>Commits</summary>
<ul>
<li><a
href=""https://github.com/browserify/browserify-sign/commit/4af5a90bf8acd9e76e5671dc0497f6ba71968a2c""><code>4af5a90</code></a>
v4.2.2</li>
<li><a
href=""https://github.com/browserify/browserify-sign/commit/3aec0386dc8dfba8698be756ec770df863867c84""><code>3aec038</code></a>
[Dev Deps] update <code>tape</code></li>
<li><a
href=""https://github.com/browserify/browserify-sign/commit/85994cd6348b50f2fd1b73c54e20881416f44a30""><code>85994cd</code></a>
[Fix] properly check the upper bound for DSA signatures</li>
<li><a
href=""https://github.com/browserify/browserify-sign/commit/9ac5a5eaaac8a11eb70ec2febd13745c8764ae02""><code>9ac5a5e</code></a>
[meta] fix package.json indentation</li>
<li><a
href=""https://github.com/browserify/browserify-sign/commit/dcf49ce85a1a66a6fb31689508d916d7894286a9""><code>dcf49ce</code></a>
[meta] add <code>safe-publish-latest</code></li>
<li><a
href=""https://github.com/browserify/browserify-sign/commit/44181838e7dcc4d5d0c568f74312ea28f0bcdfd5""><code>4418183</code></a>
[meta] add <code>npmignore</code> and <code>auto-changelog</code></li>
<li><a
href=""https://github.com/browserify/browserify-sign/commit/8767739a4516289568bcce9fed8a3b7e23478de9""><code>8767739</code></a>
[Fix] <code>sign</code>: throw on unsupported padding scheme</li>
<li><a
href=""https://github.com/browserify/browserify-sign/commit/5f6fb1755917851a40249db7d834da4265ed5950""><code>5f6fb17</code></a>
[Tests] log when openssl doesn't support cipher</li>
<li><a
href=""https://github.com/browserify/browserify-sign/commit/f5f17c27f9824de40b5ce8ebd8502111203fd6af""><code>f5f17c2</code></a>
[Tests] handle openSSL not supporting a scheme</li>
<li><a
href=""https://github.com/browserify/browserify-sign/commit/d845d855def38e2085d5a21e447a48300f99fa60""><code>d845d85</code></a>
[Tests] migrate from travis to github actions</li>
<li>Additional commits viewable in <a
href=""https://github.com/crypto-browserify/browserify-sign/compare/v4.2.1...v4.2.2"">compare
view</a></li>
</ul>
</details>
<details>
<summary>Maintainer changes</summary>
<p>This version was pushed to npm by <a
href=""https://www.npmjs.com/~ljharb"">ljharb</a>, a new releaser for
browserify-sign since your current version.</p>
</details>
<br />


[![Dependabot compatibility
score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=browserify-sign&package-manager=npm_and_yarn&previous-version=4.2.1&new-version=4.2.2)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)

Dependabot will resolve any conflicts with this PR as long as you don't
alter it yourself. You can also trigger a rebase manually by commenting
`@dependabot rebase`.

[//]: # (dependabot-automerge-start)
[//]: # (dependabot-automerge-end)

---

<details>
<summary>Dependabot commands and options</summary>
<br />

You can trigger Dependabot actions by commenting on this PR:
- `@dependabot rebase` will rebase this PR
- `@dependabot recreate` will recreate this PR, overwriting any edits
that have been made to it
- `@dependabot merge` will merge this PR after your CI passes on it
- `@dependabot squash and merge` will squash and merge this PR after
your CI passes on it
- `@dependabot cancel merge` will cancel a previously requested merge
and block automerging
- `@dependabot reopen` will reopen this PR if it is closed
- `@dependabot close` will close this PR and stop Dependabot recreating
it. You can achieve the same result by closing it manually
- `@dependabot show <dependency name> ignore conditions` will show all
of the ignore conditions of the specified dependency
- `@dependabot ignore this major version` will close this PR and stop
Dependabot creating any more for this major version (unless you reopen
the PR or upgrade to it yourself)
- `@dependabot ignore this minor version` will close this PR and stop
Dependabot creating any more for this minor version (unless you reopen
the PR or upgrade to it yourself)
- `@dependabot ignore this dependency` will close this PR and stop
Dependabot creating any more for this dependency (unless you reopen the
PR or upgrade to it yourself)
You can disable automated security fix PRs for this repo from the
[Security Alerts
page](https://github.com/facebook/react/network/alerts).

</details>

Signed-off-by: dependabot[bot] <support@github.com>
Co-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>",dependabot[bot],2023-11-01T19:20:39Z
d0fcd36af479c4c8d419d689550768f535493b68,"Bump browserify-sign from 4.0.4 to 4.2.2 in /fixtures/attribute-behavior (#27601)

Bumps
[browserify-sign](https://github.com/crypto-browserify/browserify-sign)
from 4.0.4 to 4.2.2.
<details>
<summary>Changelog</summary>
<p><em>Sourced from <a
href=""https://github.com/browserify/browserify-sign/blob/main/CHANGELOG.md"">browserify-sign's
changelog</a>.</em></p>
<blockquote>
<h2><a
href=""https://github.com/browserify/browserify-sign/compare/v4.2.1...v4.2.2"">v4.2.2</a>
- 2023-10-25</h2>
<h3>Fixed</h3>
<ul>
<li>[Tests] log when openssl doesn't support cipher <a
href=""https://redirect.github.com/browserify/browserify-sign/issues/37""><code>[#37](https://github.com/crypto-browserify/browserify-sign/issues/37)</code></a></li>
</ul>
<h3>Commits</h3>
<ul>
<li>Only apps should have lockfiles <a
href=""https://github.com/browserify/browserify-sign/commit/09a89959393b3c89fedd4f7f3bafa4fec44371d7""><code>09a8995</code></a></li>
<li>[eslint] switch to eslint <a
href=""https://github.com/browserify/browserify-sign/commit/83fe46374b819e959d56d2c0b931308f7451a664""><code>83fe463</code></a></li>
<li>[meta] add <code>npmignore</code> and <code>auto-changelog</code> <a
href=""https://github.com/browserify/browserify-sign/commit/44181838e7dcc4d5d0c568f74312ea28f0bcdfd5""><code>4418183</code></a></li>
<li>[meta] fix package.json indentation <a
href=""https://github.com/browserify/browserify-sign/commit/9ac5a5eaaac8a11eb70ec2febd13745c8764ae02""><code>9ac5a5e</code></a></li>
<li>[Tests] migrate from travis to github actions <a
href=""https://github.com/browserify/browserify-sign/commit/d845d855def38e2085d5a21e447a48300f99fa60""><code>d845d85</code></a></li>
<li>[Fix] <code>sign</code>: throw on unsupported padding scheme <a
href=""https://github.com/browserify/browserify-sign/commit/8767739a4516289568bcce9fed8a3b7e23478de9""><code>8767739</code></a></li>
<li>[Fix] properly check the upper bound for DSA signatures <a
href=""https://github.com/browserify/browserify-sign/commit/85994cd6348b50f2fd1b73c54e20881416f44a30""><code>85994cd</code></a></li>
<li>[Tests] handle openSSL not supporting a scheme <a
href=""https://github.com/browserify/browserify-sign/commit/f5f17c27f9824de40b5ce8ebd8502111203fd6af""><code>f5f17c2</code></a></li>
<li>[Deps] update <code>bn.js</code>, <code>browserify-rsa</code>,
<code>elliptic</code>, <code>parse-asn1</code>,
<code>readable-stream</code>, <code>safe-buffer</code> <a
href=""https://github.com/browserify/browserify-sign/commit/a67d0eb4ffceabb366b69da69ce9a223e9d5e96b""><code>a67d0eb</code></a></li>
<li>[Dev Deps] update <code>nyc</code>, <code>standard</code>,
<code>tape</code> <a
href=""https://github.com/browserify/browserify-sign/commit/cc5350b96702fcba930e0662cf763844fd2f59bf""><code>cc5350b</code></a></li>
<li>[Tests] always run coverage; downgrade <code>nyc</code> <a
href=""https://github.com/browserify/browserify-sign/commit/75ce1d5c49a6591dd13422016c07f8f9cae13371""><code>75ce1d5</code></a></li>
<li>[meta] add <code>safe-publish-latest</code> <a
href=""https://github.com/browserify/browserify-sign/commit/dcf49ce85a1a66a6fb31689508d916d7894286a9""><code>dcf49ce</code></a></li>
<li>[Tests] add <code>npm run posttest</code> <a
href=""https://github.com/browserify/browserify-sign/commit/75dd8fd6ce56eb37b12e30807e5f913867b21733""><code>75dd8fd</code></a></li>
<li>[Dev Deps] update <code>tape</code> <a
href=""https://github.com/browserify/browserify-sign/commit/3aec0386dc8dfba8698be756ec770df863867c84""><code>3aec038</code></a></li>
<li>[Tests] skip unsupported schemes <a
href=""https://github.com/browserify/browserify-sign/commit/703c83ea72db2f45714fe749c6f04b05243ca9a8""><code>703c83e</code></a></li>
<li>[Tests] node &lt; 6 lacks array <code>includes</code> <a
href=""https://github.com/browserify/browserify-sign/commit/3aa43cfbc1fdde8481bcdd3bff581574159b869a""><code>3aa43cf</code></a></li>
<li>[Dev Deps] fix eslint range <a
href=""https://github.com/browserify/browserify-sign/commit/98d4e0d7ff18871b0ca07415f758a610ccf8ebbe""><code>98d4e0d</code></a></li>
</ul>
<h2><a
href=""https://github.com/browserify/browserify-sign/compare/v4.2.0...v4.2.1"">v4.2.1</a>
- 2020-08-04</h2>
<h3>Merged</h3>
<ul>
<li>bump elliptic <a
href=""https://redirect.github.com/browserify/browserify-sign/pull/58""><code>[#58](https://github.com/crypto-browserify/browserify-sign/issues/58)</code></a></li>
</ul>
<h2><a
href=""https://github.com/browserify/browserify-sign/compare/v4.1.0...v4.2.0"">v4.2.0</a>
- 2020-05-18</h2>
<h3>Merged</h3>
<ul>
<li>switch to safe buffer <a
href=""https://redirect.github.com/browserify/browserify-sign/pull/53""><code>[#53](https://github.com/crypto-browserify/browserify-sign/issues/53)</code></a></li>
</ul>
<h2><a
href=""https://github.com/browserify/browserify-sign/compare/v4.0.4...v4.1.0"">v4.1.0</a>
- 2020-05-05</h2>
<h3>Merged</h3>
<ul>
<li>update deps, modernise usage, use readable-stream <a
href=""https://redirect.github.com/browserify/browserify-sign/pull/49""><code>[#49](https://github.com/crypto-browserify/browserify-sign/issues/49)</code></a></li>
</ul>
</blockquote>
</details>
<details>
<summary>Commits</summary>
<ul>
<li><a
href=""https://github.com/browserify/browserify-sign/commit/4af5a90bf8acd9e76e5671dc0497f6ba71968a2c""><code>4af5a90</code></a>
v4.2.2</li>
<li><a
href=""https://github.com/browserify/browserify-sign/commit/3aec0386dc8dfba8698be756ec770df863867c84""><code>3aec038</code></a>
[Dev Deps] update <code>tape</code></li>
<li><a
href=""https://github.com/browserify/browserify-sign/commit/85994cd6348b50f2fd1b73c54e20881416f44a30""><code>85994cd</code></a>
[Fix] properly check the upper bound for DSA signatures</li>
<li><a
href=""https://github.com/browserify/browserify-sign/commit/9ac5a5eaaac8a11eb70ec2febd13745c8764ae02""><code>9ac5a5e</code></a>
[meta] fix package.json indentation</li>
<li><a
href=""https://github.com/browserify/browserify-sign/commit/dcf49ce85a1a66a6fb31689508d916d7894286a9""><code>dcf49ce</code></a>
[meta] add <code>safe-publish-latest</code></li>
<li><a
href=""https://github.com/browserify/browserify-sign/commit/44181838e7dcc4d5d0c568f74312ea28f0bcdfd5""><code>4418183</code></a>
[meta] add <code>npmignore</code> and <code>auto-changelog</code></li>
<li><a
href=""https://github.com/browserify/browserify-sign/commit/8767739a4516289568bcce9fed8a3b7e23478de9""><code>8767739</code></a>
[Fix] <code>sign</code>: throw on unsupported padding scheme</li>
<li><a
href=""https://github.com/browserify/browserify-sign/commit/5f6fb1755917851a40249db7d834da4265ed5950""><code>5f6fb17</code></a>
[Tests] log when openssl doesn't support cipher</li>
<li><a
href=""https://github.com/browserify/browserify-sign/commit/f5f17c27f9824de40b5ce8ebd8502111203fd6af""><code>f5f17c2</code></a>
[Tests] handle openSSL not supporting a scheme</li>
<li><a
href=""https://github.com/browserify/browserify-sign/commit/d845d855def38e2085d5a21e447a48300f99fa60""><code>d845d85</code></a>
[Tests] migrate from travis to github actions</li>
<li>Additional commits viewable in <a
href=""https://github.com/crypto-browserify/browserify-sign/compare/v4.0.4...v4.2.2"">compare
view</a></li>
</ul>
</details>
<details>
<summary>Maintainer changes</summary>
<p>This version was pushed to npm by <a
href=""https://www.npmjs.com/~ljharb"">ljharb</a>, a new releaser for
browserify-sign since your current version.</p>
</details>
<br />


[![Dependabot compatibility
score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=browserify-sign&package-manager=npm_and_yarn&previous-version=4.0.4&new-version=4.2.2)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)

Dependabot will resolve any conflicts with this PR as long as you don't
alter it yourself. You can also trigger a rebase manually by commenting
`@dependabot rebase`.

[//]: # (dependabot-automerge-start)
[//]: # (dependabot-automerge-end)

---

<details>
<summary>Dependabot commands and options</summary>
<br />

You can trigger Dependabot actions by commenting on this PR:
- `@dependabot rebase` will rebase this PR
- `@dependabot recreate` will recreate this PR, overwriting any edits
that have been made to it
- `@dependabot merge` will merge this PR after your CI passes on it
- `@dependabot squash and merge` will squash and merge this PR after
your CI passes on it
- `@dependabot cancel merge` will cancel a previously requested merge
and block automerging
- `@dependabot reopen` will reopen this PR if it is closed
- `@dependabot close` will close this PR and stop Dependabot recreating
it. You can achieve the same result by closing it manually
- `@dependabot show <dependency name> ignore conditions` will show all
of the ignore conditions of the specified dependency
- `@dependabot ignore this major version` will close this PR and stop
Dependabot creating any more for this major version (unless you reopen
the PR or upgrade to it yourself)
- `@dependabot ignore this minor version` will close this PR and stop
Dependabot creating any more for this minor version (unless you reopen
the PR or upgrade to it yourself)
- `@dependabot ignore this dependency` will close this PR and stop
Dependabot creating any more for this dependency (unless you reopen the
PR or upgrade to it yourself)
You can disable automated security fix PRs for this repo from the
[Security Alerts
page](https://github.com/facebook/react/network/alerts).

</details>

Signed-off-by: dependabot[bot] <support@github.com>
Co-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>",dependabot[bot],2023-11-01T19:20:01Z
169d3350f005a0ab184746e7eca3548116472a34,"Bump browserify-sign from 4.2.1 to 4.2.2 in /fixtures/ssr2 (#27616)

Bumps
[browserify-sign](https://github.com/crypto-browserify/browserify-sign)
from 4.2.1 to 4.2.2.
<details>
<summary>Changelog</summary>
<p><em>Sourced from <a
href=""https://github.com/browserify/browserify-sign/blob/main/CHANGELOG.md"">browserify-sign's
changelog</a>.</em></p>
<blockquote>
<h2><a
href=""https://github.com/browserify/browserify-sign/compare/v4.2.1...v4.2.2"">v4.2.2</a>
- 2023-10-25</h2>
<h3>Fixed</h3>
<ul>
<li>[Tests] log when openssl doesn't support cipher <a
href=""https://redirect.github.com/browserify/browserify-sign/issues/37""><code>[#37](https://github.com/crypto-browserify/browserify-sign/issues/37)</code></a></li>
</ul>
<h3>Commits</h3>
<ul>
<li>Only apps should have lockfiles <a
href=""https://github.com/browserify/browserify-sign/commit/09a89959393b3c89fedd4f7f3bafa4fec44371d7""><code>09a8995</code></a></li>
<li>[eslint] switch to eslint <a
href=""https://github.com/browserify/browserify-sign/commit/83fe46374b819e959d56d2c0b931308f7451a664""><code>83fe463</code></a></li>
<li>[meta] add <code>npmignore</code> and <code>auto-changelog</code> <a
href=""https://github.com/browserify/browserify-sign/commit/44181838e7dcc4d5d0c568f74312ea28f0bcdfd5""><code>4418183</code></a></li>
<li>[meta] fix package.json indentation <a
href=""https://github.com/browserify/browserify-sign/commit/9ac5a5eaaac8a11eb70ec2febd13745c8764ae02""><code>9ac5a5e</code></a></li>
<li>[Tests] migrate from travis to github actions <a
href=""https://github.com/browserify/browserify-sign/commit/d845d855def38e2085d5a21e447a48300f99fa60""><code>d845d85</code></a></li>
<li>[Fix] <code>sign</code>: throw on unsupported padding scheme <a
href=""https://github.com/browserify/browserify-sign/commit/8767739a4516289568bcce9fed8a3b7e23478de9""><code>8767739</code></a></li>
<li>[Fix] properly check the upper bound for DSA signatures <a
href=""https://github.com/browserify/browserify-sign/commit/85994cd6348b50f2fd1b73c54e20881416f44a30""><code>85994cd</code></a></li>
<li>[Tests] handle openSSL not supporting a scheme <a
href=""https://github.com/browserify/browserify-sign/commit/f5f17c27f9824de40b5ce8ebd8502111203fd6af""><code>f5f17c2</code></a></li>
<li>[Deps] update <code>bn.js</code>, <code>browserify-rsa</code>,
<code>elliptic</code>, <code>parse-asn1</code>,
<code>readable-stream</code>, <code>safe-buffer</code> <a
href=""https://github.com/browserify/browserify-sign/commit/a67d0eb4ffceabb366b69da69ce9a223e9d5e96b""><code>a67d0eb</code></a></li>
<li>[Dev Deps] update <code>nyc</code>, <code>standard</code>,
<code>tape</code> <a
href=""https://github.com/browserify/browserify-sign/commit/cc5350b96702fcba930e0662cf763844fd2f59bf""><code>cc5350b</code></a></li>
<li>[Tests] always run coverage; downgrade <code>nyc</code> <a
href=""https://github.com/browserify/browserify-sign/commit/75ce1d5c49a6591dd13422016c07f8f9cae13371""><code>75ce1d5</code></a></li>
<li>[meta] add <code>safe-publish-latest</code> <a
href=""https://github.com/browserify/browserify-sign/commit/dcf49ce85a1a66a6fb31689508d916d7894286a9""><code>dcf49ce</code></a></li>
<li>[Tests] add <code>npm run posttest</code> <a
href=""https://github.com/browserify/browserify-sign/commit/75dd8fd6ce56eb37b12e30807e5f913867b21733""><code>75dd8fd</code></a></li>
<li>[Dev Deps] update <code>tape</code> <a
href=""https://github.com/browserify/browserify-sign/commit/3aec0386dc8dfba8698be756ec770df863867c84""><code>3aec038</code></a></li>
<li>[Tests] skip unsupported schemes <a
href=""https://github.com/browserify/browserify-sign/commit/703c83ea72db2f45714fe749c6f04b05243ca9a8""><code>703c83e</code></a></li>
<li>[Tests] node &lt; 6 lacks array <code>includes</code> <a
href=""https://github.com/browserify/browserify-sign/commit/3aa43cfbc1fdde8481bcdd3bff581574159b869a""><code>3aa43cf</code></a></li>
<li>[Dev Deps] fix eslint range <a
href=""https://github.com/browserify/browserify-sign/commit/98d4e0d7ff18871b0ca07415f758a610ccf8ebbe""><code>98d4e0d</code></a></li>
</ul>
</blockquote>
</details>
<details>
<summary>Commits</summary>
<ul>
<li><a
href=""https://github.com/browserify/browserify-sign/commit/4af5a90bf8acd9e76e5671dc0497f6ba71968a2c""><code>4af5a90</code></a>
v4.2.2</li>
<li><a
href=""https://github.com/browserify/browserify-sign/commit/3aec0386dc8dfba8698be756ec770df863867c84""><code>3aec038</code></a>
[Dev Deps] update <code>tape</code></li>
<li><a
href=""https://github.com/browserify/browserify-sign/commit/85994cd6348b50f2fd1b73c54e20881416f44a30""><code>85994cd</code></a>
[Fix] properly check the upper bound for DSA signatures</li>
<li><a
href=""https://github.com/browserify/browserify-sign/commit/9ac5a5eaaac8a11eb70ec2febd13745c8764ae02""><code>9ac5a5e</code></a>
[meta] fix package.json indentation</li>
<li><a
href=""https://github.com/browserify/browserify-sign/commit/dcf49ce85a1a66a6fb31689508d916d7894286a9""><code>dcf49ce</code></a>
[meta] add <code>safe-publish-latest</code></li>
<li><a
href=""https://github.com/browserify/browserify-sign/commit/44181838e7dcc4d5d0c568f74312ea28f0bcdfd5""><code>4418183</code></a>
[meta] add <code>npmignore</code> and <code>auto-changelog</code></li>
<li><a
href=""https://github.com/browserify/browserify-sign/commit/8767739a4516289568bcce9fed8a3b7e23478de9""><code>8767739</code></a>
[Fix] <code>sign</code>: throw on unsupported padding scheme</li>
<li><a
href=""https://github.com/browserify/browserify-sign/commit/5f6fb1755917851a40249db7d834da4265ed5950""><code>5f6fb17</code></a>
[Tests] log when openssl doesn't support cipher</li>
<li><a
href=""https://github.com/browserify/browserify-sign/commit/f5f17c27f9824de40b5ce8ebd8502111203fd6af""><code>f5f17c2</code></a>
[Tests] handle openSSL not supporting a scheme</li>
<li><a
href=""https://github.com/browserify/browserify-sign/commit/d845d855def38e2085d5a21e447a48300f99fa60""><code>d845d85</code></a>
[Tests] migrate from travis to github actions</li>
<li>Additional commits viewable in <a
href=""https://github.com/crypto-browserify/browserify-sign/compare/v4.2.1...v4.2.2"">compare
view</a></li>
</ul>
</details>
<details>
<summary>Maintainer changes</summary>
<p>This version was pushed to npm by <a
href=""https://www.npmjs.com/~ljharb"">ljharb</a>, a new releaser for
browserify-sign since your current version.</p>
</details>
<br />


[![Dependabot compatibility
score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=browserify-sign&package-manager=npm_and_yarn&previous-version=4.2.1&new-version=4.2.2)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)

Dependabot will resolve any conflicts with this PR as long as you don't
alter it yourself. You can also trigger a rebase manually by commenting
`@dependabot rebase`.

[//]: # (dependabot-automerge-start)
[//]: # (dependabot-automerge-end)

---

<details>
<summary>Dependabot commands and options</summary>
<br />

You can trigger Dependabot actions by commenting on this PR:
- `@dependabot rebase` will rebase this PR
- `@dependabot recreate` will recreate this PR, overwriting any edits
that have been made to it
- `@dependabot merge` will merge this PR after your CI passes on it
- `@dependabot squash and merge` will squash and merge this PR after
your CI passes on it
- `@dependabot cancel merge` will cancel a previously requested merge
and block automerging
- `@dependabot reopen` will reopen this PR if it is closed
- `@dependabot close` will close this PR and stop Dependabot recreating
it. You can achieve the same result by closing it manually
- `@dependabot show <dependency name> ignore conditions` will show all
of the ignore conditions of the specified dependency
- `@dependabot ignore this major version` will close this PR and stop
Dependabot creating any more for this major version (unless you reopen
the PR or upgrade to it yourself)
- `@dependabot ignore this minor version` will close this PR and stop
Dependabot creating any more for this minor version (unless you reopen
the PR or upgrade to it yourself)
- `@dependabot ignore this dependency` will close this PR and stop
Dependabot creating any more for this dependency (unless you reopen the
PR or upgrade to it yourself)
You can disable automated security fix PRs for this repo from the
[Security Alerts
page](https://github.com/facebook/react/network/alerts).

</details>

Signed-off-by: dependabot[bot] <support@github.com>
Co-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>",dependabot[bot],2023-11-01T19:19:34Z
a675e5751b969750fc9ec4beeb43a72750644ac3,"Bump browserify-sign from 4.2.1 to 4.2.2 in /fixtures/concurrent/time-slicing (#27615)

Bumps
[browserify-sign](https://github.com/crypto-browserify/browserify-sign)
from 4.2.1 to 4.2.2.
<details>
<summary>Changelog</summary>
<p><em>Sourced from <a
href=""https://github.com/browserify/browserify-sign/blob/main/CHANGELOG.md"">browserify-sign's
changelog</a>.</em></p>
<blockquote>
<h2><a
href=""https://github.com/browserify/browserify-sign/compare/v4.2.1...v4.2.2"">v4.2.2</a>
- 2023-10-25</h2>
<h3>Fixed</h3>
<ul>
<li>[Tests] log when openssl doesn't support cipher <a
href=""https://redirect.github.com/browserify/browserify-sign/issues/37""><code>[#37](https://github.com/crypto-browserify/browserify-sign/issues/37)</code></a></li>
</ul>
<h3>Commits</h3>
<ul>
<li>Only apps should have lockfiles <a
href=""https://github.com/browserify/browserify-sign/commit/09a89959393b3c89fedd4f7f3bafa4fec44371d7""><code>09a8995</code></a></li>
<li>[eslint] switch to eslint <a
href=""https://github.com/browserify/browserify-sign/commit/83fe46374b819e959d56d2c0b931308f7451a664""><code>83fe463</code></a></li>
<li>[meta] add <code>npmignore</code> and <code>auto-changelog</code> <a
href=""https://github.com/browserify/browserify-sign/commit/44181838e7dcc4d5d0c568f74312ea28f0bcdfd5""><code>4418183</code></a></li>
<li>[meta] fix package.json indentation <a
href=""https://github.com/browserify/browserify-sign/commit/9ac5a5eaaac8a11eb70ec2febd13745c8764ae02""><code>9ac5a5e</code></a></li>
<li>[Tests] migrate from travis to github actions <a
href=""https://github.com/browserify/browserify-sign/commit/d845d855def38e2085d5a21e447a48300f99fa60""><code>d845d85</code></a></li>
<li>[Fix] <code>sign</code>: throw on unsupported padding scheme <a
href=""https://github.com/browserify/browserify-sign/commit/8767739a4516289568bcce9fed8a3b7e23478de9""><code>8767739</code></a></li>
<li>[Fix] properly check the upper bound for DSA signatures <a
href=""https://github.com/browserify/browserify-sign/commit/85994cd6348b50f2fd1b73c54e20881416f44a30""><code>85994cd</code></a></li>
<li>[Tests] handle openSSL not supporting a scheme <a
href=""https://github.com/browserify/browserify-sign/commit/f5f17c27f9824de40b5ce8ebd8502111203fd6af""><code>f5f17c2</code></a></li>
<li>[Deps] update <code>bn.js</code>, <code>browserify-rsa</code>,
<code>elliptic</code>, <code>parse-asn1</code>,
<code>readable-stream</code>, <code>safe-buffer</code> <a
href=""https://github.com/browserify/browserify-sign/commit/a67d0eb4ffceabb366b69da69ce9a223e9d5e96b""><code>a67d0eb</code></a></li>
<li>[Dev Deps] update <code>nyc</code>, <code>standard</code>,
<code>tape</code> <a
href=""https://github.com/browserify/browserify-sign/commit/cc5350b96702fcba930e0662cf763844fd2f59bf""><code>cc5350b</code></a></li>
<li>[Tests] always run coverage; downgrade <code>nyc</code> <a
href=""https://github.com/browserify/browserify-sign/commit/75ce1d5c49a6591dd13422016c07f8f9cae13371""><code>75ce1d5</code></a></li>
<li>[meta] add <code>safe-publish-latest</code> <a
href=""https://github.com/browserify/browserify-sign/commit/dcf49ce85a1a66a6fb31689508d916d7894286a9""><code>dcf49ce</code></a></li>
<li>[Tests] add <code>npm run posttest</code> <a
href=""https://github.com/browserify/browserify-sign/commit/75dd8fd6ce56eb37b12e30807e5f913867b21733""><code>75dd8fd</code></a></li>
<li>[Dev Deps] update <code>tape</code> <a
href=""https://github.com/browserify/browserify-sign/commit/3aec0386dc8dfba8698be756ec770df863867c84""><code>3aec038</code></a></li>
<li>[Tests] skip unsupported schemes <a
href=""https://github.com/browserify/browserify-sign/commit/703c83ea72db2f45714fe749c6f04b05243ca9a8""><code>703c83e</code></a></li>
<li>[Tests] node &lt; 6 lacks array <code>includes</code> <a
href=""https://github.com/browserify/browserify-sign/commit/3aa43cfbc1fdde8481bcdd3bff581574159b869a""><code>3aa43cf</code></a></li>
<li>[Dev Deps] fix eslint range <a
href=""https://github.com/browserify/browserify-sign/commit/98d4e0d7ff18871b0ca07415f758a610ccf8ebbe""><code>98d4e0d</code></a></li>
</ul>
</blockquote>
</details>
<details>
<summary>Commits</summary>
<ul>
<li><a
href=""https://github.com/browserify/browserify-sign/commit/4af5a90bf8acd9e76e5671dc0497f6ba71968a2c""><code>4af5a90</code></a>
v4.2.2</li>
<li><a
href=""https://github.com/browserify/browserify-sign/commit/3aec0386dc8dfba8698be756ec770df863867c84""><code>3aec038</code></a>
[Dev Deps] update <code>tape</code></li>
<li><a
href=""https://github.com/browserify/browserify-sign/commit/85994cd6348b50f2fd1b73c54e20881416f44a30""><code>85994cd</code></a>
[Fix] properly check the upper bound for DSA signatures</li>
<li><a
href=""https://github.com/browserify/browserify-sign/commit/9ac5a5eaaac8a11eb70ec2febd13745c8764ae02""><code>9ac5a5e</code></a>
[meta] fix package.json indentation</li>
<li><a
href=""https://github.com/browserify/browserify-sign/commit/dcf49ce85a1a66a6fb31689508d916d7894286a9""><code>dcf49ce</code></a>
[meta] add <code>safe-publish-latest</code></li>
<li><a
href=""https://github.com/browserify/browserify-sign/commit/44181838e7dcc4d5d0c568f74312ea28f0bcdfd5""><code>4418183</code></a>
[meta] add <code>npmignore</code> and <code>auto-changelog</code></li>
<li><a
href=""https://github.com/browserify/browserify-sign/commit/8767739a4516289568bcce9fed8a3b7e23478de9""><code>8767739</code></a>
[Fix] <code>sign</code>: throw on unsupported padding scheme</li>
<li><a
href=""https://github.com/browserify/browserify-sign/commit/5f6fb1755917851a40249db7d834da4265ed5950""><code>5f6fb17</code></a>
[Tests] log when openssl doesn't support cipher</li>
<li><a
href=""https://github.com/browserify/browserify-sign/commit/f5f17c27f9824de40b5ce8ebd8502111203fd6af""><code>f5f17c2</code></a>
[Tests] handle openSSL not supporting a scheme</li>
<li><a
href=""https://github.com/browserify/browserify-sign/commit/d845d855def38e2085d5a21e447a48300f99fa60""><code>d845d85</code></a>
[Tests] migrate from travis to github actions</li>
<li>Additional commits viewable in <a
href=""https://github.com/crypto-browserify/browserify-sign/compare/v4.2.1...v4.2.2"">compare
view</a></li>
</ul>
</details>
<details>
<summary>Maintainer changes</summary>
<p>This version was pushed to npm by <a
href=""https://www.npmjs.com/~ljharb"">ljharb</a>, a new releaser for
browserify-sign since your current version.</p>
</details>
<br />


[![Dependabot compatibility
score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=browserify-sign&package-manager=npm_and_yarn&previous-version=4.2.1&new-version=4.2.2)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)

Dependabot will resolve any conflicts with this PR as long as you don't
alter it yourself. You can also trigger a rebase manually by commenting
`@dependabot rebase`.

[//]: # (dependabot-automerge-start)
[//]: # (dependabot-automerge-end)

---

<details>
<summary>Dependabot commands and options</summary>
<br />

You can trigger Dependabot actions by commenting on this PR:
- `@dependabot rebase` will rebase this PR
- `@dependabot recreate` will recreate this PR, overwriting any edits
that have been made to it
- `@dependabot merge` will merge this PR after your CI passes on it
- `@dependabot squash and merge` will squash and merge this PR after
your CI passes on it
- `@dependabot cancel merge` will cancel a previously requested merge
and block automerging
- `@dependabot reopen` will reopen this PR if it is closed
- `@dependabot close` will close this PR and stop Dependabot recreating
it. You can achieve the same result by closing it manually
- `@dependabot show <dependency name> ignore conditions` will show all
of the ignore conditions of the specified dependency
- `@dependabot ignore this major version` will close this PR and stop
Dependabot creating any more for this major version (unless you reopen
the PR or upgrade to it yourself)
- `@dependabot ignore this minor version` will close this PR and stop
Dependabot creating any more for this minor version (unless you reopen
the PR or upgrade to it yourself)
- `@dependabot ignore this dependency` will close this PR and stop
Dependabot creating any more for this dependency (unless you reopen the
PR or upgrade to it yourself)
You can disable automated security fix PRs for this repo from the
[Security Alerts
page](https://github.com/facebook/react/network/alerts).

</details>

Signed-off-by: dependabot[bot] <support@github.com>
Co-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>",dependabot[bot],2023-11-01T19:19:28Z
2bd946956d9835652e64d796c9f0942107418f19,"Bump browserify-sign from 4.2.1 to 4.2.2 in /fixtures/fizz (#27614)

Bumps
[browserify-sign](https://github.com/crypto-browserify/browserify-sign)
from 4.2.1 to 4.2.2.
<details>
<summary>Changelog</summary>
<p><em>Sourced from <a
href=""https://github.com/browserify/browserify-sign/blob/main/CHANGELOG.md"">browserify-sign's
changelog</a>.</em></p>
<blockquote>
<h2><a
href=""https://github.com/browserify/browserify-sign/compare/v4.2.1...v4.2.2"">v4.2.2</a>
- 2023-10-25</h2>
<h3>Fixed</h3>
<ul>
<li>[Tests] log when openssl doesn't support cipher <a
href=""https://redirect.github.com/browserify/browserify-sign/issues/37""><code>[#37](https://github.com/crypto-browserify/browserify-sign/issues/37)</code></a></li>
</ul>
<h3>Commits</h3>
<ul>
<li>Only apps should have lockfiles <a
href=""https://github.com/browserify/browserify-sign/commit/09a89959393b3c89fedd4f7f3bafa4fec44371d7""><code>09a8995</code></a></li>
<li>[eslint] switch to eslint <a
href=""https://github.com/browserify/browserify-sign/commit/83fe46374b819e959d56d2c0b931308f7451a664""><code>83fe463</code></a></li>
<li>[meta] add <code>npmignore</code> and <code>auto-changelog</code> <a
href=""https://github.com/browserify/browserify-sign/commit/44181838e7dcc4d5d0c568f74312ea28f0bcdfd5""><code>4418183</code></a></li>
<li>[meta] fix package.json indentation <a
href=""https://github.com/browserify/browserify-sign/commit/9ac5a5eaaac8a11eb70ec2febd13745c8764ae02""><code>9ac5a5e</code></a></li>
<li>[Tests] migrate from travis to github actions <a
href=""https://github.com/browserify/browserify-sign/commit/d845d855def38e2085d5a21e447a48300f99fa60""><code>d845d85</code></a></li>
<li>[Fix] <code>sign</code>: throw on unsupported padding scheme <a
href=""https://github.com/browserify/browserify-sign/commit/8767739a4516289568bcce9fed8a3b7e23478de9""><code>8767739</code></a></li>
<li>[Fix] properly check the upper bound for DSA signatures <a
href=""https://github.com/browserify/browserify-sign/commit/85994cd6348b50f2fd1b73c54e20881416f44a30""><code>85994cd</code></a></li>
<li>[Tests] handle openSSL not supporting a scheme <a
href=""https://github.com/browserify/browserify-sign/commit/f5f17c27f9824de40b5ce8ebd8502111203fd6af""><code>f5f17c2</code></a></li>
<li>[Deps] update <code>bn.js</code>, <code>browserify-rsa</code>,
<code>elliptic</code>, <code>parse-asn1</code>,
<code>readable-stream</code>, <code>safe-buffer</code> <a
href=""https://github.com/browserify/browserify-sign/commit/a67d0eb4ffceabb366b69da69ce9a223e9d5e96b""><code>a67d0eb</code></a></li>
<li>[Dev Deps] update <code>nyc</code>, <code>standard</code>,
<code>tape</code> <a
href=""https://github.com/browserify/browserify-sign/commit/cc5350b96702fcba930e0662cf763844fd2f59bf""><code>cc5350b</code></a></li>
<li>[Tests] always run coverage; downgrade <code>nyc</code> <a
href=""https://github.com/browserify/browserify-sign/commit/75ce1d5c49a6591dd13422016c07f8f9cae13371""><code>75ce1d5</code></a></li>
<li>[meta] add <code>safe-publish-latest</code> <a
href=""https://github.com/browserify/browserify-sign/commit/dcf49ce85a1a66a6fb31689508d916d7894286a9""><code>dcf49ce</code></a></li>
<li>[Tests] add <code>npm run posttest</code> <a
href=""https://github.com/browserify/browserify-sign/commit/75dd8fd6ce56eb37b12e30807e5f913867b21733""><code>75dd8fd</code></a></li>
<li>[Dev Deps] update <code>tape</code> <a
href=""https://github.com/browserify/browserify-sign/commit/3aec0386dc8dfba8698be756ec770df863867c84""><code>3aec038</code></a></li>
<li>[Tests] skip unsupported schemes <a
href=""https://github.com/browserify/browserify-sign/commit/703c83ea72db2f45714fe749c6f04b05243ca9a8""><code>703c83e</code></a></li>
<li>[Tests] node &lt; 6 lacks array <code>includes</code> <a
href=""https://github.com/browserify/browserify-sign/commit/3aa43cfbc1fdde8481bcdd3bff581574159b869a""><code>3aa43cf</code></a></li>
<li>[Dev Deps] fix eslint range <a
href=""https://github.com/browserify/browserify-sign/commit/98d4e0d7ff18871b0ca07415f758a610ccf8ebbe""><code>98d4e0d</code></a></li>
</ul>
</blockquote>
</details>
<details>
<summary>Commits</summary>
<ul>
<li><a
href=""https://github.com/browserify/browserify-sign/commit/4af5a90bf8acd9e76e5671dc0497f6ba71968a2c""><code>4af5a90</code></a>
v4.2.2</li>
<li><a
href=""https://github.com/browserify/browserify-sign/commit/3aec0386dc8dfba8698be756ec770df863867c84""><code>3aec038</code></a>
[Dev Deps] update <code>tape</code></li>
<li><a
href=""https://github.com/browserify/browserify-sign/commit/85994cd6348b50f2fd1b73c54e20881416f44a30""><code>85994cd</code></a>
[Fix] properly check the upper bound for DSA signatures</li>
<li><a
href=""https://github.com/browserify/browserify-sign/commit/9ac5a5eaaac8a11eb70ec2febd13745c8764ae02""><code>9ac5a5e</code></a>
[meta] fix package.json indentation</li>
<li><a
href=""https://github.com/browserify/browserify-sign/commit/dcf49ce85a1a66a6fb31689508d916d7894286a9""><code>dcf49ce</code></a>
[meta] add <code>safe-publish-latest</code></li>
<li><a
href=""https://github.com/browserify/browserify-sign/commit/44181838e7dcc4d5d0c568f74312ea28f0bcdfd5""><code>4418183</code></a>
[meta] add <code>npmignore</code> and <code>auto-changelog</code></li>
<li><a
href=""https://github.com/browserify/browserify-sign/commit/8767739a4516289568bcce9fed8a3b7e23478de9""><code>8767739</code></a>
[Fix] <code>sign</code>: throw on unsupported padding scheme</li>
<li><a
href=""https://github.com/browserify/browserify-sign/commit/5f6fb1755917851a40249db7d834da4265ed5950""><code>5f6fb17</code></a>
[Tests] log when openssl doesn't support cipher</li>
<li><a
href=""https://github.com/browserify/browserify-sign/commit/f5f17c27f9824de40b5ce8ebd8502111203fd6af""><code>f5f17c2</code></a>
[Tests] handle openSSL not supporting a scheme</li>
<li><a
href=""https://github.com/browserify/browserify-sign/commit/d845d855def38e2085d5a21e447a48300f99fa60""><code>d845d85</code></a>
[Tests] migrate from travis to github actions</li>
<li>Additional commits viewable in <a
href=""https://github.com/crypto-browserify/browserify-sign/compare/v4.2.1...v4.2.2"">compare
view</a></li>
</ul>
</details>
<details>
<summary>Maintainer changes</summary>
<p>This version was pushed to npm by <a
href=""https://www.npmjs.com/~ljharb"">ljharb</a>, a new releaser for
browserify-sign since your current version.</p>
</details>
<br />


[![Dependabot compatibility
score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=browserify-sign&package-manager=npm_and_yarn&previous-version=4.2.1&new-version=4.2.2)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)

Dependabot will resolve any conflicts with this PR as long as you don't
alter it yourself. You can also trigger a rebase manually by commenting
`@dependabot rebase`.

[//]: # (dependabot-automerge-start)
[//]: # (dependabot-automerge-end)

---

<details>
<summary>Dependabot commands and options</summary>
<br />

You can trigger Dependabot actions by commenting on this PR:
- `@dependabot rebase` will rebase this PR
- `@dependabot recreate` will recreate this PR, overwriting any edits
that have been made to it
- `@dependabot merge` will merge this PR after your CI passes on it
- `@dependabot squash and merge` will squash and merge this PR after
your CI passes on it
- `@dependabot cancel merge` will cancel a previously requested merge
and block automerging
- `@dependabot reopen` will reopen this PR if it is closed
- `@dependabot close` will close this PR and stop Dependabot recreating
it. You can achieve the same result by closing it manually
- `@dependabot show <dependency name> ignore conditions` will show all
of the ignore conditions of the specified dependency
- `@dependabot ignore this major version` will close this PR and stop
Dependabot creating any more for this major version (unless you reopen
the PR or upgrade to it yourself)
- `@dependabot ignore this minor version` will close this PR and stop
Dependabot creating any more for this minor version (unless you reopen
the PR or upgrade to it yourself)
- `@dependabot ignore this dependency` will close this PR and stop
Dependabot creating any more for this dependency (unless you reopen the
PR or upgrade to it yourself)
You can disable automated security fix PRs for this repo from the
[Security Alerts
page](https://github.com/facebook/react/network/alerts).

</details>

Signed-off-by: dependabot[bot] <support@github.com>
Co-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>",dependabot[bot],2023-11-01T19:19:22Z
a79b55df7468f07724da2c81ef1280c65ea6bc76,"Bump browserify-sign from 4.0.4 to 4.2.2 in /fixtures/packaging/browserify/prod (#27599)

Bumps
[browserify-sign](https://github.com/crypto-browserify/browserify-sign)
from 4.0.4 to 4.2.2.
<details>
<summary>Changelog</summary>
<p><em>Sourced from <a
href=""https://github.com/browserify/browserify-sign/blob/main/CHANGELOG.md"">browserify-sign's
changelog</a>.</em></p>
<blockquote>
<h2><a
href=""https://github.com/browserify/browserify-sign/compare/v4.2.1...v4.2.2"">v4.2.2</a>
- 2023-10-25</h2>
<h3>Fixed</h3>
<ul>
<li>[Tests] log when openssl doesn't support cipher <a
href=""https://redirect.github.com/browserify/browserify-sign/issues/37""><code>[#37](https://github.com/crypto-browserify/browserify-sign/issues/37)</code></a></li>
</ul>
<h3>Commits</h3>
<ul>
<li>Only apps should have lockfiles <a
href=""https://github.com/browserify/browserify-sign/commit/09a89959393b3c89fedd4f7f3bafa4fec44371d7""><code>09a8995</code></a></li>
<li>[eslint] switch to eslint <a
href=""https://github.com/browserify/browserify-sign/commit/83fe46374b819e959d56d2c0b931308f7451a664""><code>83fe463</code></a></li>
<li>[meta] add <code>npmignore</code> and <code>auto-changelog</code> <a
href=""https://github.com/browserify/browserify-sign/commit/44181838e7dcc4d5d0c568f74312ea28f0bcdfd5""><code>4418183</code></a></li>
<li>[meta] fix package.json indentation <a
href=""https://github.com/browserify/browserify-sign/commit/9ac5a5eaaac8a11eb70ec2febd13745c8764ae02""><code>9ac5a5e</code></a></li>
<li>[Tests] migrate from travis to github actions <a
href=""https://github.com/browserify/browserify-sign/commit/d845d855def38e2085d5a21e447a48300f99fa60""><code>d845d85</code></a></li>
<li>[Fix] <code>sign</code>: throw on unsupported padding scheme <a
href=""https://github.com/browserify/browserify-sign/commit/8767739a4516289568bcce9fed8a3b7e23478de9""><code>8767739</code></a></li>
<li>[Fix] properly check the upper bound for DSA signatures <a
href=""https://github.com/browserify/browserify-sign/commit/85994cd6348b50f2fd1b73c54e20881416f44a30""><code>85994cd</code></a></li>
<li>[Tests] handle openSSL not supporting a scheme <a
href=""https://github.com/browserify/browserify-sign/commit/f5f17c27f9824de40b5ce8ebd8502111203fd6af""><code>f5f17c2</code></a></li>
<li>[Deps] update <code>bn.js</code>, <code>browserify-rsa</code>,
<code>elliptic</code>, <code>parse-asn1</code>,
<code>readable-stream</code>, <code>safe-buffer</code> <a
href=""https://github.com/browserify/browserify-sign/commit/a67d0eb4ffceabb366b69da69ce9a223e9d5e96b""><code>a67d0eb</code></a></li>
<li>[Dev Deps] update <code>nyc</code>, <code>standard</code>,
<code>tape</code> <a
href=""https://github.com/browserify/browserify-sign/commit/cc5350b96702fcba930e0662cf763844fd2f59bf""><code>cc5350b</code></a></li>
<li>[Tests] always run coverage; downgrade <code>nyc</code> <a
href=""https://github.com/browserify/browserify-sign/commit/75ce1d5c49a6591dd13422016c07f8f9cae13371""><code>75ce1d5</code></a></li>
<li>[meta] add <code>safe-publish-latest</code> <a
href=""https://github.com/browserify/browserify-sign/commit/dcf49ce85a1a66a6fb31689508d916d7894286a9""><code>dcf49ce</code></a></li>
<li>[Tests] add <code>npm run posttest</code> <a
href=""https://github.com/browserify/browserify-sign/commit/75dd8fd6ce56eb37b12e30807e5f913867b21733""><code>75dd8fd</code></a></li>
<li>[Dev Deps] update <code>tape</code> <a
href=""https://github.com/browserify/browserify-sign/commit/3aec0386dc8dfba8698be756ec770df863867c84""><code>3aec038</code></a></li>
<li>[Tests] skip unsupported schemes <a
href=""https://github.com/browserify/browserify-sign/commit/703c83ea72db2f45714fe749c6f04b05243ca9a8""><code>703c83e</code></a></li>
<li>[Tests] node &lt; 6 lacks array <code>includes</code> <a
href=""https://github.com/browserify/browserify-sign/commit/3aa43cfbc1fdde8481bcdd3bff581574159b869a""><code>3aa43cf</code></a></li>
<li>[Dev Deps] fix eslint range <a
href=""https://github.com/browserify/browserify-sign/commit/98d4e0d7ff18871b0ca07415f758a610ccf8ebbe""><code>98d4e0d</code></a></li>
</ul>
<h2><a
href=""https://github.com/browserify/browserify-sign/compare/v4.2.0...v4.2.1"">v4.2.1</a>
- 2020-08-04</h2>
<h3>Merged</h3>
<ul>
<li>bump elliptic <a
href=""https://redirect.github.com/browserify/browserify-sign/pull/58""><code>[#58](https://github.com/crypto-browserify/browserify-sign/issues/58)</code></a></li>
</ul>
<h2><a
href=""https://github.com/browserify/browserify-sign/compare/v4.1.0...v4.2.0"">v4.2.0</a>
- 2020-05-18</h2>
<h3>Merged</h3>
<ul>
<li>switch to safe buffer <a
href=""https://redirect.github.com/browserify/browserify-sign/pull/53""><code>[#53](https://github.com/crypto-browserify/browserify-sign/issues/53)</code></a></li>
</ul>
<h2><a
href=""https://github.com/browserify/browserify-sign/compare/v4.0.4...v4.1.0"">v4.1.0</a>
- 2020-05-05</h2>
<h3>Merged</h3>
<ul>
<li>update deps, modernise usage, use readable-stream <a
href=""https://redirect.github.com/browserify/browserify-sign/pull/49""><code>[#49](https://github.com/crypto-browserify/browserify-sign/issues/49)</code></a></li>
</ul>
</blockquote>
</details>
<details>
<summary>Commits</summary>
<ul>
<li><a
href=""https://github.com/browserify/browserify-sign/commit/4af5a90bf8acd9e76e5671dc0497f6ba71968a2c""><code>4af5a90</code></a>
v4.2.2</li>
<li><a
href=""https://github.com/browserify/browserify-sign/commit/3aec0386dc8dfba8698be756ec770df863867c84""><code>3aec038</code></a>
[Dev Deps] update <code>tape</code></li>
<li><a
href=""https://github.com/browserify/browserify-sign/commit/85994cd6348b50f2fd1b73c54e20881416f44a30""><code>85994cd</code></a>
[Fix] properly check the upper bound for DSA signatures</li>
<li><a
href=""https://github.com/browserify/browserify-sign/commit/9ac5a5eaaac8a11eb70ec2febd13745c8764ae02""><code>9ac5a5e</code></a>
[meta] fix package.json indentation</li>
<li><a
href=""https://github.com/browserify/browserify-sign/commit/dcf49ce85a1a66a6fb31689508d916d7894286a9""><code>dcf49ce</code></a>
[meta] add <code>safe-publish-latest</code></li>
<li><a
href=""https://github.com/browserify/browserify-sign/commit/44181838e7dcc4d5d0c568f74312ea28f0bcdfd5""><code>4418183</code></a>
[meta] add <code>npmignore</code> and <code>auto-changelog</code></li>
<li><a
href=""https://github.com/browserify/browserify-sign/commit/8767739a4516289568bcce9fed8a3b7e23478de9""><code>8767739</code></a>
[Fix] <code>sign</code>: throw on unsupported padding scheme</li>
<li><a
href=""https://github.com/browserify/browserify-sign/commit/5f6fb1755917851a40249db7d834da4265ed5950""><code>5f6fb17</code></a>
[Tests] log when openssl doesn't support cipher</li>
<li><a
href=""https://github.com/browserify/browserify-sign/commit/f5f17c27f9824de40b5ce8ebd8502111203fd6af""><code>f5f17c2</code></a>
[Tests] handle openSSL not supporting a scheme</li>
<li><a
href=""https://github.com/browserify/browserify-sign/commit/d845d855def38e2085d5a21e447a48300f99fa60""><code>d845d85</code></a>
[Tests] migrate from travis to github actions</li>
<li>Additional commits viewable in <a
href=""https://github.com/crypto-browserify/browserify-sign/compare/v4.0.4...v4.2.2"">compare
view</a></li>
</ul>
</details>
<details>
<summary>Maintainer changes</summary>
<p>This version was pushed to npm by <a
href=""https://www.npmjs.com/~ljharb"">ljharb</a>, a new releaser for
browserify-sign since your current version.</p>
</details>
<br />


[![Dependabot compatibility
score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=browserify-sign&package-manager=npm_and_yarn&previous-version=4.0.4&new-version=4.2.2)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)

Dependabot will resolve any conflicts with this PR as long as you don't
alter it yourself. You can also trigger a rebase manually by commenting
`@dependabot rebase`.

[//]: # (dependabot-automerge-start)
[//]: # (dependabot-automerge-end)

---

<details>
<summary>Dependabot commands and options</summary>
<br />

You can trigger Dependabot actions by commenting on this PR:
- `@dependabot rebase` will rebase this PR
- `@dependabot recreate` will recreate this PR, overwriting any edits
that have been made to it
- `@dependabot merge` will merge this PR after your CI passes on it
- `@dependabot squash and merge` will squash and merge this PR after
your CI passes on it
- `@dependabot cancel merge` will cancel a previously requested merge
and block automerging
- `@dependabot reopen` will reopen this PR if it is closed
- `@dependabot close` will close this PR and stop Dependabot recreating
it. You can achieve the same result by closing it manually
- `@dependabot show <dependency name> ignore conditions` will show all
of the ignore conditions of the specified dependency
- `@dependabot ignore this major version` will close this PR and stop
Dependabot creating any more for this major version (unless you reopen
the PR or upgrade to it yourself)
- `@dependabot ignore this minor version` will close this PR and stop
Dependabot creating any more for this minor version (unless you reopen
the PR or upgrade to it yourself)
- `@dependabot ignore this dependency` will close this PR and stop
Dependabot creating any more for this dependency (unless you reopen the
PR or upgrade to it yourself)
You can disable automated security fix PRs for this repo from the
[Security Alerts
page](https://github.com/facebook/react/network/alerts).

</details>

Signed-off-by: dependabot[bot] <support@github.com>
Co-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>",dependabot[bot],2023-11-01T19:19:07Z
c988756f95e0316a4f913227e108653f88574b2b,"Bump browserify-sign from 4.0.4 to 4.2.2 in /fixtures/packaging/browserify/dev (#27597)

Bumps
[browserify-sign](https://github.com/crypto-browserify/browserify-sign)
from 4.0.4 to 4.2.2.
<details>
<summary>Changelog</summary>
<p><em>Sourced from <a
href=""https://github.com/browserify/browserify-sign/blob/main/CHANGELOG.md"">browserify-sign's
changelog</a>.</em></p>
<blockquote>
<h2><a
href=""https://github.com/browserify/browserify-sign/compare/v4.2.1...v4.2.2"">v4.2.2</a>
- 2023-10-25</h2>
<h3>Fixed</h3>
<ul>
<li>[Tests] log when openssl doesn't support cipher <a
href=""https://redirect.github.com/browserify/browserify-sign/issues/37""><code>[#37](https://github.com/crypto-browserify/browserify-sign/issues/37)</code></a></li>
</ul>
<h3>Commits</h3>
<ul>
<li>Only apps should have lockfiles <a
href=""https://github.com/browserify/browserify-sign/commit/09a89959393b3c89fedd4f7f3bafa4fec44371d7""><code>09a8995</code></a></li>
<li>[eslint] switch to eslint <a
href=""https://github.com/browserify/browserify-sign/commit/83fe46374b819e959d56d2c0b931308f7451a664""><code>83fe463</code></a></li>
<li>[meta] add <code>npmignore</code> and <code>auto-changelog</code> <a
href=""https://github.com/browserify/browserify-sign/commit/44181838e7dcc4d5d0c568f74312ea28f0bcdfd5""><code>4418183</code></a></li>
<li>[meta] fix package.json indentation <a
href=""https://github.com/browserify/browserify-sign/commit/9ac5a5eaaac8a11eb70ec2febd13745c8764ae02""><code>9ac5a5e</code></a></li>
<li>[Tests] migrate from travis to github actions <a
href=""https://github.com/browserify/browserify-sign/commit/d845d855def38e2085d5a21e447a48300f99fa60""><code>d845d85</code></a></li>
<li>[Fix] <code>sign</code>: throw on unsupported padding scheme <a
href=""https://github.com/browserify/browserify-sign/commit/8767739a4516289568bcce9fed8a3b7e23478de9""><code>8767739</code></a></li>
<li>[Fix] properly check the upper bound for DSA signatures <a
href=""https://github.com/browserify/browserify-sign/commit/85994cd6348b50f2fd1b73c54e20881416f44a30""><code>85994cd</code></a></li>
<li>[Tests] handle openSSL not supporting a scheme <a
href=""https://github.com/browserify/browserify-sign/commit/f5f17c27f9824de40b5ce8ebd8502111203fd6af""><code>f5f17c2</code></a></li>
<li>[Deps] update <code>bn.js</code>, <code>browserify-rsa</code>,
<code>elliptic</code>, <code>parse-asn1</code>,
<code>readable-stream</code>, <code>safe-buffer</code> <a
href=""https://github.com/browserify/browserify-sign/commit/a67d0eb4ffceabb366b69da69ce9a223e9d5e96b""><code>a67d0eb</code></a></li>
<li>[Dev Deps] update <code>nyc</code>, <code>standard</code>,
<code>tape</code> <a
href=""https://github.com/browserify/browserify-sign/commit/cc5350b96702fcba930e0662cf763844fd2f59bf""><code>cc5350b</code></a></li>
<li>[Tests] always run coverage; downgrade <code>nyc</code> <a
href=""https://github.com/browserify/browserify-sign/commit/75ce1d5c49a6591dd13422016c07f8f9cae13371""><code>75ce1d5</code></a></li>
<li>[meta] add <code>safe-publish-latest</code> <a
href=""https://github.com/browserify/browserify-sign/commit/dcf49ce85a1a66a6fb31689508d916d7894286a9""><code>dcf49ce</code></a></li>
<li>[Tests] add <code>npm run posttest</code> <a
href=""https://github.com/browserify/browserify-sign/commit/75dd8fd6ce56eb37b12e30807e5f913867b21733""><code>75dd8fd</code></a></li>
<li>[Dev Deps] update <code>tape</code> <a
href=""https://github.com/browserify/browserify-sign/commit/3aec0386dc8dfba8698be756ec770df863867c84""><code>3aec038</code></a></li>
<li>[Tests] skip unsupported schemes <a
href=""https://github.com/browserify/browserify-sign/commit/703c83ea72db2f45714fe749c6f04b05243ca9a8""><code>703c83e</code></a></li>
<li>[Tests] node &lt; 6 lacks array <code>includes</code> <a
href=""https://github.com/browserify/browserify-sign/commit/3aa43cfbc1fdde8481bcdd3bff581574159b869a""><code>3aa43cf</code></a></li>
<li>[Dev Deps] fix eslint range <a
href=""https://github.com/browserify/browserify-sign/commit/98d4e0d7ff18871b0ca07415f758a610ccf8ebbe""><code>98d4e0d</code></a></li>
</ul>
<h2><a
href=""https://github.com/browserify/browserify-sign/compare/v4.2.0...v4.2.1"">v4.2.1</a>
- 2020-08-04</h2>
<h3>Merged</h3>
<ul>
<li>bump elliptic <a
href=""https://redirect.github.com/browserify/browserify-sign/pull/58""><code>[#58](https://github.com/crypto-browserify/browserify-sign/issues/58)</code></a></li>
</ul>
<h2><a
href=""https://github.com/browserify/browserify-sign/compare/v4.1.0...v4.2.0"">v4.2.0</a>
- 2020-05-18</h2>
<h3>Merged</h3>
<ul>
<li>switch to safe buffer <a
href=""https://redirect.github.com/browserify/browserify-sign/pull/53""><code>[#53](https://github.com/crypto-browserify/browserify-sign/issues/53)</code></a></li>
</ul>
<h2><a
href=""https://github.com/browserify/browserify-sign/compare/v4.0.4...v4.1.0"">v4.1.0</a>
- 2020-05-05</h2>
<h3>Merged</h3>
<ul>
<li>update deps, modernise usage, use readable-stream <a
href=""https://redirect.github.com/browserify/browserify-sign/pull/49""><code>[#49](https://github.com/crypto-browserify/browserify-sign/issues/49)</code></a></li>
</ul>
</blockquote>
</details>
<details>
<summary>Commits</summary>
<ul>
<li><a
href=""https://github.com/browserify/browserify-sign/commit/4af5a90bf8acd9e76e5671dc0497f6ba71968a2c""><code>4af5a90</code></a>
v4.2.2</li>
<li><a
href=""https://github.com/browserify/browserify-sign/commit/3aec0386dc8dfba8698be756ec770df863867c84""><code>3aec038</code></a>
[Dev Deps] update <code>tape</code></li>
<li><a
href=""https://github.com/browserify/browserify-sign/commit/85994cd6348b50f2fd1b73c54e20881416f44a30""><code>85994cd</code></a>
[Fix] properly check the upper bound for DSA signatures</li>
<li><a
href=""https://github.com/browserify/browserify-sign/commit/9ac5a5eaaac8a11eb70ec2febd13745c8764ae02""><code>9ac5a5e</code></a>
[meta] fix package.json indentation</li>
<li><a
href=""https://github.com/browserify/browserify-sign/commit/dcf49ce85a1a66a6fb31689508d916d7894286a9""><code>dcf49ce</code></a>
[meta] add <code>safe-publish-latest</code></li>
<li><a
href=""https://github.com/browserify/browserify-sign/commit/44181838e7dcc4d5d0c568f74312ea28f0bcdfd5""><code>4418183</code></a>
[meta] add <code>npmignore</code> and <code>auto-changelog</code></li>
<li><a
href=""https://github.com/browserify/browserify-sign/commit/8767739a4516289568bcce9fed8a3b7e23478de9""><code>8767739</code></a>
[Fix] <code>sign</code>: throw on unsupported padding scheme</li>
<li><a
href=""https://github.com/browserify/browserify-sign/commit/5f6fb1755917851a40249db7d834da4265ed5950""><code>5f6fb17</code></a>
[Tests] log when openssl doesn't support cipher</li>
<li><a
href=""https://github.com/browserify/browserify-sign/commit/f5f17c27f9824de40b5ce8ebd8502111203fd6af""><code>f5f17c2</code></a>
[Tests] handle openSSL not supporting a scheme</li>
<li><a
href=""https://github.com/browserify/browserify-sign/commit/d845d855def38e2085d5a21e447a48300f99fa60""><code>d845d85</code></a>
[Tests] migrate from travis to github actions</li>
<li>Additional commits viewable in <a
href=""https://github.com/crypto-browserify/browserify-sign/compare/v4.0.4...v4.2.2"">compare
view</a></li>
</ul>
</details>
<details>
<summary>Maintainer changes</summary>
<p>This version was pushed to npm by <a
href=""https://www.npmjs.com/~ljharb"">ljharb</a>, a new releaser for
browserify-sign since your current version.</p>
</details>
<br />


[![Dependabot compatibility
score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=browserify-sign&package-manager=npm_and_yarn&previous-version=4.0.4&new-version=4.2.2)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)

Dependabot will resolve any conflicts with this PR as long as you don't
alter it yourself. You can also trigger a rebase manually by commenting
`@dependabot rebase`.

[//]: # (dependabot-automerge-start)
[//]: # (dependabot-automerge-end)

---

<details>
<summary>Dependabot commands and options</summary>
<br />

You can trigger Dependabot actions by commenting on this PR:
- `@dependabot rebase` will rebase this PR
- `@dependabot recreate` will recreate this PR, overwriting any edits
that have been made to it
- `@dependabot merge` will merge this PR after your CI passes on it
- `@dependabot squash and merge` will squash and merge this PR after
your CI passes on it
- `@dependabot cancel merge` will cancel a previously requested merge
and block automerging
- `@dependabot reopen` will reopen this PR if it is closed
- `@dependabot close` will close this PR and stop Dependabot recreating
it. You can achieve the same result by closing it manually
- `@dependabot show <dependency name> ignore conditions` will show all
of the ignore conditions of the specified dependency
- `@dependabot ignore this major version` will close this PR and stop
Dependabot creating any more for this major version (unless you reopen
the PR or upgrade to it yourself)
- `@dependabot ignore this minor version` will close this PR and stop
Dependabot creating any more for this minor version (unless you reopen
the PR or upgrade to it yourself)
- `@dependabot ignore this dependency` will close this PR and stop
Dependabot creating any more for this dependency (unless you reopen the
PR or upgrade to it yourself)
You can disable automated security fix PRs for this repo from the
[Security Alerts
page](https://github.com/facebook/react/network/alerts).

</details>

Signed-off-by: dependabot[bot] <support@github.com>
Co-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>",dependabot[bot],2023-11-01T19:18:54Z
d947c2f1100dfd006fd91c6e9ed84d42ca7ab088,"Allow `useEffect(fn, undefined)` in `react-hooks/exhaustive-deps`. (#27525)

## Summary

There is a bug in the `react-hooks/exhaustive-deps` rule that forbids
the dependencies argument from being `undefined`. It triggers the error
that the dependency list is not an array literal. This makes sense in
pre ES5 strict-mode environments as undefined could be redefined, but
should not be a concern in today's JS environments.

**Justification:**
* The deps argument being undefined (for `useEffect` calls etc.) is a
valid use case for hooks that should re-run on every render.
* The deps argument being omitted is considered a valid use case by the
`exhaustive-deps` rule already.
* The TypeScript type definitions support passing `undefined` because
hooks are typed as `useEffect(effect: EffectCallback, deps?:
DependencyList): void;`.
* Since omitting an argument and passing `undefined` are considered
equivalent, this eslint rule should consider them as equivalent too.

Further, I accidentally forgot passing a dependency array to `useEffect`
in code that I shared on Twitter, and people started abusing me about
it. I'd like to create an eslint rule for my projects that requires me
to provide a dep argument in all cases (`undefined`, `[]` or the list of
dependencies) so that I can avoid such problems in the future. This
would also force me to always think about the dependencies instead of
accidentally forgetting them and my hook running on each render. In an
audit of my own codebase I had about 3% of hooks that I want to run on
each render, and adding an explicit `undefined` seems reasonable in
those situations.

It could be argued this could be an option or part of the
`exhaustive-deps` rule, but it's probably better to merge this PR, make
a release and see if my custom eslint rule gains traction in the future.

## How did you test this change?

* Added a test.
* `yarn test ESLintRuleExhaustiveDeps-test`
* Careful code inspection.",Christoph Nakazawa,2023-11-01T19:05:55Z
77c4ac2ce88736bbdfe0b29008b5df931c2beb1e,"[useFormState] Allow sync actions (#27571)

Updates useFormState to allow a sync function to be passed as an action.

A form action is almost always async, because it needs to talk to the
server. But since we support client-side actions, too, there's no reason
we can't allow sync actions, too.

I originally chose not to allow them to keep the implementation simpler
but it's not really that much more complicated because we already
support this for actions passed to startTransition. So now it's
consistent: anywhere an action is accepted, a sync client function is a
valid input.",Andrew Clark,2023-11-01T03:32:31Z
08a39539fc6922cdb9e2405029127a1911b1b809,"[Flight][Reply] Close Response after creating root chunk (#27634)

creating the root after closing the response can lead to a promise that
never rejects. This is not intended use of the decodeReply API but if
pathalogical cases where you pass a raw FormData into this fucntion with
no zero chunk it can hang forever. This reordering causes a connection
error instead

---------

Co-authored-by: Zack Tanner <zacktanner@gmail.com>",Josh Story,2023-11-01T01:31:10Z
ca16c26356221a4b52185d7425d77675f0307250,"validateDOMNesting: Allow hr as child of select (#27632)

fix #27572

---------

Co-authored-by: Sophie Alpert <git@sophiebits.com>",Sourabh singh,2023-10-31T21:43:16Z
0c6348758f89be250070560972e736171201f82d,"refactor[scripts/prettier]: respect .prettierignore when resolving js files via glob (#27627)

This script is used on CI in `yarn_lint` job. With current `glob` call
settings, it includes a bunch of build files, which are actually ignored
by listing them in `.prettierignore`. This check is not failing only
because there is no build step before it.

If you run `node ./scripts/prettier/index` with build files present, you
will see a bunch of files listed as non-formatted. These changes add a
simple logic to include all paths listed in `.prettierignore` to ignore
list of `glob` call with transforming them from gitignore-style to
glob-style.

This should unblock CI for https://github.com/facebook/react/pull/27612,
where `flow-typed` directory will be added, turned out that including it
in `.prettierignore` is not enough.",Ruslan Lesiutin,2023-10-30T15:32:40Z
0965fbcab3616523086d05c1069492cc171cbb80,"Update utils-test.js desciption (#27624)

<!--
  Thanks for submitting a pull request!
We appreciate you spending the time to work on these changes. Please
provide enough information so that others can review your pull request.
The three fields below are mandatory.

Before submitting a pull request, please make sure the following is
done:

1. Fork [the repository](https://github.com/facebook/react) and create
your branch from `main`.
  2. Run `yarn` in the repository root.
3. If you've fixed a bug or added code that should be tested, add tests!
4. Ensure the test suite passes (`yarn test`). Tip: `yarn test --watch
TestName` is helpful in development.
5. Run `yarn test --prod` to test in the production environment. It
supports the same options as `yarn test`.
6. If you need a debugger, run `yarn test --debug --watch TestName`,
open `chrome://inspect`, and press ""Inspect"".
7. Format your code with
[prettier](https://github.com/prettier/prettier) (`yarn prettier`).
8. Make sure your code lints (`yarn lint`). Tip: `yarn linc` to only
check changed files.
  9. Run the [Flow](https://flowtype.org/) type checks (`yarn flow`).
  10. If you haven't already, complete the CLA.

Learn more about contributing:
https://reactjs.org/docs/how-to-contribute.html
-->

## Summary
   Updated the typo in test description
<!--
Explain the **motivation** for making this change. What existing problem
does the pull request solve?
-->

## How did you test this change?
NA, correct test description improves readability of the code and
confusion for anyone who is new to the codebase.
<!--
Demonstrate the code is solid. Example: The exact commands you ran and
their output, screenshots / videos if the pull request changes the user
interface.
How exactly did you verify that your PR solves the issue you wanted to
solve?
  If you leave this empty, your PR will very likely be closed.
  
-->",AZM,2023-10-30T11:40:18Z
3e09c27b880e1fecdb1eca5db510ecce37ea6be2,"[Float][Fiber] Fixes incorrect boolean logic around loading states for stylesheets (#27610)

the loading states of stylesheets found in the DOM during preinit should
be assumed to be loaded",Josh Story,2023-10-27T15:50:40Z
8039e6d0b93b642a4bd1ee7dbe108d2153fd2981,"Bump lodash from 4.17.4 to 4.17.21 in /fixtures/attribute-behavior (#27592)

[//]: # (dependabot-start)
⚠️  **Dependabot is rebasing this PR** ⚠️ 

Rebasing might not happen immediately, so don't worry if this takes some
time.

Note: if you make any changes to this PR yourself, they will take
precedence over the rebase.

---

[//]: # (dependabot-end)

Bumps [lodash](https://github.com/lodash/lodash) from 4.17.4 to 4.17.21.
<details>
<summary>Commits</summary>
<ul>
<li><a
href=""https://github.com/lodash/lodash/commit/f299b52f39486275a9e6483b60a410e06520c538""><code>f299b52</code></a>
Bump to v4.17.21</li>
<li><a
href=""https://github.com/lodash/lodash/commit/c4847ebe7d14540bb28a8b932a9ce1b9ecbfee1a""><code>c4847eb</code></a>
Improve performance of <code>toNumber</code>, <code>trim</code> and
<code>trimEnd</code> on large input strings</li>
<li><a
href=""https://github.com/lodash/lodash/commit/3469357cff396a26c363f8c1b5a91dde28ba4b1c""><code>3469357</code></a>
Prevent command injection through <code>_.template</code>'s
<code>variable</code> option</li>
<li><a
href=""https://github.com/lodash/lodash/commit/ded9bc66583ed0b4e3b7dc906206d40757b4a90a""><code>ded9bc6</code></a>
Bump to v4.17.20.</li>
<li><a
href=""https://github.com/lodash/lodash/commit/63150ef7645ac07961b63a86490f419f356429aa""><code>63150ef</code></a>
Documentation fixes.</li>
<li><a
href=""https://github.com/lodash/lodash/commit/00f0f62a979d2f5fa0287c06eae70cf9a62d8794""><code>00f0f62</code></a>
test.js: Remove trailing comma.</li>
<li><a
href=""https://github.com/lodash/lodash/commit/846e434c7a5b5692c55ebf5715ed677b70a32389""><code>846e434</code></a>
Temporarily use a custom fork of <code>lodash-cli</code>.</li>
<li><a
href=""https://github.com/lodash/lodash/commit/5d046f39cbd27f573914768e3b36eeefcc4f1229""><code>5d046f3</code></a>
Re-enable Travis tests on <code>4.17</code> branch.</li>
<li><a
href=""https://github.com/lodash/lodash/commit/aa816b36d402a1ad9385142ce7188f17dae514fd""><code>aa816b3</code></a>
Remove <code>/npm-package</code>.</li>
<li><a
href=""https://github.com/lodash/lodash/commit/d7fbc52ee0466a6d248f047b5d5c3e6d1e099056""><code>d7fbc52</code></a>
Bump to v4.17.19</li>
<li>Additional commits viewable in <a
href=""https://github.com/lodash/lodash/compare/4.17.4...4.17.21"">compare
view</a></li>
</ul>
</details>
<details>
<summary>Maintainer changes</summary>
<p>This version was pushed to npm by <a
href=""https://www.npmjs.com/~bnjmnt4n"">bnjmnt4n</a>, a new releaser for
lodash since your current version.</p>
</details>
<br />


[![Dependabot compatibility
score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=lodash&package-manager=npm_and_yarn&previous-version=4.17.4&new-version=4.17.21)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)

Dependabot will resolve any conflicts with this PR as long as you don't
alter it yourself. You can also trigger a rebase manually by commenting
`@dependabot rebase`.

[//]: # (dependabot-automerge-start)
[//]: # (dependabot-automerge-end)

---

<details>
<summary>Dependabot commands and options</summary>
<br />

You can trigger Dependabot actions by commenting on this PR:
- `@dependabot rebase` will rebase this PR
- `@dependabot recreate` will recreate this PR, overwriting any edits
that have been made to it
- `@dependabot merge` will merge this PR after your CI passes on it
- `@dependabot squash and merge` will squash and merge this PR after
your CI passes on it
- `@dependabot cancel merge` will cancel a previously requested merge
and block automerging
- `@dependabot reopen` will reopen this PR if it is closed
- `@dependabot close` will close this PR and stop Dependabot recreating
it. You can achieve the same result by closing it manually
- `@dependabot show <dependency name> ignore conditions` will show all
of the ignore conditions of the specified dependency
- `@dependabot ignore this major version` will close this PR and stop
Dependabot creating any more for this major version (unless you reopen
the PR or upgrade to it yourself)
- `@dependabot ignore this minor version` will close this PR and stop
Dependabot creating any more for this minor version (unless you reopen
the PR or upgrade to it yourself)
- `@dependabot ignore this dependency` will close this PR and stop
Dependabot creating any more for this dependency (unless you reopen the
PR or upgrade to it yourself)
You can disable automated security fix PRs for this repo from the
[Security Alerts
page](https://github.com/facebook/react/network/alerts).

</details>

Signed-off-by: dependabot[bot] <support@github.com>
Co-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>",dependabot[bot],2023-10-26T13:48:28Z
54ea4469716ec060fba475bb38e7b6d509586e1b,"Bump lodash from 4.17.4 to 4.17.21 in /fixtures/packaging/systemjs-builder/prod (#27593)

Bumps [lodash](https://github.com/lodash/lodash) from 4.17.4 to 4.17.21.
<details>
<summary>Commits</summary>
<ul>
<li><a
href=""https://github.com/lodash/lodash/commit/f299b52f39486275a9e6483b60a410e06520c538""><code>f299b52</code></a>
Bump to v4.17.21</li>
<li><a
href=""https://github.com/lodash/lodash/commit/c4847ebe7d14540bb28a8b932a9ce1b9ecbfee1a""><code>c4847eb</code></a>
Improve performance of <code>toNumber</code>, <code>trim</code> and
<code>trimEnd</code> on large input strings</li>
<li><a
href=""https://github.com/lodash/lodash/commit/3469357cff396a26c363f8c1b5a91dde28ba4b1c""><code>3469357</code></a>
Prevent command injection through <code>_.template</code>'s
<code>variable</code> option</li>
<li><a
href=""https://github.com/lodash/lodash/commit/ded9bc66583ed0b4e3b7dc906206d40757b4a90a""><code>ded9bc6</code></a>
Bump to v4.17.20.</li>
<li><a
href=""https://github.com/lodash/lodash/commit/63150ef7645ac07961b63a86490f419f356429aa""><code>63150ef</code></a>
Documentation fixes.</li>
<li><a
href=""https://github.com/lodash/lodash/commit/00f0f62a979d2f5fa0287c06eae70cf9a62d8794""><code>00f0f62</code></a>
test.js: Remove trailing comma.</li>
<li><a
href=""https://github.com/lodash/lodash/commit/846e434c7a5b5692c55ebf5715ed677b70a32389""><code>846e434</code></a>
Temporarily use a custom fork of <code>lodash-cli</code>.</li>
<li><a
href=""https://github.com/lodash/lodash/commit/5d046f39cbd27f573914768e3b36eeefcc4f1229""><code>5d046f3</code></a>
Re-enable Travis tests on <code>4.17</code> branch.</li>
<li><a
href=""https://github.com/lodash/lodash/commit/aa816b36d402a1ad9385142ce7188f17dae514fd""><code>aa816b3</code></a>
Remove <code>/npm-package</code>.</li>
<li><a
href=""https://github.com/lodash/lodash/commit/d7fbc52ee0466a6d248f047b5d5c3e6d1e099056""><code>d7fbc52</code></a>
Bump to v4.17.19</li>
<li>Additional commits viewable in <a
href=""https://github.com/lodash/lodash/compare/4.17.4...4.17.21"">compare
view</a></li>
</ul>
</details>
<details>
<summary>Maintainer changes</summary>
<p>This version was pushed to npm by <a
href=""https://www.npmjs.com/~bnjmnt4n"">bnjmnt4n</a>, a new releaser for
lodash since your current version.</p>
</details>
<br />


[![Dependabot compatibility
score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=lodash&package-manager=npm_and_yarn&previous-version=4.17.4&new-version=4.17.21)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)

Dependabot will resolve any conflicts with this PR as long as you don't
alter it yourself. You can also trigger a rebase manually by commenting
`@dependabot rebase`.

[//]: # (dependabot-automerge-start)
[//]: # (dependabot-automerge-end)

---

<details>
<summary>Dependabot commands and options</summary>
<br />

You can trigger Dependabot actions by commenting on this PR:
- `@dependabot rebase` will rebase this PR
- `@dependabot recreate` will recreate this PR, overwriting any edits
that have been made to it
- `@dependabot merge` will merge this PR after your CI passes on it
- `@dependabot squash and merge` will squash and merge this PR after
your CI passes on it
- `@dependabot cancel merge` will cancel a previously requested merge
and block automerging
- `@dependabot reopen` will reopen this PR if it is closed
- `@dependabot close` will close this PR and stop Dependabot recreating
it. You can achieve the same result by closing it manually
- `@dependabot show <dependency name> ignore conditions` will show all
of the ignore conditions of the specified dependency
- `@dependabot ignore this major version` will close this PR and stop
Dependabot creating any more for this major version (unless you reopen
the PR or upgrade to it yourself)
- `@dependabot ignore this minor version` will close this PR and stop
Dependabot creating any more for this minor version (unless you reopen
the PR or upgrade to it yourself)
- `@dependabot ignore this dependency` will close this PR and stop
Dependabot creating any more for this dependency (unless you reopen the
PR or upgrade to it yourself)
You can disable automated security fix PRs for this repo from the
[Security Alerts
page](https://github.com/facebook/react/network/alerts).

</details>

Signed-off-by: dependabot[bot] <support@github.com>
Co-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>",dependabot[bot],2023-10-26T13:48:05Z
97b1e01824df999bfc7c0c78d6a35dae56909ea2,"Bump lodash from 4.17.15 to 4.17.21 in /fixtures/art (#27588)

Bumps [lodash](https://github.com/lodash/lodash) from 4.17.15 to
4.17.21.
<details>
<summary>Commits</summary>
<ul>
<li><a
href=""https://github.com/lodash/lodash/commit/f299b52f39486275a9e6483b60a410e06520c538""><code>f299b52</code></a>
Bump to v4.17.21</li>
<li><a
href=""https://github.com/lodash/lodash/commit/c4847ebe7d14540bb28a8b932a9ce1b9ecbfee1a""><code>c4847eb</code></a>
Improve performance of <code>toNumber</code>, <code>trim</code> and
<code>trimEnd</code> on large input strings</li>
<li><a
href=""https://github.com/lodash/lodash/commit/3469357cff396a26c363f8c1b5a91dde28ba4b1c""><code>3469357</code></a>
Prevent command injection through <code>_.template</code>'s
<code>variable</code> option</li>
<li><a
href=""https://github.com/lodash/lodash/commit/ded9bc66583ed0b4e3b7dc906206d40757b4a90a""><code>ded9bc6</code></a>
Bump to v4.17.20.</li>
<li><a
href=""https://github.com/lodash/lodash/commit/63150ef7645ac07961b63a86490f419f356429aa""><code>63150ef</code></a>
Documentation fixes.</li>
<li><a
href=""https://github.com/lodash/lodash/commit/00f0f62a979d2f5fa0287c06eae70cf9a62d8794""><code>00f0f62</code></a>
test.js: Remove trailing comma.</li>
<li><a
href=""https://github.com/lodash/lodash/commit/846e434c7a5b5692c55ebf5715ed677b70a32389""><code>846e434</code></a>
Temporarily use a custom fork of <code>lodash-cli</code>.</li>
<li><a
href=""https://github.com/lodash/lodash/commit/5d046f39cbd27f573914768e3b36eeefcc4f1229""><code>5d046f3</code></a>
Re-enable Travis tests on <code>4.17</code> branch.</li>
<li><a
href=""https://github.com/lodash/lodash/commit/aa816b36d402a1ad9385142ce7188f17dae514fd""><code>aa816b3</code></a>
Remove <code>/npm-package</code>.</li>
<li><a
href=""https://github.com/lodash/lodash/commit/d7fbc52ee0466a6d248f047b5d5c3e6d1e099056""><code>d7fbc52</code></a>
Bump to v4.17.19</li>
<li>Additional commits viewable in <a
href=""https://github.com/lodash/lodash/compare/4.17.15...4.17.21"">compare
view</a></li>
</ul>
</details>
<details>
<summary>Maintainer changes</summary>
<p>This version was pushed to npm by <a
href=""https://www.npmjs.com/~bnjmnt4n"">bnjmnt4n</a>, a new releaser for
lodash since your current version.</p>
</details>
<br />


[![Dependabot compatibility
score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=lodash&package-manager=npm_and_yarn&previous-version=4.17.15&new-version=4.17.21)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)

Dependabot will resolve any conflicts with this PR as long as you don't
alter it yourself. You can also trigger a rebase manually by commenting
`@dependabot rebase`.

[//]: # (dependabot-automerge-start)
[//]: # (dependabot-automerge-end)

---

<details>
<summary>Dependabot commands and options</summary>
<br />

You can trigger Dependabot actions by commenting on this PR:
- `@dependabot rebase` will rebase this PR
- `@dependabot recreate` will recreate this PR, overwriting any edits
that have been made to it
- `@dependabot merge` will merge this PR after your CI passes on it
- `@dependabot squash and merge` will squash and merge this PR after
your CI passes on it
- `@dependabot cancel merge` will cancel a previously requested merge
and block automerging
- `@dependabot reopen` will reopen this PR if it is closed
- `@dependabot close` will close this PR and stop Dependabot recreating
it. You can achieve the same result by closing it manually
- `@dependabot show <dependency name> ignore conditions` will show all
of the ignore conditions of the specified dependency
- `@dependabot ignore this major version` will close this PR and stop
Dependabot creating any more for this major version (unless you reopen
the PR or upgrade to it yourself)
- `@dependabot ignore this minor version` will close this PR and stop
Dependabot creating any more for this minor version (unless you reopen
the PR or upgrade to it yourself)
- `@dependabot ignore this dependency` will close this PR and stop
Dependabot creating any more for this dependency (unless you reopen the
PR or upgrade to it yourself)
You can disable automated security fix PRs for this repo from the
[Security Alerts
page](https://github.com/facebook/react/network/alerts).

</details>

Signed-off-by: dependabot[bot] <support@github.com>
Co-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>",dependabot[bot],2023-10-26T13:47:51Z
de49d83f30508bc6394e543cd36f58a968ffc3d6,"Bump lodash from 4.17.4 to 4.17.21 in /fixtures/expiration (#27591)

Bumps [lodash](https://github.com/lodash/lodash) from 4.17.4 to 4.17.21.
<details>
<summary>Commits</summary>
<ul>
<li><a
href=""https://github.com/lodash/lodash/commit/f299b52f39486275a9e6483b60a410e06520c538""><code>f299b52</code></a>
Bump to v4.17.21</li>
<li><a
href=""https://github.com/lodash/lodash/commit/c4847ebe7d14540bb28a8b932a9ce1b9ecbfee1a""><code>c4847eb</code></a>
Improve performance of <code>toNumber</code>, <code>trim</code> and
<code>trimEnd</code> on large input strings</li>
<li><a
href=""https://github.com/lodash/lodash/commit/3469357cff396a26c363f8c1b5a91dde28ba4b1c""><code>3469357</code></a>
Prevent command injection through <code>_.template</code>'s
<code>variable</code> option</li>
<li><a
href=""https://github.com/lodash/lodash/commit/ded9bc66583ed0b4e3b7dc906206d40757b4a90a""><code>ded9bc6</code></a>
Bump to v4.17.20.</li>
<li><a
href=""https://github.com/lodash/lodash/commit/63150ef7645ac07961b63a86490f419f356429aa""><code>63150ef</code></a>
Documentation fixes.</li>
<li><a
href=""https://github.com/lodash/lodash/commit/00f0f62a979d2f5fa0287c06eae70cf9a62d8794""><code>00f0f62</code></a>
test.js: Remove trailing comma.</li>
<li><a
href=""https://github.com/lodash/lodash/commit/846e434c7a5b5692c55ebf5715ed677b70a32389""><code>846e434</code></a>
Temporarily use a custom fork of <code>lodash-cli</code>.</li>
<li><a
href=""https://github.com/lodash/lodash/commit/5d046f39cbd27f573914768e3b36eeefcc4f1229""><code>5d046f3</code></a>
Re-enable Travis tests on <code>4.17</code> branch.</li>
<li><a
href=""https://github.com/lodash/lodash/commit/aa816b36d402a1ad9385142ce7188f17dae514fd""><code>aa816b3</code></a>
Remove <code>/npm-package</code>.</li>
<li><a
href=""https://github.com/lodash/lodash/commit/d7fbc52ee0466a6d248f047b5d5c3e6d1e099056""><code>d7fbc52</code></a>
Bump to v4.17.19</li>
<li>Additional commits viewable in <a
href=""https://github.com/lodash/lodash/compare/4.17.4...4.17.21"">compare
view</a></li>
</ul>
</details>
<details>
<summary>Maintainer changes</summary>
<p>This version was pushed to npm by <a
href=""https://www.npmjs.com/~bnjmnt4n"">bnjmnt4n</a>, a new releaser for
lodash since your current version.</p>
</details>
<br />


[![Dependabot compatibility
score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=lodash&package-manager=npm_and_yarn&previous-version=4.17.4&new-version=4.17.21)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)

Dependabot will resolve any conflicts with this PR as long as you don't
alter it yourself. You can also trigger a rebase manually by commenting
`@dependabot rebase`.

[//]: # (dependabot-automerge-start)
[//]: # (dependabot-automerge-end)

---

<details>
<summary>Dependabot commands and options</summary>
<br />

You can trigger Dependabot actions by commenting on this PR:
- `@dependabot rebase` will rebase this PR
- `@dependabot recreate` will recreate this PR, overwriting any edits
that have been made to it
- `@dependabot merge` will merge this PR after your CI passes on it
- `@dependabot squash and merge` will squash and merge this PR after
your CI passes on it
- `@dependabot cancel merge` will cancel a previously requested merge
and block automerging
- `@dependabot reopen` will reopen this PR if it is closed
- `@dependabot close` will close this PR and stop Dependabot recreating
it. You can achieve the same result by closing it manually
- `@dependabot show <dependency name> ignore conditions` will show all
of the ignore conditions of the specified dependency
- `@dependabot ignore this major version` will close this PR and stop
Dependabot creating any more for this major version (unless you reopen
the PR or upgrade to it yourself)
- `@dependabot ignore this minor version` will close this PR and stop
Dependabot creating any more for this minor version (unless you reopen
the PR or upgrade to it yourself)
- `@dependabot ignore this dependency` will close this PR and stop
Dependabot creating any more for this dependency (unless you reopen the
PR or upgrade to it yourself)
You can disable automated security fix PRs for this repo from the
[Security Alerts
page](https://github.com/facebook/react/network/alerts).

</details>

Signed-off-by: dependabot[bot] <support@github.com>
Co-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>",dependabot[bot],2023-10-26T13:43:55Z
a82ff4c98506a71402bc8ff7c0f815a8dc3b58be,"Bump lodash from 4.17.15 to 4.17.21 (#27587)

Bumps [lodash](https://github.com/lodash/lodash) from 4.17.15 to
4.17.21.
<details>
<summary>Commits</summary>
<ul>
<li><a
href=""https://github.com/lodash/lodash/commit/f299b52f39486275a9e6483b60a410e06520c538""><code>f299b52</code></a>
Bump to v4.17.21</li>
<li><a
href=""https://github.com/lodash/lodash/commit/c4847ebe7d14540bb28a8b932a9ce1b9ecbfee1a""><code>c4847eb</code></a>
Improve performance of <code>toNumber</code>, <code>trim</code> and
<code>trimEnd</code> on large input strings</li>
<li><a
href=""https://github.com/lodash/lodash/commit/3469357cff396a26c363f8c1b5a91dde28ba4b1c""><code>3469357</code></a>
Prevent command injection through <code>_.template</code>'s
<code>variable</code> option</li>
<li><a
href=""https://github.com/lodash/lodash/commit/ded9bc66583ed0b4e3b7dc906206d40757b4a90a""><code>ded9bc6</code></a>
Bump to v4.17.20.</li>
<li><a
href=""https://github.com/lodash/lodash/commit/63150ef7645ac07961b63a86490f419f356429aa""><code>63150ef</code></a>
Documentation fixes.</li>
<li><a
href=""https://github.com/lodash/lodash/commit/00f0f62a979d2f5fa0287c06eae70cf9a62d8794""><code>00f0f62</code></a>
test.js: Remove trailing comma.</li>
<li><a
href=""https://github.com/lodash/lodash/commit/846e434c7a5b5692c55ebf5715ed677b70a32389""><code>846e434</code></a>
Temporarily use a custom fork of <code>lodash-cli</code>.</li>
<li><a
href=""https://github.com/lodash/lodash/commit/5d046f39cbd27f573914768e3b36eeefcc4f1229""><code>5d046f3</code></a>
Re-enable Travis tests on <code>4.17</code> branch.</li>
<li><a
href=""https://github.com/lodash/lodash/commit/aa816b36d402a1ad9385142ce7188f17dae514fd""><code>aa816b3</code></a>
Remove <code>/npm-package</code>.</li>
<li><a
href=""https://github.com/lodash/lodash/commit/d7fbc52ee0466a6d248f047b5d5c3e6d1e099056""><code>d7fbc52</code></a>
Bump to v4.17.19</li>
<li>Additional commits viewable in <a
href=""https://github.com/lodash/lodash/compare/4.17.15...4.17.21"">compare
view</a></li>
</ul>
</details>
<details>
<summary>Maintainer changes</summary>
<p>This version was pushed to npm by <a
href=""https://www.npmjs.com/~bnjmnt4n"">bnjmnt4n</a>, a new releaser for
lodash since your current version.</p>
</details>
<br />


[![Dependabot compatibility
score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=lodash&package-manager=npm_and_yarn&previous-version=4.17.15&new-version=4.17.21)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)

Dependabot will resolve any conflicts with this PR as long as you don't
alter it yourself. You can also trigger a rebase manually by commenting
`@dependabot rebase`.

[//]: # (dependabot-automerge-start)
[//]: # (dependabot-automerge-end)

---

<details>
<summary>Dependabot commands and options</summary>
<br />

You can trigger Dependabot actions by commenting on this PR:
- `@dependabot rebase` will rebase this PR
- `@dependabot recreate` will recreate this PR, overwriting any edits
that have been made to it
- `@dependabot merge` will merge this PR after your CI passes on it
- `@dependabot squash and merge` will squash and merge this PR after
your CI passes on it
- `@dependabot cancel merge` will cancel a previously requested merge
and block automerging
- `@dependabot reopen` will reopen this PR if it is closed
- `@dependabot close` will close this PR and stop Dependabot recreating
it. You can achieve the same result by closing it manually
- `@dependabot show <dependency name> ignore conditions` will show all
of the ignore conditions of the specified dependency
- `@dependabot ignore this major version` will close this PR and stop
Dependabot creating any more for this major version (unless you reopen
the PR or upgrade to it yourself)
- `@dependabot ignore this minor version` will close this PR and stop
Dependabot creating any more for this minor version (unless you reopen
the PR or upgrade to it yourself)
- `@dependabot ignore this dependency` will close this PR and stop
Dependabot creating any more for this dependency (unless you reopen the
PR or upgrade to it yourself)
You can disable automated security fix PRs for this repo from the
[Security Alerts
page](https://github.com/facebook/react/network/alerts).

</details>

Signed-off-by: dependabot[bot] <support@github.com>
Co-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>",dependabot[bot],2023-10-26T13:43:31Z
8c8ee9ee618eace9199b7c80f4cd2d6f20ecfb73,"[Fizz] Pass task.childIndex in retryReplayTask (#27594)

This was missed that we track the child index on the task. The
equivalent in retryRenderTask already has this.

The effect is that a lazy node that suspends gets its child index reset
to -1 even though it should resume in the index it left off.",Sebastian Markbåge,2023-10-26T06:20:24Z
97047a810cb19e3041a3ec163f4fde85f495bdc1,"Revert ""Build: use content hash for facebook-react-native build"" (#27584)

Reverts facebook/react#27577.

We also sync React Native OSS bundles which means this didn't work as
hoped unless we abandon the commit hash in OSS which seems useful.",Jan Kassens,2023-10-25T19:07:17Z
a9985529f1aa55477f0feafe2398d36707cf6108,"[Fizz] Do not reinsert stylesheets after initial insert (#27586)

The loading state tracking for suspensey CSS is too complicated. Prior
to this change it had a state it could enter into where a stylesheet was
already in the DOM but the loading state did not know it was inserted
causing a later transition to try to insert it again.

This fix is to add proper tracking of insertions on the codepaths that
were missing it. It also modifies the logic of when to suspend based on
whether the stylesheet has already been inserted or not.

This is not 100% correct semantics however because a prior commit could
have inserted a stylesheet and a later transition should ideally be able
to wait on that load before committing. I haven't attempted to fix this
yet however because the loading state tracking is too complicated as it
is and requires a more thorough refactor. Additionally it's not
particularly valuable to delay a transition on a loading stylesheet when
a previous commit also relied on that stylesheet but didn't wait for it
b/c it was sync. I will follow up with an improvement PR later

fixes: https://github.com/facebook/react/issues/27585",Josh Story,2023-10-25T18:51:01Z
51ffd3564f97b58737df395d30628a27fa71a39d,"Build: use content hash for facebook-react-native build (#27577)

Similar to #26734, this switches the RN builds for Meta to a content
hash instead of git commit number to make the builds reproducible and
avoid creating sync commits if the bundled content didn't change.",Jan Kassens,2023-10-25T13:50:15Z
960ed6ea4341b4189a4f6c4edfa6bfe4c712e097,"[Flight] Aborting with a postpone instance as a reason should postpone remaining holes (#27576)

This lets you abort with postponing semantics.",Sebastian Markbåge,2023-10-24T20:41:28Z
3d3ad1b9ef6b5b7bd3e4859b5461deb138389e41,"[LeaveSSA] Process all phis in a block 

I don't know if it's possible to write a test for this as I can't seem to get 
the codegen to change. 

For the following testcase: ``` function useFoo(setOne) {   let x;   let y;   if 
(setOne) {     x = 1;     y = 3;   } else {     x = 2;     y = 5;   } 

return { x, y }; } ``` 

The LeaveSSA changes from: ``` .... bb1 (block):   predecessor blocks: bb2 bb3   
x$36:TPrimitive: phi(bb2: x$19, bb3: x$19)   y$21[8:14]:TPrimitive: phi(bb2: 
y$21, bb3: y$21) 

... ``` 

to ``` ... bb1 (block):   predecessor blocks: bb2 bb3   x$36:TPrimitive: 
phi(bb2: x$19, bb3: x$19)   y$38:TPrimitive: phi(bb2: y$21, bb3: y$21) ... ``` 

Notice how `y`'s reassignment got skipped previously.",Sathya Gunasekaran,2023-10-24T15:09:08Z
3571dfa0568454932ecf5fd36958fc77c915ccd7,[be] remove dead code in InferReactiveScopeVariables,Joe Savona,2023-11-02T00:13:06Z
3e157bbc27d5c8a4121cb99c3dd7d1af90becf03,"Propagate reactivity to other operands accounting for mutable ranges 

Previously if any operand was reactive, we transferred that reactivity to other 
operands that had a mutable effect (capture, conditionally mutate, mutate, or 
store). But a value can be captured without ever being modified again. This PR 
updates the logic to only transfer reactivity among operands that are actually 
mutable at the given instruction, based on the mutable range. This is strictly 
more precise.",Joe Savona,2023-11-02T00:13:05Z
b34172c11e29cae21950e0f9851e9893c9b8f3d8,"Reactivity inference is single-pass when no loops 

We can complete in a single-pass if there are no loops, as a performance 
optimization.",Joe Savona,2023-11-02T00:13:04Z
3ab47ac6bd2818ab04d069803cff5271012ee146,"Replace InferReactiveIdentifiers w new inference 

This PR adds one remaining feature to InferReactivePlaces: tracking indirections 
like LoadLocal, PropertyLoad, and similar. Consider something like: 

``` 

// INPUT 

x.push(reactiveValue); 

// HIR 

t0 = LoadLocal 'x' 

t1 = PropertyLoad t0, 'push' 

t2 = LoadLocal 'reactiveValue' // reactive 

t3 = CallExpression mutate t0 . read t1 ( read t2 ) 

``` 

Because a reactive value (`t2`) flows into `t0`, we want to record t0 as 
reactive as well. But that's just the temporary for `LoadLocal 'x'` - what's 
really happening is that from this point, `x` is reactive. 
InferReactiveIdentifiers tracked this, and now that logic is ported into 
InferReactivePlaces as well. That lets us remove all the actual inference from 
InferReactiveIdentifiers.",Joe Savona,2023-11-02T00:13:04Z
8610533ed1a38539412114a99a0390747e828235,"Infer reactive control dependencies 

Updates `InferReactivePlaces` to infer control dependencies. We build on the 
formal definition of control dependencies, which is that statement S2 is 
control-dependent on statement S1 if S1 is in the post-dominance-frontier of S2. 
Intuitively, if S1 decides whether S2 is reached or not, then S1 is a control 
dependency of S2. The post dominance frontier of a given statement S is the set 
of statements which may or may not reach S, and captures the intuitive notion. 

We take advantage of phis: phis are the point where a variable may have multiple 
values depending on the path we took. If a phi is not already known to be 
reactive from data dependencies we check for control dependencies. Specifically 
we look at each phi operand. We check if the block that the operand came from 
has any reactive control dependencies, and if so we mark the phi itself as 
reactive. 

The post-dominance-frontier (PDF) algorithm requires walking the post-dominator 
tree a bunch, so we cache the PDF of blocks so that we don't have to recalculate 
on subsequent iterations. 

In addition, `InferReactiveIdentifiers` now uses the _union_ of its own 
inference plus the new `InferReactivePlaces` output when deciding what 
identifiers are reactive. This ensures that control dependencies are recorded 
correctly, fixing the previous test cases. The next diff adds the remaining 
features to InferReactivePlaces so that it can fully replace 
InferReactiveIdentifiers.",Joe Savona,2023-11-02T00:13:03Z
d5c3fb87e6861dfe1bfdcb9353f71275172a3816,"HIR-based reactive identifier analysis 

See context from #2187 for background about control dependencies. 

Our current `PruneNonReactiveIdentifiers` pass runs on ReactiveFunction, after 
scope construction, and removes scope dependencies that aren't reactive. It 
works by first building up a set of reactive identifiers in 
`InferReactiveIdentifiers`, then walking the ReactiveFunction and pruning any 
scope dependencies that aren't in that set. 

The challenge is control variables, as demonstrated by the test cases in #2184. 
`InferReactiveIdentifiers` runs against ReactiveFunction, and when we initially 
wrote it we didn't consider control variables. To handle control variables we 
really need to use precise control- & data-flow analysis, which is much easier 
with HIR. 

This PR adds the start of `InferReactivePlaces`, which annotates each `Place` 
with whether it is reactive or not. This allows the annotation to survive 
LeaveSSA, which swaps out the identifiers of places but leaves other properties 
as-is. This version does _not_ yet handle control variables, but it's already 
more precise than our existing inference. In our current inference, if `x` is 
ever assigned a reactive value, then all `x`s are marked reactive. In our new 
inference, each instance of `x` (each Place) gets a separate flag based on 
whether x can actually be reactive at that point in the program. 

There are two main next steps (in follow-up PRs): 

* Update the mechanism by which we prune non-reactive dependencies from scopes. 

* Handle control variables. I think we may be able to use dominator trees to 
figure out the set of basic blocks whose reachability is gated by the control 
variables. This should clearly work for if/else and switch, as for loops i'm not 
sure but intuitively it seems right.",Joe Savona,2023-11-02T00:13:02Z
748859a00e5658c953c6732051ac374ba2bf39da,"Add `reactive` flag to Place 

This is part of a stack for inferring variables which are reactive via *control 
dependencies* as opposed to a data dependency. In compiler engineering, a 
statement S2 is control-dependent on statement S1 if S1 is in the post-dominance 
frontier of S2. Stated more intuitively: if S1 decides whether or not S2 is 
reached, then S1 is a control dependency of S2. 

As a start, we add `Place.reactive: boolean` so that individual places can track 
whether they are reactive or not. This lets us do fine-grained reactivity 
inference on the control-flow graph, even taking into account different SSA 
instances of a variable, so that we can say that a particular SSA version of `x` 
is reactive, while other ""versions"" of x (due to reassignment) are not.",Joe Savona,2023-11-02T00:13:01Z
5cdfa7cdc4253ed011facf0c64ff8ce007339c09,[feedback] Don't skip copying dist,Lauren Tan,2023-11-01T17:45:50Z
c289d098d787db3a27ce0e70846a58e57fd58cbf,[babel] Rename useMemoCacheSource to enableUseMemoCachePolyfill,Lauren Tan,2023-11-01T17:28:18Z
139336b87cf4f98ef287adcde6796455914332c4,[feedback] Specify react dep for react-forget-runtime,Lauren Tan,2023-11-01T17:12:09Z
7042983f699bbcb5965c1b1dd9c8ca3b770f10e5,[feedback] Add changelog to build,Lauren Tan,2023-10-31T22:31:09Z
8860faa65ce7a459851c9ee89acf027f5e5b6067,[feedback] Add script to copy forget-feedback to new repo,Lauren Tan,2023-10-31T21:14:19Z
776f2148b441bafb72f19c83b4834dcf33a2a1d0,[feedback] More efficient userspace impl for uMC,Lauren Tan,2023-10-31T17:17:40Z
a0de8e6d2dc837601dfdee96651481428fe4c998,"[babel] Disable ts declaration maps 

This was unnecessary, switching it back to disabled",Lauren Tan,2023-10-31T17:06:19Z
e4acd448f604dc53152204145bf1a1b0be746398,[feedback] Add script to bundle for oss,Lauren Tan,2023-10-31T16:42:39Z
0a7bb7ac7a92238ba354638ea4304f96c3525caf,"[babel] Clean up import logic a bit 

Addressing feedback from #2218",Lauren Tan,2023-10-31T16:16:34Z
847a6f0a09a01b80087eee2260a5d5220ae0dde7,[feedback] Make babel/types a dep not a peerDep,Lauren Tan,2023-10-31T16:16:33Z
5ebc9fe388db123077c215b726aa1f80c98806bb,[feedback] Add github action to run e2e test,Lauren Tan,2023-10-31T16:16:33Z
3246dc641fa64636fa9a87151f464a8e51bda3d0,"[feedback] Add testapp with e2e test 

Adds a toy next.js app which doesn't do anything interesting. It has a single 
e2e test which can be run via `npm run test:e2e`, which checks if a `$` variable 
was injected by the compiler, as a sanity check whenever we commit a new version 
of the compiler to the external repo.",Lauren Tan,2023-10-31T16:16:32Z
ac170f4f0d8790ee607dbf8bd33ae76778a93ac7,"[babel] Allow userspace useMemoCache 

Not every consumer of Forget will be able to run an experimental version of 
React. In the meantime before useMemoCache is stable, provide a way for OSS to 
pass in a userspace impl.",Lauren Tan,2023-10-31T16:16:31Z
c7c57ec5315b26751a2353316f8d7c0d76058eda,"[playground] QoL use webpack to bundle monaco-editor's loader 

--- 

This lets us load playground locally, entirely offline (e.g. on an airplane, 
when a cdn is down, at ReactAdvanced, etc) 

Before: 

See external script link 

<img width=""691"" alt=""image"" 
src=""https://github.com/facebook/react-forget/assets/34200447/85500e86-c1a5-4dff-bdcd-58db0d6fd453""> 

Now: 

No external script 

<img width=""476"" alt=""image"" 
src=""https://github.com/facebook/react-forget/assets/34200447/fdcbea09-0b5f-42e3-9310-35d8d1d726b7"">",Mofei Zhang,2023-10-30T18:53:00Z
16bef168c12e5b3b54213136813c4166a307a056,[playground] Move Editor/index for next PR (dynamic import),Mofei Zhang,2023-10-30T18:53:00Z
0841caab8e2b0f7cffc03c70ee4ff79ab0457245,"[rollup] Include typescript definitions in build 

Emit our TypeScript definitions as well in the build so things like options have 
typechecking",Lauren Tan,2023-10-30T17:58:03Z
52afd8a566e37b943e379a6fe8ce8e2c9f566a9f,"[ext-preview] Inline @babel/generator 

Turns out we were only using this in PrintHIR and in the logger, so it should be 
safe to inline and makes installing the plugin for external collaborators a 
little easier. 

I'm assuming inlining this is ok because we only need to defer to the host's 
Babel version(s) when it affects parsing or the final codegen output, hence why 
we continue to no-inline @babel/types – as it is responsible for creating AST 
nodes during codegen",Lauren Tan,2023-10-30T17:58:02Z
e2836eec5be07acf5a0cf7af3a230f2526d26031,[bugfix] do not hoist computed memberpaths in lambdas,Mofei Zhang,2023-10-30T16:56:50Z
3e812df89cee2686bcb1086038fcb2e609802dd4,"[repro] Test case for more variable naming collision bugs 

--- 

bug repro from @JacksonGL 

(we currently bailout for references to `useMemoCache`, but not other variables 
that may collide with codegenned ones). 

``` 

% yarn sprout --filter 

yarn run v1.22.19 

$ node ../sprout/dist/main.js --filter 

FAIL  todo 

Failures: 

FAIL: todo 

Difference in forget and non-forget results. 

Expected result: { 

""kind"": ""ok"", 

""value"": ""0"", 

""logs"": [ 

""'module_$'"", 

""'module_t0'"", 

""'module_c_0'"" 

] 

} 

Found: { 

""kind"": ""ok"", 

""value"": ""0"", 

""logs"": [ 

""[ 0, 0 ]"", 

""0"", 

""true"" 

] 

} 

```",Mofei Zhang,2023-10-30T16:01:24Z
f648e4ce85dd3b1a8ecc4120a0629a4b75859480,[test/react] Turn on react tests in CI,Sathya Gunasekaran,2023-10-25T11:39:20Z
51baf5807e6d99d27dd1b233225402330cc0375c,"[test/react] Fix github workflow 

The flattening broke the shell script because the directory structure changed. 

Instead of depending on a flaky shell script, this PR encodes the commands as 
part of the github workflow.",Sathya Gunasekaran,2023-10-25T11:36:55Z
419310cd15673d1c3d4112cbedf85ea08c1c1e61,"Bundle babel-plugin-react-forget with rollup 

Attempt to bundle the plugin with rollup instead of just tsc. I'm intentionally 
not inlining babel related modules, as we should ideally rely on the host 
environment's version instead",Lauren Tan,2023-10-27T18:07:56Z
473237ba1f573f1a287c974fa8d14e17f0fc5d65,"Remove prettier from babel-plugin as dependency 

We can now fully remove prettier from babel-plugin-react-forget. I moved it to 
devDependencies instead, to make the rollup build simpler and so we can continue 
to prettify our internal source code.",Lauren Tan,2023-10-27T18:07:56Z
c72673bd8f1a6a47f8b403f5600959c6d92b1582,"[fixtures] Run prettier after babel-plugin 

This moves prettier formatting into fixture-test-utils instead, so we can remove 
the dependency on prettier in the babel plugin. I want to do this because I 
don't want to include prettier in the rolledup artifact when we build the babel 
plugin.",Lauren Tan,2023-10-27T18:07:55Z
b8e47d988eb3ba547c102c0b12c351250ed955e0,"Bugfix: useFormState queues actions in wrong order (#27570)

I neglected to update the ""last"" pointer of the action queue. Since the
queue is circular, rather than dropping the update, the effect was to
add the update to the front of the queue instead of the back. I didn't
notice earlier because in my demos/tests, the actions would either
resolve really quickly or the actions weren't order dependent (like
incrementing a counter).",Andrew Clark,2023-10-23T21:52:15Z
05fbd1aab036ecbd14469d6376024439bc931f68,"[Fizz] Postponing in the shell (#27569)

When we postpone a prerender in the shell, we should just leave an empty
prelude and resume from the root. While preserving any options passed
in.

Since we haven't flushed anything we can't assume we've already emitted
html/body tags or any resources tracked in the resumable state. This
introduces a resetResumableState function to reset anything we didn't
flush.

This is a bit hacky. Ideally, we probably shouldn't have tracked it as
already happened until it flushed or something like that.

Basically, it's like restarting the prerender with the same options and
then immediately aborting. When we add the preload headers, we'd track
those as preload() being emitted after the reset and so they get readded
to the resumable state in that case.",Sebastian Markbåge,2023-10-23T19:53:59Z
779d59374e8e852ce00728d895156a7574e1b456,"useDeferredValue has higher priority than partial hydration (#27550)

By default, partial hydration is given the lowest possible priority,
because until a tree is updated, the server-rendered HTML is assumed to
match the final resolved HTML.

However, this isn't completely true because a component may choose to
""upgrade"" itself upon hydration. The simplest example is a component
that calls setState in a useEffect to switch to a richer implementation
of the UI. Another example is a component that doesn't have a server-
rendered implementation, so it intentionally suspends to force a client-
only render.

useDeferredValue is an example, too: the server only renders the first
pass (the initialValue) argument, and relies on the client to upgrade to
the final value.

What we should really do in these cases is emit some information into
the Fizz stream so that Fiber knows to prioritize the hydration of
certain trees. We plan to add a mechanism for this in the future.

In the meantime, though, we can at least ensure that the priority of the
upgrade task is correct once it's ""discovered"" during hydration. In this
case, the priority of the task spawned by useDeferredValue should have
Transition priority, not Offscreen priority.",Andrew Clark,2023-10-23T17:48:48Z
ad1fe50546f112e5efae55ab2957007dee29d86c,"[playground] Turn on Forget 

Runs Forget on the playground, so we can dogfood Forget and experiment with 
improvements to UX. 

Opts out of compiling the layout page because thats run on the server which 
doesn't seem to have access to useMemoCache.",Sathya Gunasekaran,2023-10-23T14:41:01Z
1138ef00e3c92acab88c6aa747f981c74e751630,"[playground] Force nextjs to use experimental react 

These experimental features aren't used by the playground, but turning it on 
forces nextjs to use experimental react which has the useMemoCache hook.",Sathya Gunasekaran,2023-10-23T14:41:00Z
48d465eb22e508b702f5346526786f09445d4436,[playground] Upgrade to latest nextjs,Sathya Gunasekaran,2023-10-23T14:41:00Z
23a226227fd7d47c0b1ac6b82938e9eed68b553e,"Remove use of prettier in babel-plugin-react-forget 

This kept throwing warnings in our playground build because prettier uses node 
APIs and is not meant to be bundled and run on the browser. 

There's a separate standalone version that runs on the browser. A follow on PR 
will make the playground use that but this PR is a first step towards using a 
standalone prettier.",Sathya Gunasekaran,2023-10-25T14:40:31Z
6db7f4209e6f32ebde298a0b7451710dd6aa3e19,"Bugfix: useDeferredValue loop during popstate transition (#27559)

During a popstate event, we attempt to render updates synchronously even
if they are transitions, to preserve scroll position if possible. We do
this by entangling the transition lane with the Sync lane.

However, if rendering the transition spawns additional transition
updates (e.g. a setState inside useEffect), there's no reason to render
those synchronously, too. We should use the normal transition behavior.

This fixes an issue where useDeferredValue during a popstate event would
spawn a transition update that was itself also synchronous.",Andrew Clark,2023-10-21T16:11:25Z
90172d12e8f06936ade78ed916397c16a2bec4f8,"[Flight] Cleanup turbopack tests (#27552)

Renames turbopack flight test files. removes tests which are primarily
testing internal implemenation behavior of Flight Client itself",Josh Story,2023-10-21T06:21:31Z
b9244f79bab133e0e6d2e992b5be4722b4ac7536,Add initial canary changelog (#27504),Matt Carroll,2023-10-21T02:11:07Z
8c85b02996b940d63f961f835348a0dd0045d3b6,"[Fizz] Optimize end tags chunks (#27522)

Implements `endChunkForTag` to make writing end tags faster",Jung Yujun,2023-10-20T22:34:21Z
d803f519eade5ed1eba88be51990a33c7199f794,"Upgrade to Flow 0.219.0 (#27542)

This upgrade made the `React$Element` type opaque, which is good for
product code where accessing props of elements is code smell, but React
needs to use that internally. I overrode the type to restore it.",Jan Kassens,2023-10-20T15:09:44Z
b049c14bb37965940aeeaa622d484981a2cf25a3,"Repro of hoisting bug 

Adds a test case reproducing an issue with hoisting. This seems like a case 
where hoisting was incorrectly applied as this example doesn't require it",Lauren Tan,2023-10-20T10:34:41Z
3a1967b7d514b69c3fcb2ee53966fc035691bcd3,"[Flight] Expose `encodeReply` from ReactFlightDOMClientEdge (#27551)

Adds encodeReply to ReactFlightDOMClientEdge in webpack and turbopack
bindings",Josh Story,2023-10-20T00:24:47Z
f8cee28f1d7c8da8522974dd3e61b7fc0815c85d,"Retain minimal variable declarations in DCE 

Currently DCE can remove variable declarations that are unused, ie where all 
control-flow paths to usage of the variable are overwritten by a reassignment. 
We then have to reconstruct the original variable declaration at the appropriate 
block scope during LeaveSSA, which is complex and can actually be incorrect in 
some cases. 

This PR updates to ensure that DCE will not remove the original variable 
declaration for any variable that is used (even in the case of always being 
reassigned before use). The main changes are: 

* DCE retains variable declarations, but if a variable declaration is always 
shadowed by reassignments then DCE will rewrite StoreLocal -> DeclareLocal so 
that it can DCE the unused initial value. 

* BuildHIR now has to change its handling for reassignment destructure 
instructions with nesting. Nesting uses a temporary which would appear as a 
declaration of a new variable, which is incompatible with other reassignments. 
See comments in the file. 

* LeaveSSA is quite a bit simpler now, since we never need to reconstruct a 
declaration.",Joe Savona,2023-10-19T21:08:15Z
f172fa74610df623f1e82997ba66337452deeaa1,"[Flight] Detriplicate Objects (#27537)

Now that we no longer support Server Context, we can now deduplicate
objects. It's not completely safe for useId but only in the same way as
it's not safe if you reuse elements on the client, so it's not a new
issue.

This also solves cyclic object references.

The issue is that we prefer to inline objects into a plain JSON format
when an object is not going to get reused. In this case the object
doesn't have an id. We could potentially serialize a reference to an
existing model + a path to it but it bloats the format and complicates
the client.

In a smarter flush phase like we have in Fizz we could choose to inline
or outline depending on what we've discovered so far before a flush. We
can't do that here since we use native stringify. However, even in that
solution you might not know that you're going to discover the same
object later so it's not perfect deduping anyway.

Instead, I use a heuristic where I mark previously seen objects and if I
ever see that object again, then I'll outline it. The idea is that most
objects are just going to be emitted once and if it's more than once
it's fairly likely you have a shared reference to it somewhere and it
might be more than two.

The third object gets deduplicated (or ""detriplicated"").

It's not a perfect heuristic because when we write the second object we
will have already visited all the nested objects inside of it, which
causes us to outline every nested object too even those weren't
reference more than by that parent. Not sure how to solve for that.

If we for some other reason outline an object such as if it suspends,
then it's truly deduplicated since it already has an id.",Sebastian Markbåge,2023-10-19T17:41:16Z
2eeb9f9226af60149792f5c33e29a9c0001bba61,"[Flight Reply] Update error message (#27549)

This is in the reverse direction.",Sebastian Markbåge,2023-10-19T17:40:24Z
b67ddaa434d590f312fee6f9acee24accd064192,"[meta-only] Move ReactServerStreamConfigFB to `react-server` from `react-server-dom-fb` (#27544)

Code organization PR.

It looks like the `ReactServerStreamConfigFB` is only used in the
`relay-server` package. This PR moves it to `react-server` from
`react-server-dom-fb` (similar to how we have config for bun, for
example). This avoids cross-package imports from `react-server` to
`react-server-dom-fb.`",Andrey Lunyov,2023-10-19T16:35:41Z
9617d39eca1fbac58afe73a23580d781ea20211d,"[Fizz] Add proper assertion for stream fix (#27543)

In https://github.com/facebook/react/pull/27541 I added tests to assert
that the write after close bug was fixed. However the Node
implementation has an abort behavior preventing reproduction of the
original issue and the Browser build does not use AsyncLocalStorage
which also prevents reproduction. This change moves the Browser test to
a Edge runtime where AsyncLocalStorage is polyfilled. In this
implementation the test does correctly fail when the patch is removed.",Josh Story,2023-10-18T19:01:09Z
601e5c38505ebc0ee099d8666b2f7a8b03159ac4,"[Fizz][Float] Do not write after closing the stream (#27541)

Float methods can hang on to a reference to a Request after the request
is closed due to AsyncLocalStorage. If a Float method is called at this
point we do not want to attempt to flush anything. This change updates
the closing logic to also call `stopFlowing` which will ensure that any
checks against the destination properly reflect that we cannot do any
writes. In addition it updates the enqueueFlush logic to existence check
the destination inside the work function since it can change across the
work scheduling gap if it is async.

fixes: https://github.com/facebook/react/issues/27540",Josh Story,2023-10-18T17:05:18Z
20c91b65341fd404185fc778c6844ac29ab815d5,"React DevTools 4.28.4 -> 4.28.5 (#27538)

Changes:
* fix[devtools/useMemoCache]: add stub for useMemoCache in
ReactDebugHook ([hoxyq](https://github.com/hoxyq) in
[#27472](https://github.com/facebook/react/pull/27472))
* useDeferredValue should skip initialValue if it suspends
([acdlite](https://github.com/acdlite) in
[#27509](https://github.com/facebook/react/pull/27509))
* feat[react-devtools-extensions/logging]: initialize session id on the
client for logging ([hoxyq](https://github.com/hoxyq) in
[#27517](https://github.com/facebook/react/pull/27517))
* refactor[react-devtools-extensions]: use globals to eliminate dead
code ([hoxyq](https://github.com/hoxyq) in
[#27516](https://github.com/facebook/react/pull/27516))
* fix[devtools/inspectElement]: dont pause initial inspectElement call
when user switches tabs ([hoxyq](https://github.com/hoxyq) in
[#27488](https://github.com/facebook/react/pull/27488))",Ruslan Lesiutin,2023-10-18T13:08:23Z
e3748a0bde80dd1f097fd8000702aba9fca454ef,"[Fizz] Pass cancellation reason to abort (#27536)

This was implemented correctly for Flight but not Fizz. Hard to keep
these many wrappers in sync.",Sebastian Markbåge,2023-10-18T01:43:12Z
a4195750779dbd9a13e1615fbbd493bf2c5768ca,"fix[devtools/useMemoCache]: add stub for useMemoCache in ReactDebugHook (#27472)

Currently, we have this error in our logs of the internal version of
React DevTools:
```
TypeError: Cannot read properties of undefined (reading 'memoCache')
    at Proxy.useMemoCache (chrome-extension://dnjnjgbfilfphmojnmhliehogmojhclc/build/react_devtools_backend_compact.js:151:71)
```

Looking at the build files of the extension, it fails here:
https://github.com/facebook/react/blob/dddfe688206dafa5646550d351eb9a8e9c53654a/packages/react-debug-tools/src/ReactDebugHooks.js#L333-L337

Looks like `updateQueue` can be `undefined`, as it is not defined in
hook object here:
https://github.com/facebook/react/blob/dddfe688206dafa5646550d351eb9a8e9c53654a/packages/react-reconciler/src/ReactFiberHooks.js#L180-L186

~~Also, it looks like `useMemoCache` implementation doesn't expect this,
so it should also result into TypeError here, line 1114:~~

https://github.com/facebook/react/blob/dddfe688206dafa5646550d351eb9a8e9c53654a/packages/react-reconciler/src/ReactFiberHooks.js#L1108-L1115

~~Should this also be updated?~~",Ruslan Lesiutin,2023-10-17T17:39:10Z
75c1bd7ee7e4a87a4dd0f560e157c57957ef823b,"Prerendering support for useDeferredValue (#27512)

### Based on #27509 

Revealing a prerendered tree (hidden -> visible) is considered the same
as mounting a brand new tree. So, when an initialValue argument is
passed to useDeferredValue, and it's prerendered inside a hidden tree,
we should first prerender the initial value.

After the initial value has been prerendered, we switch to prerendering
the final one. This is the same sequence that we use when mounting new
visible tree. Depending on how much prerendering work has been finished
by the time the tree is revealed, we may or may not be able to skip all
the way to the final value.

This means we get the benefits of both prerendering and preview states:
if we have enough resources to prerender the whole thing, we do that. If
we don't, we have a preview state to show for immediate feedback.",Andrew Clark,2023-10-17T16:58:48Z
b2a68a65c84b63ac86930d88ae5c84380cbbdeb6,"useDeferredValue should skip initialValue if it suspends (#27509)

### Based on https://github.com/facebook/react/pull/27505

If a parent render spawns a deferred task with useDeferredValue, but the
parent render suspends, we should not wait for the parent render to
complete before attempting to render the final value.

The reason is that the initialValue argument to useDeferredValue is
meant to represent an immediate preview of the final UI. If we can't
render it ""immediately"", we might as well skip it and go straight to the
""real"" value.

This is an improvement over how a userspace implementation of
useDeferredValue would work, because a userspace implementation would
have to wait for the parent task to commit (useEffect) before spawning
the deferred task, creating a waterfall.",Andrew Clark,2023-10-17T16:48:11Z
9abf6fa31cd7ff4c6e54de75950620e203c59ebf,"feat[react-devtools-extensions/logging]: initialize session id on the client for logging (#27517)

This code is executed once React DevTools panels are mounted, basically
when user opens browser's DevTools. Based on this fact, session in this
case is defined by browser's DevTools session, while they are open. A
session can involve debugging multiple React pages. `crypto.randomUUID`
is used to generate random user id.

Corresponding logger config changes -
[D50267871](https://www.internalfb.com/diff/D50267871).",Ruslan Lesiutin,2023-10-17T14:23:53Z
84da8994bd55f4a908fe0ca8446d1bb4d09adee2,"Test cases for reactive (control) dependencies 

Adds test cases for all the cases of control dependencies that I can think of. 
We don't currently handle control dependencies correctly in any of these cases. 

There's also another test case which demonstrates why reactive dependency 
inference needs to be fixpoint, even for non-control dependencies.",Joe Savona,2023-10-17T08:48:23Z
4fc392e6280fcf0459cc950ee750e109f3701766,[qol] Add sprout to top level scripts,Lauren Tan,2023-10-16T15:05:08Z
640994f49b5cfb09eb65632b155570ba1c90878f,[playground] Only log error to console when clicked,Lauren Tan,2023-10-16T14:54:33Z
f5d1ff0a3c84b004bc8f7dd04d9e490b5b85b160,Update .gitignore for watchman-cookie,Lauren Tan,2023-10-16T14:54:30Z
67cc9ba8789335b9da0838a446137c1be62adbcd,"Fix: error messages (#27523)

<!--
  Thanks for submitting a pull request!
We appreciate you spending the time to work on these changes. Please
provide enough information so that others can review your pull request.
The three fields below are mandatory.

Before submitting a pull request, please make sure the following is
done:

1. Fork [the repository](https://github.com/facebook/react) and create
your branch from `main`.
  2. Run `yarn` in the repository root.
3. If you've fixed a bug or added code that should be tested, add tests!
4. Ensure the test suite passes (`yarn test`). Tip: `yarn test --watch
TestName` is helpful in development.
5. Run `yarn test --prod` to test in the production environment. It
supports the same options as `yarn test`.
6. If you need a debugger, run `yarn test --debug --watch TestName`,
open `chrome://inspect`, and press ""Inspect"".
7. Format your code with
[prettier](https://github.com/prettier/prettier) (`yarn prettier`).
8. Make sure your code lints (`yarn lint`). Tip: `yarn linc` to only
check changed files.
  9. Run the [Flow](https://flowtype.org/) type checks (`yarn flow`).
  10. If you haven't already, complete the CLA.

Learn more about contributing:
https://reactjs.org/docs/how-to-contribute.html
-->

## Summary
Changes `before before` to `before` in error messages.

<!--
Explain the **motivation** for making this change. What existing problem
does the pull request solve?
-->
I want to improve error logs

## How did you test this change?

<!--
Demonstrate the code is solid. Example: The exact commands you ran and
their output, screenshots / videos if the pull request changes the user
interface.
How exactly did you verify that your PR solves the issue you wanted to
solve?
  If you leave this empty, your PR will very likely be closed.
-->",Asan Azimkulov,2023-10-16T14:05:42Z
18a9dd1c60fdb711982f32ce5d91acfe8f158fe1,"refactor[react-devtools-extensions]: use globals to eliminate dead code (#27516)

Small change to eliminate dead code in builds for different browsers.

Tested by inspecting production sources.",Ruslan Lesiutin,2023-10-16T13:54:25Z
309c8ad9688c491e5b17beb07ab01d65594914ce,"Track entangled lanes separately from update lane (#27505)

A small refactor to how the lane entanglement mechanism works. We can
now distinguish between the lane that ""spawned"" a render task (i.e. a
new update) versus the lanes that it's entangled with. Both the update
lane and the entangled lanes will be included while rendering, but by
keeping them separate, we don't lose the original priority.

In practical terms, this means we can now entangle a low priority update
with a higher priority lane while rendering at the lower priority.

To do this, lanes that are entangled at the root are now tracked using
the same variable that we use to track the ""base lanes"" when revealing a
previously hidden tree — conceptually, they are the same thing. I also
renamed this variable (from subtreeLanes to entangledRenderLanes) to
better reflect how it's used.

My primary motivation is related to useDeferredValue, which I'll address
in a later PR.",Andrew Clark,2023-10-15T16:29:52Z
09fbee89d62bc1c4a00e64474346cb9bc87682cb,"[Fizz] Don't pop the replay stack if we've already rendered past an element (#27513)

This is the same problem as we had with keyPath before where if the
element itself suspends, we have to restore the replay node to what it
was before, however, if something below the element suspends we
shouldn't pop it because that will pop it back up the stack.

Instead of passing replay as an argument to every renderElement
function, I use a hack to compare if the node is still the same as the
one we tried to render, then that means we haven't stepped down into the
child yet. Maybe this is not quite correct because in theory you could
have a recursive node that just renders itself over and over until some
context bails out.

This solves an issue where if you suspended in an element it would retry
trying to replay from that element but using the postponed state from
the root.",Sebastian Markbåge,2023-10-13T13:21:21Z
1b4ba7489978247fc955a99f01537f6fc79ffd97,"refactor: align ReactNativeViewConfigRegistry flow typing (#27514)

<!--
  Thanks for submitting a pull request!
We appreciate you spending the time to work on these changes. Please
provide enough information so that others can review your pull request.
The three fields below are mandatory.

Before submitting a pull request, please make sure the following is
done:

1. Fork [the repository](https://github.com/facebook/react) and create
your branch from `main`.
  2. Run `yarn` in the repository root.
3. If you've fixed a bug or added code that should be tested, add tests!
4. Ensure the test suite passes (`yarn test`). Tip: `yarn test --watch
TestName` is helpful in development.
5. Run `yarn test --prod` to test in the production environment. It
supports the same options as `yarn test`.
6. If you need a debugger, run `yarn test --debug --watch TestName`,
open `chrome://inspect`, and press ""Inspect"".
7. Format your code with
[prettier](https://github.com/prettier/prettier) (`yarn prettier`).
8. Make sure your code lints (`yarn lint`). Tip: `yarn linc` to only
check changed files.
  9. Run the [Flow](https://flowtype.org/) type checks (`yarn flow`).
  10. If you haven't already, complete the CLA.

Learn more about contributing:
https://reactjs.org/docs/how-to-contribute.html
-->

## Summary

<!--
Explain the **motivation** for making this change. What existing problem
does the pull request solve?
-->
aligned the typing for `ReactNativeViewConfigRegistry` in
`react-native-host-hooks.js`
continuation of https://github.com/facebook/react/pull/27508

## How did you test this change?

<!--
Demonstrate the code is solid. Example: The exact commands you ran and
their output, screenshots / videos if the pull request changes the user
interface.
How exactly did you verify that your PR solves the issue you wanted to
solve?
  If you leave this empty, your PR will very likely be closed.
-->",Jakub Romańczyk,2023-10-13T09:33:55Z
fa2a67dd1da70ef05eb6f0e259de2cfbcecc0cf3,Feature flag to opt-in to emitting change variables,Joe Savona,2023-10-12T23:26:42Z
bb778528d1ca22b44dad832f0258aaa4c0e6d4a4,"[Fizz] Fix children rendering in custom elements with `enableCustomElementPropertySupport` (#27511)

The `enableCustomElementPropertySupport` flag changes React's handling
of custom elements in a way that is more useful that just treating every
prop as an attribute. However when server rendering we have no choice
but to serialize props as attributes. When this flag is on and React
supports more prop types on the client like functions and objects the
server implementation needs to be a bit more naunced in how it renders
these components. With this flag on `false`, function, and object props
are omitted entirely and `true` is normalized to `""""`. There was a bug
however in the implementation which caused children more complex than a
single string to be omitted because it matched the object type filter.
This change reorganizes the code a bit to put these filters in the
default prop handline case, leaving children, style, and innerHTML to be
handled via normal logic.

fixes: https://github.com/facebook/react/issues/27286",Josh Story,2023-10-12T22:02:26Z
28767a7afb7ca426712b588dbc3beacc12f645b8,"Inline reactive scope dep checks; no more change vars 

Reactive scopes are currently preceded by individual variable declarations, one 
for each of the scope's dependencies. Only after checking independently if each 
of these dependencies has changed do we then do an ""or"" to check if we should 
actually recompute the body of the scope. 

But that's wasteful: it's more efficient to rely on `||` short-circuiting, and 
recompute as soon as any input changes. 

The main reason I can see not to do this is debugging. Having the change 
variables makes it easy to see what changed. But at this point I think it makes 
sense to optimize for code size and performance; we can always add back a 
dev-only mode that uses change variables if that turns out to help debugging.",Joe Savona,2023-10-12T19:03:42Z
4fe0ab41e323acb990cace942ef26630b42ac0d1,Repro for unnecessary memoization of array filter,Joe Savona,2023-10-12T19:03:38Z
87b1549d5c11da3370caf947231c09c39d7053da,"Improve MergeConsecutiveScopes 

Rewrites the core logic of MergeConsecutiveScopes to be easier to follow and fix 
bugs. We now do a two-pass approach: 

* First we iterate block instructions to identify scopes which can be merged, 
without actually merging the instructions themselves. 

* Then we iterate again, copying instructions from the block either into the new 
output block, or into their merged scope, as appropriate. 

I think the simplicity here is worth the performance cost, and we can always 
revisit later as necessary.",Joe Savona,2023-10-12T16:47:26Z
ea8a8619ce51a0f8f0a78f87485e4e2a6f9d8c27,"refactor: use ESM exports in ReactNativeViewConfigRegistry (#27508)

## Summary

When transpiling `react-native` with `swc` this file caused some trouble
as it mixes ESM and CJS import/export syntax. This PR addresses this by
converting CJS exports to ESM exports. As
`ReactNativeViewConfigRegistry` is synced from `react` to `react-native`
repository, it's required to make the change here. I've also aligned the
mock of `ReactNativeViewConfigRegistry` to reflect current
implementation.

Related PR in `react-native`:
https://github.com/facebook/react-native/pull/40787",Jakub Romańczyk,2023-10-12T16:28:32Z
e61a60fac02d205ad928bff6de2449f00646a92c,"[Flight] Enforce ""simple object"" rule in production (#27502)

We only allow plain objects that can be faithfully serialized and
deserialized through JSON to pass through the serialization boundary.

It's a bit too expensive to do all the possible checks in production so
we do most checks in DEV, so it's still possible to pass an object in
production by mistake. This is currently exaggerated by frameworks
because the logs on the server aren't visible enough. Even so, it's
possible to do a mistake without testing it in DEV or just testing a
conditional branch. That might have security implications if that object
wasn't supposed to be passed.

We can't rely on only checking if the prototype is `Object.prototype`
because that wouldn't work with cross-realm objects which is
unfortunate. However, if it isn't, we can check wether it has exactly
one prototype on the chain which would catch the common error of passing
a class instance.",Sebastian Markbåge,2023-10-11T16:18:49Z
1fc58281af73ca4507c41d53a3e08dc2038b0c1f,"Disable ServerContext in canary (#27474)

We previously added a warning in #27424. This just removes it from
canary/stable channels but keeps it in experimental for now.",Sebastian Markbåge,2023-10-11T16:13:09Z
537228f9fd703d18bea1f6d20fa0e5006b795c42,"Add support for onScrollEnd event (#26789)

## Summary

This adds support for the new
[scrollend](https://developer.mozilla.org/en-US/docs/Web/API/Element/scrollend_event)
event. It was recently added to the spec, and is currently supported in
Firefox 109 and Chrome Canary (shipping in Chrome 114). You can read
more about this event
[here](https://developer.chrome.com/blog/scrollend-a-new-javascript-event/).
This PR adds support for the `onScrollEnd` prop, following the
implementation for `onScroll`.

## How did you test this change?

Added unit tests.",Devon Govett,2023-10-11T04:00:57Z
be67db46b60d94f9fbefccf2523429af25873e5b,"Add optional initialValue argument to useDeferredValue (#27500)

Adds a second argument to useDeferredValue called initialValue:

```js
const value = useDeferredValue(finalValue, initialValue);
```

During the initial render of a component, useDeferredValue will return
initialValue. Once that render finishes, it will spawn an additional
render to switch to finalValue.

This same sequence should occur whenever the hook is hidden and revealed
again, i.e. by a Suspense or Activity, though this part is not yet
implemented.

When initialValue is not provided, useDeferredValue has no effect during
initial render, but during an update, it will remain on the previous
value, then spawn an additional render to switch to the new value. (This
is the same behavior that exists today.)

During SSR, initialValue is always used, if provided.

This feature is currently behind an experimental flag. We plan to ship
it in a non-breaking release.",Andrew Clark,2023-10-10T20:39:02Z
52c6a34da30ffee665183df2aa8f97e3511fbd9e,"[be] Limit scope of temporaries in codegen 

This morning @mofeiZ reminded me that our codegen doesn't really have any guards 
against reordering, since temporaries are lazily emitted. We're relying on the 
fact that our lowering and memoization carefully preserves order of evaluation, 
such that delaying the instructions in codegen doesn't change semantics. 

To help catch any mistakes with this, I had previously added code that reset the 
codegen context's temporaries before/after exiting a reactive scope. That 
ensured that temporaries from within the scope weren't accessible outside it. 
This PR extends that approach to _all_ blocks, so that temporaries created 
within a block aren't accessible outside it. 

I'm also going to explore more actively resetting temporaries after they 
""should"" be used. There are a couple cases where temporaries are reused, though, 
which we have to change first.",Joe Savona,2023-10-10T20:15:51Z
495fec19e76fafcb7b57e0591ef1fa43da6cd7af,[be] Update docblock comment for ConstantPropagation,Joe Savona,2023-10-10T20:15:46Z
a92bfd7fdc443fe7ae998c6459fd563586c8756d,[be] Factor out named type for JSXText instr variant,Joe Savona,2023-10-10T20:15:42Z
ba23b990acf5d16cd8c96975e38298bbfb6de344,[be] Remove dead code in ConstantPropagation,Joe Savona,2023-10-10T20:15:39Z
77ec61885fb19607cdd116a6790095afa40b5a94,"fix[devtools/inspectElement]: dont pause initial inspectElement call when user switches tabs (#27488)

There are not so many changes, most of them are changing imports,
because I've moved types for UI in a single file.

In https://github.com/facebook/react/pull/27357 I've added support for
pausing polling events: when user inspects an element, we start polling
React DevTools backend for updates in props / state. If user switches
tabs, extension's service worker can be killed by browser and this
polling will start spamming errors.

What I've missed is that we also have a separate call for this API, but
which is executed only once when user selects an element. We don't
handle promise rejection here and this can lead to some errors when user
selects an element and switches tabs right after it.

The only change here is that this API now has
`shouldListenToPauseEvents` param, which is `true` for polling, so we
will pause polling once user switches tabs. It is `false` by default, so
we won't pause initial call by accident.


https://github.com/hoxyq/react/blob/af8beeebf63b5824497fcd0bb35b7c0ac8fe60a0/packages/react-devtools-shared/src/backendAPI.js#L96",Ruslan Lesiutin,2023-10-10T17:10:17Z
151e75a128d0fd436dce365335b96c5686f704d4,"[Fabric] Pass children when cloning (#27458)

## Summary

Currently when cloning nodes in Fabric, we reset a node's children on
each clone, and then repeatedly call appendChild to restore the previous
list of children (even if it was quasi-identical to before). This causes
unnecessary invalidation of the layout state in Fabric's ShadowNode data
(which in turn may require additional yoga clones) and extra JSI calls.

This PR adds a feature flag to pass in the children as part of the clone
call, so Fabric always has a complete view of the node that's being
mutated.

This feature flag requires matching changes in the react-native repo:
https://github.com/facebook/react-native/pull/39817

## How did you test this change?

Unit test added demonstrates the new behaviour 

```
yarn test -r www-modern ReactFabric-test
yarn test ReactFabric-test.internal
```

Tested a manual sync into React Native and verified core surfaces render
correctly.",Pieter De Baets,2023-10-10T14:11:26Z
5a8c7594c5f06908dd2f0afb2cb69897909565a2,"Implement JSX whitespace rules 

So far we've been preserving JSX whitespace all the way through to codegen. But 
JSX has clear rules around whitespace handling, which allows us to trim 
whitespace in the input in lots of cases. For the most part this doesn't change 
our output, but I think that’s generally because of prettier. This PR should 
make a big difference when debugging the compiler, by removing all the 
whitespace JsxText values. 

But in some edge-cases it really makes a difference in the output since we can 
avoid memo slots for strings like `""\n      ""`.. 

## Test Plan 

* Experimented with our internal tool to verify transform output to confirm that 
JSXText whitespace does not impact fbt transform results. 

* Synced and tested profile page, looks fine",Joe Savona,2023-10-09T23:35:47Z
b61dba64ad6ded12e7ae1245861d2a08ec7ac5ff,"Enable MergeConsecutiveScopes by default 

## Test Plan (wip) 

Sync internally, manually verify code changes and test products.",Joe Savona,2023-10-09T23:15:30Z
a1461016df10f2a5f3e0e6fb60b1820c55c1f5be,"Improve MergeConsecutiveScopes 

Rewrites the core logic of MergeConsecutiveScopes to be easier to follow and fix 
bugs. We now do a two-pass approach: 

* First we iterate block instructions to identify scopes which can be merged, 
without actually merging the instructions themselves. 

* Then we iterate again, copying instructions from the block either into the new 
output block, or into their merged scope, as appropriate. 

I think the simplicity here is worth the performance cost, and we can always 
revisit later as necessary.",Joe Savona,2023-10-09T23:15:30Z
49d16ba7e561d8d401a75121637d5f7a1c002d2a,"Repro for scope merging bug 

This is a repro for a bug that occurs when `enableMergeConsecutiveScopes` is 
enabled. Reminder that this feature is off by default and not enabled yet 
internally. 

I found this via #2121, where eliminating extraneous whitespace JSXText 
instructions meant that MergeConsecutiveScopes started merging a fixture 
differently, revealing a bug. This PR reproduces that case by keeping the 
identical structure, but using plain objects to represent the JSX elements 
instead of JSX syntax.",Joe Savona,2023-10-09T23:15:29Z
529568c7dba7d463af35c5b5f6287649d5e41335,[be] Rename InlineUseMemo imports,Joe Savona,2023-10-09T23:07:09Z
428c47581e7d175c8f54a7c21600e613460a89ff,"Generalize InlineUseMemo to inline IIFEs 

This PR completes the refactor. We now do the following sequence: 

* ValidateUseMemo. This is a new pass that extracts just the validation logic 
from the existing InlineUseMemo. This was always being run before, so this pass 
also always runs. 

* DropManualMemoization. As before, this converts useMemo calls into an IIFE 
(immediately invoked function expression). 

* InlineImmediatelyInvokedFunctionExpressions (prev InlineUseMemo). This pass 
now inlines _all_ IIFEs, including both useMemo calls that were dropped as well 
as IIFEs that the user wrote. 

The motivation for this change is that some codebases use IIFEs as a workaround 
for lack of if expressions, but we're unable to optimize within function 
expressions. This is the reason we originally added inlining for useMemo, but 
given that IIFEs are common it makes sense to generalize the inlining. 

## Test Plan 

* Manually checked changes in output 

* Synced internally and tested on profile page, no issues observed. Also 
spot-checked some of the changes in ouput and it looks as expected.",Joe Savona,2023-10-09T22:56:10Z
444a1ad9c111b5148c343d2a79ff80f1076eaa29,"Reorder InlineUseMemo after type inference 

The goal of this stack is to generalize `InlineUseMemo` into a pass that inlines 
all immediately invoked function expressions (IIFEs). Rather than specialize 
just useMemo calls, we'll rely on DropManualMemoization running first and 
turning useMemo calls into IIFEs. Then the generalized inlining pass can handle 
those IIFEs as well as others present in the source. 

For now, moving the order of the pass makes the output closer to what it will 
eventually be after this stack is complete.",Joe Savona,2023-10-09T22:25:18Z
74c6c992baf2e9eb5d138c66314a84ac9aa01f9b,"[be] s/DropUseMemo/DropManualMemoization/ 

Renames this pass to clarify that it's dropping all manual memoization (within 
components), including both useMemo and useCallback.",Joe Savona,2023-10-09T22:25:17Z
683a197a899b2914c80478b389132a8081e4eb24,"Manually revert #2127 (allow mutating context in callbacks) 

#2127 introduced a special type for the result of `useContext()` that was sort 
of ref-like. The intent was to allow code like this: 

``` 

function Foo() { 

const cx = useContext(...); 

function onEvent() { 

cx.foo = true; 

}; 

return <Bar onEvent={onEvent} />; 

} 

``` 

However, that code actually is allowed by the compiler by default. It's only a 
bailout when `@validateFrozenLambdas` is enabled. The ""fix"" in #2127 therefore 
wasn't strictly necessary to unblock rollout, and it's also flawed in a few 
ways: 

* First, `useContext(FooContext)` should have equivalent behavior to a custom 
hooks which does the same thing, ie `function useFooContext() { return 
useContext(FooContext) }`. Specializing the type of useContext makes the 
behavior different. 

* Second, it meant that even readonly accesses of the context inside a callback 
marked the function as capturing, which in turn prevented those callbacks from 
being memoized. 

So i'm reverting this and we'll have to think a bit more about this case.",Joe Savona,2023-10-09T22:21:12Z
b55cf78a4d23de06b96a3a5025ad86e4961baa96,"[syntax] Lower empty jsx attributes to true 

--- 

Found when enabling Forget for webamp 

``` 

% yarn sprout --filter --verbose 

yarn run v1.22.19 

$ node ../sprout/dist/main.js --filter --verbose 

PASS  jsx-attribute-default-to-true 

ok <div>{""truthyAttribute"":true}</div> 

1 Tests, 1 Passed, 0 Failed 

✨  Done in 2.45s. 

```",Mofei Zhang,2023-10-06T21:38:02Z
392d0b127b1fec2a235954f22ca828769c0413ce,"[patch] Patch import specifiers check for react 

--- 

Patch for original patch of injecting `useMemoCache` logic 😅 This is failing on 
a good number React components internally (not in our current experiments)",Mofei Zhang,2023-10-06T21:38:00Z
fd87c9b9e13d06983194bc19f641a2caf2d12b50,"[patch] Bug in deriveMinimalDeps 

Found when enabling Forget on Webamp",Mofei Zhang,2023-10-06T21:37:57Z
2b417e2a5203f108ab3a5248332e5cd8dd2f8700,"Playground uses new pragma parser, shows config being used 

The playground now uses the new pragma parser so it's guaranteed to use the 
right defaults and have consistent parsing with snap/sprout. In addition, we now 
emit a debug event from the compiler which contains pretty-printed environment 
config, making it easy to check which settings are being applied in playground. 

<img width=""3008"" alt=""Screenshot 2023-10-05 at 11 05 58 AM"" 
src=""https://github.com/facebook/react-forget/assets/6425824/2417f40c-1320-4c39-a661-a4e34e3d69c4"">",Joe Savona,2023-10-05T18:06:56Z
ed9ea81e4a73b02bf138508b4c4ec6acf71b9676,"Snap/sprout use new pragma parser and compiler defaults 

Updates Snap and Sprout to use the new pragma parser, which also means they will 
always use the same default flags as the compiler itself sets. A side benefit of 
this is that you no longer need to rebuild snap/sprout to update their flags, 
since they will take flags from the version of the compiler being executed.",Joe Savona,2023-10-05T17:57:20Z
cadcf3de2d062d78c755a1d7672377e5933656be,"Reusable function for parsing config strings 

Adds a helper function for parsing pragma strings to the compiler itself, and 
exports it. This will be used in follow-ups to make Snap, Sprout, and Playground 
all use the same pragma parser. The helper also starts from the default values, 
so adopting this will also make it easy for all those places to have the same 
defaults automatically.",Joe Savona,2023-10-05T17:18:24Z
80d867d1bdb061c004db663c5fee1d754ce50db2,"Promote inlineUseMemo to stable (remove flag) 

Per title, this feature flag is enabled everywhere and is clearly stable, let's 
promote to stable and remove the flag to simplify.",Joe Savona,2023-10-05T16:20:19Z
3fdb237682513d27a2131663f58cf4a6e3c82305,"Promote enableNoAliasOptimizations to stable (remove flag) 

Per title, this feature flag is enabled everywhere and is stable enough, let's 
promote to stable and remove the flag to simplify.",Joe Savona,2023-10-05T16:20:14Z
11d03ffbe08e0366dddf04c49668ca6da72b089d,"Promote enableFunctionCallSignatureOptimizations to stable (remove flag) 

Per title, this feature flag is enabled everywhere and is clearly stable, let's 
promote to stable and remove the flag to simplify.",Joe Savona,2023-10-05T16:20:09Z
0b0f8994bab67691c3105fd283ba8041952d846a,"Promote enableTreatHooksAsFunctions to stable (remove flag) 

Per title, this feature flag is enabled everywhere and is clearly stable, let's 
promote to stable and remove the flag to simplify.",Joe Savona,2023-10-05T16:20:05Z
dddfe688206dafa5646550d351eb9a8e9c53654a,"pull implementations from the right react-dom (#27471)

should have imported from the stub implementation. this blew up the
server rendering stub size (effectively pulling in the entire client
bundle)",Josh Story,2023-10-05T16:14:57Z
546178f9109424f6a0176ea8702a7620c4417569,"`react-dom/server-rendering-stub`: restore experimental prefix for `useFormState` and `useFormStatus` (#27470)

in #27461 the experimental prefix was added back for `useFormState` and
`useFormStatus` in react-dom. However these functions are also exported
from the server rendering stub too and when using the stub with
experimental prefixes their absence causes unexpected errors.

This change adds back the experimental prefix for these two hooks to
match the experimental build of react-dom.",Josh Story,2023-10-05T15:53:14Z
16619f106ab5ba8e6aca19d55be46cce22e4a7ff,"Reduce install network flake (#27464)

## Summary

Avoids potentially flaky network calls leading to failures such as
https://app.circleci.com/pipelines/github/facebook/react/47096/workflows/b7966c1d-199c-4185-8d17-ac6485235c3a/jobs/727782.
Also makes install faster since we don't need the binary in CI
seemingly.

Electron itself is used to start the standalone binary.

## How did you test this change?

- [x] CI still passes without the binary downloaded. I'm just trusting
[their
docs](https://www.electronjs.org/docs/latest/tutorial/installation) here
that setting this actually ensures the binary isn't downloaded.",Sebastian Silbermann,2023-10-05T09:37:08Z
0fba3ecf73900a1b54ed6d3b0617462ac92d2fef,"[Fizz] Reset error component stack and fix error messages (#27456)

The way we collect component stacks right now are pretty fragile.

We expect that we'll call captureBoundaryErrorDetailsDev whenever an
error happens. That resets lastBoundaryErrorComponentStackDev to null
but if we don't, it just lingers and we don't set it to anything new
then which leaks the previous component stack into the next time we have
an error. So we need to reset it in a bunch of places.

This is still broken with erroredReplay because it has the inverse
problem that abortRemainingReplayNodes can call
captureBoundaryErrorDetailsDev more than one time. So the second
boundary won't get a stack.

We probably should try to figure out an alternative way to carry along
the stack. Perhaps WeakMap keyed by the error object.

This also fixes an issue where we weren't invoking the onShellReady
event if we error a replay. That event is a bit weird for resuming
because we're probably really supposed to just invoke it immediately if
we have already flushed the shell in the prerender which is always atm.
Right now, it gets invoked later than necessary because you could have a
resumed hole ready before a sibling in the shell is ready and that's
blocked.",Sebastian Markbåge,2023-10-04T20:48:12Z
6f132439578ee11e04b41a278df51c52b0dc8563,"Move ReactCurrentDispatcher back to shared internals (#27462)

The jsx-runtime uses the ReactCurrentDispatcher from shared internals.
Recently this was moved to ReactServerSharedInternals which broke
jsx-runtime. This change moves it back to ReactSharedInternals until we
can come up with a new forking mechanism.",Josh Story,2023-10-04T20:16:21Z
ca237d6f0ab986e799f192224d3066f76d66b73b,"Add back temporary `experimental_` aliases for Server Actions APIs (#27461)

This adds back the `experimental_`-prefixed Server Actions APIs to the
experimental builds only, so that apps that use those don't immediately
break when upgrading. The APIs will log a warning to encourage people to
move to the unprefixed version, or to switch to the canary release
channel.

We can remove these in a few weeks after we've given people a chance to
upgrade.

This does not affect the canary builds at all, since they never had the
prefixed versions to begin with.",Andrew Clark,2023-10-04T19:58:08Z
8e8ae96478a1116ae7b6d9ede27c3b2da4a64293,"Support empty catch clause 

Adds support for empty catch clauses in a try/catch. We add a new block kind 
`catch` which prevents the empty catch block from being merged with other types 
of blocks, preserving the block structure within the HIR and allowing us to 
reconstruct the empty catch.",Joe Savona,2023-10-04T19:24:19Z
44d40a077ae91bbf5e18a95b90d8a15c2ec978ca,"Remove prefix from `formState` option (#27460)

`useFormState` is now in canary.",Andrew Clark,2023-10-04T19:17:37Z
bfefb228422f7264a29b3a6b98ec95e05925e80e,"Upgrade Server Actions to canary (#27459)

Upgrades the stability of Server Actions from experimental to canary.

- Turns on enableAsyncActions and enableFormActions
- Removes ""experimental_"" prefix from useOptimistic, useFormStatus, and
useFormState",Andrew Clark,2023-10-04T18:51:36Z
1ec1a0ceb84de690e50dfd45fe476302ea954c59,"[fix] JSXElement identifiers now included in lambda capture deps 

--- 

`gatherCapturedDeps` previously did not visit JSXElements, so Forget did not 
read any local JSX identifiers as dependencies (in lambdas)",Mofei Zhang,2023-10-04T18:01:34Z
3f8831fb5c7e873993ed53a77189a22bcc7395d6,"[snap][QoL] Pragma for implicit debug mode 

--- 

Implements popular feature request ✨ per feedback from a majority of snap users. 

**Add `@debug` to the first line of your `testfilter.txt` file to opt into 
implicit debug mode**, in which debug logging is enabled anytime filter mode is 
on + only one fixture file is found. 

- live edits to testfilter.txt are reflected in watch mode, so you can add / 
remove `@debug` to `testfilter.txt` in the middle of a watch session 

- I personally don't use debug mode all the time (I often a single file filtered 
+ a lot of console log traces), but it should be easy to add `@debug` to the top 
of `testfilter.txt` and leave it there forever.",Mofei Zhang,2023-10-04T18:01:33Z
05d620521b4f628312020dec50eb5f36d085b32d,"[ez] missed TODO bailout for holey arrays 

--- 

Missed this when adding #2114 (only found when running thousands of fb 
components through forget and noticing that holey arrays still fail)",Mofei Zhang,2023-10-04T18:01:33Z
88d56b8e818d0c48eb6642303169c1fadeb99d59,"Warn if optimistic state is updated outside of a transition  (#27454)

### Based on #27453 

If optimistic state is updated, and there's no startTransition on the
stack, there are two likely scenarios.

One possibility is that the optimistic update is triggered by a regular
event handler (e.g. `onSubmit`) instead of an action. This is a mistake
and we will warn.

The other possibility is the optimistic update is inside an async
action, but after an `await`. In this case, we can make it ""just work""
by associating the optimistic update with the pending async action.

Technically it's possible that the optimistic update is unrelated to the
pending action, but we don't have a way of knowing this for sure because
browsers currently do not provide a way to track async scope. (The
AsyncContext proposal, if it lands, will solve this in the future.)
However, this is no different than the problem of unrelated transitions
being grouped together — it's not wrong per se, but it's not ideal.

Once AsyncContext starts landing in browsers, we will provide better
warnings in development for these cases.",Andrew Clark,2023-10-04T14:57:55Z
bd6891742c606a4b8d6ce53760218c6ab3784b38,"Remove unreferenced react-native-host-hooks from flow (#27457)

## Summary

These modules are no longer referenced in the React codebase. We should
remove them to limit the API surface area between React and React
Native.

## How did you test this change?

`yarn flow native && yarn flow fabric`",Pieter De Baets,2023-10-04T14:57:43Z
91dab8e19c984f81e7fc2b5139a5427c7f284821,[be] Dont copy default config values if key is present,Joe Savona,2023-10-03T23:57:00Z
b96dd26be17b571bf1aa06d51db1dd47545d8d1c,"[qol] Improve printing of ReactiveFunction 

This is a (hopefully) better approach at printing ReactiveFunction. The nesting 
wasn't always clear in the previous version, this should help. See playground to 
experiment.",Joe Savona,2023-10-03T23:56:59Z
870a378ebbb48b5572a6b2abf6b6a3d35a0d6c6f,[be] Rename EnvironmentConfig type after refactor,Joe Savona,2023-10-03T22:01:55Z
44a6a602a7e5f21184d44f8b16f6abfa61a960d4,"[be] Update feature defaults to reflect usage 

Updates feature flag default values to match the flags we have turned on 
internally for some time w/o issues.",Joe Savona,2023-10-03T21:49:58Z
34890556eca6751735344a8f41b911344668a67d,"[be] Improve feature flags setup 

Updates `Environment` to store all feature flags on a single `config` object. We 
now also define an object with all the default config values, and use this to 
populate defaults for any missing values in the user-provided config.",Joe Savona,2023-10-03T20:58:05Z
85c2b519b54269811002d26f4f711809ef68f123,"Fix: Optimistic update does not get reset (#27453)

I found a bug where if an optimistic update causes a component to
rerender, and there are no other state updates during that render, React
bails out without applying the update.

Whenever a hook detects a change, we must mark the component as dirty to
prevent a bailout. We check for changes by comparing the new state to
`hook.memoizedState`. However, when implementing optimistic state
rebasing, I incorrectly reset `hook.memoizedState` to the incoming base
state, even though I only needed to reset `hook.baseState`. This was
just a mistake on my part.

This wasn't caught by the existing tests because usually when the
optimistic state changes, there's also some other state that marks the
component as dirty in the same render.

I fixed the bug and added a regression test.",Andrew Clark,2023-10-03T19:01:40Z
9fc5e55b56fffdbbf5429121647fc386e8e16973,"[be] Access all features flags through Environment 

Most of our feature flags are accessed via the `Environment`, but a few cases 
have slipped in where we look at the `config` object directly. The problem is 
that the config object doesn't set defaults, so the check is effectively 
encoding what the default is. 

This PR moves to always accessing flags off of the environment, and adds a few 
flags that weren't yet defined there.",Joe Savona,2023-10-03T18:46:33Z
0f97ea4c71f5f8db72221405a422d49a2c2644a3,"[sprout] Make mutate incrementally attempt to add property 

Previously, we stored a global count variable that was updated every time we 
added a property to the `arg` object. This was added to prevent collisions, and 
make sure we do actually mutate the object. 

But the count value was shared by the forget compiled and uncompiled versions, 
so the same object mutated in either versions would result in having different 
properties leading to potential test failures. 

Instead, let's make count local and attempt to incrementally mutate the object 
with different keys.",Sathya Gunasekaran,2023-10-04T07:06:04Z
3aaf8be25cc4db8307eb3f6ce65a0bc4101d43e8,"[hir] Use a stable identity for undefined value 

InferReferenceEffects uses object identity to merge states, which breaks when we 
create a new object to model `undefined`. 

Two value objects representing `undefined` are not equal due to referential 
equality. 

Instead, let's use a singleton to represent `undefined` value.",Sathya Gunasekaran,2023-10-04T06:41:35Z
b7a14ecc8d931922b44e92496eedf9710ea3ce39,"Detect unknown hooks on React namespace 

Handles an edge-case from earlier in the stack. When looking up a property on a 
shape, if the property is defined we return it. But if it isn't defined, and the 
property name is a hook, we treat it like a default custom hook.",Joe Savona,2023-10-03T16:00:11Z
a2dd376820f01c3fd10a24ac694d19bb7eaaac62,"Drop useMemo/useCallback when called via React namespace 

Teaches `DropUseMemo` (which also handles useCallback) to also transform the 
methodcall case.",Joe Savona,2023-10-03T15:47:07Z
989eaafa434f55d00473d5c2159ac335c1f066f6,"Support hooks/methods on the React namespace 

Allows using hooks/methods off of the `React` namespace, for example 
`React.useState(sathya)`. Thanks to the previous PR we correctly handle things 
like validation of hooks called via propertyload syntax. The main change here is 
to teach the compiler about the `React` namespace. This is a bit of a hack since 
we treat it as a global, but we're transforming React code so this seems 
reasonable (?). 

There are a few additional touch-ups which I'll do in subsequent PRs to make 
review easier. For example, we need to teach our useMemo/useCallback flattening 
logic to also handle the case of `React.useMemo()` etc.",Joe Savona,2023-10-03T15:47:06Z
b3d5e926675b159e55054553f108667311a47f96,"Support/validate hooks called as methods 

Hooks can be called via method call syntax, eg `Foo.useBar(sathya)`. This PR 
teaches the compiler about this form of hooks for things like flattening scopes 
with hooks, validating conditional hooks, etc. 

Note that we still disallow calls on the React namespace, so things like 
`React.useState()` continue to error. That's the next PR in the stack!",Joe Savona,2023-10-03T15:47:05Z
216696dd889d258b6bfe0c380dd55454dece212e,"Allow context values to be mutated in callbacks 

Adds a new type for representing context values, which is transitive. So 
`useContext(a).b.c` also gets inferred as a context type. This allows us to 
refine our inference, and allow passing callbacks that modify context where a 
""frozen"" lambda is exepcted.",Joe Savona,2023-10-03T15:47:04Z
41cb3c722ee764ba5eeb4b4bf4556983cd5c57db,"Fix duplicate declaration from MergeConsecutiveScopes 

This is a distilled version of the duplicate declaration @mofeiZ and I saw when 
trying to sync latest Forget internally, plus a fix to avoid the duplicate 
instruction.",Joe Savona,2023-10-02T23:40:33Z
4779fa0f8101233a90e1959d80b000d54fa25436,"Wrap MergeConsecutiveScopes in a feature flag 

I should have done this originally, but figured if there were issues on the sync 
we could just do it then. Here we are!",Joe Savona,2023-10-02T22:46:04Z
e54e2e6ee4a74da6ead96a04e200014c926ecc19,"Distinguish JSXText/StringLiteral during codegen 

Fixes an issue with incorrect spacing where spaces were getting dropped, despite 
an explicit `{"" ""}` in the input. The issue is that we didn't maintain JSXText 
all the way through compilation. BuildHIR distinguishes string literals (such as 
the above, inside an expressioncontainer) from JSXText, and we propagate this 
distinction all the way through to codegen. 

But then codegen stores temporary values as `t.Expression` nodes, which means we 
have to convert the JSXText nodes to StringLiteral and we lose the distinction. 
This PR updates codegen to save temporaries as `t.Expression | t.JSXText` so 
that we can preserve the difference. In most places we just coerce the value to 
an expression, but the code for emitting JSX child items looks at the raw value 
so it can distinguish them. JSXText is emitted as-is, while StringLiterals are 
always wrapped in an expression container. 

See the new test case which demonstrates the expression being preserved.",Joe Savona,2023-10-02T21:58:05Z
e49a62c15d761ae7652e58e405a30dd2f8bd82be,"[hir] Do not memoize object methods separately 

Object methods must not be cached independently, so this PR flattens the 
reactive scope to prevent memoization. 

In the future, we can combine the FlattenScopesWithObjectMethods and 
FlattedScopesWithHooks passes by making them more modular. But this works for 
now.",Sathya Gunasekaran,2023-10-02T19:22:49Z
db69f95e4876ec3c24117f58d55cbb4f315b9fa7,"Fix checkbox and radio hydration (#27401)

Fixes whatever part of https://github.com/facebook/react/issues/26876
and https://github.com/vercel/next.js/issues/49499 that
https://github.com/facebook/react/pull/27394 didn't fix, probably.

From manual tests I believe this behavior brings us back to parity with
latest stable release (18.2.0). It's awkward that we keep the user's
state even for controlled inputs, so the DOM is out of sync with React
state.

Previously the .defaultChecked assignment done in updateInput() was
changing the actual checkedness because the dirty flag wasn't getting
set, meaning that hydrating could change which radio button is checked,
even in the absence of user interaction! Now we go back to always
detaching again.",Sophie Alpert,2023-10-02T18:38:44Z
4f4c52a3c8f9c8a2d8133c654841fee257c37249,"Fix controlled radios, maybe for real this time (#27443)

Fixes #26876 for real?

In 18.2.0 (last stable), we set .checked unconditionally:


https://github.com/facebook/react/blob/v18.2.0/packages/react-dom/src/client/ReactDOMInput.js#L129-L135

This is important because if we are updating two radios' checkedness
from (false, true) to (true, false), we need to make sure that
input2.checked is explicitly set to false, even though setting
`input1.checked = true` already unchecks input2.

I think this fix is not complete because there is no guarantee that all
the inputs rerender at the same time? Hence the TODO. But in practice
they usually would and I _think_ this is comparable to what we had
before.

Also treating function and symbol as false like we used to and like we
do on initial mount.",Sophie Alpert,2023-10-02T18:38:13Z
f8996476ff348b603eccf5eda49e570984845369,"[hir] Wire up object method lowering and codegen 

Object methods are lowered to functions and added to ObjectExpression. The 
codegen is interesting because we shouldn't emit code that lowers the object 
method into a separate statement and then stores it into an object expression. 

An shorthand object method has different semantics than an object method using 
the function syntax, so we need to preserve the shorthand object method syntax 
in the generated code. 

To do this, we don't immediately generate an AST node for the ObjectMethod but 
instead store it in a side table during codegen. Only when emitting code for an 
ObjectExpression, we lookup this side table and emit the object method inline in 
the body.",Sathya Gunasekaran,2023-10-02T18:26:00Z
843ec0702140f2d1e9407a38859abdf5b8dfe4e4,"[Flight] Taint APIs (#27445)

This lets a registered object or value be ""tainted"", which we block from
crossing the serialization boundary. It's only allowed to stay
in-memory.

This is an extra layer of protection against mistakes of transferring
data from a data access layer to a client. It doesn't provide perfect
protection, because it doesn't trace through derived values and
substrings. So it shouldn't be used as the only security layer but more
layers are better.

`taintObjectReference` is for specific object instances, not any nested
objects or values inside that object. It's useful to avoid specific
objects from getting passed as is. It ensures that you don't
accidentally leak values in a specific context. It can be for security
reasons like tokens, privacy reasons like personal data or performance
reasons like avoiding passing large objects over the wire.

It might be privacy violation to leak the age of a specific user, but
the number itself isn't blocked in any other context. As soon as the
value is extracted and passed specifically without the object, it can
therefore leak.

`taintUniqueValue` is useful for high entropy values such as hashes,
tokens or crypto keys that are very unique values. In that case it can
be useful to taint the actual primitive values themselves. These can be
encoded as a string, bigint or typed array. We don't currently check for
this value in a substring or inside other typed arrays.

Since values can be created from different sources they don't just
follow garbage collection. In this case an additional object must be
provided that defines the life time of this value for how long it should
be blocked. It can be `globalThis` for essentially forever, but that
risks leaking memory for ever when you're dealing with dynamic values
like reading a token from a database. So in that case the idea is that
you pass the object that might end up in cache.

A request is the only thing that is expected to do any work. The
principle is that you can derive values from out of a tainted
entry during a request. Including stashing it in a per request cache.
What you can't do is store a derived value in a global module level
cache. At least not without also tainting the object.",Sebastian Markbåge,2023-10-02T17:55:39Z
54baa7997c7b0bbd456460ead6e051655ea43790,"Add feature flag to use microtasks in the React Native Fabric renderer (#27364)

## Summary

This is part of an effort to align the event loop in React Native with
its behavior on the Web. In this case, we're going to test enabling
microtasks in React Native (Fabric) and we need React to schedule work
using microtasks if available there. This just adds a feature flag to
configure that behavior at runtime.

## How did you test this change?

* Reviewed the generated code, which looks ok.
* Did a manual sync of this PR to Meta's internal infra and tested it
with my changes to enable microtasks in RN/Hermes.",Rubén Norte,2023-10-02T16:12:35Z
a6ed60a8eb0626e5f84d0bdbb62c0b61219150d3,"[Fizz] Don't double replay elements when it's the postpone point (#27440)

The `resumeElement` function wasn't actually doing the correct thing
because it was resuming the element itself but what the child slot means
is that we're supposed to resume in the direct child of the element.
This is difficult to check for since it's all the possible branches that
the element can render into, so instead we just check this in
renderNode. It means the hottest path always checks the task which is
unfortunate.

And also, resuming using the correct nextSegmentId.

Fixes two bugs surfaced by this test.

---------

Co-authored-by: Josh Story <josh.c.story@gmail.com>",Sebastian Markbåge,2023-09-29T22:24:38Z
c7ba8c098889b6dc47fa9c807bbba3975a658584,"Enforce that the ""react-server"" build of ""react"" is used (#27436)

I do this by simply renaming the secret export name in the ""subset""
bundle and this renamed version is what the FlightServer uses.

This requires us to be more diligent about always using the correct
instance of ""react"" in our tests so there's a bunch of clean up for
that.",Sebastian Markbåge,2023-09-29T22:24:05Z
d900fadbf9017063fecb2641b7e99303b82a6f17,"Bugfix: Selective hydration triggers false update loop error  (#27439)

This adds a regression test and fix for a case where a sync update
triggers selective hydration, which then leads to a ""Maximum update
depth exceeded"" error, even though there was only a single update. This
happens when a single sync update flows into many sibling dehydrated
Suspense boundaries.

This fix is, if a commit was the result of selective hydration, we
should not increment the nested update count, because those renders
conceptually are not updates.

Ideally, they wouldn't even be in a separate commit — we should be able
to hydrate a tree and apply an update on top of it within the same
render phase. We could do this once we implement resumable context
stacks.",Andrew Clark,2023-09-29T18:29:35Z
13d0225c7d4715d98772a85d8deb26d244921287,"Pass lanes as argument to performSyncWorkOnRoot (#26763)

`performSyncWorkOnRoot` has only a single caller, and the caller already
computes the next lanes (`getNextLanes`) before deciding to call the
function. So we can pass them as an argument instead of computing the
lanes again.

There was already a TODO comment about this, but it was mostly perf
related. However, @rickhanlonii noticed a discrepancy where the inner
`getNextLanes` call was not being passed the current work-in- progress
lanes. Usually this shouldn't matter because there should never be
work-in-progress sync work; it should finish immediately. There is one
case I'm aware of where we exit the work loop without finishing a sync
render, which is selective hydration, but even then it should switch to
the sync hydration lane, not the normal sync lane. So something else is
probably going on. I suspect it might be related to the
`enableUnifiedSyncLane` experiment.

This is likely related to a regression found internally at Meta. We're
still working on getting a proper regression test; I can come up with a
contrived one but I'm not confident it'll be the same as the actual
regression until we get a better repro.",Andrew Clark,2023-09-28T20:29:32Z
62512bafc635e165eb0db26dc8efbed12d0d02fb,"Test fix: Add missing warning assertion (#27434)

Adds a missing test assertion for Server Context deprecation.

The PR that added this warning was based on an older revision than the
PR that added the test.",Andrew Clark,2023-09-28T16:21:11Z
5b5665342b34b12940874bf38d61ef7b2a784bbd,"Restore ""publish `react-server-dom-turbopack` to canary channels (#27427)"" (#27433)

Reverts facebook/react#27428 which restores facebook/react#27427

this will allow the publish script to publish
`react-server-dom-turbopack`",Josh Story,2023-09-28T16:13:49Z
1ebedbec2bec08e07c286ea6c3cff62737a0fd3a,"Add Server Context deprecation warning (#27424)

As agreed, we're removing Server Context. This was never official
documented.

We've found that it's not that useful in practice. Often the better
options are:

- Read things off the url or global scope like params or cookies.
- Use the module system for global dependency injection.
- Use `React.cache()` to dedupe multiple things instead of computing
once and passing down.

There are still legit use cases for Server Context but you have to be
very careful not to pass any large data, so in generally we recommend
against it anyway.

Yes, prop drilling is annoying but it's not impossible for the cases
this is needed. I would personally always pick it over Server Context
anyway.

Semantically, Server Context also blocks object deduping due to how it
plays out with Server Components that can't be deduped. This is much
more important feature.

Since it's already in canary along with the rest of RSC, we're adding a
warning for a few versions before removing completely to help migration.

---------

Co-authored-by: Josh Story <josh.c.story@gmail.com>",Sebastian Markbåge,2023-09-28T15:03:19Z
34de2986dfeddda31cb76d298c6d59b271d976fa,"Revert ""publish `react-server-dom-turbopack` to canary channels (#27427) (#27428)

Build fails because the package does not exist. I've added the package
to npm but we need the publishing account to be a collaborator. I'm
reverting until we get that sorted so we don't block canaries",Josh Story,2023-09-27T23:17:45Z
b61cfc01a50e184d427bd2b873d82e140e0989d9,"Support rest params 

Adds support for lowering rest element parameters to spreads. We eagerly create 
a temporary, similar to the approach for destructuring. In theory we could do 
something more optimal if you have a `...foo` (rest element where the argument 
is an Identifier) but it doesn't seem worth optimizing yet.",Joe Savona,2023-09-27T18:04:02Z
be7f98d5841d16dc553eeb58f372be9cb6e3a05a,"Scaffolding for rest params 

Updates HIR to represent rest element function parameters. We don't construct 
these yet.",Joe Savona,2023-09-27T18:04:02Z
687ad02e4352fc339e8ee0d028c8ddee309bd584,"Dont merge if scope output is not guaranteed to change 

As noted earlier in the stack and in chat, there are some cases where the output 
of a reactive scope is not guaranteed to change just because its inputs did. 
Consider a function `foo(x) { return x < 10 }`. If x was 0 and changes to 1, the 
result of `foo(x)` won't change. 

For code such as `[foo(x)]`, then, merging the scope for `t0 = foo(x)` and `t1 = 
[t0]` into a single `t1 = [foo(x)]` could cause us to invalidate `t1` 
unnecessarily. For example, x changing from 0 to 1 would allocate a new array of 
`[true]` even though the value didn't meaningfully change. This is the second 
category of merging, where we merge scopes A and B if the outputs of A are the 
inputs to B. 

With this change, we only do this type of merge if the outputs of the first 
scope are known to invalidate whenever the input does. We're conservative about 
this, and only consider function expressions, arrays, object, and jsx to always 
invalidate. Function calls _may_ invalidate, but as w the `foo()` example here 
they also may not. 

Note that this is purely about optimization and not correctness. We could always 
merge in this case (per earlier in the stack) but that might invalidate more 
often than we would like.",Joe Savona,2023-09-27T18:04:01Z
66841aa9ac59d4312f42e41cd8e39158765c5eae,"Prune declarations not used after merging 

This is the optimization mentioned in #2113. When we merge scopes, often the 
declarations from the first scope become unnecessary, since those values are 
only consumed by the subsequent, now-merged scope. There's no point emitting 
those values as outputs of the merged scope since no one can consume them. 

Thanks to the logic in #2116 we now know the last place each identifier is used. 
We use that again here, to prune declarations that aren't used past the end of 
the merged scope. This is a pretty dramatic win on cache slots used.",Joe Savona,2023-09-27T18:04:00Z
d1355179d7cedfd213d9eb5bf35395c69d5443ef,"Improved check for intermediate values for merged scopes 

We can't merge scopes if the intervening instructions produce values that are 
used later on. This PR improves the mechanism for detecting this case: first we 
build up a mapping of the last time (max instruction id) each identifier is 
used. Then when we're about to merge scopes we check if all the intervening 
lvalues are last used at or before the scope. If so that means it's safe to 
merge. 

I can't think of any edge cases that are problematic in the old behavior, but 
this version is more trivially correct and should allow us to extend to other 
types of instructions more easily.",Joe Savona,2023-09-27T18:04:00Z
959c6685be0368cb9c545984a1a56d4b70a5cd08,"Merge consecutive reactive scopes that invalidate together 

This is something we've wanted to do for a while, and which @sophiebits also 
brought up. The idea is to merge consecutive reactive scopes that will always 
invalidate together. There are two cases of this: 

* Both scopes have the exact same inputs 

* Or the inputs of the second scope are the outputs of the first 

In both these cases it's pure overhead to keep the scopes separate. In the first 
case where both scopes have the same inputs, merging allows us to check the 
inputs once instead of 2+ times. In the second case, we know that the second 
scope will invalidate when the first does so it's wasteful to recheck the 
outputs of the first scope for changes. 

This is already cutting down on memoization quite a bit in the fixtures. Note 
that there's an additional optimization we can do after merging the second 
category, which is to remove the first scope's declarations if they were only 
referenced by the second scope. I'll add that in a follow-up.",Joe Savona,2023-09-27T18:03:59Z
25fc9eaf8c780fb0dc7f6369871a4db8d87642b5,"publish `react-server-dom-turbopack` to canary channels (#27427)

When I added react-server-dom-turbopack I failed to mark the package as
stable so it did not get published with the canary release. This adds
the package to the stable set so it will be published correctly",Josh Story,2023-09-27T17:39:04Z
f81c0f1ed962036f25b87281b3c18cef3860ded8,"[Flight] Implement `react-server-dom-turbopack` (#27315)

stacked on #27314 

Turbopack requires a different module loading strategy than Webpack and
as such this PR implements a new package `react-server-dom-turbopack`
which largely follows the `react-server-dom-webpack` but is implemented
for this new bundler",Josh Story,2023-09-27T17:03:57Z
701ac2e57290f913502c6012c15e815f412f84b7,"[Flight][Float] Preinitialize module imports during SSR (#27314)

Currently when we SSR a Flight response we do not emit any resources for
module imports. This means that when the client hydrates it won't have
already loaded the necessary scripts to satisfy the Imports defined in
the Flight payload which will lead to a delay in hydration completing.

This change updates `react-server-dom-webpack` and
`react-server-dom-esm` to emit async script tags in the head when we
encounter a modules in the flight response.

To support this we need some additional server configuration. We need to
know the path prefix for chunk loading and whether the chunks will load
with CORS or not (and if so with what configuration).",Josh Story,2023-09-27T16:53:31Z
49eba01930e9e1f331b34967fca65d5a0ba62846,"[Fizz][Float] Refactor Resources  (#27400)

Refactors Resources to have a more compact and memory efficient
struture. Resources generally are just an Array of chunks. A resource is
flushed when it's chunks is length zero. A resource does not have any
other state.

Stylesheets and Style tags are different and have been modeled as a unit
as a StyleQueue. This object stores the style rules to flush as part of
style tags using precedence as well as all the stylesheets associated
with the precedence. Stylesheets still need to track state because it
affects how we issue boundary completion instructions. Additionally
stylesheets encode chunks lazily because we may never write them as html
if they are discovered late.

The preload props transfer is now maximally compact (only stores the
props we would ever actually adopt) and only stores props for
stylesheets and scripts because other preloads have no resource
counterpart to adopt props into. The ResumableState maps that track
which keys have been observed are being overloaded. Previously if a key
was found it meant that a resource already exists (either in this render
or in a prior prerender). Now we discriminate between null and object
values. If map value is null we can assume the resource exists but if it
is an object that represents a prior preload for that resource and the
resource must still be constructed.",Josh Story,2023-09-26T16:59:39Z
bff6be8eb1d77980c13f3e01be63cb813a377058,"[Fizz] Track postpones in fallbacks (#27421)

This fixes so that you can postpone in a fallback. This postpones the
parent boundary. I track the fallbacks in a separate replay node so that
when we resume, we can replay the fallback itself and finish the
fallback and then possibly later the content. By doing this we also
ensure we don't complete the parent too early since now it has a render
task on it.

There is one case that this surfaces that isn't limited to
prerender/resume but also render/hydrateRoot. I left todos in the tests
for this.

If you postpone in a fallback, and suspend in the content but eventually
don't postpone in the content then we should be able to just skip
postponing since the content rendered and we no longer need the
fallback. This is a bit of a weird edge case though since fallbacks are
supposed to be very minimal.

This happens because in both cases the fallback starts rendering early
as soon as the content suspends. This also ensures that the parent
doesn't complete early by increasing the blocking tasks. Unfortunately,
the fallback will irreversibly postpone its parent boundary as soon as
it hits a postpone.

When you suspend, the same thing happens but we typically deal with this
by doing a ""soft"" abort on the fallback since we don't need it anymore
which unblocks the parent boundary. We can't do that with postpone right
now though since it's considered a terminal state.

I think I'll just leave this as is for now since it's an edge case but
it's an annoying exception in the model. Makes me feel I haven't quite
nailed it just yet.",Sebastian Markbåge,2023-09-25T23:02:25Z
94d5b5b2bf5204ebd289a113989c0e2c51b626ef,"React DevTools 4.28.3 -> 4.28.4 (#27419)

* refactor[devtools/extension]: refactored messaging logic across
different parts of the extension ([hoxyq](https://github.com/hoxyq) in
[#27417](https://github.com/facebook/react/pull/27417))
* fix[devtools/extension]: added a workaround for proxy content script
injection in firefox ([hoxyq](https://github.com/hoxyq) in
[#27375](https://github.com/facebook/react/pull/27375))
* fix[devtools/useTransition]: don't check for dispatch property when
determining if hook is stateful ([hoxyq](https://github.com/hoxyq) in
[#27365](https://github.com/facebook/react/pull/27365))
* feat[devtools/extension]: show disclaimer when page doesnt run react
and refactor react polling logic ([hoxyq](https://github.com/hoxyq) in
[#27373](https://github.com/facebook/react/pull/27373))
* feat:-Added a delete all filters action and added title to the add
filter a… ([Biki-das](https://github.com/Biki-das) in
[#27332](https://github.com/facebook/react/pull/27332))
* fix[devtools/extension]: unregister dynamically injected content
scripts instead of filtering ([hoxyq](https://github.com/hoxyq) in
[#27369](https://github.com/facebook/react/pull/27369))
* refactor[devtools/extension]: more stable element updates polling to
avoid timed out errors ([hoxyq](https://github.com/hoxyq) in
[#27357](https://github.com/facebook/react/pull/27357))
* feat[devtools/extension]: add dark theme for popup
([rakleed](https://github.com/rakleed) in
[#27330](https://github.com/facebook/react/pull/27330))",Ruslan Lesiutin,2023-09-25T17:24:52Z
430e712bbd2e33cceb302b6e25fd7d8148b62019,"[Fizz] Restrict types of keyPath when it is known (#27418)

When we render an element, we provide the newly created keypath because
that means we're never at the root.",Sebastian Markbåge,2023-09-25T16:26:17Z
09285d5a7f1c08bec09f44cec3d0518a603597fc,"refactor[devtools/extension]: refactored messaging logic across different parts of the extension (#27417)

1.
https://github.com/bvaughn/react/commit/9fc04eaf3fb701cdc14f57d5aed48f3126af6c94#diff-2c5e1f5e80e74154e65b2813cf1c3638f85034530e99dae24809ab4ad70d0143
introduced a vulnerability: we listen to `'fetch-file-with-cache'` event
from `window` to fetch sources of the file, in which we want to parse
hook names. We send this event via `window`, which means any page can
also use this and manipulate the extension to perform some `fetch()`
calls. With these changes, instead of transporting message via `window`,
we have a distinct content script, which is responsible for fetching
sources. It is notified via `chrome.runtime.sendMessage` api, so it
can't be manipulated.
2. Consistent structure of messages `{source: string, payload: object}`
in different parts of the extension
3. Added some wrappers around `chrome.scripting.executeScript` API in
`packages/react-devtools-extensions/src/background/executeScript.js`,
which support custom flow for Firefox, to simulate support of
`ExecutionWorld.MAIN`.",Ruslan Lesiutin,2023-09-25T16:02:13Z
69728fde0ab2822ba468d9aaaa0c856de3f8547d,"[Flight] Dedupe suspense boundaries when it has already been found earlier (#27408)

If we track a postponed SuspenseBoundary parent that we have to replay
through before it has postponed and it postpones itself later, we need
to upgrade it to a postponed replay boundary instead of adding two.",Sebastian Markbåge,2023-09-23T16:33:48Z
7f6201889e8e628eeb53e05d8850ddffa3c2e74a,"Ship diffInCommitPhase (#27409)

Performance tests at Meta showed neutral results.",Sophie Alpert,2023-09-23T03:24:42Z
d9e00f795b77676fb14f2a3c6f421f48f73bec2a,"Stop flowing and then abort if a stream is cancelled (#27405)

We currently abort a stream either it's explicitly told to abort (e.g.
by an abortsignal). In this case we still finish writing what we have as
well as instructions for the client about what happened so it can
trigger fallback cases and log appropriately.

We also abort a request if the stream itself cancels. E.g. if you can't
write anymore. In this case we should not write anything to the outgoing
stream since it's supposed to be closed already now. However, we should
still abort the request so that more work isn't performed and so that we
can log the reason for it to the onError callback.

We should also not do any work after aborting.

There we need to stop the ""flow"" of bytes - so I call stopFlowing in the
cancel case before aborting.

The tests were testing this case but we had changed the implementation
to only start flowing at initial read (pull) instead of start like we
used to. As a result, it was no longer covering this case. We have to
call reader.read() in the tests to start the flow so that we need to
cancel it.

We also were missing a final assertion on the error logs and since we
were tracking them explicitly the extra error was silenced.",Sebastian Markbåge,2023-09-22T19:16:49Z
f9d75e32ba85b3c6a2a5d20fa27ba7e23d5529b2,"fix[devtools/extension]: added a workaround for proxy content script injection in firefox (#27375)

Changes:
1. [Firefox-only] For some reason, Firefox might try to inject
dynamically registered content script in pages like `about:blank`. I
couldn't find a way to change this behaviour, `about:` is not a valid
scheme, so we can't exclude it and `match_about_blank` flag is not
supported in `chrome.scripting.registerContentScripts`.
2. While navigating the history in Firefox, some content scripts might
not be re-injected and still be alive. To handle this, we are now
patching `window` with `__REACT_DEVTOOLS_PROXY_INJECTED__` flag, to make
sure that proxy is injected and only once. This flag is cleared on
`pagehide` event.",Ruslan Lesiutin,2023-09-22T18:36:03Z
9ba1bbd6568f170dfbc31e05d7ee88e3d9101523,"Upgrade to Flow 0.217.0 (#27407)

Just keeping React up to date.

[Changelog](https://github.com/facebook/flow/blob/main/Changelog.md)",Jan Kassens,2023-09-22T15:40:36Z
7b58600fb928dae935e85182c2142629af38dfe5,[tests] Repros for bugs and todos,Mofei Zhang,2023-09-22T02:38:40Z
b9275f65bc77824b4f938637a8c4f972a5e21e21,"[ez] Add TODO bailout on non-backward compatible holey arrays 

--- 

(pasted from comment) 

Instead of handling holey arrays, bail out with a TODO error. 

Older versions of babel seem to have inconsistent handling of holey arrays, at 
least when paired with HermesParser. When using these versions, we should bail 
out instead of throwing a Babel validation error. 

Issue: 

The babel ast definition for array elements changed from Array<PatternLike> to 
Array<PatternLike | null>. Older versions do not expect null in the ArrayPattern 
ast and will throw a validation error during Codegen. 

- HermesParser will parse [, b] into [NodePath<null>, NodePath<Identifier>] 

- Forget will try to preserve this holey array when we codegen back to js 

(e.g. we call a babel builder function arrayPattern([null, identifier])) 

- Babel will fail with `TypeError: Property elements[0] of ArrayPattern    
expected node to be of a type [""PatternLike""] but instead got null` 

PR that changed the AST definition: 


https://github.com/babel/babel/pull/10917/files#diff-19b555d2f3904c206af406540d9df200b1e16befedb83ff39ebfcbd876f7fa8aL52-R56 

[ez] Add TODO bailout on non-backward compatible holey arrays 

--- 

(pasted from comment) 

Instead of handling holey arrays, bail out with a TODO error. 

Older versions of babel seem to have inconsistent handling of holey arrays, at 
least when paired with HermesParser. When using these versions, we should bail 
out instead of throwing a Babel validation error. 

Issue: 

The babel ast definition for array elements changed from Array<PatternLike> to 
Array<PatternLike | null>. Older versions do not expect null in the ArrayPattern 
ast and will throw a validation error during Codegen. 

- HermesParser will parse [, b] into [NodePath<null>, NodePath<Identifier>] 

- Forget will try to preserve this holey array when we codegen back to js 

(e.g. we call a babel builder function arrayPattern([null, identifier])) 

- Babel will fail with `TypeError: Property elements[0] of ArrayPattern    
expected node to be of a type [""PatternLike""] but instead got null` 

PR that changed the AST definition: 


https://github.com/babel/babel/pull/10917/files#diff-19b555d2f3904c206af406540d9df200b1e16befedb83ff39ebfcbd876f7fa8aL52-R56",Mofei Zhang,2023-09-22T00:54:58Z
8b679e9138025c8e632b8b89d0bf3f4835bcfc18,"[ez] Fix prettier not formatting test fixtures in vscode 

This was super annoying. Turns out we had a top level directory for old projects 
called fixtures that shared a name with our fixture directories.",Lauren Tan,2023-09-21T21:04:25Z
1ce952e687b7d2031bf3d6aa69f917506bc2c2cb,"Support hoisting const variable declarations 

This PR adds preliminary support for hoisting const variable declarations. We do 
this via BuildHIR when lowering top level statements in a BlockStatement, by 
first checking which bindings are in scope to be hoistable if referenced before 
they are declared. The declarations are then hoisted to their earliest point 
where they are referenced (ie the top level statement just before) as context 
variables. 

Later, prior to codegen, we restore the original source by removing the 
DeclareContexts and transforming their associated StoreContexts back. 

Support for hoisting other kinds of declarations will come in future PRs!",Lauren Tan,2023-09-21T21:00:04Z
56b14477e902ac076018be2e7bf2ea3092ac9e7d,"fix[devtools/useTransition]: don't check for dispatch property when determining if hook is stateful (#27365)

https://github.com/facebook/react/pull/26740 introduced regression:
React DevTools doesn't record updates for `useTransition` hook. I can
add more details about things on DevTools side, if needed.

The root cause is
https://github.com/facebook/react/blob/491aec5d6113ce5bae7c10966bc38a4a8fc091a8/packages/react-reconciler/src/ReactFiberHooks.js#L2728-L2730

React DevTools expects dispatch to be present for stateful hooks that
can schedule an update -
https://github.com/facebook/react/blob/2eed1328478e8c923fcb4e6abf5efbd9e1233402/packages/react-devtools-shared/src/backend/renderer.js#L1422-L1428

With these changes, we still call dispatch in `startTransition`, but
also patch `queue` object with it, so that React DevTools can recognise
`useTransition` as stateful hook that can schedule update.

I am not sure if this is the right approach to fix this, can we
distinguish if `startTransition` was called from `useTransition` hook or
as a standalone function?",Ruslan Lesiutin,2023-09-21T20:26:20Z
68ac6dbcf8d58a67e94e9061395dd96a52d92377,Use MurmurHash3 when native hashing function is not available (#27399),Andrew Clark,2023-09-21T18:59:51Z
47fed6961f79e8c8388f5f11fe1a531b194bb4af,"[Fizz] Simplify ReplayNode data structure (#27395)

The key is that instead of storing different tags of resumable points,
we just store if a replay node has any resumable slots and if that's at
the root `number` or if it has resumable slots by index.

This is a simpler and more compact format because we don't have to
separate the three Resume forms.

This helps deal with Postpone in fallbacks because it doesn't just
double all the cases.",Sebastian Markbåge,2023-09-21T17:49:57Z
3c27178a2f2c74f14d90613028e3929e1f06d830,"Update tracked value after resetting radio group (#27394)

Fixes #26876, I think. Review each commit separately (all assertions
pass in main already, except the last assertInputTrackingIsClean in
""should control radio buttons"").

I'm actually a little confused on two things here:
* All the isCheckedDirty assertions are true. But I don't think we set
.checked unconditionally? So how does this happen?
* https://github.com/facebook/react/issues/26876#issuecomment-1611662862
claims that
https://github.com/facebook/react/compare/d962f35ca...1f248bdd7 contains
the faulty change, but it doesn't appear to change the restoration logic
that I've touched here. (One difference outside restoration is that
updateProperties did previously set `.checked` when `nextProp !==
lastProp` whereas the new logic in updateInput is to set it when
`node.checked !== !!checked`.)

But it seems to me like we need this call here anyway, and if it fixes
it then it fixes it? I think technically speaking we probably should do
all the updateInput() calls and then all the updateValueIfChanged()
calls—in particular I think if clicking A changed the checked radio
button from B to C then the code as I have it would be incorrect, but
that also seems unlikely so idk whether to care.

cc @zhengjitf @Luk-z who did some investigation on the original issue",Sophie Alpert,2023-09-21T04:57:09Z
2b3d5826836ac59f8446281976762d594e55d97e,"useFormState: Hash the component key path for more compact output (#27397)

To support MPA-style form submissions, useFormState sends down a key
that represents the identity of the hook on the page. It's based on the
key path of the component within the React tree; for deeply nested
hooks, this keypath can become very long. We can hash the key to make it
shorter.

Adds a method called createFastHash to the Stream Config interface.
We're not using this for security or obfuscation, only to generate a
more compact key without sacrificing too much collision resistance.

- In Node.js builds, createFastHash uses the built-in crypto module.
- In Bun builds, createFastHash uses Bun.hash. See:
https://bun.sh/docs/api/hashing#bun-hash

I have not yet implemented createFastHash in the Edge, Browser, or FB
(Hermes) stream configs because those environments do not have a
built-in hashing function that meets our requirements. (We can't use the
web standard `crypto` API because those methods are async, and yielding
to the main thread is too costly to be worth it for this particular use
case.) We'll likely use a pure JS implementation in those environments;
for now, they just return the original string without hashing it. I'll
address this in separate PRs.",Andrew Clark,2023-09-20T21:13:14Z
1f4936660dcaba2e5722013f0ad12d7369543a9f,"[Fizz] Allow passing a reason to `abortStream` (#26992)

## Summary

Currently `ReactFizzServer.abort` allows you to pass in the a `reason`
error, which then gets passed to the `onError` handler for each task
that ends up getting aborted. This adds in the ability to pass down that
same `reason` error to `ReactDOMServerFB.abortStream` as well.

## How did you test this change?

Added a test case to ReactDOMServerFB-test.internal.js",Karim Piyar Ali,2023-09-20T20:41:12Z
b775564d35d6fe9f9acead0f380bbc86bb6bdd2c,"[Fizz] Ensure Resumable State is Serializable (#27388)

Moves writing queues to renderState.

We shouldn't need the resource tracking's value. We just need to know if
that resource has already been emitted. We can use a Set for this. To
ensure that set is directly serializable we can just use a
dictionary-like object with no value.

See individual commits for special cases.",Sebastian Markbåge,2023-09-20T16:21:53Z
1b1dcb8a40d002edcbca483b1f9caa78087a878f,"feat[devtools/extension]: show disclaimer when page doesnt run react and refactor react polling logic (#27373)

Changes:
1. Refactored react polling logic, now each `.eval()` call is wrapped in
Promise, so we can chain them properly.
2. When user has browser DevTools opened and React DevTools panels were
mounted, user might navigate to the page, which doesn't have React
running. Previously, we would show just blank white page, now we will
show disclaimer. Disclaimer appears after 5 failed attempts to find
React. We will also show this disclaimer if it takes too long to load
the page, but once any React instance is loaded and registered, we will
update the panels.
3. Dark theme support for this disclaimer and popups in Firefox &
Chromium-based browsers

**Important**: this is only valid for case when React DevTools panels
were already created, like when user started debugging React app and
then switched to non-React page. If user starts to debug non-React app
(by opening browser DevTools for it), we will not create these panels,
just like before.

Q: ""Why do we poll to get information about react?""
A: To handle case when react is loaded after the page has been loaded,
some sandboxes for example.

| Before | After |
| --- | --- |
| <img width=""1840"" alt=""Screenshot 2023-09-14 at 15 37 37""
src=""https://github.com/facebook/react/assets/28902667/2e6ffb39-5698-461d-bfd6-be2defb41aad"">
| <img width=""1840"" alt=""Screenshot 2023-09-14 at 15 26 16""
src=""https://github.com/facebook/react/assets/28902667/1c8ad2b7-0955-41c5-b8cc-d0fdb03e13ca"">
|",Ruslan Lesiutin,2023-09-20T12:30:50Z
a3743b2e444d2198972b190a9d97c3edcf370414,"feat:-Added a delete all filters action and added title to the add filter a… (#27332)

### changes

1. A small action added to delete all filters, it can be useful to
delete when someone has a bunch of them rather than clicking on them
selectively.

2.There was no title on the `add filter` button so added the same


https://github.com/facebook/react/assets/72331432/af6c0725-05b6-4f46-b8c9-8079bd933a8e



review @hoxyq

---------

Co-authored-by: BIKI DAS <bikidas@BIKIs-MacBook-Pro.local>
Co-authored-by: Ruslan Lesiutin <rdlesyutin@gmail.com>",BIKI DAS,2023-09-20T09:26:44Z
36f979d9d46ffab8b7b77a9f57dd82928041e7e1,[patch] Repro and fix for duplicate import statements,Mofei Zhang,2023-09-19T22:34:14Z
2fa04d128e47abb27645a90873b08369e82c9ee7,"Transitive mixed type, take 2 

This is a redo of #1640 now that we've established the necessary infrastructure, 
most notably `Effect.ConditionallyMutate` and `noAlias` from #2103 earlier in 
this stack. We can now understand the semantics of hooks that return deeply 
readonly values composed of primitives, arrays, or objects such that any 
`.map()` or `.filter()` calls are guaranteed to be the corresponding array 
methods. That further allows us to refine, since we know that the lambdas passed 
to these calls can't alias, are conditionally mutable, etc. All in all this 
should let us memoize less in practice.",Joe Savona,2023-09-18T23:42:25Z
32569d21139958f93a4b87d7c0ae1c068dfc5b78,"noAlias support for CallExpr incl hooks 

Adds `noAlias` support for CallExpression, including hooks. Note that we treat 
hook arguments as escaping by default — ie we assume that they don't just flow 
into the hook return value, but are just outright escape points equivalent to a 
return. A `noAlias` annotation on a hook definition disables both: this will 
allow us to avoid memoizing the `graphql` tag arguments to `useFragment`, for 
example.",Joe Savona,2023-09-18T21:38:26Z
0810175bba99435e43181f2d38b0e82aa11a650f,"More tests for noAlias 

Adds another test for `noAlias` to show that if part of the receiver could 
escape that we still memoize it.",Joe Savona,2023-09-18T21:25:12Z
b02f5a5e0e88b4b48de88228e21ddf88ace2434e,"Dont compile code w useMemoCache 

Skips compilation of code that has a reference to `useMemoCache()`, as a 
last-resort to avoid double-compilation of code. This is meant as a quick way to 
unblock since we're still seeing some double compilation issues when syncing 
internally.",Joe Savona,2023-09-18T16:46:04Z
2807d781a08db8e9873687fccc25c0f12b4fb3d4,"[Fizz] Reuse rootSegmentID as the SuspenseBoundaryID (#27387)

Originally the intension was to have React assign an ID to a user
rendered DOM node inside a `fallback` while it was loading. If there
already were an explicit `id` defined on the DOM element we would reuse
that one instead. That's why this was a DOM Config option and not just
built in to Fizz.

This became tricky since it can load late and so we'd have to transfer
it down and detect it only once it finished rendering and if there is no
DOM element it doesn't work anyway. So instead, what we do in practice
is to always use a `<template>` tag with the ID. This has the downside
of an extra useless node and shifting child CSS selectors.

Maybe we'll get around to fixing this properly but it might not be worth
it.

This PR just gets rid of the SuspenseBoundaryID concept and instead we
just use the same ID number as the root segment ID of the boundary to
refer to the boundary to simplify the implementation.

This also solves the problem that SuspenseBoundaryID isn't currently
serializable (although that's easily fixable by itself if necessary).",Sebastian Markbåge,2023-09-18T15:56:47Z
925c66a6472a61e7174dabf6c697a9a320ebc170,"[Fizz] Client render the nearest child or parent suspense boundary if replay errors or is aborted (#27386)

Based on #27385.

When we error or abort during replay, that doesn't actually error the
component that errored because that has already rendered. The error only
affects any child that is not yet completed. Therefore the error kind of
gets thrown at the resumable point.

The resumable point might be a hole in the replay path, in which case
throwing there errors the parent boundary just the same as if the replay
component errored. If the hole is inside a deeper Suspense boundary
though, then it's that Suspense boundary that gets client rendered. I.e.
the child boundary. We can still finish any siblings.

In the shell all resumable points are inside a boundary since we must
have finished the shell. Therefore if you error in the root, we just
simply just turn all incomplete boundaries into client renders.",Sebastian Markbåge,2023-09-18T15:25:56Z
df061b396644bb7c27ea76bb27ae09784ce6444b,"[Fizz] Don't bail out of flushing if we still have pending root tasks (#27385)

The idea for this check is that we shouldn't flush anything before we
flush the shell. That may or may not hold true in future formats like
RN.

It is a problem for resuming because with resuming it's possible to have
root tasks that are used for resuming but the shell was already flushed
so we can have completed boundaries before the shell has fully resumed.
What matters is whether the parent has already flushed or not.

It's not technically necessary to bail early because there won't be
anything in partialBoundaries or completedBoundaries because nothing
gets added there unless the parent has already flushed.

It's not exactly slow to have to check the length of three arrays so
it's probably not a big deal.

Flush partials in an early preamble needs further consideration
regardless.",Sebastian Markbåge,2023-09-18T15:25:21Z
1879fbe644105de155eda887bfae733a5f5a80ca,"Option to not memoize non-aliased function parameters 

This has been nagging at me for a _long_ time: we unnecessarily memoize function 
callbacks passed to things like Array.prototype.map, even though we know these 
functions can't escape. This PR fixes this as follows: 

* Adds a `noAlias?: boolean` flag to builtin function signatures, defaulting to 
false if not specified. 

* Adds a feature flag, `enableNoAliasOptimizations`, to gate optimizations based 
on the value of that new flag. 

* When the feature is enabled, `PruneNonEscapingScopes` now looks up the 
signature of method calls, and avoids memoizing the arguments if the signatures 
specifies `noAlias: true`. 

* Annotates Array.prototype.map and Array.prototype.filter as `noAlias`. 

This does not mean we'll never memoize arguments to Array.prototype.map, it just 
means that the argument itself won't be considered as escaping. If the function 
still escapes by some other means it will get memoized: 

``` 

function Component(props) { 

const f = () => {}; // memoized! 

const x = [].map(f); // not from here.. 

return [x, f]; // but bc it escapes here 

} 

``` 

Note: this delivers some of the wins from #1640. That PR tried to do a bunch of 
things, part of which I already landed w the introduction of 
ConditionallyMutate, which allowed us to type Array.prototype.map. This PR 
further gives us the ability to understand functions that don't alias their 
params at all. The remaining bit from #1640 is the idea of understanding that 
key hooks such as `useFragment()` return transitively readonly, transitively 
array/object/primitive values, and any `.map()` or `.filter()` calls must be on 
arrays, allowing us to optimize them. Without that extra step, we'll still have 
to memoize a lot of `array.map()` lambdas just because we aren't sure that the 
receiver is an Array. But this PR helps with some cases, and lays the groundwork 
for the rest of that PR.",Joe Savona,2023-09-15T23:18:03Z
a5fc797db14c6e05d4d5c4dbb22a0dd70d41f5d5,"[Fizz] Replay Postponed Paths (#27379)

This forks Task into ReplayTask and RenderTask.

A RenderTask is the normal mode and it has a segment to write into.

A ReplayTask doesn't have a segment to write into because that has
already been written but instead it has a ReplayState which keeps track
of the next set of paths to follow. Once we hit a ""Resume"" node we
convert it into a RenderTask and continue rendering from there.

We can resume at either an Element position or a Slot position. An
Element pointing to a component doesn't mean we resume that component,
it means we resume in the child position directly below that component.
Slots are slots inside arrays.

Instead of statically forking most paths, I kept using the same path and
checked for the existence of a segment or replay state dynamically at
runtime.

However, there's still quite a bit of forking here like retryRenderTask
and retryReplayTask. Even in the new forks there's a lot of duplication
like resumeSuspenseBoundary, replaySuspenseBoundary and
renderSuspenseBoundary. There's opportunity to simplify this a bit.",Sebastian Markbåge,2023-09-15T19:24:04Z
bde7875f20b795ef97fec7778946ef245d4a84a9,fbt:param does not allow jsxfragment children,Joe Savona,2023-09-15T19:10:51Z
2d2f2af29bc3175530a158bc90189fc6f12f7855,"Restrict React DOM imports from Server Components (#27382)

Adds a separate entry point for the react-dom package when it's accessed
from a Server Component environment, using the ""react-server"" export
condition.

When you're inside a Server Component module, you won't be able to
import client-only APIs like useState. This applies to almost all React
DOM exports, except for Float ones like preload.",Andrew Clark,2023-09-15T18:53:19Z
dc4e63e2d53f91239fe85ac657666c95fde01578,"fbt:param does not allow jsxtext children 

Per the title, `<fbt:param>0</fbt:param>` is invalid FBT, you must wrap the text 
in an expression container. But that's not all, `fbt:param` can only have a 
single child, which means we have to strip out the text elements that occur from 
the whitespace in the source.",Joe Savona,2023-09-15T18:30:01Z
e5e71dfd59ab8629235dd5ad5bd5164c171471c1,"Memoize fbt children in same scope 

Fixes another special-case rule of fbt that i wasn't aware of: apparently 
`<fbt:param>` elements don't have to appear as direct children of `<fbt>`, they 
can be nested, and in this case they must appear as direct children of the fbt 
and not via an identifier indirection. This PR recursively extends the scope of 
FBT operands to make this work.",Joe Savona,2023-09-15T17:31:55Z
35fb6e05e133f261392997de5ec89dba44f99c2e,"[hir] Refactor function lowering from lowerFunctionExpression 

Split out the HIR generation bits from the lowering of the actual function. The 
lowering will get reused when we lower object methods.",Sathya Gunasekaran,2023-09-15T16:16:05Z
b26cc58070ed49a699b4d9d07e6f803245d8d8a1,"[hir] Add a ""type"" field to ObjectProperty 

This will be used to distinguish between a property and a method.",Sathya Gunasekaran,2023-09-15T16:16:05Z
88f65d44a7854753b1d2321a3903ee998776dfd7,[hir] Refactor out LoweredFunction from FunctionExpression,Sathya Gunasekaran,2023-09-15T16:16:04Z
3bda9f78c3ea8cfadf8cc3316f99a2ea9a5f38a7,"[hir] Introduce ObjectMethod type 

This will be used to store fields representing an object method.",Sathya Gunasekaran,2023-09-15T15:28:44Z
365a88a8aae2a801a4dc21a2910e02b03f4d2ca8,"[hir] Refactor out ObjectPropertyKey 

The type of ObjectProperty is specific to the key, not the ObjectProperty. In 
the future, we want to add a type to represent the value of the ObjectProperty. 

This PR moves out the fields related to the key of the ObjectProperty to a 
separate type.",Sathya Gunasekaran,2023-09-15T15:08:41Z
00e9888fb80719150363b3d011c53b890a4647af,"[ez][patch] Remove calls to NodePath.hasNode 

--- 

Recent commits added calls to `NodePath.hasNode`, which does not exist in babel 
v7.1.6 (internal). Forget is failing with this error. 

```js 

TypeError: handlerPath.hasNode is not a function 

at lowerStatement (.../babel-plugin-react-forget/HIR/BuildHIR.js:924:58) 

... 

```",Mofei Zhang,2023-09-15T12:55:33Z
c70e87f53501f329b25c4e78e2eafc0aab270292,Wrap JSXElement in expr container (for JSXAttribute),Joe Savona,2023-09-15T04:48:04Z
14630c06183626027eb10add313137445f515587,Dont compile functions w multiple args (infer mode),Joe Savona,2023-09-14T23:22:06Z
ca1217be6db94d6441bb68043a32ec7f3e2118c9,"Wrap JSXFragment in expr container for attributes 

@mofeiZ noticed that some configurations of prettier don't support JSXFragment 
appearing as a JSXAttribute value, in violation of the spec. Coincidentally I 
noticed that our internal build system also fails on this as i was trying to 
roll out on more surfaces. This PR makes sure we wrap fragments in an 
expressioncontainer if they appear as jsxattribute values.",Joe Savona,2023-09-14T23:22:05Z
88b1a069c04631009cf64e3ff18cc8f463626f38,"Add examples for phi type inference 

Adds test cases that would demonstrate different output if we were to update 
InferTypes to infer the types of phi identifiers when their operands have the 
same type. We currently do infer such types, but attach them to phi.type instead 
of phi.id.type, so the type doesn't effect inference. Fixing that would cause 
the output on these examples to change — however, per the discussion on #2079, 
we'd also incorrectly set the mutable ranges in some cases and cause incorrect 
compilation. 

I did a thorough review of InferReferenceEffects and can't figure out how to 
trigger the bug in our current implementation — the bug only kicks in when phi 
operands would be mutated as a store instead of a mutate, and that cannot happen 
given our currently imprecise types on phi identifiers.",Joe Savona,2023-09-14T18:56:09Z
f993f0c2a55e3fb106844c4d68362cef876d1156,"[pipeline] panicOnBailout -> panicThreshold; remove isDev logging 

--- 

Changed `panicOnBailout: boolean` to `panicThreshold`, which has the following 
options. Note that `ALL_ERRORS` corresponds to `panicOnBailout = true` and 
`CRITICAL_ERRORS` corresponds to `panicOnBailout = false`. `NONE` is a new 
option. 

```js 

export type PanicThresholdOptions = 

// Bail out of compilation on all errors by throwing an exception. 

| ""ALL_ERRORS"" 

// Bail out of compilation only on critical or unrecognized errors. 

// Instead, silently skip the erroring function. 

| ""CRITICAL_ERRORS"" 

// Never bail out of compilation. Instead, silently skip the erroring 

// function or file. 

| ""NONE""; 

``` 

Jest seems to run babel through a different pipeline than Metro and - 
(perhaps through its complex `require` interjection logic). When running jest 
tests, exceptions thrown by babel transforms will bubble up to the nearest 
exception boundary which is often the jest test itself. This may not be a useful 
signal to anyone running a jest test with Forget enabled, as the erroring code 
may be within Forget itself or a transitively required module. 

Another reason to immediately bailing out on critical errors is that we may want 
to record errors found in the rest of the file. 

--- 

I'm not convinced that this change makes sense. A counterargument is that any 
CriticalErrors *should* be reported as parse errors, regardless of the runtime 
mode. Anyhow, this would be useful long term for our static analysis scripts 
(e.g. collecting info on bailouts and compilation info e.g. # slots used for 
JSX) as we want to compile-as-much-as-possible in those.",Mofei Zhang,2023-09-14T19:00:43Z
b2230f62a38350f19cf02b4ee4b7f42e43610b9a,"[pipeline] Make logging more structured 

--- 

Add types for logged events, including a `CompileSuccess` event which can help 
us record successfully compiled Forget functions and their compilation details 
(e.g. # memoSlots used).",Mofei Zhang,2023-09-14T18:40:39Z
869466bb0b46d8ede59bbc61b91de294f783f576,"Revamp compilation modes 

We currently have multiple flags for targeting which functions to compile, but 
they are actually mutually exclusive. This PR consolidates to a single 
`compilationMode: 'annotation' | 'infer' | 'all'` flag: 

* Annotation compiles only functions that explicitly opt-in with ""use forget"" 

* Infer compiles explicitly opted-in functions (via ""use forget"") as well as any 
known/inferred components or hooks: 

* Component declarations 

* Component or hook-like functions (same rules as the ESLint plugin but with an 
extra check for whether it uses JSX or calls a hook) 

* All compiles all top-level functions. We should get rid of this in a follow-up 
and make tests use infer mode by default, and add explicit opt-ins where 
necessary. 

In all modes, ""use no forget"" always takes precedence and can be used to 
opt-out. The default mode is now ""infer"".",Mofei Zhang,2023-09-14T18:40:39Z
b3730eb496425f273683ccfcc18498676c1f16d9,[ez][be] Make early return explicit in compileAndInsert,Mofei Zhang,2023-09-14T18:40:38Z
d6dcad6a8beaeec0513a9851d1e0fe1181932360,"useFormState: Only emit markers if postback state is provided (#27374)

This is an optimization where useFormState will only emit extra comment
markers if a form state is passed at the root. If no state is passed, we
don't need to emit anything because none of the hooks will match.",Andrew Clark,2023-09-14T15:46:16Z
54c2f2a3469e296fba025cf444d0639c7bf8f39a,"fix[devtools/extension]: unregister dynamically injected content scripts instead of filtering (#27369)

Same as https://github.com/facebook/react/pull/26765.
Related bug report -
https://bugs.chromium.org/p/chromium/issues/detail?id=1393762.

This was changed in https://github.com/facebook/react/pull/27215, when I
have refactored background logic in the extension. I've missed this
case, because the extension was working in incognito mode.

Turns out, it stops working after the first reload, and it stops only in
incognito mode, so I am rolling out back the previous workaround.

Tested on Chrome that it fixes the extension in incognito mode and that
it doesn't affect default mode.",Ruslan Lesiutin,2023-09-14T14:21:28Z
caa716d50bdeef3a1ac5e3e0cfcc14f4d91f2028,"useFormState: MPA submissions to a different page (#27372)

The permalink option of useFormState controls which page the form is
submitted to during an MPA form submission (i.e. a submission that
happens before hydration, or when JS is disabled). If the same
useFormState appears on the resulting page, and the permalink option
matches, it should receive the form state from the submission despite
the fact that the keypaths do not match.

So the logic for whether a form state instance is considered a match is:
- Both instances must be passed the same action signature
- If a permalink is provided, the permalinks must match.
- If a permalink is not provided, the keypaths must match.

Currently, if there are multiple matching useFormStates, they will all
match and receive the form state. We should probably only match the
first one, and/or warn when this happens. I've left this as a TODO for
now, pending further discussion.",Andrew Clark,2023-09-14T05:07:00Z
a6e4791b11816374d015eb4531a82e6cf209c7f2,"[Fizz] Fix root segment IDs (#27371)

Typically we assign IDs lazily when flushing to minimize the ids we have
to assign and we try to maximize inlining.

When we prerender we could always flush into a buffer before returning
but that's not actually what we do right now. We complete rendering
before returning but we don't actually run the flush path until someone
reads the resulting stream. We assign IDs eagerly when something
postpone so that we can refer to those ids in the holes without flushing
first.

This leads to some interesting conditions that needs to consider this.

This PR also deals with rootSegmentId which is the ID of the segment
that contains the body of a Suspense boundary. The boundary needs to
know this in addition to the Suspense Boundary's ID to know how to
inject the root segment into the boundary.

Why is the suspense boundary ID and the rootSegmentID just not the same
ID? Why don't segments and suspense boundary not share ID namespace?
That's a good question and I don't really remember. It might not be a
good reason and maybe they should just be the same.",Sebastian Markbåge,2023-09-14T03:18:03Z
95c9554bc72813b0ee2b028774bb7cf0482887ba,"useFormState: Compare action signatures when reusing form state (#27370)

During an MPA form submission, useFormState should only reuse the form
state if same action is passed both times. (We also compare the key
paths.)

We compare the identity of the inner closure function, disregarding the
value of the bound arguments. That way you can pass an inline Server
Action closure:

```js
function FormContainer({maxLength}) {
  function submitAction(prevState, formData) {
    'use server'
    if (formData.get('field').length > maxLength) {
      return { errorMsg: 'Too many characters' };
    }
    // ...
  }
  return <Form submitAction={submitAction} />
}
```",Andrew Clark,2023-09-14T00:46:22Z
612b2b6601abb844248c384d1e288bb824b180b7,"useFormState: Reuse state from previous form submission (#27321)

If a Server Action is passed to useFormState, the action may be
submitted before it has hydrated. This will trigger a full page
(MPA-style) navigation. We can transfer the form state to the next page
by comparing the key path of the hook instance.

`ReactServerDOMServer.decodeFormState` is used by the server to extract
the form state from the submitted action. This value can then be passed
as an option when rendering the new page. It must be passed during both
SSR and hydration.

```js
const boundAction = await decodeAction(formData, serverManifest);
const result = await boundAction();
const formState = decodeFormState(result, formData, serverManifest);

// SSR
const response = createFromReadableStream(<App />);
const ssrStream = await renderToReadableStream(response, { formState })

// Hydration
hydrateRoot(container, <App />, { formState });
```

If the `formState` option is omitted, then the state won't be
transferred to the next page. However, it must be passed in both places,
or in neither; misconfiguring will result in a hydration mismatch.

(The `formState` option is currently prefixed with `experimental_`)",Andrew Clark,2023-09-13T22:30:40Z
88186db6904869fadca719739ae6d51c2634efe8,[hir] Make hoisting a TODO bailout,Sathya Gunasekaran,2023-09-13T16:58:58Z
e5205658f40ad181279857dbb66e36b8ebcd8c0e,"[Fizz] Various smaller refactors (#27368)

Back ported from a larger PR.",Sebastian Markbåge,2023-09-13T04:16:44Z
69be472c11231056d297a7b73dd0b121905606d3,"Fix: Initialize childIndex in Task constructor (#27367)

This field was not being initialized. Although the property is part of
the Flow type, the type error wasn't caught because the constructor
itself is not covered by Flow, which is unfortunate. (I assume this is
related to the dev-only componentStack property.)",Andrew Clark,2023-09-13T02:17:03Z
d07921eeda62613bfcf52ecdb66322db26393567,"Don't modify keyPath until right before recursive renderNode call (#27366)

Currently, if a component suspends, the keyPath has already been
modified to include the identity of the component itself; the path is
set before the component body is called (akin to the begin phase in
Fiber). An accidental consequence is that when the promise resolves and
component is retried, the identity gets appended to the keyPath again,
leading to a duplicate node in the path.

To address this, we should only modify contexts after any code that may
suspend. For maximum safety, this should occur as late as possible:
right before the recursive renderNode call, before the children are
rendered.

I did not add a test yet because there's no feature that currently
observes it, but I do have tests in my other WIP PR for useFormState:
#27321",Andrew Clark,2023-09-13T01:27:23Z
7a3cb8f9cf43591afc74722ece9e3216ccc98128,"Track the key path difference between right before the first array (#27360)

There's a subtle difference if you suspend before the first array or
after. In Fiber, we don't deal with this because we just suspend the
parent and replay it if lazy() or Usable are used in its child slots. In
Fizz we try to optimize this a bit more and enable resuming inside the
component.

Semantically, it's different if you suspend/postpone before the first
child array or inside that child array. Because when you resume the
inner result might be another array and either that's part of the parent
path or part of the inner slot.

There might be more clever way of structuring this but I just use -1 to
indicate that we're not yet inside the array and is in the root child
position. If that renders an element, then that's just the same as the 0
slot.

We need to also encode this in the resuming. I called that resuming the
element or resuming the slot.",Sebastian Markbåge,2023-09-12T16:30:42Z
bbc8530ed7a67859583a7c990ac51cd39c7746e5,"[Float] Refactor public interface and internal HostDispatcher implementation (#27361)

When Float was first developed the internal implementation and external
interface were the same. This is problematic for a few reasons. One, the
public interface is typed but it is also untrusted and we should not
assume that it is actually respected. Two, the internal implementations
can get called from places other than the the public interface and
having to construct an options argument that ends up being destructured
to process the request is computationally wasteful and may limit JIT
optimizations to some degree. Lastly, the wire format was not as
compressed as it could be and it was untyped.

This refactor aims to address that by separating the public interface
from the internal implementations so we can solve these challenges and
also make it easier to change Float in the future

* The internal dispatcher method preinit is now preinitStyle and
preinitScript.
* The internal dispatcher method preinitModule is now
preinitModuleScript in anticipation of different implementations for
other module types in the future.
* The wire format is explicitly typed and only includes options if they
are actually used omitting undefined and nulls.
* Some function arguments are not options even if they are optional. For
instance precedence can be null/undefined because we deafult it to
'default' however we don't cosnider this an option because it is not
something we transparently apply as props to the underlying instance.
* Fixes a problem with keying images in flight where srcset and sizes
were not being taken into account.
* Moves argument validation into the ReactDOMFloat file where it is
shared with all runtimes that expose these methods
* Fixes crossOrigin serialization to use empty string except when
'use-credentials'",Josh Story,2023-09-12T15:09:10Z
2eed1328478e8c923fcb4e6abf5efbd9e1233402,"refactor[devtools/extension]: more stable element updates polling to avoid timed out errors (#27357)

Some context:
- When user selects an element in tree inspector, we display current
state of the component. In order to display really current state, we
start polling the backend to get available updates for the element.

Previously:
- Straight-forward sending an event to get element updates each second.
Potential race condition is not handled in any form.
- If user navigates from the page, timeout wouldn't be cleared and we
would potentially throw ""Timed out ..."" error.
- Bridge disconnection is not handled in any form, if it was shut down,
we could spam with ""Timed out ..."" errors.

With these changes:
- Requests are now chained, so there can be a single request at a time.
- Handling both navigation and shut down events.

This should reduce the number of ""Timed out ..."" errors that we see in
our logs for the extension. Other surfaces will also benefit from it,
but not to the full extent, as long as they utilize
""resumeElementPolling"" and ""pauseElementPolling"" events.

Tested this on Chrome, running React DevTools on multiple tabs,
explicitly checked the case when service worker is in idle state and we
return back to the tab.",Ruslan Lesiutin,2023-09-12T14:05:39Z
d2f46b14370df69360de8afc36639fb5fd947e8b,Delete now-unused mermaid visualization,Joe Savona,2023-09-11T23:58:22Z
ade3235ca3053f8786579050dc4dffa48d10233f,"ForInStatement: specialize inference/types 

Replaces the use of `NextIterableOf` in for-in with a new `NextPropertyOf` 
instruction. The key distinction is `for-of` invokes an arbitrary iterator, 
which means a) each iteration may mutate the collection being iterated and b) 
the returned value may be mutable. However, `for-in` invokes a language-level 
mechanism to iterate: simply iterating alone _cannot_ modify the collection, and 
the returned value is known to be a primitive.",Joe Savona,2023-09-11T23:54:05Z
bb1d8d166799eb97892be6c7826179270ba283d0,"Encode lazy Node slots properly in key path and resumable paths (#27359)

It's possible to postpone a specific node and not using a wrapper
component. Therefore we encode the resumable slot as the index slot.
When it's a plain client component that postpones, it's encoded as the
child slot inside that component which is the one that's postponed
rather than the component itself.

Since it's possible for a child slot to suspend (e.g. React.lazy's
microtask in this case) retryTask might need to keep its index around
when it resolves.",Sebastian Markbåge,2023-09-11T23:25:24Z
51497c8c59d008983a40609158f75dc793093730,"Basic ForInStatement support 

First pass of ForInStatement support. This mostly just copies our handling of 
ForOfStatement, but the next PR updates to use a different instruction instead 
of `NextIterableOf`.",Joe Savona,2023-09-11T22:56:49Z
a4aceafc63a4a54b507ab60d530b25d9ff189024,"Fix: Skip hidden inputs before text instance (#27358)

Found a hydration bug that happens when you pass a Server Action to
`formAction` and the next node is a text instance.

The HTML generated by Fizz is something like this:

```html
<button name=""$ACTION_REF_5"" formAction="""" formEncType=""multipart/form-data"" formMethod=""POST"">
  <input type=""hidden"" name=""$ACTION_5:0"" value=""...""/>
  <input type=""hidden"" name=""$ACTION_5:1"" value=""...""/>
  <input type=""hidden"" name=""$ACTION_KEY"" value=""...""/>Count: <!-- -->0
</button>
```

Fiber is supposed to skip over the extra hidden inputs, but it doesn't
handle this correctly if the next expected node isn't a host instance.
In this case, it's a text instance.

Not sure if the proper fix is to change the HTML that is generated, or
to change the hydration logic, but in this PR I've done the latter.",Andrew Clark,2023-09-11T22:22:37Z
911c9884536afe0333c3d88d93a591e14efe88ba,"Support ObjectPattern within RestElement 

Supports ObjectPattern within RestElement, the `...{y}` in `const [x, ...{y}] = 
z`",Joe Savona,2023-09-11T20:03:02Z
1ec445d8f93de0f0577a55707a12b86f0b9d6d05,"Support reordering call expressions 

Supports call expressions if the callee and args are themselves reorderable. As 
part of this I realized that we currently allow identifier references to be 
reordered. To be safe, this PR updates the logic to continue consider 
identifiers as reorderable, but considers an arrow function to be not 
reorderable if it contains a local variable reference. We can likely relax that 
rule, but this quickly unblocks the next experiment.",Joe Savona,2023-09-11T19:49:47Z
b1f7ebfd47d3ecc1c9561a43c3c68d129b240484,"Reodering of unary and arrow function expressions 

Supports reordering of unary and arrow function expressions: 

* Supports a trivially safe subset of unary operators, rejects things like 
`void` just because we don't need it yet. 

* Supports arrow function expressions that are either an empty block statement 
or a single expression which is itself reorderable.",Joe Savona,2023-09-11T19:49:47Z
627b7abd62eb27f70af3934ca45b858103d4f30d,"feat[devtools/extension]: add dark theme for popup (#27330)

## Summary

If the system/browser uses a dark theme, then the extension popup still
remains with a light background. And so that the eyes do not hurt in a
dark room, you need a dark theme.

## How did you test this change?

Make sure the dark theme is enabled on your system/browser.

**Before:**

![Screenshot 2023-09-02 at 22 20
56](https://github.com/facebook/react/assets/19418601/f7166ea7-f562-4d11-8851-be08fa9629a7)

**After:**

![Screenshot 2023-09-02 at 22 21
30](https://github.com/facebook/react/assets/19418601/e51ecd5f-3e71-4193-83ff-a548bce76bd4)",Pavel,2023-09-11T13:02:54Z
de2b684bc5864ff8792a26d0c044731e6586ce13,"TryStatement: handle edge case control flows 

Adds handling for some cases where the handler is unreachable (or is provably 
unreachable after analysis & optimization), where the try/catch can be flattened 
away: 

* The try block is empty. Nothing can throw, so the handler is unreachable. 

* The try block will always return. It can't return anything interesting (ie the 
result of a function call or variable load) since those could throw, but a try 
block that always return a primitive means the handler is unreachable. 

* The same, except where we only determine that the try block always returns via 
constant propagation.",Joe Savona,2023-09-08T20:54:45Z
c8cebdd946c5514d6ff35a5b6fc5660f826cc998,TryStatement: handle mutation of try values via catch param,Joe Savona,2023-09-08T18:03:55Z
edd9c52142609b8eeaa81b64f9505ebf068f96a5,"Sprout tests to double-check our destructuring 

I wanted to double-check the semantics of when default values are used, so i 
wrote out some fixtures with sprout enabled.",Joe Savona,2023-09-08T00:17:03Z
e8d130bd1dcb093c28ff8197278e49cf9a671419,Support type casts and conditionals as default values,Joe Savona,2023-09-08T00:07:34Z
0052f2e591622fec493752b37af54e82a5752dac,"TryStatement: enable sprout on new tests 

Enables sprout for all the new try/catch fixtures in this stack. I added new 
helpers and tried to make sure we're testing the most interesting codepath of 
each fixture. This is where property testing would help, since we could test 
multiple paths with a single block of code, but for now this seems like a good 
balance of coverage.",Joe Savona,2023-09-07T23:50:24Z
ee77d91ca2a3862cd60b8f59391a9a13241607ea,"TryStatement: handle catch clause params 

It's possible that the value thrown during a `try` block actually is a reference 
to some value defined outside the scope of the try block. If the catch clause 
param is also mutated, that means the mutable range of the variable would have 
to include the entire try/catch. 

We handle this by emitting a DeclareLocal temporary for the catch param prior to 
the try/catch. If it is modified during the catch block, that will extend its 
mutable range to cover the full try/catch. If any values are mutated inside the 
try, their range will also (naturally) extend around the full try/catch block. 
These ranges will overlap and be merged, ensuring that we capture the 
possibility that the value is mutated via the catch param. See unit test.",Joe Savona,2023-09-07T23:32:55Z
e3622ee41383c84982dd9ffcb79efe24e0a0d166,"TryStatement: disallow throw inside try/catch 

Modeling `throw` inside of a try/catch is awkward because it's basically a 
variable reassignment and a goto together. Thankfully that is an antipattern — 
using exceptions instead of control-flow — so it seems pretty reasonable to just 
put a todo here and leave it.",Joe Savona,2023-09-07T23:32:54Z
ff0b05848b514e347d93fe8145bae24a4d21dc40,"TryStatement: optimization pass, handle early returns 

Adds an optimization pass to prune unnecessary maybe-throw terminals, when the 
block can be proven not to throw. For now we're _very_ conservative about what 
instructions we consider not to throw. There isn't too much of an advantage in 
pruning further, either. 

This PR also updates BuildReactiveFunction to handle the possibility of early 
returns within try or catch blocks, making sure we don't hit the invariant of 
emitting the same block twice.",Joe Savona,2023-09-07T23:32:53Z
936b96b24f0225fa4e6359f79a9cf947887386ab,"TryStatement: partial lowering 

Implements the core lowering logic for try/catch: 

* Inside of the `try` block, we use the new HIRBuilder mode to wrap every 
instruction in a separate basic block with a maybe-throw terminal 

* We emit a 'try' terminal for the try/catch itself 

For basic examples this already works correctly. But we don't handle catch 
clause params yet.",Joe Savona,2023-09-07T23:32:53Z
41f0e9dae3b81396dc29a4735b355ea318cc5772,"[Float][Fizz] include `preloadModule` and `preinitModule` on `react-dom/server-rendering-stub` (#27347)

When implementing `preloadModule` and `preinitModule` these methods were
not exposed on the server rendering stub when they should have been.
This PR corrects that omission.",Josh Story,2023-09-07T21:48:22Z
7f5bac171eaef4a9576d25417916a2b014016625,"TryStatement: try terminal scaffolding 

This PR adds the other piece, a 'try' terminal which represents try/catch and 
the possibility of fallthrough to the code afterwards. For now `finally` is 
unsupported. We don't yet produce these terminals, see later in the stack.",Joe Savona,2023-09-07T21:22:33Z
0977115440b53ca505a62e793ab3ec44355f69aa,"TryStatement: maybe-throw terminal for per-instruction throw points 

Adds a ""maybe-throw"" terminal which represents the possibility that the block 
may or may not throw, and can either continue forward or exit to an exception 
handler (`catch`). Also updates HIRBuilder to track the current mode, and when 
inside a try block to wrap every instruction inside a basic block that ends in a 
maybe-throw. 

So far this code isn't used yet, so doesn't affect output.",Joe Savona,2023-09-07T21:22:28Z
8b26f07a883bb341c20283c0099bf5ee6f87bd1f,"useFormState: Emit comment to mark whether state matches (#27307)

A planned feature of useFormState is that if the page load is the result
of an MPA-style form submission — i.e. a form was submitted before it
was hydrated, using Server Actions — the state of the hook should
transfer to the next page.

I haven't implemented that part yet, but as a prerequisite, we need some
way for Fizz to indicate whether a useFormState hook was rendered using
the ""postback"" state. That way we can do all state matching logic on the
server without having to replicate it on the client, too.

The approach here is to emit a comment node for each useFormState hook.
We use one of two comment types: `<!--F-->` for a normal useFormState
hook, and `<!--F!-->` for a hook that was rendered using the postback
state. React will read these markers during hydration. This is similar
to how we encode Suspense boundaries.

Again, the actual matching algorithm is not yet implemented — for now,
the ""not matching"" marker is always emitted.

We can optimize this further by not emitting any markers for a render
that is not the result of a form postback, which I'll do in subsequent
PRs.",Andrew Clark,2023-09-07T20:05:44Z
3566de59e2046e7e8478462375aaa71716f1095b,"[Fizz][Float] `<img>` inside `<picture>` should not preload during SSR (#27346)

img tags inside picture tags should not automatically be preloaded
because usually the img is a fallback. We will consider a more
comprehensive way of preloading picture tags which may require a
technique like using an inline script to construct the image in the
browser but for now we simply omit the preloads to avoid harming load
times by loading fallbacks.",Josh Story,2023-09-07T19:48:40Z
20203cd889328ea3792febd2bfda77f2cfb881d1,[hir] Remove unnecessary check for place kind,Sathya Gunasekaran,2023-09-07T12:57:02Z
603d2179a879e5b001086e0c38ef79dd3986b8ef,[hir] Pretty print object property keys,Sathya Gunasekaran,2023-09-07T12:56:59Z
f2027b9a4dd3e906e9853cd1d32ee1e008290f19,"[hir] Add support for string literal property keys 

Mostly reuses existing analysis of an identifier property key. 

Adds a new type field to ObjectProperty to propogate the type of the key. This 
is used in codegen to correctly emit a string literal or an identifier.",Sathya Gunasekaran,2023-09-07T12:56:56Z
953cb02f6de2a9f3eb52456b263e11f839584bc6,"[Fizz] Split createRequest into createRequest, createPrerenderRequest and resumeRequest (#27342)

Just moving some internal code around again.

I originally encoded what type of work using startRender vs
startPrerender. I had intended to do more forking of the work loop but
we've decided not to go with that strategy. It also turns out that
forking when we start working is actually too late because of a subtle
thing where you can call abort before work begins. Therefore it's
important that starting the work comes later.",Sebastian Markbåge,2023-09-07T04:18:30Z
ee7f9c9351f8902e07ceacf4234ef75e7e4ecd73,"useId: Remove unnecessary try/finally blocks (#27340)

To generate IDs for useId, we modify a context variable whenever
multiple siblings are rendered, or when a component includes a useId
hook.

When this happens, we must ensure that the context is reset properly on
unwind if something errors or suspends. When I originally implemented
this, I did this by wrapping the child's rendering with a try/finally
block. But a better way to do this is by using the non-destructive
renderNode path instead of renderNodeDestructive.",Andrew Clark,2023-09-06T20:30:29Z
59504e1cb49733d00e4d1613cfd712c5d29c7bfb,"[hir] Traverse function to capture deps, not just body node 

Technically there is a body node created for implicit return expression in a 
arrow function, so the existing logic should've worked fine. But there seems to 
be a Babel bug, so let's work around it by traversing the function. 

Added a test case that captures a dep as a param -- this is currently 
unsupported  and also something that would've been ignored before this PR. Added 
a failing test to make sure we think about this case when we add support for 
default params.",Sathya Gunasekaran,2023-09-06T13:58:04Z
a93aa8f3228c32b0a03a8efd2336e15c2a1e10a2,"[hir] Encapsulate pipeline from rest of Forget

Future passes will lead to inconsistent state between passes and will require
passes to run in a specific order, so let's make sure no one will misconfigure
the passes.",Sathya Gunasekaran,2023-09-06T13:12:11Z
31f0f426e189cb53495db12b05a2a0299eac380a,"[hoisting] Add failing tests 

The current plan is to add support for hoisting function declarations, let/const 
declarations, but not var yet",Lauren Tan,2023-09-05T21:04:03Z
ef51c92c8aaf1586713107da1b501a91f707773e,"first rendering test

Updates the rendering code and gets a first unit test working with a fully
static component (written by hand rather than compiled).",Joe Savona,2023-09-05T21:03:22Z
b9be4537c2459f8fc0312b796570003620bc8600,"[Flight] provide property descriptors for client references (#27328)

Client reference proxy should implement getOwnPropertyDescriptor. One
practical place where this shows up is when consuming CJS module.exports
in ESM modules. Node creates named exports it statically infers from the
underlying source but it only sets the named export if the CJS exports
hasOwnProperty. This trap will allow the proxy to respond affirmatively.

I did not add unit tests because contriving the ESM <-> CJS scenario in
Jest is challenging. I did add new components to the flight fixture
which demonstrate that the named exports are properly constructed with
the client reference whereas they were not before.",Josh Story,2023-09-05T20:45:16Z
2c2bdd0ffe54df60201ee93b29de5cb7b93ff029,"[Fizz] Move /static build into /server builds (#27327)

This joins the static (prerender) builds with the server builds but
doesn't change the public entry points.

The idea of two separate bundles is that we'd have a specialized build
for Fizz just for the prerender that could do a lot more. However, in
practice the code is implemented with a dynamic check so it's in both.
It's also not a lot of code.

At the same time if you do have a set up that includes both the
prerender and the render in the same build output, this just doubles the
server bundle size for no reason.

So we might as well merge them into one build. However, I don't expose
the `prerender` from `/server`. Instead it's just exposed from the
public `/static` entry point. This leaves us with the option to go back
to separate builds later if it diverges more in the future.",Sebastian Markbåge,2023-09-05T19:55:20Z
3cc8a9347bd540ac68acfb181fbc7fba7c371648,"[Fizz] Move formatContext tracking back to the task (#27325)

In https://github.com/facebook/react/pull/21113 I moved this over to the
segment from the task. This partially reverts this two use two fields
instead. I was just trying to micro-optimize by reusing a single field.

This is really conceptually two different values. Task is keeping track
of the working state of the currently executing context.

The segment just needs to keep track of which parent context it was
created in so that it can be wrapped correctly when a segment is
written. We just happened to rely on the working state returning to the
top before completing.

The main motivation is that there is no `segment` for replaying.",Sebastian Markbåge,2023-09-05T19:55:07Z
9d6170ab98cdd811ccc7cdf1b53d8520aa7f5c15,"Update snap fixture 

Missed this in my last PR",Lauren Tan,2023-09-05T19:07:37Z
a374287feae1b37f19fb43d428463b153d552b20,"React DevTools 4.28.2 -> 4.28.3 (#27337)

This is a patch version to fix some bugs in a previous internal release.
I am expecting this one also to be internal-only, need to make sure that
extension is stable in Chrome. Some changes and improvements are
expected for Firefox, though, before going public.

* refactor[devtools/extension]: handle ports disconnection, instead of
frequent reconnection ([hoxyq](https://github.com/hoxyq) in
[#27336](https://github.com/facebook/react/pull/27336))
* refactor[devtools/extension]: migrate from using setInterval for
polling if react is loaded ([hoxyq](https://github.com/hoxyq) in
[#27323](https://github.com/facebook/react/pull/27323))
* fix[devtools/extension]: fixed duplicating panels in firefox
([hoxyq](https://github.com/hoxyq) in
[#27320](https://github.com/facebook/react/pull/27320))",Ruslan Lesiutin,2023-09-05T17:58:27Z
a27df56a5cc54b77a9206d1344b457af4ec64b30,"refactor[devtools/extension]: handle ports disconnection, instead of frequent reconnection (#27336)

- Instead of reconnecting ports from devtools page and proxy content
script, now handling their disconnection properly
- `proxy.js` is now dynamically registered as a content script, which
loaded for each page. This will probably not work well for Firefox,
since we are still on manifest v2, I will try to fix this in the next
few PRs.
- Handling the case when devtools page port was reconnected and bridge
is still present. This could happen if user switches the tab and Chrome
decides to kill service worker, devtools page port gets disconnected,
and then user returns back to the tab. When port is reconnected, we
check if bridge message listener is present, connecting them if so.
- Added simple debounce when evaluating if page has react application
running. We start this check in `chrome.network.onNavigated` listener,
which is asynchronous. Also, this check itself is asynchronous, so
previously we could mount React DevTools multiple times if navigates
multiple times while `chrome.devtools.inspectedWindow.eval` (which is
also asynchronous) can be executed.
https://github.com/hoxyq/react/blob/00b7c4331819289548b40714aea12335368e10f4/packages/react-devtools-extensions/src/main/index.js#L575-L583



https://github.com/facebook/react/assets/28902667/9d519a77-145e-413c-b142-b5063223d073",Ruslan Lesiutin,2023-09-05T17:41:39Z
6a71868d4c159c8089f0c70f17bfcf2abc68173d,[sprout] Convert for-of-mutate to sprout,Lauren Tan,2023-09-05T16:35:18Z
375e2d8f337293d8162672ea2ab004b1bf178cc0,"[babel] Remove babel/plugin-syntax-jsx 

Internal version of babel/core doesn't support the `inherits` property, so let's 
try removing it. The tests still seem to pass, so this might be vestigial from 
the first iteration of the compiler from last year",Lauren Tan,2023-09-05T16:08:01Z
fdd6a1b8b1bc72fffb813ce1fc046b87ea8435a7,Add rollup to eslint-plugin-react-forget,Lauren Tan,2023-09-05T16:08:00Z
2d3507b0e19e6c001c861fcb067bb98fc84e4860,"Add signal codegen for ReactiveScopes

Instead of emitting a memo block, emit a function expression and pass it as an
argument to derived (which will then create a computed).

The naming of 'derived' needs to be tweaked.",Sathya Gunasekaran,2023-09-05T10:13:31Z
4571979e4685aaf0e42f0f24200e52059af7a4fd,Add pass to lower useState,Sathya Gunasekaran,2023-09-05T10:13:30Z
9b4f847d93aa302c953543ae0631023c06408ad3,"refactor[devtools/extension]: migrate from using setInterval for polling if react is loaded (#27323)

`chrome.devtools.inspectedWindow.eval` is asynchronous, so using it in
`setInterval` is a mistake.
Sometimes this results into mounting React DevTools twice, and user sees
errors about duplicated fibers in store.

With these changes, `executeIfReactHasLoaded` executed recursively with
a threshold (in case if page doesn't have react).

Although we minimize the risk of mounting DevTools twice here, this
approach is not the best way to have this problem solved. Dumping some
thoughts and ideas that I've tried, but which are out of the scope for
this release, because they can be too risky and time-consuming.
Potential changes:
- Have 2 content scripts:
  - One `prepareInjection` to notify service worker on renderer attached
- One which runs on `document_idle` to finalize check, in case if there
is no react
- Service worker will notify devtools page that it is ready to mount
React DevTools panels or should show that there is no React to be found
- Extension port from devtools page should be persistent and connected
when `main.js` is executed
- Might require refactoring the logic of how we connect devtools and
proxy ports
  
  
Some corner cases:
- Navigating to restricted pages, like `chrome://<something>` and back
- When react is lazily loaded, like in an attached iframe, or just
opened modal
- In-tab navigation with pre-cached pages, I think only Chrome does it
- Firefox is still on manifest v2 and it doesn't allow running content
scripts in ExecutionWorld.MAIN, so it requires a different approach",Ruslan Lesiutin,2023-09-01T15:23:04Z
403881c5489890b83a0460410ae7dbfc8ebb471e,[forest] Turn off jsx memoization,Sathya Gunasekaran,2023-09-01T10:24:19Z
9b037118c588373310c463868037fa4f3d57683e,[test] Add basic test,Sathya Gunasekaran,2023-09-01T10:24:19Z
7022e8d6a3222c97d287dfa0f2361acc8a30683a,"fix[devtools/extension]: fixed duplicating panels in firefox (#27320)

Multiple `chrome.panels.create` calls result into having duplicate
panels created in Firefox, these changes fix that.

Now calling `chrome.panels.create` only if there are no panels created
yet.",Ruslan Lesiutin,2023-08-31T17:24:26Z
b70a0d70224ceb4e277bd8ac535a2caafa5c075a,"[Fizz] Track postponed holes in the prerender pass (#27317)

This is basically the implementation for the prerender pass.

Instead of forking basically the whole implementation for prerender, I
just add a conditional field on the request. If it's `null` it behaves
like before. If it's non-`null` then instead of triggering client
rendered boundaries it triggers those into a ""postponed"" state which is
basically just a variant of ""pending"". It's supposed to be filled in
later.

It also builds up a serializable tree of which path can be followed to
find the holes. This is basically a reverse `KeyPath` tree.

It is unfortunate that this approach adds more code to the regular Fizz
builds but in practice. It seems like this side is not going to add much
code and we might instead just want to merge the builds so that it's
smaller when you have `prerender` and `resume` in the same bundle -
which I think will be common in practice.

This just implements the prerender side, and not the resume side, which
is why the tests have a TODO. That's in a follow up PR.",Sebastian Markbåge,2023-08-31T16:23:26Z
da61d47e87cb2b223fc33824ed73dcddc8a345f4,Add flag,Sathya Gunasekaran,2023-08-31T10:15:41Z
c456662318fb962b1af0c2f1db459c950fa2ba0f,[tsconfig] Specify module resolution to be nodenext,Sathya Gunasekaran,2023-08-31T10:15:37Z
41c23e87c52b958f7c93b0f94940abc50a2ead8d,"Disable compilation of ""Components"" inside class methods 

Minimal repro extracted from our internal codebase. Our inference mode sees that 
this arrow function is component-like and attempts to compile it, which then 
fails because the function accesses `this`  which we bailout on.",Joe Savona,2023-08-31T22:16:27Z
3808b01b3a6d116151b5de742866360ed70450c7,"React DevTools 4.28.1 -> 4.28.2 (#27318)

List of changes:
* fix[devtools/extension]: handle tab navigation events before react is
loaded ([hoxyq](https://github.com/hoxyq) in
[#27316](https://github.com/facebook/react/pull/27316))",Ruslan Lesiutin,2023-08-30T18:47:08Z
29b405b2de6b4abaa67ff53f3b5e067f80b106d3,"fix[devtools/extension]: handle tab navigation events before react is loaded (#27316)

This is mostly hotfix for https://github.com/facebook/react/pull/27215.

Contains 3 fixes:
- Handle cases when `react` is not loaded yet and user performs in-tab
navigation. Previously, because of the uncleared interval we would try
to mount DevTools twice, resulting into multiple errors.
- Handle case when extension port disconnected (probably by the browser
or just due to its lifetime)
- Removed duplicate `render()` call on line 327",Ruslan Lesiutin,2023-08-30T18:31:18Z
e36c8cb39504484090001140aa7f6150fee7acdd,[patch] tsconfig: unbreak vercel build on main,Mofei Zhang,2023-08-30T17:36:46Z
d23b8b5dbf72cd0a3a1a85e22af19772b32feacd,"[Flight] use opaque config for flight in `dom-legacy` renderer (#27313)

`dom-legacy` does not make sense for Flight. we could still type check
the files but it adds maintenance burden in the inlinedHostConfigs
whenever things change there. Going to make these configs opaque mixed
types to quiet flow since no entrypoints use the flight code",Josh Story,2023-08-30T17:32:25Z
2fba484cd095ea79b940364cea5107fa4ca9f0c8,"useFormState fix: action -> target (#27309)

I mixed these attributes up in
https://github.com/facebook/react/pull/27302",Andrew Clark,2023-08-30T02:17:15Z
7930a213d27a075491db40c97395d91e1b4bc805,"[sprout][QoL] remove isComponent annotation 

--- 

quality of life improvement as this seemed to be confusing (oops, and thanks for 
the feedback!) 

We don't *really* need static annotations for whether a function returns jsx 
(e.g. should be rendered as a React element) or not (e.g. should be wrapped in a 
wrapper component. This PR adds check for returned jsx objects at runtime 

--- 

Tested by running diffing the output of `yarn sprout --verbose` between this PR 
and base.",Mofei Zhang,2023-08-30T00:00:55Z
c7b5f2fde04d801ac8cac1e9a04cd757a97a12d5,[yarn] Update typescript node16 -> node18,Mofei Zhang,2023-08-29T23:51:32Z
87903245629715e99a95e546acce9a20b89d5129,"Workaround serious Babel bug 

I ran into the same issue that @poteto and @gsathya (and probably @mofeiZ) have 
run into: ""Duplicate declaration of '$'"" caused by Babel visiting a function 
twice despite our calling `skip()`. This PR keeps a set of nodes that we have 
already visited to avoid visiting them again, as a workaround for skip not 
working. 

# Test Plan 

Synced to www and confirmed that the previous bug no longer reproduces, and the 
compiled output looks sane.",Joe Savona,2023-08-30T12:21:51Z
4f55a66d5c643757e95fbe25b20b4fff2e1b16cb,"Compile args to forwardRef/memo 

Completes a todo (ie fixes a silly mistake) from a PR earlier in the stack, so 
we now correctly recognize and compile arguments to `React.forwardRef()` and 
`React.memo()`.",Joe Savona,2023-08-29T21:09:42Z
ddc9f8030e179f01959e465261c0fd5acfe0eb4e,"Enable compilation of FunctionExpressions 

Thanks to the previous diff we can trivially support components or hooks defined 
as a FunctionExpression.",Joe Savona,2023-08-29T21:09:41Z
cee08ba7503866d572e4289fc9f34f7b8257ab24,"[rfc] Dont convert ArrowFunction to FunctionDecl 

This PR changes the way we compile ArrowFunctionExpression to allow compiling 
more cases, such as within `React.forwardRef()`. We no longer convert arrow 
functions to function declarations. Instead, CodeGenerator emits a generic 
`CodegenFunction` type, and `Program.ts` is responsible for converting that to 
the appropriate type. The rule is basically: 

* Retain the original node type by default. Function declaration in, function 
declaration out. Arrow function in, arrow function out. 

* When gating is enabled, we emit a ConditionalExpression instead of creating a 
temporary variable. If the original (and hence compiled) functions are function 
declarations, we force them into FunctionExpressions only here, since we need an 
expression for each branch of the conditional. Then the rules are: 

* If this is a `export function Foo` ie a named export, replace it with a 
variable declaration with the conditional expression as the initializer, and the 
function name as the variable name. 

* Else, just replace the original function node with the conditional. This works 
for all other cases. 

I'm open to feedback but this seems like a pretty robust approach and will allow 
us to support a lot of real-world cases that we didn't yet, so i think we need 
_something_ in this direction.",Joe Savona,2023-08-29T21:09:41Z
7d11445d8e3145d69ca1352bd21bad0ed15fd141,"Revamp compilation modes 

We currently have multiple flags for targeting which functions to compile, but 
they are actually mutually exclusive. This PR consolidates to a single 
`compilationMode: 'annotation' | 'infer' | 'all'` flag: 

* Annotation compiles only functions that explicitly opt-in with ""use forget"" 

* Infer compiles explicitly opted-in functions (via ""use forget"") as well as any 
known/inferred components or hooks: 

* Component declarations 

* Component or hook-like functions (same rules as the ESLint plugin but with an 
extra check for whether it uses JSX or calls a hook) 

* All compiles all top-level functions. We should get rid of this in a follow-up 
and make tests use infer mode by default, and add explicit opt-ins where 
necessary. 

In all modes, ""use no forget"" always takes precedence and can be used to 
opt-out. The default mode is now ""infer"".",Joe Savona,2023-08-29T21:09:40Z
3653ae2de35397bcd84cda8955f4628c94f90663,"Option to infer React functions to compile 

Adds a new option to infer which functions to compile, based on React's ESLint 
rule. The main difference is that in addition to checking the function name we 
also check that it creates JSX or calls a hook. This should cover a significant 
majority of components and reduce the chance of accidentally targeting 
non-components, but it will leave some false negatives. 

Note that some cases that the ESLint plugin infers as React functions don't work 
yet: we don't compile FunctionExpressions, only ArrowFunctionExpressions, and 
the way we handle ArrowFunctionExpression doesn't work with things like 
forwardRef or variable declarations. We'll need more updates to fully handle all 
these cases, which I'll do later in the stack.",Joe Savona,2023-08-29T21:09:40Z
ddff504695f33c19e8c0792bff82bd8f8b8f7c05,"useFormState's permalink option changes form target (#27302)

When the `permalink` option is passed to `useFormState`, and the form is
submitted before it has hydrated, the permalink will be used as the
target of the form action, enabling MPA-style form submissions.

(Note that submitting a form without hydration is a feature of Server
Actions; it doesn't work with regular client actions.)

It does not have any effect after the form has hydrated.",Andrew Clark,2023-08-29T15:58:44Z
eaa696876ee40bb048727aefe995be1bbb7384a8,"fix: devtools source field disappears after component remount (#27297)

## Summary

Fixes: https://github.com/facebook/react/issues/27296

On actions that cause a component to change its signature, and therefore
to remount, the `_debugSource` property of the fiber updates in delay
and causes the `devtools` source field to vanish.

This issue happens in
https://github.com/facebook/react/blob/main/packages/react-reconciler/src/ReactFiberBeginWork.js

```js
function beginWork(
  current: Fiber | null,
  workInProgress: Fiber,
  renderLanes: Lanes,
): Fiber | null {
  if (__DEV__) {
    if (workInProgress._debugNeedsRemount && current !== null) {
      // This will restart the begin phase with a new fiber.
      return remountFiber(
        current,
        workInProgress,
        createFiberFromTypeAndProps(
          workInProgress.type,
          workInProgress.key,
          workInProgress.pendingProps,
          workInProgress._debugOwner || null,
          workInProgress.mode,
          workInProgress.lanes,
        ),
      );
    }
  }

  // ...
```

`remountFiber` uses the 3rd parameter as the new fiber
(`createFiberFromTypeAndProps(...)`), but this parameter doesn’t contain
a `_debugSource`.

## How did you test this change?

Tested by monkey patching
`./node_modules/react-dom/cjs/react-dom.development.js`:
<img width=""1749"" alt=""image""
src=""https://github.com/facebook/react/assets/75563024/ccaf7fab-4cc9-4c05-a48b-64db6f55dc23"">


https://github.com/facebook/react/assets/75563024/0650ae5c-b277-44d1-acbb-a08d98bd38e0",idango10,2023-08-29T15:42:35Z
4129ea8c922b950be3964f98d2bb74ff4a1c5431,"set priority on TaskController instead of on postTask/yield (#27295)

## Summary

passing both a signal and a priority to `postTask`/`yield` in chrome
causes memory to spike and potentially causes OOMs. a fix for this has
landed in chrome 118, but we can avoid the issue in earlier versions by
setting priority on just the TaskController instead.

https://bugs.chromium.org/p/chromium/issues/detail?id=1469367

## How did you test this change?
```
yarn test SchedulerPostTask
```",Noah Lemen,2023-08-29T13:06:25Z
2f368725fb37f4911f6a14f0993a8a7b688df8bd,"React DevTools 4.28.0 -> 4.28.1 (#27305)

List of changes:
* refactor: refactored devtools browser extension scripts to improve
port management and service worker lifetime
([hoxyq](https://github.com/hoxyq) in
[#27215](https://github.com/facebook/react/pull/27215))
* refactor[devtools/extension]: minify production builds to strip
comments ([hoxyq](https://github.com/hoxyq) in
[#27304](https://github.com/facebook/react/pull/27304))
* fix[devtools]: allow element updates polling only if bridge is alive
([hoxyq](https://github.com/hoxyq) in
[#27067](https://github.com/facebook/react/pull/27067))
* refactor: resolve browser via env variables based on build rather than
user agent ([hoxyq](https://github.com/hoxyq) in
[#27179](https://github.com/facebook/react/pull/27179))
* fix[devtools/updateFiberRecursively]: mount suspense fallback set in
timed out case ([hoxyq](https://github.com/hoxyq) in
[#27147](https://github.com/facebook/react/pull/27147))
* Feat:-Added open in editor to appear by default
([Biki-das](https://github.com/Biki-das) in
[#26949](https://github.com/facebook/react/pull/26949))
* fix[devtools/inspect]: null check memoized props before trying to call
hasOwnProperty ([hoxyq](https://github.com/hoxyq) in
[#27057](https://github.com/facebook/react/pull/27057))
* rename SuspenseList export to unstable_SuspenseList
([noahlemen](https://github.com/noahlemen) in
[#27061](https://github.com/facebook/react/pull/27061))",Ruslan Lesiutin,2023-08-29T12:37:35Z
8fbd3079425eaff85ec1b52b0eefecdd44ba7289,"refactor: refactored devtools browser extension scripts to improve port management and service worker lifetime (#27215)

Fixes https://github.com/facebook/react/issues/27119,
https://github.com/facebook/react/issues/27185.

Fixed:
- React DevTools now works as expected when user performs in-tab
navigation, previously it was just stuck.


https://github.com/facebook/react/assets/28902667/b11c5f84-7155-47a5-8b5a-7e90baca5347

- When user closes browser DevTools panel, we now do some cleanup to
disconnect ports and emit shutdown event for bridge. This should fix the
issue with registering duplicated fibers with the same id in Store.

Changed:
- We reconnect proxy port once in 25 seconds, in order to [keep service
worker
alive](https://developer.chrome.com/docs/extensions/whatsnew/#m110-sw-idle).
- Instead of unregistering dynamically injected content scripts, wen now
get list of already registered scripts and filter them out from scripts
that we want to inject again, see dynamicallyInjectContentScripts.js.
- Split `main.js` and `background.js` into multiple files.

Tested on Chromium and Firefox browsers.",Ruslan Lesiutin,2023-08-29T11:09:26Z
f47956239f6892a1e805af1fc3f1b2fb0f66beca,"refactor[devtools/extension]: minify production builds to strip comments (#27304)

Currently, we are unable to publish a release to Firefox extensions
store, due to `parseHookNames` chunk size, which is ~5mb.

We were not minifying production builds on purpose, to have more
descriptive error messages. Now, Terser plugin will only:
- remove comments
- mangle, but keeping function names (for understandable bug reports)",Ruslan Lesiutin,2023-08-29T11:09:13Z
41e9c17a69f819f20a29823a0acf18456c5ef4d2,"fix[devtools]: allow element updates polling only if bridge is alive (#27067)

When some element is inspected in DevTools, we have a polling which
updates the data for this element.
Sometimes when service worker dies or bridge is getting shutdown, we
continue to poll this data and will spam with the same ""timed out
error"".

<img width=""1728"" alt=""Screenshot 2023-07-28 at 17 39 23""
src=""https://github.com/facebook/react/assets/28902667/220c4504-1ccc-4e87-9d78-bfff8b708230"">


These changes add an explicit check that polling is allowed only while
bridge is alive.",Ruslan Lesiutin,2023-08-29T09:40:20Z
2c4c84718810bf3df411d599acc152d08208d35f,"refactor: resolve browser via env variables based on build rather than user agent (#27179)

Fixes https://github.com/facebook/react/issues/26911,
https://github.com/facebook/react/issues/26860.

Currently, we are parsing user agent string to determine which browser
is running the extension. This doesn't work well with custom user
agents, and sometimes when user turns on mobile dev mode in Firefox, we
stop resolving that this is a Firefox browser, extension starts to use
Chrome API's and fails to inject.

Changes:
Since we are building different extensions for all supported browsers
(Chrome, Firefox, Edge), we predefine env variables for browser
resolution, which are populated in a build step.",Ruslan Lesiutin,2023-08-29T09:40:02Z
456d153bb582798effa76c09bec2405ab2e392cf,"Client implementation of useFormState (#27278)

This implements useFormState in Fiber. (It does not include any
progressive enhancement features; those will be added later.)

useFormState is a hook for tracking state produced by async actions. It
has a signature similar to useReducer, but instead of a reducer, it
accepts an async action function.

```js
async function action(prevState, payload) {
  // ..
}
const [state, dispatch] = useFormState(action, initialState)
```

Calling dispatch runs the async action and updates the state to the
returned value.

Async actions run before React's render cycle, so unlike reducers, they
can contain arbitrary side effects.",Andrew Clark,2023-08-28T15:05:40Z
9a01c8b54e91c588391070c65701342e4e361ea7,"Fix mount-or-update check in rerenderOptimistic (#27277)

I noticed this was wrong because it should call updateWorkInProgressHook
before it checks if currentHook is null.",Andrew Clark,2023-08-28T15:04:46Z
6dbc48075b6feba902533bd41b69ac1a9df7f933,[tests] bug repros,Mofei Zhang,2023-08-26T21:00:43Z
b798223a620dad77077d27e53cc99cbd54312d99,"Override .bind on Server References on the Client (#27282)

That way when you bind arguments to a Server Reference, it's still a
server reference and works with progressive enhancement.

This already works on the Server (RSC) layer.",Sebastian Markbåge,2023-08-26T01:39:55Z
bcbcd37eb016c58bca124c94d416a281fe4eebc6,[sprout] Allow forwardRef and memo components,Mofei Zhang,2023-08-25T23:54:21Z
ab31a9ed28d340172440e4b12e27d2af689249b3,"Selective Hydration: Don't suspend if showing fallback (#27230)

A transition that flows into a dehydrated boundary should not suspend if
the boundary is showing a fallback.

This is related to another issue where Fizz streams in the initial HTML
after a client navigation has already happened. That issue is not fixed
by this commit, but it does make it less likely. Need to think more
about the larger issue.",Andrew Clark,2023-08-25T00:04:34Z
9d4582dffdea5b4dcb6a6093ea848d15423c7701,"[Float][Fizz][Static] add `importMap` option to Fizz and Static server renderers (#27260)

Import maps need to be emitted before any scripts or preloads so the
browser can properly locate these resources.

Unlike most scripts, importmaps are singletons meaning you can only have
one per document and they must appear before any modules are loaded or
preloaded. In the future there may be a way to dynamically add more
mappings however the proposed API for this seems likely to be a
javascript API and not an html tag.

Given the unique constraints here this PR implements React's support of
importMaps as the following

1. an `importMap` option accepting a plain object mapping module
specifier to path is accepted in any API that renders a preamble (head
content). Notably this precludes resume rendering because in resume
cases the preamble should have already been produced as part of the
prerender step.
2. the importMap is stringified and emitted as a `<script
type=""importmap"">...</script>` in the preamble.
3. the importMap is escaped identically to how bootstrapScriptContent is
escaped, notably, isntances of `</script>` are escaped to avoid breaking
out of the script context

Users can still render importmap tags however with Float enabled this is
rather pointless as most modules will be hoisted above the importmap
that is rendered. In practice this means the only functional way to use
import maps with React is to use this config API.",Josh Story,2023-08-24T20:48:28Z
56b0f971d0459b60a262c3effbaca79265bdf67b,[sprout] Port alias-capture-in-method-receiver-and-mutate test,Sathya Gunasekaran,2023-08-23T16:44:26Z
aceacce5e265cffc8189a740ed634e1c9b9e8bdd,[sprout] Add a mutate utility function,Sathya Gunasekaran,2023-08-23T16:37:54Z
ce82a56fa64435aaa0abaa5070b01187a1eaa439,"[ci] Fix output of parser benchmark 

yarn adds some other output, so just run the script directly",Lauren Tan,2023-08-24T14:14:28Z
80efd75b8e5f83a5473afa0dc45f49428e2fce6f,"[ci] Add benchmark comparison 

Updates the parser-benchmark script to use a benchmarking framework, and 

also brings in yargs to make it easier to handle parsing arguments. 

Non-CI usage: 

``` 

$ cd bench/parser-benchmark 

$ yarn bench --help 

Options: 

--help        Show help                                              [boolean] 

--ci                                                [boolean] [default: false] 

--sampleSize                                             [number] [default: 1] 

$ yarn bench --sampleSize=3 

[ISOBENCH ENDED] Parser Benchmark (3 times) 

OXC           - 32 op/s. 3 samples in 9518 ms. 5.288x (BEST) 

SWC           - 20 op/s. 3 samples in 9487 ms. 3.256x 

HermesParser  - 6 op/s. 3 samples in 9124 ms. 1.000x (WORST) 

Forget (Rust) - 15 op/s. 3 samples in 9749 ms. 2.499x 

``` 

In CI this outputs JSON instead of logging to stdout. The results are 

stored in github's action cache and used as a point of comparison when 

new commits are pushed to main. The comparison should be shown on 

workflow [summary 
pages](https://github.com/facebook/react-forget/actions/runs/5956421081), but 
nothing will be populated until we merge this PR. 

We intentionally only run this workflow on main as any run would 

override the last cached result, so a PR with multiple pushes would then 

start having comparisons with itself.",Lauren Tan,2023-08-23T21:58:23Z
aeae3ba0a7adee165bac9ed9ba08a15bcb23e1cb,[ci] Add rust-cache,Lauren Tan,2023-08-23T21:16:40Z
fc506b5fed7c6041adacaef5767e58cbb1db5493,"[ci] Run parser benchmark on ci 

Example: 

![Screenshot 2023-08-23 at 11 22 55 
AM](https://github.com/facebook/react-forget/assets/1390709/158fa9f1-32f6-444e-8ea8-75f4f1475ee0)",Lauren Tan,2023-08-23T21:16:40Z
b4cdd3e8922713f8c9817b004a0dc51be47bc5df,"Scaffolding for useFormState (#27270)

This exposes, but does not yet implement, a new experimental API called
useFormState. It's gated behind the enableAsyncActions flag.

useFormState has a similar signature to useReducer, except instead of a
reducer it accepts an (async) action function. React will wait until the
promise resolves before updating the state:

```js
async function action(prevState, payload) {
  // ..
}
const [state, dispatch] = useFormState(action, initialState)
```

When used in combination with Server Actions, it will also support
progressive enhancement — a form that is submitted before it has
hydrated will have its state transferred to the next page. However, like
the other action-related hooks, it works with fully client-driven
actions, too.",Andrew Clark,2023-08-23T14:58:09Z
856dc5e43352454b1d06c13e233d565ceda77e61,"Fix escaping in action error URL (#27273)

This URL is generated on the client (there's an equivalent but shorter
SSR version too) when a function is used as an action. It should never
happen but it'll be invoked if a form is manually submitted or event is
stopped early.

The `'` wasn't escaped so this yielded invalid syntax. Which is an error
too but much less helpful. `missing ) after argument list`. Added a test
that evals to make sure it's correct syntax.",Sebastian Markbåge,2023-08-22T23:10:00Z
31034b6de73c7cd9093e92a34e384d84c082aa4e,"[Fizz] Split ResponseState/Resources into RenderState/ResumableState (#27268)

This exposes a `resume()` API to go with the `prerender()` (only in
experimental). It doesn't work yet since we don't yet emit the postponed
state so not yet tested.

The main thing this does is rename ResponseState->RenderState and
Resources->ResumableState. We separated out resources into a separate
concept preemptively since it seemed like separate enough but probably
doesn't warrant being a separate concept. The result is that we have a
per RenderState in the Config which is really just temporary state and
things that must be flushed completely in the prerender. Most things
should be ResumableState.

Most options are specified in the `prerender()` and transferred into the
`resume()` but certain options that are unique per request can't be.
Notably `nonce` is special. This means that bootstrap scripts and
external runtime can't use `nonce` in this mode. They need to have a CSP
configured to deal with external scripts, but not inline.

We need to be able to restore state of things that we've already emitted
in the prerender. We could have separate snapshot/restore methods that
does this work when it happens but that means we have to explicitly do
that work. This design is trying to keep to the principle that we just
work with resumable data structures instead so that we're designing for
it with every feature. It also makes restoring faster since it's just
straight into the data structure.

This is not yet a serializable format. That can be done in a follow up.

We also need to vet that each step makes sense. Notably stylesToHoist is
a bit unclear how it'll work.",Sebastian Markbåge,2023-08-22T19:21:36Z
3a9be52f515f73c196b6f077145771ce7286ec97,Update test262,Lauren Tan,2023-08-22T19:07:46Z
a0dc16699178ddb8e7dac439e2473d6610d18863,"[rfc] Remove top level forget directory 

Sorry about the thrash in advance! This removes the top level `forget` directory 
which adds unnecessary nesting to our repo 

Hopefully everything still works",lauren,2023-08-22T19:04:54Z
86198b923199224b60533952b636348bb0484a6d,"[Float][Fizz][Legacy] hoisted elements no longer emit before `<html>` in legacy apis such as `renderToString()` (#27269)

renderToString is a legacy server API which used a trick to avoid having
the DOCTYPE included when rendering full documents by setting the root
formatcontext to HTML_MODE rather than ROOT_HTML_MODE. Previously this
was of little consequence but with Float the Root mode started to be
used for things like determining if we could flush hoistable elements
yet. In issue #27177 we see that hoisted elements can appear before the
<html> tag when using a legacy API `renderToString`.

This change exports a DOCTYPE from FizzConfigDOM and FizzConfigDOMLegacy
respectively, using an empty chunk in the legacy case. The only runtime
perf cost here is that for legacy APIs there is an extra empty chunk to
write when rendering a top level <html> tag which is trivial enough

Fixes #27177",Josh Story,2023-08-22T17:54:33Z
dd480ef923930c8906a02664b01bcdea50707b5d,"Fix: Stylesheet in error UI suspends indefinitely (#27265)

This fixes the regression test added in the previous commit. The
""Suspensey commit"" implementation relies on the
`shouldRemainOnPreviousScreen` function to determine whether to 1)
suspend the commit 2) activate a parent fallback and schedule a retry.
The issue was that we were sometimes attempting option 2 even when there
was no parent fallback.

Part of the reason this bug landed is due to how `throwException` is
structured. In the case of Suspensey commits, we pass a special ""noop""
thenable to `throwException` as a way to trigger the Suspense path. This
special thenable must never have a listener attached to it. This is not
a great way to structure the logic, it's just a consequence of how the
code evolved over time. We should refactor it into multiple functions so
we can trigger a fallback directly without having to check the type. In
the meantime, I added an internal warning to help detect similar
mistakes in the future.",Andrew Clark,2023-08-22T15:22:30Z
e76a5aca781abdc237f044131790ea615b500532,"[easy] remove unused file MaxInts.js (#27259)

While poking around, I noticed this wasn't used.",Jan Kassens,2023-08-22T14:42:27Z
29556a6b0a137d99883d28e8ec9df694eec7dd18,"Flow: upgrade to 0.215.0 (#27264)

Simple bump of Flow and Hermes parser to keep us current.",Jan Kassens,2023-08-22T14:41:04Z
3f5b8c214f64f72aeb1ec0e0aae3d2185b3362a6,"Jest: remove haste config (#27257)

Since we're not using haste at all, we can just remove the config to
disable haste instead of enabling, just to inject an implementation that
blocks any haste modules from being recognized.

Test Plan:
Creating a module and required it to get the expected error that the
module doesn't exist.",Jan Kassens,2023-08-22T14:12:28Z
a13df48d4ed225ea516b8db553d2854edb9a48e2,"[rust] Serialize range as array 

ESTree expects the `range` value to be an array of `[start, end]`, we support 
deserializing from that format but serialized as an object of `{start,end}`, now 
we serialize to the array form.",Joe Savona,2023-08-22T04:55:08Z
7d1c3c15892d8c31c7ca4661f601c41d8541fa8c,"Regression test: Stylesheet suspends indefinitely when part of error boundary UI during initial hydration (#27258)

Adds a failing test for a case discovered by Next.js. An error boundary
is triggered during initial hydration, and the error fallback includes a
stylesheet. If the stylesheet has not yet been loaded, the commit
suspends, but never resolves even after the stylesheet finishes loading.

Triggering this bug depends on several very specific code paths being
triggered simultaneously. There are a few ways we could fix the bug;
I'll submit as one or more separate PRs to show that each one is
sufficient.",Andrew Clark,2023-08-21T23:14:56Z
9c13e4413c270da3acfbe0956a71fb90fc6c8475,"[rust] Expose parse function to napi 

Updates the `forget_napi` crate to call the parser and semantic analyzer and 
convert their values to JS.",Joe Savona,2023-08-21T23:04:03Z
7fc7488ac8a43de35ca7ca7cc849e99d040961fe,"[rust] Scaffolding for napi-backed npm package 

Scaffolds out a `forget_napi` crate following the guide for https://napi.rs/. 
This crate will be the public JS api for interacting with Forget.",Joe Savona,2023-08-21T21:51:10Z
1c568435185789c1916e2474b2e96fb2fb1d7e6f,"[tests] Allow .ts, .tsx fixture files",Mofei Zhang,2023-08-22T16:54:01Z
b2772592321db426a81d52becea9dc86394afe29,"[flow] upgrade to 0.214.0 (#27187)

Simple upgrade without any code changes required.

Changelog: https://github.com/facebook/flow/blob/main/Changelog.md",Jan Kassens,2023-08-21T15:23:47Z
6be03b681e330054d8a7ea6d8348c8ae13285528,[ci] Split out babel-plugin-react-forget jest to its own job,Lauren Tan,2023-08-18T21:06:52Z
e426cb553d03526f31355999869b8f00b3f0c054,[ci] Split out babel-plugin-react-forget prettier/eslint to its own job,Lauren Tan,2023-08-18T19:22:09Z
bcd692fca43543f765c222077ea9fef275d49389,"Promote enableOptimizeFunctionExpressions to default/only option 

We’ve had this feature turned on internally for a while with only a couple minor 
bugs and no fundamental issues. It’s a necessary change for simplifying function 
expression dependencies and context variables, so let’s remove the feature flag 
and fix forward for any issues.",Joe Savona,2023-08-18T19:06:16Z
c4d000ce49cc93c2091d8d44506fa7b2092ccbeb,[ci] Rename TS ci to be consistent with other workflows,Lauren Tan,2023-08-18T18:16:21Z
9e332ee05aa623ef7a146a6f275878e7a507bd13,[ci] Run yarn workspace tests in parallel,Lauren Tan,2023-08-18T18:10:41Z
98f3f14d2e06fb785103296318204cd154d5d0ed,"[Fizz] Track Key Path (#27243)

Tracks the currently executing parent path of a task, using the name of
the component and the key or index.

This can be used to uniquely identify an instance of a component between
requests - assuming nothing in the parents has changed. Even if it has
changed, if things are properly keyed, it should still line up.

It's not used yet but we'll need this for two separate features so
should land this so we can stack on top.

Can be passed to `JSON.stringify(...)` to generate a unique key.",Sebastian Markbåge,2023-08-18T14:18:33Z
a905a029018e6ea699405ec9bac45c0ad62282b8,"[rust] Add SAFETY comments for unsafe blocks 

Adds SAFETY comments for the two instances of unsafe blocks that are *not* just 
FFI. It seems like overkill to annotate all the FFI calls so i'm skipping that, 
let me know if anyone has strong preferences otherwise.",Joe Savona,2023-08-17T22:23:46Z
5623f2acf93d762b0b67dab76668b564a6f3b21e,"Updating forking implementation to match against more general fork implementations (#27205)

Search for more generic fork files if an exact match does not exist. If
`forks/MyFile.dom.js` exists but `forks/MyFile.dom-node.js` does not
then use it when trying to resolve forks for the `""dom-node""` renderer
in flow, tests, and build

consolidate certain fork files that were identical and make semantic
sense to be generalized
add `dom-browser-esm` bundle and use it for
`react-server-dom-esm/client.browser` build",Josh Story,2023-08-17T22:17:46Z
d5a8e801571fbada273171e646d6b50d4cd81992,"[rust][ci] Run cargo check/fmt 

Formats the codebase, fixes some clippy lints, and updates CI to check that code 
is formatted.",Joe Savona,2023-08-17T19:59:29Z
e50531692010bbda2a4627b07c7c810c3770a52a,"[Float][Flight][Fizz][Fiber] Implement `preloadModule` and `preinitModule` (#27220)

Stacked on #27224 

### Implements `ReactDOM.preloadModule()`
`preloadModule` is a function to preload modules of various types.
Similar to `preload` this is useful when you expect to use a Resource
soon but can't render that resource directly. At the moment the only
sensible module to preload is script modules along with some other `as`
variants such as `as=""serviceworker""`. In the future when there is some
notion of how to preload style module script or json module scripts this
API will be extended to support those as well.

##### Arguments
1. `href: string` -> the href or src value you want to preload.
2. `options?: {...}` -> 
2.1. `options.as?: string` -> the `as` property the modulepreload link
should render with. If not provided it will be omitted which will cause
the modulepreload to be treated like a script module
2.2. `options.crossOrigin?: string` -> modules always load with CORS but
you can provide `use-credentials` if you want to change the default
behavior
2.3. `options.integrity?: string` -> an integrity hash for subresource
integrity APIs
  
##### Rendering
each preloaded module will emit a `<link rel=""modulepreload"" href=""...""
/>`
if `as` is specified and is something other than `""script""` the as
attribute will also be included
if crossOrigin or integrity as specified their attributes will also be
included

During SSR these script tags will be emitted before content. If we have
not yet flushed the document head they will be emitted there after
things that block paint such as font preloads, img preloads, and
stylesheets.

On the client these link tags will be appended to the document.head.
  
### Implements `ReactDOM.preinitModule()`
`preinitModule` is a function to loading module scripts before they are
required. It has the same use cases as `preinit`.

During SSR you would use this to tell the browsers to start fetching
code that will be used without having to wait for bootstrapping to
initiate module fetches.

ON the client you would use this to start fetching a module script early
for an anticipated navigation or other event that is likely to depend on
this module script.

the `as` property for Float methods drew inspiration from the `as`
attribute of the `<link rel=""preload"" ... >` tag but it is used as a
sort of tag for the kind of thing being targetted by Float methods. For
`preinitModule` we currently only support `as: ""script""` and this is
also the assumed default type so you current never need to specify this
`as` value. In the future `preinitModule` will support additional module
script types such as `style` or `json`. The support of these types will
correspond to [Module Import
Attributes](https://github.com/tc39/proposal-import-attributes).

##### Arguments
1. `href: string` -> the href or src value you want to preinitialize
2. `options?: {...}` ->
2.1 `options.as?: string` -> only supports `script` and this is the
default behavior. Until we support import attributes such as `json` and
`style` there will not be much reason to provide an `as` option.
2.2. `options.crossOrigin?: string`: modules always load with CORS but
you can provide `use-credentials` if you want to change the default
behavior
2.3 `options.integrity?: string` -> an integrity hash for subresource
integrity APIs

##### Rendering
each preinitialized `script` module will emit a `<script type=""module""
async="""" src""..."">` During SSR these will appear behind display blocking
resources such as font preloads, img preloads, and stylesheets. In the
browser these will be appende to the head.

Note that for other `as` types the rendered output will be slightly
different. `<script type=""module"">import ""..."" with {type: ""json""
}</script>`. Since this tag is an inline script variants of React that
do not use inline scripts will simply omit these preinitialization tags
from the SSR output. This is not implemented in this PR but will appear
in a future update.",Josh Story,2023-08-17T17:30:00Z
ac1a16c67e268fcb2c52e91717cbc918c7c24446,"Add Postpone API (#27238)

This adds an experimental `unstable_postpone(reason)` API.

Currently we don't have a way to model effectively an Infinite Promise.
I.e. something that suspends but never resolves. The reason this is
useful is because you might have something else that unblocks it later.
E.g. by updating in place later, or by client rendering.

On the client this works to model as an Infinite Promise (in fact,
that's what this implementation does). However, in Fizz and Flight that
doesn't work because the stream needs to end at some point. We don't
have any way of knowing that we're suspended on infinite promises. It's
not enough to tag the promises because you could await those and thus
creating new promises. The only way we really have to signal this
through a series of indirections like async functions, is by throwing.
It's not 100% safe because these values can be caught but it's the best
we can do.

Effectively `postpone(reason)` behaves like a built-in [Catch
Boundary](https://github.com/facebook/react/pull/26854). It's like
`raise(Postpone, reason)` except it's built-in so it needs to be able to
be encoded and caught by Suspense boundaries.

In Flight and Fizz these behave pretty much the same as errors. Flight
just forwards it to retrigger on the client. In Fizz they just trigger
client rendering which itself might just postpone again or fill in the
value. The difference is how they get logged.

In Flight and Fizz they log to `onPostpone(reason)` instead of
`onError(error)`. This log is meant to help find deopts on the server
like finding places where you fall back to client rendering. The reason
that you pass in is for that purpose to help the reason for any deopts.

I do track the stack trace in DEV but I don't currently expose it to
`onPostpone`. This seems like a limitation. It might be better to expose
the Postpone object which is an Error object but that's more of an
implementation detail. I could also pass it as a second argument.

On the client after hydration they don't get passed to
`onRecoverableError`. There's no global `onPostpone` API to capture
postponed things on the client just like there's no `onError`. At that
point it's just assumed to be intentional. It doesn't have any `digest`
or reason passed to the client since it's not logged.

There are some hacky solutions that currently just tries to reuse as
much of the existing code as possible but should be more properly
implemented.
- Fiber is currently just converting it to a fake Promise object so that
it behaves like an infinite Promise.
- Fizz is encoding the magic digest string `""POSTPONE""` in the HTML so
we know to ignore it but it should probably just be something neater
that doesn't share namespace with digests.

Next I plan on using this in the `/static` entry points for additional
features.

Why ""postpone""? It's basically a synonym to ""defer"" but we plan on using
""defer"" for other purposes and it's overloaded anyway.",Sebastian Markbåge,2023-08-17T17:26:14Z
5b6370234c1dd34f1e95aefe0bf023f29a5f7083,"Update readme to mention Rust CI config 

This is mostly to test that the new configuration skips the Rust CI step if 
there are no rust changes - yay, that worked! But also worth mentioning in the 
readme so lets land.",Joe Savona,2023-08-17T17:15:59Z
514916d9ce4b94f88817c2b5240166bba4a411f1,[rust][ci] Only run Rust actions when relevant files change,Joe Savona,2023-08-17T17:10:44Z
3ce41169303eceb47b4a5147e8fceeea23a145e8,"[rust][sema] Only create one scope per function/class 

Fixes up function and class handling to not create nested scopes in some cases. 
Doesn't affect name resolution otherwise.",Joe Savona,2023-08-17T17:03:00Z
543d27c2f0e43113fb22740a90946eeb52e57bb5,"[rust][sema] Support classes 

Adds name resolution support for class declarations and expressions. Mostly this 
involves _not_ visiting some `Identifier` nodes that don't actually represent 
variables. For example, method names don't introduce new variables (but if they 
are computed, they may _refer_ to variables).",Joe Savona,2023-08-17T17:02:56Z
dafa4687659d6ae33a90b80ba5e2e92cb73a077d,"[rust][sema] Allow defining/resolving known globals 

Adds an option to pass a list of known globals into the semantic analyzer so 
that references to globals can be checked. As a follow-up we'll need to 
distinguish between different types of semantic analysis errors, so that callers 
which don't want to validate globals can ignore ""unknown variable"" reference 
errors while still handling definite errors such as duplicate declarations.",Joe Savona,2023-08-16T23:44:40Z
ade82b8dd956bdaa5b7c47400fba9152c2435756,"[Flight] Refactor emit and process functions (#27234)

Since we no longer have externally configured ""process"" methods, I just
inlined all of those.

The main thing in this refactor is that I just inlined all the error
branches into just `emitErrorChunk`. I'm not sure why it was split up an
repeated before but this seems simpler. I need it since I'm going to be
doing similar copies of this.",Sebastian Markbåge,2023-08-16T21:04:21Z
bfb7d2bfbd5a8fe2906cf42a5a4a448406c741d7,"[rust][sema] Handle var/let/const redeclaration 

JavaScript has ~sane~ fun rules around where variables can be redeclared or not, 
and which kinds of variables this applies to. Actually the rules are pretty 
straightforward: 

* `var` can be redeclared any number of times. 

* In strict mode, other declarations cannot be redeclared within the same scope. 
This implies that a `var` declaration cannot conflict with these other forms, 
which must take into account hoisting. So you can't have a `var a; let a` in the 
same scope, but you also can't have a `let a` at a scope and then a `var a` 
which will hoist to that same scope.",Joe Savona,2023-08-16T19:26:04Z
796080f4d1797ba2819b736e1e2ce2cfb6512d98,"[rust][sema] Statically detect some TDZ violations 

The [temporal dead 
zone](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/let#temporal_dead_zone_tdz), 
often abbreviated TDZ, is the period between the start of its declaring block 
and the line that contains the let/const/class declaration. Not all instances of 
TDZ can be detected statically, because whether or not a TDZ error will occur at 
runtime is a property of which control flow path is taken and whether some other 
code has initialized the value. However, a subset of cases can be detected, and 
that's what we implement here. 

When we encounter a variable reference we record the next declaration id at that 
point in time. Then when resolving references after visiting the program, we can 
check: did the reference end up referring to a let/const/class binding whose id 
is equal or greater to that ""next declaration""? If so, it means the reference 
refers to a variable that is provably declared later and is a known TDZ 
violation. The catch is that when resolving references, we reset the ""next 
declaration"" limit value when we bubble up out of a function scope. That's 
because references to let/const within a function may occur after the 
declaration, and we can't statically validate them.",Joe Savona,2023-08-16T00:20:34Z
2edf66ecdfa31bbae9384b0f8993a0fbe6e0b025,"[rust][sema] Resolve all references after traversing program 

Previously we attempted to resolve each reference at the close of its defining 
scope, and if it couldn't be resolved yet we bubbled the unresolved reference up 
to the parent scope. That approach isn't ideal for two reasons: 

* First, it's inefficient since we may have to make multiple attempts to resolve 
the same reference. 

* Second, it's incorrect. There can be cases where we think we can resolve a 
reference to a value defined in an outer scope, but there is a hoisted 
declaration from an intermediate scope that we haven't seen yet. 

The safest and most optimal thing is to just queue all references and resolve 
them at the end.",Joe Savona,2023-08-15T19:33:45Z
34914796b247b8fd2912fe90ebd301ad7b2fdb74,"[rust][sema] Set root scope kind based on program source type 

Rather than always create a Global scope and then immediately add a Module child 
node, we now set the kind of the root scope to global (for scripts) or module 
(for modules) based on the program node.",Joe Savona,2023-08-15T19:24:38Z
875d7175ac4d8d13b6ac038a4dcd2bcd0cb8faa8,[rust] cargo fix,Joe Savona,2023-08-15T16:31:49Z
b133b6c0b47f2f124430cc2ab3d3bdee70c6c921,"[rust][sema] Visit imports as declarations 

Teaches the semantic analyzer about import statements. We now treat imports as 
declarations, so that subsequent references to the imported value can be 
resolved.",Joe Savona,2023-08-15T16:30:43Z
15e0ecaa8f507369a46a0b17fabfd69c60d0f6a2,"[rust] Convert Hermes source locations to ESTree SourceRange 

Teaches the hermes->estree conversion to convert source ranges. This means our 
diagnostics now point to the actual source of the error: 

<img width=""903"" alt=""Screenshot 2023-08-14 at 5 39 50 PM"" 
src=""https://github.com/facebook/react-forget/assets/6425824/2960d114-0cc6-4531-9e7d-00ff3bfb1eb3""> 

Of course I still need to teach our semantic analysis about imports, but that's 
a separate issue!",Joe Savona,2023-08-15T00:36:58Z
f2a1a6a6e4fccb1fb6470f9e61b6ea111bf25a41,[rust][sema] Test for function hoisting,Joe Savona,2023-08-15T00:36:54Z
1ad0460693e61646c05d7a214be823ebcf7b6c3a,"[sprout] Add shared runtime, improve error reporting 

--- 

I added ~20 more tests to Sprout to get more of a feel for what the test 
framework would need to support all fixtures. I'm relatively confident that the 
approach outlined in [the original workplace 
post](https://fburl.com/workplace/ftu8woch) works to migrate almost all existing 
fixture tests to sprout (TLDR: use shared functions when possible, otherwise 
write helper functions in-file). 

Add `shared-runtime` file to reduce the amount of overhead needed to set up a 
fixture test. 

- All generalizable functions and values should be added here (e.g. 
`shallowCopy`, `deepCopy`, `sum`). 

- Editor integration is set up through a custom tsconfig, so importing from 
`shared-runtime` should just work (with hover annotations, click-to-definition, 
etc). 

<img width=""682"" alt=""Screenshot 2023-08-17 at 11 09 47 AM"" 
src=""https://github.com/facebook/react-forget/assets/34200447/78c3dff9-ba10-4057-b3f6-2fa842d19b1d""> 

--- 

Tested new test fixtures added to sprout by adding them to `testfilter.txt` and 
running with `--verbose --filter`. 

Note that there are no unexpected exceptions, and all logs + returned values 
match. 

``` 

feifei0@feifei0-mbp babel-plugin-react-forget % yarn sprout:build && yarn sprout 
--verbose --filter 

yarn run v1.22.19 

$ yarn workspace sprout run build 

$ rimraf dist && tsc --build 

✨  Done in 2.07s. 

yarn run v1.22.19 

$ node ../sprout/dist/main.js --verbose --filter 

PASS  console-readonly 

ok {""a"":1,""b"":2} [ 

""{ a: 1, b: 2 }"", 

""{ a: 1, b: 2 }"", 

""{ a: 1, b: 2 }"", 

""{ a: 1, b: 2 }"", 

""{ a: 1, b: 2 }"" 

] 

PASS  constant-propagate-global-phis-constant 

ok <div>global string 0</div> 

PASS  constant-propagate-global-phis 

ok <div>global string 1</div> 

PASS  dce-loop 

ok 10 

PASS  destructure-capture-global 

ok {""a"":""value 1"",""someGlobal"":{}} 

PASS  destructuring-mixed-scope-and-local-variables-with-default 

ok {""media"":null,""allUrls"":[""url1"",""url2"",""url3""],""onClick"":""[[ function 
params=1 ]]""} 

PASS  holey-array-expr 

ok [null,""global string 0"",{""a"":1,""b"":2}] 

PASS  infer-global-object 

ok {""primitiveVal1"":2,""primitiveVal2"":null,""primitiveVal3"":null} 

PASS  infer-phi-primitive 

ok 1 

PASS  infer-types-through-type-cast.flow 

ok 4 

PASS  issue933-disjoint-set-infinite-loop 

ok [2] 

PASS  jsx-tag-evaluation-order-non-global 

ok <div>StaticText1<div>StaticText2</div></div> 

PASS  jsx-tag-evaluation-order 

ok <div>StaticText1string value 1<div>StaticText2</div></div> 

PASS  method-call 

ok 4 

PASS  mutable-lifetime-loops 

ok {""a"":{""value"":6},""b"":{""value"":5},""c"":{""value"":4},""d"":{""value"":6}} 

PASS  mutable-lifetime-with-aliasing 

ok {""b"":[{}],""value"":[{""c"":{},""value"":""[[ cyclic ref *0 ]]""},null]} 

PASS  update-expression-in-sequence 

ok [4,2,3,4] 

PASS  update-expression-on-function-parameter 

ok [4,1,4,2,4,3,1,4,4] 

PASS  update-expression 

ok {""x"":1,""y"":1,""z"":2} 

PASS  useMemo-multiple-if-else 

ok 2 

20 Tests, 20 Passed, 0 Failed 

✨  Done in 4.11s. 

```",Mofei Zhang,2023-08-17T17:28:08Z
2b4a1d86ffa16863ba6e4ccea33151a3abe589c3,"[pipeline] Recognize ""use no forget"" directive 

--- 

Add ""use no forget"", not gated behind a feature flag for simplicity (""use no 
forget"" should always tell Forget to not compile a component, right?)",Mofei Zhang,2023-08-17T15:03:20Z
28688ade9f1ce1c2ad435b7ae8951073445b58d7,[sprout] Add copyright headers etc,Mofei Zhang,2023-08-17T15:03:18Z
74aec8aa35a3f6fe815463d91bc06fd2ddd30508,[ez] Add concurrently labels to yarn dev,Lauren Tan,2023-08-17T16:01:42Z
9c2ce7a8c832d24a1d1954a7a0dd7966747794e6,"Try running tests for babel-plugin-react-forget concurrently 

Unscientifically seems to be a little faster. I made sure to preserve the 
ordering of the logs even though the processes will run concurrently, so the ci 
output should still be readable 

![Screenshot 2023-08-17 at 11 51 45 
AM](https://github.com/facebook/react-forget/assets/1390709/b9878983-ed0c-4b93-bc10-61109ff8103d)",Lauren Tan,2023-08-17T15:58:15Z
5448b33eb01dc334bf3a1beeada77d47902683fb,"[yarn workspaces] Add typescript dependencies to tsconfig 

--- 

Previously, I used `yarn workspace build fixture-test-utils` and `yarn workspace 
build babel-plugin-react-forget` to recompile dependencies on sprout. However, 
tsc supports project references which was intended to solve this problem 
https://www.typescriptlang.org/docs/handbook/project-references.html 

Note that apparently this places `.tsbuildinfo` in package roots, according to 
https://github.com/microsoft/TypeScript/issues/30925",Mofei Zhang,2023-08-16T19:38:30Z
d6dea6b9b90c790e69dfce7e7f0ceeb9d1bfe5d0,"[sprout][fixtures] Annotate some fixtures 

--- 

This PR is an example of how to update fixture to add sprout annotations. 

Running with `yarn sprout --verbose --filter` shows the fixture outputs. 

``` 

PASS  array-access-assignment 

ok [[2],[[2],[],[3]]] 

PASS  array-expression-spread 

ok [0,1,2,3,null,4,5,6,""z""] 

PASS  array-map-frozen-array 

ok [[],[]] 

PASS  array-map-mutable-array-mutating-lambda 

ok [[],[]] 

PASS  array-pattern-params 

ok [{""a"":""val1""},{""b"":""val2""}] 

PASS  array-properties 

ok {""a"":[[1,2],2,""hello""],""x"":3,""y"":""[[ function params=1 ]]"",""z"":""[[ function 
params=1 ]]""} 

PASS  array-property-call 

ok {""a"":[1,2,""hello"",42],""x"":4,""y"":1} 

PASS  assignment-expression-computed 

ok [7] 

PASS  assignment-expression-nested-path 

ok {""b"":{""c"":6}} 

PASS  capturing-func-mutate-2 

ok {""a"":2} 

PASS  capturing-function-alias-computed-load-2 

ok ""val2"" 

PASS  capturing-function-alias-computed-load-4 

ok ""val2"" 

```",Mofei Zhang,2023-08-16T19:38:29Z
9d1a842a833bc16766a2ae34266934cf287949fc,"[sprout] Enable sprout on all new fixtures 

--- 

Rename `SproutOnlyFilterTodoRemove.ts` to `SproutTodoFilter.ts`. I've tried to 
group the skipped fixtures by difficulty and add comments about what need to be 
done, also happy to change the structure of this. 

From this point, sprout will run on all new fixtures by default. If the fixture 
forgets to export a `FIXTURE_ENTRYPOINT`, sprout will fail with this error. 

<img width=""853"" alt=""Screenshot 2023-08-15 at 5 59 32 PM"" 
src=""https://github.com/facebook/react-forget/assets/34200447/0f80d650-1dc1-4df4-9710-e49acbb424b0""> 

See #1961 for an example of how to annotate existing skipped fixtures or new 
ones. The `README.md` is also updated with a guide.",Mofei Zhang,2023-08-16T19:38:28Z
c4ae2a48dcd81ccd4a82326d7d3b9e7c9b3b457f,"[sprout] patch bug + add verbose mode 

--- 

``` 

yarn sprout --verbose 

``` 

Verbose mode prints out all outputs of tests. The test output is a status (`ok` 
or `exception`), a returned or thrown value, and a set of console logs. 

Currently as of #1960 , this is the output: 

```sh 

$ yarn workspace babel-plugin-react-forget run build && node 
../sprout/dist/main.js --verbose 

$ rimraf dist && tsc 

PASS  alias-nested-member-path 

ok {""y"":{""z"":[]}} 

PASS  assignment-variations-complex-lvalue 

ok {""y"":{""z"":4}} 

PASS  assignment-variations 

ok 1 

PASS  chained-assignment-expressions 

ok {""z"":null} 

PASS  computed-call-evaluation-order 

ok {""f"":""[[ function params=0 ]]""} [ 

""A"", 

""B"", 

""arg"", 

""original"" 

] 

PASS  const-propagation-into-function-expression-primitive 

ok 42 [ 

""42"" 

] 

PASS  constant-propagation-for 

ok 0 

PASS  constant-propagation-while 

ok 0 

PASS  constant-propagation 

ok -6 [ 

""foo"" 

] 

PASS  controlled-input 

ok <input value=""0""> 

PASS  do-while-continue 

ok [1.5,1,0.5] 

PASS  do-while-simple 

ok [6,4,2] 

PASS  expression-with-assignment 

ok 5 

PASS  for-of-break 

ok [] 

PASS  for-of-conditional-break 

ok [] 

PASS  for-of-continue 

ok [0.5,1,1.5] 

PASS  for-of-destructure 

ok [0,2,4] 

PASS  for-of-simple 

ok [0,2,4] 

PASS  function-declaration-reassign 

ok {} 

PASS  function-declaration-redeclare 

ok ""[[ function params=0 ]]"" 

PASS  lambda-reassign-primitive 

ok 41 

PASS  lambda-reassign-shadowed-primitive 

ok {} 

PASS  property-call-evaluation-order 

ok {""f"":""[[ function params=0 ]]""} [ 

""A"", 

""arg"", 

""original"" 

] 

PASS  reactive-scope-grouping 

ok {""y"":[{}]} 

PASS  sequentially-constant-progagatable-if-test-conditions 

ok ""ok"" 

PASS  simple-function-1 

ok ""[[ function params=1 ]]"" 

PASS  ssa-complex-multiple-if 

ok 

PASS  ssa-complex-single-if 

ok 

PASS  ssa-for 

ok 11 

PASS  ssa-if-else 

ok 

PASS  ssa-objectexpression-phi 

ok {""x"":1,""y"":3} 

PASS  ssa-property-call 

ok {""x"":[[]]} 

PASS  ssa-property 

ok {""x"":[]} 

PASS  ssa-return 

ok 2 

PASS  ssa-simple-phi 

ok 

PASS  ssa-simple 

ok 

PASS  ssa-single-if 

ok 

PASS  ssa-switch 

ok 

PASS  ssa-throw 

exception undefined 

PASS  ssa-while 

ok 10 

PASS  type-field-load 

ok 1 

PASS  type-test-field-store 

ok {} 

PASS  type-test-primitive 

ok 2 

PASS  update-expression-constant-propagation 

ok {""a"":0,""b"":0,""c"":2,""d"":2,""e"":0} 

44 Tests, 44 Passed, 0 Failed 

✨  Done in 9.27s. 

```",Mofei Zhang,2023-08-16T19:32:15Z
9d1f2c86ed43df75639d41ed018190b895aad9db,"[sprout] Codemod: add todos for test fixtures 

--- 

Codemod to add an `export FIXTURE_ENTRYPOINT` with todo values for params for 
tests with at least one param and 0 refs to external values",Mofei Zhang,2023-08-16T19:32:15Z
43e3cd61f844b32804c3e2822a1645450baaa02a,"[snap] Use sync fs apis to stop crashes 

--- 

Not sure why, but snap kept silently crashing when I used fs/promises to write 
to many file handles. I tried a `.catch(...)`, but couldn't figure it out. This 
diff changes snap to use sync fs apis to avoid crashes, but I'd love to get 
feedback if someone knows how to debug this.",Mofei Zhang,2023-08-16T19:32:14Z
ce015a164b86ee6e2ac5bdfb73c8a0484bd52c25,"[sprout] Codemod: add isComponent: false annotations to current fixtures 

To keep the type signature simple, let's always have the same set of keys in 
`FIXTURE_ENTRYPOINT`",Mofei Zhang,2023-08-16T19:32:13Z
6b242c12a969a44399deab2dd1f9a47c95f47763,"[ci] Don't run yarn build in ci 

Can't recall why we added this, but it shouldn't be necessary and should shave 
off ~2 mins from ci",Lauren Tan,2023-08-16T16:16:51Z
a59e15d40fc0c9e61d194a9f15592d36c648b4cf,[ci] Try to cache node_modules to speed up ci,Lauren Tan,2023-08-16T15:04:53Z
b968d4da48fd3b9ae703698bfe31ecdc731630fa,"[hir] Validate globals are equal before propagating 

Make sure the value of the globals in phi operands are the same before constant 
propagating them.",Sathya Gunasekaran,2023-08-16T14:39:01Z
b686b5dd9d72705e84bd7a18fd6f4ece3a566921,"[hir] Refactor constant propagation of phis 

This PR moves the phi evaluation to a separate function. 

Most importantly, it inverts the default case to _not_ constant propagate unless 
we have explicit validation of the phi operands.",Sathya Gunasekaran,2023-08-16T14:39:00Z
c7210bac9323c4ec36b2538c3afc20922cc80057,[test] Add failing test for constant propogation of globals as phi operands,Sathya Gunasekaran,2023-08-16T14:39:00Z
a418e35bf9c99bc65e8c57f0c52e850d0ab1ebab,"[sprout] QoL: use cli args, report pretty results 

--- 

- Added sprout to Github Actions by updating `yarn test` command 

- Added cli args (`filter` and `sync`) 

- use chalk to make results nicer ✨ 

Tested locally: 

<img width=""900"" alt=""Screenshot 2023-08-14 at 6 04 28 PM"" 
src=""https://github.com/facebook/react-forget/assets/34200447/b5481bbc-6a50-40c6-a85f-d2443130dd2a"">",Mofei Zhang,2023-08-14T23:26:05Z
d2983888f436308353b6559fd96c4df7a494db8b,"[sprout] Initial draft of sprout 🌱 test runner 

--- 

## Sprout 🌱 Overview 

**(Overview copied from 
[sprout/README.md](https://github.com/facebook/react-forget/blob/0468ddf8bbee54a9394317a667ea4ed96bb3bef3/forget/packages/sprout/README.md))** 

React Forget test framework that executes compiler fixtures. 

Currently, Sprout runs each fixture with a known set of inputs and annotations. 
We hope to add fuzzing capabilities to Sprout, synthesizing sets of program 
inputs based on type and/or effect annotations. 

Sprout is currently WIP and only executes files listed in 
`src/SproutOnlyFilterTodoRemove.ts`. 

### Milestones: 

- [✅] Render fixtures with React runtime / `testing-library/react`. 

- [ ] Make Sprout CLI -runnable and report results in process exit code. 

After this point: 

- Sprout can be enabled by default and added to the Github Actions pipeline. 

- `SproutOnlyFilterTodoRemove` can be renamed to `SproutSkipFilter`. 

- All new tests should provide a `FIXTURE_ENTRYPOINT`. 

- [ ] Annotate `FIXTURE_ENTRYPOINT` (fn entrypoint and params) for rest of 
fixtures. 

- [ ] Edit rest of fixtures to use shared functions or define their own helpers. 

- [ ] *(optional)* Store Sprout output as snapshot files. i.e. each fixture 
could have a `fixture.js`, `fixture.snap.md`, and `fixture.sprout.md`. 

### Constraints 

Each fixture test executed by Sprout needs to export a `FIXTURE_ENTRYPOINT`, a 
single function and parameter set with the following type signature. 

```js 

type FIXTURE_ENTRYPOINT<T> = { 

// function to be invoked 

fn: ((...params: Array<T>) => any), 

// params to pass to fn 

params: Array<T>, 

// true if fn should be rendered as a React Component 

//  i.e. returns jsx or primitives 

isComponent?: boolean, 

} 

``` 

Example: 

```js 

// test.js 

function MyComponent(props) { 

return <div>{props.a + props.b}</div>; 

} 

export const FIXTURE_ENTRYPOINT = { 

fn: MyComponent, 

params: [{a: ""hello "", b: ""world""}], 

isComponent: true, 

}; 

``` 

--- 

## Implementation Details 

- jest-worker test orchestrator (similar to Snap 🫰). 

I chose to write a test runner instead of directly using Jest for flexibility 
and speed. 

- Sprout 🌱 currently runs much more code per fixture (2 babel transform 
pipelines + 2 `exec(...)` than snap, so all scaling concerns apply. 

- Sprout may need more customization in the future (e.g. fuzzing component 
inputs, caching artifacts) 

- We probably want to add snapshot files for Sprout, which is much easier with a 
custom runner. 

This is also one of the main reasons we wrote Snap. Jest consolidates all 
external snapshots (i.e. non-inline snapshots) from a test into [a single 
file](https://github.com/facebook/react-forget/blob/d0a006ffa9842ee9db6b23ada94622af901eb07f/forget/src/__tests__/__snapshots__/compiler-test.ts.snap). 
This was painful mainly for rebasing changes, but also for small papercuts (e.g. 
needing to run `yarn test -u` twice when deleting a fixture) 

- Currently does not save output to snapshot file, but we can easily add this 
later (i.e. each test would have a `.snap.md` and `.sprout.md` file) 

- Supports filter mode (same testfilter.txt file as snap) 

- Currently does not support watch mode. I expect that sprout's primary use will 
be catching bugs in the PR / Github Actions phase. Can be changed if we need to 
iterate on sprout output while developing. 

- All tests are run with `react-test-renderer` to access the React Runtime, 
which is needed for calls to `useMemoCache` (and other potential hooks). 

- react-test-renderer required a mocked DOM, so I ~~used js-dom~~ did a terrible 
js-dom hack to add document, window, and other browser globals to the 
jest-worker globals, then exec the test code in the jest worker global. 

I can clean this up later by bundling library code (e.g. react, 
react-test-renderer) to not use `require(...)`, then calling `exec` on all ""test 
client code"" in the js-dom mock global (instead of the real jest worker one) 

- Tests marked `isComponent` need to return valid jsx or primitives. Values 
returned by all other tests are converted to a string primitive via 
JSON.stringify. 

```sh 

# install new dependencies to node_modules 

$ yarn 

$ cd forget/packages/babel-plugin-react-forget 

$ yarn sprout:build && yarn sprout 

PASS  alias-nested-member-path 

PASS  assignment-variations-complex-lvalue 

PASS  assignment-variations 

PASS  chained-assignment-expressions 

PASS  computed-call-evaluation-order 

PASS  const-propagation-into-function-expression-primitive 

PASS  constant-propagation-for 

PASS  constant-propagation-while 

PASS  constant-propagation 

... 

✨  Done in 3.91s. 

```",Mofei Zhang,2023-08-14T23:26:02Z
904ea6c9e44a276a43462b591f2be43dfe6d2658,[sprout] codemod for tests that can be run out of the box,Mofei Zhang,2023-08-14T23:26:02Z
5669fc73c0d0ac00d744e22b067bcfc3312b8314,"[snap] Refactor fixture utils to separate package 

--- 

Move shared functions to `fixture-test-utils` package.",Mofei Zhang,2023-08-14T23:26:01Z
02e8cf97909029e0510c1a4e651d9679d2e2cc1b,[snap][easy] typecheck forget babel plugin options,Mofei Zhang,2023-08-14T23:26:01Z
45d884bb6b443bc8c34633e32916791236d34e7b,"Fix LeaveSSA missing param declarations 

Nice find from @mofeiz, we weren't adding declarations for function params in 
LeaveSSA. This caused us to hit an invariant for update expressions that updated 
params which assumed that all named variables had a declaration. This is why 
it's helpful to add invariants, it helps you find places where you violate them 
:-)",Joe Savona,2023-08-14T22:48:05Z
cb2ba7118f6b826a4847db687e752b2815b5cb54,"[rust][sema] Support hoisting semantics 

Adds basic support for hoisting semantics: * Resolution of variable references 
is _always_ deferred in case the correct binding   hasn't been seet yet due to 
hoisting. * Var and function declarations bubble to the appropriate scope 

There are lots of subtleties that aren't implemented yet but these rules cover a 
lot.",Joe Savona,2023-08-14T19:24:05Z
0fb5b61ac6951a492242618e4ace6c1826335efc,"Float integrity bugfix (#27224)

Stacked on #27223

When a script resource adopts certain props from a preload for that
resource the integrity prop was incorrectly getting assinged to the
referrerPolicy prop instead. This is now fixed.",Josh Story,2023-08-14T17:10:24Z
5ea1397b2b62875dfb521cf8de0efcc15d0df797,"Remove excess validation (#27223)

stacked on #27222 

When I initially developed Float I was trying to be extremely clever in
how to explain when there are mismatching Resource instances. I still
think that we should do some kind of validation here but I want to
implement something much simpler. In practice there are not many cases
where you would accidentally create the same resource twice but with
differing props. Since I am going to land `preloadModule` and
`preinitModule` soon and I want to avoid adding to the overly complex
dev validation there I am going to remove it now and add something later
that is simplified.",Josh Story,2023-08-14T17:08:55Z
011570a0785d4d2f0fd23dd5eae37ac797ce882b,"[rust][sema] Bubble unresolved references (for hoisting) 

This is a precursor to adding support for hoisting in semantic analysis. 
Previously when we encountered an unknown reference we immediately reported an 
error. But hoisted variables may be referenced before they're defined, so we 
don't know for sure when we see an unknown variable if its actually unbound or 
not. 

This PR adds the first part of hoistingn support: rather than immediately report 
an error when encountering an unbound variable we store it in a list of 
unresolved references on the current scope. As we close each scope we recheck 
and see if the variable can now be resolved. If yes we record that, otherwise we 
bubble up the unresolved reference to the parent scope (and try again there). 

The next PR(s) will handle hoisting of `var` and other syntax to the apropriate 
nearest scope boundary (function/module).",Joe Savona,2023-08-14T17:08:02Z
5ad8ef57729fa4a57aeec3f9b0516325248dba85,"Should not export functions that are not imported (#27222)

These functions are not imported anywhere and should have not been
exported to begin with",Josh Story,2023-08-14T17:06:46Z
57f648009cea9ce84ed3480ba5ca50794e680b02,[rust] Cleanup visitors,Joe Savona,2023-08-14T16:54:29Z
e2485341846fec767f68b5c7c25b277699962054,"[rust] SSA fixes after operand refactor 

When updating the data model for operands from instruction indices to 
identifiers, I forgot to rewrite terminal operands.Doing so required a refactor 
to use the new BlockRewriter helper.",Joe Savona,2023-08-14T16:54:26Z
1a001dac6220a64d98ae33a28e89dde78100d6c5,"[Fizz][Float] When src or srcSet is a data URI we should not preload the image (#27218)

Data URI's in images can't effectively be preloaded (the URI contains
the data so preloading only duplicates the data in the stream. If we
encounter an image with this protocol in the src attribute we should
avoid preloading it.",Josh Story,2023-08-12T16:21:45Z
a49335f72a84a76ac7b39f1e6b3a7701bd6e53f7,"[rust] Support destructuring 

Adds a `Destructure` instruction closely following the design of the TS-based 
compiler. The main change is fairly small: the TS compiler doesn't support rest 
spreads that are not identifiers, such as the `...y[]` in `const [x, ...[y]] = 
z`. I added support for this in the Rust compiler.",Joe Savona,2023-08-11T19:13:21Z
298bf55f25ce698c16bcd9fc9cdb60e810b8a6fb,Address feedback,Lauren Tan,2023-08-14T16:05:52Z
3ec95c531b458876a75124247bfd322f45376e82,"[be] More babel plugin Program cleanup 

Give a more descriptive name",Lauren Tan,2023-08-11T20:39:03Z
25e3575c38d1d4755acd56b8dc5d94866bfa3d09,[be] Move more logic into Imports module,Lauren Tan,2023-08-11T20:39:01Z
ac8d874711e1be59bd17394e056f54e975ad2b91,"[eslint-plugin] Silence babel warnings in test 

be quiet Babel!",Lauren Tan,2023-08-11T20:38:59Z
d2990f15925edb72aac4826f2f6a788e52b12484,"[be] Extract import logic to own module 

Extracting logic around inserting import statements into its own module, with 
more descriptive function names",Lauren Tan,2023-08-11T20:38:57Z
ebd8ed5c7148defb68ebe3b213e308f262577e51,"[be] Extract gating logic to its own module 

Just moving code around to another module.",Lauren Tan,2023-08-11T20:38:55Z
dd8b743f6ab9e1f3e615ed5f19d5697f59051d7e,"[be] Refactor gating logic in babel plugin 

`compileProgram` was getting complex, so this extracts some of the logic into 
smaller functions. Additionally, the `try` block now only wraps the `compileFn` 
generator from Pipeline, which means not accidentally catching other non-Forget 
errors",Lauren Tan,2023-08-11T20:38:52Z
4e3618ae41669c95a3377ae615c727f74f89d141,"[Float][Fizz] Fix srcSet and sizes handling for suspensey img preloads (#27217)

imageSrcSet should have been srcSet when referencing an img tag.
imageSizes should have been sizes. This caused preloads for img tags
using srcSet and sizes to incorrectly render as having a href only,
dropping the srcSet and sizes part of the preload",Josh Story,2023-08-11T18:27:22Z
6c719f62a07114cfa23631e79a8962f6c770ddda,"[ez] ComponentDeclaration transforms only into FunctionDeclaration 

ComponentDeclarations can only be transformed into FunctionDeclarations, so the 
types were wrong",Lauren Tan,2023-08-11T17:31:06Z
533fc28c1b8ea2c6ed459e914849665f497755ff,"Forgot to gate pushImg (#27212)

`pushImg` should have been gated by enableFloat

Added in #27191",Josh Story,2023-08-10T23:42:40Z
f359f9b41ac1a8127f5ba505e0c04675eee0d310,"[Fizz] Preload ""suspensey"" images (#27191)

Eventually we will treat images without `loading=""lazy""` as suspensey
meaning we will coordinate the reveal of boundaries when these images
have loaded and ideally decoded. As a step in that direction this change
prioritizes these images for preloading to ensure the highest chance
that they are loaded before boundaries reveal (or initial paint). every
img rendered that is non lazy loading will emit a preload just behind
fonts.

This change implements a new resource queue for high priority image
preloads

There are a number of scenarios where we end up putting a preload in
this queue

1. If you render a non-lazy image and there are fewer than 10 high
priority image preloads
2. if you render a non-lazy image with fetchPriority ""high""
3. if you preload as ""image"" with fetchPriority ""high""

This means that by default we won't overrsaturate this queue with every
img rendered on the page but the earlier encountered ones will go first.
Essentially this is React's own implementation of fetchPriority=""auto"".

If however you specify that the fetchPriority is higher then in theory
an unlimited number of images can preload in this queue. This gives
users some control over queuing while still providing a good default
that does not require any opting into

Additionally we use fetchPriority ""low"" as a signal that an image does
not require preloading. This may end up being pointless if not using
lazy (which also opts out of preloading) because it might delay initial
paint but we'll start with this hueristic and consider changes in the
future when we have more information",Josh Story,2023-08-10T22:39:19Z
c3ec002d69e94b4b48ba2da41ab6cf4d2c3ff06d,Invert shouldVisitNode logic,Lauren Tan,2023-08-10T21:24:22Z
ec44c4789b6db4f8d06f23dffc808a38d46a8d85,Add ComponentDeclaration util,Lauren Tan,2023-08-10T21:24:21Z
e70dfbb5a43f42d047160c1c05c3b586d23762f8,[babel] Lookup magic prop directly,Sathya Gunasekaran,2023-08-10T17:31:46Z
c1c35407bae66661fa7217f0411b438640e11a85,[test] Test with non component declaration,Sathya Gunasekaran,2023-08-10T16:02:08Z
c3ad8a86b180772dfee9cf2f2b32b0a6848893b4,[rust] Semantic analysis resolves break/continue,Joe Savona,2023-08-10T14:59:51Z
ee13c30d1075d1a64b0d10ad5fa227c009b71b87,"[rust] Sketch of ReactiveIR (prev ReactiveFunction) 

Initial data types for `forget_reactive_ir`, which is the Rust analogue of 
`ReactiveFunction` in the TS compiler. I'm renaming here for clarity, though 
naming suggestions are very welcome!",Joe Savona,2023-08-10T14:59:51Z
7c38b1507805ad6db61702d52e5bdcd2d4859760,"[rust] Align instruction data model closer to JS 

Aligns the data model for `Instruction` closer to JS: * Adds an `lvalue: 
IdentifierOperand` property (Identifier + Effect) * Changes rvalues from being a 
reference to the definining instruction by   instruction offset (InstrIx) to be 
a variable reference (IdentifierOperand) 

There are pros and cons to the previous offset-based approach. It's definitely 
convenient to be able to jump directly to the instruction that defined an 
operand value. However: * Many passes need to track things like basic 
reassignments, which mean they need to build   up mappings of IdentifierId to 
some data. When all operands are IdentifierOperands, this   can be a single 
mapping. * It aligns closer to JS, which makes porting a bit easier. 

But most of all: porting the `ReactiveFunction` data type — which is in tree 
form - is non-trivial with the offset-based approach. As we map HIR to the tree 
form, we'd have to remap every operand offset. Using identifiers for operands 
simplifies this. 

We can always revisit this design choice later.",Joe Savona,2023-08-10T14:59:50Z
cbb815e90739c788a9d9309e6dec9c93d74453a0,[rust] Port EliminateRedundantPhi fix,Joe Savona,2023-08-10T14:59:50Z
74a062ba9dfe0228069bfc776abc3e5bd9176440,[rust] Autofix lints,Joe Savona,2023-08-10T14:59:50Z
b8f1d37b6a4e5abbf3c9d80b45b6fc773fbd4c50,"[rust] Remove SWC 

After the previous PR we no longer depend on SWC for the critical path of 
development/testing. Notably this unblocks adding support for the rest of the 
language: the new `forget_hermes_parser` crate automatically converts Hermes 
Parser's AST into our `forget_estree` format via codegen. Achieving full 
language support with SWC would have required manually defining the remaining 
conversions for the rest of the language. 

Long-term we'll need to revisit how to integrate into SWC, and more generally 
into setups build atop SWC such as Next.js's Turbopack-based build 
configuration. But i'll delete for now since we don't depend on it for 
iteration, it's slow to build, and requires us to opt-in to nightly Rust.",Joe Savona,2023-08-10T14:59:49Z
7feaabfe68c94ad8d9817c06b8a792cf3fc47859,"[rust] Use hermes parser for Forget fixture tests 

Replaces the use of SWC parser in the Forget fixture tests with Hermes Parser. 
This includes aligning on a single type to represent JS Values and numbers 
(combining semi-duplicated code from forget_hir and forget_estree) and adding 
support for lowering babel-style 
NumericLiteral/BooleanLiteral/StringLiteral/NullLiteral node types (since Hermes 
Parser produces a mix of estree/babel node types)",Joe Savona,2023-08-10T14:59:49Z
6bca9fb7a3f991b39c14a3f1c8a7bb00b1510a9a,"[rust] Update HIR builder to use new semantic analysis 

Updates HIR builder to rely on the new semantic analysis instead of assuming 
that the ast nodes will already have binding info attached. That was a stopgap 
until we had our own name resolution :-) 

Once this lands we can remove SWC and switch everything to forget_hermes_parser, 
and also remove the non-spec Identifier.binding field (which stored the 
temporary name resolution data).",Joe Savona,2023-08-10T14:59:48Z
5d8587b81ce59b7aa709cd22f235f62dfb3bb6a0,Add option to compile ReactScript,Sathya Gunasekaran,2023-08-09T18:49:29Z
27f38ec3213e965dc977e81d3e28126ab9861908,Add hermes-parser,Sathya Gunasekaran,2023-08-09T18:47:56Z
6075d7ea34d78f2db887b515c09ad3dab38aeb37,Upgrade babel,Sathya Gunasekaran,2023-08-09T18:47:56Z
a20eea25197df0da80104917df414747eeab1ac9,"Update README.md (#27209)

Update links from the old documentation to the new version

<!--
  Thanks for submitting a pull request!
We appreciate you spending the time to work on these changes. Please
provide enough information so that others can review your pull request.
The three fields below are mandatory.

Before submitting a pull request, please make sure the following is
done:

1. Fork [the repository](https://github.com/facebook/react) and create
your branch from `main`.
  2. Run `yarn` in the repository root.
3. If you've fixed a bug or added code that should be tested, add tests!
4. Ensure the test suite passes (`yarn test`). Tip: `yarn test --watch
TestName` is helpful in development.
5. Run `yarn test --prod` to test in the production environment. It
supports the same options as `yarn test`.
6. If you need a debugger, run `yarn test --debug --watch TestName`,
open `chrome://inspect`, and press ""Inspect"".
7. Format your code with
[prettier](https://github.com/prettier/prettier) (`yarn prettier`).
8. Make sure your code lints (`yarn lint`). Tip: `yarn linc` to only
check changed files.
  9. Run the [Flow](https://flowtype.org/) type checks (`yarn flow`).
  10. If you haven't already, complete the CLA.

Learn more about contributing:
https://reactjs.org/docs/how-to-contribute.html
-->

## Summary
I changed the links to get started with react from the old documentation
that is no longer being updated to the new one
<!--
Explain the **motivation** for making this change. What existing problem
does the pull request solve?
-->

## How did you test this change?

<!--
Demonstrate the code is solid. Example: The exact commands you ran and
their output, screenshots / videos if the pull request changes the user
interface.
How exactly did you verify that your PR solves the issue you wanted to
solve?
  If you leave this empty, your PR will very likely be closed.
-->",Semako,2023-08-09T17:21:43Z
201becd3d294b38824930a818e3412c6e04ba2eb,"Bugfix: Fix crash when suspending in shell during useSES re-render (#27199)

This adds a regression test for a bug where, after a store mutation, the
updated data causes the shell of the app to suspend.

When re-rendering due to a concurrent store mutation, we must check for
the RootDidNotComplete exit status again.

As a follow-up, I'm going to look into to cleaning up the places where
we check the exit status, so bugs like these are less likely. I think we
might be able to combine most of it into a single switch statement.",Andrew Clark,2023-08-08T18:11:11Z
cb3404a0ccd8b5edf5d2b90bd844742090e38f42,"[Fizz]: Unify preload queue (#27190)

Currently React attempts to prioritize certain preloads over others
based on their type. This is at odds with allowing the user to control
priority by ordering which calls are made first. There are some asset
types that generally should just be prioritized first such as fonts
since we don't know when fonts will be used and they either block
display or may lead to fallback fonts being used. But for scripts and
stylesheets we can emit them in the order received with other arbitrary
preload types.

We will eventually add support for emitting suspensey image preloads
before other resources because these also block display however that
implementation will look at which images are actually rendered rather
than simply preloaded.",Josh Story,2023-08-07T22:51:20Z
9edf470d6ed1f3ac12c23a248e64293f367c1797,"[Fizz] declare bootstrap script preloads to be `fetchPriority: 'low'` (#27189)

Generally scripts should not be preloaded before images but if they
arrive earlier than image preloads (or images) the network (or server)
may be saturated responding to inflight script preloads and not
sufficiently prioritize images arriving later. This change marks the
preloaded bootstrap script with a `low` fetch priority to signal to
supporting browsers that the request should be deprioritized. This
should make the preload operate similar to async script fetch priority
which is low by default according to https://web.dev/fetch-priority/

Additionally the bootstrap script preloads will emit before
preinitialized scripts do. Normal script preloads will continue to be
prioritized after stylesheets

This change can land separatrely but is part of a larger effort to
implement elevating image loading and making script loading less
blocking. Later changes will emit used suspensey images earlier in the
queue and will stop favoring scripts over images that are explicitly
preloaded",Josh Story,2023-08-07T22:44:34Z
ea17cc18f458010c89c1bf494be08bb782d034af,"[Fizz][Float] emit viewport meta before preloads (#27201)

Fixes: #27200 

preloads for images that appear before the viewport meta may be loaded
twice because the proper device image information is not used with the
preload but is with the image itself. The viewport meta should be
emitted earlier than all preloads to avoid this.

this change moves the queue for the viewport meta to preconnects which
already has the right priority for this tag",Josh Story,2023-08-07T22:22:48Z
43677da7e465d89ac33bc5603d6fba83c50f1bc1,"Add instructions for UpdateExpression variants 

Adds new instructions to accurately model UpdateExpression semantics, since 
`x++` is un-intuitively not the same as `x = x + 1`. There are a few different 
ways to model the combination of prefix/postfix and increment/decrement: 

* One instruction for all combinations of prefix/postfix and 
increment/decrement, eg 'UpdateExpression' 

* Instructions for Increment/Decrement, each with a property to distinguish 
prefix/postfix 

* Instructions for Prefix/Postfix, each with aproperty to distinguish 
increment/decrement. 

I chose the latter, `PrefixUpdate` and `PostfixUpdate`, because it keeps the 
number of new instructions minimal while keeping separate instructions for the 
most important distinction: whether the result of the instruction is the value 
before applying the operation or after. I'm open to suggestions about this 
though. 

A few quick notes: 

* Constant propagation is supported but only for numbers (we don't support 
bigint yet anyway) 

* LeaveSSA needs to know about these instructions since their presence requires 
making the original variable declaration Let, not Const. 

* EnterSSA mapped lvalues before rvalues, which is out of order but didn't 
previously matter. I just had to flip the order and everything worked.",Joe Savona,2023-08-07T20:50:32Z
e33c9c43ccd36113f2d85d700f231679c7068612,"[ssa] Patch: propagate every rewrite to function expressions 

--- 

#1899 only propagated eliminated phi nodes to function expressions on the first 
iteration through blocks. However, this was buggy as later iterations could 
introduce rewrites that need to be propagated. 

[playground 
repro](https://0xeac7-forget.vercel.app/#eyJzb3VyY2UiOiJmdW5jdGlvbiBDb21wb25lbnQoKSB7XG4gIGNvbnN0IHggPSA0O1xuXG4gIGNvbnN0IGdldDQgPSAoKSA9PiB7XG4gICAgd2hpbGUgKGJhcigpKSB7XG4gICAgICBpZiAoYmF6KSB7XG4gICAgICAgIGJhcigpO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gKCkgPT4geDtcbiAgfTtcblxuICByZXR1cm4gZ2V0NDtcbn0ifQ==). 

I manually synced #1907 to check that this fix works for the VR Store codebase.",Mofei Zhang,2023-08-07T21:41:35Z
ff2f2e068540a29d82b5ba7a970444621007f5a5,[patch] Gate EliminatePhi fix behind feature flag,Mofei Zhang,2023-08-07T21:41:34Z
adfae63f208b1e8e98c1923a2ac8e26686173253,"[hir] Remove unnecessary rewrite of instr.lvalue 

The for loop over eachInstructionLValue already rewrites instr.lvalue: ```       
  for (const place of eachInstructionLValue(instr)) {           
rewritePlace(place, rewrites);         } ```",Sathya Gunasekaran,2023-08-07T17:41:59Z
461083d7bd5c4ba3d665788ac09a305f3bc098b1,[rust] Deprecate old manual ast visitor,Joe Savona,2023-08-04T21:44:54Z
ab5213e8f42b7c94ee9be09e8d984ca980e6e64e,[rust][sema] Comments,Joe Savona,2023-08-04T19:16:08Z
3df04725bd58d37e834dee071d6cd6257f6d3516,"[rust][sema] For statements and JSX 

Adds semantic analysis support for normal `for` statements and for JSX. The main 
catch with JSX is that there are a bunch of identifiers that we have to ignore 
since they aren't variable references: jsx attribute names, namespace names, jsx 
member expression properties, and closing elements.",Joe Savona,2023-08-04T19:02:21Z
4756c5ab26813215b3926a1e7ce542d414a38095,"[rust][sema] Shared logic for for-in/for-of 

Shares the code for for..in and for..of, along with a few other internal 
refactorings.",Joe Savona,2023-08-04T19:02:18Z
e6e2d9437e26bbb39c07a94fa9cbd6611d83bcc4,"[rust] Improved name resolution 

This is the start of an improved semantic analysis pass, reusing the 
ScopeManager added earlier in the stack but with new analysis built using the 
new visitor trait. The logic is a rough port of 


https://github.com/facebook/hermes/blob/main/tools/hermes-parser/js/hermes-eslint/src/scope-manager/referencer/Referencer.js 

Lots of bits are still missing, i'm starting with the parts that Forget needs.",Joe Savona,2023-08-04T16:45:56Z
c6ae535e9497c86eb638c0658fb9c8c88ec32b45,"[rust] Codegen AST visitor 

Updates `estree` codegen to emit a Visitor trait (temporarily named `Visitor2` 
since there is a hand-rolled one that some code is using). We use knowledge of 
the grammar to only visit fields whose type is a Node or Enum, or an ""object"" 
type that opts into being visitable. The latter is used for Function and Class. 

This will make it much easier to write the semantic analyzer.",Joe Savona,2023-08-04T00:00:02Z
a67fefdebd12be50f61339f57cdf2a39a05237fc,"[rust] Data structures for semantic analysis 

This is two things: 

* A toy semantic analysis that handles a tiny subset of JS, including labeled 
statements, labeled break/continue, and variable 
declaration/reference/reassignment. This only exists as a way to prove out the 
API for the more important bit: 

* More importantly, this defines a data model for the semantic analysis results 
and an API for building up the semantic analysis. 

Subsequent diffs will replace the first bit (toy analysis impl), while keeping 
the second part.",Joe Savona,2023-08-03T19:41:50Z
997f52fbb30ec4b777b66edcdd75f594d9fe0c55,"fix[devtools/updateFiberRecursively]: mount suspense fallback set in timed out case (#27147)

Fixes https://github.com/facebook/react/issues/26793.

I have received a constantly reproducible example of the error, that is
mentioned in the issue above.
When starting `Reload and Profile` in DevTools, React reports an unmount
of a functional component inside Suspense's fallback via
[`onCommitFiberUnmount`](https://github.com/facebook/react/blob/3ff846d106de9273f59d1e4457793a5fcf625aef/packages/react-devtools-shared/src/hook.js#L408-L413)
in
[`commitDeletionEffectsOnFiber`](https://github.com/facebook/react/blob/main/packages/react-reconciler/src/ReactFiberCommitWork.js#L2025),
but this fiber was never registered as mounted in DevTools.

While debugging, I've noticed that in timed-out case for Suspense trees
we only check if both previous fallback child set and next fiber
fallback child set are non-null, but in these recursive calls there is
also a case when previous fallback child set is null and next set is
non-null, so we were skipping the branch.

<img width=""1746"" alt=""Screenshot 2023-07-25 at 15 26 07""
src=""https://github.com/facebook/react/assets/28902667/da21a682-9973-43ec-9653-254ba98a0a3f"">

After these changes, the issue is no longer reproducible, but I am not
sure if this is the right solution, since I don't know if this case is
correct from reconciler perspective.",Ruslan Lesiutin,2023-08-03T19:02:18Z
8042970ea4e13954bfad4bc5c2df6eaa9e2ccb36,[rust] Scaffolding for semantic analysis,Joe Savona,2023-08-01T22:55:53Z
3e9e3a1c925eac761539785334412541c1cb27a0,[e2e] Add test for useState,Sathya Gunasekaran,2023-08-04T14:50:42Z
015029dc655d0593a470bb4bcefd08e4126aaf48,"[patch] Fix for constant propagation bug in VR Store 

--- 

Changes in `@enableOptimizeFunctionExpressions` caused a bug in the last Forget 
sync to VR Store. The repro can be summarized to something like this: 

```js 

function foo() { 

const x = true; // some constant or global 

// Add some branching for type inference 

// This can be a Logical expression as well (e.g. `4 || 5`) 

if (...) { } 

// In this HIR block, SSA inserts a `x$2 = phi(x$1, x$1)`. 

// EliminateRedundantPhiNodes needs to rewrite all references of `x$2` to `x$1` 

const accessXInLambda = () => x; 

return accessXInLambda; 

}",Mofei Zhang,2023-08-02T21:30:57Z
50b09542790824f8d973ad265e49aab41cf8e954,[tests] Add typed CompilerOptions for e2e tests,Mofei Zhang,2023-08-02T21:30:56Z
2a5a8d552fdbbd0153d30c02725b4cf6379a6cb3,"[tests] Revive Forget e2e tests 

--- 

Revives e2e test infra from #587. 

- All React component-like functions are compiled. 

- `yarn jest` runs each e2e test twice (forget and no forget) 

Github Actions is already running `yarn test`, which includes all jest tests 

``` 

Run yarn test 

yarn run v1.22.19 

$ yarn workspaces run test 

> babel-plugin-react-forget 

$ yarn jest && yarn snap:build && yarn snap 

$ tsc && jest 

PASS main src/__tests__/Result-test.ts 

PASS main src/__tests__/DisjointSet-test.ts 

PASS e2e with forget src/__tests__/e2e/hello.e2e.js 

PASS e2e no forget src/__tests__/e2e/hello.e2e.js 

Test Suites: 
[4](https://github.com/facebook/react-forget/actions/runs/5732016200/job/15534129231?pr=1881#step:8:5) 
passed, 4 total 

Tests:       23 passed, 23 total 

Snapshots:   11 passed, 11 total 

Time:        
6.1[5](https://github.com/facebook/react-forget/actions/runs/5732016200/job/15534129231?pr=1881#step:8:6)3 
s 

```",Mofei Zhang,2023-08-02T21:30:55Z
2d8da0d32dc3b5347689b8b58114d4312dafeb1f,"[babel] Don't console.error on unknown options 

Internally these are considered errors in our pipelines",Lauren Tan,2023-08-02T16:34:18Z
203d5ad43bd9268a52c99aa0abd2b71f155b9695,[rust] ESTree cleanup,Joe Savona,2023-08-01T20:55:19Z
c09bfff04cbee6e7810010d6401f0adfe81243c7,[rust] Tests for HermesParser->ESTree conversion,Joe Savona,2023-08-01T20:55:17Z
e353f3702eeae21a18f508886f1983d8c19cdb58,[rust][wip] Codegen conversion from HermesParser (C++),Joe Savona,2023-08-01T20:55:13Z
ce2725eda5858a642f21390d0fe5ae3d40ba4060,[rust] Very rough sketch of consuming Hermes parser results,Joe Savona,2023-07-28T23:12:18Z
b61a47eb2cc6a03cbeb4392c5a481c4dd6e34b01,Parser benchmark,Joe Savona,2023-07-28T23:12:17Z
01ad9d895e523c35f83c0f4f5151e5cea13dbcc6,"[rust] Remove arena allocator 

Using an arena allocator can be faster, but it comes with several challenges: 

* It requires tediously tagging nearly every value with a lifetime. Any function 
that has to deal with arena-allocated data (which is every meaningful function) 
ends up with a lifetime parameter. Bleh. We also have to thread the allocator 
itself wherever we need to allocate, though this is less of a problem since 
_most_ functions already need the Environment and we can store the allocator 
there. 

* There is not yet widespread support in the Rust ecosystem for using custom 
allocators with custom data types. This means that things like HashMap/Set and 
IndexMap/Set can't be arena allocated. This means that either we have to add 
support to these data types (by upstreaming or forking) or just accept that 
we're only partially using the arena allocator. 

* Finally, `bumpalo`'s `Box` cannot be moved out of, which turns out to be an 
annoying limitation that i've already had to work around several times. 

In the end i'm not sure arena allocators are worth it at this stage of the 
project. Relay Compiler has been successful without one, and other Rust-based 
internal compilers get by without them too.",Joe Savona,2023-07-28T23:12:17Z
0e4656ac1ce6c37e2292025fa7bc52db02c0327b,[rust][wip] swc->estree for jsx,Joe Savona,2023-07-28T23:12:16Z
5230e6d8491a21b8c4566d503d05bf05065e5185,"Add failing test case for ValidateNoSetStateInRender bug 

The current heuristic to check if setState is called in render is based on 
whether the lambda containing the call to setState has a mutable range that got 
extended. This doesn't seem to work in all cases so this validation needs a bit 
more work before we can turn it on by default",Lauren Tan,2023-07-27T21:08:01Z
e77d975b169a4e768e2efec2a506eb4a1bd1090d,"Flag ValidateNoSetStateInRender 

This needs a bit more work before we can turn it on by default, see the next PR 
for a failing test case.",Lauren Tan,2023-07-27T21:08:01Z
493f72b0a7111b601c16b8ad8bc2649d82c184a0,"Feat:-Added open in editor to appear by default (#26949)

Currently the Open in editor just is a placeholder input where the
developer would need to type the whole Vscode file path being shown as a
placeholder, we can make this process a little easier by just already
setting the URL .




https://github.com/facebook/react/assets/72331432/96f43230-6c49-45f7-907c-c99a0d3d8bf7

Earlier it used to be a placeholder describing the URL
<img width=""1284"" alt=""Screenshot 2023-06-14 at 7 55 38 PM""
src=""https://github.com/facebook/react/assets/72331432/4e8234ad-e1cd-4b55-8ef8-46dea82a9c7c"">


cc @hoxyq

---------

Co-authored-by: Ruslan Lesiutin <rdlesyutin@gmail.com>
Co-authored-by: BIKI <biki@BIKIs-MacBook-Pro.local>",BIKI DAS,2023-07-27T16:04:16Z
12e6cee06f64d7640047f60936822dd021b1c0f5,"[eslint-plugin] Update hermes-parser to 0.15.0 

This includes a fix where the HermesToBabelAdapter was incorrectly outputting a 
`ClassMethod` instead of `ClassPrivateMethod` in certain scenarios. This was 
causing issues with our eslint plugin as it would crash on any file containing 
private methods because a malformed AST was formed.",Lauren Tan,2023-07-27T15:46:50Z
20b175fcd5f49e77b4f77e0a2dc1b3f236afde06,"[ci] Pass correct flags to yarn install 

Turns out `--immutable` and `--immutable-cache` are for yarn 2, yarn 1.x needs 
to use the `--frozen-lockfile` flag instead",Lauren Tan,2023-07-27T15:06:29Z
f45a4611e7dd3d74e61a051098b055453be1de96,"[ci] Don't run build on react 

Building artifacts shouldn't be required for the tests, this should shave off a 
few minutes from CI",Lauren Tan,2023-07-27T15:06:27Z
8405d8644fd20758e422aa4fc58ea4a50df5ee3e,"[eslint] Add plugin-proposal-private-methods 

There was a bug in our internal Hermes to Babel adapter which caused some 
malformed AST to be constructed, which babel would then validate as being 
incorrect. That bug was fixed, but we still have to add this plugin so that 
private class methods can be parsed by babel. 

Tested internally",Lauren Tan,2023-07-27T14:52:28Z
6912c31056651e2144a9b69d09ed3797dba60079,"[CI] Run cargo build/test 

Adds GitHub actions to build and test the Rust version of Forget on every commit 
to main. I didn't enable this on PRs for now just to avoid slowing down other 
folks, this seemed like a reasonable compromise while we're still in the 
experimentation phase. I test locally, and CI will catch if I or anyone else 
slips up.",Joseph Savona,2023-07-26T21:01:57Z
d4a1356ecaef6745145edc256dbf0390e16325e5,"[rust] swc->estree for optional chaining 

Handles conversion of optional chains from swc -> estree.",Joe Savona,2023-07-25T23:56:29Z
8bc61847284e8ea45e8e4eb1d52bd417025005b9,"[rust] deny unused fields on non-node structs 

Rejects unknown fields during deserialization of helper structs (which don't 
have a `type` field). This would be super useful for AST `Node` types, too, but 
that requires implementing a custom deserializer so i'm punting on that for now.",Joe Savona,2023-07-25T23:22:57Z
f21270a97d531c45e7f57960a5436a1fd9e9c35c,"[rust] Complete estree through ES2021 

Adds more AST types to handle the full ES2021 spec. At least, in theory I 
defined the schema correctly, and we'll have to just fix any bugs as we 
encounter them.",Joe Savona,2023-07-25T22:58:58Z
90c3a3866d59c76b504d5e6c87a64a71ee6641d0,"[rust] Improve estree serialization 

Updates to use our own codegen'd `Serialize` implementation for AST node types. 
Notably, this allows us to ensure that we always emit a `type` field, even when 
the type is obvious from context (serde doesn't do this) and avoid 
double-emitting `type` fields (which serde can do if you try to force a tag to 
be emitted). We still use the Deserialize impl because it works fine for our 
purposes.",Joe Savona,2023-07-25T22:16:22Z
c19286fce7a8354b2995a1b722647ddb74b83803,"[rust] More es2015 ast types 

Adds almost all the remaining AST types from ES2015 to `estree`, and updates the 
swc->estree->hir conversions accordingly. In a few places i punted with a 
`Diagnostic::todo()`.",Joe Savona,2023-07-25T21:08:09Z
fdb368d9e7430b50b9c506e76ccd46bf0576ef9b,"Uninstall unused Webpack 4 packages (#27058)

<!--
  Thanks for submitting a pull request!
We appreciate you spending the time to work on these changes. Please
provide enough information so that others can review your pull request.
The three fields below are mandatory.

Before submitting a pull request, please make sure the following is
done:

1. Fork [the repository](https://github.com/facebook/react) and create
your branch from `main`.
  2. Run `yarn` in the repository root.
3. If you've fixed a bug or added code that should be tested, add tests!
4. Ensure the test suite passes (`yarn test`). Tip: `yarn test --watch
TestName` is helpful in development.
5. Run `yarn test --prod` to test in the production environment. It
supports the same options as `yarn test`.
6. If you need a debugger, run `yarn test --debug --watch TestName`,
open `chrome://inspect`, and press ""Inspect"".
7. Format your code with
[prettier](https://github.com/prettier/prettier) (`yarn prettier`).
8. Make sure your code lints (`yarn lint`). Tip: `yarn linc` to only
check changed files.
  9. Run the [Flow](https://flowtype.org/) type checks (`yarn flow`).
  10. If you haven't already, complete the CLA.

Learn more about contributing:
https://reactjs.org/docs/how-to-contribute.html
-->

## Summary

 - Remove unused webpack 4 dependencies

## How did you test this change?

 - Ran `yarn test --prod`
 - Ran `yarn test`

## Related PRs:
 - https://github.com/facebook/react/pull/26887",Anatolii Kurochkin,2023-07-25T17:55:05Z
59c1f22057fe1be0181b79a096084a4d7b846510,"[rust] port inline_use_memo 

Ports InlineUseMemo to Rust, this is the only missing transform pass on the 
pipeline up through constant propagation. I wanted to finish this so that we 
could do benchmarking of the early phase of compilation. UseMemo does a bunch of 
rewriting so it seemed worth comparing performance. 

Included: 

* Add swc -> estree and estree -> HIR conversions for arrow functions and call 
expressions 

* Add HIR definition for labeled terminals and call expressions 

* Utility for inlining one function into another — note that this requires 
remapping InstrIx operands since instruction indices will change. An alternative 
would be to store all the instructions for both outer/inner functions in the 
same array, in which case we wouldn't need to remap. 

* Helpers for mutably iterating the operands of an instruction or terminal. 

* The actual inline_use_memo() function. The overall logic is similar, i just 
had to slightly shuffle the order of operations to satisfy the borrow checker.",Joe Savona,2023-07-25T16:24:19Z
4976f5c1be1f72b55af40e49f34c42be69b473d7,"[deps] Update ts-jest version 

Console warnings when running tests: ``` ts-jest[versions] (WARN) Version 5.1.3 
of typescript installed has not been tested with ts-jest. ``` 

Our typescript version is ahead of what's supported in ts-jest. This PR updates 
ts-jest to work with the latest typescript compiler.",Sathya Gunasekaran,2023-07-26T11:11:53Z
25527b3c0a7e90f740ae09f439ba6a4ae7efc4b0,"[hir] Add support for holey arrays 

This PR adds a Hole kind that can be present in both ArrayExpression and 
ArrayPatterns. 

This Hole type is not interesting for our inference passes and is skipped over 
for all of the pipeline.",Sathya Gunasekaran,2023-07-26T11:03:19Z
dcb6549ddae8c10a826503222d6bd7c2dfb770a4,"[hir] Bailout when reading from React namespace 

Forget doesn't understand the React namespace object and generates incorrect 
code when compiling code that loads props from this namespace object. 

This PR makes Forget bailout when we see a property load from React namespace 
object.",Sathya Gunasekaran,2023-07-25T15:08:32Z
3f0afcbe471fdebab1b2df9c006d587f044aeb07,"[test] Failing test for using hooks from React namespace 

Forget assumes hooks are imported and used directly without the React namespace 
and generates incorrect code when if there's a namespace.",Sathya Gunasekaran,2023-07-25T14:56:46Z
82e426e2298724c8c63d495fb9ec0b6c39ac1fdf,"[CI] Run react test suite on every PR 

Add a new workflow to run test suite to run on every PR. 

Updates the build step to just build the UMD variant of react & react-dom for 
the tests.",Sathya Gunasekaran,2023-07-25T12:34:50Z
3ff846d106de9273f59d1e4457793a5fcf625aef,"Flow: upgrade to 0.213.0 (#27142)

Simple upgrade that doesn't require changes.",Jan Kassens,2023-07-24T15:50:00Z
49cf3b40381992311631672b58bca1255e0d912b,"[deps] Upgrade to `hermes-parser@^0.14.0` and `prettier@2.8.8` 

Upgrades every dependency on `hermes-parser` and `prettier` to the versions that 
we're using in the rest of our other codebases. Notably, these package versions 
are necessary for our other codebases to make use of mapped types in Flow.",Timothy Yung,2023-07-21T16:19:17Z
fc9db4c487f7c3e490c124da2c4db8b2e9d3f87e,"[ez] Delete unnecessary `yarn.lock` files 

8d021e5d797c5ef3b4e18a0be735c04005f2ae7a configured `./forget` as a workspace 
root, so these `yarn.lock` files in `app/*` and `packages/*` are no longer 
relevant. This PR deletes them to reduce noise and confusion.",Timothy Yung,2023-07-21T16:15:28Z
587ae49d71f218d34393291933d513d2975e22c3,"chore: remove unused argument from schedule requestHostCallback (#27133)

Noticed this argument was left in the cleanup from
https://github.com/facebook/react/pull/27130
It seems to me like it would benefit from being cleaned up too.",tjallingt,2023-07-20T14:30:30Z
899cb95f52cc83ab5ca1eb1e268c909d3f0961e7,"Remove unused/redundant variables from Scheduler implementation (#27130)

Tidying up some redundant code left from previous iterations of the
implementation",Andrew Clark,2023-07-19T18:29:56Z
d445cee60f5635e52f15762be9bd8917edac7e93,"Make temporary `NoStrictPassiveEffects` option work with `useModernStrictMode` (#27105)

## Summary
Since we are enabling `useModernStrictMode` flag internally, to make
sure the internal testing of half StrictMode doesn't suddenly break,
this PR makes sure it also works with `useModernStrictMode` true.


## Test plan:
Manually set `useModernStrictMode` to true.
`yarn test ReactOffscreenStrictMode-test -r=www-modern --env=development
--variant=true`
`yarn test ReactStrictMode-test.internal -r=www-modern --env=development
--variant=true`",Tianyu Yao,2023-07-18T18:58:01Z
9f4fbec5f7bb639be6dac438f9da5f032ae12c15,"export dynamic disableSchedulerTimeoutInWorkLoop flag in www (#27117)

## Summary

This was not exposed as a dynamic flag in the build for facebook www. By
adding it, we'll be able to roll this out incrementally before cleaning
up this code altogether.

## How did you test this change?

`yarn build`

Before changes, `disableSchedulerTimeoutInWorkLoop` flag is not included
in ReactDOM-* build output for facebook www. Afterwards, it is included.",Noah Lemen,2023-07-17T19:44:45Z
5ac909172e1b0a2f1d12aa1ce94a5fcdc18c8350,Validate unconditional setState in render,Lauren Tan,2023-07-17T17:00:38Z
bac24ffd78129e6f7dce2b22d7ba44dd1978d0b0,[rust] Use new block helper for more passes,Joe Savona,2023-07-14T13:47:21Z
de0c2393add8ae48b107774fb87d8b4a04c630ed,"[rust] MergeConsecutiveBlocks and block helpers 

Ports `MergeConsecutiveBlocks` to Rust. This was a tricky one: as we iterate 
through the blocks _if_ the block ends up being merged with its predecessor we 
need to consume it and modify its predecessor block (ie, mutating two things 
from the same data structure - shared mutation!). But if we _don't_ need to 
merge, then we need to not drop the current block. Ie, we sort of need to 
conditionally take ownership of the current block during iteration and put it 
back. 

I added a `BlockRewriter` helper type for this which has a helper to iterate 
safely. It calls the iterator lambda, moving blocks one at a time into the 
lambda. The lambda returns either `Keep(block)` to give the block back and keep 
it or `Remove` to tell the rewriter to drop the block. Thanks to making the 
Blocks data structure hold `Option<Box<BasicBlock>>` items, ""moving"" the block 
actually just means nulling out the option and conceptually giving ownership of 
the pointer to the callback - the data itself never moves. 

This involved creating a custom `Blocks` wrapper type, which i had been putting 
off doing. This cleans up a bunch of other logic around traversing blocks.",Joe Savona,2023-07-14T09:00:16Z
32286b74acb55ea19fa9946ba868b5ee2ffae207,[rust] enter_ssa uses new diagnostic type,Joe Savona,2023-07-14T06:56:53Z
a39545a5758d24709b8922685736efd9f9d9e660,"[rust] mark generated code, skip formatting",Joe Savona,2023-07-14T06:46:57Z
0a79974d0e87d9e12abc4bd43ec01ad5fef4df8d,[rust] Extract HIR initialization passes to hir crate,Joe Savona,2023-07-14T06:46:51Z
19b0a49967a02f65d20e7af70ac79ddfd7292dfd,[rust] add+apply rustfmt config,Joe Savona,2023-07-14T06:33:06Z
18f7481ebf6db8103889c3ae051c41c2067355d5,"[rust] General-purpose diagnostic type and helpers 

This PR adapts the `Diagnostic` type and helpers from Relay Compiler to Forget. 
The main changes are: 

* Removing some fields it doesn't seem we'll use for a while, if ever (like 
machine-readable arbitrary key/value data) 

* Switching from Relay Compiler's `Location` type to our SourceRange type 

* Using the severity enum previously established in the `forget_build_hir` 
crate, with Todo/Unsupported/InvalidSyntax/InvalidReact/Invariant variants 

* Adding support for translating our `Diagnostic` into a `miette::Diagnostic` so 
we can use miette's pretty printing 

With the new Diagnostic type in place i updated the existing build_hir code to 
use it and confirmed that the errors are now even nicer (when we attach extra 
data to annotate labels): 

<img width=""860"" alt=""Screenshot 2023-07-14 at 3 10 00 PM"" 
src=""https://github.com/facebook/react-forget/assets/6425824/9d29425a-938b-4872-b999-aa174a3c329a""> 

This addresses (or brings us closer to addressing) many of your comments on the 
last diagnostics PR, @poteto!",Joe Savona,2023-07-14T06:21:45Z
3e317b8bbfe4d3861730c5739a76670903bfc97b,"[rust] Contributing guide and readmes for every crate 

Per the title, this updates the main readme file with a guide to contributing to 
the Rust compiler, and ensures that we have a brief description of every crate 
in local readme.md files. The `forget_hir` one is the most extensive and 
describes the high-level design of the HIR.",Joe Savona,2023-07-14T03:24:19Z
68b0effca3dd3ef64edb98662dd7f8d049958e6f,"[rust] Workspace hygiene 

I've primarily used what Cargo calls virtual workspaces, where the top-level 
Cargo.toml just lists a bunch of packages and they each have their own 
dependencies. This is fine, but i've noticed that more repos are using real 
workspaces and they offer a bunch of benefits. You define the dependencies in 
the top-level Cargo.toml and then can easily refer to them from multiple crates, 
ensuring all the versions match up. It makes it easier to refer to other crates 
in the workspace, too, because you define the path once at the root, then every 
other crate can just say `forget_foo = { workspace = true }`. 

I also renamed all the crates to be prefixed with `forget_`, in some cases 
removing the redundant `hir` name, So `hir-optimization` became 
`forget_optimization`, `hir-ssa` became `forget_ssa`. Also note the switch from 
hyphenated names to underscores everywhere, since at the end of the day you have 
to write the name with underscores in source code. 

I also deleted the demo crate that i started with since we don't need it 
anymore. 

And finally, i added an explicit publish = false to all the crates just to 
prevent mistakes.",Joe Savona,2023-07-14T02:39:46Z
8ed6c6ab088c4cf022b85335534acd8991106161,[rust] simplify function context visitor,Joe Savona,2023-07-14T01:46:42Z
546fe4681c52de6a333a55cedb141c87b626425e,"fix[devtools/inspect]: null check memoized props before trying to call hasOwnProperty (#27057)

Simple check to avoid `TypeError`, quite rare case, but still.",Ruslan Lesiutin,2023-07-13T13:13:19Z
ea22dfe0b7c6593b32bb0df2077907aab2dbc689,[rust] update estree snapshots,Joe Savona,2023-07-13T07:07:53Z
19ba002a1295bccaf3e493474482224b4e6fc538,"[rust] First pass of function context analysis 

This is a quick ""good enough"" first pass at computing function expression 
context variables. It definitely needs to be overhauled, but it's enough to make 
a lot of common cases work correctly. 

First, this PR adds a hand-rolled Visitor trait for `estree`. Long-term that 
should probably be code-generated, but there are some subtleties to it such as 
the `visit_lvalue(callback)` helper which has to be wrapped around various calls 
(or we need some other way to distinguish identifiers within lvalues from 
identifiers within rvaluess). So for now it makes sense to hand-roll it until we 
are more confident in exactly how it should work. 

Given that visitor, i was able to port part of the existing 
`gatherCapturedDeps()` to Rust with some modifications. Note that we assume 
_something_ has run name resolution on the estree to match up identifiers to the 
declaration they refer to. But we don't store information about parent scopes so 
we can't walk up to check where things were defined. Instead we do the 
following: 

* Build up a list of all referenced identifiers 

* Also build up a set of bindings defined in the function itself 

* After visiting, filter our the first list to only include identifiers not 
defined by the function itself, and to eliminate duplicates. 

This covers the majority of cases: the most obvious gap is nested function 
expressions though actually that should just work.",Joe Savona,2023-07-13T06:57:27Z
f3d40c8c248f9369dcdfdac78a12188db7474a59,"[rust] Recurse into functions in other passes 

Updates eliminate_redundant_phis and constant_propagation to recurse into 
function expressions. I also realized there was a bug in EliminateRedundantPhis 
in which we wouldn't traverse into function expressions encountered after 
finding a back edge, so i fixed that logic in both versions.",Joe Savona,2023-07-13T04:34:10Z
4762208b0f5f885ec68bf5afc989688d8e19048b,"[rust] enter_ssa recurses into function expressions 

Updates `enter_ssa()` to recurse into function expressions. In the TS compiler 
we use a single Builder instance and copy (references to) the function 
expression's blocks into the builder. That type of sharing just does not play 
nicely with Rust. But... we don't need to do that! We already know the context 
variables of the function expression, so we can lookup each of them to find 
their re-mapped identifier, and set that as the starting state for the entry 
block of the function expression. That lets us use normal recursion and 
otherwise not share any information between the outer and inner builders. 

Of course to make this work we actually have to populate Function.context, but 
the algorithm _should_ work.",Joe Savona,2023-07-13T03:24:55Z
c16124f255163482a787c13d228f8c76e4a7c836,[rust] Helpers for arena allocating box/vec,Joe Savona,2023-07-13T02:26:42Z
dbe1af601bc9282382a6e1ec17cd3f5c2c94228d,"[rust] Start of function expression support 

Start of function expression support: 

* Basic structure for representing function expressions in the HIR 

* Printer support 

* swc -> estree -> hir conversion for function expression _bodies_. Dependencies 
and context are not handled yet.",Joe Savona,2023-07-13T02:14:42Z
1d5d89b8be7647b55c71dd670338a1af184bd3e4,"[js/rust] Improve constant propagation 

Makes the same improvement to constant propagation in both the JS and Rust 
versions. The core algorithm only populates phi variables if all operands have a 
known value (no back edges) and all those values are the same: this allows us to 
propagate constants in most cases and simply punts on handling propagating 
values that are affected by loops. However, since we collapse if statements into 
gotos when the test condition is a constant, there can be cases where a phi that 
originally existed will be pruned out: 

``` 

// bb0 

let x1; 

if (true) { 

// bb1 

x2 = 1; 

} else { 

// bb2 

x3 = 2; // this block becomes unreachable 

} 

// bb3 

x4 = phi(bb1: x2, bb2: x3); // this phi will get pruned s.t. x4 = x2 = 1 

return x4; 

``` 

However, the algorithm doesn't prune phis until _after_ applying constants, so 
currently we would see this phi node w different inputs and not propagate a 
constant for the final usage of x, even though it will clearly be `1`. 

The change is to make constant propagation use fixpoint iteration, iterating so 
long as terminals changed on the previous iteration. If no terminals change the 
algorithm completes in a single pass, but if terminals do change then we update 
phis and continue. As you can see from the new test case this allows us to find 
arbitrary length sequences of values and terminals that can be pruned.",Joe Savona,2023-07-13T00:53:36Z
9377e10105b41976c77c7f664f2363cb8c41ac8a,Add `referrerPolicy` option to `ReactDOM.preload()` (#27096),Steven,2023-07-12T21:32:56Z
8ada08f11e218f1a33da28a968bfb700c2abc40d,"[rust] Port constant propagation 

Ports constant propagation to Rust. The algorithm is broadly similar to the TS 
version, and most of the differences come from the slightly different HIR data 
model (operands are instruction indices not identifier ids). What this means is 
that the Constants map that we build up is really only used for variables that 
existed in the original program, and only comes into play with instructions like 
LoadLocal and StoreLocal. Other instructions such as Binary just look up their 
operands directly, ie they load the referenced instruction to check if both 
left/right are primitives. 

Note that with SSA form and the index-based operands we could actually get rid 
of StoreLocal/LoadLocal completely, which would further simplify constant 
propagation. However: 

* we'd need to add a Phi instruction kind, not a big deal but it diverges even 
more 

* more importantly, it makes it super hard to implement LeaveSSA 

That second point is a deal-breaker so unless someone has a great idea for how 
to exit SSA form without having Load/Stores, let's keep them.",Joe Savona,2023-07-12T08:33:54Z
2fb14138d415be3f36797ee2fdfd9146aa1e39a0,"[rust] Port EliminateRedundantPhis 

This is a nearly 1:1 port of EliminateRedundantPhis to Rust, the algorithm is 
identical and all differences are superficial. There are few things missing (an 
invariant instead of a panic in one place, recursing into function expressions) 
but the Rust version is still going to end up shorter despite keeping all the 
comments.",Joe Savona,2023-07-12T05:54:49Z
e029e22a9a8a443287ac212d26bcd7b85ee82ad9,[rust] fix lints,Joe Savona,2023-07-12T04:01:42Z
c7ccc5dd30acfb29c0e95e42ade5247514a2f270,"[rust] Initial port of EnterSSA 

This is a first pass at porting EnterSSA to Rust. First pass in the sense that 
it's hard to fully test it, and also in the sense that we'll likely figure out 
even better ways to work w the HIR as we iterate. Oh and i didn't do recusing 
into function expressions yet, since we can't even represent function 
expressions yet, and that may require modifying the design a bit (though i have 
an idea that i think will work, which is for the Builder to have an optional 
parent. When we encounter a block with no predecessors, we check the parent. I 
_think_ this will make all the borrowing ""just work""). 

A few notes: 

Rust's compilation model parallelizes and incrementally computes at the crate 
granularity, so builds are faster if we split up our code into more but smaller 
crates. Setting up a clean dependency graph can dramatically improve build 
performance too. For example, to run the `fixtures` tests we can build `estree` 
and `hir` in parallel, then once those build _all_ of our other crates can be 
built in parallel until we get to `fixtures` which depends on the everything 
else. The various passes don't have any build dependencies on each other so they 
can build in parallel. Hence the new code for SSA stuff is in a separate 
`hir-ssa` crate. We should similarly group other passes (approximately one crate 
per folder in the babel-plugin-react-forget/src/ directory, eg SSA, Inference, 
Optimization, etc). 

Second, shared mutable ownership can be modeled in Rust but requires wrappers 
such as `Rc<RefCell<>>`. It's generally more efficient and more idiomatic to 
rethink the data model and algorithm. For EnterSSA, the Builder object holds a 
reference into the HIR that it only ever reads, and the pass (which drives the 
builder) also holds a reference into the HIR, which it mutates. The previous PR 
split up Blocks and Instructions, and the value of that is more apparent in 
`enter_ssa()`. The Rust equivalent of the builder holds a _shared_ (immutable) 
reference to just the HIR's blocks, while the pass (driving the builder) holds a 
_unique_ (mutable) reference to just the HIR's instructions. This lets us keep 
the overall feel of the algorithm while keeping Rust happy. 

Also note that the other change — to making operands be InstrIx indices into the 
instructions array — means that the SSA logic is simpler. Most instructions 
don't have to be visited at all, since they don't deal with loads/stores. 
Terminals also don't need to be visited, since they reference instructions, not 
identifiers. The Phi concept seems to just work too. 

I also updated the printer to print predecessors and phis.",Joe Savona,2023-07-12T03:38:13Z
0a360642dcc08cab469da0a0e4f1050e56b0ef7e,"integrate scheduler.yield in SchedulerPostTask (#27069)

## Summary

`scheduler.yield` is entering [Origin Trial soon in Chrome
115](https://chromestatus.com/feature/6266249336586240). This diff adds
it to `SchedulerPostTask` when scheduling continuations to allow Origin
Trial participation for early feedback on the new API.

It seems the difference here versus the current use of `postTask` will
be minor – the intent behind `scheduler.yield` seems to mostly be better
ergonomics for scheduling continuations, but it may be interesting to
see if the follow aspect of it results in any tangible difference in
scheduling (from
[here](https://github.com/WICG/scheduling-apis/blob/main/explainers/yield-and-continuation.md#introduction)):

> To mitigate yielding performance penalty concerns, UAs prioritize
scheduler.yield() continuations over tasks of the same priority or
similar task sources.

## How did you test this change?

```
yarn test SchedulerPostTask                
```",Noah Lemen,2023-07-11T18:35:53Z
e9d2822e92792c0f6a96864b9cf19a86275876f6,"[rust] New data model for HIR 

This change is motivated by starting to explore porting EnterSSA to Rust. It's a 
good medium complexity pass and quickly demonstrates why a direct port of our 
existing data model and algorithms won't work so well. For examples just these 
first lines at the top of the transform create multiple references to the 
function body/blocks: 


https://github.com/facebook/react-forget/blob/58da89888eabde17ede649d348b307ee01fc15e1/forget/packages/babel-plugin-react-forget/src/SSA/EnterSSA.ts#L230-L231 

But more generally it's always felt wrong that instructions have an LValue that 
isn't really used. So here i'm exploring making operands a newtype index into a 
single instructions array (shared for the entire function), and using different 
types for identifier references in SetLocal and LoadLocal. Incidentally this 
also declutters the printed HIR quite a bit. 

I'm not going to land this until i actually finish enter_ssa() and some other 
passes. We definitely need to balance fidelity to the existing code (to 
facilitate porting) with using idiomatic Rust (to facilitate porting in the 
sense of not fighting the borrow checker).",Joe Savona,2023-07-11T07:59:08Z
f452ed2971846dba5d6536f3752a861bba637603,[rust] estree support for jsx,Joe Savona,2023-07-11T05:08:46Z
61d7e6ae3d81dbaa0c86950b3befbb108f14d4d4,"[js] optimize function expressions by default 

This mode improves compilation and makes optimizations easier, let's make it the 
default. I previously confirmed that enabling this mode didn't affect output 
when synced internally, and I'll do that again before landing the PR.",Joe Savona,2023-07-11T04:06:13Z
830127f680ec5955c4219e23b404343d33681413,"[js] Remove InstrValue::ExpressionStatement 

I added this as a quick workaround, since we didn't support unused 
logical/conditional expression statements. Now that we handle them we don't need 
InstructionValue::ExpressionStatement anymore. I found this when porting our 
lowering to Rust.",Joe Savona,2023-07-11T02:52:33Z
bdd50d522dd44e976dadbfe890856a46633b400b,"[rust] Update swc->estree->hir conversion for new estree 

The previous PRs to make `estree` use codegen broke the swc->estree and 
estree->hir conversions. This PR updates those conversions so everything builds 
now.",Joe Savona,2023-07-11T02:52:32Z
17ed6cc9a9de2bc6993c58d8e66c3de3e23ea16d,"[rust] Custom deserialization for more precise errors 

The overall goal of this workstream is to have a Rust representation of ESTree 
that we can use as the input and output of the compiler. In Rust environments we 
can convert between the native AST of SWC or OXC and ESTree, and when invoked 
from JavaScript we can serialize to/from ESTree-compliant JSON. Given that our 
first target is to plug into a JS-based compilation toolchain, we need to have a 
working serialization to/from ESTree JSON. The point of the codegen-based 
`estree` crate is to allow us to model estree as ergonomic, idiomatic Rust (to 
make consuming it in code easier) while also allowing us to serialize to/from 
spec-compliant ESTree. This PR flushes out one remaining piece. 

Updates our estree codegen to generate a custom `Deserialize` implementation 
instead of using the derived one from serde. ESTree has some enums whose 
variants are themselves enums, for example we have 

```rust 

enum ModuleItem { 

ImportExportDeclaration(ImportExportDeclaration), 

Statement(Statement), 

} 

enum ImportExportDeclaration { ... } 

enum Statement { ... } 

``` 

This sort of works with serde's derive implementation: you have to use the ""tag"" 
representation for the inner enums, and an ""untagged"" representation for the 
outer one (ModuleItem). The problem is that with an untagged representation, 
serde doesn't know what type of data it's expecting. All it can do is go one by 
one and try to parse the data as the first variant (eg ImportExportDeclaration) 
then the next one (Statement) and fail when it gets to the end of the list. If 
the data isn't valid for any reason, deserialization will fail with a ""not a 
valid ModuleItem"" error. That's true but not helpful, especially if you're 
developing estree, are confident that the input json is valid, and need to 
figure out where you messed up the definition. It's also not helpful as an 
end-user if you're not sure your input json is valid. 

So this PR updates our codegen to emit a custom derive implementation that is 
identical for both regular enums (like Statement) and recursive ones (like 
ModuleItem). We first extract the tag to know what type the value is, then 
deserialize exactly as that type. So in the above case, rather than have to 
first try parsing every ModuleItem as an ImportExportDeclaration and then fall 
through to statement, we just decode the tag (`type` in our case, for example 
say it's an ""ForStatement""), then deserialize directly as that type (eg, as 
ForStatement), then wrap it in the enum variant (ModuleItem::Statement(...)). 
For recursive enums like ModuleItem we add an extra wrapper as necessary. 

The end result is that we get much more precise errors and deserialization is 
more efficient: we always decode just the tag, then as exactly that type. 

Note that our serialization is also not perfect right now, because we don't 
always emit the `type` key. Serde only emits it when a value appears in an enum. 
We can similarly generate custom serializers for all our types to always emit 
the tag. That will be straightforward when it's necessary. The current PR was 
more of a blocker, because it was really hard to figure out mistakes in the 
estree definition given the ambiguous errors. Thanks to this PR we now get 
precise errors along the lines of ""unknown type `JSXElement`"" which are easy to 
resolve.",Joe Savona,2023-07-08T14:00:01Z
1abea6c49de9deabdcad863d1ab67927fbdfa790,"[rust] allow complex types in estree codegen 

Uses the `syn` crate, which can parse various Rust syntax forms, to parse the 
`type` field from json schema description. This allows us to describe complex 
types like `""type"": ""Vec<Option<ArrayElement>>""` directly, rather than requiring 
flags like nullable, plural, and nullable_item. The main flag that i'm keeping 
is ""optional"", which is used to indicate when the field itself (not the value) 
is optional.",Joe Savona,2023-07-08T14:00:00Z
3983e882b809ccf611ef1b0826a458543ff360fe,[rust] estree codegen cleanup,Joe Savona,2023-07-08T13:59:59Z
750b1e6adb4b1525d5d77de5fa46c7a969a8a36f,"[rust] Partial ES2015 support in estree codegen 

Adds some parts of the ES2015 spec, such as imports and ForOfStatement. This is 
enough to get a few more fixtures compiling. The last one uses JSX which I 
haven't defined yet.",Joe Savona,2023-07-08T13:59:58Z
0c1193ecd7a1712e0097e075fcddb7f4c4fb2a8a,"[rust] estree codegen for improved serialization 

This is meant to replace the initial `estree` crate with a version that is 
generated from a JSON description of ESTree. The idea is to make it easy to 
experiment with slightly different representations to balance ergonomic usage of 
the data at runtime with serialization compatible with ESTree spec. The JSON 
schema looks like this (somewhat abbreviated): 

``` 

{ 

// Objects are struct types that don't have a `type` and can't appear as an enum 
variant 

objects: { 

Position: { 

line: {type: ""NonZeroU32""}, 

column: {type: ""u32""} 

}, 

... 

}, 

// Nodes are struct types with a `type` and which can appear as enum variants 
(statements, expressions, patterns, etc) 

nodes: { 

ArrayExpression: { 

elements: { 

type: ""Expression"", 

plural: true, 

nullable_item: true, 

} 

} 

... 

}, 

// Categories of nodes with multiple variants, represented as enums. 

// Can be recursive, eg ForInit can be VariableDeclaration or Expression, 

// where Expression is also an enum 

enums: { 

Expression: [ 

""ArrayExpression"", 

... 

] 

}, 

// Simple enums which have a corresponding string value. Used primarily for 
operators (binary/unary/logical/etc) 

// but also for things like variable declaration kind (var/const/let) 

operators: { 

BinaryOperator: { 

Plus: ""+"", 

Instanceof: ""instanceof"", 

} 

} 

} 

``` 

The core estree files are now generated using Cargo's build script mechanism. 
Right now i only defined the types and fields from ES5, so i'll have to flush 
out the rest of the modern JS spec and extensions like JSX, TypeScript, and 
Flow. But already the for-statement example works, showing that this approach 
can handle complex cases such as unions of types or other unions (ForStatement 
initializer is tricky bc it can be a VariableDeclaration or an Expression - that 
works now!). 

This is still WIP a bit - now that the ESTree definition is more precise i can 
go back and clean up some other code (have to, because the swc -> estree 
conversion needs some tweaks now).",Joe Savona,2023-07-08T13:59:56Z
a32a2baa73ce3d42b231e59cc582930666ac1e66,"[rust] Start of error handling 

Until now i've freely used `panic!`, `unwrap()`, and friends for ""error 
handling"". This PR switches to consistently returning `Result` within the HIR 
builder, using a structured error representation that exploits helpers from 
`thiserror` and `miette` crates. Miette has a super graphical formatter for 
diagnostics as you can see in the screenshot (also see the 
[repo](https://docs.rs/miette/5.9.0/miette/index.html)). 

This is just a first pass and we'll need to flush out the error handing story 
more. Two obvious directions to go next: 

* Make HIR construction error-tolerant, so that it can find as many errors as 
possible at once rather than failing on the first error. We did this in Relay 
Compiler as well, and we can likely borrow some of its helpers. 

* Decouple from `miette`. It's very nice but less flexible than I'd like. We can 
define our own more generic diagnostic type that contains structured data, then 
have a generic conversion mechanism into a miette type so we can use their 
display logic. 

<img width=""789"" alt=""Screenshot 2023-07-06 at 3 55 38 PM"" 
src=""https://github.com/facebook/react-forget/assets/6425824/e1f1ed4b-5188-4af5-9af4-8f6c5c345023"">",Joe Savona,2023-07-08T13:59:55Z
8176f25719da6f99be829f4e1400a10f34c6bff9,"[rust] ForStatement support 

Implements support for `ForStatement` from swc -> estree -> hir, flushing out 
more of the HIR representation and porting pieces from HIRBuilder as necessary.",Joe Savona,2023-07-08T13:59:54Z
fdc8c81e07e9b3b49604afe524ee6d130fd3e03e,"[Flight] Client and Server Reference Creation into Runtime (#27033)

We already did this for Server References on the Client so this brings
us parity with that. This gives us some more flexibility with changing
the runtime implementation without having to affect the loaders.

We can also do more in the runtime such as adding `.bind()` support to
Server References.

I also moved the CommonJS Proxy creation into the runtime helper from
the register so that it can be handled in one place.

This lets us remove the forks from Next.js since the loaders can be
simplified there to just use these helpers.

This PR doesn't change the protocol or shape of the objects. They're
still specific to each bundler but ideally we should probably move this
to shared helpers that can be used by multiple bundler implementations.",Sebastian Markbåge,2023-07-07T15:09:45Z
58a8d0bdc74262a2e207a4075e0e59e5fc31d84b,[ez] Update gitignore for Rust,Lauren Tan,2023-07-06T20:25:18Z
eb2c2f7c2cf2652a168c2b433d2989131c69754b,"rename SuspenseList export to unstable_SuspenseList (#27061)

## Summary

as we began [discussing
yesterday](https://github.com/facebook/react/pull/27056#discussion_r1253282784),
`SuspenseList` is not actually stable yet, and should likely be exported
with the `unstable_` prefix.

the conversation yesterday began discussing this in the context of the
fb-specific packages, but changing it there without updating everywhere
else leads to test failures, so here the change is made across packages.

## How did you test this change?

```
yarn flow dom-browser
yarn test
```",Noah Lemen,2023-07-06T18:09:53Z
a19bbebbe36abd34efbd8f003e0f3bb55e0f1fdc,"When selecting a package variant from an export map we should favor n… (#27030)

When selecting a package variant from an export map we should favor node
over edge-light

edge-light represents a runtime with some minimal set of web apis
generally found across edge runtimes. However some environments might be
both edge-light compatible and node compatible and (node is adding many
web APIs) and when both conditions exist we want to favor the node
implementations. A followup to this change will add the web streams APIs
to Flight and Fizz so the node version exports the same interfaces for
web streams that edge does in addition to the node specific
implementations.",Josh Story,2023-07-06T17:50:59Z
853d0b1b69313177ab441e0e674c3d3776994247,"[fuzzer] Make fuzzer work with Forget 

Remove v8 specific bits. It's still not very useful as we barely have any tests 
that can be used as input corpus.",Sathya Gunasekaran,2023-07-06T06:14:14Z
31ec959e9ba06c4fae70dc5dddfeb2257a4d0e48,"[fuzzer] Initial import of v8's fuzzer 

Copied from  
https://chromium.googlesource.com/v8/v8/+/master/tools/clusterfuzz/js_fuzzer/",Sathya Gunasekaran,2023-07-06T06:14:14Z
1bf00e6b6edb9763a49f753c99609f863ee62492,[rust] lint,Joe Savona,2023-07-06T00:24:53Z
357e9de19b891d4424a6d2888c8a849d7e2c3b92,"[rust] IfStatement support 

Lowering for IfStatements, which includes porting some of the HIRBuilder helpers 
like enter() and reserve().",Joe Savona,2023-07-06T00:24:52Z
c59ac387aed46c90199f1bc9e057c1a09b4a0a6d,[rust] Assignment expressions,Joe Savona,2023-07-06T00:24:51Z
d99da0169827ff01fc49a08c27223f1fc969e1a2,[rust] basic VariableDeclaration support,Joe Savona,2023-07-06T00:24:50Z
2eb7c897f38e13f9b872ec7e3cb7bdcaecf19dc1,[rust][ez] cleanup,Joe Savona,2023-07-06T00:24:49Z
f6957e9a323c63d70ecb4b0639d38f4dab826d80,"[rust] Partial handling of identifiers 

Fundamentally this PR is about lowering identifiers during construction of HIR. 
For now i'm punting on context variables and assuming all variables are either 
global, module-scoped, or locals. The implementation involves a few pieces: 

* `estree::Identifer` gets extended with optional binding information. The idea 
is that _some_ name resolution mechanism will populate this. Eventually our own, 
but we can also borrow data from another source... 

* `estree-swc` now configures SWC's (possibly broken?) name resolution mechanism 
and sets the above binding data when translating identifiers from swc into our 
estree format. 

* hir `Builder` tracks identifiers based on `(name, BindingId)` pairs, and 
assigns a unique `hir::Identifier` instance for each pair. `Identifiers` are 
clone-able (shared). 

* Tangential: i updated the printer to handle more instruction variants, 
including the now-ported LoadGlobal instr. 

I don't love this but it's a start. Long-term we definitely should have our own 
name resolution mechanism which we run on the estree prior to lowering to HIR.",Joe Savona,2023-07-06T00:24:48Z
08e51d3fd72db5f11d9a1dd35480faa5d2305f65,"[rust] Pretty-printer for HIR 

Implements a pretty-printer for the HIR and switches the fixture tests to use 
this instead of the debug format. It's much more readable now! 

Note that not all types are properly printed, I only implemented the 
instructions and terminals used in the example. For others we fall back to the 
Debug impl so we at least print something.",Joe Savona,2023-07-06T00:24:47Z
d3b9948b5e26b8e28e6f079acca7e435672fa4e8,"[rust] Fixture tests for parsing and lowering 

Adds a new `fixtures` crate intended for running end-to-end tests of the 
compiler. As we expand the compiler this will eventually match our JS fixture 
setup, where we have .js files as input and produce memoized JS output. 

For now, this does the following: 

* Parses with SWC (omg this was painful to setup) 

* Runs SWC's name resolution, which annotates the SWC ast in-place 

* Convert the SWC ast into our `estree` representation 

* Convert `estree` into `hir` for each top-level function declaration in the 
input program 

* Print the Rust `Debug` view of the resulting HIR 

As a next step i'll add a pretty-printer for the HIR to roughly match what we 
have in JS.",Joe Savona,2023-07-06T00:24:46Z
1d2e7ee74706b57fb293089671153bac7e57ec93,"[rust] Use Rc<RefCell<>> for shared identifiers 

Multiple Place instances can share a reference to a given Identifier in our JS 
implementation. For simplicity of the initial port I’m using Rc (for sharing) 
and RefCell (for runtime-checked mutability). This is the standard pattern for 
shared mutable references in Rust when you don’t need multi-threaded support. We 
don’t need HIR to be accessible by multiple threads so this is fine, if we do 
multiple threads it will be to parallelize compilation of separate functions. 

There are other idioms w less runtime overhead, such as Place holding an index 
into a separate vec of identifiers, but that would make the port much less 
straightforward.",Joe Savona,2023-07-06T00:24:45Z
b1c8cb358b913564c83c64bb579e460a1e0bef43,"[rust] Start of lowering (BuildHIR) 

Starts to port BuildHIR, in the Rust case this means the ESTree -> HIR 
conversion. This necessitated flushing out the Builder struct a bit more. Mostly 
the logic translates over very directly, and if anything it's cleaner because of 
the lack of noise dealing with TypeScript unsoundness for Babel typedefs and 
switch statements.",Joe Savona,2023-07-06T00:24:44Z
2ac69bf7d952aba132cd887b09b71622a295b88f,"[rust] Passes from HIRBuilder 

This is a start to porting HIRBuilder, with a largely complete implementation of 
`build()`. Notably this includes all the passes which build() calls, and the 
helper functions those passes call in turn: 

```rust 

reverse_postorder_blocks(&mut hir); 

remove_unreachable_for_updates(&mut hir); 

remove_unreachable_fallthroughs(&mut hir); 

remove_unreachable_do_while_statements(&mut hir); 

mark_instruction_ids(&mut hir)?; 

mark_predecessors(&mut hir); 

``` 

This was pretty straightforward. I ran into one borrow checker issue with (iirc) 
`remove_unreachable_for_updates` where i needed to simultaneously hold a mutable 
reference into the HIR (to write the ForTerminal) and also get an immutable 
reference to check if the update block is reachable. The challenge is this: 

```rust 

for block in hir.blocks.values_mut() { 

^^^^^^^^^^^^^^^^^^^^^^^ hir borrowed mutably here 

if let TerminalValue::ForTerminal(terminal) = &mut block.terminal.value { 

if let Some(update) = terminal.update { 

if !hir.blocks.contains(&update) { 

^^^^^^^^^^ borrowed immutably here 

terminal.update = None; 

^^^^^^^^ mutable borrow still active here (and also bc of the loop) 

} 

} 

} 

} 

``` 

I quickly worked around this as we do in the other passes here by first building 
a set of the block ids contained in the function (so that the 
`hir.blocks.contains()` call becomes a call to the copied set of block ids). 

An alternative would be to add a helper function for mutable iteration which 
takes the desired value out of the data structure so that you can safely mutate 
it and reference the rest of the HIR. Usage might look like this: 

```rust 

hir.blocks.each_mut(|mut block, hir| { 

if let TerminalValue::ForTerminal(terminal) = &mut block.terminal.value { 

if let Some(update) = terminal.update { 

if !hir.blocks.contains(&update) { 

terminal.update = None; 

} 

} 

} 

}) 

``` 

The lambda would receive the current `block` as a mutable reference, and for the 
duration of the call `hir.blocks[block.id]` would be set to a sentinel value 
that would crash if accessed. Meanwhile, `hir` would be a readonly reference to 
the HIR, allowing the lambda to otherwise lookup information on the HIR but not 
mutate it. This seems...kinda fine? But also not immediately necessary as 
there's an easy and efficient-enough-workaround for the cases i've encountered 
so far.",Joe Savona,2023-07-06T00:24:43Z
6c3792e8d5e79d94f0d5ee24a1c0b3262ac067fa,"[rust] Initial translation of HIR and related types 

This is an initial translation of HIR (minus the ReactiveFunction bits). It's 
mostly a straightforward translation. A few differences: 

* Instead of Effect having an Unknown variant, we type `Place.effect: 
Option<Effect>`. Maybe i'll revert that but it seems right. 

* Terminal is divided into `Terminal { id: InstructionId, value: TerminalValue 
}` and `enum TerminalValue { ... }`, so that we can reference the terminal's id 
without caring about which kind of terminal it is. 

* Each instruction value variant gets a named struct, whereas in JS we had lots 
of anonymous InstructionValue variants. 

* Rust generators are still an unstable nightly feature and likely to change 
syntax enough that it seems safer not to rely on them. So 
`eachTerminalSuccessor()` returns a `Vec<BlockId>`. If the perf of this is bad 
enough we can switch to something like SmallVec (a popular crate) which stores a 
few elements inline on the stack to optimize for small vecs (which our case 
should be). 

Perhaps more importantly, what's _not different_: I kept the existing approach 
of BasicBlocks having a Vec of owned instruction instances, with 
InstructionValue variant operands as Places rather than indices into a shared 
instruction array. If this works out it will make porting straightforward. 

However there's one aspect of this that is incorrect: right now each `Place` 
owns its `Identifier`, whereas in JS the Identifier instances are shared mutable 
references. I'll definitely need to refactor the data structures to allow 
sharing Identifiers in some form, at which point we may want to change other 
things too.",Joe Savona,2023-07-06T00:24:40Z
4c0122f4cf5b636f0073aab50de93115d6588591,[rust] Small improvements plus snapshot testing for estree,Joe Savona,2023-07-06T00:24:39Z
2b168ad673f35854a16b1b5df5ccd916331aa8d1,"[rust] SWC->ESTree conversion 

Start of converting swc's representation into our estree format.",Joe Savona,2023-07-06T00:24:38Z
4230eb63d8e05709b09eb6dc4d2923b71a01a257,"[rust] ESTree representation with basic serialization support 

Start of an `estree` crate for representing ESTree with serialization to/from 
ESTree JSON. To get the serialization to work quickly I took some shortcuts and 
uses a slightly less precise modeling. Longer-term we can write some custom 
serialization code and get more precise types (eg avoid the `ExpressionLike` 
enum in favor of proper Expression and ExpressionOrFoo types).",Joe Savona,2023-07-06T00:24:37Z
292f07e19f62f881e73cb111f8eeb7d7ee9e42d3,"[rust] SWC usage example 

Basic example of parsing some code with SWC and then running name resolution.",Joe Savona,2023-07-06T00:24:36Z
e91142dd69b0454e0d4e934c55dd541344fe32ca,"Cleanup unused unstable_startTransition, unstable_useTransition, unstable_useDeferredValue exports from fb packages (#27056)

## Summary

came across these TODOs – an internal grep indicated that remaining
callsites have been cleaned up, so these can now be removed.

## How did you test this change?

```
yarn flow dom-browser
yarn test
```",Noah Lemen,2023-07-05T21:23:43Z
7118f5dd7bf5f1c44d0d2944ef8ad58e423909ad,"[ESLint] Disallow hooks in async functions (#27045)

Hooks cannot be called in async functions, on either the client or the
server. This mistake sometimes happens when using Server Components,
especially when refactoring a Server Component to a Client Component.

React logs a warning at runtime, but it's even better to catch this with
a lint rule since it will show immediate inline feedback in the editor.

I added this to the existing ""Rules of Hooks"" ESLint rule.",Andrew Clark,2023-07-05T15:44:28Z
d10885ae0e7a33b198299d32b881a1bc96fb967f,"[snap] Blow up if testfilter is not found in filter mode 

No more failing silently when testfilter file is not found.",Sathya Gunasekaran,2023-07-05T13:23:18Z
4a8b36b8b12d4df5aa930c7adeaafc66d924cd3b,"[hir] Check for globals while lowering UpdateExpression 

lowerIdentifierForAssignment does extra checks such as checking if globals are 
lvalues. 

UpdateExpression lowers into an assignment and previously we missed out on such 
checks.",Sathya Gunasekaran,2023-07-05T14:51:09Z
8eca0315081d6843fd9405d1c949273a6ba67cc6,[test] Add failing test for mutating global,Sathya Gunasekaran,2023-07-05T14:51:05Z
035a41c4e2aadad8f8826396940af404e87dd772,"React DevTools 4.27.8 -> 4.28.0 (#27051)

List of changes:
* Devtools:-Removed unused CSS ([Biki-das](https://github.com/Biki-das)
in [#27032](https://github.com/facebook/react/pull/27032))
* fix[devtools/profilingCache-test]: specify correct version gate for
test ([hoxyq](https://github.com/hoxyq) in
[#27008](https://github.com/facebook/react/pull/27008))
* fix[devtools/ci]: fixed incorrect condition calculation for
@reactVersion annotation ([hoxyq](https://github.com/hoxyq) in
[#26997](https://github.com/facebook/react/pull/26997))
* fix[ci]: fixed jest configuration not to skip too many devtools tests
([hoxyq](https://github.com/hoxyq) in
[#26955](https://github.com/facebook/react/pull/26955))
* fix[devtools/standalone]: update webpack configurations
([hoxyq](https://github.com/hoxyq) in
[#26963](https://github.com/facebook/react/pull/26963))
* fix[devtools]: check if fiber is unmounted before trying to highlight
([hoxyq](https://github.com/hoxyq) in
[#26983](https://github.com/facebook/react/pull/26983))
* feat[devtools]: support x_google_ignoreList source maps extension
([hoxyq](https://github.com/hoxyq) in
[#26951](https://github.com/facebook/react/pull/26951))
* chore[devtools]: upgrade to webpack v5
([hoxyq](https://github.com/hoxyq) in
[#26887](https://github.com/facebook/react/pull/26887))
* fix[devtools]: display NaN as string in values
([hoxyq](https://github.com/hoxyq) in
[#26947](https://github.com/facebook/react/pull/26947))
* fix: devtools cannot be closed correctly
([Jack-Works](https://github.com/Jack-Works) in
[#25510](https://github.com/facebook/react/pull/25510))
* Fix:- Fixed dev tools inspect mode on Shadow dom
([Biki-das](https://github.com/Biki-das) in
[#26888](https://github.com/facebook/react/pull/26888))
* Updated copyright text to Copyright (c) Meta Platforms, Inc. and its …
([denmo530](https://github.com/denmo530) in
[#26830](https://github.com/facebook/react/pull/26830))
* Fix strict mode badge URL ([ibrahemid](https://github.com/ibrahemid)
in [#26825](https://github.com/facebook/react/pull/26825))",Ruslan Lesiutin,2023-07-04T08:11:14Z
6e6ecfc4d9c44b3379c3fd341f83083ec4e5c1c4,"[eslint-plugin] Remove babel/traverse and babel/parser 

These are unused since we switched over to hermes-parser",Lauren Tan,2023-07-03T16:25:37Z
2a882d798bbed17f34e76f97e77c81ad783bb0e1,[eslint-plugin][ez] Remove unused scripts,Lauren Tan,2023-07-03T16:25:35Z
c6b437b4026c06843a19eb3bce9da8ef4d15aa63,"[eslint-plugin] Remove fbt dependencies 

I incorrectly included these as deps, we were only using these to verify 
codegen. It seems fine to leave in but when I imported it internally vscode 
would error, so just remove it",Lauren Tan,2023-07-03T16:25:33Z
53ac21937864c1c7fc3d9077bc2d80b3e11193e3,"Devtools:-Removed unused CSS (#27032)

I tried to check out for the CSS bundle using the
[eslint-plugin-css-modules](https://www.npmjs.com/package/eslint-plugin-css-modules),
and ran it locally , seems like There are lot of unused styles and
classes present .
I have attached the output below after running the lint command.

https://gist.github.com/Biki-das/647ceb7383b43cca9c8619e1dc33fe0d

All the shared.css files should not be touched i feel as they are being
used randomly by some file

Thoughts @hoxyq",BIKI DAS,2023-07-03T11:16:04Z
cff435ca3dbd5e5d6ad6d590d6ea334ad23b92b9,[plugin] Remove duplicate export statement,Sathya Gunasekaran,2023-07-03T10:21:05Z
5c8dabf8864e1d826c831d6096b2dfa66309961a,"Detect and warn about native async function components in development (#27031)

Adds a development warning to complement the error introduced by
https://github.com/facebook/react/pull/27019.

We can detect and warn about async client components by checking the
prototype of the function. This won't work for environments where async
functions are transpiled, but for native async functions, it allows us
to log an earlier warning during development, including in cases that
don't trigger the infinite loop guard added in
https://github.com/facebook/react/pull/27019. It does not supersede the
infinite loop guard, though, because that mechanism also prevents the
app from crashing.

I also added a warning for calling a hook inside an async function. This
one fires even during a transition. We could add a corresponding warning
to Flight, since hooks are not allowed in async Server Components,
either. (Though in both environments, this is better handled by a lint
rule.)",Andrew Clark,2023-07-02T02:44:41Z
47385f8fa448e52326f08d0afa357339fac6f86e,"Don't transpile async/await in tests (#27029)

Modern runtimes support native async/await, as does the version of Node
we use for our tests. To match how most of our users run React, this
disables the transpilation of async/await in our test suite.",Andrew Clark,2023-06-30T20:29:23Z
1fdacbefd641d0ac1c97b159760eb03768771049,"[DOM] Add unstable_batchedUpdates to server-rendering-stub (#27028)

`unstable_batchedUpdates` shouldn't really be called on the server but
the semantics are clear enough and we can provide a trivial
implementation that calls the provided callback so we are adding it to
the server-rendering-stub.

This means we will also keep it around when we make the top level
react-dom exports match the server-rendering-stub in the next major",Josh Story,2023-06-30T18:19:18Z
7f362de1588d98438787d652941533e21f2f332d,"Revert ""Fix: Detect infinite update loops caused by render phase updates (#26625)"" (#27027)

This reverts commit 822386f252fd1f0e949efa904a1ed790133329f7.

This broke a number of tests when synced internally. We'll need to
investigate the breakages before relanding this.",Jan Kassens,2023-06-30T16:51:11Z
fc801116c80b68f7ebdaf66ac77d5f2dcd9e50eb,"Detect crashes caused by Async Client Components (#27019)

Suspending with an uncached promise is not yet supported. We only
support suspending on promises that are cached between render attempts.
(We do plan to partially support this in the future, at least in certain
constrained cases, like during a route transition.)

This includes the case where a component returns an uncached promise,
which is effectively what happens if a Client Component is authored
using async/await syntax.

This is an easy mistake to make in a Server Components app, because
async/await _is_ available in Server Components.

In the current behavior, this can sometimes cause the app to crash with
an infinite loop, because React will repeatedly keep trying to render
the component, which will result in a fresh promise, which will result
in a new render attempt, and so on. We have some strategies we can use
to prevent this — during a concurrent render, we can suspend the work
loop until the promise resolves. If it's not a concurrent render, we can
show a Suspense fallback and try again at concurrent priority.

There's one case where neither of these strategies work, though: during
a sync render when there's no parent Suspense boundary. (We refer to
this as the ""shell"" of the app because it exists outside of any loading
UI.)

Since we don't have any great options for this scenario, we should at
least error gracefully instead of crashing the app.

So this commit adds a detection mechanism for render loops caused by
async client components. The way it works is, if an app suspends
repeatedly in the shell during a synchronous render, without committing
anything in between, we will count the number of attempts and eventually
trigger an error once the count exceeds a threshold.

In the future, we will consider ways to make this case a warning instead
of a hard error.

See https://github.com/facebook/react/issues/26801 for more details.",Andrew Clark,2023-06-29T20:05:00Z
d9c333199ed19798484e49eef992735321c32cb9,"[Flight] Add Serialization of Typed Arrays / ArrayBuffer / DataView (#26954)

This uses the same mechanism as [large
strings](https://github.com/facebook/react/pull/26932) to encode chunks
of length based binary data in the RSC payload behind a flag.

I introduce a new BinaryChunk type that's specific to each stream and
ways to convert into it. That's because we sometimes need all chunks to
be Uint8Array for the output, even if the source is another array buffer
view, and sometimes we need to clone it before transferring.

Each type of typed array is its own row tag. This lets us ensure that
the instance is directly in the right format in the cached entry instead
of creating a wrapper at each reference. Ideally this is also how
Map/Set should work but those are lazy which complicates that approach a
bit.

We assume both server and client use little-endian for now. If we want
to support other modes, we'd convert it to/from little-endian so that
the transfer protocol is always little-endian. That way the common
clients can be the fastest possible.

So far this only implements Server to Client. Still need to implement
Client to Server for parity.

NOTE: This is the first time we make RSC effectively a binary format.
This is not compatible with existing SSR techniques which serialize the
stream as unicode in the HTML. To be compatible, those implementations
would have to use base64 or something like that. Which is what we'll do
when we move this technique to be built-in to Fizz.",Sebastian Markbåge,2023-06-29T17:16:12Z
2153a29661e5998604225f81d93c8a20a1934adf,"[Flight] createServerReference should export $$FORM_ACTION on the Server (#26987)

Currently, only the browser build exposes the `$$FORM_ACTION` helper.
It's used for creating progressive enhancement fro Server Actions
imported from Client Components. This helper is only useful in SSR
builds so it should be included in the Edge/Node builds of the client.

I also removed it from the browser build. We assume that only the Edge
or Node builds of the client are used
together with SSR. On the client this feature is not needed so we can
exclude the code. This might be a bit unnecessary because it's not that
much code and in theory you might use SSR in a Service Worker or
something where the Browser build would be used but currently we assume
that build is only for the client. That's why it also don't take an
option for reverse
look up of file names.",Sebastian Markbåge,2023-06-28T23:12:34Z
5945e068abf1da4aec24aba2839abfbb0fe94a3d,"[Flight] Instrument the Promise for Async Module instead of using a Module Cache (#26985)

Currently, since we use a module cache for async modules, it doesn't
automatically get updated when the module registry gets updated (HMR).

This technique ensures that if Webpack replaces the module (HMR) then
we'll get the new Promise when we require it again.

This technique doesn't work for ESM and probably not Vite since ESM will
provide a new Promise each time you call `import()` but in the
Webpack/CJS approach this Promise is an entry in the module cache and
not a promise for the entry.

I tried to replicate the original issue in the fixture but it's tricky
to replicate because 1) we can't really use async modules the same way
without compiling both server and client 2) even then I'm not quite sure
how to repro the HMR issue.",Sebastian Markbåge,2023-06-28T18:30:09Z
a1c62b8a7635c0bc51e477ba5437df9be5a9e64f,"[Flight] Add Support for Map and Set (#26933)

We already support these in the sense that they're Iterable so they just
get serialized as arrays. However, these are part of the Structured
Clone algorithm [and should be
supported](https://github.com/facebook/react/issues/25687).

The encoding is simply the same form as the Iterable, which is
conveniently the same as the constructor argument. The difference is
that now there's a separate reference to it.

It's a bit awkward because for multiple reference to the same value,
it'd be a new Map/Set instance for each reference. So to encode sharing,
it needs one level of indirection with its own ID. That's not really a
big deal for other types since they're inline anyway - but since this
needs to be outlined it creates possibly two ids where there only needs
to be one or zero.

One variant would be to encode this in the row type. Another variant
would be something like what we do for React Elements where they're
arrays but tagged with a symbol. For simplicity I stick with the simple
outlining for now.",Sebastian Markbåge,2023-06-27T21:10:35Z
822386f252fd1f0e949efa904a1ed790133329f7,"Fix: Detect infinite update loops caused by render phase updates (#26625)

This PR contains a regression test and two separate fixes: a targeted
fix, and a more general one that's designed as a last-resort guard
against these types of bugs (both bugs in app code and bugs in React).

I confirmed that each of these fixes separately are sufficient to fix
the regression test I added.

We can't realistically detect all infinite update loop scenarios because
they could be async; even a single microtask can foil our attempts to
detect a cycle. But this improves our strategy for detecting the most
common kind.

See commit messages for more details.",Andrew Clark,2023-06-27T17:26:35Z
80d9a40114bb43c07d021e8254790852f450bd2b,"Remove useMutableSource (#27011)

## Summary

This PR cleans up `useMutableSource`. This has been blocked by a
remaining dependency internally at Meta, but that has now been deleted.

<!--
Explain the **motivation** for making this change. What existing problem
does the pull request solve?
-->

## How did you test this change?

```
yarn flow
yarn lint
yarn test --prod
```

<!--
Demonstrate the code is solid. Example: The exact commands you ran and
their output, screenshots / videos if the pull request changes the user
interface.
How exactly did you verify that your PR solves the issue you wanted to
solve?
  If you leave this empty, your PR will very likely be closed.
-->",Noah Lemen,2023-06-27T16:45:46Z
6aacd3fa1567ed35c7ae4a69627ec1a1543df760,"fix[devtools/profilingCache-test]: specify correct version gate for test (#27008)

- Correctly gate the test to `[18.0.0, 18.2.0]` versions of react, as it
was initially defined before
https://github.com/facebook/react/pull/26742
- I have recently fixed the gating logic in
https://github.com/facebook/react/pull/26955 and
https://github.com/facebook/react/pull/26997, should be stable now
- I have added a non-gated version of this test, which should run only
for the current version of react, the one we build from sources
- The test version for react `v[18.0.0, 18.2.0]` should expect
`""priorityLevel"": ""Immediate""`, the other `""priorityLevel"": ""Normal""`,
as it was changed in https://github.com/facebook/react/pull/26512",Ruslan Lesiutin,2023-06-26T16:37:53Z
8ec962d825fc948ffda5ab863e639cd4158935ba,"fix[devtools/ci]: fixed incorrect condition calculation for @reactVersion annotation (#26997)

Suppose that you have this setup for devtools test:
```
// @reactVersion <= 18.1
// @reactVersion >= 17.1
```

With previous implementation, the accumulated condition will be `""<=
18.1"" && "">= 17.1""`, which is just `"">= 17.1""`, when evaluated. That's
why we executed some tests for old versions of react on main (and
failed).

With these changes the resulting condition will be `""<= 18.1 >= 17.1""`,
not using `&&`, because semver does not support this operator. All
currently failing tests will be skipped now as expected.

Also increased timeout value for shell server to start",Ruslan Lesiutin,2023-06-23T15:45:53Z
64637ac84c0dcafb93bfdaf38a92c0452f1f0670,[playground] Refactor pragma parsing into separate function,Sathya Gunasekaran,2023-06-23T09:26:00Z
3883eb9507d29ac36410d6808f5332fa85b8438c,[playground] Make all options configurable,Sathya Gunasekaran,2023-06-23T09:25:59Z
0892e305bc8397fee6db6e8e14d36fcb99b49de9,"[eslint-plugin] Clean up error message 

Omits some unncessary details from the error message surfaced in eslint",Lauren Tan,2023-06-28T15:43:56Z
f850d3b26524db907f51592dcdf5d811e6aefc2e,Improve remaining InvalidReact error messages,Lauren Tan,2023-06-28T15:43:56Z
dda59d093a9dae733f674ba91557a2ac7c1cb61b,Add InvalidJS error severity,Lauren Tan,2023-06-28T15:43:55Z
3fb89373913009eca2a7810d6d1729de414b5379,Add first example of error suggestion,Lauren Tan,2023-06-27T18:01:40Z
448ed2b67b7bbfe2882aadf9eb92e252a0ff4b1f,"Refactor CompilerErrorDetails 

- Made most static methods on CompilerError take a single options object   as an 
argument. With the exception of invariant which takes a condition and an options 
object. - Added a new `suggestions` field on CompilerErrorDetail, which we'll   
use to provide eslint suggestions - Updated eslint-plugin-react-forget to handle 
suggestions",Lauren Tan,2023-06-27T18:01:39Z
c3d678985734c3657a551b88e03bbfca36228ae8,"Reclassify existing errors 

Most of these errors were incorrectly using InvalidInput as a catchall for 
rejecting code. I went through each one and manually updated them to be more 
accurate",Lauren Tan,2023-06-27T18:01:39Z
6c4318e5c2a1b40e71e9cfb5330022dc63916119,Add InvalidReact and InvalidConfig error severities,Lauren Tan,2023-06-27T18:01:38Z
e762d5730bb25f5faf463165d2b98af4865f0a16,[test] Update stale test expectations,Sathya Gunasekaran,2023-06-23T09:21:38Z
70e998a1064cc1e8e8f9103e0c00d37fbbcf71c1,"Fix disableStrictPassiveEffect not working under Suspense (#26989)

In https://github.com/facebook/react/pull/26914 I added an extra logic
to turn off double useEffect if there is an `Offscreen`
tag. But `Suspense` uses `Offscreen` tag internally and that turns off
`disableStrictPassiveEffect` for everything.",Tianyu Yao,2023-06-22T20:12:30Z
c8deb5db660f3f6eeca30d29b4bd48d9e82b3792,"fix[ci]: fixed jest configuration not to skip too many devtools tests (#26955)

## Summary
Running `yarn test --project devtools --build` currently skips all
non-gated (without `@reactVersion` directives) devtools tests. This is
not expected behaviour, these changes are fixing it.

There were multiple related PRs to it:
- https://github.com/facebook/react/pull/26742
- https://github.com/facebook/react/pull/25712
- https://github.com/facebook/react/pull/24555

With these changes, the resulting behaviour will be:
- If `REACT_VERSION` env variable is specified:
    - jest will not include all non-gated test cases in the test run
- jest will run only a specific test case, when specified
`REACT_VERSION` value satisfies the range defined by `@reactVersion`
directives for this test case

- If `REACT_VERSION` env variable is not specified, jest will run all
non-gated tests:
   - jest will include all non-gated test cases in the test run
- jest will run all non-gated test cases, the only skipped test cases
will be those, which specified the range that does not include the next
stable version of react, which will be imported from `ReactVersions.js`

## How did you test this change?
Running `profilingCache` test suite without specifying `reactVersion`
now skips gated (>= 17 & < 18) test
<img width=""1447"" alt=""Screenshot 2023-06-15 at 11 18 22""
src=""https://github.com/facebook/react/assets/28902667/cad58994-2cb3-44b3-9eb2-1699c01a1eb3"">

Running `profilingCache` test suite with specifying `reactVersion` to
`17` now runs this test case and skips others correctly
<img width=""1447"" alt=""Screenshot 2023-06-15 at 11 20 11""
src=""https://github.com/facebook/react/assets/28902667/d308960a-c172-4422-ba6f-9c0dbcd6f7d5"">

Running `yarn test --project devtools ...` without specifying
`reactVersion` now runs all non-gated test cases
<img width=""398"" alt=""Screenshot 2023-06-15 at 12 25 12""
src=""https://github.com/facebook/react/assets/28902667/2b329634-0efd-4c4c-b460-889696bbc9e1"">

Running `yarn test --project devtools ...` with specifying
`reactVersion` (to `17` in this example) now includes only gated tests
<img width=""414"" alt=""Screenshot 2023-06-15 at 12 26 31""
src=""https://github.com/facebook/react/assets/28902667/a702c27e-4c35-4b12-834c-e5bb06728997"">",Ruslan Lesiutin,2023-06-22T08:33:05Z
6c84b505c746cd86bf55bee36faa15240273c2ce,"fix[devtools/standalone]: update webpack configurations (#26963)

## Summary
Overlooked when was working on
https://github.com/facebook/react/pull/26887.

- Added `webpack` packages as dev dependencies to `react-devtools-core`,
because it calls webpack to build
- Added `process` package as dev dependency, because it is injected with
`ProvidePlugin` (otherwise fails with Safari usage)
- Updated rule for sourcemaps
- Listed required externals for `standalone` build

Tested on RN application & Safari",Ruslan Lesiutin,2023-06-22T07:55:20Z
794b770dbd6be48d42438ea76911d32c37c7dd6e,"fix[devtools]: check if fiber is unmounted before trying to highlight (#26983)

For React Native environment, we sometimes spam the console with
warnings `""Could not find Fiber with id ...""`.

This is an attempt to fix this or at least reduce the amount of such
potential warnings being thrown.

Now checking if fiber is already unnmounted before trying to get native
nodes for fiber. This might happen if you try to inspect an element in
DevTools, but at the time when event has been received, the element was
already unmounted.",Ruslan Lesiutin,2023-06-22T07:51:24Z
254cbdbd6d851a30bf3b649a6cb7c52786766fa4,"Add a temporary internal option to disable double useEffect in legacy strict mode (#26914)

<!--
  Thanks for submitting a pull request!
We appreciate you spending the time to work on these changes. Please
provide enough information so that others can review your pull request.
The three fields below are mandatory.

Before submitting a pull request, please make sure the following is
done:

1. Fork [the repository](https://github.com/facebook/react) and create
your branch from `main`.
  2. Run `yarn` in the repository root.
3. If you've fixed a bug or added code that should be tested, add tests!
4. Ensure the test suite passes (`yarn test`). Tip: `yarn test --watch
TestName` is helpful in development.
5. Run `yarn test --prod` to test in the production environment. It
supports the same options as `yarn test`.
6. If you need a debugger, run `yarn test --debug --watch TestName`,
open `chrome://inspect`, and press ""Inspect"".
7. Format your code with
[prettier](https://github.com/prettier/prettier) (`yarn prettier`).
8. Make sure your code lints (`yarn lint`). Tip: `yarn linc` to only
check changed files.
  9. Run the [Flow](https://flowtype.org/) type checks (`yarn flow`).
  10. If you haven't already, complete the CLA.

Learn more about contributing:
https://reactjs.org/docs/how-to-contribute.html
-->

## Summary

<!--
Explain the **motivation** for making this change. What existing problem
does the pull request solve?
-->
We are upgrading React 17 codebase to React18, and `StrictMode` has been
great for surfacing potential production bugs on React18 for class
components. There are non-trivial number of test failures caused by
double `useEffect` in StrictMode. To prioritize surfacing and fixing
issues that will break in production now, we need a flag to turn off
double `useEffect` for now in StrictMode temporarily. This is a
Meta-only hack for rolling out `createRoot` and we will fast follow to
remove it and use full strict mode.

## How did you test this change?

<!--
Demonstrate the code is solid. Example: The exact commands you ran and
their output, screenshots / videos if the pull request changes the user
interface.
How exactly did you verify that your PR solves the issue you wanted to
solve?
  If you leave this empty, your PR will very likely be closed.
-->
jest",Tianyu Yao,2023-06-21T18:14:57Z
e3fb7c1de1ed375e32397b3502a30b8ae4c2db9f,"feat[devtools]: support x_google_ignoreList source maps extension (#26951)

## Summary
This was originally implemented by Mengdi @mondaychen in
https://github.com/facebook/react/pull/26506.

Because we patch console methods (to append components stack and some
other features), errors in console will include
`react_devtools_backend-....js` in its stack traces. Example:
<img width=""763"" alt=""Screenshot 2023-06-15 at 13 31 49""
src=""https://github.com/facebook/react/assets/28902667/fa9c3d26-b6c5-4965-af71-62d100cd806d"">

Using https://github.com/mondaychen/devtools-ignore-webpack-plugin to
support [x_google_ignoreList source maps
extension](https://developer.chrome.com/blog/devtools-better-angular-debugging/#the-x_google_ignorelist-source-map-extension).

@mondaychen created a react app, which throws an error via
`console.error`, when user click on the button -
https://3owqsn.csb.app/.

Stack trace with these changes: 
<img width=""759"" alt=""Screenshot 2023-06-14 at 14 26 38""
src=""https://github.com/facebook/react/assets/28902667/b118b168-3200-4a47-9718-39fc455ea993"">",Ruslan Lesiutin,2023-06-21T11:36:48Z
0897cc8a0f51afb2576326bb2a91af15182e7c40,"Add failing test for DropMemoCalls failing to DCE dep array 

Found this while running Forget on the React tests. 

This isn't a high priority because the ESLint plugin would've caught this. But 
it'd be nice if either our validation rules caught this or if our compiler did 
correctly eliminate the dep array.",Sathya Gunasekaran,2023-06-20T13:58:36Z
2ca614cb4f25166d7e4ac054e78331c4084a1ef0,[playground] Sync playground flags to Store experiment flags,Sathya Gunasekaran,2023-06-23T09:06:56Z
7caa18c4b937c0c24a3199ee08ffc61a520bb247,[playground] Parse pragma in playground,Sathya Gunasekaran,2023-06-23T09:06:55Z
dfb9e09984656937bf426999adc17c035a650660,[eslint-plugin][ez] Plugin options are const,Lauren Tan,2023-06-22T14:18:43Z
9c033a481d41252d88f05668723f7e061d37f562,"[eslint-plugin] Only report on InvalidInput errors 

Invariants aren't actionable by users, so we can omit reporting them in eslint 
as errors (while continuing to throw in the compiler itself)",Lauren Tan,2023-06-22T14:18:43Z
e7e67f335adea5a24ff59a467b22b92702350a5e,"Use CompilerError.invariant consistently 

This PR updates all current usages of invariant to CompilerError.invariant along 
with any available locs",Lauren Tan,2023-06-22T14:18:42Z
e9faa5b90d8e5f979216e725eec2d4ca91f78807,SourceLocation can be null,Lauren Tan,2023-06-22T14:18:42Z
3f2b346ba0df118e2e6a1bbc4387159d82437873,"Make CompilerError.invariant assert the condition 

This allows us to mimic the `invariant` api, which means you can just assert 
that something holds true after execution proceeds to the next line without 
throwing",Lauren Tan,2023-06-22T14:18:41Z
6c425f6b369bfc6b31a9d7931b358ec3c42f30b1,"Remove codeframe/nodepath options from CompilerError 

These were effectively unused since we almost always passed in null when 
creating errors, so remove them and instead pass in a `loc` explicitly. The 
downside is that we no longer will see Babel codeframes in our test fixtures, 
which doesn't seem like a huge loss",Lauren Tan,2023-06-22T14:18:41Z
ba75c96077494248e8c877cc3c403372d866b3e9,"Fix mutable range validation in PrintHIR 

Fixes the mutable range validation in PrintHIR: when we checked the identifier 
scope's range we failed to allow end=start=0 cases which are also valid. 

While I was here, I created a separate assertion pass to check all ranges, that 
way we aren't relying on the printer to validate them. The pass is on for 
playground and tests, but disabled by default so it can't break internal apps.",Joe Savona,2023-06-21T23:08:44Z
fa913b423e5b039cb948464ccd2aef96011b6006,"Distinguish internal invariant passes from user code validation 

Distinguishes between two types of ""validation"" passes: 

- Passes which assert the validity of the HIR. These remain in HIR/ but are 
renamed ""assertFoo"". 

- Passes which validate that the user code is correct. These move to 
Validation/.",Joe Savona,2023-06-20T22:16:57Z
bbb5840e73f384ef735cfe1f2b1dafcf2109477e,"Handle phi nodes for ValidateFrozenLambdas 

Extends ValidateFrozenLambdas to find cases where a mutable lambda flows into a 
phi node and the phi is later frozen.",Joe Savona,2023-06-20T22:16:56Z
6efd1f99d77e50ef26d94c411a1e0336a39b64ca,"Make function name a string not an identifier 

Fixes #1751. Function ids can be plain strings, and we can refer to them as 
globals rather than via a local identifier. In addition to the bug from $1751 
this also cleans up an existing todo.",Joe Savona,2023-06-20T22:16:55Z
4a36b8379611bfaf4bc628eb45542bc3946961cb,"Ref validation allows passing refs as props 

Updates ValidateNoRefAccessInRender to allow passing refs to JSX, but continue 
disallowing passing ref values (so `ref` is okay but not `ref.current`)",Joe Savona,2023-06-20T17:11:56Z
d1c8cdae3b20a670ee91b684e8e0ad0c400ae51c,"Ensure updates are applied when diffInCommitPhase is on (#26977)

When we diffInCommitPhase there's no updatePayload, which caused no
update to be applied.

This is unfortunate because it would've been a lot easier to see this
oversight if we didn't have to support both flags.

I also carified that updateHostComponent is unnecessary in the new flag.
We reuse updateHostComponent for HostSingleton and HostHoistables since
it has a somewhat complex path but that means you have to remember when
editing updateHostComponent that it's not just used for that tag.
Luckily with the new flag, this is actually unnecessary since we just
need to mark it for update if any props have changed and then we diff it
later.",Sebastian Markbåge,2023-06-20T01:24:53Z
a9868cc2b1c19066e9d93bbc404fdca02a314651,"Fix memoization of lambdas in @enableOptimizeFunctionExpr feature 

This is a fix specifically for the `enableOptimizeFunctionExpression` feature 
(disabled by default). I tried running all of our fixtures with that flag on 
everywhere, and this was the only issue. It's actually extracted from another 
fixture which is more complicated, this is a distilled version. There were two 
bugs: 

* DCE was running after LeaveSSA when it needs to run before. Fixing the order 
means code inside the function expression stops getting removed. 

* In the feature flag, context variables share Identifier instances with the 
surrounding code, whereas they are distinct instances without the feature. This 
meant that mutable ranges from inside the function propagated outside the 
function, throwing off our inference. The fix was to reset the ranges of context 
variables after inferring the function expression's effects.",Joe Savona,2023-06-16T21:42:19Z
04f4b50997f347c2c7793274872cb9e70828905d,"Integrate mutable context identifier inference, improve frozen function 
inference 

Integrates the new inference to detect definitive mutations of context 
variables. This allows us to more precisely infer mutable function expressions 
and validate that they aren't passed where frozen values are expected.",Joe Savona,2023-06-16T21:42:19Z
a2af8776a44d1a621f5380155adcc9fa9f25fb9d,"Add InferMutableContextVariables (unused) 

New pass to infer context variables which are definitively mutated, 
distinguishing from context variables which _may_  have been mutated. See the 
code comment on the new pass for more details.",Joe Savona,2023-06-16T21:42:18Z
59a1f2a5b00bd6fa81c5dc6494fb691ee6db86d6,"AnalyzeFunction: ref values take priority over other mutations 

Small tweak necessary for the subsequent PRs, refs and ref values take 
precedence over other mutations when computing the effect type of context 
variables. We always want to record ref access within a function as capture 
(since we have later validation) rather than a mutation. For now this has no 
impact, either order records a Capture. But it allows later diffs to make 
non-ref cases have other effects.",Joe Savona,2023-06-16T21:42:17Z
278c7f56babc574a66392eacace297715e4d5446,"ValidateFrozenLambdas: visit terminals 

The original version of the code wasn't checking return values. I missed this 
since my examples were passing functions _into_ the return value, as opposed to 
return the functions directly. This revealed some existing test fixtures that 
were technically invalid, but easy to fix by changing the return value.",Joe Savona,2023-06-16T21:42:16Z
1db261980741de0ba5590332c60f44bc90a2d1b9,"InferReferenceEffects: distinguish conditional mutations in HIR 

In InferReferenceEffects, locations that are ConditionallyMutate are either 
recorded as a Mutate or Read, which means we lose the distinction btw 
conditional/unconditional mutation in later passes. This PR changes to remember 
that these places were conditionally mutable, used in later analysis.",Joe Savona,2023-06-16T21:42:16Z
19976d5f8336095250309200222e4850ace73d2f,[ez] Real location for function context values,Joe Savona,2023-06-16T21:42:15Z
f467774487a820e4d0a22aeba244436488667280,[babel-plugin][ez] Rename shouldCompile to shouldVisitNode,Lauren Tan,2023-06-20T16:30:07Z
46fa83d854c1332f45d1ba4b3cf11969023e4289,"[eslint-plugin] Disambiguate compiler errors without instanceof 

Babel re-emits errors from plugins so the `instanceof` check was no longer 
working",Lauren Tan,2023-06-20T16:30:07Z
2f0ab0ec9dc1ff02d28afadfb5d745be03ffc582,[eslint-plugin] Temporarily disable validateFrozenLambdas,Lauren Tan,2023-06-20T16:30:06Z
98633d10a6dd15e59269e9fe444329525c61707e,"Add a noEmit compiler option 

Defaults to false, ie it runs the codegen pass. When enabled it will simply run 
all passes up to codegen and then skip over it. Naming of this option is copied 
from [TypeScript](https://www.typescriptlang.org/tsconfig#noEmit) which has the 
same named option that makes the compiler only perform typechecking. 

I'm adding this option primarily to get around some issues running the eslint 
plugin on Meta code. The plugin would error because Forget would report 
duplicate Babel AST nodes, which I presume would only occur during codegen. It 
should also make it a tiny bit faster to not run codegen, which is a nice plus.",Lauren Tan,2023-06-20T16:30:06Z
79dbf6fc19bb26336f0043cc6fb62eaac2676f96,[eslint-plugin] Try using HermesParser,Lauren Tan,2023-06-20T16:30:05Z
059365d7260d5d7ba2a722aa5b427ab2d3b50877,"[eslint-plugin] Temporarily only lint on 'use forget' 

Temporarily enabling 'use forget' only mode for the linter to address #1751 so 
we can land the stack internally",Lauren Tan,2023-06-20T16:30:05Z
5c0622af3957ac876ce7ce301dcd2c34f3ef9e17,Add failing test for InferReferenceEffects bug,Lauren Tan,2023-06-20T16:30:04Z
e378eed0f3ec04319e9501d0a1424f5f71499590,"[eslint-plugin] Use babel plugin instead of manual traversal 

This was causing some issues in the eslint plugin where the babel `hub` wasn't 
defined. afaik the hub is only setup when running the plugin as part of a babel 
pipeline, instead of a manual parse/traversal. We're using some of that infra 
for printing codeframes",Lauren Tan,2023-06-16T20:23:18Z
a90b5371cca7cf68763e2e6f7a416093ee59ba76,[eslint-plugin] babel-plugin-fbt is a dependency,Lauren Tan,2023-06-16T18:12:35Z
daa23543ef35f18b56cf0d2f32e058783b0c0b73,"[ci] Run all tests 

CI will now run tests for all packages",Lauren Tan,2023-06-16T18:05:45Z
0fc4c94ef10695c27067e3ce53418988c956bbd4,Echo 'no tests' for packages without tests,Lauren Tan,2023-06-16T18:05:43Z
a558b1536a41768d50f4cd5f20ab01ac0eaf9824,"[babel-plugin] buildFunctionDeclaration errors are todos 

The existing errors thrown were marked as InvalidInput, which is now considered 
critical. This was causing an error in the sync since we had 2 occurrences of 
the errors being thrown. These are really todos and not invalid code.",Lauren Tan,2023-06-16T16:18:45Z
613e6f5fca3a7a63d115988d6312beb84d37b4db,"[flow] upgrade to 0.209.0 (#26958)

Small update keeping us current with the latest version of Flow.

Flow changelog: https://github.com/facebook/flow/blob/main/Changelog.md",Jan Kassens,2023-06-16T13:57:03Z
fc929cf4ead35f99c4e9612a95e8a0bb8f5df25d,"[Float][Fizz][Fiber] support imagesrcset and imagesizes for `ReactDOM.preload()` (#26940)

For float methods the href argument is usually all we need to uniquely
key the request. However when preloading responsive images it is
possible that you may need more than one preload for differing
imagesizes attributes. When using imagesrcset for preloads the href
attribute acts more like a fallback href. For keying purposes the
imagesrcset becomes the primary key conceptually.

This change updates the keying logic for `ReactDOM.preload()` when you
pass `{as: ""image""}`

1. If `options.imageSrcSet` is a non-emtpy string the key is defined as
`options.imageSrcSet + options.imageSizes`. The `href` argument is still
required but does not participate in keying.
2. If `options.imageSrcSet` is empty, missing, or an invalid format the
key is defined as the `href`. Changing the `options.imageSizes` does not
affect the key as this option is inert when not using
`options.imageSrcSet`

Additionally, currently there is a bug in webkit (Safari) that causes
preload links to fail to use imageSrcSet and fallback to href even when
the browser will correctly resolve srcset on an `<img>` tag. Because the
drawbacks of preloading the wrong image (href over imagesrcset) in a
modern browser outweight the drawbacks of not preloading anything for
responsive images in browsers that do not support srcset at all we will
omit the `href` attribute whenever `options.imageSrcSet` is provided. We
still require you provide an href since we want to be able to revert
this behavior once all major browsers support it

bug link: https://bugs.webkit.org/show_bug.cgi?id=231150",Josh Story,2023-06-15T21:50:22Z
86acc10f2596e1a6fe2fd57a5b325de85175800b,"[Float] Nonce preload support (#26939)

Some browsers, with some CSP configuration, will not preload a script if
the prelaod link tag does not provide a valid nonce attribute. This
change adds the ability to specify a nonce for `ReactDOM.preload(..., {
as: ""script"" })`",Josh Story,2023-06-15T20:39:48Z
501cf92f1e06cf88e4f0f2b49099f36568e794a5,Unify UnsafeInput and InvalidInput,Lauren Tan,2023-06-15T19:13:37Z
0d01d5f69cd7ded5513a86b72a9d719f837945fd,[eslint-plugin] Enable validation passes,Lauren Tan,2023-06-15T18:57:10Z
0fdb1e5ac74e46ad4302c31a4334f7dd8dc8765f,"[eslint-plugin] Add test for invariants 

Turning off this flag makes only critical errors throw, so TODO errors will no 
longer be surfaced by the plugin. The previously failing test for unsupported 
syntax is now valid.",Lauren Tan,2023-06-15T18:57:07Z
87a39e1995865b72b719ff9159786da7417d7e31,Mark InvalidInput errors as critical,Lauren Tan,2023-06-15T18:34:49Z
b68c409a6b8adb0e58d978b4d085b1197c030ac9,[eslint-plugin] Throw non CompilerErrors,Lauren Tan,2023-06-15T18:34:46Z
fe91cd8ac18e3a99e6a941cc4c5b0a4f20edbd4a,[eslint-plugin] Parse flow,Lauren Tan,2023-06-15T18:34:43Z
c402d8de7667dc71d36a4768b7b0ca4d032e6778,"[eslint-plugin] Fall back to context.getSourceCode() 

Older versions of eslint use the deprecated method, so add a fallback in the 
event a modern version of eslint isn't available",Lauren Tan,2023-06-15T16:52:57Z
c416fb16ca427fd022e33372acd1e1f756f02c70,[make-read-only] Make tsconfig more consistent with other pkgs,Lauren Tan,2023-06-15T16:52:56Z
6810ddbf56aab0deb185727a0b065d496ea64efa,[react-forget-runtime] Compile with typescript,Lauren Tan,2023-06-15T16:52:55Z
b6c1ca97183f482518d3ef596d1fda55a566e4b0,"[build] yarn bundle:meta builds and uploads all packages 

Some changes to our build infra to create a Meta bundle containing all packages. 
Needs corresponding changes in the internal upgrade commands",Lauren Tan,2023-06-15T16:52:55Z
aae9b01f91347e3417a20da861762ea0402d7cfb,"Test cases for inferring mutability of function expressions (as values) 

This PR contains just the test cases from #1717, showing some tricky cases 
around function expression mutability inference.",Joe Savona,2023-06-15T16:32:30Z
4ddc019aca8e08fd59cb43de5e0032be77d6174e,"chore[devtools]: upgrade to webpack v5 (#26887)

## Summary
- Updated `webpack` (and all related packages) to v5 in
`react-devtools-*` packages.
- I haven't touched any `TODO (Webpack 5)`. Tried to poke it, but each
my attempt failed and parsing hook names feature stopped working. I will
work on this in a separate PR.
- This work is one of prerequisites for updating Firefox extension to
manifests v3

related PRs:
https://github.com/facebook/react/pull/22267
https://github.com/facebook/react/pull/26506

## How did you test this change?
Tested on all surfaces, explicitly checked that parsing hook names
feature still works.",Ruslan Lesiutin,2023-06-14T12:15:52Z
f5c249db8b0bec00faa9633d67814e980c24fbb5,"fix[devtools]: display NaN as string in values (#26947)

## Summary

>Warning: Received NaN for the `children` attribute. If this is
expected, cast the value to a string.

Fixes this warning, when we try to display NaN as NaN in key-value list.",Ruslan Lesiutin,2023-06-14T10:45:30Z
a1723e18fd42e67d610adb0107c9015319613bd7,"[Flight] Only skip past the end boundary if there is a newline character (#26945)

Follow up to #26932

For regular rows, we're increasing the index by one to skip past the
last trailing newline character which acts a boundary. For length
encoded rows we shouldn't skip an extra byte because it'll leave us
missing one.

This only accidentally worked because this was also the end of the
current chunk which tests don't account for since we're just passing
through the chunks. So I added some noise by splitting and joining the
chunks so that this gets tested.",Sebastian Markbåge,2023-06-14T04:51:42Z
a7bf5ba614c6ddbd1eb3057c71f72efd1b6c21a9,"[Float][Fizz] add crossOrigin support for preloading bootstrap scripts and bootstrap modules (#26942)

The recently merged support for crossorigin in bootstrap scripts did not
implement the functionality for preloading. This adds it

see #26844",Josh Story,2023-06-13T20:59:45Z
7ed6084c39067e9a34a4d585e8dab2b75115cfa8,"[Float] use common float types (#26938)

Float types are currently spread out. this moves them to a single place
to ensure we properly handle the public type interface in all three
renderers.

This is a step towards moving the public interface and validation to a
common file shared by all three runtimes. Will also probably change the
function interface to be flatter",Josh Story,2023-06-13T20:30:26Z
90229eb925e2330667fb7c023a5c4317c7ae8363,"Add support for 'crossorigin' attribute on bootstrapScripts and bootstrapModules (#26844)

base build ci job failing but this change is unrelated and I think it is just flake with the builds host application",Henrique Limas,2023-06-13T16:12:10Z
88df88f9441e0f83917e60e04d4f75118c1adec5,"fix: devtools cannot be closed correctly (#25510)

<!--
  Thanks for submitting a pull request!
We appreciate you spending the time to work on these changes. Please
provide enough information so that others can review your pull request.
The three fields below are mandatory.

Before submitting a pull request, please make sure the following is
done:

1. Fork [the repository](https://github.com/facebook/react) and create
your branch from `main`.
  2. Run `yarn` in the repository root.
3. If you've fixed a bug or added code that should be tested, add tests!
4. Ensure the test suite passes (`yarn test`). Tip: `yarn test --watch
TestName` is helpful in development.
5. Run `yarn test --prod` to test in the production environment. It
supports the same options as `yarn test`.
6. If you need a debugger, run `yarn debug-test --watch TestName`, open
`chrome://inspect`, and press ""Inspect"".
7. Format your code with
[prettier](https://github.com/prettier/prettier) (`yarn prettier`).
8. Make sure your code lints (`yarn lint`). Tip: `yarn linc` to only
check changed files.
  9. Run the [Flow](https://flowtype.org/) type checks (`yarn flow`).
  10. If you haven't already, complete the CLA.

Learn more about contributing:
https://reactjs.org/docs/how-to-contribute.html
-->

## Summary

Fix devtools cannot be shutdown by bridge.shutdown().

<!--
Explain the **motivation** for making this change. What existing problem
does the pull request solve?
-->

## How did you test this change?

<!--
Demonstrate the code is solid. Example: The exact commands you ran and
their output, screenshots / videos if the pull request changes the user
interface.
How exactly did you verify that your PR solves the issue you wanted to
solve?
  If you leave this empty, your PR will very likely be closed.
-->",Jack Works,2023-06-13T09:04:38Z
db50164dbac39d7421c936689a5c026e9fd2f034,"[Flight] Optimize Large Strings by Not Escaping Them (#26932)

This introduces a Text row (T) which is essentially a string blob and
refactors the parsing to now happen at the binary level.

```
RowID + "":"" + ""T"" + ByteLengthInHex + "","" + Text
```

Today, we encode all row data in JSON, which conveniently never has
newline characters and so we use newline as the line terminator. We
can't do that if we pass arbitrary unicode without escaping it. Instead,
we pass the byte length (in hexadecimal) in the leading header for this
row tag followed by a comma.

We could be clever and use fixed or variable-length binary integers for
the row id and length but it's not worth the more difficult
debuggability so we keep these human readable in text.

Before this PR, we used to decode the binary stream into UTF-8 strings
before parsing them. This is inefficient because sometimes the slices
end up having to be copied so it's better to decode it directly into the
format. The follow up to this is also to add support for binary data and
then we can't assume the entire payload is UTF-8 anyway. So this
refactors the parser to parse the rows in binary and then decode the
result into UTF-8. It does add some overhead to decoding on a per row
basis though.

Since we do this, we need to encode the byte length that we want decode
- not the string length. Therefore, this requires clients to receive
binary data and why I had to delete the string option.

It also means that I had to add a way to get the byteLength from a chunk
since they're not always binary. For Web streams it's easy since they're
always typed arrays. For Node streams it's trickier so we use the
byteLength helper which may not be very efficient. Might be worth
eagerly encoding them to UTF8 - perhaps only for this case.",Sebastian Markbåge,2023-06-13T02:16:47Z
8fcceb715ce1dbbf4ef9a11e84972d449fc5545c,"Rename feature flag for function expr optimization 

This got lost in a rebase, just renaming for clarity.",Joe Savona,2023-06-12T22:56:48Z
a21660de006416018d1fc799be92540417fcb8bb,"Fix calculation of nested function dependencies 

We were incorrectly calculating the dependencies of nested lambdas, because the 
""component"" scope was incorrectly set to the next closest parent rather than 
outermost React function (component/hook) being compiled.",Joe Savona,2023-06-14T21:04:26Z
ce6842d8f528977119b80d969306c8475099f66e,"Delete processStringChunk (#26896)

Follow up to #26827.

These can't include binary data and we don't really have any use cases
that really require these to already be strings.

When the stream is encoded inside another protocol - such as HTML we
need a different format that encode binary offsets and binary data.",Sebastian Markbåge,2023-06-10T20:59:45Z
21a161fa37dce969c58ae17f67f2856d06514892,"refactor[renderer]: expose getInspectorDataForInstance in rendererConfig (#26913)

## Summary
This is required for the case when we have an instance and want to get
inspector data for it. Such case occurs when RN's application being
debugged via React DevTools.

React DevTools sends instance to RN, which then gets all auxiliary data
to highlight some elements. Having `getInspectorDataForInstance` method
exposed makes it possible to easily get current props from fiber, which
then can be used to display some margins & paddings for hovered element
(via props.style).

I see that `getInspectorDataForInstance` is being exported at the top
level of the renderer, but feels like this should also be inside
DevTools global hook, the same way we use it for
[`getInspectorDataForViewAtPoint`](https://github.com/facebook/react-native/blob/e7d3662904e0e35e43380ee6d54859388713a592/packages/react-native/Libraries/Inspector/getInspectorDataForViewAtPoint.js).",Ruslan Lesiutin,2023-06-09T09:55:34Z
a8fff7cc5c67f4f8f5fbd9171081be6ef3949158,"Feature to optimize function expressions 

This PR adds a new feature which enables additional validation/optimization of 
function expressions, gated by the `enableOptimizeFunctionExpressions` feature 
flag. When disabled, we actually revert the changes earlier in this stack, and 
do all our lowering of function expressions in AnalyzeFunctions. 

When the feature is enabled, we incrementally process function expressions in 
the various compilation stages, eg InferTypes infers into function expressions, 
ConstantPropagation propagates constants into function expressions, etc. Because 
this stage optimizes function expressions, in this mode codegen uses the HIR as 
the source rather than the original babel node. 

The feature is disabled by default so it has no impact on generated code. For 
now i've enabled the feature on just one test to demonstrate constant 
propagation into a function expression.",Joe Savona,2023-06-08T22:05:41Z
4d7d2cf4dc149deca936912f714493aab085edf8,"Type inference across function expressions boundaries 

Updates InferTypes to perform type inference across function boundaries. 
Specifically InferTypes is now responsible for driving type inference of 
function expressions (rather than deferring to AnalyzeFunctions to infer 
functions), and type inference now traverses into function expressions and 
infers types of free variables taking into account information from the outer 
context. This relies on the fact that identifier ids are consistent across 
function expression boundaries and that all free variables in functions are 
guaranteed to be effectively `const`, since we promote non-const variables used 
in function expressions to context variables.",Joe Savona,2023-06-08T18:02:04Z
5775102b852ea53c53a0d1bc3349c85a735f246e,InferTypes traverses function expressions,Joe Savona,2023-06-08T18:02:04Z
11d4ff430f1fde20566417acc5499e3b4d02d877,ConstantPropagation traverses function expressions,Joe Savona,2023-06-08T18:02:03Z
e39855d2519662406bf02243036ed85b8931abf0,EliminateRedundantPhi traverses function expressions,Joe Savona,2023-06-08T18:02:03Z
638e45c9280861e7a59d4e18d258330acdb4876b,EnterSSA traverses function expressions,Joe Savona,2023-06-08T18:02:02Z
c2c221a452114a123c956ef77029f7d9071c4102,"MergeConsecutiveBlocks traverses function expressions 

Currently the process of lowering function expression bodies is deferred until 
AnalyzeFunctions. However, per the motivation of the previous PR, we'd like to 
be able to perform inference across function expression boundaries. To do that 
we need to use consistent identifier ids across function expression boundaries. 
This requires SSA conversion of function expressions at the same time as we 
enter SSA. 

To start, this PR moves MergeConsecutiveBlocks for function expressions into 
that phase.",Joe Savona,2023-06-08T18:02:02Z
3673272ca4068ca04906479ed5d142a269be8901,"[eslint-plugin] Add basic test for unsupported syntax 

Kinda works?",Lauren Tan,2023-06-07T19:41:22Z
246936ca5755511bd7679d617880e436f03e9921,[prettier] add expected prettierrc file,Mofei Zhang,2023-06-08T18:32:22Z
166f47a41e1396fcedf1eb7d324a30d414fc99f8,[snap] Fix snap ignored paths,Mofei Zhang,2023-06-08T18:32:22Z
8192cd253d340554d151f853ed80626ce63dbca2,Fix missing memoization of scope-less variable being reassigned,Joe Savona,2023-06-08T02:15:59Z
5673672ff9fd8ab69b3ed4d5a083357471cfaa35,"Move playground to apps 

Generally we should reserve the `packages` directory for packages that 

are needed to run the compiler, while `apps` is for frontends that might 

make use of the compiler (and optionally, related packages)",Lauren Tan,2023-06-07T18:40:42Z
910045696bb5f693acb77890e6750c5e4659b420,"Fix:- Fixed dev tools inspect mode on Shadow dom (#26888)

Fixes #26200 

### PR explanation

I tried to induce the change by the `event.composed` to check whether
the event was created in a ShadowRoot, And replaced `pointerOver` with
`pointerMove`, pointerOver event did not fired correctly

Before PR:-


https://github.com/facebook/react/assets/72331432/67a33dcd-447f-4c68-9c3c-ad954baddeb8

After PR:-


https://github.com/facebook/react/assets/72331432/9f986ff2-785f-4cba-a504-44f82ea9fc5a

---------

Co-authored-by: Biki das <bikidas@Bikis-MacBook-Pro.local>",BIKI DAS,2023-06-07T15:38:38Z
bf631a0bb6a04244eebb0cf0fdb4fa20f2e03842,"Change rules for context variable promotion 

This PR updates the conditions for which variables are promoted to context 
variables. 

The previous rule was to promote any variable where the variable was reassigned 
in some function expression other than the function that declared the variable. 
Notably, this meant that we did not use context variables for variables which 
were captured in a function expression, but reassigned _outside_ a function 
expression. 

The new rule is more consistent: we promote any variable which is a) reassigned 
somewhere and b) referenced in some function expression outside of their 
declaring function. The implementation builds two sets of identifiers, one for 
each criteria, then takes the union of these two sets. 

## Motivation 

The motivation for this change is to unblock additional validations and 
optimizations of function expressions. It's currently difficult to translate 
metadata that we infer about identifiers outside of a function expression into 
metadata about the identifiers within a function expression — for example to 
infer types within function expression bodies based on type information outside, 
propagate constants into functions, infer reference effects, etc. 

After this change, the only free variables inside function expressions will be 
variables that are effectively `const` - never reassigned anywhere. Thus it will 
be safe to renumber those identifiers to match the outer context (during 
EnterSSA), making it trivial to map metadata from outside the function into the 
function. 

This change also more closely models the runtime representation — any variable 
referenced in a function, and reassigned somewhere, would have to be compiled 
(ie in a JS engine) to use a context variable.",Joe Savona,2023-06-06T02:11:08Z
4e22fa6451060476ca3cef40631573d8496b49d9,Try to fix test262 in ci,Lauren Tan,2023-06-06T19:25:20Z
5ebb7f1a8e7b72626ae430da9bdb7b4f8d6ab71d,"Try to compile with Forget in eslint plugin 

Nothing interesting for now, but it does seem to successfully run the compiler",Lauren Tan,2023-06-06T14:56:21Z
359df9e85ccb52357cf35c776a6583513484a8a3,Enable TypeScript in eslint-plugin-react-forget,Lauren Tan,2023-06-06T14:56:21Z
5c1faa901effe1bedb617cd588ef19c3bab35f6f,Add workspace command to run all tests,Lauren Tan,2023-06-06T14:56:20Z
cd56c55e87ff020be731eac27b06283da1ff9966,Basic noop rule for ReactForgetDiagnostics,Lauren Tan,2023-06-06T14:56:20Z
f82de29e73a164c3a6fdcec920dcca5eaa544ba9,"Bootstrap new eslint plugin 

Just scaffolds a new eslint plugin",Lauren Tan,2023-06-06T14:56:20Z
04d6bad1aee7cc0d503f9ea36022c9af87a9907a,"[ez] Update completed todo comment 

lol at how out of date this comment is :-)",Joe Savona,2023-06-05T20:46:38Z
39d837d9185fa2543c5fd2dff0a9e97176aae49b,"Update fixtures from workspace rebase 

I updated these yesterday, looks like they got added back in the workspace PR. 
Rebases are hard, all good!",Joe Savona,2023-06-05T18:16:14Z
66ca1c75cb6d205b88f7761d432a84710f0b1683,Fix dropped constant declaration bug,Joe Savona,2023-06-05T18:08:29Z
ad32811b649985322528483596a2cbb88451b080,"[RFC] Improve validation against ref access in render 

The goal of this PR is to improve ValidateNoRefAccessInRender to find function 
expressions which a) access refs and b) may be called during render. Currently 
we always allow ref access in any function expression, but that's obviously 
optimistic. 

For the approach, the observation is that we already have a system that tells us 
whether a function may get called — mutable range inference. So long as we 
consider a function ""mutable"", we'll infer a range for it, but the problem is 
that we don't currently view functions which depend on refs to be mutable. So 
here I'm doing ~~sort of~~ a hack to force function deps on refs to be treated 
as Effect.Capture. This is enough for the function to be considered mutable, for 
a mutable range to be assigned, and for us to detect that during ref validation. 

I don't love the hack, i'm open to other ideas!",Joe Savona,2023-06-05T18:08:26Z
b160ee85223e80941c2361f28c417df349e7484e,"[tests] Tests and patch for context variables 

--- 

- [patch] Find context variables within FunctionDeclarations (previously 
missing) 

- [todo] Need to fix non-allocating values / variables being DCE'd 

One approach is to label everything referenced by a lambda as context variables. 
I couldn't come up with other examples that break without this change, so I 
wonder if something lighter / hackier works just as well. (My only hesitation is 
that we may end up losing out on potential optimizations for everything aliased 
to these variables).",Mofei Zhang,2023-06-05T19:04:46Z
6d1d05ff91507ea844f332f65f5bc15cc8e10655,"[runtime] Update makeReadOnly runtime 

--- 

(wip, waiting for feedback on workplace post) 

- remove calls to `isInROMode`, as we want to log all mutations after 'freezing' 
a value (both within and outside of render cycle) 

- add `source` parameter -- this is the function name of the parent component / 
hook",Mofei Zhang,2023-06-05T18:46:59Z
5ba0a03e00f3bc1f1225989cd168d037d74a194f,"[config] Clean up codegen imports and gating 

- Gating checks for debugging / profiling can be moved to within the 
instrumentation or makeReadOnly functions. This simplifies codegen and reduces 
code bloat. 

- Warn if importing conflicting identifiers 

- Aggregate imports from the same source",Mofei Zhang,2023-06-05T18:46:59Z
a65e9cd1f13aed33c12c5ea20ee21cacd414ac22,"[devx] emit calls to `makeReadOnly` for debugging 

--- 

Emit calls to makeReadOnly for memoized values. 

```js 

function MyComponent() { 

let x; 

if (c_0) { 

x = // ... (recompute x) 

$[0] = __DEV__ ? makeReadOnly(x, ""MyComponent"") : x; 

} else { 

x = $[0] 

} 

} 

``` 

- import source / specifier should be configurable, as 

- we'll likely want to add gk gating to `makeReadOnly` itself to reduce codesize 
bloat 

- each Forget project needs different logging and filter configurations 

- codegen function name as an argument for easier debugging 

- only freeze memoized outputs",Mofei Zhang,2023-06-05T18:46:58Z
40d1459115f53c4a94201abebe082de1ad2e39ec,"Scaffold workspaces 


![image](https://github.com/facebook/react-forget/assets/1390709/bb27e33f-6a88-4b71-8ce2-aeb8db0372f7) 

This is an attempt to scaffold yarn workspaces into our repo with as minimal as 
possible changes to our current setup and directory structure. Essentially this 
PR moves current `src` into `packages/babel-plugin-react-forget` as a first step 
to keep everything working. Later on when we're ready we can split out a 
`react-compiler` package that is decoupled from Babel, but it's too early for 
that now",Lauren Tan,2023-06-05T17:35:39Z
3744930728bfe6a08c382b25834e258bc44bc07f,"Fix last(?) order of evaluation bug 

Not to get ahead of myself (sorry i had to), but i think this is the last order 
of evaluation bug. At least it's the last one we know of[1]. Per the previous 
PR, the issue is that constant propagation can copy the last value of a sequence 
expression to where the sequence is used, leaving the original sequence 
expression out of order after other instructions are moved around. We fix that 
here by explicitly skipping constant propagation for the last value of a 
sequence block. 

[1] There are some places where we _would_ have evaluation order bugs if we 
allowed arbitrary expressions, but we explicitly limit the expressions we allow 
in those places. For the curious: switch test case values and destructuring 
default values.",Joe Savona,2023-06-05T01:41:27Z
1e0eb25cd07ef8a1aef6cf6acba04e2a0439e834,"Use sequence terminal, fix most remaining order-of-evaluation bugs 

Changes the lowering for sequence expressions to use the new terminal. When 
converting to a ReactiveFunction, we convert these terminals into 
ReactiveSequenceValues, which nests the instructions and preserves order of 
evaluation in the output. 

The only catch is constant propagation — constant propagation breaks 
order-of-evaluation because it can effectively copy the final value of a 
sequence elsewhere, leaving the original sequence in the wrong place. I'll 
address that in a follow-up.",Joe Savona,2023-06-05T01:26:01Z
cd115ec128a80a69c4aac253c853d12026f1ea61,"Scaffold for sequence terminal 

I realized that we can use our value block system to fix _most_ of the remaining 
order-of-evaluation issues we had with sequence expressions. This PR adds a new 
SequenceTerminal to HIR; there is already a ReactiveFunction equivalent 
(ReactiveSequenceValue) that the next PR will convert this terminal into.",Joe Savona,2023-06-05T01:25:59Z
e410815aeb10bbef6406e09cf0783187fae34d2f,"Infer more primitive types 

Handles three more cases: 

* Template literals 

* deletion (property/computed) 

* type casts 

Only the latter has an observable impact, though i added tests for deletion just 
in case and found a bug. For type casts, they're reasonably common internally 
for fixmes, so this PR will help to ensure we don't drop type information just 
because of a cast.",Joe Savona,2023-06-05T00:27:24Z
084edadaa1fe173d2c89e022c570e0b1bcdc405e,"Distinguish error fixtures for invalid code 

Renames some error fixtures for clarity, ""error.invalid-*"" are fixtures that are 
expected to fail for invalid input, where other ""error.*"" fixtures are basically 
todos. While i was here i clarified the error messages for invalid useMemo 
callbacks, and changes the error severity from Invariant to InvalidInput.",Joe Savona,2023-06-04T18:41:42Z
e41a8d6a1ea481be0fd1b4b3cbe4930919525546,"Validate destructuring assignment to globals 

Fixes one more category of bug. For assignment expressions, we validating 
against redeclaring a global variable when the assignment target was an 
identifier, but not when the global was reassigned via destructuring. This PR 
adds a `lowerIdentifierForAssignment()` helper and uses it for assignment of all 
identifier variants, including destructuring.",Joe Savona,2023-06-04T18:29:55Z
2ae3592d29caf9aca2cff36e6089c1dfb92dfa4e,"Fix/review bug repros, mark fixed 

I reviewed the test cases we have marked as bugs (""_bug.*"") and realized that 
several of them are already fixed — woohoo! Then one wasn't fixed _yet_: our 
type inference loses track of refs if you stash them inside an object/array. But 
that's why I added the ValidateNoRefAccessInRender pass, which i've updated to 
detect and reject these invalid cases. There are now only a few bugs left (more 
fixes coming).",Joe Savona,2023-06-04T18:08:54Z
e6fae308e9300ca545003ac147cc7e4e541f561c,"Remove XHR support from Flight (#26827)

We currently support passing an XHR request to Flight for broader compat
and possibly better perf than `fetch()`. However, it's a little tricky
because ideally the RSC protocol is really meant to support binary data
too. XHR does support binary but it doesn't support it while also
streaming.

We could maybe support this only when you know it's going to be only
text streams but it has some limitations in how we can encode separators
if we can't use binary.

Nobody is really asking for this so we might as well delete it.",Sebastian Markbåge,2023-06-03T20:03:11Z
f181ba8aa6339d62f6e2572109c61242606f16b3,"[Flight] Add bundler-less version of RSC using plain ESM (#26889)

This isn't really meant to be actually used, there are many issues with
this approach, but it shows the capabilities as a proof-of-concept.

It's a new reference implementation package `react-server-dom-esm` as
well as a fixture in `fixtures/flight-esm` (fork of `fixtures/flight`).
This works pretty much the same as pieces we already have in the Webpack
implementation but instead of loading modules using Webpack on the
client it uses native browser ESM.

To really show it off, I don't use any JSX in the fixture and so it also
doesn't use Babel or any compilation of the files.

This works because we don't actually bundle the server in the reference
implementation in the first place. We instead use [Node.js
Loaders](https://nodejs.org/api/esm.html#loaders) to intercept files
that contain `""use client""` and `""use server""` and replace them. There's
a simple check for those exact bytes, and no parsing, so this is very
fast.

Since the client isn't actually bundled, there's no module map needed.
We can just send the file path to the file we want to load in the RSC
payload for client references.

Since the existing reference implementation for Node.js already used ESM
to load modules on the server, that all works the same, including Server
Actions. No bundling.

There is one case that isn't implemented here. Importing a `""use
server""` file from a Client Component. We don't have that implemented in
the Webpack reference implementation neither - only in Next.js atm. In
Webpack it would be implemented as a Webpack loader.

There are a few ways this can be implemented without a bundler:

- We can intercept the request from the browser importing this file in
the HTTP server, and do a quick scan for `""use server""` in the file and
replace it just like we do with loaders in Node.js. This is effectively
how Vite works and likely how anyone using this technique would have to
support JSX anyway.
- We can use native browser ""loaders"" once that's eventually available
in the same way as in Node.js.
- We can generate import maps for each file and replace it with a
pointer to a placeholder file. This requires scanning these ahead of
time which defeats the purposes.

Another case that's not implemented is the inline `""use server""` closure
in a Server Component. That would require the existing loader to be a
bit smarter but would still only ""compile"" files that contains those
bytes in the fast path check. This would also happen in the loader that
already exists so wouldn't do anything substantially different than what
we currently have here.",Sebastian Markbåge,2023-06-03T19:58:24Z
6d6518161afdcbf7f2504441def52e3217abc869,"Cleanup packages directory 

Prepare to move to a yarn workspaces setup",Lauren Tan,2023-06-02T17:06:36Z
479ef4045b6080c155b2050802eab877a1a5b82a,Move entrypoint into its own directory,Lauren Tan,2023-06-02T17:06:35Z
2eded946f8e1d75b2e6d078cceb7589439cf5bf4,"Make CompilerEntrypoint a little more generic 

These are still quite Babel specific, but the interface is slightly more 
generic: CompilerEntrypoint takes a non-Babel specific CompilerPass as an 
argument instead of passing Babel's PluginPass directly. 

In the future we can consider lowering the whole Program into HIR but that 
involves a significant lift in our representation and a small amount of new 
syntax to support (eg import statements), so this PR is the extent of this stack 
for now",Lauren Tan,2023-06-02T17:06:35Z
b98ee34f4562ac37471e125a78b111bfc4eb92fb,"Delegate BabelPlugin to CompilerEntrypoint 

Moves the existing logic in BabelPlugin to its own files",Lauren Tan,2023-06-02T17:06:34Z
9077ac1f27008bf3d273c4873ca5edcca155ab05,Copy files from src/Babel to src/,Lauren Tan,2023-06-02T17:06:34Z
e1ad4aa3615333009d76f947ff05ddeff01039c6,"[Fizz][Float] stop automatically preloading scripts that are not script resources (#26877)

Currently we preload all scripts that are not hoisted. One of the
original reasons for this is we stopped SSR rendering async scripts that
had an onLoad/onError because we needed to be able to distinguish
between Float scripts and non-Float scripts during hydration. Hydration
has been refactored a bit and we can not get around this limitation so
we can just emit the async script in place. However, sync and defer
scripts are also preloaded. While this is sometimes desirable it is not
universally so and there are issues with conveying priority properly
(see fetchpriority) so with this change we remove the automatic
preloading of non-Float scripts altogether.

For this change to make sense we also need to emit async scripts with
loading handlers during SSR. we previously only preloaded them during
SSR because it was necessary to keep async scripts as unambiguously
resources when hydrating. One ancillary benefit was that load handlers
would always fire b/c there was no chance the script would run before
hydration. With this change we go back to having the ability to have
load handlers fired before hydration. This is already a problem with
images and we don't have a generalized solution for it however our
likely approach to this sort of thing where you need to wait for a
script to load is to use something akin to `importScripts()` rather than
rendering a script with onLoad.",Josh Story,2023-06-01T20:34:36Z
5fb2c15a89de844a1dd12a61e7674e55dc0dfa89,"[Fizz][Float] stop preloading stylesheets that are not stylesheet resources (#26873)

We previously preloaded stylesheets that were rendered in Fizz. The idea
was we'd get a headstart fetching these resources since we know they are
going to be rendered. However to really be effective non-float
stylesheets need to rendered in the head and the preload here is not
helpful and potentially hurtful to perf in a minor way. This change
removes this functionality to make the code smaller and simpler",Josh Story,2023-06-01T20:23:53Z
042d8f606ce643d2eca955badbf07ea5b8ac266c,"[Float] support fetchpriority on `ReactDOM.preload()` and `ReactDOM.preinit()` (#26880)

exposes fetchPriority as an option for `ReactDOM.preload()` and
`ReactDOM.preinit()`

the typings should be `'high' | 'low' | 'auto'`",Josh Story,2023-06-01T20:10:55Z
811022232efed62a3c943701bc99d18655bc78b3,"Always trigger componentWillUnmount in StrictMode (#26842)

<!--
  Thanks for submitting a pull request!
We appreciate you spending the time to work on these changes. Please
provide enough information so that others can review your pull request.
The three fields below are mandatory.

Before submitting a pull request, please make sure the following is
done:

1. Fork [the repository](https://github.com/facebook/react) and create
your branch from `main`.
  2. Run `yarn` in the repository root.
3. If you've fixed a bug or added code that should be tested, add tests!
4. Ensure the test suite passes (`yarn test`). Tip: `yarn test --watch
TestName` is helpful in development.
5. Run `yarn test --prod` to test in the production environment. It
supports the same options as `yarn test`.
6. If you need a debugger, run `yarn test --debug --watch TestName`,
open `chrome://inspect`, and press ""Inspect"".
7. Format your code with
[prettier](https://github.com/prettier/prettier) (`yarn prettier`).
8. Make sure your code lints (`yarn lint`). Tip: `yarn linc` to only
check changed files.
  9. Run the [Flow](https://flowtype.org/) type checks (`yarn flow`).
  10. If you haven't already, complete the CLA.

Learn more about contributing:
https://reactjs.org/docs/how-to-contribute.html
-->

## Summary

<!--
Explain the **motivation** for making this change. What existing problem
does the pull request solve?
-->
In StrictMode, React currently only triggers `componentWillUnmount` if
`componentDidMount` is defined. This would miss detecting issues like
initializing resources in constructor or componentWillMount, for
example:
```
class Component {
  constructor() {
     this._subscriptions = new Subscriptions();
  }
  componentWillUnmount() {
     this._subscriptions.reset();
  } 
}
``` 

The PR makes `componentWillUnmount` always run in StrictMode.


## How did you test this change?

<!--
Demonstrate the code is solid. Example: The exact commands you ran and
their output, screenshots / videos if the pull request changes the user
interface.
How exactly did you verify that your PR solves the issue you wanted to
solve?
  If you leave this empty, your PR will very likely be closed.
-->
`yarn test ci`",Tianyu Yao,2023-06-01T17:34:31Z
018c58c9c65452cff25aaf1f38f78a9b90d8e5c1,"Clean up enableSyncDefaultUpdates flag a bit (#26858)

## Overview

Does a few things:
- Renames `enableSyncDefaultUpdates` to
`forceConcurrentByDefaultForTesting`
- Changes the way it's used so it's dead-code eliminated separate from
`allowConcurrentByDefault`
- Deletes a bunch of the gated code

The gates that are deleted are unnecessary now. We were keeping them
when we originally thought we would come back to being concurrent by
default. But we've shifted and now sync-by default is the desired
behavior long term, so there's no need to keep all these forked tests
around.

I'll follow up to delete more of the forked behavior if possible.
Ideally we wouldn't need this flag even if we're still using
`allowConcurrentByDefault`.",Ricky,2023-06-01T13:24:56Z
ae31d2ea3c3f9f0a87ff2c6193484d5d8786bc5f,"[Fizz] preload `bootstrapModules` (#26754)

stacked on #26753 

Adds support for preloading bootstrapModules. We don't yet support
modules in Float's public interface but this implementation should be
compatible with what we do when we add it.",Josh Story,2023-05-31T23:48:27Z
b864ad4397e7b366ece9ecfdfafa5660ae6b8390,"[Fizz] preload `bootstrapScripts` (#26753)

This PR adds a preload for bootstrapScripts. preloads are captured
synchronously when you create a new Request and as such the normal logic
to check if a preload already exists is skipped.",Josh Story,2023-05-31T23:25:35Z
7fddf42d060b1c2f75b895ae23744be27200b486,"[ez] Hooks dont escape, their args do",Joe Savona,2023-05-31T23:05:07Z
0ae37f156815d656d9b3835bab1900d889dc03ce,"Treat setState as non-reactive 

Updates PruneNonReactiveDependencies to treat setState functions as 
non-reactive, since we know they have a stable identity. This is based on type 
inference and our recently added definitions for useState and its return type, 
so it's conservative and will only work when our inference can prove that the 
scope dependency has the SetState type. 

Note that this approach is simple and has limitations, notably the fact that the 
setState is non-reactive doesn't propagate. But it's simple, trivially correct, 
and already improves codegen somewhat, so i figured it's worth landing for now. 

## Test Plan 

Tested on internal app",Joe Savona,2023-05-31T21:29:31Z
9c453ad26ffd32249b4f44b04d9b371010200139,"Validate frozen lambdas are actually frozen 

Adds validation to reject freezing mutable lambdas, since lambdas cannot _be_ 
frozen, they're either frozen or not. Example invalid code: 

```javascript 

function Component(props) { 

const x = {value: """"}; 

const onChange = (e) => { 

// MUTATION!!!!! 

x.value = e.target.value; 

setX(x); 

}; 

return <input value={x.value} onChange={onChange} />; 

} 

``` 

Note that there is a separate issue in which we are not detecting lambdas that 
would definitely modify immutable values. We may need to distinguish 
ConditionallyCapture (captures if the value is mutable, otherwise readonly) from 
Capture (definitely mutates) in order to make that case work. But already this 
validation helps prevent some invalid code.",Joe Savona,2023-05-31T21:03:02Z
8e341294d08dfc44018afc55fbe49b1fb564271e,"[be] Upgrade to TypeScript 5.1 

The functional changes in 5.1 don't seem that compelling but there are some perf 
improvements, supposedly.",Joe Savona,2023-06-01T20:23:09Z
e1e68b9f7ffecf98e1b625cfe3ab95741be1417b,"[Fiber][Float] preinitialized stylesheets should support integrity option (#26881)

preinitialized stylesheets did not render the integrity option on the
client implementation of Float. This was an oversight.",Josh Story,2023-05-31T20:48:19Z
a5a86c302aef71111be15816cbdb37ec98d6921a,Validate against ref access in render,Joe Savona,2023-05-31T16:38:28Z
af94b075c02a82ea0e3c1937036a75b9f43727d7,"Option to disable memoization 

Adds a `removeAllMemoization` flag that runs the entire compiler pipeline but 
strips out all memoization. The intent is to be able to compare (in limited 
use-cases) the performance of an existing app with all memoization removed, vs 
the performance with manual memoization, vs the performance with Forget enabled. 

In terms of how this works: we already strip out useMemo/useCallback since 
Forget is more accurate. The new option adds an extra pass that strips out all 
reactive scopes. Collectively this leaves ~zero memoization within components 
(this does leave React.memo, but close enough).",Joe Savona,2023-05-31T15:03:36Z
793b69243f96afbe12c349451b9e30cf6e6f7c2a,[hir] Track context refs when inferring reactive ids,Sathya Gunasekaran,2023-05-31T14:37:39Z
b447c93edc1837b9b50d7ade46cb2eb348716040,[test] Add failing test for lambda turning value reactive,Sathya Gunasekaran,2023-05-31T14:37:35Z
2c8f6888e68b0f8d0d83c6563efbdd3dd25c8feb,[hir] Failing test for adding ref as dep incorrectly,Sathya Gunasekaran,2023-05-31T12:55:00Z
91f41f5ee321fe4cebb5f33bf524bbe52fe9b24b,[hir] Don't track ref value as a valid dep,Sathya Gunasekaran,2023-05-31T12:54:59Z
bedf0cc6c50b4d738f4022e48188c0166e63bed8,[hir] Don't track ref.current as a valid dep,Sathya Gunasekaran,2023-05-31T12:54:58Z
1cea384480a6dea80128e5e0ddb714df7bea1520,"[Fiber] retain scripts on `clearContainer` and `clearSingleton` (#26871)

clearContainer and clearSingleton both assumed scripts could be safely
removed from the DOM because normally once a script has been inserted
into the DOM it is executable and removing it, even synchronously, will
not prevent it from running. However There is an edge case in a couple
browsers (Chrome at least) where during HTML streaming if a script is
opened and not yet closed the script will be inserted into the document
but not yet executed. If the script is removed from the document before
the end tag is parsed then the script will not run. This change causes
clearContainer and clearSingleton to retain script elements. This is
generally thought to be safe because if we are calling these methods we
are no longer hydrating the container or the singleton and the scripts
execution will happen regardless.",Josh Story,2023-05-30T20:12:56Z
1d536af4f74b1a4ca7385e1caff091d4423d70ab,[hir] Refactor checkValidDependencyId to accept a dep,Sathya Gunasekaran,2023-05-30T12:44:30Z
fc13557d30c50517f5f1d369ce2ee02f506bb904,"[tests] remove jest fixture tests 

--- 

Remove jest fixture tests in favor of snap runner. Main reasons: 

- maintaining feature flags and compatible behavior required syncing all changes 
to 3 files (`generateTestsFromFixtures`, `compiler-test`, and `compiler-worker`) 

- jest snapshot test file causes rebase conflicts on most rebases 

- speed 🙌 

$ time yarn test compiler-test 

(the extra test here is `has a consistent extension for input fixtures`) 

``` 

Test Suites: 1 passed, 1 total 

Tests:       37 skipped, 480 passed, 517 total 

Snapshots:   479 passed, 479 total 

Time:        27.668 s 

Ran all test suites matching /compiler-test/i. 

✨  Done in 43.18s. 

yarn test compiler-test  57.05s user 3.85s system 139% cpu 43.546 total 

``` 

$ time yarn snap 

``` 

478 Tests, 478 Passed, 0 Failed 

✨  Done in 13.12s. 

yarn snap  53.96s user 9.35s system 468% cpu 13.518 total 

``` 

Jest and snap should have the same set of features: 

- report test failures via exit status (used by Git Actions) 

- watch mode 

- breakpoints + `debugger` statements 

- note that `--sync` is not required for this 

- skip `todo.` prefixed fixtures 

- fixtures in nested directories e.g. `rules-of-hooks/testname.js` 

- filter mode (via editing `testfilter.txt`) 

- filter + debug mode 

(1) edit `testfilter.txt` to filter out all but one test 

(2) add `@debug` pragma to the first line of the test 

testfilter.txt 

```js 

// @only 

testfixture_basename1 

testfixture_basename2 

```",Mofei Zhang,2023-05-26T17:18:38Z
71c9743e388999a5ffe5997fe259a2af3283dad3,"[snap] Fix vscode debugger attaching to forked proc 

Turns out I just forgot to forward `process.env` when forking 😅 

`debugger` statements and breakpoints should work with both `--sync` and 
`--no-sync` (default) modes",Mofei Zhang,2023-05-26T17:18:37Z
a1f97589fd298cd71f97339a230f016139c7382f,"Compare name when hydrating hidden fields to filter out extra form action fields (#26846)

This solves an issue where if you inject a hidden field in the beginning
of the form, we might mistakenly hydrate the injected one that was part
of an action.

I'm not too happy about how specific this becomes. It's similar to Float
but in general we don't do this deep comparison.

See https://github.com/vercel/next.js/issues/50087",Sebastian Markbåge,2023-05-26T16:54:01Z
0210f0b082c95f5aec08f356d796c512eab44fc4,"Update enableSyncDefaultUpdates for www (#26857)

If this is false, it dead code eliminates the path to use the root flag.
Will follow up to clean this up.",Ricky,2023-05-26T01:33:07Z
4daccade04ae54339463546e06f07db56a646bd4,"Remove temporary CircleCI workaround (#26855)

There was a CircleCI bug that prevented the sizebot job from accessing
the artifacts API. I had added a temporary workaround to pull from a
mirror instead. This seems to have been fixed, so I can remove the
workaround.",Andrew Clark,2023-05-25T17:38:39Z
18dedde6a7d63ffafd2f7e135f9edf424eee0bcd,"[flow] upgrade to 0.206.0 (#26850)

Small upgrade. The one impact was deprecation of `$Shape` where it seems
like we can just use a plain object with optional key.",Jan Kassens,2023-05-25T17:37:31Z
9a72e622716f6dab714ebe8b957ee9970154664b,"run SchedulerFeatureFlags with variant flags again (#26851)

With df12d7eac40c87bd5fdde0aa5a739bce9e7dce27 I accidentally made it so
that tests aren't run with the 2 variant modes for most
SchedulerFeatureFlags anymore. This fixes it with the same approach as
ee4233bdbc71a7e09395a613c7dde01194d2a830.

Test Plan:
Run and notice the boolean flags follow the variant:
```
yarn test-www --variant=true
yarn test-www --variant=false
```",Jan Kassens,2023-05-25T14:38:33Z
ee4233bdbc71a7e09395a613c7dde01194d2a830,Move enableSyncDefaultUpdates to test config (#26847),Ricky,2023-05-24T22:25:30Z
6fc3333b685657c8e6425df9fcb4fe1ce7374d40,Add $FlowFixMe to fix React Native DiffTrain (#26841),Samuel Susla,2023-05-24T16:42:16Z
99257aa4303c09186ca9a99fe0cf4a5995d4bd96,Enable more flags on playground,Joe Savona,2023-05-23T23:55:10Z
91dcf24e6743a4ebe035fd729eb635e7863ba24c,"Add test case for invalid lambdas 

This is the example we discussed in our design sync. 

```javascript 

function Component(props) { 

const [x, setX] = useState({ value: """" }); 

const onChange = (e) => { 

// INVALID! should use copy-on-write and pass the new value 

x.value = e.target.value; 

setX(x); 

}; 

return <input value={x.value} onChange={onChange} />; 

} 

``` 

Here `onChange` is a mutable lambda, and it should be invalid to pass a mutable 
lambda where a frozen value is expected. This is because unlike other value 
types, you cannot freeze a lambda — the only choice is to not call it at all. 

Note that there is a harder case to catch: 

```js 

function Component(props) { 

const [x, setX] = useState({ value: """" }); 

const onChange = (e) => { 

// INVALID! should use copy-on-write and pass the new value 

x.value = e.target.value; 

setX(x); 

}; 

const x = constructAValueThatMaybeAliasesItsInput(onChange); 

return <input value={x.value} onChange={x.maybeGetTheLambdaBack()} />; 

} 

``` 

This case demonstrates how mutable lambdas can be captured and then accessed 
later — the analysis to catch this case is more sophisticated bc it involves 
inferring that `x` aliases a mutable lambda. But we also can't be sure that `x` 
does alias the lambda, so disallowing this code could prevent a lot of valid 
code from compiling. My hypothesis is that we should start with at least 
validating the example at the top, while allowing the second case for now.",Joe Savona,2023-05-25T23:08:10Z
edbb6e2bdb6ac423c8165a3fa3c3e3d2aab07ea1,"Test case for Array.push on frozen array 

Just making sure that we reject this",Joe Savona,2023-05-25T23:00:35Z
3381ce7ea840786e76439e1cdc0cb5646fc265c0,"Array.prototype.join 

Trivial",Joe Savona,2023-05-25T22:57:09Z
8be5423e3bf61f88545cf90ce170aed5647b2c3c,"Type Array.prototype.map/filter 

We can now type `Array.prototype.{map,filter}`: 

* The callee is ConditionallyMutable because, although the array itself is not 
modified, its items flow into the lambda and may be modified there. 

* The argument is ConditionallyMutable because it accepts both mutable and 
immutable lambdas. Mutate would disallow immutable lambdas (wrong), while Read 
would be incorrect for mutable lambdas since calling them triggers mutation.",Joe Savona,2023-05-25T21:50:14Z
75a19725843486f504bcaf7617d22668a22cbf72,"More tests for effect enforcement 

Adds test cases to ensure we're correctly inferring mutative builtin operations 
— property store, computed property store, property deletion, and computed 
property deletion — as definite mutation and that we're rejecting inputs where 
these operations are used on immutable/frozen values.",Joe Savona,2023-05-25T21:33:02Z
9766e1980523e3ee214aca72dad23177d4250f84,"Add Effect.Mutate for known mutation 

Adds back `Effect.Mutate`, and changes so that `Effect.ConditionallyMutate` 
never rejects frozen/immutable values, while `Effect.Mutate` _always_ rejects 
frozen/immutable values.",Joe Savona,2023-05-25T20:54:35Z
40cf400f7215b344da3658104cfc3b9e3ce1dd66,"Rename Effect.Mutate -> ConditionallyMutate 

We currently use `Effect.Mutate` both for places that _may_ mutate (ie untyped 
function calls) and for places that have known mutation (typed function calls, 
or operations like `delete x.y`). We then use a separate mechanism to decide 
whether to reject the input, with some call paths checking the effect and others 
not. 

This stack refactors this logic in InferReferenceEffects per our discussion, so 
that `Effect.ConditionallyMutate` is for ""may or may not mutate"" either because 
we're not 100% sure (untyped function) or because the mutation depends on the 
operand (ie, a callback arg that will be invoked and thus will mutate if the 
lambda is mutable, not mutate if the lambda is immutable). Later diffs add back 
`Effect.Mutate` as ""definitely 100% mutating"".",Joe Savona,2023-05-25T20:41:09Z
37d044763b45d43fc8e0599cd3926f82125a0360,"Define types for useState/useRef 

Defines 4 new types: 

* Return type of `useState()`, which has properties ""0"" and ""1"" to allow us to 
infer the types when destructuring 

* Type of useState() set state function 

* Return type of `useRef()` so we know what is a ref 

* Type of ref.current, so we know what is a ref *value* 

Example: 

<img width=""1670"" alt=""Screenshot 2023-05-24 at 9 59 37 AM"" 
src=""https://github.com/facebook/react-forget/assets/6425824/3ee7d04a-fda3-4b7b-89b7-d205d9a6fd0d"">",Joe Savona,2023-05-24T16:54:10Z
c87a1916f435f36efa8873ddfc8e13a25d91c118,Infer property types for destructuring,Joe Savona,2023-05-24T16:54:07Z
ecc730c58713695143f825b3d2c4ec2ea93fc435,"[FeatureFlag] Toggle enableTreatHooksAsFunctions default to true 

--- 

Toggle default to true, since this should be a no-op refactor. 

Tests: 

- test fixtures 

- ran on Store + - and saw no difference in compiled output 

- [diff](P744101621) with 
`enableTreatHooksAsFunctions=false` 

- [diff](P744105565) with 
`enableTreatHooksAsFunctions=true`",Mofei Zhang,2023-05-23T20:11:38Z
08a88912458d66a47e82d0e67fc739adbd837ac3,Test: unknown hooks should not assert effects,Mofei Zhang,2023-05-23T17:55:12Z
b76ee1ab32201143b73d8792ad1fd6d1e1207bc3,[types] Consolidate Hook and Function types: Hooks are functions,Mofei Zhang,2023-05-23T17:55:10Z
535c038d15d21f33e678187410d658456cc0ce39,"Update preload links to support nonce and fetchpriority (#26826)

Currently when React generates rel=preload link tags for script/stylesheet resources, it will not carryover nonce and fetchpriority values if specified on the original elements.

This change ensures that the preload links use the nonce and fetchPriority values if they were specified.",Yen-Wei Liu,2023-05-23T02:56:17Z
47e9a2b8a5d2161324edfbd2f805227e88fb4313,[FeatureFlag] add enableTreatHooksAsFunctions,Mofei Zhang,2023-05-22T23:37:53Z
19cf39f50be3b4742447c8463fbc5af2201b3d5c,[effects] Track return ValueKind for function signatures,Mofei Zhang,2023-05-22T23:37:50Z
d456e4a78ccf1cf607a46e802c67eb1442657300,"Memoize based on inferred return type, not signature",Joe Savona,2023-05-22T16:20:16Z
4b877b6c661417e932056e12732e3d2697562dc8,"Updated copyright text to Copyright (c) Meta Platforms, Inc. and its … (#26830)

…affiliates.

## Summary

There were 8 different places where the copyright comment was wrong.
Rewrote from ""Copyright (c) Facebook, Inc. and its affiliates."" to
""Copyright (c) Meta Platforms, Inc. and its affiliates.""

## How did you test this change?
No code was changed. Comment was still a comment after changes.

Co-authored-by: Dennis Moradkhani <denmo530@student.liu.se>",Dennis Moradkhani,2023-05-20T00:52:17Z
7bd330e0b0d740e4ffda25a179a4d06081f1b8e7,"Updated Copyright comment from Facebook to Meta (#26833)

## Summary
Changed the comment in react/packages/react
/react.shared-subset.js saying 
```
Copyright (c) Facebook, Inc. and affiliates ..
```
To 
```
Copyright (c) Meta Platforms, Inc. and affiliates ..
```
as raised in the following issues:
https://github.com/facebook/react/issues/26829

Files Changed: 
react/packages/react/react.shared-subset.js

## How did you test this change?

Tests Required: No",Sanket Singh,2023-05-20T00:51:44Z
4ce22ebcfeb264b6b20e5a5b6f7fc16585a0f907,"Option to assume hooks follow the rules 

Adds a new feature flag which tells the compiler to assume that hooks follow the 
Rules of React. Specifically, the idea that since any hook could be wrapped in a 
giant `useMemo()` call, all arguments to hooks have to be treated as if they're 
owned by React — and therefore become immutable — and that the return value of 
the hook is immutable. 

Our default is to assume that hooks break the rules, but in practice nearly 
every component follows them.",Joe Savona,2023-05-19T18:05:04Z
7e10c51532225d26ab5f2c1c9085ca3656c29c1d,"Put optimizations in this stack behind a feature flag 

Wraps all the optimizations from this stack behind a feature flag so we can 
quickly disable if there are problems when integrating.",Joe Savona,2023-05-18T23:20:28Z
94e2ae5893328ef2f7c5c2269413f545546ed350,"Dont memoize calls that produce primitive values 

Teaches InferReactiveScopeVariables that calls can produce primitives that don't 
need a scope.",Joe Savona,2023-05-18T23:05:32Z
5008448d744002f91028059c1464a5a4e897c140,"Rename function for clarity 

Cleanup now that we use this for two things",Joe Savona,2023-05-18T22:52:51Z
0322e4dbd41769f335cf77d4fda0cf102c684a8b,"InferReferenceEffects uses function types for CallExpression 

Updates the InferReferenceEffects logic for CallExpression to work similarly to 
MethodCall, where we take into account the function signature (if present) when 
inferring the effects and return kind.",Joe Savona,2023-05-18T22:52:11Z
c0a5d869026b6dd5300c8b0a9c2c47907d67f3b9,"Reorder similar cases in InferReferenceEffects 

Moves the CallExpression case next to MethodCall to make it easier to compare",Joe Savona,2023-05-18T22:52:07Z
a325eed4727af4f2d567fecc8f33926e2c0fc055,"Define Boolean/Number/String globals 

Defines the `Boolean`, `String`, and `Number` global functions. This will be 
useful for allowing developers to wrap statements that produce a primitive in a 
way that Forget knows about in order to optimize better.",Joe Savona,2023-05-18T22:52:03Z
46417a4ed77513d8e385ccd32e2103d5504bce4e,Fix bug with partially memoized destructuring,Joe Savona,2023-05-18T16:25:28Z
a933d5e307d82635d2b171e23da9bcb926b909b0,Repro for bug with partially memoized destructuring,Joe Savona,2023-05-18T16:25:24Z
5309f102854475030fb91ab732141411b49c1126,"Remove Flight Relay DOM/Native (#26828)

The bindings upstream in Relay has been removed so we don't need these
builds anymore. The idea is to revisit an FB integration of Flight but
it wouldn't use the Relay specific bindings. It's a bit unclear how it
would look but likely more like the OSS version so not worth keeping
these around.

The `dom-relay` name also included the FB specific Fizz implementation
of the streaming config so I renamed that to `dom-fb`. There's no Fizz
implementation for Native yet so I just removed `native-relay`.

We created a configurable fork for how to encode the output of Flight
and the Relay implementation encoded it as JSON objects instead of
strings/streams. The new implementation would likely be more stream-like
and just encode it directly as string/binary chunks. So I removed those
indirections so that this can just be declared inline in
ReactFlightServer/Client.",Sebastian Markbåge,2023-05-18T00:33:25Z
3603ee00a65f292d9d08cf36c31a9cf5f8843467,"Retain original structure of labeled blocks 

Handles some edge-cases where we previously flattened away some of the structure 
of a labeled block, instead ensuring that we retain the original shape. See the 
output. 

## Test Plan 

Tested on the internal app we're focused on (w useMemo inlining enabled), it 
works fine.",Joe Savona,2023-05-17T22:55:54Z
7831ac21892b490226291192d0b501035a8e5147,Enable InlineUseMemo in playground,Joe Savona,2023-05-17T22:55:54Z
f0b8cfbf254fd89a4ce2202b0ea5bd65123884b1,More concise output for labeled blocks,Joe Savona,2023-05-17T22:55:53Z
f30041b0f0d695236ecbd3585d99e4ee44954a9e,"More useMemo inlining test cases 

More test cases for useMemo inlining, including the problematic case we found 
internally and some similar tricky cases with labels.",Joe Savona,2023-05-17T22:55:52Z
329809de818366cfccf0a6a69e00191b2639efeb,"Dramatically simplify InlineUseMemo 

I realized a wayyyy simpler approach to inlining a lambda: wrap it in a labeled 
block. The transformation is roughly as follows: 

```javascript 

// Before 

const x = useMemo(() => { 

if (a) { 

return b; 

} 

return c; 

}, [a, b, c]); 

return x; 

// After 

let x; 

label: { 

if (a) { 

x = b; 

break label; 

} 

x = c; 

break label; 

} 

return x; 

``` 

The key to making this work is fixing up some edge cases in labeled blocks, 
hence the previous PRs.",Joe Savona,2023-05-17T22:55:51Z
5ee23af1a6d10b79e96c6bf82a28e1bef5b0130a,Elide empty if alternate blocks in codegen,Joe Savona,2023-05-17T22:55:51Z
84a356274a86fec51dd4c46441605b2723e66c16,"Stop shrinking HIR to preserve fallthrough nodes 

This is part of a stack to fix some edge cases in inlining of useMemo closures. 
In this first step, I'm disabling `shrink()` in order to retain more information 
about the data flow. For example, 

``` 

label: if (cond) { 

break label; 

} 

return foo; 

``` 

Would previously have shrunk away the if body, making the IfTerminal.consequent 
point directly to the fallthrough block (w the return). Now we retain a separate 
block.",Joe Savona,2023-05-17T22:55:50Z
f070cab87017b58f07a1b75953c7585a1bd0d5b6,"[snap] add memoizeJSX flag 

--- 

#1603 for snap",Mofei Zhang,2023-05-17T18:39:29Z
8b3865198658e791c3675c5356ec14bcc4a0d826,"[snap] Add jest test capabilities to snap 

- delete output files when we detect input files are deleted 

- enable test fixtures in nested directories 

- exit with error code when we detect failures 

Note that the test failure on this PR is expected and will be fixed by #1608 (or 
happy to abandon that PR and fold the changes)",Mofei Zhang,2023-05-17T18:39:28Z
7ba638ef8d7941abc5aaf4a79bea319dadf424c0,"[tests] delete stale .expect files 

--- 

Looks like we delete `.js` files but missed `.expect` files. Jest probably 
didn't catch this because the basename of the fixtures had duplicates (in 
rule-of-hooks)",Mofei Zhang,2023-05-17T18:39:28Z
0b697d1903318b75c1e61b749365a44d39d67ebb,[babel plugin] Add codegen for useRenderCounter,Mofei Zhang,2023-05-17T18:39:27Z
bceb786c5aad621d9f6c2ee4dd3c04fe921919bb,"[runtime] useRenderCounter 

--- 

(`react-forget-runtime` package seems to be synced to -.) 

RFC: useRenderCounter hook: 

- tracks # renders (increments on render path) 

- exposes a global renderCounterRegistry (counting # renders in alive / mounted 
components) 

Next PR will modify BabelPlugin to add codegen 

```js 

// Similar to how we're currently importing `isForgetEnabled` 

import {isInstrumentForgetEnabled_Secret} from ""ReactForgetFeatureFlag""; 

// ... 

function Component_uncompiled(props) { 

if (isInstrumentForgetEnabled_Secret) { 

useRenderCounter(); 

} 

// ... 

} 

function Component_forget(props) { 

if (isInstrumentForgetEnabled_Secret) { 

useRenderCounter(); 

} 

// ... 

} 

```",Mofei Zhang,2023-05-17T18:39:26Z
dc603bb2fa505fc458ad5078aab7fb465c506f3f,[babel] Add isDev flag and put logging behind it,Sathya Gunasekaran,2023-05-17T17:38:08Z
d7a98a5e97c3512ba43dd809337ae1691df1ae66,"Fix strict mode badge URL (#26825)

## Summary
Closes https://github.com/facebook/react/issues/26821

[[Fix #26821]](https://github.com/facebook/react/issues/26821) Update
strict mode badge URL


Updated the URL in the strict mode badge to point to the correct React
documentation for StrictMode. The previous URL was outdated. Now, when a
component is not running in StrictMode, the badge links to
https://react.dev/reference/react/StrictMode for more information.


## How did you test this change?

I verified that the strict mode badge now correctly links to the updated
URL. Previously, it pointed to the outdated URL
(https://fb.me/devtools-strict-mode). After the update, it correctly
points to the React Dev documentation for StrictMode
(https://react.dev/reference/react/StrictMode).


_Since its my first contribution here, i have completed the CLA_",Ibrahem Mahyob,2023-05-17T12:34:34Z
2468a87358de55137508e777846746091d7a1514,"React DevTools 4.27.7 -> 4.27.8 (#26823)

Closes https://github.com/facebook/react/issues/26787,
https://github.com/facebook/react/issues/26793

Includes these changes:
* fix[devtools]: fixed duplicated backend activation with multiple
renderers ([hoxyq](https://github.com/hoxyq) in
[#26807](https://github.com/facebook/react/pull/26807))",Ruslan Lesiutin,2023-05-17T10:40:50Z
f8de255e94540f9018d8196b3a34da500707c39b,"Lower Suspense throttling heuristic to 300ms (#26803)

Now that the throttling mechanism applies more often, we've decided to
lower this a tad to ensure it's not noticeable. The idea is it should be
just large enough to prevent jank when lots of different parts of the UI
load in rapid succession, but not large enough to make the UI feel
sluggish. There's no perfect number, it's just a heuristic.",Andrew Clark,2023-05-16T19:59:15Z
4bfcd02b2cebcb390f5aff0d7747c60a55012d5d,"Fix Suspense throttling mechanism (#26802)

The throttling mechanism for fallbacks should apply to both their
appearance _and_ disappearance.

This was mostly addressed by #26611. See that PR for additional context.

However, a flaw in the implementation is that we only update the the
timestamp used for throttling when the fallback initially appears. We
don't update it when the real content pops in. If lots of content in
separate Suspense trees loads around the same time, you can still get
jank.

The issue is fixed by updating the throttling timestamp whenever the
visibility of a fallback changes. Not just when it appears.",Andrew Clark,2023-05-16T19:03:30Z
2a80ba544e4ad3ce46b896a75cc29d4a751d9842,"Move DisableJsxMemoization-test into main compiler test w pragma 

I originally created a separate test for the mode with JSX memoization disabled, 
but we can merge this into the main compiler-test and enable the feature with a 
pragma.",Joe Savona,2023-05-15T19:12:53Z
8bf1ec97a40e04a95dcc9bb1a576e707d8c585db,"Add flag back for inlineUseMemo 

Reverts #1502, but flips test flags (e.g. `inlineUseMemo` by default, unless a 
test specifies `@inlineUseMemo false`. I figured this add less thrash for test 
fixtures, but happy to just do a clean revert (or remove the pragma altogether 
and always pass `inlineUseMemo: true`)",mofeiZ,2023-05-15T18:27:26Z
f57ed15a332b8963775351359153d8059c26d0ce,"[Babel] Log errors to stdout, not stderr 

Writing to stderr causes buck to fail compilation.. which is not we want. Let's 
log to stdout only for now.",Sathya Gunasekaran,2023-05-15T13:45:26Z
41a897797d92d1e5d43826da8340495b347f2f4f,[Babel] Format errors for console logging,Sathya Gunasekaran,2023-05-15T13:45:26Z
5c8195aec7d16e19eed6d83f61f7d3acdd79db35,[prettier] Fix linting,Sathya Gunasekaran,2023-05-15T13:43:39Z
4cd7065665ea2cf33c306265c8d817904bb401ca,"Fix uSES hydration in strict mode (#26791)

Previously, we'd call and use getSnapshot on the second render resulting
in `Warning: Text content did not match. Server: ""Nay!"" Client: ""Yay!""`
and then `Error: Text content does not match server-rendered HTML.`.

Fixes #26095. Closes #26113. Closes #25650.

---------

Co-authored-by: eps1lon <silbermann.sebastian@gmail.com>",Sophie Alpert,2023-05-12T21:18:03Z
dda3e61347fde65b62ed2b17ead463685cb35814,[test cases] Add failing / bug tests for destructuring assignment,Mofei Zhang,2023-05-12T16:48:18Z
fe95b5df903903da6b372dcc2fd43f842ab3226d,"[hir] add DeclareContext (2/n) 

--- 

In `lower`, we now ensure that all context variables are declared by a 
`DeclareContext` instruction. `DeclareContext` always produces a `let` 
declaration, and `StoreContext` is always a reassign. There are a few reasons we 
need `DeclareContext`: 

- DeclareLocal assumes it is storing to a SSA-fied identifier (which always 
stores an immutable primitive). This does not fit context variables. 

- Without DeclareContext, we need custom logic in some passes to initialize 
identifier / context state (e.g. `MutableRange`, ValueKind, etc) for the 
`StoreContext` that declares the context. 

This PR stack models context variables as concrete identifiers (with references 
to context variables modeled by `Place` referencing the context variable 
identifier). @josephsavona pointed out that this is abusing the notion of 
Identifier/Place, as context variables are essentially interior properties of a 
ContextEnvironment. Since we are not modeling `ContextEnvironment` implicitly or 
explicitly, all inference for context variables is essentially pointer analysis.",Mofei Zhang,2023-05-12T16:48:17Z
314a5cfca5f5c26b23b648c59ed7df717016f8a3,"[hir] Add Load/StoreContext (1/n) 

--- 

This PR adds LoadContext and StoreContext to handle reading and writing to 
context variables. 

A context variable is any variable that is declared within a Forget-compiled 
function and reassigned within a closure. Conceptually, we want to treat these 
variables as attributes of a `EnvironmentContext` variable (as most javascript 
VMs do). 

- context variables currently do not participate in type inference (i.e. we do 
not produce type equations for loads from context variables). In the future, we 
can try typing this as `Phi(assignment1Type, assignment2Type, ...)`. 

- context variables are always treated as `Effect.Mutable`. 

- context variables do not participate in SSA, or certain optimizing passes 
(e.g. dead code elimination, constant propagation, etc). 

There is some still follow ups: 

- From my understanding, we should introduce a `DeclareContext` instruction. 

- currently, declaring a context variable (without initializing it) is broken. 
This is because the declaration lowers to `DeclareLocal`, which assumes it is 
storing to a SSA-fied identifier. 

```js 

let x; 

x = 4; 

() => { x = {}; }; 

``` 

- DeclareContext will also make some initialization logic easier. In this PR, I 
added some hack-y code to handle initializing effects / mutable ranges / other 
inference state for the first StoreContext. 

- Handle or bail on stores to context variables through destructuring assignment 

- 

~~Next PR:~~ 

- ~~Change closures to track reassigned identifiers (to extend mutable range of 
primitives)~~",Mofei Zhang,2023-05-12T16:17:05Z
a389046a529c6d22ba5895dd7f5d4b0b8d17c345,"[react-native] Always set RN$stopSurface (#26808)

## Summary
To support incremental adoption of bridgeless logic we want to default
to using these globals whenever they're available.

## How did you test this change?
https://github.com/facebook/react-native/pull/37410",Pieter De Baets,2023-05-12T15:14:45Z
67a05d03e38b9837e27c9fe0a673557e63ff03c5,"fix[devtools]: fixed duplicated backend activation with multiple renderers (#26807)

## Summary
Initially reported in https://github.com/facebook/react/issues/26797.
Was not able to reproduce the exact same problem, but found this case:

1. Open corresponding codepen from the issue in debug mode
2. Open components tab of the extension
3. Refresh the page

Received multiple errors:
- Warning in the Console tab: Invalid renderer id ""2"".
- Error in the Components tab: Uncaught Error: Cannot add node ""3""
because a node with that id is already in the Store.

This problem has occurred after landing a fix in
https://github.com/facebook/react/pull/26779. Looks like Chrome is
keeping the injected scripts (the backend in this case) and we start
backend twice.",Ruslan Lesiutin,2023-05-12T13:59:53Z
f5bdf462b2385add21a6d042c13a9b10919c2c9e,"Enable hooks validation on playground, make deguggable 

Enables hooks validation in playground. Also adds a tab to show the output of 
validation (in case it passes) with the inferred post dominator tree. We can use 
this to debug the dominator in case of false negatives. 

<img width=""1724"" alt=""Screenshot 2023-05-11 at 11 07 08 AM"" 
src=""https://github.com/facebook/react-forget/assets/6425824/8f7ae472-8415-4899-aedf-c8f26094ebfe"">",Joe Savona,2023-05-11T19:39:59Z
e649bf6429206a0f5bc865373648861849a6ff0e,"Fixtures from ESLint rule 

Incorporates the fixtures from eslint-plugin-react-hooks using a script, so that 
we can easily update them in the future. For each fixture we run the compiler 
with and without hooks validation first so that we know if the fixture is 
expected to pass — we have some false positives and false negatives that i can 
work through. For example we accidentally think that `userFetch()` is a hook, 
oops. Fixtures that should pass but error, or that should error but pass, are 
marked as `todo.<name>` or `todo.error.<name>`. 

While i was here i added the ability to have fixtures in subdirectories for 
grouping purposes.",Joe Savona,2023-05-11T19:39:58Z
d1e044b81ab311b74427ebc58fc541a53bc3c711,"[deps] Add DeclareLocal to ReactiveScope decls 

--- 

Try to fix bug from #1589: 

> If a declaration for an immutable identifier (i.e. one that is not later 
re-assigned, since undefined is a primitive) is sandwiched between mutations, we 
currently do not record it as an output or hoist it out of the reactive scope. 

One simple fix is to add all declared (and later referenced) identifiers as 
declarations of a reactive scope. This has some undesired effects (e.g. 
additional instructions + memo cache slots), but in practice, this shouldn't be 
happening often. 

Alternatively, we could 1.) add a pass to hoist declarations, 2.) account for 
this in constant propagation, or 3.) add a bailout",Mofei Zhang,2023-05-11T20:24:37Z
a2169d894a380c184036ea020a8e149857eb3941,"[test case] Test for DeclareLocal instruction 

--- 

Record incorrect output. 

If a declaration for an immutable identifier (i.e. one that is not later 
re-assigned, since `undefined` is a primitive) is sandwiched between mutations, 
we currently do not record it as an output or hoist it out of the reactive 
scope.",Mofei Zhang,2023-05-11T20:24:36Z
77c535ce25575e0679d7df8d40afe4dcce1d3c1f,"[snap] Make watch mode go fast(er) 

While optimizing per @josephsavona's suggestions in #1592, I noticed that we 
were clearing quite a few require cache entries. 

As of this PR, `Object.keys(require.cache)` holds 

- 1258 entries total 

- 67 files compiled from Forget source code (this is what 
`ts.createWatchCompilerHost` modifies) 

- 1120 babel source files (from node_modules) 

When working on watch mode, I'm almost always making changes to Forget source or 
test fixture files. It's a bit faster to just clear those entries (assuming that 
babel has no global state we need to invalidate). 

On my computer, re-running tests in watch mode (triggered by source code 
changes) takes: 

|   |  All tests  | One test (filter) | 

|-- |--------|----------| 

| current | 4.7s  | 1.8s  | 

| this PR  |  1.8s  | 0.1s  |",mofeiZ,2023-05-11T18:58:51Z
5e80821aa247362a5a9cf3e97754183cc0884e01,"[effects] Allow capture-store effects in rvals 

--- 

Some typed functions need to annotate callees or arguments as `Effect.Store`. 
This PR modifies alias analysis (`InferAliasForStores`) to account for this",Mofei Zhang,2023-05-11T01:55:56Z
df12d7eac40c87bd5fdde0aa5a739bce9e7dce27,"[www] reduce dynamic SchedulerFeatureFlags (#26617)

For these values we're not using dynamic values. We can statically
compile in the values we're running.",Jan Kassens,2023-05-10T21:26:05Z
7cd98ef2bcbc10f164f778bade86a4daeb821011,"Fix nightly job to publish to ""canary"" channel (#26799)

When I was renaming the next channel to canary, I updated the
`publish_preleases` workflow correctly, but I skipped over
`publish_preleases_nightly`. Oops.",Andrew Clark,2023-05-10T02:27:35Z
b5810163e913e8c95a7a0a6dee039bc102e3c987,"Change `yarn test` to default to experimental (#26741)

The idea is that the default `yarn test` command should be the one that
includes the most bleeding edge features, because during development you
probably want as many features enabled as possible.

That used to be `www-modern` but nowadays it's `experimental` because
we've landed a bunch of async actions stuff in experimental but it isn't
yet being tested at Meta.

So this switches the default to `experimental`.",Andrew Clark,2023-05-10T01:50:14Z
f3d4d1691819c58c6f9e42b113750685ab647dd0,"[lower] Bail out on computed lvalues in destructure 

--- 

Currently, we're silently producing incorrect output - 

```js 

// source 

function Component(props) { 

const computedKey = props.key; 

const { [computedKey]: x } = props.val; 

return x; 

} 

// compiles to 

function Component(props) { 

const { computedKey: x } = props.val; 

return x; 

} 

```",Mofei Zhang,2023-05-09T18:38:15Z
04cee98166d4b495b29454f4e2a774788442ecd0,"[snap] patch bug in clearing require cache 

Snap currently has a bug in which the require cache is not correctly cleared 
when running in filter mode (#tests < 2 * #workers). 

- We're currently clearing all entries in the require cache of worker threads, 
including `jest-worker` and `snap/dist/...` files 

- jest-worker seems to `require` these files on every dispatch (i.e. 
`worker.compile` seems to call `require(`compiler-worker`).compile`)",mofeiZ,2023-05-11T17:53:06Z
5de02b881b9a0c30e3bc5be352e54f4404ad72fa,"Support unused conditional/logical expressions assigned to variable 

I noticed some instances of this error when running forget on an internal 
product. I previously fixed the case if a logical/conditional used only for side 
effects (not assigned to a variable) but the new cases were assigned to an 
unused variable. I double-checked and we’ve actually fixed all the steps after 
these invariants so we can just remove them and support these cases.",Joe Savona,2023-05-09T17:58:51Z
50c3bd9d98906b8544a23e6efda31b235071cfb9,"Fix capturedRefs collection for lambdas 

When we calculate the dependencies of a FunctionExpression we were only adding 
new items if the binding identifier had not been seen yet. That is correct for 
`capturedIds` since its the set of identifiers, but incorrect for `capturedRefs` 
since its an array of all the distinct places. This meant that if a function 
expression referenced multiple properties of the same binding, we'd only record 
the first one. We now correctly record all of them.",Joe Savona,2023-05-09T17:38:56Z
fda1f0b902b527089fe5ae7b3aa573c633166ec9,"Flow upgrade to 0.205.1 (#26796)

Just a small upgrade to keep us current and remove unused suppressions
(probably fixed by some upgrade since).

- `*` is no longer allowed and has been an alias for `any` for a while
now.",Jan Kassens,2023-05-09T14:45:50Z
90109b3572ed3089afd862fd92830f5ce4f447ad,"Clean up dominator/post-dominator impl 

Tidies up the implementation a bit, splitting the single function and class into 
distinct computeDominatorTree() and computePostDominatorTree() functions and 
helper classes.",Joe Savona,2023-05-08T22:35:48Z
597e70d69f8a2c0023d0a001c819fed3c2c2ac3a,Improve eslint derived fixtures,Joe Savona,2023-05-08T21:10:07Z
8920fc0b2f82f8922c082c271503e3c156ed85cc,"Dont count throw as an exit node (React semantics) 

React will retry or abort components that throw (depending on a few conditions), 
so from React's perspective a `throw` statement is not a normal exit node. Thus 
the Rules of Hooks really have a caveat: the set of hooks that are called _in an 
execution that returns successfully_ must be consistent. Examples such as the 
following are therefore allowed: 

```javascript 

function Component(props) { 

if (props.cond) { 

throw new Error(...); 

} 

useHook(); 

} 

``` 

By modeling `throw` as an exit node, we rejected cases such as this. This diff 
changes to not model throws as exit nodes. #1584  changes this to make it an 
option, since some cases will want to consider throw as an exit node.",Joe Savona,2023-05-08T20:58:46Z
7dedc6cc724d168a81e0e2d7e9a943a0bb31a78e,Fix test for hook name to match lint rule,Joe Savona,2023-05-08T19:14:30Z
fd007be0d07e37ccbd38b805842a89faf7a16e04,"Fixtures from ESLint rule 

Incorporates the fixtures from eslint-plugin-react-hooks using a script, so that 
we can easily update them in the future. For each fixture we run the compiler 
with and without hooks validation first so that we know if the fixture is 
expected to pass — we have some false positives and false negatives that i can 
work through. For example we accidentally think that `userFetch()` is a hook, 
oops. Fixtures that should pass but error, or that should error but pass, are 
marked as `todo.<name>` or `todo.error.<name>`. 

While i was here i added the ability to have fixtures in subdirectories for 
grouping purposes.",Joe Savona,2023-05-08T19:10:43Z
7ac5e9a602347f3b7d26c60a549c483d3bc88bbf,"Small flowconfig fixes (#26784)

- The whole project root is included by default anyway, the include
section should be redundant and just misleading.
- The generated ignore paths ignore more than intended as they didn't
escape the `.` for regex.

Test Plan:
- wait for CI
- tested the ignore pattern change with renaming files and seeing the
expected files ignored for flow",Jan Kassens,2023-05-08T16:07:48Z
6bbe3111c08c5c00a37f12aa6c1dc1f086a8b938,"ValidateUnconditionalHooks pass using dominators 

See the code comments for more, but the basic idea here is that we use the post 
dominator tree to find the set of basic blocks which are guaranteed reachable in 
each function. Those are the only blocks where it is safe to call hooks, and we 
error for hook calls in any other blocks.",Joe Savona,2023-05-08T15:55:14Z
2ddd00dbb1771617565133a01eb61a8c8e1d358d,"Implement dominator/post-dominator tree calculation 

Implements an efficient algorithm for computing the dominator (or post 
dominator) tree of a CFG, following 
https://www.cs.rice.edu/~keith/Embed/dom.pdf. This is used/tested in the next PR 
to validate that hooks are called unconditionally. 

note: I clean up the implementation quite a bit late in the stack in #1584",Joe Savona,2023-05-08T15:55:13Z
5b0f56694125506623bdd9799c23378bb15e637f,"Example of ""unnecessary"" memoization of lambdas 

I noticed this while demoing Forget to React Org alum Christoph Nakazawa — in 
array.map calls (and other APIs that take a lambda as input) we sometimes end up 
memoizing the lambda. It's technically correct since the function _could_ return 
the lambda, and then we'd need it to be memoized. It's tricky because array.map 
is often called on nested objects, where even if we had type inference on the 
outer value we wouldn't know for sure that the inner property is an Array and 
not some other data type with a custom .map. For example in 
`data.feedback.comments.edges.map(edge => ...)`, even if we knew that `data` was 
an Object, we wouldn't know that data.feedback.comments.edges is an Array 
without cross-file type knowledge. 

But it's definitely wasteful to memoize these lambdas, so we should brainstorm 
options. One option that stands out right away: if the lambda has zero 
dependencies, then we could lift it out to module scope and refer to it by name.",Joe Savona,2023-05-11T05:09:17Z
11cee99968e8a2afe97f12238656c5de13656ef7,[snap runner][easy] reverse diff order,Mofei Zhang,2023-05-08T18:58:32Z
16d053d592673dd5565d85109f259371b23f87e8,"Add useFormStatus to server rendering stub (#26788)

This was an oversight when I set up the hook in #26719.",Andrew Clark,2023-05-07T00:39:08Z
efb381bbf981aedbf4eb9e1bd0e6e30abce266d1,"[Release Script] Print a hint where to get the token (#26783)

I always forget where to get it.",dan,2023-05-05T19:08:14Z
b00e27342d6ff0f2a3a57b8e1edf66290d27cf07,"Use native scheduler if defined in global scope (#26554)

Co-authored-by: Dan Abramov <dan.abramov@gmail.com>",Samuel Susla,2023-05-05T13:01:31Z
2332155161eb414889d25f83a2ff1fead330c961,"ValidateHooksUsage 

Adds a validation pass to check that the only thing you can do with hooks is 
call them. A follow-up PR (still early WIP) will check the other aspect of the 
rules of hooks, that they are not called conditionally. That's a more involved 
algorithm.",Joe Savona,2023-05-04T20:33:43Z
f75cf6fe386ef46cfa6b3fd100a287db31b05a98,Fix fbt (again),Joe Savona,2023-05-04T22:19:41Z
783e7fcfa3e354b3be13f5403fc2fd2260db00b4,"React DevTools 4.27.6 -> 4.27.7 (#26780)

List of changes:
* DevTools: fix backend activation ([hoxyq](https://github.com/hoxyq) in
[#26779](https://github.com/facebook/react/pull/26779))
* fix[dynamic-scripts-injection]: unregister content scripts before
registration ([hoxyq](https://github.com/hoxyq) in
[#26765](https://github.com/facebook/react/pull/26765))",Ruslan Lesiutin,2023-05-04T17:22:47Z
377c5175f78e47a3f01d323ad6528a696c88b76e,"DevTools: fix backend activation (#26779)

## Summary
We have a case:
1. Open components tab
2. Close Chrome / Firefox devtools window completely
3. Reopen browser devtools panel
4. Open components tab

Currently, in version 4.27.6, we cannot load the components tree.

This PR contains two changes:
- non-functional refactoring in
`react-devtools-shared/src/devtools/store.js`: removed some redundant
type castings.
- fixed backend manager logic (introduced in
https://github.com/facebook/react/pull/26615) to activate already
registered backends. Looks like frontend of devtools also depends on
`renderer-attached` event, without it component tree won't load.

## How did you test this change?
This fixes the case mentioned prior. Currently in 4.27.6 version it is
not working, we need to refresh the page to make it work.

I've tested this in several environments: chrome, firefox, standalone
with RN application.",Ruslan Lesiutin,2023-05-04T16:34:57Z
aef7ce5547c9489dc48e31f69b002cd17206e0cb,"[Flight] Progressively Enhanced Server Actions (#26774)

This automatically exposes `$$FORM_ACTIONS` on Server References coming
from Flight. So that when they're used in a form action, we can encode
the ID for the server reference as a hidden field or as part of the name
of a button.

If the Server Action is a bound function it can have complex data
associated with it. In this case this additional data is encoded as
additional form fields.

To process a POST on the server there's now a `decodeAction` helper that
can take one of these progressive posts from FormData and give you a
function that is prebound with the correct closure and FormData so that
you can just invoke it.

I updated the fixture which now has a ""Server State"" that gets
automatically refreshed. This also lets us visualize form fields.
There's no ""Action State"" here for showing error messages that are not
thrown, that's still up to user space.",Sebastian Markbåge,2023-05-03T22:36:57Z
c10010a6a00911fe99452bc561dd47c3e15f4eb8,"[Fizz] Gracefully handle suspending in DOM configs (#26768)

E.g. if we suspend (throw a promise) in pushStartInstance today we might
have already pushed some chunks (or even child segments potentially). We
should revert back to where we were.

This doesn't usually happen because when we suspend in a component it
doesn't write anything itself, it'll always defer to som host instance
to do the writing.

There was a todo about this already but I'm not 100% sure it's always
safe when suspending. It should be safe when suspending just regularly
because it's just a noop. We might not even want ""throwing a promise"" in
this mechanism to be supported longer term but for now that's how a
suspend in internals.",Sebastian Markbåge,2023-05-03T22:13:47Z
f533cee8cb4fb54c170230741eea7902cb41ee06,Add useFormStatus to Flight fixture (#26773),Andrew Clark,2023-05-03T19:29:32Z
2c1117a8d008e34eb77eaaf7b8ef315a38644735,Reuse request so that a ReabableStream body does not become disturbed (#26771),Andrew Gadzik,2023-05-03T19:06:10Z
407e7b0c620d1bb20ce52ccaa8e8ae555ab3edc4,[snap runner] debug mode,Mofei Zhang,2023-05-03T18:50:27Z
7e990419c1314252ba78d2b0fa14c8dddaab72d4,[snap tester] Handle unexpected errors by failing fixture,Mofei Zhang,2023-05-03T18:50:25Z
253b05f28d02c2403b3f8210ee2b20182a054253,"Remove restriction on optional nesting 

We previously disallowed OptionalMemberExpression inside a normal 
MemberExpression, eg `(a?.b).c`. The new representation handles this case 
correctly so we can remove the restriction.",Joe Savona,2023-05-04T00:10:31Z
7ecee6a09148e3117c487438e4ef575bc6b569bc,"Support complex computed properties in OptionalMemberExpression 

Our previous lowering for OptionalMemberExpression reordered the evaluation of 
properties, such that we had to restrict the allowed properties to those that 
were safe for reordering. With the new representation we preserve order of 
evaluation, so we can relax the restriction. This unblocks a few cases in an 
internal product.",Joe Savona,2023-05-04T00:10:28Z
e192930cd4b4d8e19627db1c33dbc313767f03d8,"Remove unnecessary `optional` property on loads 

Now that _all_ optional expression types use the new representation, the 
optionality of all PropertyLoad and ComputedLoad is modeled via control flow (in 
HIR) and the structure of OptionalExpression (in ReactiveFunction). Thus we no 
longer need the `optional` properties on these load instructions — they're 
optional if they're part of an OptionalExpression.",Joe Savona,2023-05-04T00:10:27Z
a43fc2bcf3f4e854796c99e2e9414609ad1a36c7,"Consistently use new lowering for OptionalMemberExpression 

Earlier PRs in the stack change the way we lower OptionalMemberExpression, but 
only when they ultimately appear inside some OptionalCallExpression. This PR 
ensures that _all_ OptionalMemberExpressions get the new lowering. Note that one 
test case has what is arguably a regression, but the new behavior is also 
reasonable: if we see both `a.b?.c` and `a.b.c.` as dependencies of a scope, we 
previously inferred `a.b.c` as the dependency, but we now infer `a.b` as the 
dependency. This isn't as optimal as what we had before, but it also seems good 
enough for now. Also note that some cases are improved: `foo(a.b?.c)` would 
previously have taken `a.b` as a dependency, we now take the full value of 
`a.b?.c` as a dependency - more precise. 

So overall i'm inclined to land and follow-up on the one regression, since the 
overall model is more cohesive.",Joe Savona,2023-05-04T00:10:26Z
fa7a447b9ce5a4f0be592fc2946380b0fa3b29c0,"[Fizz] Check for nullish values on ReactCustomFormAction (#26770)

Usually we don't have to do this since we only set these in the loop but
the ReactCustomFormAction props are optional so they might be undefined.

Also moved it to a general type since it's a semi-public API.",Sebastian Markbåge,2023-05-03T18:35:26Z
b7972822b5887d05ae772ef757a453265b4b7aec,"useOptimisticState -> useOptimistic (#26772)

Drop the ""state"". Just ""useOptimistic"". It's cleaner.

This is still an experimental API. May not be the final name.",Andrew Clark,2023-05-03T18:26:00Z
388686f291afb2362fdc813c49f75b4132bc1314,"Add ""canary"" to list of allowed npm dist tags (#26767)

Forgot this allowlist existed. It's an extra safeguard, in case we mess
up the configuration somehow.",Andrew Clark,2023-05-03T16:36:34Z
8a25302c668d6f9a24f6680fb4947e9b388bb7d9,"fix[dynamic-scripts-injection]: unregister content scripts before registration (#26765)

## Summary
Fixes #26756.

DevTools is failing to inject `__REACT_DEVTOOLS_GLOBAL_HOOK__` hook in
incognito mode. This is not happening straight-forward, but if extension
is toggled on and off, the next time I try to open it I am receiving an
error that content script was already registered.

<img width=""676"" alt=""Screenshot 2023-05-02 at 14 36 53""
src=""https://user-images.githubusercontent.com/28902667/235877692-51c5d284-79d9-4b00-b62e-d25d5bb5e056.png"">

- Unregistering content scripts before attempting to register them
again. We need to inject `__REACT_DEVTOOLS_GLOBAL_HOOK__` on each page,
so this should be expected behaviour.
- Fixed error logging
 
## How did you test this change?
Local build of extension for Chrome, trying the same steps, which
resulted in an error.
No regression in performance, tested on react.dev, still the same.",Ruslan Lesiutin,2023-05-03T16:27:39Z
2c2476834a7c739ca239750b73f74aa1df144a93,"Rename ""next"" prerelease channel to ""canary"" (#26761)

The ""next"" prerelease channel represents what will be published the next
time we do a stable release. We publish a new ""next"" release every day
using a timed CI workflow.

When we introduced this prerelease channel a few years ago, another name
we considered was ""canary"". But I proposed ""next"" instead to create a
greater distinction between this channel and the ""experimental"" channel
(which is published at the same cadence, but includes extra experimental
features), because some other projects use ""canary"" to refer to releases
that are more unstable than how we would use it.

The main downside of ""next"" is someone might mistakenly assume the name
refers to Next.js. We were aware of this risk at the time but didn't
think it would be an issue in practice.

However, colloquially, we've ended up referring to this as the ""canary""
channel anyway to avoid precisely that confusion.

So after further discussion, we've agreed to rename to ""canary"".

This affects the label used in the version string (e.g.
`18.3.0-next-a1c2d3e4` becomes `18.3.0-canary-a1c2d3e4`) as well as the
npm dist tags used to publish the releases. For now, I've chosen to
publish the canaries using both `@canary` and `@next` dist tags, so that
downstream consumers who might depend on `@next` have time to adjust. We
can remove that later after the change has been communicated.",Andrew Clark,2023-05-03T16:10:32Z
e5c07ad3e171a796478542db0c8884b013f18c7c,[babel] Skip compilation if there's no function name,Sathya Gunasekaran,2023-05-03T13:32:58Z
404f627c2c26a2ffcb17459fe9eef5468c7a2701,"Improve conditional dependency tracking for optional member expr inside optional 
call 

When we traverse an OptionalExpression in PropagateScopeDependencies, we 
previously considered the entire value to be optional. With the changes in this 
stack to more accurately model OptionalMemberExpression, the `object` portion of 
an OptionalMemberExpression is now evaluated within the OptionalExpression. This 
PR refines the handling of OptionalExpression accordingly, so that we only treat 
the optional portion as conditional.",Joe Savona,2023-05-02T23:49:54Z
a1902b263d838fb6541837441fd8020ce23f2582,"Rename OptionalCall -> Optional for clarity 

The previous OptionalCall terminal and reactive value kinds are now used not 
just for optional calls, but for optional member expressions that appear within 
an optional call. This PR renames those data types to OptionalTerminal and 
OptionalExpression for clarity.",Joe Savona,2023-05-02T23:31:31Z
c46157b00bbf163910e67a6695672a7ba05498a3,"More accurately model OptionalMemberExpression 

Extends the new modeling of the previous diff to OptionalMemberExpression. In an 
example such as `a?.b?.c`, we now model that not only is the `.c` conditional, 
but our control flow graph accurately reflects the fact that the `.c` is only 
evaluated if `a.b` exists. Previously we knew it was conditional but the CFG 
allowed a path from a being null through to evaluation of `.c`.",Joe Savona,2023-05-02T22:44:06Z
73a203c1996071c448b00dbf7e6f7a15296550a9,"More accurately model nested OptionalCallExpression 

More accurately models nested OptionalCallExpression. Consider: 

```javascript 

a?.(b)?.(c) 

``` 

Our previous representation modeled it such that we treated the second function 
call as if it would be called regardless of whether `a` existed or not. We knew 
that the second call was conditional, so our test output was correct, but the 
control-flow graph didn't faithfully model the semantics. That bothered me. 

The new representation correctly models the control flow, and the fact that if 
`a` is null/undefined execution immediately aborts (not reaching the second call 
at all, nor the evaluation of its args), and evaluates the whole outer 
OptionalCallExpression to `undefined`. 

Note that nested optional member expressions still have the previous model — 
that's next to address.",Joe Savona,2023-05-02T22:00:12Z
9a12e8ba58a14288359036b130c1e86ae579da84,"Support OptionalCallExpression as LHS of LogicalExpression 

A common idiom is to map over some possibly-missing list of items from a data 
payload and fall back to an empty array: 

```javascript 

const renderedItems = data?.items?.map(renderItem) ?? []; 

``` 

The way we were lowering OptionalCallExpression meant that in this case, we'd 
end up with an OptionalCallTerminal as the terminal of the logical expression's 
test block, which violates our internal invariant. Logical test blocks must end 
in a Branch! This PR fixes the immediate issue, which is that the callee - in 
this case `data?.items?.map` — was being lowered prior to the 
OptionalCallTerminal instead of inside its test block. Changing that fixes the 
shape of the IR and makes this example work. 

As part of investigating this I realized that the way I originally handled 
lowering of optional call isn't quite right. The difference isn't observable 
unless we did more sophisticated DCE but we don't correctly model the fact that 
if `data.items` is null that the `map()` call won't occur. That is technically 
fine bc we do model the fact that the `map()` call is conditional, and notably 
its arguments are only conditional dependencies. So it's good enough. But in a 
follow-up I'll change to model the fact that `data.items` is null, that the map 
call isn't reachable at all.",Joe Savona,2023-05-02T22:00:11Z
fa4314841e7fdeef6e6bc5a7722fe74dc8e9fd89,"Remove deprecated workflow key from Circle config (#26762)

This key was only valid during the 2.0 beta period so we can remove it.",Andrew Clark,2023-05-02T18:59:36Z
8292c65d8456fa75ab425c2e2754417780581cea,"Add missing traverseValue() 

I don't think this one matters but just in case, we should always call 
traverseValue() when overriding visitValue().",Joe Savona,2023-05-02T18:07:12Z
dd6a9d6a03a04ed21319da90c3c0967b53d7f738,"Dont memoize hook calls in logical expressions 

Fix the previous bug — this was a simple oversight, where FlattenScopesWithHooks 
overrode `visitValue()` but failed to call `traverseValue()`. This meant that 
when we reached compound expressions such as LogicalExpressions that we didn't 
traverse into their nested values, and didn't see the hooks hidden there.",Joe Savona,2023-05-02T18:01:37Z
bfb84eed3b4c863474e0b2fa1d5dde3c638ec470,"Repro for memoized hook within logical expression 

Repro of a bug in which we incorrect memoize hook calls that are inside logical 
expressions (though the bug could occur for ternaries, optional calls, and 
sequence expressions too).",Joe Savona,2023-05-02T17:47:48Z
c0b011935643645f29f1248aae7fc1238d636481,"Start of architecture doc 

This is an attempt to get down some of the principles and goals that we've had 
partially written down, partially just thoroughly discussed amongst the team. 
It's rough draft quality but better than nothing, and gives us someplace to add 
to.",Joe Savona,2023-05-02T16:33:19Z
5dd90c562354758942c833b0a46923176e92208e,Use content hash for react-native builds (#26734),Samuel Susla,2023-05-02T11:04:02Z
559e83aebb2026035d47aa0ebf842f78d4cd6757,"[Fizz] Allow an action provide a custom set of props to use for progressive enhancement (#26749)

Stacked on top of #26735.

This allows a framework to add a `$$FORM_ACTION` property to a function.
This lets the framework return a set of props to use in place of the
function but only during SSR. Effectively, this lets you implement
progressive enhancement of form actions using some other way instead of
relying on the replay feature.

This will be used by RSC on Server References automatically by
convention in a follow up, but this mechanism can also be used by other
frameworks/libraries.",Sebastian Markbåge,2023-05-01T20:01:14Z
67f4fb02130b1fe1856289e3b66bb0b8cca57ff7,"Allow forms to skip hydration of hidden inputs (#26735)

This allows us to emit extra ephemeral data that will only be used on
server rendered forms.

First I refactored the shouldSkip functions to now just do that work
inside the canHydrate methods. This makes the Config bindings a little
less surface area but it also helps us optimize a bit since we now can
look at the code together and find shared paths.

canHydrate returns the instance if it matches, that used to just be
there to refine the type but it can also be used to just return a
different instance later that we find. If we don't find one, we'll bail
out and error regardless so no need to skip past anything.",Sebastian Markbåge,2023-05-01T19:35:57Z
8ea96ef84d8f08ed1846dec9e8ed20d2225db0d3,"[Fizz] Encode external fizz runtime into chunks eagerly (#26752)

in https://github.com/facebook/react/pull/26738 we added nonce to the
ResponseState. Initially it was used in a variety of places but the
version that got merged only included it with the external fizz runtime.
This PR updates the config for the external fizz runtime so that the
nonce is encoded into the script chunks at request creation time.

The rationale is that for live-requests, streaming is more likely than
not so doing the encoding work at the start is better than during flush.
For cases such as SSG where the runtime is not required the extra
encoding is tolerable (not a live request). Bots are an interesting case
because if you want fastest TTFB you will end up requiring the runtime
but if you are withholding until the stream is done you have already
sacrificed fastest TTFB and the marginal slowdown of the extraneous
encoding is hopefully neglibible

I'm writing this so later if we learn that this tradeoff isn't worth it
we at least understand why I made the change in the first place.",Josh Story,2023-05-01T17:50:36Z
491aec5d6113ce5bae7c10966bc38a4a8fc091a8,"Implement experimental_useOptimisticState (#26740)

This adds an experimental hook tentatively called useOptimisticState.
(The actual name needs some bikeshedding.)

The headline feature is that you can use it to implement optimistic
updates. If you set some optimistic state during a transition/action,
the state will be automatically reverted once the transition completes.

Another feature is that the optimistic updates will be continually
rebased on top of the latest state.

It's easiest to explain with examples; we'll publish documentation as
the API gets closer to stabilizing. See tests for now.

Technically the use cases for this hook are broader than just optimistic
updates; you could use it implement any sort of ""pending"" state, such as
the ones exposed by useTransition and useFormStatus. But we expect
people will most often reach for this hook to implement the optimistic
update pattern; simpler cases are covered by those other hooks.",Andrew Clark,2023-05-01T17:19:20Z
9545e4810c2dc8922f575b6d8f726503a7345d0c,"Add nonce support to bootstrap scripts and external runtime (#26738)

Adds support for nonce on `bootstrapScripts`, `bootstrapModules` and the external fizz runtime",Dan Ott,2023-05-01T16:19:02Z
5196fbd92b9fc4651164fb51bf888eb7570f8287,"Visit switch test case as scope dependency 

This can't be tested yet - we only support simple, safely re-orderable values as 
case test values - but it will easy to overlook later so i'm adding now.",Joe Savona,2023-05-01T15:51:58Z
86b0e91998a04b22bb54a95d54f4a7632efa902f,"Gate DevTools test to fix CI (#26742)

This test started failing recently in older versions of React because
the Scheduler priority inside a microtask is Normal instead of
Immediate. This is expected because microtasks are not Scheduler tasks;
it's an implementation detail.

I gated the test to only run in v17 because it's a regression test for
legacy Suspense behavior, and the implementation details of the snapshot
changed in v18.

Test plan
---------

Using latest:

```
yarn test --build --project devtools --release-channel=experimental profilingcache
```

Using v17 (typically runs in a timed CI workflow):

```
/scripts/circleci/download_devtools_regression_build.js 17.0 --replaceBuild
yarn test --build --project devtools --release-channel=experimental --reactVersion 17.0 profilingcache
```",Andrew Clark,2023-04-29T15:14:16Z
41d99ffcb94dd8976d782be1b79ce9d4d7f04cd5,"PropagateScopeDeps uses visitor infra 

PropagateScopeDependencies is one of the few places we don't use the new visitor 
infra for traversing ReactiveFunction. Or rather it _was_! 

Note that there's a bit less value here than in other places since we have to 
handle each terminal variant with custom logic, but at least it's more 
consistent with the rest of the codebase now.",Joe Savona,2023-04-29T00:14:02Z
b12bea62d9cfd9a925f28cb2c93daeda3865a64e,"Preinits should support a nonce option (#26744)

Currently there is no way to provide a nonce when using
`ReactDOM.preinit(..., { as: 'script' })`

This PR adds `nonce?: string` as an option

While implementing this PR I added a test to also show you can pass
`integrity`. This test isn't directly related to the nonce change.",Josh Story,2023-04-28T22:57:39Z
efbd68511db472120afa0f3eba78a7462f25ed30,Remove unused `initialStatus` parameter from `useHostTransitionStatus` (#26743),Sebastian Silbermann,2023-04-28T21:18:10Z
18282f881dae106ebf6240aa52c8c02fe7c8d6f2,"Fix: Update while suspended fails to interrupt (#26739)

This fixes a bug with `use` where if you update a component that's
currently suspended, React will sometimes mistake it for a render phase
update.

This happens because we don't reset `currentlyRenderingFiber` until the
suspended is unwound. And with `use`, that can happen asynchronously,
most commonly when the work loop is suspended during a transition.

The fix is to make sure `currentlyRenderingFiber` is only set when we're
in the middle of rendering, which used to be true until `use` was
introduced.

More specifically this means clearing `currentlyRenderingFiber` when
something throws and setting it again when we resume work.

In many cases, this bug will fail ""gracefully"" because the update is
still added to the queue; it's not dropped completely. It's also
somewhat rare because it has to be the exact same component that's
currently suspended. But it's still a bug. I wrote a regression test
that shows a sync update failing to interrupt a suspended component.",Andrew Clark,2023-04-28T19:35:14Z
1df89e992a7260d4690c3c82437d6d0ddd992d90,"Remove unnecessary temporary in tests 

We previously didn't support ternaries whose value was unused, so we had an 
extraneous temporary and console.log call to ensure the value counted as used. 
We now special-case ternary/conditional expressions which are in an 
ExpressionStatement to not prune them, so the temporary and log are now 
unnecessary.",Joe Savona,2023-04-27T17:43:43Z
d2f33dd524802245ce111917e4fd764b2657042f,"Retain locations when using babel cloneNode in lambdas 

It turns out the third parameter to `cloneNode` is [""If the third parameter is 
true, the cloned nodes exclude location 
properties.""](https://github.com/babel/babel/blob/c060e5e3d538a174a017edb7e75b07e80ccb55b7/packages/babel-types/src/clone/cloneNode.ts#L35-L39) 
strips away locations if its true, so to fix simply change this to false",Lauren Tan,2023-04-27T20:25:41Z
d5dee809338c551a8ff2301eabdfc9e83609eb91,"Failing test for fbt issue 

Specifically, the fbt plugin would error on a `null` loc as it [relies on it in 
one of its 
utils](https://github.com/facebook/fbt/blob/6a23a5374a757a49654d8304a3efea8eb9548eea/packages/babel-plugin-fbt/src/getNamespacedArgs.js#L82-L84), 
implying a missing `loc` somewhere in our pipeline after codegen",Lauren Tan,2023-04-27T20:25:41Z
3eed52b49b0885840ca236fee18724f3564b47e8,"Only debug with @debug pragma 

You don't always want to debug all the passes when you use @only, so split it 
out into its own pragma",Lauren Tan,2023-04-27T20:16:50Z
b69d70664cf52bac084ea092a1cf2d181239aa5e,"Console methods are readonly 

Defines common `console` methods to tell the compiler that they take readonly 
args. This ensures that things like `console.log()` aren't accidentally viewed 
as a mutation. Previously the pattern of ""build object, then log it after 
mutation is done"" would have grouped the console.log as part of the mutation and 
the log only would fire if the value got reconstructed. Now we know the log 
isn't mutating, and the log will happen regardless of whether the value is 
rebuilt or cached.",Joe Savona,2023-04-27T17:34:31Z
2ddbbd4735df509a5e34ad2ec2bcbc6beacb88db,"Exhaustive switches for some terminal handling 

Updates two points in the compiler that were easy to miss when adding new 
terminals: 

* HIRBuilder's `removeUnreachableFallthroughs()` nulls out unreachable 
fallthroughs, but this had a non-exhaustive `if` statement. It now uses a helper 
function which internally has an exhaustive switch. 

* LeaveSSA needs to schedule block fallthroughs, but had a non-exhaustive `if` 
statement. It also uses a helper function which internally has an exhaustive 
switch. 

cc @poteto since you ran into this (ie the compiler not alerting you to update 
these places) w your diffs.",Joe Savona,2023-04-26T23:34:26Z
afe2f5c810b10065ba8600ae367884e59c135465,"Support useMemo w named functions 

Supports useMemo invocations where the function is not an inline function, such 
as `useMemo(someFunction, [])`.",Joe Savona,2023-04-27T01:16:28Z
1cccd6a81574ea28cd5fac5da73955e9547e0fd6,"[hir] Clone babel nodes rather than reusing them 

There's state such as scope info sticking on to these nodes so reusing them can 
cause issues if a pass later on just uses scopes these directly.",Sathya Gunasekaran,2023-04-27T16:35:30Z
540bab085d571789f4562565eebfd0db9f36345c,"Implement experimental_useFormStatus (#26722)

This hook reads the status of its ancestor form component, if it exists.

```js
const {pending, data, action, method} = useFormStatus();
```

It can be used to implement a loading indicator, for example. You can
think of it as a shortcut for implementing a loading state with the
useTransition hook.

For now, it's only available in the experimental channel. We'll share
docs once its closer to being stable. There are additional APIs that
will ship alongside it.

Internally it's implemented using startTransition + a context object.
That's a good way to think about its behavior, but the actual
implementation details may change in the future.

Because form elements cannot be nested, the implementation in the
reconciler does not bother to keep track of multiple nested ""transition
providers"". So although it's implemented using generic Fiber config
methods, it does currently make some assumptions based on React DOM's
requirements.",Andrew Clark,2023-04-26T22:19:58Z
4a8c90a77cff6e931bbc0395b3f6405ccf900ee9,"[babel] Remove unsafe calls to path.stop() 

Discovered this in a recent attempt at syncing Forget to Meta, it seems 

that calling path.stop() is unsafe as it appears to have strange 

behavior in plugins that come after. This resulted in `import type 

{...}` not being compiled away in the post-babel output which isn't 

valid JS syntax. Removing the `stop()` calls fixes it 

Test plan: made these changes locally, synced my local changes to Meta and reran 
- in simulator and observe that it now runs and doesn't throw a syntax error",Lauren Tan,2023-04-26T21:16:34Z
b1eaf88c61dfaf3fedf4f58e45fad4cf519e8049,"[babel] Ensure only adding import specifier to non-namespace 

Missed this in the previous PR 

Test plan: P706162189 (some babel errors) before this PR, P706255523 has no 
errors",Lauren Tan,2023-04-26T19:16:21Z
e5f4b3008fcb598c1bd2b15ec0b52f05cd8a3b11,Rename things for clarity in PropagateScopeDeps,Joe Savona,2023-04-26T18:34:47Z
2aa3a284810424bee7064fa0748c260f8121bb5e,test case for debugger stmt in reactive scope,Joe Savona,2023-04-26T18:34:46Z
5b9992075c7127ff4e2b5361dd57b732f86b97ad,"Driveby optimization of DCE 

Lift a constant evaluation out of a loop",Joe Savona,2023-04-26T18:27:41Z
d4b8df54410eaae8adb81e94f32698ef9386b610,Address code review,Joe Savona,2023-04-26T18:27:40Z
e98823f93373d3e988ed2f9323a1b803b76f8935,"Generalize #1521 for PropertyLoad 

This is a more general version of the change from #1521. That PR ensured that 
LoadLocal temporaries accessed outside the instruction's scope are correctly 
promoted. However, we have a similar pattern with PropertyLoad. 

This PR adds a general mechanism for handling these type of indirections: any 
LoadLocal/PropertyLoad temporary accessed when it's defining scope is not active 
will be promoted to a declaration of the defining scope. Notably, we do this in 
a way that ensures that the dependencies are preserved, ie that we correctly 
view the operand of LoadLocal/PropertyLoad as a dependency of the current scope.",Joe Savona,2023-04-26T18:27:39Z
dd5069162a042731411b48a20f7397d0bbcda2b8,"This page left intentionally blank 

Supports EmptyStatement nodes by ignoring them. Note no tests because 
format-on-save clears away any empty statements and there is, rather 
frustratingly, no way to tell VSCode not to format on save for a specific file 
via the file contents itself or project configuration (at least, not that i can 
find).",Joe Savona,2023-04-26T18:27:38Z
8e7b68506f0b490c7eca3ee886bfd1ff7991d07c,"You get a debugger and you get a debugger and you get a 

Adds support for DebuggerStatement.",Joe Savona,2023-04-26T18:27:37Z
1f51b10ac9762550574485028a4081902d6bd034,"Fix unused logical/condition via ExpressionStatement instr 

Uses the new ExpressionStatement instruction to ensure that logical and 
conditional expressions are never pruned. This addresses an issue where we were 
unable to construct a ReactiveFunction for unused logical/conditional bc there 
wasn't a single Identifier assigned in both branches. The ExpressionStatement 
ensures that the result is used, that we don't prune the phi, and that both 
branches have a single assignment target. 

In theory we could be more sophisticated with DCE and still prune these 
instructions if their operands are also safe to prune, but in practice you're 
only like to have a logical/conditional as an expression statement (in the 
source) if it's for side effects.",Joe Savona,2023-04-26T18:27:36Z
2cb1c723051378a3e94bec445f135a457d93f04f,"Scaffolding for ExpressionStatement instruction kind 

Adds an `ExpressionStatement` instruction variant to model values that are 
otherwise ""unused"" but which we don't want to remove. The next diff changes 
BuildHIR to use this where appropriate.",Joe Savona,2023-04-26T18:27:35Z
894cf6e37b7b34c95076328a10efbbc2117f89bc,"First-class representation of builtin jsx tags 

We previously represented JsxExpressions using builtin tags - `<div>`, `<b>` etc 
- by lowering the tag name to a Primitive with the string name of the tag. 
However, by lowering into an independent value, it was possible that the lowered 
tag name could be grouped into a different memo slot, such that we ended up with 
output like: 

```javascript 

let t0; 

if (c_1) { 

... 

t0 = ""div"" 

... 

} else { ... } 

return <t0>{children}</t0> 

``` 

This is obviously wrong. It's also wrong to rename `t0` -> `T0`, because React 
treats that as a custom component, not a builtin. The right thing is to 
explicitly model builtin components, which this PR does by making 
`JsxExpression.tag` be a union of Place | BuiltinTag.",Joe Savona,2023-04-26T18:27:35Z
9aea37ff5af310dbd28a22b0d56e3d4233e8cb24,"Promote temporaries used in JSX to uppercase names 

Ensures that temporaries used in JsxExpression tags are named with a capital 
letter so that they are treated as custom components rather than builtins.",Joe Savona,2023-04-26T18:27:34Z
5f2f76cbcd27eb1bd2d0cb68965046183f71d98b,"Fix test262 

We [renamed the 
export](https://github.com/facebook/react-forget/blob/6f001f54b036d6f427c8d4c1c04ace3ab1998a4d/forget/src/Babel/RunReactForgetBabelPlugin.ts#L22) 
of runReactForgetBabelPlugin so the test262 preprocessor was erroring",Lauren Tan,2023-04-26T18:12:18Z
6eadbe0c4aebf68410bb48147054ee22eec4c20c,"Fix: Resolve entangled actions independently (#26726)

When there are multiple async actions at the same time, we entangle them
together because we can't be sure which action an update might be
associated with. (For this, we'd need AsyncContext.) However, if one of
the async actions fails with an error, it should only affect that
action, not all the other actions it may be entangled with.

Resolving each action independently also means they can have independent
pending state types, rather than being limited to an `isPending`
boolean. We'll use this to implement an upcoming form API.",Andrew Clark,2023-04-26T00:43:20Z
ec5e9c2a75749b0a470b7148738cb85bbb035958,"Fix double preload (#26729)

I found a couple scenarios where preloads were issued too aggressively

1. During SSR, if you render a new stylesheet after the preamble flushed
it will flush a preload even if the resource was already preloaded
2. During Client render, if you call `ReactDOM.preload()` it will only
check if a preload exists in the Document before inserting a new one. It
should check for an underlying resource such as a stylesheet link or
script if the preload is for a recognized asset type",Josh Story,2023-04-25T22:10:34Z
5ed297fa74fb75d4b25d8b3e9dfa0608c23872aa,"[snap tester] Support @only / @skip with special file 

--- 

Changes: 

- Added `testfilter.txt` 

``` 

// @only 

call 

capture-param-mutate 

jsx-spread 

``` 

or 

``` 

// @skip 

call 

error.todo-kitchensink 

``` 

- grouped all commands under `--mode` 

```js 

// runs all tests 

yarn snap 

// runs all tests and updates fixtures 

yarn snap --mode update 

// runs only tests that pass `testfilter.txt` 

yarn snap --mode filter 

// run in watch mode 

yarn snap --mode watch 

``` 

- in watch mode, toggle between running all tests or filtered tests 

``` 

386 Tests, 386 Passed, 0 Failed 

Completed in 4994 ms 

Current mode = NORMAL, run all test fixtures. 

Waiting for input or file changes... 

u     - update all fixtures 

f     - toggle (turn on) filter mode 

q     - quit 

[any] - rerun tests 

> f 

PASS  call 

PASS  capture_mutate-across-fns 

PASS  timers 

3 Tests, 3 Passed, 0 Failed 

Completed in 39 ms 

Current mode = FILTER, filter test fixtures by ""testfilter.txt"" 

Waiting for input or file changes... 

u     - update all fixtures 

f     - toggle (turn off) filter mode 

q     - quit 

[any] - rerun tests 

``` 

--- 

- `runner.ts` is pretty large now, happy to split it up into multiple files 

- I'd also like to refactor `watch` to make its shared state and control flow 
explicit",Mofei Zhang,2023-04-25T18:36:06Z
bf518c2b2cb09025c28c07c2686ee71585ace071,"[snap tester] watch mode: ignore changes from test updates 

A bit of a hack - 

We currently trigger test runs when we detect changes in the test fixtures 
directory. This trigger is also hit when we run `snap` in update mode, since 
updating performs file writes. 

This PR will ignore subscription changes (callbacks) that trigger within 5 
seconds of the last update. 

It seems difficult to be more granular with a timestamp, since `@parcel/watcher` 
doesn't give us the file change timestamp and (from my understanding), other 
promises and tasks can be queued to run between the update and callback.",Mofei Zhang,2023-04-25T18:15:25Z
f87e97a0a67fa7cfd7e6f2ec985621c0e825cb23,"Handle line endings correctly on Windows in build script for RN (#26727)

## Summary

We added some post-processing in the build for RN in #26616 that broke
for users on Windows due to how line endings were handled to the regular
expression to insert some directives in the docblock. This fixes that
problem, reported in #26697 as well.

## How did you test this change?

Verified files are still built correctly on Mac/Linux. Will ask for help
to test on Windows.",Rubén Norte,2023-04-25T16:26:34Z
25b99efe0c9c9d593c86829386c86740d409fa8c,"[DevTools] Add support for useMemoCache (#26696)

useMemoCache wasn't previously supported in the DevTools, so any attempt
to inspect a component using the hook would result in a
`dispatcher.useMemoCache is not a function (it is undefined)` error.",lauren,2023-04-25T16:19:25Z
ed545ae3d3478cd82aa498494025cb3a15188e4c,"Turn off enableFormActions in Meta build (#26721)

This is enabled in the canary channels, but because it's relatively
untested, we'll disable it at Meta until they're ready to start trying
it out. It can change some behavior even if you don't intentionally
start using the API.

The reason it's not a dynamic flag is that it affects the external Fizz
runtime, which currently can't read flags at runtime.",Andrew Clark,2023-04-25T16:01:34Z
bf449ee74e5e98af3d08c87bb6a9f22a021f3522,"Replay Client Actions After Hydration (#26716)

We used to have Event Replaying for any kind of Discrete event where
we'd track any event after hydrateRoot and before the async code/data
has loaded in to hydrate the target. However, this didn't really work
out because code inside event handlers are expected to be able to
synchronously read the state of the world at the time they're invoked.
If we replay discrete events later, the mutable state around them like
selection or form state etc. may have changed.

This limitation doesn't apply to Client Actions:

- They're expected to be async functions that themselves work
asynchronously. They're conceptually also in the ""navigation"" events
that happen after the ""submit"" events so they're already not
synchronously even before the first `await`.
- They're expected to operate mostly on the FormData as input which we
can snapshot at the time of the event.

This PR adds a bit of inline script to the Fizz runtime (or external
runtime) to track any early submit events on the page - but only if the
action URL is our placeholder `javascript:` URL. We track a queue of
these on `document.$$reactFormReplay`. Then we replay them in order as
they get hydrated and we get a handle on the Client Action function.

I add the runtime to the `bootstrapScripts` phase in Fizz which is
really technically a little too late, because on a large page, it might
take a while to get to that script even if you have displayed the form.
However, that's also true for external runtime. So there's a very short
window we might miss an event but it's good enough and better than
risking blocking display on this script.

The main thing that makes the replaying difficult to reason about is
that we can have multiple instance of React using this same queue. This
would be very usual but you could have two different Reacts SSR:ing
different parts of the tree and using around the same version. We don't
have any coordinating ids for this. We could stash something on the form
perhaps but given our current structure it's more difficult to get to
the form instance in the commit phase and a naive solution wouldn't
preserve ordering between forms.

This solution isn't 100% guaranteed to preserve ordering between
different React instances neither but should be in order within one
instance which is the common case.

The hard part is that we don't know what instance something will belong
to until it hydrates. So to solve that I keep everything in the original
queue while we wait, so that ordering is preserved until we know which
instance it'll go into. I ended up doing a bunch of clever tricks to
make this work. These could use a lot more tests than I have right now.

Another thing that's tricky is that you can update the action before
it's replayed but we actually want to invoke the old action if that
happens. So we have to extract it even if we can't invoke it right now
just so we get the one that was there during hydration.",Sebastian Markbåge,2023-04-25T14:22:20Z
64d6be71224c4241ba8f9d80747d53c0fd6224e7,"Use require() to implement script src in tests (#26717)

We currently use rollup to make an adhoc bundle from the file system
when we're testing an import of an external file.

This doesn't follow all the interception rules that we use in jest and
in our actual builds.

This switches to just using jest require() to load these. This means
that they effectively have to load into the global document so this only
works with global document tests which is all we have now anyway.",Sebastian Markbåge,2023-04-25T13:12:16Z
919620b2935ca6bb8dfc96204a7cf8754c006240,"Add stub for experimental_useFormStatus (#26719)

This wires up, but does not yet implement, an experimental hook called
useFormStatus. The hook is imported from React DOM, not React, because
it represents DOM-specific state — its return type includes FormData as
one of its fields. Other renderers that implement similar methods would
use their own renderer-specific types.

The API is prefixed and only available in the experimental channel.

It can only be used from client (browser, SSR) components, not Server
Components.",Andrew Clark,2023-04-25T00:18:34Z
9ece58ebaa46f8b5e90a6ad71be4919e1dc9c563,"Go through the toString path for booleanish strings and .name property (#26720)

This is consistent with what we used to do but not what we want to do.",Sebastian Markbåge,2023-04-24T23:26:50Z
a8db941fb7de28f72e0725dee89b6a298683b3a7,"[snap tester] Handle interrupts by forking runner 

Run snap tester on a forked node process so runs can be interrupted. (Currently, 
`Ctrl+C` is not handled until after all test fixtures finish compiling). This 
*feels* a bit heavy-handed, but main.ts is pretty small and doesn't do much 
other than listen for input / signals. Would love feedback here since I haven't 
really worked with nodejs / JS cli tools before 

- main.ts 

new file that spawns forked runner 

- pipe stdin/out/err to and from the child runner process, details described in 
comments. 

- listens for exit event of child 

- runner.ts 

- added logic to listen for interrupts and clean up (not really familiar with 
how file and tsc watchers are implemented, so we try to call 'close' on them 
just in case they need to release locks / do other cleanup)",Mofei Zhang,2023-04-24T23:09:40Z
4cf86028c0d6c73066dddb731b651cd07a96f290,"[snap tester] Patch runner for sync mode 

--- 

`yarn snap --sync` currently fails on `error.file-has-non-critical-errors`. This 
is because we're relying on a globally overwritten `console.error` function to 
report non-fatal errors. However, executing `Promise.all(...)` on a single 
nodejs thread will interleave calls to `run` (which is an async function).",Mofei Zhang,2023-04-24T19:52:54Z
46752845eb5f2921869cccf00bf51c9156c818aa,"[snap tester] QoL: help messages, cmd line validation, ts errors 

--- 

Next PRs: skip / only tests, pretty diffing 

This PR: 

1. Add help messages: 

``` 

$ node packages/snap/dist/runner.js --help 

Options: 

--version         Show version number                                [boolean] 

--sync            Run compiler in main thread (instead of using worker threads 

or subprocesses). Defaults to false. 

[boolean] [default: true] 

--worker-threads  Run compiler in worker threads (instead of subprocesses). 

Defaults to true.                  [boolean] [default: true] 

--watch           Run in watch mode. Defaults to false (single run). 

[boolean] [default: false] 

--update          Run in update mode. Update mode only affects the first run, 

subsequent runs (in watch mode) require typing `u` to 

update. Defaults to false.        [boolean] [default: false] 

--help            Show help                                          [boolean] 

✨  Done in 0.62s. 

``` 

``` 

... 

386 Tests, 386 Passed, 0 Failed 

Completed in 4434 ms 

Waiting for input or file changes... 

u     - update fixtures 

q     - quit 

[any] - rerun tests 

``` 

2. Surface typescript diagnostics; skip test fixtures if source code has errors 

``` 

$ node packages/snap/dist/runner.js 

src/Optimization/ConstantPropagation.ts:87:3 - error TS1434: Unexpected keyword 
or identifier. 

src/Optimization/ConstantPropagation.ts:87:3 - error TS2304: Cannot find name 
'lt'. 

src/Optimization/ConstantPropagation.ts:87:6 - error TS2552: Cannot find name 
'hasChanges'. Did you mean 'onhashchange'? 

src/Optimization/ConstantPropagation.ts:135:11 - error TS2552: Cannot find name 
'hasChanges'. Did you mean 'onhashchange'? 

src/Optimization/ConstantPropagation.ts:155:10 - error TS2552: Cannot find name 
'hasChanges'. Did you mean 'onhashchange'? 

Compilation failed (5 errors). 

Found errors in Forget source code, skipping test fixtures. 

✨  Done in 10.73s. 

``` 

``` 

Compiling... 

src/Optimization/ConstantPropagation.ts:86:39 - error TS2552: Cannot find name 
'HIRFunctin'. Did you mean 'HIRFunction'? 

Compilation failed (1 error). 

Test: Found errors in Forget source code, skipping test fixtures. 

Waiting for input or file changes... 

u     - update fixtures 

q     - quit 

[any] - rerun tests 

```",Mofei Zhang,2023-04-24T19:52:52Z
a6769df6b11291d5c582a8f5783fcc7f2c61e9bb,"[babel] Alias unstable_useMemoCache to useMemoCache 

DevTools relies on built-in hook names at their call site to be unprefixed in 

order to correctly track them. This PR updates our Babel plugin to: 

- Check if there are any existing import declarations of `import { /* ... /* } 
from 'react';` 

- If true, we add the specifier `unstable_useMemoCache as useMemoCache` 

- Otherwise, we synthesize a new import declaration 

- In Codegen we now emit `useMemoCache(n)` rather than 
`React.unstable_useMemoCache(n)`",Lauren Tan,2023-04-26T17:40:22Z
5e5342b10059bf90738a8d9171fcf0af9d9d5d51,"Insert temporary input node to polyfill submitter argument in FormData (#26714)

Insert temporary input node to polyfill submitter argument in FormData.
This works for buttons too and fixes a bug where the type attribute
wasn't reset.

I also exclude the submitter if it's a function action. This ensures
that we don't include the generated ""name"" when the action is a server
action. Conceptually that name doesn't exist.",Sebastian Markbåge,2023-04-24T18:18:09Z
9c58a0b6475509f9124da578207aa0d3b7364035,"Update Flight fixture to use use() instead of Promise as a child (#26715)

The Promise as a child case seems buggy. It ends up throwing the Promise
as fatal when used in Sync rendering.",Sebastian Markbåge,2023-04-24T18:00:25Z
9ee796430278c6f6e8acec4f54fd9be7f7868c0d,"Fix escaping in ReactDOMInput code (#26630)

JSON.stringify isn't the right thing here. Luckily this doesn't look to have any security impact.",Sophie Alpert,2023-04-24T17:33:11Z
2fa632381839c8732dad9107b90911163b7f2b7a,"Restore server controlled form fields to whatever they should be (#26708)

Fizz can emit whatever it wants for the SSR version of these fields when
it's a function action so they might not align with what is in the
previous props. Therefore we need to force them to update if we're
updating to a non-function where they might be relevant again.",Sebastian Markbåge,2023-04-23T21:44:28Z
7ce765ec321a6f213019b56b36f9dccb2a8a7d5c,"Clean up enableUseHook flag (#26707)

This has been statically enabled everywhere for months.",Andrew Clark,2023-04-23T18:50:17Z
a21d1475ffd7225a463f2d0c0c9b732c8dd795eb,"[Flight] Fix File Upload in Node.js (#26700)

Use the Blob constructor + append with filename instead of File
constructor. Node.js doesn't expose a global File constructor but does
support it in this form.

Queue fields until we get the 'end' event from the previous file. We
rely on previous files being available by the time a field is resolved.
However, since the 'end' event in Readable is fired after two
micro-tasks, these are not resolved in order.

I use a queue of the fields while we're still waiting on files to
finish. This still doesn't resolve files and fields in order relative to
each other but that doesn't matter for our usage.",Sebastian Markbåge,2023-04-22T05:04:24Z
36e4cbe2e918ec9c8a7abbfda28898c835361fb2,"[Float][Flight] Flight support for Float (#26502)

Stacked on #26557 

Supporting Float methods such as ReactDOM.preload() are challenging for
flight because it does not have an easy means to convey direct
executions in other environments. Because the flight wire format is a
JSON-like serialization that is expected to be rendered it currently
only describes renderable elements. We need a way to convey a function
invocation that gets run in the context of the client environment
whether that is Fizz or Fiber.

Fiber is somewhat straightforward because the HostDispatcher is always
active and we can just have the FlightClient dispatch the serialized
directive.

Fizz is much more challenging becaue the dispatcher is always scoped but
the specific request the dispatch belongs to is not readily available.
Environments that support AsyncLocalStorage (or in the future
AsyncContext) we will use this to be able to resolve directives in Fizz
to the appropriate Request. For other environments directives will be
elided. Right now this is pragmatic and non-breaking because all
directives are opportunistic and non-critical. If this changes in the
future we will need to reconsider how widespread support for async
context tracking is.

For Flight, if AsyncLocalStorage is available Float methods can be
called before and after await points and be expected to work. If
AsyncLocalStorage is not available float methods called in the sync
phase of a component render will be captured but anything after an await
point will be a noop. If a float call is dropped in this manner a DEV
warning should help you realize your code may need to be modified.

This PR also introduces a way for resources (Fizz) and hints (Flight) to
flush even if there is not active task being worked on. This will help
when Float methods are called in between async points within a function
execution but the task is blocked on the entire function finishing.

This PR also introduces deduping of Hints in Flight using the same
resource keys used in Fizz. This will help shrink payload sizes when the
same hint is attempted to emit over and over again",Josh Story,2023-04-22T03:45:51Z
8f42196892847a3dd1ab4c84eda0c8d52508ecf6,"Change DOM HostContext to number instead of string (#26698)

In React DOM, we use HostContext to represent the namespace of whatever
is currently rendering — SVG, Math, or HTML. Because there is a fixed
set of possible values, we can switch this to be a number instead. My
motivation is that I want to start tracking additional information in
this type, and I want to pack all of it into a single number instead of
turning it into an object. For better performance.

(In dev, the host context type is already an object that includes
additional information, but that's dev so who cares.)

Technically, before this change, the host context could be any namespace
URI string, but any value other than SVG or Math was treated the same
way. Only SVG and Math have special behavior. So in the new structure,
there are three enum values: SVG, Math, or None, which represents the
HTML namespace as well as all other possible namespaces.",Andrew Clark,2023-04-22T01:44:43Z
32dccd48d2c326a235e8af3cfbab949c1a13860c,[hir] Remove flag for inlineUseMemo,Joe Savona,2023-04-21T20:43:32Z
b40de8980509ed2d5ec87c40d487e168d8d7f279,Run snap in ci,Lauren Tan,2023-04-21T19:22:56Z
2b75c7915bed25e9114d76b3c0c019dfc7b61f1f,"Add @panicOnBailout support to snap 

Test plan: tests pass with snap",Lauren Tan,2023-04-21T19:22:56Z
b184d8567c9117beb8fca2b86e39a53aae3ec53a,[be] Add snap to yarn commands,Lauren Tan,2023-04-21T19:22:56Z
967d46c76cf9f7f35cf659a6a47c9ad456c685a8,"Add error boundary to Flight fixture (#26695)

Errors in form actions are now rethrown during render (#26689), so we
can handle them using an error boundary.",Andrew Clark,2023-04-21T18:23:50Z
5d7ebb4b784cb7e41e28653d89054cfe65637a93,"Allow Node.js 20 to build (#26693)

This is stable and appears to build w/o problem. I don't see why we
should disallow it.",Jan Kassens,2023-04-21T18:23:27Z
fd3fb8e3c5d1c977f4bfa73d715143804c69d4b0,"Rethrow errors from form actions (#26689)

This is the next step toward full support for async form actions.

Errors thrown inside form actions should cause the form to re-render and
throw the error so it can be captured by an error boundary. The behavior
is the same if the `<form />` had an internal useTransition hook, which
is pretty much exactly how we implement it, too.

The first time an action is called, the form's HostComponent is
""upgraded"" to become stateful, by lazily mounting a list of hooks. The
rest of the implementation for function components can be shared.

Because the error handling behavior added in this commit is just using
useTransition under-the-hood, it also handles pending states, too.
However, this pending state can't be observed until we add a new hook
for that purpose. I'll add this next.",Andrew Clark,2023-04-21T17:29:46Z
c57a0f68a49d0a7fbe45e7b28820478d0fa4e32f,"Remove react-is download hack (#26692)

This was added during an upgrade to Jest 24 in
https://github.com/facebook/react/pull/15778

By now we're at Jest 29. I think if CI passes we might not need this
hack anymore.",Jan Kassens,2023-04-21T17:11:09Z
aa3edc81304ba167e2cf9ac12e2cc3e3e12d0fab,"Cleanup unused wasm-based DOT diagram renderer 

I forgot to remove this when we removed the diagram output. This brings test 
time from 6s -> 5s on my machine, still much slower than the new test runner in 
#1486.",Joe Savona,2023-04-21T15:03:38Z
4a67d539dc723e3353d8aaca3ff065f83a448d8b,"Prune scopes wo own outputs 

#1507 Ensured that declarations of reactive scopes were propagated to parent 
reactive scopes as necessary to ensure that those declarations would be 
available at the appropriate block scope. This meant that some scopes that were 
previously pruned would no longer be pruned. Specifically, an outer scope wo any 
declarations, but which contained a nested scope _with_ a propagated 
declaration, would now end up with non-empty declarations and not be pruned. 

This PR changes to track the declaring scope of each declaration, so we still 
prune scopes that don't have any of their own declarations.",Joe Savona,2023-04-21T15:03:37Z
cb72726e384ad0ac5db22d51d8a76d5ee121917d,"Cleanup Stack impl 

Originally I defined `Stack` as an interface to ensure both Node and Empty 
variants would have an identical API. But exporting an interface allows a 
developer to define other implementations, when we really want to ensure that a 
Stack is precisely a Node or Empty instance. This PR changes to exporting a 
union of `Stack = Node | Empty`, and makes the interface private to the module.",Joe Savona,2023-04-21T15:03:37Z
f4896b45b2ff4c7f10bf710c9c9d2b87d6352e0d,"Fix temporaries accessed outside of their defining scope 

Fixed a bug identified in repro cases earlier in the stack. The case is where 
some later value is composed of several values, say A and B, where A is an 
identifier that is reassigned within B. Also, the mutable range of B surrounds 
the evaluation of A. In this case, the reference to A gets lowered to a 
temporary (say a t0 = LoadLocal A), and that temporary is created within the 
reactive scope for B. 

PropagateScopeDependencies bypasses LoadLocal indirections, and considers the 
reference to the temporary (t0) as if it was a reference to the identifier (A). 
That breaks the whole reason we lower Identifiers to temporaries - to preserve 
evaluation order. 

This PR fixes the bug by promoting temporaries to names values if they are 
referenced outside their defining scope. So, the reference to t0 stays a 
reference to t0, which correctly preserves the value of A at the right point in 
time. 

This is all much easier to see in the new test case.",Joe Savona,2023-04-21T01:52:39Z
c8369527efe0cdd1f95bb355c0616166a7816e1c,"update broken icon link (circleCi status) (#26688)

looks better now 🚀 ",Itai Mizlish,2023-04-21T01:28:45Z
e9abc41ea3f0170659292ce1151a015300105999,"Fix evaluation order for JSX element tags 

When lowering a JSX element we were correctly lowering to a temporary in all but 
one case: the common case of an identifier. That is fine in practice but breaks 
in the presence of the tag identifier being reassigned in the props/children. 
This PR fixes to always lower the tag to a temporary.",Joe Savona,2023-04-20T23:48:34Z
db378d39f3091e4b9302e74b1c6651112d45888b,"Constant propagation for globals 

This PR updates ConstantPropagation to support propagating global references: 

```javascript 

// Before 

const x = Math; 

foo(x); 

// After 

foo(Math); 

``` 

This is a generally useful optimization but also helps with a subset of cases 
around JSX element tags, which are frequently globals.",Joe Savona,2023-04-20T23:48:30Z
5c9614785c35a60d5f25ce8dcb514e91608ede8e,"[codegen] Create new temporary map when entering reactive scopes 

During codegen, when we now cache and restore the temporary values map as we 
enter and exit the scope. This ensures that any temporaries within the reactive 
scope are only visible within that scope, and not to subsequent code. In a 
subsequent PR this surfaces a bug with temporaries not correctly exported from a 
reactive scope.",Joe Savona,2023-04-20T23:48:26Z
c72452895a43d3317590b03092ebf7c2fc9e3d34,"[codegen] validate that temporary values are set 

In codegen when we lower an operand we check to see if we have an already 
lowered value for it (stored in `cx.temp`). Currently we silently handle missing 
values by emitting a raw identifier, but this is really an error. This PR adds 
validation, which uncovered a few places where we legitimately won't have a 
value - things like function parameters that got swapped for temporaries bc of 
destructuring. We populate those as `null` values now, and fail if a temporary 
had a truly missing value.",Joe Savona,2023-04-20T23:48:22Z
cc93a8533264618b7a8e3d6fb56df917214c19d7,"[Fiber] InvokeGuardedCallback without metaprogramming (#26569)

InvokeGuardedCallback is now implemented with the browser fork done at
error-time rather than module-load-time. Originally it also tried to
freeze the window/document references to avoid mismatches in prototype
chains when testing React in different documents however we have since
updated our tests to not do this and it was a test only feature so I
removed it.",Josh Story,2023-04-20T22:08:51Z
fdad813ac765e901e2957b8d36fba87e5504e5f4,"[Float][Fiber] Enable Float methods to be called outside of render (#26557)

Stacked on #26570 

Previously we restricted Float methods to only being callable while
rendering. This allowed us to make associations between calls and their
position in the DOM tree, for instance hoisting preinitialized styles
into a ShadowRoot or an iframe Document.

When considering how we are going to support Flight support in Float
however it became clear that this restriction would lead to compromises
on the implementation because the Flight client does not execute within
the context of a client render. We want to be able to disaptch Float
directives coming from Flight as soon as possible and this requires
being able to call them outside of render.

this patch modifies Float so that its methods are callable anywhere. The
main consequence of this change is Float will always use the Document
the renderer script is running within as the HoistableRoot. This means
if you preinit as style inside a component render targeting a ShadowRoot
the style will load in the ownerDocument not the ShadowRoot. Practially
speaking it means that preinit is not useful inside ShadowRoots and
iframes.

This tradeoff was deemed acceptable because these methods are
optimistic, not critical. Additionally, the other methods, preconntect,
prefetchDNS, and preload, are not impacted because they already operated
at the level of the ownerDocument and really only interface with the
Network cache layer.

I added a couple additional fixes that were necessary for getting tests
to pass that are worth considering separately.

The first commit improves the diff for `waitForThrow` so it compares
strings if possible.

The second commit makes invokeGuardedCallback not use metaprogramming
pattern and swallows any novel errors produced from trying to run the
guarded callback. Swallowing may not be the best we can do but it at
least protects React against rapid failure when something causes the
dispatchEvent to throw.",Josh Story,2023-04-20T21:40:25Z
e5708b3ea9190c1285c9081ff338e46be9ff39bc,"[Tests][Fizz] Better HTML parsing behavior for Fizz tests (#26570)

In anticipation of making Fiber use the document global for dispatching
Float methods that arrive from Flight I needed to update some tests that
commonly recreated the JSDOM instance after importing react.

This change updates a few tests to only create JSDOM once per test,
before importing react-dom/client.

Additionally the current act implementation for server streaming did not
adequately model streaming semantics so I rewrite the act implementation
in a way that better mirrors how a browser would parse incoming HTML.

The new act implementation does the following

1. the first time it processes meaningful streamed content it figures
out whether it is rendering into the existing document container or if
it needs to reset the document. this is based on whether the streamed
content contains tags `<html>` or `<body>` etc...
2. Once the streaming container is set it will typically continue to
stream into that container for future calls to act. The exception is if
the streaming container is the `<head>` in which case it will switch to
streaming into the body once it receives a `<body>` tag.

This means for tests that render something like a `<div>...</div>` it
will naturally stream into the default `<div id=""container"">...` and for
tests that render a full document the HTML will parse like a real
browser would (with some very minor edge case differences)

I also refactored the way we move nodes from buffered content into the
document and execute any scripts we find. Previously we were using
window.eval and I switched this to just setting the external script
content as script text. Additionally the nonce logic is reworked to be a
bit simpler.",Josh Story,2023-04-20T21:27:02Z
8bab0bca3c1668afadd7c7e7261f934ee0b7ee18,"[babel] Compile individual components 

Updates the Babel plugin so that we can individually compile components and skip 
over ones that have non-critical errors",Lauren Tan,2023-04-20T20:21:40Z
c228d63f0375b0051b4ce18d2e748886ae292ba8,"[babel] Add panicOnBailout option 

Adds an option to always throw errors regardless of severity (default, ie the 
status quo), or when the flag is disabled, only critical errors will be thrown. 
Any error that isn't considered a critical error (see 
`CompilerError.isCritical()`) since it might indicate that the compiler is 
buggy, while non-critical errors will result in that file being skipped for 
compilation, but otherwise continue compiling other files",Lauren Tan,2023-04-20T20:21:40Z
d73d7d59086218b0fa42d0a79c32a0365952650b,"Add `alwaysThrottleRetries` flag (#26685)

This puts the change introduced by #26611 behind a flag until Meta is
able to roll it out. Disabling the flag reverts back to the old
behavior, where retries are throttled if there's still data remaining in
the tree, but not if all the data has finished loading.

The new behavior is still enabled in the public builds.",Andrew Clark,2023-04-20T18:23:22Z
275c7557156778168c455d6086846cbde9cb7adf,"Repro for jsx lowering issues 

* JSX tag value temporaries getting promoted due to being sandwiched inside the 
mutation of some other item 

* Incorrect order-of-evaluation for jsx tag relative to props/children",Joe Savona,2023-04-20T16:29:37Z
7f8c501f682bd4abe24826a93538059d717ba39e,"React DevTools 4.27.5 -> 4.27.6 (#26684)

Full list of changes:
* Use .slice() for all substring-ing
([sophiebits](https://github.com/sophiebits) in
[#26677](https://github.com/facebook/react/pull/26677))
* cleanup[devtools]: remove named hooks & profiler changed hook indices
feature flags ([hoxyq](https://github.com/hoxyq) in
[#26635](https://github.com/facebook/react/pull/26635))
* chore[devtools/release-scripts]: update messages / fixed npm view com…
([hoxyq](https://github.com/hoxyq) in
[#26660](https://github.com/facebook/react/pull/26660))
* (patch)[DevTools] bug fix: backend injection logic not working for
undocked devtools window ([mondaychen](https://github.com/mondaychen) in
[#26665](https://github.com/facebook/react/pull/26665))
* use backend manager to support multiple backends in extension
([mondaychen](https://github.com/mondaychen) in
[#26615](https://github.com/facebook/react/pull/26615))",Ruslan Lesiutin,2023-04-20T12:34:25Z
22d5942675fcbd8b15b532284b49db4cb00d7144,"Add two event system cleanup TODOs (#26678)

There is so much old stuff in these files. I am weeping.",Sophie Alpert,2023-04-20T01:41:46Z
767f52237cf7892ad07726f21e3e8bacfc8af839,"Use .slice() for all substring-ing (#26677)

- substr is Annex B
- substring silently flips its arguments if they're in the ""wrong order"", which is confusing
- slice is better than sliced bread (no pun intended) and also it works the same way on Arrays so there's less to remember

---

> I'd be down to just lint and enforce a single form just for the potential compression savings by using a repeated string.

_Originally posted by @sebmarkbage in https://github.com/facebook/react/pull/26663#discussion_r1170455401_",Sophie Alpert,2023-04-19T21:26:01Z
3aa6196e306363ad962ac5a9014e366f99e7fa35,"Starting point for a new, parallel test runner to replace our hacked Jest 
snapshotting 

As demo'd on our sync. This is meant as a replacement for `yarn test` just for 
fixtures. On my machine, a test run from a steady state of Jest watch mode takes 
6 seconds. With this script, it takes ~800ms. 

Workflow: make edits in `packages/snap/`, then `yarn build` in that directory to 
build the test runner. 

To run tests, `node packages/snap/dist/runner.js` from the main forget/ 
directory to run tests. Pass `--watch` for watch mode, `--update` to update 
snapshots. Note that this _only_ updates .expect.md files, it does not update 
Jest's `__snapshots__` directory (this is intentional, our use of Jest snapshots 
is a hack that this script is meant to replace). 

When running in watch mode, ctrl-c or q will quit, 'u' will update snapshots, 
and any other key will re-run tests. Tests will re-run on changes to the source 
code (after an incremental TS rebuild) and on changes to the fixtures. 

Main things that are missing: 

* Don't run tests if TS compilation had errors (the errors should be logged to 
console already, but we need to wire that up so that we abort tests if there are 
errors) 

* Actually delete stale files in update mode (there is some commented-out code 
to double-check and then uncomment) 

* Improve diff view: just print the diffed segments, not the whole file diff. 
See the API at https://github.com/facebook/jest/tree/main/packages/jest-diff 
(right now we're using `diff()` but should probably use one of the lower-level 
functions) 

* Properly parse/validate args with `yargs`, add a help option, etc 

* In watch mode, when tests finish print a list of commands so users know what 
they can do (like Jest does) 

* Support skipping tests and selecting a single test to focus. Suggestions: 

* Name files with `skip.` to skip 

* Allow passing a test name to the script to run only tests matching that 
pattern, eg `node runner.js -p <pattern>` 

* In watch mode, support typing 'p' to prompt the user for a pattern. After 
that, support typing 'a' to clear the pattern and run all tests.",Joe Savona,2023-04-19T21:07:06Z
c826dc50de288758a0b783b2fd37b40a3b512fc4,"Add (Client) Functions as Form Actions (#26674)

This lets you pass a function to `<form action={...}>` or `<button
formAction={...}>` or `<input type=""submit formAction={...}>`. This will
behave basically like a `javascript:` URL except not quite implemented
that way. This is a convenience for the `onSubmit={e => {
e.preventDefault(); const fromData = new FormData(e.target); ... }`
pattern.

You can still implement a custom `onSubmit` handler and if it calls
`preventDefault`, it won't invoke the action, just like it would if you
used a full page form navigation or javascript urls. It behaves just
like a navigation and we might implement it with the Navigation API in
the future.

Currently this is just a synchronous function but in a follow up this
will accept async functions, handle pending states and handle errors.

This is implemented by setting `javascript:` URLs, but these only exist
to trigger an error message if something goes wrong instead of
navigating away. Like if you called `stopPropagation` to prevent React
from handling it or if you called `form.submit()` instead of
`form.requestSubmit()` which by-passes the `submit` event. If CSP is
used to ban `javascript:` urls, those will trigger errors when these
URLs are invoked which would be a different error message but it's still
there to notify the user that something went wrong in the plumbing.

Next up is improving the SSR state with action replaying and progressive
enhancement.",Sebastian Markbåge,2023-04-19T20:31:08Z
cd2b79dedd6d81abb0b01d38396afa083feaf9e9,"Initial (client-only) async actions support (#26621)

Implements initial (client-only) support for async actions behind a
flag. This is an experimental feature and the design isn't completely
finalized but we're getting closer. It will be layered alongside other
features we're working on, so it may not feel complete when considered
in isolation.

The basic description is you can pass an async function to
`startTransition` and all the transition updates that are scheduled
inside that async function will be grouped together. The `isPending`
flag will be set to true immediately, and only set back to false once
the async action has completed (as well as all the updates that it
triggers).

The ideal behavior would be that all updates spawned by the async action
are automatically inferred and grouped together; however, doing this
properly requires the upcoming (stage 2) Async Context API, which is not
yet implemented by browsers. In the meantime, we will fake this by
grouping together all transition updates that occur until the async
function has terminated. This can lead to overgrouping between unrelated
actions, which is not wrong per se, just not ideal.

If the `useTransition` hook is removed from the UI before an async
action has completed — for example, if the user navigates to a new page
— subsequent transitions will no longer be grouped with together with
that action.

Another consequence of the lack of Async Context is that if you call
`setState` inside an action but after an `await`, it must be wrapped in
`startTransition` in order to be grouped properly. If we didn't require
this, then there would be no way to distinguish action updates from
urgent updates caused by user input, too. This is an unfortunate footgun
but we can likely detect the most common mistakes using a lint rule.

Once Async Context lands in browsers, we can start warning in dev if we
detect an update that hasn't been wrapped in `startTransition`. Then,
longer term, once the feature is ubiquitous, we can rely on it for real
and allow you to call `setState` without the additional wrapper.

Things that are _not_ yet implemented in this PR, but will be added as
follow ups:

- Support for non-hook form of `startTransition`
- Canceling the async action scope if the `useTransition` hook is
deleted from the UI
- Anything related to server actions",Andrew Clark,2023-04-19T17:33:11Z
6d394e3d26a1e785d0510d732eedcdd2be3e92b5,"[actions] commit from special branches iff they exist (#26673)

This creates 2 special branches. If these special branches exist, we'll
commit build artifacts from these branches, main otherwise.",Jan Kassens,2023-04-19T16:11:40Z
1f248bdd7199979b050e4040ceecfe72dd977fd1,"Switching checked to null should leave the current value (#26667)

I accidentally made a behavior change in the refactor. It turns out that
when switching off `checked` to an uncontrolled component, we used to
revert to the concept of ""initialChecked"" which used to be stored on
state.

When there's a diff to this computed prop and the value of props.checked
is null, then we end up in a case where it sets `checked` to
`initialChecked`:


https://github.com/facebook/react/blob/5cbe6258bc436b1683080a6d978c27849f1d9a22/packages/react-dom-bindings/src/client/ReactDOMInput.js#L69

Since we never changed `initialChecked` and it's not relevant if
non-null `checked` changes value, the only way this ""change"" could
trigger was if we move from having `checked` to having null.

This wasn't really consistent with how `value` works, where we instead
leave the current value in place regardless. So this is a ""bug fix"" that
changes `checked` to be consistent with `value` and just leave the
current value in place. This case should already have a warning in it
regardless since it's going from controlled to uncontrolled.

Related to that, there was also another issue observed in
https://github.com/facebook/react/pull/26596#discussion_r1162295872 and
https://github.com/facebook/react/pull/26588

We need to atomically apply mutations on radio buttons. I fixed this by
setting the name to empty before doing mutations to value/checked/type
in updateInput, and then set the name to whatever it should be. Setting
the name is what ends up atomically applying the changes.

---------

Co-authored-by: Sophie Alpert <git@sophiebits.com>",Sebastian Markbåge,2023-04-19T15:46:29Z
b90e8ebaa5b692bcee4198eacb56f9123b62dd10,"cleanup[devtools]: remove named hooks & profiler changed hook indices feature flags (#26635)

## Summary

Removing `enableNamedHooksFeature`, `enableProfilerChangedHookIndices`,
`enableProfilerComponentTree` feature flags, they are the same for all
configurations.",Ruslan Lesiutin,2023-04-19T09:05:31Z
a227bcd4f4754b0a3f44f84e1e63a79d0ae130d3,"chore[devtools/release-scripts]: update messages / fixed npm view com… (#26660)

Some minor changes, observed while working on 24.7.5 release:
- Updated numeration of text instructions
- `reactjs.org` -> `react.dev`
- Fixed using `npm view` command for node 16+, `publish-release` script
currently fails if used with node 16+",Ruslan Lesiutin,2023-04-19T09:05:16Z
a0777212df7009cc26e47ffd46444276d0be923d,"Propagate scope declarations to parent scopes 

Fix for bug demonstrated in #1506. When we add variables as output of their 
defining scope, we need to propagate this information upwards to all parent 
scopes which are not current active.",Joe Savona,2023-04-19T04:27:11Z
c6db19f9cdec34bca3625a483a2f85181193b885,"[Flight] Serialize Date (#26622)

This is kind of annoying because Date implements toJSON so
JSON.stringify turns it into a string before calling our replacer
function.",Sophie Alpert,2023-04-19T03:52:03Z
96fd2fb726130d2980e6d450f5d9e468f922b8b9,"(patch)[DevTools] bug fix: backend injection logic not working for undocked devtools window (#26665)

bugfix for #26492

This bug would cause users unable to use the devtools (component tree
empty).

The else-if logic is broken when user switch to undocked devtools mode
(separate window) because `sender.tab` would exist in that case.
<img width=""314"" alt=""image""
src=""https://user-images.githubusercontent.com/1001890/232930094-05a74445-9189-4d50-baf1-a0360b29ef7e.png"">

Tested on Chrome with a local build",Mengdi Chen,2023-04-19T00:39:22Z
fdbfac8f8216839520d093513908918de591468f,"Repro for bug with memo vars at wrong block scope 

Minimal(ish) repro of a bug we saw internally, where an output of a nested 
reactive scope is defined at the wrong block scope, and so later references to 
that value are invalid. 

The simplified structure is: 

``` 

scope0 inputs=[] outputs=[] { 

scope1 inputs=[] outputs=[t0] { 

t0 = ... 

} 

} 

t0 

``` 

Note that `t0` correctly appears as an output of the inner scope1, but not as an 
output of the outer scope0. We need to propagate outputs upward as necessary to 
ensure they are available at the right block scope: in this case, that would add 
`t0` as an output of scope0. 

An earlier version of PropagateScopeDependencies did this but it looks like it 
got lost along the way (not a big deal)",Joe Savona,2023-04-18T23:10:00Z
746c1dbed581ad128f0ea22b8fe20267391e1c2f,"Add common (Relay) hooks to playground environment 

This aligns the playground configuration with our internal compiler 
configuration to make it easier to repro compilation issues on playground. There 
is a bug that doesn't repro right now and i suspect it's because of different 
hooks being configured. 

Test plan: 

Before: playground output has no obvious bugs, but is different than internal 
compilation output where the bug occurs 

After: playground output matches internal compilation output w the bug",Joe Savona,2023-04-18T22:29:17Z
d8089f2cf27a17872a13805fce415b74fd3b107e,"[Flight Reply] Encode FormData (#26663)

Builds on top of https://github.com/facebook/react/pull/26661

This lets you pass FormData objects through the Flight Reply
serialization. It does that by prefixing each entry with the ID of the
reference and then the decoding side creates a new FormData object
containing only those fields (without the prefix).

Ideally this should be more generic. E.g. you should be able to pass
Blobs, Streams and Typed Arrays by reference inside plain objects too.
You should also be able to send Blobs and FormData in the regular Flight
serialization too so that they can go both directions. They should be
symmetrical. We'll get around to adding more of those features in the
Flight protocol as we go.

---------

Co-authored-by: Sophie Alpert <git@sophiebits.com>",Sebastian Markbåge,2023-04-18T18:57:33Z
de89ed32a2b649ad542a4f3387312aa3c171d3a7,"Use implicit return (undefined) 

Making ReturnTerminal.value non-nullable broke our optimization to elide final 
value-less return statements. We now check if a return value is explicitly 
`undefined` and elide the value in this case, which then also propagates to 
allow removing the final `return` statement of a function if the value is 
missing.",Joe Savona,2023-04-18T18:12:27Z
b10f60f2b93466f289d38f8723d40452e8c3ef67,"Cleanup from non-nullable return value 

Now that ReturnTerminal.value is non-nullable we can make 
ReactiveReturnTerminal.value also non-nullable, and remove a bunch of null 
checks.",Joe Savona,2023-04-18T18:12:23Z
1b4a0daba8aba71f6fbf0c3b88633c51207a6ec7,"Add assertions about <input> value dirty state (#26626)

Since this is an observable behavior and is hard to think about, seems
good to have tests for this.

The expected value included in each test is the behavior that existed
prior to #26546.",Sophie Alpert,2023-04-18T18:03:36Z
b433c379d55d9684945217c7d375de1082a1abb8,"Fix input tracking bug (#26627)

In
https://github.com/facebook/react/pull/26573/commits/2019ddc75f448292ffa6429d7625514af192631b,
we changed to set .defaultValue before .value on updates. In some cases,
setting .defaultValue causes .value to change, and since we only set
.value if it has the wrong value, this resulted in us not assigning to
.value, which resulted in inputValueTracking not knowing the right
value. See new test added.

My fix here is to (a) move the value setting back up first and (b)
narrowing the fix in the aforementioned PR to newly remove the value
attribute only if it defaultValue was previously present in props.

The second half is necessary because for types where the value property
and attribute are indelibly linked (hidden checkbox radio submit image
reset button, i.e. spec modes default or default/on from
https://html.spec.whatwg.org/multipage/input.html#dom-input-value-default),
we can't remove the value attribute after setting .value, because that
will undo the assignment we just did! That is, not having (b) makes all
of those types fail to handle updating props.value.

This code is incredibly hard to think about but I think this is right
(or at least, as right as the old code was) because we set .value here
only if the nextProps.value != null, and we now remove defaultValue only
if lastProps.defaultValue != null. These can't happen at the same time
because we have long warned if value and defaultValue are simultaneously
specified, and also if a component switches between controlled and
uncontrolled.

Also, it fixes the test in https://github.com/facebook/react/pull/26626.",Sophie Alpert,2023-04-18T17:49:32Z
d962f35cac4e1b9e4c6d9320e60ca51037680296,"[DevTools] use backend manager to support multiple backends in extension (#26615)

In the extension, currently we do the following:
1. check whether there's at least one React renderer on the page
2. if yes, load the backend to the page
3. initialize the backend 

To support multiple versions of backends, we are changing it to:
1. check the versions of React renders on the page
2. load corresponding React DevTools backends that are shipped with the
extension; if they are not contained (usually prod builds of
prereleases), show a UI to allow users to load them from UI
3. initialize each of the backends

To enable this workflow, a backend will ignore React renderers that does
not match its version

This PR adds a new file ""backendManager"" in the extension for this
purpose.


------
I've tested it on Chrome, Edge and Firefox extensions",Mengdi Chen,2023-04-18T16:02:42Z
0ddcaafd7c3c32ce92a14fe827781039cfbfd4fb,"[babel] Inject React import if Forget compiled the function 

Updates our Babel plugin to add an import to React if we succesfully compiled a 
function and cached one or more values. For now this logic is entirely in the 
Babel plugin itself, but long term we should move this into codegen and teach 
Forget to start the pipeline by lowering the whole Program node to an HIR (which 
would also allow us to understand imports and other module scope values being 
used). Right now it's not possible to add in codegen (without some ugly code) as 
a file containing multiple components would result in duplicate imports being 
generated",Lauren Tan,2023-04-17T21:49:17Z
7c5e5eb30c996a72d3fa45b4d2b8cd2c321c5e63,[hir] Make return.value non nullable,Sathya Gunasekaran,2023-04-17T20:11:44Z
42459f579f37c6adcdd84ab6277722856817b4b8,"[hir] Return undefined explicitly if there's no return value 

Future passes like inlineUseMemo assume there's a return value so let's create 
one instead of implicitly returning undefined.",Sathya Gunasekaran,2023-04-17T20:11:43Z
0e34c39c58882adf2edfe9c8a78b19b09c45bbab,[test] Add failing test for empty return in useMemo callback,Sathya Gunasekaran,2023-04-17T20:11:42Z
00d4a69459ce57afe10b24331d10e8594e09378d,"[hir] Refactor useMemo inlining 

Previously useMemo inlining created a new StoreLocal assignment (not 
reassignment!) instruction for every return value. This breaks when the return 
is inside a block (like an if-block) as the  scope is tied to the block. 

For example: ``` let x = useMemo(() => {   if (...) {     return { ... };   } }) 
``` would become: ``` if (...) {   const temp = { ... }; } const x = temp; ``` 

This PR instead changes the inlining to declare a temporary in the function 
prologue and then reassign values to it when replacing return statements. 

``` let x = useMemo(() => {   if (...) {     return { ... };   } }) ``` 

becomes 

``` let temp; if (...) {   temp = { ... }; } const x = temp; ```",Sathya Gunasekaran,2023-04-17T19:59:35Z
31f6dd8070aa2f2983bf659e1caf0ce772884d87,[test] Add failing test showing useMemo bug,Sathya Gunasekaran,2023-04-17T19:59:35Z
77d3b02e5c8bd92190d20c692fdbf2db01e3657b,"React DevTools 4.27.4 -> 4.27.5 (#26637)

Full list of changes (not everything included in changelog):
* refactor[devtools]: copy to clipboard only on frontend side
([hoxyq](https://github.com/hoxyq) in
[#26604](https://github.com/facebook/react/pull/26604))
* Provide icon to edge devtools.
([harrygz889](https://github.com/harrygz889) in
[#26543](https://github.com/facebook/react/pull/26543))
* [BE] move shared types & constants to consolidated locations
([mondaychen](https://github.com/mondaychen) in
[#26572](https://github.com/facebook/react/pull/26572))
* remove backend dependency from the global hook
([mondaychen](https://github.com/mondaychen) in
[#26563](https://github.com/facebook/react/pull/26563))
* Replace deprecated `new-window` with
`webContents.setWindowOpenHandler()`
([Willie-Boy](https://github.com/Willie-Boy) in
[#26559](https://github.com/facebook/react/pull/26559))
* DevTools: Inline references to fiber flags
([acdlite](https://github.com/acdlite) in
[#26542](https://github.com/facebook/react/pull/26542))
* refactor[devtools]: forbid editing class instances in props
([hoxyq](https://github.com/hoxyq) in
[#26522](https://github.com/facebook/react/pull/26522))
* Move update scheduling to microtask
([acdlite](https://github.com/acdlite) in
[#26512](https://github.com/facebook/react/pull/26512))
* Remove unnecessary CIRCLE_CI_API_TOKEN checks
([mondaychen](https://github.com/mondaychen) in
[#26499](https://github.com/facebook/react/pull/26499))
* browser extension: improve script injection logic
([mondaychen](https://github.com/mondaychen) in
[#26492](https://github.com/facebook/react/pull/26492))
* [flow] make Flow suppressions explicit on the error
([kassens](https://github.com/kassens) in
[#26487](https://github.com/facebook/react/pull/26487))",Ruslan Lesiutin,2023-04-17T16:42:02Z
b6006201b5fdfcc5720160f169b80ddb7b8d7467,"Add a way to create Server Reference Proxies on the client (#26632)

This lets the client bundle encode Server References without them first
being passed from an RSC payload. Like if you just import `""use server""`
from the client. A bundler could already emit these proxies to be called
on the client but the subtle difference is that those proxies couldn't
be passed back into the server by reference. They have to be registered
with React.

We don't currently implement importing `""use server""` from client
components in the reference implementation. It'd need to expand the
Webpack plugin with a loader that rewrites files with the `""use server""`
in the client bundle.

```
""use server"";

export async function action() {
   ...
}
```
->
```
import {createServerReference} from ""react-server-dom-webpack/client"";
import {callServer} from ""some-router/call-server"";

export const action = createServerReference('1234#action', callServer);
```

The technique I use here is that the compiled output has to call
`createServerReference(id, callServer)` with the `$$id` and proxy
implementation. We then return a proxy function that is registered with
a WeakMap to the particular instance of the Flight Client.

This might be hard to implement because it requires emitting module
imports to a specific stateful runtime module in the compiler. A benefit
is that this ensures that this particular reference is locked to a
specific client if there are multiple - e.g. talking to different
servers.

It's fairly arbitrary whether we use a WeakMap technique (like we do on
the client) vs an `$$id` (like we do on the server). Not sure what's
best overall. The WeakMap is nice because it doesn't leak implementation
details that might be abused to consumers. We should probably pick one
and unify.",Sebastian Markbåge,2023-04-15T03:20:35Z
da6c23a45c62ac3edabae9b7145b14e35a470480,"[Flight] Fallback to importing the whole module instead of encoding every name (#26624)

We currently don't just ""require"" a module by its module id/path. We
encode the pair of module id/path AND its export name. That's because
with module splitting, a single original module can end up in two or
more separate modules by name. Therefore the manifest files need to
encode how to require the whole module as well as how to require each
export name.

In practice, we don't currently use this because we end up forcing
Webpack to deopt and keep it together as a single module, and we don't
even have the code in the Webpack plugin to write separate values for
each export name.

The problem is with CJS we don't statically know what all the export
names will be. Since these cases will never be module split, we don't
really need to know.

This changes the Flight requires to first look for the specific name
we're loading and then if that name doesn't exist in the manifest we
fallback to looking for the `""*""` name containing the entire module and
look for the name in there at runtime.

We could probably optimize this a bit if we assume that CJS modules on
the server never get built with a name. That way we don't have to do the
failed lookup.

Additionally, since we've recently merged filepath + name into a single
string instead of two values, we now have to split those back out by
parsing the string. This is especially unfortunate for server references
since those should really not reveal what they are but be a hash or
something. The solution might just be to split them back out into two
separate fields again.

cc @shuding",Sebastian Markbåge,2023-04-15T01:09:09Z
2bfe4b246f58d1f8d357f984fba9a8aa1fa79c73,"[Flight] Fix style nit from #26623 (#26629)

Maybe this is faster.
https://github.com/facebook/react/pull/26623#discussion_r1167053174",Sophie Alpert,2023-04-14T16:49:41Z
ab2385fa388f3d4ebc0b1a9f5a747c82e4aa82ed,[Flight] Serialize weird numbers (#26623),Sophie Alpert,2023-04-14T16:28:48Z
39a3b72c6db97c58c45b0dd9b685b316cd2302c3,"Post-process build files for React Native to add generated signature and @nolint (#26616)

## Summary

We're enabling a new mechanism to synchronize build files from `react`
to `react-native`. That new mechanism doesn't post-process files, so we
need to add that post-processing somewhere. This PR does that when
generating the files in the first place, so the generated files in the
`build` directory are ready to be committed in the `react-native`
repository directly.

This makes use of `signedsource` to avoid direct modifications of these
files in the `react-native` repository, as well as `@noformat` and
`@nolint` to prevent unactionable CI failures in that repository.

## How did you test this change?

Generated build files for `react-native` before and after this change:
```
node ./scripts/rollup/build-all-release-channels.js react-native
```

Checked new contents. Relevant changes:

```diff
diff --color -r build-before/react-native/implementations/ReactFabric-dev.fb.js build-after/react-native/implementations/ReactFabric-dev.fb.js
10c10
<  * @generated
---
>  * @generated SignedSource<<03cef14e77b8250b567dfdf3b066085e>>
diff --color -r build-before/react-native/implementations/ReactFabric-dev.js build-after/react-native/implementations/ReactFabric-dev.js
11c11
<  * @generated
---
>  * @generated SignedSource<<e39eed38a363846ca9ee9b59a225683c>>
diff --color -r build-before/react-native/implementations/ReactFabric-prod.fb.js build-after/react-native/implementations/ReactFabric-prod.fb.js
10c10
<  * @generated
---
>  * @generated SignedSource<<f65efcd6a469d5f6fef1ce647e5ec09a>>
diff --color -r build-before/react-native/implementations/ReactFabric-prod.js build-after/react-native/implementations/ReactFabric-prod.js
11c11
<  * @generated
---
>  * @generated SignedSource<<cdd582aa889b1054b2c5faf412622b18>>
diff --color -r build-before/react-native/implementations/ReactFabric-profiling.fb.js build-after/react-native/implementations/ReactFabric-profiling.fb.js
10c10
<  * @generated
---
>  * @generated SignedSource<<81e74849b24f104882bd298f062be0fa>>
diff --color -r build-before/react-native/implementations/ReactFabric-profiling.js build-after/react-native/implementations/ReactFabric-profiling.js
11c11
<  * @generated
---
>  * @generated SignedSource<<c050b7fa1453dc21ac1c5b98146210a8>>
diff --color -r build-before/react-native/implementations/ReactNativeRenderer-dev.fb.js build-after/react-native/implementations/ReactNativeRenderer-dev.fb.js
10c10
<  * @generated
---
>  * @generated SignedSource<<9c03464b489b41c06a065aeba8619263>>
diff --color -r build-before/react-native/implementations/ReactNativeRenderer-dev.js build-after/react-native/implementations/ReactNativeRenderer-dev.js
11c11
<  * @generated
---
>  * @generated SignedSource<<18b34c037544949dcf9b28f945921ba8>>
diff --color -r build-before/react-native/implementations/ReactNativeRenderer-prod.fb.js build-after/react-native/implementations/ReactNativeRenderer-prod.fb.js
10c10
<  * @generated
---
>  * @generated SignedSource<<592e9654c584d1da523378b119bd8bd7>>
diff --color -r build-before/react-native/implementations/ReactNativeRenderer-prod.js build-after/react-native/implementations/ReactNativeRenderer-prod.js
11c11
<  * @generated
---
>  * @generated SignedSource<<91c894db99e2d76f8a32708ad6ad1bde>>
diff --color -r build-before/react-native/implementations/ReactNativeRenderer-profiling.fb.js build-after/react-native/implementations/ReactNativeRenderer-profiling.fb.js
10c10
<  * @generated
---
>  * @generated SignedSource<<5ce378a9216ea747d91b208b9fd1ebd5>>
diff --color -r build-before/react-native/implementations/ReactNativeRenderer-profiling.js build-after/react-native/implementations/ReactNativeRenderer-profiling.js
11c11
<  * @generated
---
>  * @generated SignedSource<<1c7564f446ee83142976035b2884dcfd>>
diff --color -r build-before/react-native/shims/ReactFabric.js build-after/react-native/shims/ReactFabric.js
7c7
<  * @format
---
>  * @noformat
8a9,10
>  * @nolint
>  * @generated SignedSource<<cece19ddbec9f287c995721f49c68977>>
diff --color -r build-before/react-native/shims/ReactFeatureFlags.js build-after/react-native/shims/ReactFeatureFlags.js
7c7
<  * @format
---
>  * @noformat
8a9,10
>  * @nolint
>  * @generated SignedSource<<2881c8e89ef0f73f4cf6612cb518b197>>
diff --color -r build-before/react-native/shims/ReactNative.js build-after/react-native/shims/ReactNative.js
7c7
<  * @format
---
>  * @noformat
8a9,10
>  * @nolint
>  * @generated SignedSource<<0debd6e5a17dc037cb4661315a886de6>>
diff --color -r build-before/react-native/shims/ReactNativeTypes.js build-after/react-native/shims/ReactNativeTypes.js
7c7
<  * @format
---
>  * @noformat
8a9,10
>  * @nolint
>  * @generated SignedSource<<652b117c94307244bcf5e4af18928903>>
diff --color -r build-before/react-native/shims/ReactNativeViewConfigRegistry.js build-after/react-native/shims/ReactNativeViewConfigRegistry.js
7c7
<  * @format
---
>  * @noformat
8a9,10
>  * @nolint
>  * @generated SignedSource<<ce82e8957367bee7d11379ab88e3f7c5>>
diff --color -r build-before/react-native/shims/createReactNativeComponentClass.js build-after/react-native/shims/createReactNativeComponentClass.js
7c7
<  * @format
---
>  * @noformat
8a9,10
>  * @nolint
>  * @generated SignedSource<<ede54ac2fa1b9a09e234cdf098048989>>
```",Rubén Norte,2023-04-14T09:42:48Z
d121c67004a2e6b0bb5d341843663ef213f64863,"Synchronously flush the transition lane scheduled in a popstate event (#26025)

<!--
  Thanks for submitting a pull request!
We appreciate you spending the time to work on these changes. Please
provide enough information so that others can review your pull request.
The three fields below are mandatory.

Before submitting a pull request, please make sure the following is
done:

1. Fork [the repository](https://github.com/facebook/react) and create
your branch from `main`.
  2. Run `yarn` in the repository root.
3. If you've fixed a bug or added code that should be tested, add tests!
4. Ensure the test suite passes (`yarn test`). Tip: `yarn test --watch
TestName` is helpful in development.
5. Run `yarn test --prod` to test in the production environment. It
supports the same options as `yarn test`.
6. If you need a debugger, run `yarn debug-test --watch TestName`, open
`chrome://inspect`, and press ""Inspect"".
7. Format your code with
[prettier](https://github.com/prettier/prettier) (`yarn prettier`).
8. Make sure your code lints (`yarn lint`). Tip: `yarn linc` to only
check changed files.
  9. Run the [Flow](https://flowtype.org/) type checks (`yarn flow`).
  10. If you haven't already, complete the CLA.

Learn more about contributing:
https://reactjs.org/docs/how-to-contribute.html
-->

## Summary

Browsers restore state like forms and scroll position right after the
popstate event. To make sure the page work as expected on back or
forward button, we need to flush transitions scheduled in a popstate
synchronously, and only yields if it suspends.
This PR adds a new HostConfig method to check if `window.event ===
'popstate'`, and `scheduleMicrotask` if a transition is scheduled in a
`PopStateEvent`.

## How did you test this change?

yarn test",Tianyu Yao,2023-04-13T19:21:19Z
7b0642bb989ec659c6c9891ea16daa0420caab4d,"Remove revertRemovalOfSiblingPrerendering killswitch (#26549)

removal of sibling prerendering has been rolled out at Meta. We can
delete the flag now.",Samuel Susla,2023-04-13T01:05:17Z
8256781fdf3ae1947a7f27ddc78ae11b9989c2cd,"Throttle retries even if everything has loaded  (#26611)

If a Suspense fallback is shown, and the data finishes loading really
quickly after that, we throttle the content from appearing for 500ms to
reduce thrash.

This already works for successive fallback states (like if one fallback
is nested inside another) but it wasn't being applied to the final step
in the sequence: if there were no more unresolved Suspense boundaries in
the tree, the content would appear immediately.

This fixes the throttling behavior so that it applies to all renders
that are the result of suspended data being loaded. (Our internal jargon
term for this is a ""retry"".)",Andrew Clark,2023-04-13T00:25:32Z
72c890e3123d3ea48b5d7f51bca301d7da16a8b1,"Convert more Suspense tests to use act (2/n) (#26610)

Many of our Suspense-related tests were written before the `act` API was
introduced, and use the lower level `waitFor` helpers instead. So they
are less resilient to changes in implementation details than they could
be.

This converts some of our test suite to use `act` in more places. I
found these while working on a PR to expand our fallback throttling
mechanism to include all renders that result from a promise resolving,
even if there are no more fallbacks in the tree.

I think this covers all the remaining tests that are affected.",Andrew Clark,2023-04-12T17:36:13Z
21021fb0f06f5b8ccdad0774d53ff5f865faeb6d,"refactor[devtools]: copy to clipboard only on frontend side (#26604)

Fixes https://github.com/facebook/react/issues/26500

## Summary
- No more using `clipboard-js` from the backend side, now emitting
custom `saveToClipboard` event, also adding corresponding listener in
`store.js`
- Not migrating to `navigator.clipboard` api yet, there were some issues
with using it on Chrome, will add more details to
https://github.com/facebook/react/pull/26539

## How did you test this change?
- Tested on Chrome, Firefox, Edge
- Tested on standalone electron app: seems like context menu is not
expected to work there (cannot right-click on value, the menu is not
appearing), other logic (pressing on copy icon) was not changed",Ruslan Lesiutin,2023-04-12T15:12:03Z
5426af3d50ff706f3ebeb4764f838e0a3812bf9a,"Provide icon to edge devtools. (#26543)

<!--
  Thanks for submitting a pull request!
We appreciate you spending the time to work on these changes. Please
provide enough information so that others can review your pull request.
The three fields below are mandatory.

Before submitting a pull request, please make sure the following is
done:

1. Fork [the repository](https://github.com/facebook/react) and create
your branch from `main`.
  2. Run `yarn` in the repository root.
3. If you've fixed a bug or added code that should be tested, add tests!
4. Ensure the test suite passes (`yarn test`). Tip: `yarn test --watch
TestName` is helpful in development.
5. Run `yarn test --prod` to test in the production environment. It
supports the same options as `yarn test`.
6. If you need a debugger, run `yarn test --debug --watch TestName`,
open `chrome://inspect`, and press ""Inspect"".
7. Format your code with
[prettier](https://github.com/prettier/prettier) (`yarn prettier`).
8. Make sure your code lints (`yarn lint`). Tip: `yarn linc` to only
check changed files.
  9. Run the [Flow](https://flowtype.org/) type checks (`yarn flow`).
  10. If you haven't already, complete the CLA.

Learn more about contributing:
https://reactjs.org/docs/how-to-contribute.html
-->

## Summary
Addresses #26352.

This PR explicitly passes an icon to `chrome.devtools.panels.create()`,
so that edge devtools will display the icon when in [Focus
Mode](https://learn.microsoft.com/en-us/microsoft-edge/devtools-guide-chromium/experimental-features/focus-mode).

<!--
Explain the **motivation** for making this change. What existing problem
does the pull request solve?
-->

## How did you test this change?
Passing test suite (`yarn test` & `yarn test --prod`) ✅ 
Passing lint (`yarn linc`) ✅ 
Passing type checks (`yarn flow`) ✅ 

**Visual Testing**

Before Changes             | After Changes
:-------------------------:|:-------------------------:

![](https://user-images.githubusercontent.com/15645169/229591145-fe99df06-e2e3-4f21-ae31-f770d584ca6c.png)
|
![](https://user-images.githubusercontent.com/15645169/229591594-26c6cbaf-f345-4367-b234-8f3c8ab3ccb1.png)
<!--
Demonstrate the code is solid. Example: The exact commands you ran and
their output, screenshots / videos if the pull request changes the user
interface.
How exactly did you verify that your PR solves the issue you wanted to
solve?
  If you leave this empty, your PR will very likely be closed.
-->",Harry Zumwalt,2023-04-11T18:42:13Z
f9de24a26af23ce63b6f0474670870c86e1a631c,"Convert more Suspense tests to use `act` (#26602)

Many of our Suspense-related tests were written before the `act` API was
introduced, and use the lower level `waitFor` helpers instead. So they
are less resilient to changes in implementation details than they could
be.

This converts some of our test suite to use `act` in more places. I
found these while working on a PR to expand our fallback throttling
mechanism to include all renders that result from a promise resolving,
even if there are no more fallbacks in the tree. This isn't all the
affected tests, just some of them — I'll be sharding the changes across
multiple PRs.",Andrew Clark,2023-04-11T17:47:29Z
6b90976bc10f325146b193286435a4b5015ef605,"Use already extracted values instead of reading off props for controlled components (#26596)

Since `props.x` is a possibly megamorphic access, it can be slow to
access and trigger recompilation.

When we are looping over the props and pattern matching every key,
anyway, we've already done this work. We can just reuse the same value
by stashing it outside the loop in the stack.

This only makes sense for updates in diffInCommitPhase since otherwise
we don't have the full set of props in that loop.

We also have to be careful not to skip over equal values since we need
to extract them anyway.",Sebastian Markbåge,2023-04-11T17:32:47Z
343a45ffa48065e60699bbe68f82d7b62fa02840,"Remove initOption special case (#26595)

This traces back to https://github.com/facebook/react/pull/6449 and then
another before that.

I think that back then we favored the property over the attribute, and
setting the property wouldn't be enough. However, the default path for
these are now using attributes if we don't special case it. So we don't
need it.

The only difference is that we currently have a divergence for
symbol/function behavior between controlled values that use the
getToStringValue helpers which treat them as empty string, where as
everywhere else they're treated as null/missing.

Since this comes with a warning and is a weird error case, it's probably
fine to change.",Sebastian Markbåge,2023-04-11T16:39:00Z
34bca247d69c60d9318892e335959a3001839a9e,"[hir] Terminate function within BuildHIR 

All the block building logic is encapsulated in BuildHIR.",Sathya Gunasekaran,2023-04-11T14:40:08Z
c42cd3f558651426ce4d7986d1b860b1087b8f7f,"[hir] Refactor HIRBuilder.build to use HIRBuilder.terminate 

It's a bit weird  that HIRBuilder is generating terminals, a follow up PR will 
remove this entirely from HIRBuilder. This is a first step towards that.",Sathya Gunasekaran,2023-04-11T14:37:20Z
7678a52c9cc74d896c867919ec705daf26fcd7d8,[hir] Add invariant to check if useMemo callback is async or a generator,Sathya Gunasekaran,2023-04-11T14:06:53Z
fd252e42ab5bf8ebd23baca5e08a1b8399b3f740,[hir] Add invariant to check if useMemo callback accepts args,Sathya Gunasekaran,2023-04-11T14:00:30Z
74f5e26e00e0104cd8ddf08896508d497868b08b,[be][test] Remove hir-test,Sathya Gunasekaran,2023-04-11T12:41:33Z
2d8b36467c768af5cc63845f73f2beaeddfeb59c,"[hir] Put useMemo inlining behind a flag 

It's still a WIP so disable behind a flag for now.",Sathya Gunasekaran,2023-04-11T12:41:33Z
58742c21b8c3237e8b66c7df4e200504846a01ae,Delete unused `eventTimes` Fiber field (#26599),Andrew Clark,2023-04-11T12:23:04Z
0b931f90e8964183f08ac328e7350d847abb08f9,"Remove JND delay for non-transition updates (#26597)

Updates that are marked as part of a transition are allowed to block a
render from committing. Generally, other updates cannot — however,
there's one exception that's leftover from a previous iteration of our
Suspense architecture. If an update is not the result of a known urgent
event type — known as ""Default"" updates — then we allow it to suspend
briefly, as long as the delay is short enough that the user won't
notice. We refer to this delay as a ""Just Noticable Difference"" (JND)
delay. To illustrate, if the user has already waited 400ms for an update
to be reflected on the screen, the theory is that they won't notice if
you wait an additional 100ms. So React can suspend for a bit longer in
case more data comes in. The longer the user has already waited, the
longer the JND.

While we still believe this theory is sound from a UX perspective, we no
longer think the implementation complexity is worth it. The main thing
that's changed is how we handle Default updates. We used to render
Default updates concurrently (i.e. they were time sliced, and were
scheduled with postTask), but now they are blocking. Soon, they will
also be scheduled with rAF, too, which means by the end of the next rAF,
they will have either finished rendering or the main thread will be
blocked until they do. There are various motivations for this but part
of the rationale is that anything that can be made non-blocking should
be marked as a Transition, anyway, so it's not worth adding
implementation complexity to Default.

This commit removes the JND delay for Default updates. They will now
commit immediately once the render phase is complete, even if a
component suspends.",Andrew Clark,2023-04-11T04:19:49Z
ac43bf6870a15566507477a4504f22160835c8d3,"Move validation of text nesting into ReactDOMComponent  (#26594)

Extract validateTextNesting from validateDOMNesting. We only need the
parent tag when validating text nodes. Then validate it in setProp.",Sebastian Markbåge,2023-04-11T01:41:53Z
ca41adb8c1b256705f73d1fb657421a03dfad82c,"Diff properties in the commit phase instead of generating an update payload (#26583)

This removes the concept of `prepareUpdate()`, behind a flag.

React Native already does everything in the commit phase, but generates
a temporary update payload before applying it.

React Fabric does it both in the render phase. Now it just moves it to a
single host config.

For DOM I forked updateProperties into one that does diffing and
updating in one pass vs just applying a pre-diffed updatePayload.

There are a few downsides of this approach:

- If only ""children"" has changed, we end up scheduling an update to be
done in the commit phase. Since we traverse through it anyway, it's
probably not much extra.
- It does more work in the commit phase so for a large tree that is
mostly unchanged, it'll stall longer.
- It does some extra work for special cases since that work happens if
anything has changed. We no longer have a deep bailout.
- The special cases now have to each replicate the ""clean up old props""
loop, leading to extra code.

The benefit is that this doesn't allocate temporary extra objects
(possibly multiple per element if the array has to resize). It's less
work overall. It also gives us an option to reuse this function for a
sync render optimization.

Another benefit is that if we do the loop in the commit phase I can do
further optimizations by reading all props that I need for special cases
in that loop instead of polymorphic reads from props. This is what I'd
like to do in future refactors that would be stacked on top of this
change.",Sebastian Markbåge,2023-04-10T23:09:28Z
dd0619b2eeb6dbf7fbdfe6afd2552cfc60d0cbbe,"rename $$$hostConfig to $$$config (#26593)

We have moved away from HostConfig since the name does not fully
describe the configs we customize per runtime like FlightClient,
FlightServer, Fizz, and Fiber. This commit generalizes $$$hostconfig to
$$$config",Josh Story,2023-04-10T22:01:04Z
b55d31955982851284bb437a5187a6c56e366539,"Rename HostConfig files to FiberConfig to clarify they are configs fo… (#26592)

part of https://github.com/facebook/react/pull/26571

merging separately to improve tracking of files renames in git

Rename HostConfig files to FiberConfig to clarify they are configs for
Fiber and not Fizz/Flight. This better conforms to the naming used in
Flight and now Fizz of `ReactFlightServerConfig` and `ReactFizzConfig`",Josh Story,2023-04-10T21:58:44Z
ffb8eaca5966fc7733bd0a23f4055e26d2cc59d7,"Rename ReactServerFormatConfig to ReactFizzConfig (#26591)

part of https://github.com/facebook/react/pull/26571

merging separately to improve tracking of file renames",Josh Story,2023-04-10T21:54:26Z
f4f873f6282e6f2e584990c00fb2aae86db85a8b,"Implements wiring for Flight to have it's own ""HostConfig"" (#26590)

Part of https://github.com/facebook/react/pull/26571

Implements wiring for Flight to have it's own ""HostConfig"" from Fizz.

Historically the ServerFormatConfigs were supposed to be generic enough
to be used by Fizz and Flight. However with the addition of features
like Float the configs have evolved to be more specific to the renderer.
We may want to get back to a place where there is a pure FormatConfig
which can be shared but for now we are embracing the fact that these
runtimes need very different things and DCE cannot adequately remove the
unused stuff for Fizz when pulling this dep into Flight so we are going
to fork the configs and just maintain separate ones.

At first the Flight config will be almost empty but once Float support
in Flight lands it will have a more complex implementation

Additionally this commit normalizes the component files which make up
FlightServerConfig and FlightClientConfig. Now each file that
participates starts with ReactFlightServerConfig... and
ReactFlightClientConfig...",Josh Story,2023-04-10T21:51:54Z
44db16afc61c34e6d46b55e985211df7ccc78fa5,"Normalize ReactFlightServerConfig and related files (#26589)

First part of https://github.com/facebook/react/pull/26571

merging separately to help with git history with a lot of file renames",Josh Story,2023-04-10T21:47:23Z
451736b557ebf53dd6d6b92c55cad14f7eba864c,"[DevTools][BE] move shared types & constants to consolidated locations (#26572)

## Summary

This pull request aims to improve the maintainability of the codebase by
consolidating types and constants that are shared between the backend
and frontend. This consolidation will allow us to maintain backwards
compatibility in the frontend in the future.

To achieve this, we have moved the shared types and constants to the
following blessed files:

- react-devtools-shared/src/constants
- react-devtools-shared/src/types
- react-devtools-shared/src/backend/types
- react-devtools-shared/src/backend/NativeStyleEditor/types

Please note that the inclusion of NativeStyleEditor in this list is
temporary, and we plan to remove it once we have a better plugin system
in place.

## How did you test this change?

I have tested it by running `yarn flow dom-node`, which reports no
errors.",Mengdi Chen,2023-04-10T21:07:05Z
fec97ecbc4bc2e0e1407160289a8f5fac5241cbc,"act: Move didScheduleLegacyUpdate to ensureRootIsScheduled (#26552)

`act` uses the `didScheduleLegacyUpdate` field to simulate the behavior
of batching in React <17 and below. It's a quirk leftover from a
previous implementation, not intentionally designed.

This sets `didScheduleLegacyUpdate` every time a legacy root receives an
update as opposed to only when the `executionContext` is empty. There's
no real reason to do it this way over some other way except that it's
how it used to work before #26512 and we should try our best to maintain
the existing behavior, quirks and all, since existing tests may have
come to accidentally rely on it.

This should fix some (though not all) of the internal Meta tests that
started failing after #26512 landed.

Will add a regression test before merging.",Andrew Clark,2023-04-10T18:40:18Z
67b0cf8a8c966db6fa6bd1d99e3967d9957cc146,Comments from #1484,Joe Savona,2023-04-10T18:06:10Z
9a9da7721e5b73a8af242807e463e2af842c58ee,"Don't update textarea defaultValue and input checked unnecessarily (#26580)

In #26573 I changed it so that textareas get their defaultValue reset if
you don't specify one.

However, the way that was implemented, it always set it for any update
even if it hasn't changed.

We have a test for that, but that test only works if no properties
update at all so that no update was scheduled. This fixes the test so
that it updates some unrelated prop.

I also found a test for `checked` that needed a similar fix.

Interestingly, we don't do this deduping for `defaultValue` or
`defaultChecked` on inputs and there's no test for that.",Sebastian Markbåge,2023-04-10T02:16:38Z
e5146cb5250be1a4e66511af91549859b36ed488,"Refactor some controlled component stuff (#26573)

This is mainly renaming some stuff. The behavior change is
hasOwnProperty to nullish check.

I had a bigger refactor that was a dead-end but might as well land this
part and see if I can pick it up later.",Sebastian Markbåge,2023-04-09T22:06:16Z
601eb2a23aa06b46799dfeebaf278d94bb5f298f,"Inline useMemo callbacks to allow improved memoization 

This is a simplified version of #1454. The goal of this PR is to inline the 
contents of `useMemo()` callbacks, rather than just immediately invoke the 
lambda. Turning useMemo() into an IIFE works, but it means that we can't 
optimize within the lambda block. Our investigations showed that there's a lot 
of room to optimize at a finer granularity than manually written useMemo calls. 
For example, one product instance had a useMemo that created a list of child JSX 
elements. Most of those elements only relied on a single variable (`a`), but a 
few relied on a second variable (`b). Thus _all_ elements were invalidated 
whenever `b` changed. If Forget retains the original lambda, we have no choice 
but to keep that (coarse) granularity for memoization. When we inline, we can 
optimize to make e.g. individual JSX elements depend on their precise 
dependencies. 

The rough idea is: 

* Keep track of all function expressions 

* When we find a useMemo, lookup its function expression, and add its CFG to the 
main function (the previous PR ensures that BlockIds won't collide) 

* Replace any return statements with a StoreLocal to save the result and a Goto 
to the code following the useMemo call. 

* Then we run the usual set of passes to patch the HIR back up again. 

Example: 

```javascript 

// Before 

function Component(props) { 

const x = useMemo(() => { 

if (props.cond) { 

return null; 

} 

return foo(props.x); 

}, [props.x]); 

return x + props.y; 

} 

// Intended - **before** memoization 

function Component(props) { 

let x; 

if (props.cond) { 

x = null; 

} else { 

x = foo(props.x); 

} 

return x + props.y; 

} 

```",Joe Savona,2023-04-07T23:34:52Z
f7f7a88e19674e6dec8c60ec22601ef347113636,Example suboptimal memoization with non-inlined useMemo,Joe Savona,2023-04-07T23:34:51Z
657698e48d5b093b4ea5a7684e26d3fdd16695f2,"[Tests] `waitForThrow` should diff strings (#26568)

Currently, `waitForThrow` tries to diff the expected value against the
thrown value if it doesn't match. However if the expectation is a
string, we are not diffing against the thrown message. This commit makes
it so if we are matching against message we also diff against message.",Josh Story,2023-04-07T21:14:08Z
dd5365878da2fe88a34dcdbb07d8297a78841da4,"[DevTools] remove backend dependency from the global hook (#26563)

## Summary

- #26234 is reverted and replaced with a better approach 
- introduce a new global devtools variable to decouple the global hook's
dependency on backend/console.js, and add it to react-devtools-inline
and react-devtools-standalone

With this PR, I want to introduce a new principle to hook.js: we should
always be alert when editing this file and avoid importing from other
files.
In the past, we try to inline a lot of the implementation because we use
`.toString()` to inject this function from the extension (we still have
some old comments left). Although it is no longer inlined that way, it
has became now more important to keep it clean as it is a de facto
global API people are using (9.9K files contains it on Github search as
of today).


**File size change for extension:**
Before:
379K installHook.js

After:
 21K installHook.js
363K renderer.js",Mengdi Chen,2023-04-07T07:35:36Z
6122f213938f19cf9b841afa6922e4c2021d2ca2,Definition for useContext,Joe Savona,2023-04-06T18:46:57Z
f51e2a6bf408c6a5d5fadc25c243e2bd8a5d8927,"Enforce terminal has a .loc (and .id) 

This PR ensures (via a static assertion function) that all terminal variants 
have a SourceLocation, and adds locations to the variants which didn't have it 
before. This also adds a static assertion that terminals have an InstructionId, 
though we already relied on that so it was checked via usage.",Joe Savona,2023-04-06T22:50:43Z
5622c0ee91b3f011c735e4addc4693ff92ee8370,"Use single name resolver for nested functions 

This is a prerequisite to inlining `useMemo()` lambdas so that we can better 
optimize them. Nested functions are evaluated with a fresh HIRBuilder, which 
means that they currently have their own `bindings` object for mapping 
identifier instances to IdentifierIds. This means that identifier ids in a 
closure are _always_ different that those outside the closure, even when they 
refer to the same identifier: 

``` 

function Component(props) { 

props; // becomes e.g. props$1 

const onClick = () => { 

props // becomes e.g. props$2 

}; 

} 

``` 

For useMemo inlining this is problematic because we've lost the association that 
these identifiers actually refer to the same thing. This PR changes that, 
sharing the name resolution data structure between the top-level function and 
any nested function expressions.",Joe Savona,2023-04-06T22:25:30Z
fcfb66914ad98c6b1d09cfc232bb42729e85848f,"[Babel] Skip files that contain one or more disables of React eslint rules 

To unblock internal experimentation, for now let's just skip over compiling any 
file that contains one or more disables of React's eslint rules, and log that. 
This is a little coarse in the sense that we could skip over just functions that 
contain the comments, but Babel doesn't provide an easy way to traverse comments 
afaict so this is the simplest solution. I did check our internal repo and noted 
that there was only one disable of exhaustive-hooks in that entire directory in 
one file, so this should be fine. 

Notably we are not throwing any errors if we detect these violations as we don't 
want to fail the build, we just want to skip them for now.",Lauren Tan,2023-04-06T23:14:08Z
2eae7dc6b9add777d24229d8c44efa1ba4da49f1,"[be] Simplify yarn test 

Updates our scripts to only hash and clean up`dist` when bundling for Meta, 
since we don't need to do that for tests.",Lauren Tan,2023-04-06T23:10:21Z
85bb7b685b7aec50879703b94dd31523cf69b34d,"Fix: Move `destroy` field to shared instance object (#26561)

This fixes the ""double free"" bug illustrated by the regression test
added in the previous commit.

The underlying issue is that `effect.destroy` field is a mutable field
but we read it during render. This is a concurrency bug — if we had a
borrow checker, it would not allow this.

It's rare in practice today because the field is updated during the
commit phase, which takes a lock on the fiber tree until all the effects
have fired. But it's still theoretically wrong because you can have
multiple Fiber copies each with their own reference to a single destroy
function, and indeed we discovered in production a scenario where this
happens via our current APIs.

In the future these types of scenarios will be much more common because
we will introduce features where effects may run concurrently with the
render phase — i.e. an imperative `hide` method that synchronously hides
a React tree and unmounts all its effects without entering the render
phase, and without interrupting a render phase that's already in
progress.

A future version of React may also be able to run the entire commit
phase concurrently with a subsequent render phase. We can't do this now
because our data structures are not fully thread safe (see: the Fiber
alternate model) but we should be able to do this in the future.

The fix I've introduced in this commit is to move the `destroy` field to
a separate object. The effect ""instance"" is a shared object that remains
the same for the entire lifetime of an effect. In Rust terms, a RefCell.
The field is `undefined` if the effect is unmounted, or if the effect
ran but is not stateful. We don't explicitly track whether the effect is
mounted or unmounted because that can be inferred by the hiddenness of
the fiber in the tree, i.e. whether there is a hidden Offscreen fiber
above it.

It's unfortunate that this is stored on a separate object, because it
adds more memory per effect instance, but it's conceptually sound. I
think there's likely a better data structure we could use for effects;
perhaps just one array of effect instances per fiber. But I think this
is OK for now despite the additional memory and we can follow up with
performance optimizations later.

---------

Co-authored-by: Dan Abramov <dan.abramov@gmail.com>
Co-authored-by: Rick Hanlon <rickhanlonii@gmail.com>
Co-authored-by: Jan Kassens <jan@kassens.net>",Andrew Clark,2023-04-06T16:08:05Z
9c1f8a962c1f15935749e604cac2d095c952af04,"Make CompilerError.reason a static string 

While running the latest Forget build on www I noticed that a lot of the 
bailouts were special-cases where we used interpolation in the error `reason` 
string to provide more context for debugging. This is a pretty cool result, 
because it means that we actually support nearly all the common syntax (at least 
based on a sample of the codebase). But it makes our tools for aggregating 
errors break down a bit. 

This PR adds a new, nullable `description` property to CompilerErrorDetail, and 
manually updates to ensure that we always pass a static `reason` and only use 
interpolation in the `description`. This will allow our aggregation tools to 
group by the reason.",Joe Savona,2023-04-06T15:51:31Z
60cfeeebe3902f4f996973ce8189afcb7363a6be,"[DevTools] Replace deprecated `new-window` with `webContents.setWindowOpenHandler()` (#26559)

## Summary

The electron package was recently upgraded from ^11.1.0 to ^23.1.2
(#26337). However, the WebContents `new-window` event – that is used in
the react-devtools project – was deprecated in
[v12.0.0](https://releases.electronjs.org/release/v12.0.0) and removed
in [v22.2.0](https://releases.electronjs.org/release/v22.2.0). The event
was replaced by `webContents.setWindowOpenHandler()`. This PR replaces
the `new-window` event with `webContents.setWindowOpenHandler()`.

## How did you test this change?

I created a simple electron application with similar functionality:

```
const { app, BrowserWindow, shell } = require('electron')

const createWindow = () => {
  const mainWindow = new BrowserWindow({
    width: 800,
    height: 600
  })

  mainWindow.webContents.setWindowOpenHandler(({ url }) => {
    shell.openExternal(url)
    return { action: 'deny' }
  })

  mainWindow.loadFile('index.html')
}

app.whenReady().then(() => {
  createWindow()
})
```

---------

Co-authored-by: root <root@DESKTOP-KCGHLB8.localdomain>",Willie-Boy,2023-04-06T14:02:23Z
9cfba0f6ecc15a342ef184552742c5db6c7f2d3e,"Clean up discrete event replaying (#26558)

We no longer replay and discrete events.

I might re-add a form of this but it'll look a little different.",Sebastian Markbåge,2023-04-05T23:38:20Z
702f43eb1efb85af1f13d59c0927a615c4b10eab,"Optimize away extraneous blocks 

In codegen we can flatten away extraneous BlockStatements if they turn out not 
to need a label.",Joe Savona,2023-04-05T23:37:26Z
d243e748d00773c1eb9dbdc4eceed019323fdc9d,"Build -> Codegen for LabelTerminal 

NOTE: See background in #1476. 

Updates BuildHIR to use the new LabelTerminal for LabeledStatements, and adds 
support for HIR->ReactiveFunction transformation and codegen. Note that we 
sometimes produce an extraneous block wrapper if it turns out the label wasn't 
necessary, that seems...fine?",Joe Savona,2023-04-05T23:26:40Z
b087635e5db273309930ace018c58cf705989b45,"LabelTerminal scaffolding 

Adds a new `LabelTerminal` which will be used to represent LabeledStatements 
that contain a statement other than a loop. What we do for these cases is 
basically break the containing block in two, with a goto after the inner 
statement to the fallthrough. This allows us to model the label, and any `break` 
to it, in the HIR. However this fails in codegen because we can't find the 
fallthrough branch — we need a high level terminal that knows about this 
structure. 

Hence LabelTerminal. Now, instead of just a continuation block and a goto, we 
have a structured terminal. The LabelTerminal expresses the block for the 
labeled statement and the continuation, and we can use this to put it back 
together when constructing a ReactiveFunction. Note that this PR is just the 
scaffolding for LabelTerminal, the next PR is the interesting bits.",Joe Savona,2023-04-05T23:26:36Z
592b911e7f37721ce4146af1314152bedcb85250,fix main,Joe Savona,2023-04-05T22:47:40Z
1650d8fef24ebf04c09bf4950db2013986e45648,Ensure blank line after copyright header,Joe Savona,2023-04-05T20:42:27Z
801e4258cf9936ed5e7e2e4afa746e9c4b28885f,Add missing copyright headers,Joe Savona,2023-04-05T19:21:51Z
fd91191c9478ebb1ec3227a8d028515a40215338,"Script to add/fix copyright 

Adds a script to automate adding/updating the copyright header to all 
appropriate files. For now i've excluded fixture inputs, just because it would 
impact fixture outputs too, but we can add them in a later PR if we want.",Joe Savona,2023-04-05T19:21:47Z
9d97015236b8f19bbf313e98065aaeb4d0322cbc,"[globals] Remove global shape for Array.from 

Type inference currently assumes that a `FunctionSignature`'s effects have no 
false positives. If a `mutate` effect is observed on a read-only place, Forget 
currently assumes this is an user error and 
[throws](https://github.com/facebook/react-forget/blob/207595e04e2be08b8f62bf21dac9d846b9651e43/forget/src/Inference/InferReferenceEffects.ts#L275-L281). 

Array.from is polymorphic -- its effects are dependent on the type of its 
parameters",mofeiZ,2023-04-05T16:53:39Z
4505218911f019746172b1b39e1d1184619fad58,"Ensure unique BlockId for nested functions 

This PR ensures that we use a single id space for the `BlockId`s in both 
top-level functions as well as any nested FunctionExpressions (note, we already 
do this for `IdentifierId`). This will make it easier for follow-ups to merge 
the CFG of nested functions (ie useMemo bodies) with the parent without block id 
collisions.",Joe Savona,2023-04-05T16:01:08Z
790ebc962de573a37e4755207eba91b07a0fa172,"Remove no-fallthrough lint suppressions (#26553)

The lint rule already understands a normal comment. Also a bunch of
these were unnecessary.",Sophie Alpert,2023-04-05T03:08:33Z
a3dfc7e3a2740dcf6d5a3f9c31282fc1d7bd8423,"Use CompilerError.invariant in BabelPlugin 

This means we get more information when we hit these invariants (ie the source 
location)",Joe Savona,2023-04-05T00:56:11Z
c15579631ff4d387401d57d9006d849ca1d5cd71,"Put common aliases in Map/Set instead of switch over strings (#26551)

This is a follow up to https://github.com/facebook/react/pull/26546

This is strictly a perf optimization since we know that switches over
strings aren't optimally implemented in current engines. Basically
they're a sequence of ifs.

As a result, we're better off putting the unusual cases in a Map and the
very common cases in the beginning of the switch. We might be better off
putting very common cases in explicit ifs - just in case the engine does
optimize switches to a hash table which is potentially worse.

---------

Co-authored-by: Sophie Alpert <git@sophiebits.com>",Sebastian Markbåge,2023-04-04T22:06:09Z
1e2dbf7fdbbaca335297568f17be984709ab2b28,"Fix JSX form of fbt 

Fixes `<fbt>`. This required a bunk of yak shaving to work through several 
issues: 

* First, there was a bug in codegen for JsxNamedspacedName. I added handling for 
it for identifiers, but JsxNamespacedName gets converted to a Primitive. The 
output looked correct because Babel happily creates invalid Jsx identifiers! 

* Next, I needed to add locations to JSX nodes. It took me a while to pinpoint 
which specific node needed the location, so I ended up just adding locations to 
all the parts of a Jsx element. 

* That uncovered the fact that FBT was expecting the `<fbt:param>`'s `name` 
attribute value to be a StringLiteral, not a StringLiteral wrapped in a 
JsxExpressionContainer. So now we special-case JsxAttribute and emit raw 
StringLiteral (either is allowed per the spec) 

And with that, voila, `<fbt>` works.",Joe Savona,2023-04-04T21:37:30Z
3c46984e09b5e0343ec7e9a99a4557a2f15ef2a2,"Repro of fbt issues 

Adds the two FBT (https://facebook.github.io/fbt/) plugins to our test setup so 
that we can verify Forget plays well with FBT. Unfortunately FBT's plugins are a 
bit finicky, and things that are technically allowed per the JSX spec (such as 
wrapping string attribute values in a JsxExpressionContainer) aren't supported 
by FBT's plugin. This PR is just to add the fbt plugins and highlight some cases 
that fail; these are fixed in later PRs in the stack. 

For example, the `fbt-params.js` fixture fails on this PR: 

Input 

```error.fbt-params.js 

import fbt from ""fbt""; 

function Component(props) { 

return ( 

<fbt desc={""Dialog to show to user""}> 

Hello <fbt:param name=""user name"">{props.name}</fbt:param> 

</fbt> 

); 

} 

``` 

Output 

``` 

React Forget › __tests__/fixtures/compiler › fixtures › fbt-params 

Expected fixture 'fbt-params' to succeed but it failed with error: 

/Users/joesavona/github/react-forget/forget/fbt-params: fbt: unsupported babel 
node: MemberExpression 

--- 

props.name 

--- 

``` 

See fixes later in the stack.",Joe Savona,2023-04-04T21:32:21Z
a97c55dc5da37c0d0358fee660be4343e7528c38,"Support for with empty update expression 

Adds support for `for` statements with an empty or unreachable update 
expression. In both cases, reversePostorderBlocks() will remove the 
empty/unreachable update block, leaving the ForTerminal.update pointing to a 
non-existent block. We explicitly rewrite this (much like we null out 
unreachable fallthroughs after shrink). When transforming to ReactiveFunction, 
we emit the update block as null if it was the same as the test block.",Joe Savona,2023-04-04T20:29:04Z
1d77016026153f677a610ac29a64e459c7772fe2,"Make ReactiveForTerminal.update nullable 

Makes ReactiveForTerminal.update nullable, allowing the update clause to be 
omitted. Follow-up diffs null out the update clause in some circumstances.",Joe Savona,2023-04-04T20:29:03Z
d660f37bf22dec1ffcad309bf3c8aa9e2b0d8eef,Validator pass that terminal successors all exist,Joe Savona,2023-04-04T20:29:02Z
6d62d9f5057f4de89fe06e71aca01974b5f8ae7c,"Infer closures as frozen if they dont capture mutable values 

Fix for the previous issue, suggested by @gsathya: when we run 
InferReferenceEffects on the outer function we check each closure to see if it 
actually captured any mutable values. If it didn't, we can mark the closure as 
readonly and memoize it independently.",Joe Savona,2023-04-04T19:30:12Z
939582dae02fc70c6b86f82492427249d0b3e1df,"Repro for unmemoized readonly callback 

Repro of a closure that we currently treat as readonly because it captures a 
possibly-mutable value, but which we later realize is not mutable. Specifically, 
when we check `exit()` we think `dispatch()` is mutable and therefore consider 
it captured, which means we can't independently memoize `exit`.",Joe Savona,2023-04-04T19:30:11Z
2e3aa3954ce69db9b1e488d09cd49dcb2e5b7bf7,"Memoize hook args (treat as escaping) 

Updates `PruneNonEscapingScopes` to consider hook arguments as potentially 
escaping. This is because hook inputs are ""owned"" by React — for example, 
closures passed to `useEffect`, or a value that is passed to a custom hook and 
which then becomes a memoized input.",Joe Savona,2023-04-04T19:30:10Z
d5fd60f7e663a5cee61636f8f2dd174efa0fb2f0,"Remove findInstanceBlockingEvent unused parameters (#26534)

## Summary
First three parameters of `findInstanceBlockingEvent` are unused since I
think if we remove the unused parameters it makes it easier to know that
which parameters is need by `findInstanceBlockingEvent`.

## How did you test this change?
Existing tests.",Mohammad Ghorbani,2023-04-04T16:37:14Z
eeabb7312f509eb2094452a4389646000ea8ea14,"Refactor DOM Bindings Completely Off of DOMProperty Meta Programming (#26546)

There are four places we have special cases based off the DOMProperty
config:

1) DEV-only: ReactDOMUnknownPropertyHook warns for passing booleans to
non-boolean attributes. We just need a simple list of all properties
that are affected by that. We could probably move this in under setProp
instead and have it covered by that list.
2) DEV-only: Hydration. This just needs to read the value from an
attribute and compare it to what we'd expect to see if it was rendered
on the client. This could use some simplification/unification of the
code but I decided to just keep it simple and duplicated since code size
isn't an issue.
3) DOMServerFormatConfig pushAttribute: This just maps the special case
to how to emit it as a HTML attribute.
4) ReactDOMComponent setProp: This just maps the special case to how to
emit it as setAttribute or removeAttribute.

Basically we just have to remember to keep pushAttribute and setProp
aligned. There's only one long switch in prod per environment.

This just turns it all to a giant simple switch statement with string
cases. This is in theory the most optimizable since syntactically all
the information for a hash table is there. However, unfortunately we
know that most VMs don't optimize this very well and instead just turn
them into a bunch of ifs. JSC is best. We can minimize the cost by just
moving common attribute to the beginning of the list.

If we shipped this, maybe VMs will get it together to start optimizing
this case but there's a chicken and egg problem here and the game theory
reality is that we probably don't want to regress. Therefore, I intend
to do a follow up after landing this which reintroduces an object
indirection for simple property aliases. That should be enough to make
the remaining cases palatable. I'll also extract the most common
attributes to the beginning or separate ifs.

Ran attribute-behavior fixture and the table is the same.",Sebastian Markbåge,2023-04-04T15:05:56Z
0ba4d7b0d80d942dc8f074f7ce0536e6b2559fbf,"DevTools: Inline references to fiber flags (#26542)

We shouldn't be referencing internal fields like fiber's `flag` directly
of DevTools. It's an implementation detail. However, over the years a
few of these have snuck in. Because of how DevTools is currently
shipped, where it's expected to be backwards compatible with older
versions of React, this prevents us from refactoring those fields inside
the reconciler.

The plan we have to address this is to fix how DevTools is shipped:
DevTools will be released in lockstep with each version of React.

Until then, though, I need a temporary solution because it's blocking a
feature I'm working on. So in meantime, I'm going to have to fork the
DevTool's code based on the React version, like we already do with the
fiber TypeOfWork enum.

As a first step, I've inlined all the references to fiber flags into the
specific call sites where they are used. Eventually we'll import these
functions from the reconciler so they stay in sync, rather than
maintaining duplicate copies of the logic.",Andrew Clark,2023-04-04T15:05:33Z
da94e8b24a3f31a3e805f9bf6bba73055aad9d41,"Revert ""Cleanup enableSyncDefaultUpdate flag (#26236)"" (#26528)

This reverts commit b2ae9ddb3b497d16a7c27c051da1827d08871138.

While the feature flag is fully rolled out, these tests are also testing
behavior set with an unstable flag on root, which for now we want to
preserve.

Not sure if there's a better way then adding a dynamic feature flag to
the www build?",Jan Kassens,2023-04-04T14:08:14Z
0700dd50bda98f5ee86f2e3adfe5e9906ed1e8e3,"Implement public instances for text nodes in Fabric (#26516)

## Summary

This adds the ability to create public instances for text nodes in
Fabric. The implementation for the public instances lives in React
Native (as it does for host components after #26437). The logic here
just handles their lazy instantiation when requested via
`getPublicInstanceFromInternalInstanceHandle`, which is called by Fabric
with information coming from the shadow tree.

It's important that the creation of public instances for text nodes is
done lazily to avoid regressing memory usage when unused. Instances for
text nodes are left intact if the public instance is never accessed.

This is necessary to implement access to text nodes in React Native as
explained in
https://github.com/react-native-community/discussions-and-proposals/pull/607

## How did you test this change?

Added unit tests (also fixed a test that was only testing the logic in a
mock :S).",Rubén Norte,2023-04-04T13:43:35Z
e32ea49a0e8590a9a5ff62bc50409dc547e98ce8,"Special-case fbt() function call form 

Similar to what we did for `<fbt>` jsx elements, this PR ensures that `fbt()` 
calls have their operands memoized in the same scope to honor the limited 
contract for what's allowed as an argument of an fbt() call expression.",Joe Savona,2023-04-03T18:47:45Z
4a1cc2ddd035f5c269e82ab6f7686e2e60d3b3ea,"Fix logic around attribute seralization (#26526)

There was a bug in the attribute seralization for stylesheet resources
injected by the Fizz runtime. For boolean properties the attribute value
was set to an empty string but later immediately set to a string coerced
value. This PR fixes that bug and refactors the code paths to be clearer",Josh Story,2023-04-03T16:34:53Z
b14f8da15598cdc2253529a905421ac795d68ab1,"refactor[devtools]: forbid editing class instances in props (#26522)

## Summary
Fixes https://github.com/facebook/react/issues/24781

Restricting from editing props, which are class instances, because their
internals should be opaque.

Proposed changes:
1. Adding new data type `class_instance`: based on prototype chain of an
object we will check if its plain or not. If not, then will be marked as
`class_instance`. This should not affect `arrays`, ..., because we do
this in the end of an `object` case in `getDataType` function.

Important detail: this approach won't work for objects created with
`Object.create`, because of the custom prototype. This can also be
bypassed by manually deleting a prototype ¯\\\_(ツ)_/¯
I am not sure if there might be a better solution (which will cover all
cases) to detect if object is a class instance. Initially I was trying
to use `Object.getPrototypeOf(object) === Object.prototype`, but this
won't work for cases when we are dealing with `iframe`.


2. Objects with a type `class_instance` will be marked as unserializable
and read-only.

## Demo
`person` is a class instance, `object` is a plain object


https://user-images.githubusercontent.com/28902667/228914791-ebdc8ab0-eb5c-426d-8163-66d56b5e8790.mov",Ruslan Lesiutin,2023-04-03T10:32:17Z
7329ea81c154d40800e30104be40f050e8c2af3e,"Fix suspense replaying forward refs (#26535)

Continuation of https://github.com/facebook/react/issues/26420

Fixes https://github.com/facebook/react/issues/26385 and
https://github.com/facebook/react/issues/26419

---------

Co-authored-by: eps1lon <silbermann.sebastian@gmail.com>
Co-authored-by: Andrew Clark <git@andrewclark.io>",Hans Otto Wirtz,2023-04-02T22:48:28Z
0cb10446b32cf63c7a055dcff46087c65441cff5,[test] Failing test for returning from a for-loop,Sathya Gunasekaran,2023-04-01T08:22:34Z
b19555573f6ec233013e73111ffe3f05f44faa5e,"[babel] Make gating option a pair of module and project 

There are some internal restrictions in Metro that only allow us to specify one 
gating module as an injected dependency. To allow multiple projects, this PR 
updates the Babel plugin to take a gating options config specifiying a project 
name. The project name is used as a suffix for the generated import; for 
example: 

```js 

const options = { 

// ... 

gating: { 

module: ""ReactForgetFeatureFlag"", 

importSpecifierName: ""isForgetEnabled_Secret"", 

}; 

// generates 

import {isForgetEnabled_Secret} from ""ReactForgetFeatureFlag""; // a module that 
exports multiple flags 

// ... 

```",Lauren Tan,2023-04-03T16:33:23Z
0ae348018d5b3a3f1ccdd92de85d9cc581b2b98d,"[Float] Suspend unstyled content for up to 1 minute (#26532)

We almost never want to show content before its styles have loaded. But
eventually we will give up and allow unstyled content. So this extends
the timeout to a full minute. This somewhat arbitrary — big enough that
you'd only reach it under extreme circumstances.

Note that, like regular Suspense, the app is still interactive while
we're waiting for content to load. Only the unstyled content is blocked
from appearing, not updates in general. A new update will interrupt it.

We should figure out what the browser engines do during initial page
load and consider aligning our behavior with that. It's supposed to be
render blocking by default but there may be some cases where they, too,
give up and FOUC.",Andrew Clark,2023-03-31T19:45:45Z
888874673f81c08d9c3cfd4a56e2e93fd728894c,"Allow transitions to interrupt Suspensey commits (#26531)

I originally made it so that a Suspensey commit — i.e. a commit that's
waiting for a stylesheet, image, or font to load before proceeding —
could not be interrupted by transitions. My reasoning was that Suspensey
commits always time out after a short interval, anyway, so if the
incoming update isn't urgent, it's better to wait to commit the current
frame instead of throwing it away.

I don't think this rationale was correct, for a few reasons. There are
some cases where we'll suspend for a longer duration, like stylesheets —
it's nearly always a bad idea to show content before its styles have
loaded, so we're going to be extend this timeout to be really long.

But even in the case where the timeout is shorter, like fonts, if you
get a new update, it's possible (even likely) that update will allow us
to avoid showing a fallback, like by navigating to a different page. So
we might as well try.

The behavior now matches our behavior for interrupting a suspended
render phase (i.e. `use`), which makes sense because they're not that
conceptually different.",Andrew Clark,2023-03-31T19:35:48Z
09c8d2563300621dc91258a4c2839210e2fbdf0e,"Move update scheduling to microtask (#26512)

When React receives new input (via `setState`, a Suspense promise
resolution, and so on), it needs to ensure there's a rendering task
associated with the update. Most of this happens
`ensureRootIsScheduled`.

If a single event contains multiple updates, we end up running the
scheduling code once per update. But this is wasteful because we really
only need to run it once, at the end of the event (or in the case of
flushSync, at the end of the scope function's execution).

So this PR moves the scheduling logic to happen in a microtask instead.
In some cases, we will force it run earlier than that, like for
`flushSync`, but since updates are batched by default, it will almost
always happen in the microtask. Even for discrete updates.

In production, this should have no observable behavior difference. In a
testing environment that uses `act`, this should also not have a
behavior difference because React will push these tasks to an internal
`act` queue.

However, tests that do not use `act` and do not simulate an actual
production environment (like an e2e test) may be affected. For example,
before this change, if a test were to call `setState` outside of `act`
and then immediately call `jest.runAllTimers()`, the update would be
synchronously applied. After this change, that will no longer work
because the rendering task (a timer, in this case) isn't scheduled until
after the microtask queue has run.

I don't expect this to be an issue in practice because most people do
not write their tests this way. They either use `act`, or they write
e2e-style tests.

The biggest exception has been... our own internal test suite. Until
recently, many of our tests were written in a way that accidentally
relied on the updates being scheduled synchronously. Over the past few
weeks, @tyao1 and I have gradually converted the test suite to use a new
set of testing helpers that are resilient to this implementation detail.

(There are also some old Relay tests that were written in the style of
React's internal test suite. Those will need to be fixed, too.)

The larger motivation behind this change, aside from a minor performance
improvement, is we intend to use this new microtask to perform
additional logic that doesn't yet exist. Like inferring the priority of
a custom event.",Andrew Clark,2023-03-31T17:04:08Z
1aec5ef523202b187007a8298c3707fae9429f23,[hir] Skip computed part of the captured ref,Sathya Gunasekaran,2023-03-31T16:37:06Z
55793bd96f698b87137124996c46e534be811197,"Also visit phis in fallthroughs for DoWhile in LeaveSSA 

Oops, forgot about this previously",Lauren Tan,2023-03-31T21:55:07Z
61462a43bc53de1d7a19d49f62bfe108a03cca45,"Add support for ForOf statements 

Teaches Forget to compile simple ForOf statements, where the init comprises of a 
variable declaration with an identifier or destructure.",Lauren Tan,2023-03-31T21:55:04Z
1e2df5bdbb4e68996bb787a584ca47e9e597e206,"Remove console.log from testing sync script changes 

oooooops",Joe Savona,2023-03-31T21:43:31Z
28e6a974fadbb11c478d1c7b7a06fb446e11f3ca,JSX: children which are jsx elements dont need expr container,Joe Savona,2023-03-31T19:32:46Z
4e2ef92779bd4e55583bd3be1d88399cb4c883bb,"Ensure <fbt> children are not independently memod 

This is a Meta-ism, but adding it for now to unblock. We special-case the 
`<fbt>` element for translation purposes, and have a transform that requires the 
children of this element to be a limited subset of nodes. Notably, any dynamic 
translation values must appear as `<fbt:param>` children — we disallow 
identifiers as children of `<fbt>` nodes. 

This PR adds a new pass which finds `<fbt>` nodes and ensures their immediate 
operands are not independently memoized. Note that this still allows the values 
of `<fbt:param>` to be independently memoized, as demonstrated in the unit test.",Joe Savona,2023-03-31T19:32:45Z
8dfe06ddba1abbb6872b5e4384b3aa3485e86217,[hir] Allow reorderable exprs in optional computed load,Mofei Zhang,2023-03-31T14:58:28Z
8310854cebba4d1f404e65ff2064825ee76d78e2,"Clean up enableCapturePhaseSelectiveHydrationWithoutDiscreteEventReplay (#26521)

This flag is already enabled everywhere except for www, which is blocked
by a few tests that assert on the old behavior. Once www is ready, I'll
land this.",Andrew Clark,2023-03-31T14:25:58Z
ca01f359b9236292c749075bb2fd41bb7b569308,"Remove skipUnmountedBoundaries (#26489)

# Overview

Landing this flag internally, will test this PR in React Native before
merging.",Ricky,2023-03-31T00:58:13Z
c77c1b16445a5cb4207d8a44950c4aeed2bbee70,[hir] Disallow unconditional load from optional memberexpr,Mofei Zhang,2023-03-30T23:23:23Z
c00e7a2af2746061cdada5735b979bf04770aac9,"[test] Test case for optional chaining in codegen 

```js 

// here, `a?.b.c` is a single optional chain 

// (evaluates to undefined if a is nullish) 

a?.b.c; 

// here, 'a?.b` is an optional chain, and `.c` is an unconditional load 

// (nullthrows if a is nullish) 

(a?.b).c; 

``` 

--- 

Next PR in stack will add a bailout for `(a?.b).c`. 

(If we want to properly handle `(a?.b).c`, we might want to model optional 
chains explicitly in the HIR. We currently assume that any `PropertyLoad` whose 
lhs is an optional property load is read conditionally.)",Mofei Zhang,2023-03-30T22:43:55Z
0eeedee95e04563af8092f28fcb75dc65b1da583,"[hir] Rewrite identifiers to be consistent 

If we resolve identifiers to be different from the binding, update the binding 
to the new name.",Sathya Gunasekaran,2023-03-31T11:35:17Z
3b3d15eaeb70814a096dba5d87b87c3ee7241cf7,[hir] Check if callee before pruning member path,Sathya Gunasekaran,2023-03-31T15:36:04Z
46a9d409144ae5f8e131756f6ed78aa4b088a3f2,"[babel] Invoke gating module as a call expression 

This is incredibly obvious in hindsight, but for exposure logging to work 
correctly we need to *call* the underlying `MobileConfig.getBool` function at 
the callsite – otherwise the bool is evaluated once (and only once) when the 
module is loaded. 

Tested internally and verified that in dogfooding the exposure logging was 
working correctly",Lauren Tan,2023-03-31T15:15:51Z
43a70a610dd2cc298ab5592deebfbf8f7bbac127,"Limit the meaning of ""custom element"" to not include `is` (#26524)

This PR has a bunch of surrounding refactoring. See individual commits.

The main change is that we no longer special case `typeof is ===
'string'` as a special case according to the
`enableCustomElementPropertySupport` flag.

Effectively this means that you can't use custom properties/events,
other than the ones React knows about on `<input is=""my-input"">`
extensions.

This is unfortunate but there's too many paths that are forked in
inconsistent ways since we fork based on tag name. I think __the
solution is to let all React elements set unknown properties/events in
the same way as this flag__ but that's a bigger change than this flag
implies.

Since `is` is not universally supported yet anyway, this doesn't seem
like a huge loss. Attributes still work.

We still support passing the `is` prop and turn that into the
appropriate createElement call.

@josepharhar",Sebastian Markbåge,2023-03-30T22:38:50Z
5beecef28f0891e65cf229f5f26015b129ea9994,"[patch] Remove invalid invariant in deriveMinimalDeps 

Confirmed that this fixes invariant violation on -",mofeiZ,2023-03-30T21:33:37Z
1308e49a6923d0dfd935dcd12cc420ec57239981,"[Flight Plugin] Scan for ""use client"" (#26474)

## Summary

Our toy webpack plugin for Server Components is pretty broken right now
because, now that `.client.js` convention is gone, it ends up adding
every single JS file it can find (including `node_modules`) as a
potential async dependency. Instead, it should only look for files with
the `'use client'` directive.

The ideal way is to implement this by bundling the RSC graph first.
Then, we would know which `'use client'` files were actually discovered
— and so there would be no point to scanning the disk for them. That's
how Next.js bundler does it.

We're not doing that here.

This toy plugin is very simple, and I'm not planning to do heavy
lifting. I'm just bringing it up to date with the convention. The change
is that we now read every file we discover (alas), bail if it has no
`'use client'`, and parse it if it does (to verify it's actually used as
a directive). I've changed to use `acorn-loose` because it's forgiving
of JSX (and likely TypeScript/Flow). Otherwise, this wouldn't work on
uncompiled source.

## Test plan

Verified I can get our initial Server Components Demo running after this
change. Previously, it would get stuck compiling and then emit thousands
of errors.

Also confirmed the fixture still works. (It doesn’t work correctly on
the first load after dev server starts, but that’s already the case on
main so seems unrelated.)",dan,2023-03-30T21:05:03Z
1a1d61fed98a02c9b1bac029d0bc11c3e4db896d,"Warn for ARIA typos on custom elements (#26523)

Normally we allow any attribute/property on custom elements. However
it's a shared namespace. The `aria-` namespace applies to all generic
elements which are shared with custom elements. So arguably adding
custom extensions there is a really bad idea since it can conflict with
future additions.

It's possible there is a new standard one that's polyfilled by a custom
element but the same issue applies to React in general that we might
warn for very new additions so we just have to be quick on that.

cc @josepharhar",Sebastian Markbåge,2023-03-30T20:31:15Z
5b8cf20b388c014ae3d0cdbde6ffc1ed7667db89,"Add Circle CI API token to request header if available (#26519)

Follow up of #26499
A Circle CI team member got back to me. It is indeed not necessary, but
they had a regression not long ago on fetching without token.

https://discuss.circleci.com/t/is-api-token-required-when-fetching-artifacts/47606/5

To mitigate the impact of this kind of issues, let's add this token to
requests' header when it's available.",Mengdi Chen,2023-03-30T20:06:56Z
d67b3cbdc034a48f45887a6df37f03b192dab092,[printer] Add missing terminal printer for do-while,Lauren Tan,2023-03-30T19:50:08Z
89ea2d5f7c13195e6963ba8fc5119a910b4b546c,"[be] Fix missing break and update no-fallthrough eslint rule 

- Fixes a missing break in InferTypes - I disabled no-fallthrough previously 
because it would erroneously report that certain cases with non-builtin throws 
(eg `invariant`) would fall through. This brings the rule back but allows 
disabling it with a `// break omitted` comment, since it's still helpful in 
catching some actual missing breaks.",Lauren Tan,2023-03-30T19:50:07Z
e43f91edc392728e6e78aeb68b1707911b760b6f,"[env] Type inference for global object 

- Add `DEFAULT_SHAPES` ShapeRegistry, which holds builtins and all 
`ObjectShapes` used in `DEFAULT_GLOBALS`. 

- Add a few typed objects / functions into `DEFAULT_GLOBALS` (used for tests) 

- Add type inference and `infer-global-object` test",Mofei Zhang,2023-03-30T19:03:11Z
25388d3fda8ea901a12c81a3c7c4db62b67771f4,"[be] Clean up null -> PolyType in ObjectShape 

--- 

Question - should the unifier ignore `PolyType` for now? 

```js 

class Unifier { 

// ... 

bindVariableTo(v: TypeVar, type: Type) { 

if (type.kind === ""Poly"") { 

return; 

} 

// ... 

```",Mofei Zhang,2023-03-30T19:03:11Z
ffc1b5b7006ccfd7e1739d939be144b30aff92bc,[be] More comments for ObjectShapes; rename BuiltIn shapes,Mofei Zhang,2023-03-30T19:03:10Z
44b2f504ea3a1af837398f952bed323985f55749,"[rfc][env] Hook, object, and function types for Environment globals 

Adds `GlobalRegistry`, which holds the names and types of known global objects, 
i.e. 

```js 

type GlobalRegistry = Map<string, PrimitiveType | ObjectType | FunctionType | 
HookType | PolyType>; 

// ... 

globalRegistry.get(""NaN""); // {kind: ""Primitive""} 

globalRegistry.get(""parseInt""); // {kind: ""Function"", shapeId: ""...""} 

globalRegistry.get(""Math""); // {kind: ""Object"", shapeId: ""...""} 

``` 

Since we currently do not track module imports and module-level declarations, 
builtin and custom hooks currently also live in GlobalRegistry. 

```js 

globalRegistry.get(""useState""); // {kind: ""Hook"", definition: {...}} 

globalRegistry.get(""useFreeze""); // {kind: Hook, definition: {...}} 

``` 

This PR does not allow Forget users to define their own globals. When we add 
this as a configuration, we should not expose `ShapeRegistry` to the user, as a 
user-provided ShapeRegistry may accidentally be not well formed. (i.e. missing 
(1) required shapes (BuiltInArray for [] and BuiltInObject for {}) or (2) some 
recursive shapeIds) 

```js 

export type UserType = UserObject | UserFunction | ""Primitive"" | ""BuiltinObject"" 
| ...; 

export type UserObject = { 

kind: ""Object"", 

properties: Map<string, UserType> 

} 

export type UserFunction = { 

kind: ""Function"", 

properties: Map<string, UserType>, 

signature: ... 

} 

export type UserGlobals = Map<string, UserType>; 

class Environment { 

constructor(globals: Map<string, UserType>, ...) { 

// ... 

addUserDefinedGlobals(this.#globals, this.#shapes); 

```",Mofei Zhang,2023-03-30T19:03:10Z
45331ef21b9b25c784e73bdda3c529d2074612cb,"[be][env] Move EnvironmentOptions -> EnvironmentConfig 

--- 

Simplify Environment options by: 

- EnvironmentOptions -> EnvironmentConfig 

config is now directly passed around instead of being eagerly merged. 

- Moving merging / initialization logic into `Environment` constructor. From my 
understanding, there is no need to decouple merged options from an environment. 

This prepares Environment for the next PR, which adds non-stateful properties to 
Environment (i.e. a `GlobalRegistry`) that should be converted from config 
values (i.e. not directly exposed to the user due to potentially inconsistent 
inputs)",Mofei Zhang,2023-03-30T19:03:09Z
8e37df6dab0d44ac8f1ea452afc70708b7851387,"[be] Hook type inference should only happen at LoadGlobal 

--- 

#1254 added inference for hooks loaded from globals. This is the only time we 
need to generate a type equation assigning `lval` to a resolved`Hook` type. 

@gsathya Would love to get your feedback here on the change. From my 
understanding, this change is technically incorrect, since the type equation we 
generate should be dependent on the `callee` type (i.e. `Hook` if callee is a 
hook, `Function` if callee is a function). 

Would the next step be to consolidate `Hook` and `Function` types? 

```js 

type Function { 

... 

isHook: boolean, // set by inference 

} 

type FunctionSignature { 

isHook: boolean, // set when adding to ShapeRegistry 

} 

```",Mofei Zhang,2023-03-30T19:03:09Z
73deff0d5162160c0aafa5cd0b87e11143fe9938,"Refactor DOMProperty and CSSProperty (#26513)

This is a step towards getting rid of the meta programming in
DOMProperty and CSSProperty.

This moves isAttributeNameSafe and isUnitlessNumber to a separate shared
modules.

isUnitlessNumber is now a single switch instead of meta-programming.
There is a slight behavior change here in that I hard code a specific
set of vendor-prefixed attributes instead of prefixing all the unitless
properties. I based this list on what getComputedStyle returns in
current browsers. I removed Opera prefixes because they were [removed in
Opera](https://dev.opera.com/blog/css-vendor-prefixes-in-opera-12-50-snapshots/)
itself. I included the ms ones mentioned [in the original
PR](https://github.com/facebook/react/commit/5abcce534382d85887f3d33475e8e54e3b5d8457).
These shouldn't really be used anymore anyway so should be pretty safe.
Worst case, they'll fallback to the other property if you specify both.

Finally I inline the mustUseProperty special cases - which are also the
only thing that uses propertyName. These are really all controlled
components and all booleans.

I'm making a small breaking change here by treating `checked` and
`selected` specially only on the `input` and `option` tags instead of
all tags. That's because those are the only DOM nodes that actually have
those properties but we used to set them as expandos instead of
attributes before. That's why one of the tests is updated to now use
`input` instead of testing an expando on a `div` which isn't a real use
case. Interestingly this also uncovered that we update checked twice for
some reason but keeping that logic for now.

Ideally `multiple` and `muted` should move into `select` and
`audio`/`video` respectively for the same reason.

No change to the attribute-behavior fixture.",Sebastian Markbåge,2023-03-30T18:30:57Z
2d51251e608b7b1a8baf79ae6bdba81ed8e1939a,"Clean up deferRenderPhaseUpdateToNextBatch (#26511)

This is a change to some undefined behavior that we though we would do
at one point but decided not to roll out. It's already disabled
everywhere, so this just deletes the branch from the implementation and
the tests.",Andrew Clark,2023-03-30T18:10:19Z
e81063e5ef9b42074159d2474b27147caf7f0ce5,[rfc] Desugar FunctionDeclaration to a FunctionExpression,Sathya Gunasekaran,2023-03-30T14:48:54Z
05f48e2aacb6d1ce2676a13643ab49d46d174d6a,"[hir] Refactor FunctionExpression lowering into separate function 

This will allow us to reuse all the lowering for FunctionDeclaration.",Sathya Gunasekaran,2023-03-30T14:48:53Z
0ffc7f632b5cdc2d4ede97b6f8ff55e02183bdf9,"Update useMemoCache test to confirm that cache persists across errors (#26510)

## Summary

Updates the `useMemoCache()` tests to validate that the memo cache
persists when a component does a setState during render or throws during
render. Forget's compilation output follows the general pattern used in
this test and is resilient to rendering running partway and then again
with different inputs.

## How did you test this change?

`yarn test` (this is a test-only change)",Joseph Savona,2023-03-30T14:47:22Z
29a3be78bd80372f882ce9d39b12241a97c3d268,"Move ReactDOMFloat to react-dom/src/ (#26514)

This is not really part of the bindings, it's more part of the package
entry points. /shared/ is not really right neither because it's more
like an isomorphic entry point and not some utility.",Sebastian Markbåge,2023-03-30T03:39:24Z
4c2fc01900f50b5b1081a2fb8609ea2668bc05b6,"Generate safe javascript url instead of throwing with disableJavaScriptURLs is on (#26507)

We currently throw an error when disableJavaScriptURLs is on and trigger
an error boundary. I kind of thought that's what would happen with CSP
or Trusted Types anyway. However, that's not what happens. Instead, in
those environments what happens is that the error is triggered when you
try to actually visit those links. So if you `preventDefault()` or
something it'll never show up and since the error just logs to the
console or to a violation logger, it's effectively a noop to users.

We can simulate the same without CSP by simply generating a different
`javascript:` url that throws instead of executing the potential attack
vector.

This still allows these to be used - at least as long as you
preventDefault before using them in practice. This might be legit for
forms. We still don't recommend using them for links-as-buttons since
it'll be possible to ""Open in a New Tab"" and other weird artifacts. For
links we still recommend the technique of assigning a button role etc.

It also is a little nicer when an attack actually happens because at
least it doesn't allow an attacker to trigger error boundaries and
effectively deny access to a page.",Sebastian Markbåge,2023-03-30T03:39:02Z
c2154b27859b2ab2d4a2822e992830dfdba4fcbd,"[playground] Only collect first level of function declarations 

#1433 means that Forget now will compile nested function declarations, so we no 
longer need to compile these separately",mofeiZ,2023-03-29T21:14:58Z
f0aafa1a7e3338871f60ac3ea8c1c92b8671520c,"Convert a few more tests to waitFor test helpers (#26509)

Continuing my journey to migrate all the Scheduler flush* methods to
async versions of the same helpers.",Andrew Clark,2023-03-29T21:02:15Z
90995ef8b0733ca46b1d9a187828d63ff78852bb,"Delete ""triangle"" resuming fuzz tester (#26508)

This deletes the ReactIncrementalTriangle test suite, which I originally
added back in 2017 when I was working on Fiber's ""resuming"" feature. It
was meant to simulate a similar scenario as Seb's ""Sierpinski Triangle""
Fiber demo.

We eventually ended up removing resuming, but we kept this fuzz tester
around since it wasn't really harming anything. However, over the years,
we've had to make many small tweaks to decouple it from implementation
details, to the point that it doesn't test anything useful anymore. And
the thing that it originally tested has long since been removed.

If or when we do add back resuming, we would write a different fuzz
tester from scratch rather than build on this one.

So rather than continue to contrive ways to prevent it from breaking, I
propose we delete it.

We still have other fuzz testers for things like Suspense and context
propagation. Only this particular one has outlived its usefulness.",Andrew Clark,2023-03-29T20:48:02Z
f118b7cebf9c15d11c5973bfd40860b5f457df08,"[Flight] Gated test for dropped transport of undefined object values (#26478)

## Summary

With https://github.com/facebook/react/pull/26349 we now serialize
`undefined`. However, deserializing it on the client is currently
indistinguishable from the value missing entirely due to how
`JSON.parse` treats `undefined` return value of reviver functions.

This leads to inconsistent behavior of the `Object.hasOwn` or `in`
operator (used for narrowing in TypeScript). In TypeScript-speak, `{
prop: T | undefined}` will arrive as `{ prop?: T }`.

## How did you test this change?

- Added test that is expected to fail. Though ideally the implementation
of the component would not care whether it's used on the client or
server.",Sebastian Silbermann,2023-03-29T16:27:55Z
fd0511c728e186905b7f0e71f072b4b247d6f29f,"[Flight] Add support BigInt support (#26479)

## Summary

Adds support for sending `BigInt` to Flight and Flight Reply

## How did you test this change?

- added tests",Sebastian Silbermann,2023-03-29T16:23:43Z
85de6fde515148babd36eae2b7384ad8e62b732a,"Refactor DOM special cases per tags including controlled fields (#26501)

I use a shared helper when setting properties into a helper whether it's
initial or update.

I moved the special cases per tag to commit phase so we can check it
only once. This also effectively inlines getHostProps which can be done
in a single check per prop key.

The diffProperties operation is simplified to mostly just generating a
plain diff of all properties, generating an update payload. This might
generate a few more entries that are now ignored in the commit phase.
that previously would've been ignored earlier. We could skip this and
just do the whole diff in the commit phase by always scheduling a commit
phase update.

I tested the attribute table (one change documented below) and a few
select DOM fixtures.",Sebastian Markbåge,2023-03-29T02:40:03Z
5cbe6258bc436b1683080a6d978c27849f1d9a22,"Remove unnecessary CIRCLE_CI_API_TOKEN checks (#26499)

Token is not required for GET",Mengdi Chen,2023-03-28T20:31:34Z
1f5cdf8c77182fc51910787e48384ec4620dc40d,"Update Suspense fuzz tests to use `act` (#26498)

This updates the Suspense fuzz tester to use `act` to recursively flush
timers instead of doing it manually.

This still isn't great because ideally the fuzz tester wouldn't fake
timers at all. It should resolve promises using a custom queue instead
of Jest's fake timer queue, like we've started doing in our other
Suspense tests (i.e. the `resolveText` pattern). That's because our
internal `act` API (not the public one, the one we use in our tests)
uses Jest's fake timer queue as a way to force Suspense fallbacks to
appear.

However I'm not interested in upgrading this test suite to a better
strategy right now because if I were writing a Suspense fuzzer today I
would probably use an entirely different approach. So this is just an
incremental improvement to make it slightly less decoupled to React
implementation details.",Andrew Clark,2023-03-28T18:40:28Z
f62cb39ee58e5918806218de2be8d2833023e7fc,"Make disableSchedulerTimeoutInWorkLoop a static ff (#26497)

## Overview

There's a known infinite loop with this but we're not running an
experiment any time soon.",Ricky,2023-03-28T18:11:52Z
57bc5fd56ef3859250756606346935108c62f30f,"Support AssignmentPattern in params (param default values) 

I already taught `lowerAssignment()` to handle assignment patterns for 
destructuring, we just have to call this helper for assignment pattern params 
too.",Joe Savona,2023-03-28T16:52:55Z
0999b6b81512ce8a190b04d8d46bfef61c542141,"[hir] Treat captured refs in throw or return terminals as mutations 

In a lambda, a return/throw terminal could return a captured context ref needs 
to be treated as a mutation to correctly alias the returned  context ref and the 
lvalue.",Sathya Gunasekaran,2023-03-29T16:15:00Z
dd0476a1b5f0124d1a8def2cf8d53893e3b6a703,"[hir] Infer mutable ranges for terminals 

Terminal operands are generally not mutating so this hasn't mattered so far. But 
in a lambda, a return terminal could return a captured context ref which needs 
to be treated as a mutation to correctly alias the returned context ref and the 
lvalue.",Sathya Gunasekaran,2023-03-29T14:48:55Z
f7181993133a89b54f93d79d199be3392e5af6fc,"[DevTools] browser extension: improve script injection logic (#26492)

## Summary

- Drop extension support for Chrome / Edge <v102 since they have less
than 0.1% usage ([see data](https://caniuse.com/usage-table))
- Improve script injection logic when possible so that the scripts
injected by the extension are no longer shown in Network (which caused a
lot of confusion in the past)

## How did you test this change?

Built and tested locally, works as usual on Firefox.

For Chrome/Edge

**Before:**
Scripts shown in Network tab
<img width=""1279"" alt=""Untitled 2""
src=""https://user-images.githubusercontent.com/1001890/228074363-1d00d503-d4b5-4339-8dd6-fd0467e36e3e.png"">

**After:**
No scripts shown
<img width=""1329"" alt=""image""
src=""https://user-images.githubusercontent.com/1001890/228074596-2084722b-bf3c-495e-a852-15f122233155.png"">

---------

Co-authored-by: Ruslan Lesiutin <rdlesyutin@gmail.com>",Mengdi Chen,2023-03-28T16:45:53Z
e0180ce86a112fe5e16b7fe6cb434750dac3c992,"[lambdas] Track ReactiveScopeDepenency of ComputedLoad 

Fixes an issue where we did not track mutations to captured computed loads in 
lambdas.",Sathya Gunasekaran,2023-03-28T15:29:31Z
41b4714f195868193ddfb2a89d2373b1c61387f4,"Remove disableNativeComponentFrames (#26490)

## Overview

I'm landing this flag internally so we can delete this",Ricky,2023-03-28T13:46:26Z
fc90eb636876d54d99ace2773dd4923f3e848106,Codemod more tests to waitFor pattern (#26494),Andrew Clark,2023-03-28T04:03:57Z
e0bbc2662301e0d6c9a0cd601c22f7f27e1f56b2,"Improve tests that deal with microtasks (#26493)

I rewrote some of our tests that deal with microtasks with the aim of
making them less coupled to implementation details. This is related to
an upcoming change to move update processing into a microtask.",Andrew Clark,2023-03-28T03:17:55Z
ec0abcd64308b1268bceb205cbdb833114863c71,"[hir] Strip JSXEmptyExpression syntax 

`JSXEmptyExpression` is never added to a React element's children [in 
`react.buildChildren`](https://github.com/babel/babel/blob/main/packages/babel-types/src/builders/react/buildChildren.ts), 
which is [used 
by](https://github.com/babel/babel/blob/main/packages/babel-plugin-transform-react-jsx/src/create-plugin.ts#L649) 
`plugin-transform-react-jsx`]. 

An alternative would be to represent JSX expressions differently in HIR, then 
codegen `JSXEmptyExpression`s back when we encounter an `EmptyExpression` 

```js 

-   children: Array<Place>, 

-   children: Array<Place | ""EmptyExpression"">, 

``` 

(We could also retain `JSXEmptyExpression` as an `InstructionValue` that 
produces a Primitive. However, this would make babel types in Codegen a bit more 
messy, as `JSXEmptyExpression` does not extend `Expression` (which currently is 
the result of every `InstructionValue`).)",mofeiZ,2023-03-27T22:12:18Z
8faf751937e9672fb69dac8143dbfb0929caf77e,"Codemod some expiration tests to waitForExpired (#26491)

Continuing my journey to migrate all the Scheduler flush* methods to
async versions of the same helpers.

`unstable_flushExpired` is a rarely used helper that is only meant to be
used to test a very particular implementation detail (update starvation
prevention, or what we sometimes refer to as ""expiration"").

I've prefixed the new helper with `unstable_`, too, to indicate that our
tests should almost always prefer one of the other patterns instead.",Andrew Clark,2023-03-27T19:52:25Z
43176b129e372d5efec03ae879d068214f2d9e98,"[be] Simplify BuildHIR w lowerValueToTemporary helper 

Creates a new helper, `const temp: Place = lowerValueToTemporary(builder, 
value)` which creates a new temporary and an instruction to write that value to 
the temporary. We have this pattern all over BuildHIR, and the new helper makes 
this all a bit tidier.",Joe Savona,2023-03-27T18:35:34Z
445e550e0044790d5bf971051412f1bb6defd5a3,"Support await expressions 

Adds support for `await` expressions. We have primarily seen await used inside 
callbacks, not directly within component render logic, but because we construct 
HIR for lambdas it is helpful to be able to model await rather than require 
everyone to rewrite to use the Promise API. Note a subtlety: awaiting a promise 
is a mutative operation, so we a) model it as a Mutate effect and b) avoid DCE 
of await expressions since they may cause side effects. See the test cases for 
examples.",Joe Savona,2023-03-27T17:41:49Z
4a826985db82be35a84e0681d2e47966dde95e67,More tests for AssignmentPattern,Joe Savona,2023-03-27T17:34:16Z
6d434cc777112e261159c39dc2a2dae5710b5e58,"Generalize helper for reorderable expressions 

Adds a new helper method that we can use when processing expressions whose 
evaluation ordering may not be preserved. This was previously the case only for 
switch test case values, but we can use this for AssignmentPattern 
(destructuring default values) as well.",Joe Savona,2023-03-27T17:34:11Z
80bdab74470d237883d5c88fba3baafb3b0d447a,"Support AssignmentPattern (default values in destructuring) 

""Supports"" default values in destructuring (AssignmentPattern) by lowering to a 
ternary, even in the output. Examples: 

```javascript 

// Input: 

const [x = 'default'] = y; 

// Output: 

const [t0] = y; 

const x = t0 === undefined ? 'default' : t0; 

``` 

```javascript 

// Input 2 

const [{x} = makeObject()] = y; 

// Output 2 

const [t0] = y; 

const {x} = t0 === undefined ? makeObject() : t0; 

``` 

Note that this is how Babel lowers AssignmentPattern, so it isn't too bad. This 
should help avoid the need to update product code, even if the output isn't 
perfectly ideal.",Joe Savona,2023-03-27T17:34:11Z
61e97dc2788558072ca5b01d2abac9ad7fdbda63,"Support RegExp literals 

New InstructionValue variant since RegExp literals are valid expressions.",Joe Savona,2023-03-27T17:34:10Z
179b24b56e310cf69618653d8d13bbf784ca3939,"JSXNamespacedName support 

This is kind of a hack, but i think it's worth it given that JSXNamespacedName 
is relatively uncommon. Adding a new InstructionValue variant to represent a 
namespaced name is one option, but then that isn't a valid expression and can't 
appear as an operand anywhere else. Instead, we lower namespaced names as a 
primitive (string) as `${namespace}:${name}` — exploiting the fact the namespace 
and name can't have a colon, and non-namespaced tagnames also can't have colons. 

It's a bit of a hack but it's contained to the JSX processing code. If folks 
have strong opinions on this i'm happy to change but this felt reasonable as a 
quick and reliable way to unblock support. 

NOTE: there is a larger question of what to do about compiling `fbt` tags. 
Before we can do anything with them, though, we need to parse them.",Joe Savona,2023-03-27T17:34:09Z
027f773179756bab308af2b3f0965f2dba36a067,"[rhir] Patch for reactive computed loads 

We need to check reactivity of both the operand and its resolved source (if 
operand is produced by a LoadLocal / PropertyLoad / ComputedLoad). 

Both the operand and its source can have reactivity. 

e.g. 

```js 

const o = makeObject(); // source has no reactivity 

const x = o[props.x];   // x is reactive 

```",mofeiZ,2023-03-27T17:27:58Z
8342a09927b18725e1dd2a78b9a78b439528a7d1,"Remove unused feature flag disableSchedulerTimeoutBasedOnReactExpirationTime (#26488)

Easy removal as it's completely unused as @rickhanlonii noticed.",Jan Kassens,2023-03-27T15:52:02Z
bb2325bdce7b4f588df01829c0641b22e86bc25a,"[typer] Track return type in FunctionType 

Rather than having a special FunctionCall type that deduces the return type, 
change the FunctionType to include the return type. 

This return type is inferred as part of unification.",Sathya Gunasekaran,2023-03-27T14:58:08Z
a0fa5ede549c76600734d2758f1617b7c8fb44aa,[typer] Type Array.at returnType as PolyType,Sathya Gunasekaran,2023-03-27T14:58:07Z
67b2a9f314bae522859cc7e0e67076d09e83524b,"[rhir] Represent OptionalMemberExpression as a conditional dependency 

--- 

Every `OptionalMemberExpression` rvalue has the form 
`<requiredPath>?.<optionalPath>`. 

``` 

// required = [a], optional: [b, c] 

props.a?.b.c; 

props.a?.b?.c; 

``` 

When calculating reactive dependencies, recall that it is always correct to add 
a subpath of a dependency (e.g. we can always take `props.a` instead of 
`props.a.b` as a dependency). See comments in `DeriveMinimalDependencies` for a 
longer explanation. 

There are two ways we can deal with `OptionalMemberExpression`: 

- We can always truncate a OptionalMemberExpression dependency to its 
`requiredPath`, taking only the required path as a dependency. 

- this is the simpler approach, but it potentially loses granularity. 

e.g. 

``` 

// here, since props.a is already unconditionally accessed, 

// we can safely add props.a.b as a dependency and preserve both 

// nullthrows and the correct dependency set. 

scope @0 { 

let x = []; 

x.push(props.a?.b); 

x.push(props.a.b); 

} 

``` 

(See added test case `reduce-reactive-cond-memberexpr-join` + its comment block 
for a more detailed explanation` 

- (the approach taken by this PR) 

We can add the `requiredPath` as a potentially unconditional access (dependent 
on other control flow) and `requiredPath + optionalPath` as a conditional 
dependency.",Mofei Zhang,2023-03-27T14:41:05Z
afea1d0c536e0336735b0ea5c74f635527b65785,"[flow] make Flow suppressions explicit on the error (#26487)

Added an explicit type to all $FlowFixMe suppressions to reduce
over-suppressions of new errors that might be caused on the same lines.

Also removes suppressions that aren't used (e.g. in a `@noflow` file as
they're purely misleading)

Test Plan:
yarn flow-ci",Jan Kassens,2023-03-27T11:43:04Z
768f965de2d4c6be7f688562ef02382478c82e5b,"Suspensily committing a prerendered tree (#26434)

Prerendering a tree (i.e. with Offscreen) should not suspend the commit
phase, because the content is not yet visible. However, when revealing a
prerendered tree, we should suspend the commit phase if resources in the
prerendered tree haven't finished loading yet.

To do this properly, we need to visit all the visible nodes in the tree
that might possibly suspend. This includes nodes in the current tree,
because even though they were already ""mounted"", the resources might not
have loaded yet, because we didn't suspend when it was prerendered.

We will need to add this capability to the Offscreen component's
""manual"" mode, too. Something like a `ready()` method that returns a
promise that resolves when the tree has fully loaded.

Also includes some fixes to #26450. See PR for details.",Andrew Clark,2023-03-27T03:48:37Z
d12bdcda69afd219f4d91cbd60d6fae2a375d35b,"Fix Flow types of useEffectEvent (#26468)

## Summary

Just copied the types over from the internal types. Type error was
hidden by overly broad FlowFixMe. With `$FlowFixMe[not-a-function]` we
would've seen the actual issue:
```
Cannot return `dispatcher.useEffectEvent(...)` because  `T` [1] is incompatible with  undefined [2].Flow(incompatible-return)
```

## How did you test this change?

- [x] yarn flow dom-node
- [x] CI",Sebastian Silbermann,2023-03-25T19:24:00Z
73b6435ca4e0c3ae3aac8126509a82420a84f0d7,"[Float][Fiber] Implement waitForCommitToBeReady for stylesheet resources (#26450)

Before a commit is finished if any new stylesheet resources are going to
mount and we are capable of delaying the commit we will do the following

1. Wait for all preloads for newly created stylesheet resources to load
2. Once all preloads are finished we insert the stylesheet instances for
these resources and wait for them all to load
3. Once all stylesheets have loaded we complete the commit

In this PR I also removed the synchronous loadingstate tracking in the
fizz runtime. It was not necessary to support the implementation on not
used by the fizz runtime itself. It makes the inline script slightly
smaller

In this PR I also integrated ReactDOMFloatClient with
ReactDOMHostConfig. It leads to better code factoring, something I
already did on the server a while back. To make the diff a little easier
to follow i make these changes in a single commit so you can look at the
change after that commit if helpful

There is a 500ms timeout which will finish the commit even if all
suspended host instances have not finished loading yet

At the moment error and load events are treated the same and we're
really tracking whether the host instance is finished attempting to
load.",Josh Story,2023-03-25T02:17:38Z
175962c10c53e5adfcfc02a3d6cc3f487d5a78a0,"Fix remaining CommonJS imports after Rollup upgrade (#26473)

Follow-up to https://github.com/facebook/react/pull/26442.

It looks like we missed a few cases where we default import a CommonJS
module, which leads to Rollup adding `.default` access, e.g.
`require('webpack/lib/Template').default` in the output.

To fix, add the remaining cases to the list of exceptions. Verified by
going through all `externals` in the bundle list, and manually checking
the webpack plugin.",dan,2023-03-25T00:05:23Z
4aef9dac4990d1869b25ef68671806916d31a396,"[be] Make ReactiveScopeDependency.path nonnullable 

--- 

Previously, both `path=null` and `path=[]` could represent a dependency with no 
property path (i.e. the result of a LoadLocal with no PropertyLoad). 

Make path non-nullable so we don't have to add null checks everywhere.",Mofei Zhang,2023-03-24T21:53:06Z
b07bbc36ae013cb61417ed5823cae8feda935cfb,[buildhir] Patch: lower nested OptionalMemberExpr,Mofei Zhang,2023-03-24T21:53:04Z
5e95967c7c4788519a02486feea48455079b0fcd,"[be][dependencies] Remove control flow info from PropertyLoad sidemap 

--- 

We don't need to store whether a `PropertyLoad` happens within a conditional 
(within its reactive scope). In fact, the PropertyLoad producing a rval often is 
in a different ReactiveScope from where the rval is used. 

We only need to add `#inConditionalWithinScope` when we actually visit a 
reactive dependency.",Mofei Zhang,2023-03-24T21:53:03Z
9ff82c3c100d27629940a27c88a4340ff008c69f,"Support for (Optional)MemberExpression callee in OptionalCall 

Earlier PRs bailed out when the callee of an OptionalCallExpression was a 
MemberExpression or OptionalMemberExpression (ie for optional method calls). 
This PRs expands support for optional method calls, including when the receiver, 
method, or both are optional. Even better, we don't need to add any additional 
terminals or instruction variants for this case - the one new OptionalCall 
terminal from earlier in the stack works for all these cases.",Joe Savona,2023-03-24T21:22:16Z
326ee664dc3c8e1694fd89f6fca8cb3f86e3b39a,"Test cases for optional call 

Tests, focusing on two key behaviors: 

* Dependencies of the args are treated as conditional, since the call may not 
happen 

* Args cannot be memoized independently, even when that would be valid for a 
non-optional call.",Joe Savona,2023-03-24T21:22:15Z
77bb9ff765af43a59c96f5f558c3a5df46445c48,"ReactiveFunction and codegen for optional calls 

Implements HIR->ReactiveFunction conversion and Codegen for optional calls. We 
add a new OptionalCall variant of ReactiveValue, which is a SequenceExpression 
that describes the evaluation of the args and the call itself. This is then 
straightforward to codgen.",Joe Savona,2023-03-24T21:22:14Z
feb8e924e49a9b3a6cfaab12c75f6eb3835e0e9d,"BuildHIR for OptionalCallExpression 

Implements lowering for a subset of optional calls - specifically, we don't 
(yet) support when the callee is a member expression or an optional member 
expression. So `foo?.()` works but we bailout on `object?.foo()` and 
`object.foo?.()`. 

For `<calleee>?.(<args>)` we lower as roughly: 

``` 

bb0: 

t0 = <callee> 

OptionalCall test=bb1 fallthrough= 

bb1 (value): 

Branch t0 consequent=bb2 alternate=bb3 

bb2 (value): 

...lower <args> here... 

t1 = Call t0, args 

StoreLocal res, t1 

Goto bb4 

bb3 (value): 

t2 = undefined 

StoreLocal res, t2 

Goto bb4 

bb4: 

// result in `res` here 

```",Joe Savona,2023-03-24T21:22:13Z
40bd9b060ce72b16d135018deec95bbf6b24e33f,"Scaffolding for OptionalCall 

Adds a new `optional-call` terminal and sets up the appropriate handling in the 
visitors, with lowering/reactivefunction/codegen as todos for now and 
implemented in follow-ups.",Joe Savona,2023-03-24T21:22:13Z
3fcf209ea40536032c1eab792a8387e66c649f79,React DevTools 4.27.3 -> 4.27.4 (#26470),Mengdi Chen,2023-03-24T19:45:26Z
568048af0f3eccb8cd450158eb140bdb811e13c8,[tests] failing tests for dependencies and codegen (#1414),mofeiZ,2023-03-24T19:23:42Z
bde974ae400c4539cec01d91905e3113c31ec379,"[DevTools] missing file name in package.json (#26469)

resolves
https://github.com/facebook/react/pull/26337#issuecomment-1483004732",Mengdi Chen,2023-03-24T18:45:27Z
909c6dacfde06b87fa22f2e8506c47124cf982b5,"Update Rollup to 3.x (#26442)

<!--
  Thanks for submitting a pull request!
We appreciate you spending the time to work on these changes. Please
provide enough information so that others can review your pull request.
The three fields below are mandatory.

Before submitting a pull request, please make sure the following is
done:

1. Fork [the repository](https://github.com/facebook/react) and create
your branch from `main`.
  2. Run `yarn` in the repository root.
3. If you've fixed a bug or added code that should be tested, add tests!
4. Ensure the test suite passes (`yarn test`). Tip: `yarn test --watch
TestName` is helpful in development.
5. Run `yarn test --prod` to test in the production environment. It
supports the same options as `yarn test`.
6. If you need a debugger, run `yarn test --debug --watch TestName`,
open `chrome://inspect`, and press ""Inspect"".
7. Format your code with
[prettier](https://github.com/prettier/prettier) (`yarn prettier`).
8. Make sure your code lints (`yarn lint`). Tip: `yarn linc` to only
check changed files.
  9. Run the [Flow](https://flowtype.org/) type checks (`yarn flow`).
  10. If you haven't already, complete the CLA.

Learn more about contributing:
https://reactjs.org/docs/how-to-contribute.html
-->

## Summary

This PR:

- Updates Rollup from 2.x to latest 3.x, and updates associated plugins
- Updates deprecated / altered config settings in the Rollup plugin
pipeline
- Fixes some file extension and import issues related to use of ESM in
`react-dom-webpack-server`
- Removes a now-obsolete `strip-unused-imports` Rollup plugin
- <s>Fixes an _existing_ bug with the Rollup 2.x plugin pipeline on
`main` that was causing parts of `DOMProperty.js` to get left out of the
`react-dom-webpack-server` JS bundles, by adding a new plugin to tell
Rollup to treat that file as if it as side effects</s>

This PR should be functionally identical to the other existing ""Rollup 3
upgrade"" PR at #26078 . I'm filing this as a near-duplicate because I'm
ready to push this change through ASAP so that I can follow it up with a
PR that adds sourcemap support, that PR's artifact diffing seems like
it's possibly stuck and I want to compare the build results, and I've
got this set up against latest `main`.

<!--
Explain the **motivation** for making this change. What existing problem
does the pull request solve?
-->

This gets React's build setup updated to the latest Rollup version,
which is generally a good practice, but also ensures that any further
Rollup config tweaks can be done using the current Rollup docs as a
reference.

## How did you test this change?

<!--
Demonstrate the code is solid. Example: The exact commands you ran and
their output, screenshots / videos if the pull request changes the user
interface.
How exactly did you verify that your PR solves the issue you wanted to
solve?
  If you leave this empty, your PR will very likely be closed.
-->

- Made builds from the latest `main`
- Updated Rollup package versions and cross-compared the changes I
needed to make locally to get successful builds vs #26078
- Diffed the output folders between `main` and this PR, and confirmed
that the bundle contents are identical (with the exception of version
strings and the `react-dom-webpack-server` bundle fix re-adding missing
`DOMProperty.js` content)",Mark Erikson,2023-03-24T18:08:41Z
0ee5e482a2ef03b332ca5a6df93c839aa95e584a,"Optional computed member expressions are not supported (add validation) 

We don't propagate the `optional` flag through to codegen, so let's error on 
this for now",Joe Savona,2023-03-23T16:01:21Z
ef83c02d3cbd9736132a420259103067da93283a,"[hir][typer] infer polymorphic types from PropertyLoad and PropertyCall 

--- 

Expand Hindley Milner type inference to infer dependent types. 

Say `t` is a typevar and `t'` is some type (a built-in type, phi node, or 
another typevar). 

Our type equations are as follows (please edit/correct notation 😅) 

- type substitution: `t = t'`, 

- ~~dependent~~ polymorphic property load: `t = t'.prop` 

- polymorphic function call `t = fnCall{returnType}` 

- ~~dependent property call: `t = t'.prop` (only if t'.prop is a function 
type)~~ 

- ~~dependent return type: `t = t'.[[returntype]]`~~",Mofei Zhang,2023-03-23T19:08:19Z
447f401f32594087e9fe312021ef04d2479f651c,"[be][tests] Remove all hir-tests (cleanup for ObjectShape stack) 

--- 

+10 −1,698 lines [[insert impacc macro]] 

The ObjectShape stacks (#1350, #1358) used these tests to record changes in 
inferred types (and associated ObjectShapes), reference effects, and mutable 
ranges. 

Now that those PRs have landed, we can delete these tests. They are somewhat 
fragile (changing anytime HIR / printHIR is changed) and easily cause 
rebase/merge conflicts.",Mofei Zhang,2023-03-23T19:08:18Z
c3589a9565a766389410072ca2737f42d407fbb6,"[hir] infer reference effects for property call 

--- 

This PR does not add inference for normal `CallExpression`s, since built-in 
functions for `Array` and `Object` are usually only valid if called with a 
correctly-typed `this`. If we want codegen to preserve source code semantics, 
Forget should only add inferred types it is confident about. 

This PR also adds `returnEffect` to FunctionSignature. `returnEffect = Store` if 
this function is known to always return a captured value from `receiver` or 
`args`.",Mofei Zhang,2023-03-23T19:08:18Z
76e6eff110688b9a8cdbe23956ca6cc24dd60cdb,"[hir][typer] infer polymorphic types from PropertyLoad and PropertyCall 

--- 

Expand Hindley Milner type inference to infer dependent types. 

Say `t` is a typevar and `t'` is some type (a built-in type, phi node, or 
another typevar). 

Our type equations are as follows (please edit/correct notation 😅) 

- type substitution: `t = t'`, 

- ~~dependent~~ polymorphic property load: `t = t'.prop` 

- polymorphic function call `t = fnCall{returnType}` 

- ~~dependent property call: `t = t'.prop` (only if t'.prop is a function 
type)~~ 

- ~~dependent return type: `t = t'.[[returntype]]`~~",Mofei Zhang,2023-03-23T19:08:17Z
9507493ee941ebd21641a845099160b9a9764e00,"Allow accessing properties of globals in switch test values 

We limit the types of expressions allowed as switch case test values because we 
our HIR doesn't yet preserve order-of-evaluation for switch test values (we 
model them as being evaluated prior to entering the switch, as opposed to 
lazily, when the case is reached). One common pattern internally is test case 
values that are properties of a global, eg you have some bag of enum values and 
are comparing against that: 

```javascript 

// at module scope, or imported from another module: 

const OPTIONS = {FOO: 'foo'}; 

// in a component 

switch (value) { 

case OPTIONS.FOO: { ... } 

} 

``` 

This PR allows this specific case, ie member expressions where the innermost 
object is a global identifier.",Joe Savona,2023-03-22T21:36:50Z
7d4373031930622ede219de532cc7ad8fe2479ec,"[be] Remove stale global handling code 

I forgot to remove this when i made globals explicit.",Joe Savona,2023-03-22T21:36:49Z
14c03b897f49fb29c9e6ea6cf605be2744fa44e2,"Consolidate {Property,Computed}Call into MethodCall 

Now that we model the method resolution via a PropertyLoad or ComputedLoad, we 
don't need to distinguish between PropertyCall and ComputedCall. These two call 
variants are now combined into a single MethodCall variant.",Joe Savona,2023-03-22T21:36:48Z
5f1bebbeaeff4985b27173f6807c77aedc60b40e,"ComputedCall modeled as ComputedLoad + Call for order-of-evaluation semantics 

This is the version of @mofeiZ's change for PropertyLoad, but made to work on 
ComputedCall. We force the method to be evaluated in the same scope as the call 
in InferReactiveScopeVariables.",Joe Savona,2023-03-22T21:36:48Z
8ef22a2a90206eed7c67b5b78be39b4e542b3fff,"[hir] todo tests for lambda capture 

--- 

(I'm not sure if these are already known issues. I found them while playing 
around with lambda captures. They are also reproducible on main / stable) 

I have some limited understanding of lambda captures after reading Sathya's 
posts -- please correct if/where this is incorrect 

``` 

function Component() { 

// instr1 

// instr2 

const func3 = function(...) { 

// func3instr1 

} 

} 

``` 

We currently determine effects of captured references in `AnalyzeFunctions`, 
before InferReferenceEffects. 

- i.e. for some function 

1. dependencies of all functions (func3.deps) 

2. prefix traversal of all instructions (e.g. instr1, instr2, func3.deps, 
func3instr1, ...) 

- is this just an implementation decision? i.e. what is stopping us from postfix 
traversal in InferReferenceEffects (e.g. instr1, instr2, func3instr1, 
func3.deps) 

As such, for each captured reference, `AnalyzeFunctions` needs to assign a 
reference effect. We currently check `MutableRange`, which seems to miss a few 
cases 

- We do not model assignments to primitives correctly, since primitives do not 
have a mutable range. 

- We're not able to model captured (but not mutated) values correctly. 

Would it be possible to consolidate `AnalyzeFunctions` into 
InferReferenceEffects, using some post-order traversal (iterating over a 
function's instructions to collect its dependencies + associated capture 
effects)? I definitely don't understand lambdas completely, so please tell me 
what I'm missing",Mofei Zhang,2023-03-22T19:58:07Z
501fbd8ed8f036c6e0ec29290a391c5a3b375b5f,"[hir] infer reference effects for property call 

--- 

This PR does not add inference for normal `CallExpression`s, since built-in 
functions for `Array` and `Object` are usually only valid if called with a 
correctly-typed `this`. If we want codegen to preserve source code semantics, 
Forget should only add inferred types it is confident about. 

This PR also adds `returnEffect` to FunctionSignature. `returnEffect = Store` if 
this function is known to always return a captured value from `receiver` or 
`args`.",Mofei Zhang,2023-03-22T19:58:06Z
241101c08a0821ec700ac9470854bfa9a193cda4,"[builtins] Fix effects: capture -> read, store -> mutate 

--- 

I didn't properly understand Capture and Store effects previously, just 
correcting those mistakes! 

These functions are all synchronously mutative, so they should use Read / 
Mutate, not Capture + Store",Mofei Zhang,2023-03-22T19:50:40Z
a7191d4e3b67f6b16644d52cb18cb6bc7a4518d8,"[hir][typer] infer polymorphic types from PropertyLoad and PropertyCall 

--- 

Expand Hindley Milner type inference to infer dependent types. 

Say `t` is a typevar and `t'` is some type (a built-in type, phi node, or 
another typevar). 

Our type equations are as follows (please edit/correct notation 😅) 

- type substitution: `t = t'`, 

- ~~dependent~~ polymorphic property load: `t = t'.prop` 

- polymorphic function call `t = fnCall{returnType}` 

- ~~dependent property call: `t = t'.prop` (only if t'.prop is a function 
type)~~ 

- ~~dependent return type: `t = t'.[[returntype]]`~~",Mofei Zhang,2023-03-22T19:50:40Z
9c54b29b44d24f8f8090da9c7ebf569747a444df,"Remove ReactFabricPublicInstance and used definition from ReactNativePrivateInterface (#26437)

## Summary

Now that React Native owns the definition for public instances in Fabric
and ReactNativePrivateInterface provides the methods to create instances
and access private fields (see
https://github.com/facebook/react-native/pull/36570), we can remove the
definitions from React.

After this PR, React Native public instances will be opaque types for
React and it will only handle their creation but not their definition.
This will make RN similar to DOM in how public instances are handled.

This is a new version of #26418 which was closed without merging.

## How did you test this change?

* Existing tests.
* Manually synced the changes in this PR to React Native and tested it
end to end in Meta's infra.",Rubén Norte,2023-03-22T17:54:36Z
f77099b6f1ccc658eff3467c6b9337e1b77ec854,"Remove layout effect warning on the server (#26395)

## Overview

This PR unfortunately removes the warning emitted when using layout
effects on the server:

> useLayoutEffect does nothing on the server, because its effect cannot
be encoded into the server renderer's output format. This will lead to a
mismatch between the initial, non-hydrated UI and the intended UI. To
avoid this, useLayoutEffect should only be used in components that
render exclusively on the client. See
https://reactjs.org/link/uselayouteffect-ssr for common fixes.

## Why this warning exists
The new docs explain this really well. Adding a screenshot because as
part of this change, we'll be removing these docs.

<img width=""1562"" alt=""Screenshot 2023-03-15 at 10 56 17 AM""
src=""https://user-images.githubusercontent.com/2440089/225349148-f0e57c3f-95f5-4f2e-9178-d9b9b221c28d.png"">

## Why are we changing it

In practice, users are not just ignoring this warning, but creating
hooks to bypass this warning by switching the useLayoutEffect hook on
the server instead of fixing it. This battle seems to be lost, so let's
remove the warning so at least users don't need to use the indirection
hook any more. In practice, if it's an issue, you should see the
problems like flashing the wrong content on first load in development.",Ricky,2023-03-22T17:33:48Z
51a7c45f8799cab903693fcfdd305ce84ba15273,"Bugfix: SuspenseList incorrectly forces a fallback (#26453)

Fixes a bug in SuspenseList that @kassens found when deploying React to
Meta. In some scenarios, SuspenseList would force the fallback of a
deeply nested Suspense boundary into fallback mode, which should never
happen under any circumstances — SuspenseList should only affect the
nearest descendent Suspense boundaries, without going deeper.

The cause was that the internal ForceSuspenseFallback context flag was
not being properly reset when it reached the nearest Suspense boundary.
It should only be propagated shallowly.

We didn't discover this earlier because the scenario where it happens is
not that common. To trigger the bug, you need to insert a new Suspense
boundary into an already-mounted row of the list. But often when a new
Suspense boundary is rendered, it suspends and shows a fallback, anyway,
because its content hasn't loaded yet.

Another reason we didn't discover this earlier is because there was
another bug that was accidentally masking it, which was fixed by #25922.
When that fix landed, it revealed this bug.

The SuspenseList implementation is complicated but I'm not too concerned
with the current messiness. It's an experimental API, and we intend to
release it soon, but there are some known flaws and missing features
that we need to address first regardless. We'll likely end up rewriting
most of it.

Co-authored-by: Jan Kassens <jkassens@meta.com>",Andrew Clark,2023-03-22T17:33:02Z
afb3d51dc6310f0dbeffdd303eb3c6895e6f7db0,"Fix enableClientRenderFallbackOnTextMismatch flag (#26457)

With this flag off, we don't throw and therefore don't patch up the tree
when suppression is off.

Haven't tested.

---------

Co-authored-by: Rick Hanlon <rickhanlonii@fb.com>",Sebastian Markbåge,2023-03-22T17:12:41Z
8e17bfd144f1794398b2cb37ccfbd2cfcb844566,"Make InternalInstanceHandle type opaque in ReactNativeTypes (#26461)

## Summary

This type was defined as `mixed` to avoid bringing the whole definition
from React to React Native, but its definition is visible to RN. This
type should be opaque to RN, so this makes it explicit.

## How did you test this change?

Applied the same changes in the React Native repository and could use
the type without issues.",Rubén Norte,2023-03-22T15:39:52Z
8bdf162bcc3f66d19c1fc8fe7f34de452cfbfe5e,"React DevTools 4.27.2 -> 4.27.3 (#26459)

bump version",Mengdi Chen,2023-03-22T15:20:10Z
b93b4f07454298e99012201a5ecdd195a41baa50,"Should not throw for children of iframe or object (#26458)

Still needs a regression test to test this for the future.",Sebastian Markbåge,2023-03-22T12:56:20Z
c0b34bc5fb67fd689383b07ef9d8378814348cd5,"chore: update links of docs and api (#26455)

Update new links of docs and api  for react package.
> [Documentation](https://react.dev/)
> [API](https://react.dev/reference/react)",Leedom,2023-03-22T11:56:18Z
56f7a90e68489d457ba37f7b2819e7b201fc37c9,"chore: update new docs links for react-dom (#26456)

Update new documentation links in react-dom's readme.
> [react-dom](https://react.dev/reference/react-dom)
> [react-dom/client](https://react.dev/reference/react-dom/client)
> [react-dom/server](https://react.dev/reference/react-dom/server)",Leedom,2023-03-22T11:55:06Z
bd5e32309dc78ada4f805c735d63bdf0e3b3427f,"Small Flow upgrade to 0.202.0 (#26435)

Easy upgrade.

`exact_by_default=true` is now the default, so we can remove it.",Jan Kassens,2023-03-22T11:52:13Z
ffb6733eefc23e62c1fb94ce7fc442f87255ebd7,"fix docs link for useSyncExternalStore (#26452)

## Summary

Update readme to new documentation links to
[`React.useSyncExternalStore`](https://react.dev/reference/react/useSyncExternalStore

## How did you test this change?

This is just a documentation change, so we don't need to test it

Co-authored-by: 田源 <tianyuan@eol.cn>",Valor(华洛),2023-03-22T01:39:05Z
01a6502baa9430e84b45d45989915f85aae4a1d3,"[hir] represent PropertyCall as receiver + PropertyLoad 

How Forget currently lowers PropertyCall: 

```js 

// source: [[ calleeExpr ]].propertyName( [[ argExpr0 ]]) 

$0 = [[ calleeExpr ]] 

$1 = [[ argExpr0 ]] 

$2 = PropertyCall callee=$0 property=""propertyName"" args=[$1] 

``` 

This PR changes the lowering: 

```js 

// source: [[ calleeExpr ]].propertyName( [[ argExpr0 ]]) 

$0 = [[ calleeExpr ]] 

$1 = PropertyLoad $0 ""propertyName"" 

$2 = [[ argExpr0 ]] 

$3 = PropertyCall callee=$0 fn=$1 args=[$2] 

``` 

From my understanding, `PropertyCall` needs the receiver to properly model JS 
semantics which is something like `resolvedFn.apply(resolvedCallee, arg0, arg1, 
...)`. This is additionally useful for: 

- Fine-grained mutability / alias analysis. The property call is technically a 
read of the resolved function, and a mutate of the callee. 

- Dependency tracking. While we could special case PropertyCall, this 
representation would correctly add both callee and callee.propertyName as 
dependencies for PropertyCall. 

e.g. 

```js 

let x = []; 

mutate(x); 

useFreeze(x); 

let y = {}; 

y.a = x.bar(); 

return y; 

```",Mofei Zhang,2023-03-21T18:57:12Z
6ce4cd089842f9f96068e362503c469aaf727f46,"[rhir] Revert logic that dedupes inlined temporaries 

Reverts #1199, which was added before we properly supported destructuring 
assignment. 

Next PR (changes to PropertyCall in #1384) will lower two references to the same 
named identifier (the property call receiver)",Mofei Zhang,2023-03-21T18:57:12Z
ab1d11a446e184ffdcae4b762c51a477511955e0,[hir] remove constant propagation for ComputedCall,Mofei Zhang,2023-03-21T18:57:11Z
ec345ca538704b25c66879025528e3b0dd1f96a2,"[wip][typer] Infer Array instance properties 

--- 

TODO: add inference for TypedFunction to `InferReferenceEffects`",Mofei Zhang,2023-03-21T18:57:11Z
ef34ca6cb044bca24890464e52a2e04b1984ba1b,"Model other assignment variants as values 

The previous PR only updated simple assignment expressions (where the lvalue is 
an identifier), this PR extends the same idea to all assignment variants. Note 
that there is one case that doesn't work yet, which is complex destructuring 
assignment as a value: 

```javascript 

let x = makeObject(); 

x.foo(([[x]] = makeObject())); 

``` 

What happens here is that we lower the destructuring to a series of steps: 

``` 

tmp1: Destructure Const [ tmp0 ]  = makeObject(); 

tmp2: Destructure Reassign [ x ] = tmp0; 

PropertyCall x, 'foo', [ tmp1 ] 

``` 

Thankfully we can detect this case: if we have a const/let declaration with an 
lvalue, that's invalid. See the new error test case which shows we correctly 
detect & reject this case for now.",Joe Savona,2023-03-21T17:01:09Z
bf1db812a8c1131c21ebe64643e6f4298a8a9295,"Model assignment as value 

This PR subtly changes how we represent assignment expressions in order to 
accurately model them _as expressions_. Specifically, the result of lowering an 
assignment is now the temporary created for the assignment's lvalue. This allows 
us to restore the assignment as a value (expression) during codegen. Note how 
this fixes a bug and cleans up some output.",Joe Savona,2023-03-21T17:01:08Z
f4c4dcb1b381e2772b21474d0f791197cc7f92e8,"Instruction-specific propagation to account for assignment-as-value 

Updates ConstantPropagation so that each instruction is responsible for whether 
to replace its `.value` with the resolved constant value (if found). 
Specifically, for `StoreLocal` we don't want to replace the value — we want to 
keep the assignment — but we do want to propagate the _result_ of the assignment 
downstream. This more accurately models the semantics of assignment expressions, 
and helps with subsequent PRs.",Joe Savona,2023-03-21T17:01:07Z
0018cf2246998218b3399ec1d422f9cd53bf1312,"Add REVISION file to react-fbsource-import (#26448)

For DiffTrain to fbsource, we need REVISION file in compiled-rn folder",Samuel Susla,2023-03-21T16:18:20Z
12a1d140e366aa8d95338e4412117f16da79a078,"Don't prerender siblings of suspended component  (#26380)

Today if something suspends, React will continue rendering the siblings
of that component.

Our original rationale for prerendering the siblings of a suspended
component was to initiate any lazy fetches that they might contain. This
was when we were more bullish about lazy fetching being a good idea some
of the time (when combined with prefetching), as opposed to our latest
thinking, which is that it's almost always a bad idea.

Another rationale for the original behavior was that the render was I/O
bound, anyway, so we might as do some extra work in the meantime. But
this was before we had the concept of instant loading states: when
navigating to a new screen, it's better to show a loading state as soon
as you can (often a skeleton UI), rather than delay the transition.
(There are still cases where we block the render, when a suitable
loading state is not available; it's just not _all_ cases where
something suspends.) So the biggest issue with our existing
implementation is that the prerendering of the siblings happens within
the same render pass as the one that suspended — _before_ the loading
state appears.

What we should do instead is immediately unwind the stack as soon as
something suspends, to unblock the loading state.

If we want to preserve the ability to prerender the siblings, what we
could do is schedule special render pass immediately after the fallback
is displayed. This is likely what we'll do in the future. However, in
the new implementation of `use`, there's another reason we don't
prerender siblings: so we can preserve the state of the stack when
something suspends, and resume where we left of when the promise
resolves without replaying the parents. The only way to do this
currently is to suspend the entire work loop. Fiber does not currently
support rendering multiple siblings in ""parallel"". Once you move onto
the next sibling, the stack of the previous sibling is discarded and
cannot be restored. We do plan to implement this feature, but it will
require a not-insignificant refactor.

Given that lazy data fetching is already bad for performance, the best
trade off for now seems to be to disable prerendering of siblings. This
gives us the best performance characteristics when you're following best
practices (i.e. hoist data fetches to Server Components or route
loaders), at the expense of making an already bad pattern a bit worse.

Later, when we implement resumable context stacks, we can reenable
sibling prerendering. Though even then the use case will mostly be to
prerender the CPU-bound work, not lazy fetches.",Andrew Clark,2023-03-21T14:24:56Z
63450d576843f6ef58b525e50529a1e442eea2c4,[test] Update test snapshot,Sathya Gunasekaran,2023-03-21T14:15:01Z
77ba1618a528787baaa8e007fadaff93a86fb675,"Bugfix: Remove extra render pass when reverting to client render (#26445)

(This was reviewed and approved as part of #26380; I'm extracting it
into its own PR so that it can bisected later if it causes an issue.)

I noticed while working on a PR that when an error happens during
hydration, and we revert to client rendering, React actually does _two_
additional render passes instead of just one. We didn't notice it
earlier because none of our tests happened to assert on how many renders
it took to recover, only on the final output.

It's possible this extra render pass had other consequences that I'm not
aware of, like messing with some assumption in the recoverable errors
logic.

This adds a test to demonstrate the issue. (One problem is that we don't
have much test coverage of this scenario in the first place, which
likely would have caught this earlier.)",Andrew Clark,2023-03-21T02:07:53Z
520f7f3ed4d01e9e50a73d7d04ff138e3c71ac86,"Refactor ReactDOMComponent to use flatter property operations (#26433)

This is in line with the refactor I already did on Fizz earlier and
brings Fiber up to a similar structure.

We end up with a lot of extra checks due the extra abstractions we use
to check the various properties. This uses a flatter and more inline
model which makes it easier to see what each property does. The tradeoff
is that a change might need changes in more places.

The general structure is that there's a switch for tag first, then a
switch for each attribute special case, then a switch for the value. So
it's easy to follow where each scenario will end up and there shouldn't
be any unnecessary code executed along the way.

My goal is to eventually get rid of the meta-programming in DOMProperty
and CSSProperty but I'm leaving that in for now - in line with Fizz.

My next step is moving around things a bit in the diff/commit phases.
This is the first step to more refactors for perf and size, but also
because I'm adding more special cases so I need to have a flatter
structure that I can reason about for those special cases.",Sebastian Markbåge,2023-03-21T00:56:14Z
9b5ff25b3bcdd3a4433751ffda39eca060d06585,"[Babel] Desugar ArrowFunctionExpression 

Rewrite ArrowFunctionExpression to FunctionDeclaration and compile it. This lets 
us reuse all the export gating logic, rather than writing separate, specific 
logic for ArrowFunctionExpression.",Sathya Gunasekaran,2023-03-20T17:42:58Z
ff571d8d85adf6f26018686a9bd4a4c651f6430c,[Babel] Refactor compilation checks into a separate function,Sathya Gunasekaran,2023-03-20T17:42:57Z
93b79e4aa048677094a72d799ef2480761424303,"[Babel] Refactor visitor to separate function 

This lets us extend to ArrowFunctionExpression",Sathya Gunasekaran,2023-03-20T17:42:56Z
3605199646718806a8daa9d537827696238e2a18,"[Babel] Refactor gating test 

Move to separate function",Sathya Gunasekaran,2023-03-20T17:42:56Z
3e84c870f60da18222ff6faceefbacd31c58138b,"Helper for lowering args 

Cleans up duplicated code for processing call/constructor arguments. As a side 
benefit, we now support spread elements for constructor arguments (and if we 
want to change how we represent that, we can do it in one place).",Joe Savona,2023-03-20T19:55:14Z
0131d0cff40d4054ac72c857d3a13c5173c46e0a,"Check if suspensey instance resolves in immediate task (#26427)

When rendering a suspensey resource that we haven't seen before, it may
have loaded in the background while we were rendering. We should yield
to the main thread to see if the load event fires in an immediate task.

For example, if the resource for a link element has already loaded, its
load event will fire in a task right after React yields to the main
thread. Because the continuation task is not scheduled until right
before React yields, the load event will ping React before it resumes.

If this happens, we can resume rendering without showing a fallback.

I don't think this matters much for images, because the `completed`
property tells us whether the image has loaded, and during a non-urgent
render, we never block the main thread for more than 5ms at a time (for
now — we might increase this in the future). It matters more for
stylesheets because the only way to check if it has loaded is by
listening for the load event.

This is essentially the same trick that `use` does for userspace
promises, but a bit simpler because we don't need to replay the host
component's begin phase; the work-in-progress fiber already completed,
so we can just continue onto the next sibling without any additional
work.

As part of this change, I split the `shouldSuspendCommit` host config
method into separate `maySuspendCommit` and `preloadInstance` methods.
Previously `shouldSuspendCommit` was used for both.

This raised a question of whether we should preload resources during a
synchronous render. My initial instinct was that we shouldn't, because
we're going to synchronously block the main thread until the resource is
inserted into the DOM, anyway. But I wonder if the browser is able to
initiate the preload even while the main thread is blocked. It's
probably a micro-optimization either way because most resources will be
loaded during transitions, not urgent renders.",Andrew Clark,2023-03-20T16:35:10Z
3554c8852fe209ad02380ebd24d32f56d6399906,"Clean interface for public instances between React and React Native (#26416)

## Summary

We are going to move the definition of public instances from React to
React Native to have them together with the native methods in Fabric
that they invoke. This will allow us to have a better type safety
between them and iterate faster on the implementation of this proposal:
https://github.com/react-native-community/discussions-and-proposals/pull/607

The interface between React and React Native would look like this after
this change and a following PR (#26418):

React → React Native:
```javascript
ReactNativePrivateInterface.createPublicInstance // to provide via refs
ReactNativePrivateInterface.getNodeFromPublicInstance // for DevTools, commands, etc.
ReactNativePrivateInterface.getNativeTagFromPublicInstance // to implement `findNodeHandle`
```

React Native → React (ReactFabric):
```javascript
ReactFabric.getNodeFromInternalInstanceHandle // to get most recent node to call into native
ReactFabric.getPublicInstanceFromInternalInstanceHandle // to get public instances from results from native
```

## How did you test this change?

Flow
Existing unit tests",Rubén Norte,2023-03-20T13:35:18Z
c57b90f50d3b7d643e2f8ae16cf22ae1861bc19e,[DiffTrain] Add artifacts for React Native to compiled (#26204),Samuel Susla,2023-03-20T11:23:55Z
842bd787a55df9a93c4c6e0f9b003f100c564b5e,"Fix sizebot not working due to missing auth token (#26423)

Sizebot works by fetching the base artifacts from CI. CircleCI recently
updated this endpoint to require an auth token. This is a problem for PR
branches, where sizebot runs, because we don't want to leak the token to
arbitrary code written by an outside contributor.

This only affects PR branches. CI workflows that run on the main branch
are allowed to access environment variables, because only those with
push access can land code in main.

As a temporary workaround, we'll fetch the assets from a mirror,
react-builds.vercel.app. This is the same app that hosts the sizebot
diff previews.

Need to figure out a longer term solution. Perhaps by converting sizebot
into a proper GitHub app.",Andrew Clark,2023-03-18T20:22:20Z
ff8868e8d151b30d10783cd7b6f3af63a187429e,"Fix self-closing jsx element codegen 

We were never emitting self-closing jsx elements because children were never 
null, we now set children to null if they were empty in the AST.",Joe Savona,2023-03-17T23:18:11Z
a7ac20973f52f09ad1f087c4bd54067e92e7bf3a,Support JsxMemberExpression,Joe Savona,2023-03-17T23:18:07Z
0c8f11e13fe545b9bfb240bee6a97382c45355d8,"[test][ssa] Add todo test for reassigning in rval 

From my understanding, `LeaveSSA` is not currently handling reassignment in 
rvals. 

Source code 

```js 

let x = foo(); 

x(x = bar()); 

``` 

Simplified HIR (from EnterSSA) 

``` 

[1]  $1 = StoreLocal Let x$0 = [[ foo() ]]       // x$1 = foo() 

[2] $2 = LoadLocal x$1                           // t0 = x$1 

[3] $4 = StoreLocal Reassign x$3 = [[ bar() ]]   // t1 = x$3 = bar() 

[4] $5 = CallExpression $2 ($4)                   // t0(t1) 

``` 

codegen: 

```js 

let x; 

x = foo(); 

x = bar(); 

x(x); 

```",mofeiZ,2023-03-18T00:08:20Z
f838ebb34e7915672b6f9b0c6ec39061ad2e4d54,"Simpler fix for missed reactivity bug 

Fixes the issue @mofeiZ identified, where mutations of an object via a 
propertyload were not tracking reactivity.",Joe Savona,2023-03-17T22:07:14Z
db281b3d9cd033cdc3d63e00fc9f3153c03aa70c,"Feature: Suspend commit without blocking render (#26398)

This adds a new capability for renderers (React DOM, React Native):
prevent a tree from being displayed until it is ready, showing a
fallback if necessary, but without blocking the React components from
being evaluated in the meantime.

A concrete example is CSS loading: React DOM can block a commit from
being applied until the stylesheet has loaded. This allows us to load
the CSS asynchronously, while also preventing a flash of unstyled
content. Images and fonts are some of the other use cases.

You can think of this as ""Suspense for the commit phase"". Traditional
Suspense, i.e. with `use`, blocking during the render phase: React
cannot proceed with rendering until the data is available. But in the
case of things like stylesheets, you don't need the CSS in order to
evaluate the component. It just needs to be loaded before the tree is
committed. Because React buffers its side effects and mutations, it can
do work in parallel while the stylesheets load in the background.

Like regular Suspense, a ""suspensey"" stylesheet or image will trigger
the nearest Suspense fallback if it hasn't loaded yet. For now, though,
we only do this for non-urgent updates, like with startTransition. If
you render a suspensey resource during an urgent update, it will revert
to today's behavior. (We may or may not add a way to suspend the commit
during an urgent update in the future.)

In this PR, I have implemented this capability in the reconciler via new
methods added to the host config. I've used our internal React ""no-op""
renderer to write tests that demonstrate the feature. I have not yet
implemented Suspensey CSS, images, etc in React DOM. @gnoff and I will
work on that in subsequent PRs.",Andrew Clark,2023-03-17T22:05:11Z
6310087f099b5b6d11a1e65cc27881411718c5fd,"[ci] Fix download_base_build_for_sizebot (#26422)

CircleCI now enforces passing a token when fetching artifacts. I'm also
deleting the old request-promise-json dependency because AFAIK we were
only using it to fetch json from circleci about the list of available
artifacts – which we can just do using node-fetch. Plus, the underlying
request package it uses has been deprecated since 2019.",lauren,2023-03-17T20:04:20Z
6854a3cf6d0e980f93a5e8ee1e546e3e31ac0869,"[difftrain] Fix broken workflow (#26421)

Seems like CircleCI now enforces passing a token when fetching
artifacts. I provisioned a new read-only CircleCI token just for
difftrain.

test plan: see https://github.com/facebook/react/actions/runs/4450679268",lauren,2023-03-17T19:16:55Z
55308554edb7a7d0c091c2ee4973ba5f4b06dfe8,[www] enable enableFilterEmptyStringAttributesDOM flag (#26410),Jan Kassens,2023-03-17T16:09:36Z
163d86e195d45da577d1c6619ea85da0be1ff3c0,"Updated comment message (#26158)

a simple grammar fix.",Ibrahim Amin,2023-03-17T14:48:44Z
108aed083e6f53c14d2b87cbd960fe3fb53fdb37,"Fix use of stale props in Fabric events (#26408)

## Summary

We had to revert the last React sync to React Native because we saw
issues with Responder events using stale event handlers instead of
recent versions.

I reviewed the merged PRs and realized the problem was in the refactor I
did in #26321. In that PR, we moved `currentProps` from `canonical`,
which is a singleton referenced by all versions of the same fiber, to
the fiber itself. This is causing the staleness we observed in events.

This PR does a partial revert of the refactor in #26321, bringing back
the `canonical` object but moving `publicInstance` to one of its fields,
instead of being the `canonical` object itself.

## How did you test this change?

Existing unit tests continue working (I didn't manage to get a repro
using the test renderer).
I manually tested this change in Meta infra and saw the problem was
fixed.",Rubén Norte,2023-03-17T11:27:49Z
8fa41ffa275cae4895b650b0c3b5e8acdbb5055d,"Don't ""fix up"" mismatched text content with suppressedHydrationWarning (#26391)

In concurrent mode we error if child nodes mismatches which triggers a
recreation of the whole hydration boundary. This ensures that we don't
replay the wrong thing, transform state or other security issues.

For text content, we respect `suppressedHydrationWarning` to allow for
things like `<div suppressedHydrationWarning>{timestamp}</div>` to
ignore the timestamp. This mode actually still patches up the text
content to be the client rendered content.

In principle we shouldn't have to do that because either value should be
ok, and arguably it's better not to trigger layout thrash after the
fact.

We do have a lot of code still to deal with patching up the tree because
that's what legacy mode does which is still in the code base. When we
delete legacy mode we would still be stuck with a lot of it just to deal
with this case.

Therefore I propose that we change the semantics to not patch up
hydration errors for text nodes. We already don't for attributes.",Sebastian Markbåge,2023-03-17T02:39:17Z
2148b4e8cad8669bd066900565c3630270d46c30,"[test][hir-lower] todo: lower property calls in evaluation order 

We currently are not lowering property calls in evaluation order. 

I wonder if the following lowering for a PropertyCall (with static or computed 
property) is semantically equivalent to source: 

1. eval + resolve receiver (store in t0) 

2. eval computed property (if present) 

3. resolve t0.property (binding the call to receiver and storing in t1) 

4. eval args 

5. eval t1(args) 

Although codegen might then generate something like this (if args are named 
temporaries) 

```js 

const tmp = receiver.property.bind(receiver); 

// lower args to temporaries 

tmp(arg1, arg2); 

```",mofeiZ,2023-03-16T19:48:54Z
87c803d1dad7e5fe8863436b0d2d18df3d462f21,"Fix a test case in ReactUpdates-test (#26399)

Just noticed the test isn't testing what it is meant to test properly.
The error `Warning: ReactDOM.render is no longer supported in React 18.
Use createRoot instead. Until you switch to the new API, your app will
behave as if it's running React 17. Learn more:
https://reactjs.org/link/switch-to-createroot` is thrown, the inner
`expect(error).toContain('Warning: Maximum update depth exceeded.');`
failed and threw jest error, and the outer `.toThrow('Maximum update
depth exceeded.')` happens to catch it and makes the test pass.",Tianyu Yao,2023-03-16T19:27:15Z
eaccf27c2ec86a90cc334d27172c70def9152d8d,"Revert ""Remove hydrate entry point from www builds"" (#26413)

Reverts facebook/react#26400.

Will take a look at the test failures before re-merging.",Jan Kassens,2023-03-16T18:01:20Z
480aa7785fdd97fc48ba4763eec73bb6c6e98602,"Remove hydrate entry point from www builds (#26400)

As I understand it this isn't used at Meta and it would let us get rid
of at least legacy mode hydration code when we remove legacy mode from
OSS builds.",Sebastian Markbåge,2023-03-16T15:39:34Z
9941cbacacb81c27a088b0bc2781b990bcbae1cd,Fix devtools tests after internal test changes (#26405),Ricky,2023-03-16T12:14:23Z
e4606c1e0ebbf397d0d4fe305e13dfb61a51e411,"Add missing `""react-dom/server.bun""` entry in package.json `""exports""` (#26402)

<!--
  Thanks for submitting a pull request!
We appreciate you spending the time to work on these changes. Please
provide enough information so that others can review your pull request.
The three fields below are mandatory.

Before submitting a pull request, please make sure the following is
done:

1. Fork [the repository](https://github.com/facebook/react) and create
your branch from `main`.
  2. Run `yarn` in the repository root.
3. If you've fixed a bug or added code that should be tested, add tests!
4. Ensure the test suite passes (`yarn test`). Tip: `yarn test --watch
TestName` is helpful in development.
5. Run `yarn test --prod` to test in the production environment. It
supports the same options as `yarn test`.
6. If you need a debugger, run `yarn test --debug --watch TestName`,
open `chrome://inspect`, and press ""Inspect"".
7. Format your code with
[prettier](https://github.com/prettier/prettier) (`yarn prettier`).
8. Make sure your code lints (`yarn lint`). Tip: `yarn linc` to only
check changed files.
  9. Run the [Flow](https://flowtype.org/) type checks (`yarn flow`).
  10. If you haven't already, complete the CLA.

Learn more about contributing:
https://reactjs.org/docs/how-to-contribute.html
-->

## Summary

<!--
Explain the **motivation** for making this change. What existing problem
does the pull request solve?
-->

`react-dom/server` in Bun (correctly) chooses `react-dom/server.bun`,
but `react-dom/server.bun` currently can't be imported because it is not
included in package.json `""exports""` (`react-dom/server` works,
`react-dom/server.bun` doesn't). Previously, I didn't think it was
necessary to do that, but it is too easy to accidentally run the browser
build in unit tests when importing `react-dom/server`

This also aligns behavior of package.json `""exports""` of
`react-dom/server.bun` with `react-dom/server.browser`,
`react-dom/server.node`, and the rest.

## How did you test this change?

Manually edited package.json in node_modules in a separate folder and
ran tests in Bun with `react-dom/server.bun` as the import specifier

<!--
Demonstrate the code is solid. Example: The exact commands you ran and
their output, screenshots / videos if the pull request changes the user
interface.
How exactly did you verify that your PR solves the issue you wanted to
solve?
  If you leave this empty, your PR will very likely be closed.
-->",Jarred Sumner,2023-03-16T02:09:49Z
05777ffb01515679d73541062a4ecc745af04a2f,"Setting transition pending flag shouldn't be part of a surrounding transition (#26243)

Fixes #26226. (Is this the right fix?)",Sophie Alpert,2023-03-16T01:10:53Z
21f6dba6a71f16b56a96182233c897468324cf99,"Sync from oss-experimental, not oss-stable (#26401)

## Overview

To test useEffectEvent, we need the experimental build of the lint
plugin.",Ricky,2023-03-16T01:01:07Z
c6d1181ba3344707186c19ce0fbaaf08d3fc2d9e,"Refactor DCE internal state into a class 

Tidying up the implementation to make the next PR's changes easier to follow.",Joe Savona,2023-03-15T20:20:26Z
99aa082be0a2a62fef8ed747348ddf85c5641902,"Remove unstable_flushControlled (#26397)

This API has been fully replaced by `flushSync`.",Jan Kassens,2023-03-15T20:13:54Z
f54f653277ce73169e9221e744979191140257e9,"DeclareLocal instruction 

Adds a `DeclareLocal` instruction which represents declaring a named variable 
without initializing it. Currently declarations without an initializer (`let x`) 
are transformed into a declaration to undefined (`let x = undefined`) which 
changes the semantics due to hoisting and TDZ (temporary dead zone). The correct 
thing is to represent declaration without initialization.",Joe Savona,2023-03-15T20:12:07Z
f88713bba5f935370ba398f123e1a504303e6036,Support spread elements in CallExpression args,Joe Savona,2023-03-16T00:13:50Z
957d8f1d44c72981d76eff9d8f9a5b2291ea5f98,Remove incomplete try/catch support,Joe Savona,2023-03-15T22:36:17Z
5bc2c807c39cb38fc9ae8acaa69fb96fd3d2b393,Support array pattern params,Joe Savona,2023-03-15T22:33:14Z
b69afe0506488d325ce4b2f6f4da91f7aa7f18cb,"More precise error for canonical reassignment in a value block 

These examples previously errored all the way in codegen, when we detected that 
a value block (eg a `while` test expression) was declaring a new variable. We 
now detect this in LeaveSSA and error. The actual fix is a bit tricky, we'd need 
to add a new declaration in the nearest block scope (or selectively not DCE the 
declaration if its reassigned in just this way).",Joe Savona,2023-03-15T16:39:23Z
9200ad027d91cc06dcd53167955b7e9ba04f5bd3,"Throw CompilerError (todo) for unused conditional/logical 

If a logical or conditional expression is unused, then a phi node isn't created 
for the identifier it assigns to. Then when we leave SSA form the two branches 
will assign to separate values, and we aren't sure which identifier to use as 
the lvalue of the resulting ReactiveInstruction (remember that 
logicals/conditionals decompose into control flow in HIR, but are a single 
compound instruction in ReactiveFunction). If the two sides don't assign to the 
same location, it could be because of a bug in the compiler or because the value 
wasn't used. Ideally we'd represent this explicitly, but for now i'm just making 
this a TODO since most logicals/conditionals should have their value used.",Joe Savona,2023-03-15T16:39:23Z
47cf4e578c2d8eef9c6cc27105ce560307999244,"Restore some guards in ReactFabricGlobalResponderHandler after refactor (#26394)

## Summary

I refactored this code in #26290 but forgot to add guards when the fiber
or the state node where null, and this is typed as `any` so Flow didn't
catch it.

This restores the same logic to guard against null.

## How did you test this change?

Existing tests.",Rubén Norte,2023-03-15T10:30:40Z
cfc1274e3be5a93a4c93f8fb87f2109993afe1dd,"Disable IE innerHTML workaround behind a flag (#26390)

We don't need this workaround for SVG anymore and we don't need to
workaround MSApp's security model since Windows 10.",Sebastian Markbåge,2023-03-15T03:27:04Z
7537df3d4e2e31cbaff3e96782f890523d13908f,"Support assignment expressions in value blocks 

Enables support for assignment expressions in value blocks (which includes in 
loop init/test/update blocks). This was pretty straightforward, the main changes 
are: 

* During PropagateScopeDependencies, we currently record scope reassignments 
based on `Identifier` object identity. In the case where a variable is 
reassigned in multiple control-flow paths of a value block, however, there can 
be multiple object identities. So we now de-dupe reassignments based on 
identifier id. 

* MergeOverlappingScopes now treats value blocks as regular blocks, allowing it 
to correctly merge scopes from the value with other scopes from the outer block. 

Otherwise this is mostly just lots of tests. Note that there is an outstanding 
todo, which is that we currently error for ternaries and logicals whose value is 
unused (eg `cond ? (x = 1) : null`). I'll address that in a follow-up.",Joe Savona,2023-03-15T03:02:05Z
a57f40d839bf055f910cc20d7e501a10df92db98,"Undo dependency injection of batching (#26389)

There's currently a giant cycle between the event system, through
react-dom-bindings, reconciler and then react-dom. We resolve this cycle
using dependency injection. However, this all ends up in the same
bundle. It can be reordered to resolve the cycles. If we avoid
side-effects and avoid reading from module exports during
initialization, this should be resolvable in a more optimal way by the
compiler.",Sebastian Markbåge,2023-03-15T01:40:43Z
d310d654a7c7aab6c8213da84ef36dfba82711b0,"Avoid meta programming to initialize functions in module scope  (#26388)

I'm trying to get rid of all meta programming in the module scope so
that closure can do a better job figuring out cyclic dependencies and
ability to reorder.

This is converting a lot of the patterns that assign functions
conditionally to using function declarations instead.

```
let fn;
if (__DEV__) {
  fn = function() {
    ...
  };
}
```
->
```
function fn() {
  if (__DEV__) {
    ...
  }
}
```",Sebastian Markbåge,2023-03-15T01:00:22Z
21aee59e454a875f872ca666d6eb2694425e52af,"Delete unused DOM files (#26387)

These used to be used by partial render.

ReactDOMDispatcher ended up not being used in this way.

Move shared DOM files to client. These are only used by client
abstractions now. They're inlined in the Fizz code so they're no longer
shared.",Sebastian Markbåge,2023-03-14T23:52:57Z
59cd1ca569c25d35c0aae013936c9941c81a251e,"LeaveSSA: consistently rename identifiers even for value block phis 

This PR clarifies the logic for adjust mutable ranges of phis and their operands 
during LeaveSSA. Previously we had logic in several places to determine 
whether/how to extend the ranges of each phi and its operands: this occurred 
while traversing reassignmentPhis (in 2+ places) and rewritePhis, as well as in 
rewritePlace(). 

This was kind of a band-aid to make things work, but the logic was imprecise. 
The actual rules are as follows: 

If there is a back-edge, or the phi id is unnamed, then were extend the ranges 
of the phi and its operands to min(starts) and max(ends). This ensures that the 
operands are computed as one unit, ie put into a single reactive scope. For 
loops this is necessary because...looping! For unnamed values this is necessary 
because of the way we collapse logical and ternary expressions back to a 
hierarchical ReactiveFunction — we need to make sure the final mutable range 
extends from the start of the final instruction up to the end of the 
logical/ternaries value blocks. 

Otherwise this is a phi where operands come from predecessors and are named. If 
the phi is mutated later, then we have to extend the end of each operand's range 
to account for the fact that they can be mutated later. Else, we leave the 
operands alone. 

Behavior doesn't change, but we consolidate all of the mutable range logic in 
one place.",Joe Savona,2023-03-14T22:24:38Z
56a3c18e565959f04e3ef3bc93f70259b5b674c2,"[Flight fixture] Remove redundant `use` (#26373)

Now that promises are renderable nodes, we can remove the `use` call
from the root of the Flight fixture.

Uncached promises will likely be accompanied by a warning when they are
rendered outside a transition. But this promise is the result of a
Flight response, so it's cached. And it's also a rendered as part of a
transition. So it's fine. Indeed, this is the canonical way to use this
feature.",Andrew Clark,2023-03-14T15:14:53Z
6bd53a5bdfe24d9a70819c4eba40b488e62900cd,"Remove FeatureFlags fork for `react-dom/unstable_testing` (#26383)

This doesn't need its own set of flags. We use things like `__PROFILE__`
in the regular feature flags file to fork for the `react-dom/profiling`
build so we can do the same here if needed but I don't think we actually
need to fork this anywhere as far as I can tell.",Sebastian Markbåge,2023-03-13T22:43:37Z
23e0ce02a61e57360b4eed57e4fdc38e43a2efbd,"Make JSX memoization optional (on by default) 

Makes JSX memoized by default again, but adds an option to disable memoization 
of JSX. Also adds a new test and fixtures directory to test the opt-in 
no-jsx-memoization behavior.",Joe Savona,2023-03-13T20:25:09Z
9465cb2100bedcb45cab56f6c45c4977bc68b3e4,"[hir] Move Types to a separate file 

--- 

Move types around in preparation for next PR #1335. No changes in impl, types, 
or functions.",Mofei Zhang,2023-03-13T18:52:15Z
b3086817d747dec142a2c04911bab48f6dc5d487,"[tests][hir-typer] Add hir-tests fixture 

--- 

Currently, we run type inference passes early in the pipeline and do not check 
inference output in any tests, test fixtures, or verifier passes. In fact, the 
only ways to view inferred types are (1) locally add a test fixture with`@only` 
and inspect console logs or (2) scroll to the relevant section on a playground 
example. 

However, inferred types and effects significantly affect the output of later 
passes (Alias / MutableRange analysis, InferReactiveIdentifiers, etc), and we 
have already found some bugs due to incorrect inference (e.g. #1274). 

This PR add the `typer-tests` fixture with the following goals 

1. Record relevant current compiler type + effect inference output. 

2. Have relatively stable output (with respect to changes in HIR and PrintHIR). 

- we try to achieve this by annotating the source code.",Mofei Zhang,2023-03-13T18:52:15Z
03f3e541ce1d5b472c80d430fda7581bdd74ee42,"[tests][hir-typer] Add hir-tests fixture 

--- 

Currently, we run type inference passes early in the pipeline and do not check 
inference output in any tests, test fixtures, or verifier passes. In fact, the 
only ways to view inferred types are (1) locally add a test fixture with`@only` 
and inspect console logs or (2) scroll to the relevant section on a playground 
example. 

However, inferred types and effects significantly affect the output of later 
passes (Alias / MutableRange analysis, InferReactiveIdentifiers, etc), and we 
have already found some bugs due to incorrect inference (e.g. #1274). 

This PR add the `typer-tests` fixture with the following goals 

1. Record relevant current compiler type + effect inference output. 

2. Have relatively stable output (with respect to changes in HIR and PrintHIR). 

- we try to achieve this by annotating the source code.",Mofei Zhang,2023-03-13T18:49:53Z
814a21c97b3356638f3dfc1d3aa515d5f6ef1e55,[prettier] Ignore flow files in incremental formatting,Mofei Zhang,2023-03-13T18:49:52Z
e90d058bee744708c56cc6b1ffa2ffe4aa17a39d,"[babel] Remove prettier from plugin 

I think we added this for easier debugging but isn't strictly needed. Remove 
since this was causing some issues internally.",Lauren Tan,2023-03-13T18:32:32Z
2788d0d8dd95ed57e2dbb148853fe69010e992fe,"Allow empty string to be passed to formAction (#26379)

We disallow empty strings for `href` and `src` since they're common
mistakes that end up loading the current page as a preload, image or
link. We also disallow it for `action`. You have to pass `null` which is
the same.

However, for `formAction` passing `null` is not the same as passing
empty string. Passing empty string overrides the form's action to be the
current page even if the form's action was set to something else.
There's no easy way to express the same thing `#` show up in the user
visible URLs and `?` clears the search params.

Since this is also not a common mistake, we can just allow this.",Sebastian Markbåge,2023-03-13T18:28:17Z
f828bad387f573c462d2a58afb38aea8bdbe9cb5,"Extracted definition and access to public instances to a separate module in Fabric (#26321)

## Summary

The current definition of `Instance` in Fabric has 2 fields:
- `node`: reference to the native node in the shadow tree.
- `canonical`: public instance provided to users via refs + some
internal fields needed by Fabric.

We're currently using `canonical` not only as the public instance, but
also to store internal properties that Fabric needs to access in
different parts of the codebase. Those properties are, in fact,
available through refs as well, which breaks encapsulation.

This PR splits that into 2 separate fields, leaving the definition of
instance as:
- `node`: reference to the native node in the shadow tree.
- `publicInstance`: public instance provided to users via refs.
- Rest of internal fields needed by Fabric at the instance level.

This also migrates all the current usages of `canonical` to use the
right property depending on the use case.

To improve encapsulation (and in preparation for the implementation of
this [proposal to bring some DOM APIs to public instances in React
Native](https://github.com/react-native-community/discussions-and-proposals/pull/607)),
this also **moves the creation of and the access to the public instance
to separate modules** (`ReactFabricPublicInstance` and
`ReactFabricPublicInstanceUtils`). In a following diff, that module will
be moved into the `react-native` repository and we'll access it through
`ReactNativePrivateInterface`.

## How did you test this change?

Existing unit tests.
Manually synced the PR in Meta infra and tested in Catalyst + the
integration with DevTools. Everything is working normally.",Rubén Norte,2023-03-13T13:25:42Z
cd20376f03212c91057c003bcb640ca9568e87e6,"Remove internal `act` from DevTools e2e test (#26376)

For various reasons some of the DevTools e2e tests uses our repo's
private internal version of `act`. It should really just be using the
public one.

This converts one of the usages, because it was causing CI to fail.",Andrew Clark,2023-03-12T16:58:58Z
131768166b60b3bc271b54a3f93f011f310519de,"Support Context as renderable node (#25641)

## Based on #25634

Like promises, this adds support for Context as a React node.

In this initial implementation, the context dependency is added to the
parent of child node. This allows the parent to re-reconcile its
children when the context updates, so that it can delete the old node if
the identity of the child has changed (i.e. if the key or type of an
element has changed). But it also means that the parent will replay its
entire begin phase. Ideally React would delete the old node and mount
the new node without reconciling all the children. I'll leave this for a
future optimization.",Andrew Clark,2023-03-11T22:34:31Z
d4f58c3b8123f1654ca1b06692c3165928bef8df,"Support Promise as a renderable node  (#25634)

Implements Promise as a valid React node types. The idea is that any
type that can be unwrapped with `use` should also be renderable.

When the reconciler encounters a Usable in a child position, it will
transparently unwrap the value before reconciling it. The value of the
inner value will determine the identity of the child during
reconciliation, not the Usable object that wraps around it.

Unlike `use`, the reconciler will recursively unwrap the value until it
reaches a non-Usable type, e.g. `Usable<Usable<Usable<T>>>` will resolve
to T.

In this initial commit, I've added support for Promises. I will do
Context in the [next
step](https://github.com/facebook/react/pull/25641).

Being able to render a promise as a child has several interesting
implications. The Server Components response format can use this feature
in its implementation — instead of wrapping references to client
components in `React.lazy`, it can just use a promise.

This also fulfills one of the requirements for async components on the
client, because an async component always returns a promise for a React
node. However, we will likely warn and/or lint against this for the time
being because there are major caveats if you re-render an async
component in response to user input. (Note: async components already
work in a Server Components environment — the caveats only apply to
running them in the browser.)

To suspend, React uses the same algorithm as `use`: by throwing an
exception to unwind the stack, then replaying the begin phase once the
promise resolves. It's a little weird to suspend during reconciliation,
however, `lazy` already does this so if there were any obvious bugs
related to that we likely would have already found them.

Still, the structure is a bit unfortunate. Ideally, we shouldn't need to
replay the entire begin phase of the parent fiber in order to reconcile
the children again. This would require a somewhat significant refactor,
because reconciliation happens deep within the begin phase, and
depending on the type of work, not always at the end. We should consider
as a future improvement.",Andrew Clark,2023-03-11T22:11:27Z
f411e8990ff2a6d5ea5e0813489f11747e518d7b,"Remote `.internal` override from untrusted URL tests (#26372)

Adding `.internal` to a test file prevents it from being tested in build
mode. The best practice is to instead gate the test based on whether the
feature is enabled.

Ideally we'd use the `@gate` pragma in these tests, but the `itRenders`
test helpers don't support that.",Andrew Clark,2023-03-11T20:46:16Z
63346148603675f5d03509969007b7937cfddff2,"Add disableLegacyContext test gates where needed (#26371)

The www builds include disableLegacyContext as a dynamic flag, so we
should be running the tests in that mode, too. Previously we were
overriding the flag during the test run. This strategy usually doesn't
work because the flags get compiled out in the final build, but we
happen to not test www in build mode, only source.

To get of this hacky override, I added a test gate to every test that
uses legacy context. When we eventually remove legacy context from the
codebase, this should make it slightly easier to find which tests are
affected. And removes one more hack from our hack-ridden test config.

Given that sometimes www has features enabled that aren't on in other
builds, we might want to consider testing its build artifacts in CI,
rather than just source. That would have forced this cleanup to happen
sooner. Currently we only test the public builds in CI.",Andrew Clark,2023-03-11T20:32:02Z
432ffc9d0ff2ade0174c76cc23614e0d76963fb1,"Convert more Scheduler.unstable_flushAll in tests to new test utils (#26369)

`Scheduler.unstable_flushAll` in existing tests doesn't work with
microtask. This PR converts most of the remaining
`Scheduler.unstable_flushAll()` calls to using internal test utilities
to unblock refactoring `ensureRootIsScheduled` with scheduling a
microtask.",Tianyu Yao,2023-03-11T01:56:13Z
774111855d25cfadd56e564a6fef20022989de74,"[Flight Fixture] Fix proxying with compression (#26368)

We're decompressing and then writing and recompressing in the proxy.
This causes it to stall if buffered because `.pipe()` doesn't force
flush automatically.",Sebastian Markbåge,2023-03-11T00:48:46Z
69fd78fe3783579dbea565987445e0646fafdd9f,"Update Float tests to check for specific errors (#26367)

I updated some of the Float tests that intentionally trigger an error to
assert on the specific error message, rather than swallow any errors
that may or may not happen.",Andrew Clark,2023-03-10T23:37:32Z
93c10dfa6b0848c12189b773b59c77d74cad2a1a,"flushSync: Exhaust queue even if something throws (#26366)

If something throws as a result of `flushSync`, and there's remaining
work left in the queue, React should keep working until all the work is
complete.

If multiple errors are thrown, React will combine them into an
AggregateError object and throw that. In environments where
AggregateError is not available, React will rethrow in an async task.
(All the evergreen runtimes support AggregateError.)

The scenario where this happens is relatively rare, because `flushSync`
will only throw if there's no error boundary to capture the error.",Andrew Clark,2023-03-10T22:21:34Z
a22bd995c5bee6f191bb3261ee721c2094344492,"[DevTools] prevent StyleX plugin from throwing when inspecting CSS (#26364)

## Summary

An error might happen when we try to read the CSS rules, but the
stylesheet does not allow so (often happens on production).

Before:
<img width=""713"" alt=""image""
src=""https://user-images.githubusercontent.com/1001890/224376546-024f7a32-d314-4dd1-9333-7e47d96a2b7c.png"">

After:

<img width=""504"" alt=""image""
src=""https://user-images.githubusercontent.com/1001890/224376426-964a33c4-0677-4a51-91c2-74074e4dde63.png"">


## How did you test this change?

Built a fb version and tested locally (see above screenshot)

---------

Co-authored-by: Hendrik Liebau <mail@hendrik-liebau.de>",Mengdi Chen,2023-03-10T20:43:05Z
be353d25153e8459013add4b00989784334538cb,"[Flight Reply] Add undefined and Iterable Support (#26365)

These were recently added to ReactClientValue and so needs to be
reflected in ReactServerValue too.",Sebastian Markbåge,2023-03-10T17:47:43Z
ef8bdbecb6dbb9743b895c2e867e5a5264dd6651,"[Flight Reply] Add Reply Encoding (#26360)

This adds `encodeReply` to the Flight Client and `decodeReply` to the
Flight Server.

Basically, it's a reverse Flight. It serializes values passed from the
client to the server. I call this a ""Reply"". The tradeoffs and
implementation details are a bit different so it requires its own
implementation but is basically a clone of the Flight Server/Client but
in reverse. Either through callServer or ServerContext.

The goal of this project is to provide the equivalent serialization as
passing props through RSC to client. Except React Elements and
Components and such. So that you can pass a value to the client and back
and it should have the same serialization constraints so when we add
features in one direction we should mostly add it in the other.

Browser support for streaming request bodies are currently very limited
in that only Chrome supports it. So this doesn't produce a
ReadableStream. Instead `encodeReply` produces either a JSON string or
FormData. It uses a JSON string if it's a simple enough payload. For
advanced features it uses FormData. This will also let the browser
stream things like File objects (even though they're not yet supported
since it follows the same rules as the other Flight).

On the server side, you can either consume this by blocking on
generating a FormData object or you can stream in the
`multipart/form-data`. Even if the client isn't streaming data, the
network does. On Node.js busboy seems to be the canonical library for
this, so I exposed a `decodeReplyFromBusboy` in the Node build. However,
if there's ever a web-standard way to stream form data, or if a library
wins in that space we can support it. We can also just build a multipart
parser that takes a ReadableStream built-in.

On the server, server references passed as arguments are loaded from
Node or Webpack just like the client or SSR does. This means that you
can create higher order functions on the client or server. This can be
tokenized when done from a server components but this is a security
implication as it might be tempting to think that these are not fungible
but you can swap one function for another on the client. So you have to
basically treat an incoming argument as insecure, even if it's a
function.

I'm not too happy with the naming parity:

Encode `server.renderToReadableStream` Decode: `client.createFromFetch`

Decode `client.encodeReply` Decode: `server.decodeReply`

This is mainly an implementation details of frameworks but it's annoying
nonetheless. This comes from that `renderToReadableStream` does do some
""rendering"" by unwrapping server components etc. The `create` part comes
from the parity with Fizz/Fiber where you `render` on the server and
`create` a root on the client.

Open to bike-shedding this some more.

---------

Co-authored-by: Josh Story <josh.c.story@gmail.com>",Sebastian Markbåge,2023-03-10T16:36:15Z
a8875eab7f78a453d22370d1061a8bb3cd672b9d,"Update more tests to not rely on sync queuing (#26358)

This fixes a handful of tests that were accidentally relying on React
synchronously queuing work in the Scheduler after a setState.

Usually this is because they use a lower level SchedulerMock method
instead of either `act` or one of the `waitFor` helpers. In some cases,
the solution is to switch to those APIs. In other cases, if we're
intentionally testing some lower level behavior, we might have to be a
bit more clever.

Co-authored-by: Tianyu Yao <skyyao@fb.com>",Andrew Clark,2023-03-10T16:06:28Z
d1ad984db1591b131d16739a24dee4ba44886a09,"[Flight] Add support for returning `undefined` from render (#26349)

## Summary

Adds support for returning `undefined` from Server Components.
Also fixes a bug where rendering an empty fragment would throw the same
error as returning undefined.

## How did you test this change?

- [x] test failed with same error message I got when returning undefined
from Server Components in a Next.js app
- [x] test passes after adding encoding for `undefined`",Sebastian Silbermann,2023-03-09T21:18:52Z
d376cf1e378bfab8dc2ec11dac992863eb79eaa0,"Memoize arrays/objects created with destructuring spread 

We were treating Destructuring as if it could never allocate and therefore 
didn't have to be memoized. That's only true if there are no rest spreads 
though. This PR teaches the compiler to treat rest spreads differently for 
scoping and memoization 

purposes, fixing the newly added test case and some existing bugs.",Joe Savona,2023-03-09T20:44:30Z
fcbfca69c91f61d599573766cd402834ac1f9b44,"More tests 

More tests, in particular demonstrating that we don't memoize destructured rest 
elements propery — yet! Follow-up fixes.",Joe Savona,2023-03-09T20:44:26Z
58a1cd872ebe86cc077816528f92a82cc141836c,"Be explicit about lvalues (to distinguish their memo level later) 

This is prep for #1345, which distinguishes different memoization levels per 
lvalue",Joe Savona,2023-03-09T20:44:22Z
9048f5923745ace73cc9210d4a4bb0bfdedb0d8d,"Prune scopes whose values dont escape 

Adds a new pass that uses escape analysis and React-specific heuristics to tune 
the amount of memoization applied. Specifically, the pass ensures that we only 
memoize: 

* Values which escape (are directly returned or transitively aliased by a 
returned value) 

* ...and that are not JSX elements 

* OR values which are _dependencies_ of scopes that produce an escaping value. 

The latter case is necessary to avoid breaking memoization of an escaping value 
bc a scope happened to have a non-escaping dependency. 

## Algorithm 

1. First we build up a graph, a mapping of IdentifierId to a node describing all 
the scopes and inputs involved in creating that identifier. Individual nodes are 
marked as definitely aliased, conditionally aliased, or unaliased: 

a. Arrays, objects, function calls all produce a new value and are always marked 
as aliased 

b. Conditional and logical expressions (and a few others) are conditinally 
aliased, depending on whether their result value is aliased. 

c. JSX is always unaliased (though its props children may be) 

2. The same pass which builds the graph also stores the set of returned 
identifiers 

3. We traverse the graph starting from the returned identifiers and mark 
reachable dependencies as escaping, based on the combination of the parent 
node's type and its children (eg a conditional node with an aliased dep promotes 
to aliased). 

4. Finally we prune scopes whose outputs weren't marked.",Joe Savona,2023-03-09T17:51:43Z
faa8eef0a89666dad5fb489162d1fe0a1b5836aa,[be] Fix remaining lints and enable lint in CI,Lauren Tan,2023-03-10T21:21:01Z
39d4b9365718932da29fa05ad8debb351b616498,"[Internal tests] Close MessageChannel port to prevent leak (#26357)

Node's MessageChannel implementation will leak if you don't explicitly
close the port. This updates the enqueueTask function we use in our
internal testing helpers to close the port once it's no longer needed.",Andrew Clark,2023-03-09T16:20:07Z
3706edb81c84ea01e68bfb477537ba9908e1bd70,"[Float][Fizz]: Don't preload nomodule scripts (#26353)

We attempt to preload scripts that we detect during Fizz rendering
however when `noModule={true}` we should not because it will force
modern browser to fetch scripts they will never execute

Hoisted script resources already don't preload because we just emit the
resource immediately. This change currently on affects the preloads for
scripts that aren't hoistable",Josh Story,2023-03-09T05:59:43Z
7813cfa52cf4d2d298e755699698f30199eaac5c,"Fix EliminateRedundantPhi for cascading eliminated phis 

This was the actual bug. When EliminateRedundantPhis eliminates a phi, it has to 
rewrite downstream usages of the phi id to the single operand id. We were 
correctly doing that in all but one place. When we iterate _downstream phis_, we 
were looking up the operands against the rewrite table, but not updating the phi 
operands themselves to the rewritten value. 

This fixes the bug, and incidentally fixes a test that has been broken for a 
while and nagging at me.",Joe Savona,2023-03-09T05:10:07Z
1fb0aed6688e57c12c40ea9ef961ae8a88fe56e2,"Fix mapInstructionOperands() visitor 

Found while debugging the previous issue: `mapInstructionOperands()` should not 
look at lvalues. The previous version was causing us to create extra phi nodes, 
which interestingly weren't the actual problem behind the ""SSA"" bug, but sure 
looked like it at first.",Joe Savona,2023-03-09T04:49:32Z
ff855b1d3495e6c671ff08f2188fea134d4d9672,"Repro case for product bug 

Simplified version of the example. As I eventually uncovered in #1342, the issue 
is cascading redundant phis not getting rewritten.",Joe Savona,2023-03-09T04:49:28Z
2b003a5cc6df77f745e1639404f912bd0077a39b,"Split out ServerReferenceMetadata into Id and Bound Arguments (#26351)

This is just moving some stuff around and renaming things.

This tuple is opaque to the Flight implementation and we should probably
encode it separately as a single string instead of a model object.

The term ""Metadata"" isn't the same as when used for ClientReferences so
it's not really the right term anyway.

I also made it optional since a bound function with no arguments bound
is technically different than a raw instance of that function (it's a
clone).

I also renamed the type ReactModel to ReactClientValue. This is the
generic serializable type for something that can pass through the
serializable boundary from server to client. There will be another one
for client to server.

I also filled in missing classes and ensure the serializable sub-types
are explicit. E.g. Array and Thenable.",Sebastian Markbåge,2023-03-09T04:45:55Z
6d4b0c61b37cd562cf209a4d5c81446ee3939ada,"Export ValueKind and Effect 

We need to be able to reference these to teach the compiler about custom hooks 
like Relay.",Joe Savona,2023-03-08T23:56:25Z
62cd5af08e2ac8b1d4691e75252487083cf7a4aa,"Codemod redundant async act scopes (#26350)

Prior to #26347, our internal `act` API (not the public API) behaved
differently depending on whether the scope function returned a promise
(i.e. was an async function), for historical reasons that no longer
apply. Now that this is fixed, I've codemodded all async act scopes that
don't contain an await to be sync.

No pressing motivation other than it looks nicer and the codemod was
easy. Might help avoid confusion for new contributors who see async act
scopes with nothing async inside and infer it must be like that for a
reason.",Andrew Clark,2023-03-08T21:40:23Z
037378202f1a99c79ed778a1555b0b2c32974a10,"Internal `act`: Call scope function after an async gap (#26347)

This adds an async gap to our internal implementation of `act` (the one
used by our repo, not the public API). Rather than call the provided
scope function synchronously when `act` is called, we call it in a
separate async task. This is an extra precaution to ensure that our
tests do not accidentally rely on work being queued synchronously,
because that is an implementation detail that we should be allowed to
change. We don't do this in the public version of `act`, though we maybe
should in the future, for the same rationale. That might be tricky,
though, because it could break existing tests.

This also fixes the issue where our internal `act` requires an async
function. You can pass it a regular function, too.",Andrew Clark,2023-03-08T21:25:12Z
d8e49f2af84c810457eb81ac7fe68fd0fdece859,"Use setTimeout to schedule work on the server in Edge environments (#26348)

We rely heavily on being able to batch rendering after multiple fetches
etc. have completed on the server. However, we only do this in the
Node.js build. Node.js `setImmediate` has the exact semantics we need.
To be after the current cycle of I/O so that we can collect after all
those I/O events already in the queue has been processed.

This doesn't exist in standard browsers, so we ended up not using it
there. We could've used `setTimeout` but that risks being throttled
which would severely negatively affect the performance so we just did it
synchronously there. We probably could just use the `scheduler` there.

Now we have a separate build for Edge where `setTimeout(..., 0)`
actually behaves like `setImmediate` which is what we want. So we can
just use that in that build.

@Jarred-Sumner not sure what you want for Bun.",Sebastian Markbåge,2023-03-08T20:34:29Z
83643778bd5805504c87cce90ca997d13bf528d1,"Internal test helpers: Use Node's MessageChannel to queue task (#26345)

To wait for the microtask queue to empty, our internal test helpers
schedule an arbitrary task using `setImmediate`. It doesn't matter what
kind of task it is, only that it's a separate task from the current one,
because by the time it fires, the microtasks for the current event will
have already been processed.

The issue with `setImmediate` is that Jest mocks it. Which can lead to
weird behavior.

I've changed it to instead use a message event, via the MessageChannel
implementation exposed by the `node:worker_threads` module.

We should consider doing this in the public implementation of `act`,
too.",Andrew Clark,2023-03-08T20:04:38Z
f985d6cdba078fc49b787c900f14dae8d4e379ee,PropertyDelete/ComputedDelete instructions,Joe Savona,2023-03-08T20:04:27Z
f36ab0e375b6223d4cc5852f649e93c1cb238bac,"Remove timers from ReactDOMSuspensePlaceholder tests (#26346)

Our internal `act` implementation flushes Jest's fake timer queue as a
way to force Suspense fallbacks to appear. So we should avoid using
timers in our internal tests.",Andrew Clark,2023-03-08T19:45:35Z
44d3807945700de8bb6bdbbf5c4d1ba513303747,"Move internalAct to internal-test-utils package (#26344)

This is not a public API. We only use it for our internal tests, the
ones in this repo. Let's move it to this private package. Practically
speaking this will also let us use async/await in the implementation.",Andrew Clark,2023-03-08T17:58:31Z
8c100620caa4b058588e1b111ff0e0297b3a3fd0,"Build: specify Node.js 16 as minimum for dev (#26343)

- Specifies Node 16 as the minimum supported version.
- Remove no longer supported 17.x version (per
https://nodejs.dev/en/about/releases/)
- Add 19.x

Test Plan:
(using node 19) as that's what I'm adding)
- yarn build
- yarn test",Jan Kassens,2023-03-08T17:14:36Z
d8144730475cf2d71781e26e300d0d579ac6b8d9,"[Internal API only] Delete non-awaited form of act (#26339)

**This commit only affects the internal version of `act` that we use in
this repo. The public `act` API is unaffected, for now.**

We should always await the result of an `act` call so that any work
queued in a microtask has a chance to flush. Neglecting to do this can
cause us to miss bugs when testing React behavior.

I codemodded all the existing `act` callers in previous PRs.",Andrew Clark,2023-03-08T16:46:10Z
0363648178fcf26b806d6e588088707f76c4a75c,"[babel] Fix export ordering 

Turns out hoisting doesn't work with export declarations, so fix ordering such 
that the export always comes after the synthesized test declaration.",Lauren Tan,2023-03-08T16:42:57Z
702fc984e68e852c76e0df608cd631a7c2e7763f,"Codemod act -> await act (4/?) (#26338)

Similar to the rationale for `waitFor` (see #26285), we should always
await the result of an `act` call so that microtasks have a chance to
fire.

This only affects the internal `act` that we use in our repo, for now.
In the public `act` API, we don't yet require this; however, we
effectively will for any update that triggers suspense once `use` lands.
So we likely will start warning in an upcoming minor.",Andrew Clark,2023-03-08T16:36:05Z
9fb2469a63d32f2ff9788b70ee8e9b6dc4442c06,"Restore definition of NativeMethods as an object for React Native (#26341)

## Summary

In #26283, I changed definition of `NativeMethods` from an object to an
interface. This is correct but introduces a lot of errors in React
Native, so this restores the original definition and exports the fixed
type as a separate type so we can gradually migrate in React Native.

## How did you test this change?

Manually applied this change in React Native and validated the errors
are gone.",Rubén Norte,2023-03-08T14:37:37Z
aef930314f55d4b445078f83be53d46028d4574c,"[DevTools] upgrade electron to latest version & security improvements (#26337)

## Summary

resolves #25667
This PR also resolves several security issues in the standalone app

## How did you test this change?

Tested locally `yarn start` in react-devtools package. Everything works
normal

---
- To see the specific tasks where the Asana app for GitHub is being
used, see below:
  - https://app.asana.com/0/0/1204123419819195",Mengdi Chen,2023-03-08T03:31:54Z
42c04fdcc7a2604881ae3b5510310c0fd909ebc8,"[test] Add test to show Forget's inference is run inside lambda 

JSX reads the value of `z` and does not mutate it so `z` can be independently 
memoized.",Sathya Gunasekaran,2023-03-08T00:16:00Z
8695ea05c3e8a0112c7cabcf1b7003b024776b85,"[test] Add test for capturing a ref before renaming 

The renaming does not affect the lambda correctly.",Sathya Gunasekaran,2023-03-08T00:15:57Z
80ab2f25a64898e81429611586bd89bf187f5876,"[test] Add test for capturing a renamed ref 

The ref isn't renamed inside the lambda, needs to be fixed.",Sathya Gunasekaran,2023-03-08T00:15:54Z
d155d2dd81a70985166ff4ee09217cde8a2f9ad5,"[test] Add test for lambda that conditionally captures ref 

Conditionally captured refs are correctly added to dependency list of the 
lambda.",Sathya Gunasekaran,2023-03-08T00:15:51Z
1e8b6b51d3b315803c809071e52a7d733f6dbc1b,"[test] Add test for lambda that shadows ref 

There is no ref captured as it is shadowed and the lambda does not depend on the 
ref.",Sathya Gunasekaran,2023-03-08T00:15:48Z
161f6ae42cf570d3daec355abcf3b006c58315da,"Codemod act -> await act (3/?) (#26336)

Similar to the rationale for `waitFor` (see #26285), we should always
await the result of an `act` call so that microtasks have a chance to
fire.

This only affects the internal `act` that we use in our repo, for now.
In the public `act` API, we don't yet require this; however, we
effectively will for any update that triggers suspense once `use` lands.
So we likely will start warning in an upcoming minor.",Andrew Clark,2023-03-07T19:39:30Z
58605f798803081069971d9a0342ba08563248af,"Codemod act -> await act (2/?) (#26335)

Similar to the rationale for `waitFor` (see #26285), we should always
await the result of an `act` call so that microtasks have a chance to
fire.

This only affects the internal `act` that we use in our repo, for now.
In the public `act` API, we don't yet require this; however, we
effectively will for any update that triggers suspense once `use` lands.
So we likely will start warning in an upcoming minor.",Andrew Clark,2023-03-07T17:07:30Z
703c67560d1b5e5d32170cd513cda52559933527,"Codemod act -> await act (1/?) (#26334)

Similar to the rationale for `waitFor` (see
https://github.com/facebook/react/pull/26285), we should always await
the result of an `act` call so that microtasks have a chance to fire.

This only affects the internal `act` that we use in our repo, for now.
In the public `act` API, we don't yet require this; however, we
effectively will for any update that triggers suspense once `use` lands.
So we likely will start warning in an upcoming minor.",Andrew Clark,2023-03-07T15:15:34Z
b380c24852b43856028167d5355926483f51d9fc,"Convert class equivlance tests to flushSync (#26333)

There's an old collection of test suites that test class component
behavior across ES6 (regular JavaScript classes), CoffeeScript classes,
and TypeScript classes. They work by running the same tests in all
environments and comparing the results.

Rather than use `act` or `waitFor` in these, I've changed them to use
`flushSync` instead so that they can flush synchronously. The reason is
that CoffeeScript doesn't have async/await, so we'd have to write those
tests differently than how they are written in the corresponding
modules. Since none of these tests cover any concurrent behavior, I
believe it's fine in this case to do everything synchronously; they
don't use any concurrent features, anyway, so effectively it's just
skipping a microtask.",Andrew Clark,2023-03-07T15:14:41Z
8f812e75d6bfe57448a6ef900a0375f5acc4cee5,"Refactor ReactFabricHostComponent (#26323)

## Summary

This is a small refactor of `ReactFabricHostComponent` to remove
unnecessary dependencies, unused methods and type definitions to
simplify a larger refactor of the class in a following PR
(https://github.com/facebook/react/pull/26321).

## How did you test this change?

Existing unit tests.",Rubén Norte,2023-03-07T14:33:55Z
978fae4b4f6d5aa28887b530b5c9bf28b1e7b74b,"[Float][Fiber] implement a faster hydration match for hoistable elements (#26154)

This PR is now based on #26256 

The original matching function for `hydrateHoistable` some challenging
time complexity since we built up the list of matchable nodes for each
link of that type and then had to check to exclusion. This new
implementation aims to improve the complexity

For hoisted title tags we match the first title if it is valid (not in
SVG context and does not have `itemprop`, the two ways you opt out of
hoisting when rendering titles). This path is much faster than others
and we use it because valid Documents only have 1 title anyway and if we
did have a mismatch the rendered title still ends up as the
Document.title so there is no functional degradation for misses.

For hoisted link and meta tags we track all potentially hydratable
Elements of this type in a cache per Document. The cache is refreshed
once each commit if and only if there is a title or meta hoistable
hydrating. The caches are partitioned by a natural key for each type
(href for link and content for meta). Then secondary attributes are
checked to see if the potential match is matchable.

For link we check `rel`, `title`, and `crossorigin`. These should
provide enough entropy that we never have collisions except is contrived
cases and even then it should not affect functionality of the page. This
should also be tolerant of links being injected in arbitrary places in
the Document by 3rd party scripts and browser extensions

For meta we check `name`, `property`, `http-equiv`, and `charset`. These
should provide enough entropy that we don't have meaningful collisions.
It is concievable with og tags that there may be true duplciates `<meta
property=""og:image:size:height"" content=""100"" />` but even if we did
bind to the wrong instance meta tags are typically only read from SSR by
bots and rarely inserted by 3rd parties so an adverse functional outcome
is not expected.",Josh Story,2023-03-07T03:52:35Z
1c023263a3a5ea7c5abf05e75598a84ca6c56c53,"Use shorthand where possible for ObjectExpression properties 

During codegen, emit object properties as shorthand where possible (`{x}` 
instead of `{x: x}`)",Joe Savona,2023-03-07T00:35:52Z
e381aa042fe29943cd3e96655bce13b1fac378b4,"Support spread elements in ArrayExpression 

Similar to the previous, but for array expression: `const x = [...y]`",Joe Savona,2023-03-06T23:32:43Z
93cca54aba846663e24bfca2719796e7449765ad,"Support spread patterns in object literals 

Support ObjectExpression with spread items, eg `const x = {...y}`.",Joe Savona,2023-03-06T23:24:43Z
7893a6c40382969107434d05563c60e1ad5d0750,"Represent ObjectExpression properties as Array<ObjectProperty> 

Refactors the representation of ObjectExpression properties from a Map to an 
`Array<ObjectProperty>` to prepare for the next diff which adds spread element 
support.",Joe Savona,2023-03-06T23:19:34Z
8a9f82ed58c2fa76583a041fa34ad80f5f94a3d1,"[Float][Fizz][Fiber] - Do not hoist elements with `itemProp` & hydrate more tolerantly in hoist contexts (#26256)

## Do not hoist elements with `itemProp`
In HTML `itemprop` signifies a property of an `itemscope` with respect
to the Microdata spec
(https://html.spec.whatwg.org/multipage/microdata.html#microdata)

additionally `itemprop` is valid on any tag and can even make some tags
that are otherwise invalid in the `<body>` valid there (`<meta>` for
instance).

Originally I tried an approach where if you rendered something otherwise
hoistable inside an `itemscope` it would not hoist if it had an
`itemprop`. This meant that some components with `itemprop` could hoist
(if they were not scoped, which is generally invalid microdata
implementation). However the problem is things that do hoist, hoist into
the head and body and these tags can have an `itemscope`. This creates a
ton of ambiguity when trying to hydrate in these hoist scopes because we
can't know for certain whether a DOM node we find there was hoisted or
not even if it has an `itemprop` attribute. There are other scenarios
too that have abiguous semantics like rendering a hoistable with
`itemProp` outside of `<html itemScope={true>`. Is it fair to embed that
hoistable inside that itemScope even though it was defined outside?

To simplify the situation and disambiguate I dropped the `itemscope`
portion from the implementation and now any host component that could
normally be hoisted will not hoist if it has an `itemProp` prop.

In addition to the changes made for `itemProp` this PR also modifies
part of the hydration implementation to be more tolerant of tags
injected by 3rd parties. This was opportunistically done when we needed
to have context information like `inItemScope` but with the most recent
implementation that has been removed. I have however left the hydration
changes in place as it is a goal to make React handle hydrating the
entire Document even when we cannot control whether 3rd parties are
going to inject tags that React will not render but are also not
hoistables

-------

##### Original Description when we considered tracking itemScope
>One recent decision was to make elements using the `itemProp` prop not
hoistable if they were inside and itemScope. This better fits with
Microdata spec which allows for meta tags and other tag types usually
reserved for the `<head>` to be used in the `<body>` when using
itemScope.
>
>To implement this a number of small changes were necessary
>
>1. HostContext in prod needed to expand beyond just tracking the
element namespace for new element creation. It now tracks whether we are
in an itemScope. To keep this efficient it is modeled as a bitmask.
>2. To disambiguate what is and is not a potential instance in the DOM
for hoistables the hydration algo was updated to skip past non-matching
instances while attempting to claim the instance rather than ahead of
time (getNextHydratable).
>3. React will not consider an itemScope on `<html>`, `<head>`, or
`<body>` as a valid scope for the hoisting opt-out. This is important as
an invariant so we can make assumptions about certain tags in these
scopes. This should not be a functional breaking change because if any
of these tags have an `itemScope` then it can just be moved into the
first node inside the `<body>`
>
>Since we were already updating the logic for hydration to better
support `itemScope` opt-out I also changed the hydration behavior for
suspected 3rd party nodes in `<head>` and `<body>`. Now if you are
hydrating in either of those contexts hydration will skip past any
non-matching nodes until it finds a match. This allows 3rd party scripts
and extensions to inject nodes in either context that React does not
expect and still avoid a hydration mismatch.
>
>This new algorithm isn't perfect and it is possible for a mismatch to
occur. The most glaring case may be if a 3rd party script prepends a
`<div>` into `<body>` and you render a `<div>` in `<body>` in your app.
there is nothing to signal to React that this div was 3rd party so it
will claim is as the hydrated instance and hydration will almost
certainly fail immediately afterwards.
>
>The expectation is that this is rare and that if falling back to client
rendering is transparent to the user then there is not problem here. We
will continue to evaluate this and may change the hydration matching
algorithm further to match user and developer expectations",Josh Story,2023-03-06T23:00:54Z
f3c662845bc43f0f4f5d449fdce1081b164e0174,"Support string literal keys for object expressions 

For ObjectExpression, we now support computed keys where the key is a string 
literal.",Joe Savona,2023-03-06T22:51:18Z
a9d6d2d95ac567d0d18967b8ce0eb3429d24401d,"[rfc] always create collections even if elements have errors 

BuildHIR currently propagates UnsupportedNodes for collection types where the 
element itself can fail (for example object expressions where the key may not be 
valid). However, given that we currently abort compilation after the first 
failing pass (and will probably do so for quite a while) I think we can simplify 
and just always return the collection. Note that I already did this for 
destructuring. I'm open to leaving the code as-is if you prefer, though.",Joe Savona,2023-03-06T22:43:58Z
b793fe424d66735385900d01d7bd85a01cfce5f2,"Separate eachLValue/eachOperand visitors 

This PR starts to clean up our handling of lvalues and rvalues by adding new 
`eachInstructionLValues()` and `mapInstructionLValues()` helpers. Now, 
`eachInstructionOperand()` and `mapInstructionOperands()` only visit true 
rvalues, and the new passes must be used to visit lvalues. This allows us to 
remove the special-casing for StoreLocal and Destructure in most of the passes.",Joe Savona,2023-03-06T22:33:52Z
cf03bac12a2381bf79300e204c06d2397b4bb3f3,[be] Move skipped test to kitchensink,Sathya Gunasekaran,2023-03-07T16:21:34Z
8477195c74079071657ba409c59eeb5e10d0c6bb,[babel] Re-export compiled functions,Sathya Gunasekaran,2023-03-07T16:08:16Z
3cad3a54eda7b2d1c670c2d414f33d78a4c3f6af,"Use content hash for facebook-www builds (#26331)

Currently, any commit to React causes an internal sync since the Git
commit hash is part of the build. This creates a lot more sync commits
and noise than necessary, see:
https://github.com/facebook/react/commits/builds/facebook-www

This PR changes the version string to be a hash of the target build
files instead. This way we get a new version with any change that
actually impacts the generated files and still have a matching version
across the files.",Jan Kassens,2023-03-06T22:13:17Z
ba353a50a65b9dc433b3fbcd2efaa8b95b9da460,"Build: make version in build artifacts match (#26329)

Some build artifacts contain multiple version strings. It seems like an
oversight to me that this `.replace` call just replaces the one that
happens to be first.",Jan Kassens,2023-03-06T20:38:43Z
88313ffd57a5df2666520c9a528eafdf2914d5f2,"Codesandbox: upgrade to Node.js 18 (#26330)

Turns out Codesandbox didn't support `String.prototype.replaceAll` in
#26329.

This updates the config to use Node.js 18 for Codesandbox builds.",Jan Kassens,2023-03-06T20:38:03Z
39898c1858959f31e2fd89756c28eb8409892032,"[babel] Add gating module support 

Instead of replacing original function with compiled code, this adds an option 
to append the code and switch between the two based on an `isForgetEnabled` test 
condition that's imported from the specified gatingModule.",Sathya Gunasekaran,2023-03-06T19:54:00Z
2ede182f5e0a75e7c6759aec0b24dcd49f6eff00,[test] Enable gatingModule in tests,Sathya Gunasekaran,2023-03-06T19:53:57Z
c642de322cf3892cdec4544b42ce5c3527180871,"[test] Enable ""use forget"" directive in tests",Sathya Gunasekaran,2023-03-06T19:53:54Z
8c24fc2be297aee75a0b478805b3bc7d88a8c573,"[pipeline] Type the result as t.FunctionDeclaration 

A more narrower type as we only accept FunctionDeclaration as inputs",Sathya Gunasekaran,2023-03-06T19:53:52Z
3cd31a11fbf9b502996a26316be9849b624a02d2,[babel] Add option to specify a gatingModule,Sathya Gunasekaran,2023-03-06T19:53:49Z
637c2e68f1d6580dea84dd1b30284e6797bd6db2,[be][babel] Move directive checking to separate function,Sathya Gunasekaran,2023-03-06T19:53:46Z
0e1bba87ea9d8469468e4aec0ba5445bdb0f6427,"[be][cleanup] Split primitive tests to individual fixtures 

Followup to #1273 

No changes, just moving test functions to their own fixture files.",mofeiZ,2023-03-06T23:25:53Z
8be45e7d4ae7b583439fea69a0d1531430e7fac6,"[rhir][optim] Preserve conditional deps when propagating reactive scopes 

--- 

**This PR slightly changes the semantics of ReactiveScopeDependencies**. 
Previously, reading a ReactiveScopeDependency is guaranteed to preserve the 
`nullthrows` semantics of its own declarations (not that of its inner scopes). 
This does not affect the overall correctness properties, since we already hoist 
reading of conditional dependencies (and thus may throw earlier than the 
original source). 

E.g. we already do not preserve *where* the nullthrows occurs. 

```javascript 

function Component(props) { 

// throws here, before print(x) 

const c_0 = props.a.b !== $[0]; 

let x; 

if (c_0) { 

x = {}; 

print(x); 

if (...) mutate1(x, props.a.b); 

mutate2(x, props.a.b); 

// ... 

``` 

### Summary 

This is an optimization, not a correctness property. 

When propagating reactive dependencies of an inner scope up to its parent, we 
want to *retain information about conditional dependencies* -- not the derived 
unconditional dependencies. This helps us produce more granular dependencies in 
the parent scope. 

Current implementation: 

```javascript 

const innerScopeDeps = innerScope.depTree.deriveMinimalUnconditionalDeps(); 

for (const dep of innerScopeDeps) { 

currentScope.depTree.addDep(dep); 

} 

``` 

New implementation: 

```javascript 

// union of a tree takes union of each node 

currentScope.depTree = currentScope.depTree.union(innerScope.depTree); 

``` 

### Example 

In the below example: 

- `scope @1` has a conditional dependency of `props.a.b`, but that reduces to 
the unconditional dependency `props` 

- `scope @0` itself has a unconditional dependency of `props.a.b` 

- Currently, Forget joins the derived / reduced dependencies of inner scopes, 
which adds `props` as unconditional dependency of `scope @0` 

- With this change, Forget joins the property trees and retains info about 
conditional deps, which adds `props.a.b` as a conditional dep of `scope @0`. 

```javascript 

// scope @0 (deps=[???] decls=[x, y]) 

let y = {}; 

// scope @1 (deps=[props] decls=[x]) 

let x = {}; 

if (foo) mutate1(x, props.a.b); 

mutate2(y, props.a.b); 

``` 

### Followup 

We currently keep track of properties unconditionally accessed per 
ReactiveBlock. Eventually we want to keep track of properties unconditionally 
accessed across blocks (as according to control flow). 

Consider the following code, in which sibling scopes 0 and 1 are sequentially 
executed. In this case, we can safely add props.a.b as a dependency of scope 1. 

```javascript 

// scope@0 (deps=[props.a.b], decls=[x]) 

let x = { a: foo(props.a.b) }; 

// scope@1 (deps=[???], decls=[y]) 

let y = {}; 

if (...) { 

mutate(y, props.a.b); 

} 

```",Mofei Zhang,2023-03-06T21:33:08Z
e2698a3124fedf07a90d4b1369bccb073864948c,[rhir] Add printDeps for debugging reactive dependency trees,Mofei Zhang,2023-03-06T21:33:07Z
e68ea941e6e002411297c31f2b6e51a1795c3994,"[rhir] Promote conditional dependencies accessed by every cfg path 

--- 

Implementation details summarized in comments. 

Overall, we want to calculate a `ReactiveDependencyTree` for every conditional 
block. If we know that conditional blocks are exhaustive (e.g. all CFG paths 
calculates a tree), we can take `intersection(depsFromEachBlock)` and add this 
to the parent Reactive + conditional scope `parentDeps = union(parentDeps, 
intersection(...))`. 

We use trees instead of individual deps here because we can still derive 
unconditional accesses. 

e.g. 

``` 

let x = {}; 

// props.a is an unconditional access here 

if (foo(other)) { 

x.a = props.a.b; 

} else { 

x.b = props.a.c; 

} 

```",Mofei Zhang,2023-03-06T21:33:07Z
25bfe728aac2e4226ba615c1a261d4eb5a895c73,"[rhir] move DeriveMinimalDependencies to its own file 

--- 

Small refactor of reactive dependency logic, no behavioral change. 

- Moves ReactiveDependencyTree logic into `DeriveMinimalDependencies`. 

- this moves hides most helper functions + types 🥳 

- made `ReactiveDependencyTree` a class 

- Changes `#dependencies` type: `Set<ReactiveScopeDep>` -> 
`ReactiveDependencyTree` 

- instead of collecting all dependencies into a tree in the end, we now eagerly 
join dependencies into the tree on `visitDep` 

- this is needed for the next PR in the stack, which relies on incremental 
merging",Mofei Zhang,2023-03-06T21:33:06Z
6e1756a5a9bb0d95ec17983f7dc38cd2c2663b39,"Move suspended render logic to ensureRootIsScheduled (#26328)

When the work loop is suspended, we shouldn't schedule a new render task
until the promise has resolved. When I originally implemented this, I
wasn't sure where to put this logic — `ensureRootIsScheduled` is the
more natural place for it, but that's also a really hot path, so I chose
to do it elsewhere, and left a TODO to reconsider later.

Now it's later. I'm working on a refactor to move the
`ensureRootIsScheduled` call to always happen in a microtask, so that if
there are multiple updates/pings in a single event, they get batched
into a single operation. Which means I can put the logic in that
function where it belongs.",Andrew Clark,2023-03-06T17:27:48Z
1528c5ccdf5c61a08adab31116156df6503e26ce,"SchedulerMock.unstable_yieldValue -> SchedulerMock.log (#26312)

(This only affects our own internal repo; it's not a public API.)

I think most of us agree this is a less confusing name. It's possible
someone will confuse it with `console.log`. If that becomes a problem we
can warn in dev or something.",Andrew Clark,2023-03-06T16:09:07Z
4bbac04cd3624962900bb7800ba4f9609d3a1fd3,"Upgrade Flow to 0.201 (#26326)

Small Flow upgrade to keep us current.",Jan Kassens,2023-03-06T15:33:22Z
eb616a12f10a58d5dc0b5898c0a1029aef62d485,"Extract duplicated methods in Fabric and the legacy renderer to a shared module (#26319)

## Summary

The following methods have exactly the same implementation on Fabric and
the legacy renderer:
* `findHostInstance_DEPRECATED`
* `findNodeHandle`
* `dispatchCommand`
* `sendAccessibilityEvent`

This just extracts those functions to a common module so they're easier
to change (no need to sync changes in 2 files).

## How did you test this change?

Existing tests (this is a refactor).",Rubén Norte,2023-03-06T10:51:59Z
49f7410467950de57bd1d9509e67de91185f7bad,"Fix: Infinite act loop caused by wrong shouldYield (#26317)

Based on a bug report from @bvaughn.

`act` should not consult `shouldYield` when it's performing work,
because in a unit testing environment, I/O (such as `setTimeout`) is
likely mocked. So the result of `shouldYield` can't be trusted.

In the regression test, I simulate the bug by mocking `shouldYield` to
always return `true`. This causes an infinite loop in `act`, because it
will keep trying to render and React will keep yielding.",Andrew Clark,2023-03-06T01:24:39Z
106ea1c584d811eda5d328a5f7f856a738c2ca24,"Support Iterables in Flight (#26313)

We support any super type of anything that we can serialize. Meaning
that as long as the Type that's passed through is less precise, it means
that we can encoded it as any subtype and therefore the incoming type
doesn't have to be the subtype in that case. Basically, as long as
you're only passing through an `Iterable<T>` in TypeScript, then you can
pass any `Iterable<T>` and we'll treat it as an array.

For example we support Promises *and* Thenables but both are encoded as
Promises.

We support Arrays and since Arrays are also Iterables, we can support
Iterables.

For @wongmjane",Sebastian Markbåge,2023-03-05T18:18:54Z
f905da22762369975be71da5c13ff96796773039,"[Flight] Send server reference error chunks to the client (#26293)

Previously when a called server reference function was rejected, the
emitted error chunk was not flushed, and the request was not properly
closed.

Co-authored-by: Sebastian Markbage <sebastian@calyptus.eu>",Hendrik Liebau,2023-03-05T03:56:19Z
e0241b66005a7232fa2c2529afa1bd5b27bf8925,"Simplify Webpack References by encoding file path + export name as single id (#26300)

We always look up these references in a map so it doesn't matter what
their value is. It could be a hash for example.

The loaders now encode a single $$id instead of filepath + name.

This changes the react-client-manifest to have a single level. The value
inside the map is still split into module id + export name because
that's what gets looked up in webpack.

The react-ssr-manifest is still two levels because that's a reverse
lookup.",Sebastian Markbåge,2023-03-05T00:51:34Z
25685d8a90dd83d30cee6bd365bcb0115f1a2ff1,"Codemod tests to waitFor pattern (9/?) (#26309)

This converts some of our test suite to use the `waitFor` test pattern,
instead of the `expect(Scheduler).toFlushAndYield` pattern. Most of
these changes are automated with jscodeshift, with some slight manual
cleanup in certain cases.

See #26285 for full context.",Andrew Clark,2023-03-04T23:06:20Z
64dde70827117fbe15df2a05c618d01d81fcbbf6,"Codemod tests to waitFor pattern (8/?) (#26308)

This converts some of our test suite to use the `waitFor` test pattern,
instead of the `expect(Scheduler).toFlushAndYield` pattern. Most of
these changes are automated with jscodeshift, with some slight manual
cleanup in certain cases.

See #26285 for full context.",Andrew Clark,2023-03-04T23:04:43Z
3cb5afb82efd56d8af09a942a17ddde5e63d2e80,"Codemod tests to waitFor pattern (7/?) (#26307)

This converts some of our test suite to use the `waitFor` test pattern,
instead of the `expect(Scheduler).toFlushAndYield` pattern. Most of
these changes are automated with jscodeshift, with some slight manual
cleanup in certain cases.

See #26285 for full context.",Andrew Clark,2023-03-04T23:03:24Z
e98695db918721a08eae0a2dceeb5719c1aa7261,"Codemod tests to waitFor pattern (6/?) (#26305)

This converts some of our test suite to use the `waitFor` test pattern,
instead of the `expect(Scheduler).toFlushAndYield` pattern. Most of
these changes are automated with jscodeshift, with some slight manual
cleanup in certain cases.

See #26285 for full context.",Andrew Clark,2023-03-04T16:45:26Z
9a52cc8bcd580238f4a8b12036e698823847fd65,"Convert ReactLazy-test to waitFor pattern (#26304)

I'm in the process of codemodding our test suite to the waitFor pattern.
See #26285 for full context.

This module required a lot of manual changes so I'm doing it as its own
PR. The reason is that most of the tests involved simulating an async
import by wrapping them in `Promise.resolve()`, which means they would
immediately resolve the next time the microtask queue was flushed. I
rewrote the tests to resolve the simulated import explicitly.

While converting these tests, I also realized that the `waitFor` helpers
weren't properly waiting for the entire microtask queue to recursively
finish — if a microtask schedules another microtask, the subsequent one
wouldn't fire until after `waitFor` had resolved. To fix this, I used
the same strategy as `act` — wait for a real task to finish before
proceeding, such as a message event.",Andrew Clark,2023-03-04T16:44:41Z
03462cfc7a96f399d79010f1986c0abdbe0bbd15,"[Fizz] External runtime: fix bug in processing existing elements (#26303)

## Summary
Fix bug in how the Fizz external runtime processes existing template
elements.

Bug:
- getElementsByTagName returns a HTMLCollection, which is live.
- while iterating over an HTMLCollection, we call handleNode which
removes nodes

Fix:
- Call Array.from to copy children of `document.body` before processing.
- We could use `querySelectorAll` instead, but that is likely slower due
to reading more nodes.

## How did you test this change?

Did ad-hoc testing on Facebook home page by commenting out the mutation
observer and adding the following.
```javascript
  window.addEventListener('DOMContentLoaded', function () {
    handleExistingNodes(document.body);
  });
```",mofeiZ,2023-03-04T16:26:59Z
faacefb4d0167f8d5973672754fe87afc607397b,"Codemod tests to waitFor pattern (4/?) (#26302)

This converts some of our test suite to use the `waitFor` test pattern,
instead of the `expect(Scheduler).toFlushAndYield` pattern. Most of
these changes are automated with jscodeshift, with some slight manual
cleanup in certain cases.

See #26285 for full context.",Andrew Clark,2023-03-04T02:24:22Z
5b1137290192f9810a1dac551078bb6a3da93c4b,"Optimize DCE for destructuring 

In #1287 i implemented basic handling for destructuring in DCE: if any of the 
pattern values are used, we retained the whole instruction as-is. However, 
ideally we could prune out unused elements from the pattern. There are pretty 
simple rules: 

* ArrayPattern we can eliminate unused elements from the end. 

* ObjectPattern we can eliminate any unused element, but only if there is no 
rest element.",Joe Savona,2023-03-04T01:16:39Z
8233e8f95a14ddc6c92c757a2f0d0c35a1eceeee,"All calls to lowerExpression lower to a unique temporary 

This is more followup toward deleting Instruction.lvalue. The previous PR 
ensured that all Instruction.lvalue identifiers are only ever assigned to once. 
Now we ensure that `lowerExpression()` is _only_ called via 
`lowerExpressionToTemporary()`, ie we now always lower every single expression 
to a temporary. 

This will make it easier to make lvalue a part of the InstructionValue instead 
of the instruction itself, in follow-up PRs.",Joe Savona,2023-03-04T01:09:27Z
fe2d179a619012ae1cea44f3efd97c9974a6d5d5,"Value block reassignment uses StoreLocal 

As part of removing Instruction.lvalue we need to ensure that it is only used to 
represent that instruction's value — the InstructionKind should always be Const. 
The one place where we violated this was for value blocks, specifically 
ConditionalExpression and LogicalExpression. For both of those, we generate a 
single temporary place to represent the expression result. Then the consequent 
and alternate branch ended in a `LoadLocal` that reassigned that temporary (in 
the lvalue) to the result of that branch. 

This PR changes to use StoreLocal instead, and updates the recently added 
validation pass to ensure that all identifiers that appear in an 
Instruction.lvalue are only ever assigned once.",Joe Savona,2023-03-04T01:09:26Z
ca9d49090a78e22393d0f7fb4dbbabfc99d07aed,"New destructuring representation modeled on StoreLocal 

Changes to explicitly model destructuring (array and object patterns), expanding 
support to include rest elements and preserving destructuring through the 
output. The new ""Destructure"" instruction is similar to ""StoreLocal"" but has a 
pattern instead of a place. For now each level of nested array/object patterns 
creates a separate destructure instruction, which ensures we have a temporary 
Place to talk about the intermediate array/object and its type/effects etc. 
Example: 

``` 

// INPUT 

const [x, {y}, ...z] = a; // yay rest elements work now! 

// HIR 

[1] <unknown> $2 = LoadLocal a$1 

[2] <unknown> $6 = Destructure Const [ <unknown> x$3, <unknown> $4, ...<unknown> 
z$5 ] = <unknown> $2 

[3] <unknown> $8 = Destructure Const { y: <unknown> y$8 } = <unknown> $4 

// OUTPUT 

const [x, t0, ...z] = a; 

const {y} = t0; 

``` 

Note that we can still collapse to a single destructure statement during 
codegen, independently of whether we have separate instructions internally. For 
now i'm going w the simple approach of emitting multiple statements in codegen 
(the code will very likely get further rewritten by downstream babel passes 
anyway). 

Also, I don't love the ""if StoreLocal/Destructure else ..."" pattern that the 
StoreLocal created and that this PR entrenches. As discussed w @gsathya offline, 
the long-term direction will be to add a separate visitor, roughly 
`eachLValue()` and `eachOperand()` so that we can treat all instructions the 
same. Existing Instruction.lvalue will go away and become a property of the 
other types of instructions.",Joe Savona,2023-03-04T01:09:25Z
06460b6fb51e99cfab840424a9514651488b2e99,"Remove unnecessary (and incorrect) code for compatibility with Paper in the Fabric version of GlobalResponderHandler (#26290)

## Summary

I'm working on a refactor of the definition of `Instance` in Fabric and
I came across this code that seemed to be for compatibility with Paper,
but that it would actually throw an error in that case.

In Paper, `stateNode` is an instance of `ReactNativeFiberHostComponent`,
which doesn't have a `canonical` field. We try to access nested
properties in that field in a couple of places here, which would throw a
type error (cannot read property `_nativeTag` of `undefined`) if we
actually happened to pass a reference to a Paper state node.

In this line:

```javascript
const isFabric = !!(
      fromOrToStateNode && fromOrToStateNode.canonical._internalInstanceHandle
    );
```

If it wasn't Fabric, `fromOrToStateNode.canonical` would be undefined,
and we don't check for that before accessing
`fromOrToStateNode.canonical._internalInstanceHandle`. This means that
we actually never use this logic in Paper or we would've seen the error.

## How did you test this change?

Existing tests.",Rubén Norte,2023-03-03T23:39:04Z
e64a8f4035024ce749bcbcf93b2618e66200a7f7,"Codemod tests to waitFor pattern (3/?) (#26299)

This converts some of our test suite to use the `waitFor` test pattern,
instead of the `expect(Scheduler).toFlushAndYield` pattern. Most of
these changes are automated with jscodeshift, with some slight manual
cleanup in certain cases.

See #26285 for full context.",Andrew Clark,2023-03-03T22:02:12Z
ce8a72fd4e7a6de12e57dc9db59b4b6ce92daa3b,"Codemod tests to waitFor pattern (2/?) (#26296)

This converts some of our test suite to use the `waitFor` test pattern,
instead of the `expect(Scheduler).toFlushAndYield` pattern. Most of
these changes are automated with jscodeshift, with some slight manual
cleanup in certain cases.

See #26285 for full context.",Andrew Clark,2023-03-03T22:01:57Z
1f1f8eb559d064c5b1954e5dde7517d87d594e7a,"[Float][Fizz][Fiber]: Refactor <style> Resource implementation to group on flush (#26280)

There is a problem with <style> as resource. For css-in-js libs there
may be an very large number of these hoistables being created. The
number of style tags can grow quickly and to help reduce the prevalence
of this FIzz now aggregates all style tags for a given precedence into a
single tag. The client can 'hydrate' against these compound tags but
currently on the client insertions are done individually.

additionally drops the implementation where style tags are embedding in
a template for one where `media=""not all""` is set. The idea is to have
the browser construct the underlying stylesheet eagerly which does not
happen if the tag is embedded in a template

Key Decision:
One choice made in this PR is that we flush style tags eagerly even if a
boundary is blocked that is the only thing that depends on that style
rule. The reason we are starting with this implementation is that it
allows a very condensed representation of the style resources. If we
tracked which rules were used in which boundaries we would need a style
resource for every rendered <style> tag. This could be problematic for
css-in-js libs that might render hundreds or thousands of style tags.
The tradeoff here is we slightly delay content reveal in some cases (we
send extra bytes) but we have fewer DOM tags and faster SSR runtime",Josh Story,2023-03-03T20:50:35Z
5c633a48f9bdc212e27ae026c74148b42cc47efb,"Add back accidentally deleted test comments (#26294)

The codemod I used in #26288 accidentally caused some comments to be
deleted. Because not all affected lines included comments, I didn't
notice until after landing.

This adds the comments back.",Andrew Clark,2023-03-03T19:34:41Z
b073104c26613aa0d5f5ac5d0e0a2ca0bca94b5a,"[DevTools] improve troubleshooting in README (#26235)

## Summary

Improve the README when the elements are not loaded due to Chrome
service worker malfunction",Mengdi Chen,2023-03-03T19:02:21Z
fcf2187919d2b509772b6a10f90e74331165ac78,"[DevTools] Remove renderer.js from extension build (#26234)

## Summary

When looking into the compiled code of `installHook.js` of the extension
build, I noticed that it actually includes the large `attach` function
(from renderer.js). I don't think it was expected.
This is because `hook.js` imports from `backend/console.js` which
imports from `backend/renderer.js` for `getInternalReactConstants`
A straightforward way is to extract function
`getInternalReactConstants`. However, I think it's more simplified to
just merge these two files and save the 361K renderer.js from the
extension build since we have always been loading this code anyways.
I changed the execution check from `__REACT_DEVTOOLS_ATTACH__ ` to the
session storage.

## How did you test this change?

Everything works normal in my local build.",Mengdi Chen,2023-03-03T19:01:58Z
d24f3fdad919cd261b9d7daec985f5c28639674c,"[test] Add failing test of incorrect typing of captured ref 

The typer doesn't understand that it needs to ignore captured references (""read"" 
refs are ok, but not ""mutated"" refs) to be conservative.",Sathya Gunasekaran,2023-03-03T17:33:44Z
ec2a179572401a2d30cd1a14a07f54da59497982,"[be] Move phi aliasing to InferAliasForPhis 

InferMutableRangesForAlias is about extending the mutable ranges, not for 
updating the alias sets. Let's refactor this into a separate pass. 

InferMutableRangesForAlias was iterating over alias sets and not the HIR so this 
refactor isn't costing us any additional perf cost (in terms of an extra 
iteration over the HIR).",Sathya Gunasekaran,2023-03-03T13:54:52Z
1fffc842bccd0754f4f5712240579afc8d33f8ba,"[hir] Don't redefine context refs in EnterSSA 

Context references are special since reassignments need to update the original 
reference, not define a new place.",Sathya Gunasekaran,2023-03-03T13:35:04Z
1e5e75746d8d7a28634cabda2592cb4212320f1f,"[hir] Handle LHS of AssignmentExpression specially 

Babel has a bug where it doesn't visit the LHS of an AssignmentExpression if 
it's an Identifier. Work around it by explicitly visiting it.",Sathya Gunasekaran,2023-03-03T13:35:04Z
482ae7aa7cf43dd102a08980704c2cb876c5a555,"[hir] Refactor Babel expression visitor to separate function 

We'll need to recursively call it in the future.",Sathya Gunasekaran,2023-03-03T13:35:03Z
99eb48db07575efd6acc725ac3ac9e321f4bd9be,"[hir] Skip only MemberExpressions 

Identifiers don't need skipping anyways, so this doesn't affect the existing 
behavior. 

In the future, we will special case handling of LHS of AssignmentExpression 
which will require us to not skip the RHS.",Sathya Gunasekaran,2023-03-03T13:35:03Z
f17f4dcf0b27056c0474ec06eecf9970311ac823,[hir] Treat values escaping into a contextref as Mutate,Sathya Gunasekaran,2023-03-03T13:35:02Z
f002682322a4b332887ec8ab375a4921722c835c,"[hir] Treat reassignment as mutation for context refs 

The mutable range difference for assignment is just 1 which is something we 
usually don't track as we care about mutation and not assignment. 

But this isn't true for context refs whose (re) assignment is actually a 
mutation.",Sathya Gunasekaran,2023-03-03T13:35:02Z
24fbeddcea3c293d55de912666e3598102b9ac73,"[test] Fix test to have initial value 

Having undefined as the initial value makes this a primitive. There's a separate 
bug where we need to remove type inference for captured refs that get mutated 
but that's secondary -- we're currently not even marking the Identifier LHS as a 
captured ref. Fix the test to repro this bug for now.",Sathya Gunasekaran,2023-03-03T13:35:01Z
b72ed698fb5f15e0c33c5017422b8428b01ff12a,"Fixed incorrect value returned as public instance from reconciler (#26283)

## Summary

A few methods in `ReactFiberReconciler` are supposed to return
`PublicInstance` values, but they return the `stateNode` from the fiber
directly. This assumes that the `stateNode` always matches the public
instance (which it does on Web) but that's not the case in React Native,
where the public instance is a field in that object.

This hasn't caused issues because everywhere where we use that method in
React Native we actually extract the real public instance from this
""fake"" public instance.

This PR fixes the inconsistency and cleans up some code.

## How did you test this change?

Existing tests.",Rubén Norte,2023-03-03T09:38:08Z
25a8b9735ce7c84210707d5eced7fe2c9abbd0e1,"Codemod tests to waitFor pattern (1/?) (#26288)

This converts some of our test suite to use the `waitFor` test pattern,
instead of the `expect(Scheduler).toFlushAndYield` pattern. Most of
these changes are automated with jscodeshift, with some slight manual
cleanup in certain cases.

See #26285 for full context.",Andrew Clark,2023-03-03T03:34:58Z
e5244673388a58eaf8f02a9e44749bef3ffee615,"New internal testing helpers: waitFor, waitForAll, waitForPaint (#26285)

Over the years, we've gradually aligned on a set of best practices for
for testing concurrent React features in this repo. The default in most
cases is to use `act`, the same as you would do when testing a real
React app. However, because we're testing React itself, as opposed to an
app that uses React, our internal tests sometimes need to make
assertions on intermediate states that `act` intentionally disallows.

For those cases, we built a custom set of Jest assertion matchers that
provide greater control over the concurrent work queue. It works by
mocking the Scheduler package. (When we eventually migrate to using
native postTask, it would probably work by stubbing that instead.)

A problem with these helpers that we recently discovered is, because
they are synchronous function calls, they aren't sufficient if the work
you need to flush is scheduled in a microtask — we don't control the
microtask queue, and can't mock it.

`act` addresses this problem by encouraging you to await the result of
the `act` call. (It's not currently required to await, but in future
versions of React it likely will be.) It will then continue flushing
work until both the microtask queue and the Scheduler queue is
exhausted.

We can follow a similar strategy for our custom test helpers, by
replacing the current set of synchronous helpers with a corresponding
set of async ones:

- `expect(Scheduler).toFlushAndYield(log)` -> `await waitForAll(log)`
- `expect(Scheduler).toFlushAndYieldThrough(log)` -> `await
waitFor(log)`
- `expect(Scheduler).toFlushUntilNextPaint(log)` -> `await
waitForPaint(log)`

These APIs are inspired by the existing best practice for writing e2e
React tests. Rather than mock all task queues, in an e2e test you set up
a timer loop and wait for the UI to match an expecte condition. Although
we are mocking _some_ of the task queues in our tests, the general
principle still holds: it makes it less likely that our tests will
diverge from real world behavior in an actual browser.

In this commit, I've implemented the new testing helpers and converted
one of the Suspense tests to use them. In subsequent steps, I'll codemod
the rest of our test suite.",Andrew Clark,2023-03-03T02:58:11Z
d49e0e0be0941490fe709f80de137516ba4c0ee3,"Removed unused imperative events implementation from React Native renderer (#26282)

## Summary

I'm going to start implementing parts of this proposal
https://github.com/react-native-community/discussions-and-proposals/pull/607

As part of that implementation I'm going to refactor a few parts of the
interface between React and React Native. One of the main problems we
have right now is that we have private parts used by React and React
Native in the public instance exported by refs. I want to properly
separate that.

I saw that a few methods to attach event handlers imperatively on refs
were also exposing some things in the public instance (the
`_eventListeners`). I checked and these methods are unused, so we can
just clean them up instead of having to refactor them too. Adding
support for imperative event listeners is in the roadmap after this
proposal, and its implementation might differ after this refactor.

This is essentially a manual revert of #23386.

I'll submit more PRs after this for the rest of the refactor.

## How did you test this change?

Existing jest tests. Will test a React sync internally at Meta.",Rubén Norte,2023-03-02T15:54:51Z
9683771861ae581c9aac315c5a6599eb9ef8257c,[packages] Add Forget version of benchmark,Sathya Gunasekaran,2023-03-02T11:06:00Z
63fd00ab2773b0e92217b0df4452e002ead3e901,"[hir] Remove unreachable fallthroughs after merging blocks 

Fixes https://github.com/facebook/react-forget/issues/1141",Sathya Gunasekaran,2023-03-03T14:08:52Z
0ad0f8cf43f25e47d7aae4b43cfba388a9a48e80,"[rhir] Visit DoWhile's test as a conditional dependency 

Missed this in the prior PR!",Lauren Tan,2023-03-03T05:31:37Z
de6444b4f5c2a15c70992489d8801f0cab6f788d,"Add a logger option for logging compiler errors from Babel 

Add a `logger` option so compiler errors are surfaced  in our metrics collection 
pipeline. 

We can probably later merge the global `log` function with it.",Tianyu Yao,2023-03-03T00:59:09Z
36d1fa2569dd544d2e1b69215feceaf3c25747f3,[storelocal] Instruction lvalue is just a Place,Joe Savona,2023-03-02T22:19:18Z
f4abf0a9ee43daf880bda8bbcd66a0a86e8d6f42,[storelocal] lvalues are always const,Joe Savona,2023-03-02T22:19:17Z
487786f7d4a858cc0dda55e38d10436fad412bc5,"StoreLocal instruction 

Adds a new `StoreLocal <kind> <place> = <value>` instruction which stores 
<value> into <place>. With this change, Instruction.lvalue is _always_ a `const` 
temporary, and never a named identifier (there's a new validation pass to assert 
this). StoreLocal is the only way to declare or update a named identifier: the 
instructionKind property says whether it's a const/let declaration or a 
reassignment. Naturally a _lot_ of passes had to be updated to make this work, 
but the existing Effect.Store variant that @gsathya added made this overall 
straightforward. 

Note that as of this PR several passes still have code to handle the possibility 
of an instruction lvalue being something other than a temporary. When we clean 
that up in a follow-up, there will be a lot less of the duplication that appears 
here. For example, CodegenReactiveFunction has two places to handle variable 
declarations in this PR. However, one of them is to handle lvalues, which should 
now _always_ be temporaries and never emit a regular variable declaration. 
Similarly, several passes have to build up a table of identifier -> identifier 
(because of LoadLocal). Longer-term, we should update the Place abstraction so 
that it directly specifies the instruction which created that temporary, so we 
can look it up on demand instead of needing an extra mapping.",Joe Savona,2023-03-02T22:19:17Z
440fd1f24abe340801baeca594d844d609c902b9,"Add support for DoWhile statements 

Adds support for DoWhileStatements. It's pretty similar to how we handle While, 
except in the case where a test block is unreachable (for example, an early 
unconditional `break` within the loop body). In this scenario we eliminate the 
terminal altogether and replace it with a goto to the loop block.",Lauren Tan,2023-03-02T00:45:02Z
71db40c6ff97514fd54ea48c23370ebf4bab2e63,"LoadLocal instruction 

Changes InstructionValue::Place to InstructionValue::LoadLocal for clarity, this 
is intended as the only instruction where a variable can appear as an operand. 
All other instructions operands will be temporaries.",Joe Savona,2023-03-02T00:27:34Z
08c1eda7fffdee4ebc590a2cc97dc0bde3cc268e,"[hir] Simplify depRoot map 

Use Identifier as a key, which lets us simplify lookup to no longer require an 
index access.",Sathya Gunasekaran,2023-03-01T16:48:54Z
41110021f28100b16c11d6d9a248582c5bb6bc3c,"Fix: Selective hydration causing incorrect thenable type passed to DevTools (#26275)

Selective hydration is implemented by suspending the current render
using a special internal opaque object. This is conceptually similar to
suspending with a thenable in userspace, but the opaque object should
not leak outside of the reconciler.

We were accidentally passing this object to DevTool's
markComponentSuspended function, which expects an actual thenable. This
happens in the error handling path (handleThrow).

The fix is to check for the exception reason before calling
markComponentSuspended. There was already a naive check in place, but it
didn't account for all possible enum values of the exception reason.",Andrew Clark,2023-03-01T16:38:48Z
67a61d5bd7f731f5eb37d148dfc4ae0515a8c934,"[Flight Fixture] Show SSR Support with CSS (#26263)

Builds on #26257.

To do this we need access to a manifest for which scripts and CSS are
used for each ""page"" (entrypoint).

The initial script to bootstrap the app is inserted with
`bootstrapScripts`. Subsequent content are loaded using the chunks
mechanism built-in.

The stylesheets for each pages are prepended to each RSC payload and
rendered using Float. This doesn't yet support styles imported in
components that are also SSR:ed nor imported through Server Components.
That's more complex and not implemented in the node loader.

HMR doesn't work after reloads right now because the SSR renderer isn't
hot reloaded because there's no idiomatic way to hot reload ESM modules
in Node.js yet. Without killing the HMR server. This leads to hydration
mismatches when reloading the page after a hot reload.

Notably this doesn't show serializing the stream through the HTML like
real implementations do. This will lead to possible hydration mismatches
based on the data. However, manually serializing the stream as a string
isn't exactly correct due to binary data. It's not the idiomatic way
this is supposed to work. This will all be built-in which will make this
automatic in the future.",Sebastian Markbåge,2023-03-01T00:44:37Z
40755c01a68de4b44bc24cca7f03a46140f31d5e,"[Flight Fixture] Proxy requests through the global server instead of directly (#26257)

This proxies requests through the global server instead of requesting
RSC responses from the regional server. This is a bit closer to
idiomatic, and closer to SSR.

This also wires up HMR using the Middleware technique instead of server.
This will be an important part of RSC compatibility because there will
be a `react-refresh` aspect to the integration.

This convention uses `Accept` header to branch a URL between HTML/RSC
but it could be anything really. Special headers, URLs etc. We might be
more opinionated about this in the future but now it's up to the router.

Some fixes for Node 16/17 support in the loader and fetch polyfill.",Sebastian Markbåge,2023-03-01T00:24:16Z
7a6a0e5f72a9a0c962e017179a5fcfbb0a2c955d,[be] Fix various eslints,Lauren Tan,2023-03-01T00:19:38Z
f28eef3dca46156b81dfd6495354f2471d038997,[eslint] Disable no-constant-condition and no-fallthrough,Lauren Tan,2023-03-01T00:19:37Z
323a70d181d6b85063db00a7086f632f4be2c306,[playground] Fix compiler errors being cut off,Lauren Tan,2023-03-01T00:19:36Z
38509cce9b2f8b2046d2952645879e2f474ca745,"Add preconnect and prefetchDNS to rendering-stub (#26265)

<!--
  Thanks for submitting a pull request!
We appreciate you spending the time to work on these changes. Please
provide enough information so that others can review your pull request.
The three fields below are mandatory.

Before submitting a pull request, please make sure the following is
done:

1. Fork [the repository](https://github.com/facebook/react) and create
your branch from `main`.
  2. Run `yarn` in the repository root.
3. If you've fixed a bug or added code that should be tested, add tests!
4. Ensure the test suite passes (`yarn test`). Tip: `yarn test --watch
TestName` is helpful in development.
5. Run `yarn test --prod` to test in the production environment. It
supports the same options as `yarn test`.
6. If you need a debugger, run `yarn test --debug --watch TestName`,
open `chrome://inspect`, and press ""Inspect"".
7. Format your code with
[prettier](https://github.com/prettier/prettier) (`yarn prettier`).
8. Make sure your code lints (`yarn lint`). Tip: `yarn linc` to only
check changed files.
  9. Run the [Flow](https://flowtype.org/) type checks (`yarn flow`).
  10. If you haven't already, complete the CLA.

Learn more about contributing:
https://reactjs.org/docs/how-to-contribute.html
-->

## Summary

Adding `preconnect` and `prefetchDNS` to rendering-stub build

<!--
Explain the **motivation** for making this change. What existing problem
does the pull request solve?
-->

## How did you test this change?

<!--
Demonstrate the code is solid. Example: The exact commands you ran and
their output, screenshots / videos if the pull request changes the user
interface.
How exactly did you verify that your PR solves the issue you wanted to
solve?
  If you leave this empty, your PR will very likely be closed.
-->",Jiachi Liu,2023-02-28T22:27:16Z
1fdbcfe162c0719d8156f40f3e71a8fc005f9b7b,"[rhir] Add dependencies produced by active (incomplete) scopes 

--- 

> If this operand is used in a scope, has a dynamic value, and was defined 
before this scope, then its a dependency of the scope. 

> (from current comments in PropagateScopeDependencies::visitDependency) 

A reactive scope can take a dependency from a definition produced by an 
incomplete parent scope. Our tests previously did not cover this, since most 
object types aliased together and remained mutable throughout a ReactiveScope. 

e.g. our tests did not have 

``` 

scope @0 (deps=...,  declarations=[x, y]) { 

x = {}; 

// define a reactive, immutable value that is not aliased to become mutable 

const immutableVal = ...; 

scope @1 (deps=immutableVal, declarations=[y]) { 

y = read(immutableVal) 

} 

mutateX(x, ...); 

} 

``` 

We should not add a dependency if it is produced in exactly the same scope as 
the one it is used. It is safe (and correct) to depend on values produced by a 
parent scope. 

--- 

Note that we still should check for whether a defining scope is active to 
determine whether it should be added as a output of that scope 
([src](https://github.com/facebook/react-forget/blob/b608ab20d57229b528deeffa19f1ee08a4bad37a/forget/src/ReactiveScopes/PropagateScopeDependencies.ts#L469-L478)). 

Access of an identifier produced by a parent scope (i.e. adding a variable 
defined by a scope's parent as its own dependency) does not require adding that 
identifier to the parent's `declarations`, since that identifier is already 
valid to access via identifier binding rules.",Mofei Zhang,2023-02-28T21:36:01Z
b532465ce293b01b0654fc509b4f3a322d2eab52,"[inference] Capturing an immutable value should be a read 

--- 

Following #1216: 

If a value is known to be immutable, then it doesn't need to be considered 
'captured' since no mutation should occur. 

Couldn't figure out a unit test in which this specific fix matters, but we need 
this to fix test output of #1273 

cc. @gsathya, would love some feedback / eyes on this. This makes sense for 
Primitives in particular (which are always read / copied in rval position), but 
I'm not as familiar with edge cases for other immutable values especially around 
lambdas.",Mofei Zhang,2023-02-28T21:36:00Z
474c38c573e4a56ff3f8eb31bb22c9c65895118e,"[rhir][tests] Added tests for primitives as dependencies 

--- 

Our current compiler has specific logic for determining what can be a reactive 
value / reactive dependency. 

Currently, all of the following affect whether an identifier is a reactive: 

- **alias analysis** (applicable to objects) 

- **data + control flow** (whether any other reactive identifiers is used in 
determining it) 

- **reactive scopes** (we generalize and say anything produced by a block with 
reactive dependencies must be non-stable and reactive) 

- this is not true in the case of const primitives, but an overestimate is safe 

- whether the **scope that declares this identifier** is ~~currently active~~ 
the same scope in which it is used (fixed by #1275) 

(since a scope cannot be dependent on itself) 

These conditions are complex. We end up inferring most identifiers as `mutable` 
and `object` types, which have different stability and aliasing properties from 
primitives. As a result, we're missing some cases in our existing test coverage. 

Test case output is fixed by #1274 and #1275 

--- 

(This can be separated from the stack below, which implements conditional 
dependencies. Happy to merge that first and open this as a new stack if that 
produces a significantly better Git PR history.)",Mofei Zhang,2023-02-28T21:35:59Z
6b129b59ed76d530882ecf1ea2e1eb7fc1bd6ad4,"[rhir] Refactor ReactiveScopeDependency, conditional dependencies (2/2) 

--- 

See comment block in `PropagateScopeDependencies` and added test case 
`reduce-reactive-conditional-dependencies` for correctness properties / 
dependency merging logic.",Mofei Zhang,2023-02-28T21:35:59Z
b2ae9ddb3b497d16a7c27c051da1827d08871138,"Cleanup enableSyncDefaultUpdate flag (#26236)

This feature flag is enabled everywhere.",Jan Kassens,2023-02-27T19:04:02Z
4005f862bd811e92073a0b5047bc8ede84a65d80,"[rhir] Refactor ReactiveScopeDependency, unconditional dependencies (1/2) 

--- 

See comment block in `PropagateScopeDependencies` and added test case 
`reduce-reactive-unconditional-dependencies` for correctness properties / 
dependency merging logic.",Mofei Zhang,2023-02-27T18:38:23Z
9ca41f8a2e5aa334e3c74aeab5e60465ac0547cc,"[rhir] small: ReactiveDependency uses Identifier instead of Place 

--- 

We never use the `Place` of a ReactiveScopeDependency, except for when we want 
to access its identifier. Later PRs in this stack will convert 
`ReactiveScopeDependency` to property access trees (and traverse over the tree). 
This usually involves merging multiple Dependencies into trees (where each root 
is a unique identifier). We then traverse over each tree to extract its 
dependencies (e.g. unconditional leaves). 

``` 

{place: {loc: 1, identifier: 'props'}, path: ['a', 'b']} 

{place: {loc: 2, identifier: 'props'}, path: ['a']} 

// merges into a single tree root, which should represent a single identifier 

``` 

The `place` of each individual `ReactiveScopeDependency` will be lost during the 
tree traversal, and it doesn't really make sense to recreate them using the 
`Place` attached to the tree root.",Mofei Zhang,2023-02-27T18:38:02Z
f335e7d4d97cabd934ee58acb44bbc1851c0a822,"[rhir] Patch: ordering of overlapping input dependencies does not matter 

--- 

Patch and simplify logic around merging overlapping reactive dependencies. 

Added `reduce-reactive-unconditional-deps` test fixtures, which tries to cover 
all cases of merging unconditional dependencies (to a minimal dependencies set). 
Please let me know if I missed any",Mofei Zhang,2023-02-27T18:38:02Z
8bc8d67aeea876d50bc2e546fa01d9c21b8272a9,[be] Fix unused vars in BuildHIR,Lauren Tan,2023-02-27T22:12:41Z
e4e1af723697f2efd98765cb2c968568910cd1f9,[eslint] Ignore _ prefixed unused variables,Lauren Tan,2023-02-27T22:12:38Z
60137a8b6436df4eb6f2379cc90756a545b45134,"[rhir][cleanup] remove DeclKind (replaced by pruneNonReactiveDependencies) 

DeclKind is no longer read / needed due to pruneNonReactiveDependencies pass.",mofeiZ,2023-02-27T16:04:38Z
6ff1733e63fdb948ae973a713741b4526102c73c,"[Float][Fizz][Fiber] support type for ReactDOM.preload() options (#26239)

preloads often need to come with a type attribute which allows browsers
to decide if they support the preloading resource's type. If the type is
unsupported the preload will not be fetched by the Browser. This change
adds support for `type` in `ReactDOM.preload()` as a string option.",Josh Story,2023-02-25T19:06:09Z
1173a17e6eea08599005e9f8e7d7a4245783edba,"[Float][Fizz][Fiber] implement preconnect and prefetchDNS float methods (#26237)

Adds two new ReactDOM methods

### `ReactDOM.prefetchDNS(href: string)`
In SSR this method will cause a `<link rel=""dns-prefetch"" href=""..."" />`
to flush before most other content both on intial flush (Shell) and late
flushes. It will only emit one link per href.

On the client, this method will case the same kind of link to be
inserted into the document immediately (when called during render, not
during commit) if there is not already a matching element in the
document.

### `ReactDOM.preconnect(href: string, options?: { crossOrigin?: string
})`
In SSR this method will cause a `<link rel=""dns-prefetch"" href=""...""
[corssorigin=""...""] />` to flush before most other content both on
intial flush (Shell) and late flushes. It will only emit one link per
href + crossorigin combo.

On the client, this method will case the same kind of link to be
inserted into the document immediately (when called during render, not
during commit) if there is not already a matching element in the
document.",Josh Story,2023-02-25T19:04:51Z
e7d7d4cb4b61624c5762521370a58d941c1c46e3,"Move Flight Fixture to use Middleware instead of WebDevServer (#26246)

This lets us put it in the same server that would be serving this
content in a more real world scenario.

I also de-CRA:ified this a bit by simplifying pieces we don't need.

I have more refactors coming for the SSR pieces but since many are
eyeing these fixtures right now I figured I'd push earlier.

The design here is that there are two servers:

- Global - representing a ""CDN"" which will also include the SSR server.
- Regional - representing something close to the data with low waterfall
costs which include the RSC server.

This is just an example.

These are using the ""unbundled"" strategy for the RSC server just to show
a simple case, but an implementation can use a bundled SSR server.

A smart SSR bundler could also put RSC and SSR in the same server and
even the same JS environment. It just need to ensure that the module
graphs are kept separately - so that the `react-server` condition is
respected. This include `react` itself. React will start breaking if
this isn't respected because the runtime will get the wrong copy of
`react`. Technically, you don't need the *entire* module graph to be
separated. It just needs to be any part of the graph that depends on a
fork. Like if ""Client A"" -> ""foo"" and ""Server B"" -> ""foo"", then it's ok
for the module ""foo"" to be shared. However if ""foo"" -> ""bar"", and ""bar""
is forked by the ""react-server"" condition, then ""foo"" also needs to be
duplicated in the module graph so that it can get two copies of ""bar"".",Sebastian Markbåge,2023-02-25T17:10:39Z
564166099b5f46dd33f3356b01a72c0314103a18,"[DevTools] remove script tag immediately (#26233)

Fixes https://github.com/facebook/react/issues/25924 for React DevTools
specifically.

## Summary

If we remove the script after it's loaded, it creates a race condition
with other code. If some other code is searching for the first script
tag or first element of the document, this might broke it.

## How did you test this change?

I've tested in my local build that even if we remove the script tag
immediately, the code is still correctly executed.",Mengdi Chen,2023-02-24T20:13:05Z
a8f971b7a669a9a6321b9f3cea820f68b2e4ac6e,"Switch to mount dispatcher after use() when needed (#26232)

When resuming a suspended render, there may be more Hooks to be called
that weren't seen the previous time through. Make sure to switch to the
mount dispatcher when calling use() if the next Hook call should be
treated as a mount.

Fixes #25964.",Sophie Alpert,2023-02-24T20:06:27Z
96cdeaf89bfde7551b4ffe4d685da169b780f2f7,"[Fizz Node] Fix null bytes written at text chunk boundaries (#26228)

We encode strings 2048 UTF-8 bytes at a time. If the string we are
encoding crosses to the next chunk but the current chunk doesn't fit an
integral number of characters, we need to make sure not to send the
whole buffer, only the bytes that are actually meaningful.

Fixes #24985. I was able to verify that this fixes the repro shared in
the issue (be careful when testing because the null bytes do not show
when printed to my terminal, at least). However, I don't see a clear way
to add a test for this that will be resilient to small changes in how we
encode the markup (since it depends on where specific multibyte
characters fall against the 2048-byte boundaries).",Sophie Alpert,2023-02-24T19:33:54Z
ca2cf319fdfcf6e5f048e082f5169bc1b849c129,"[DevTools] permanently polyfill for rAF in devtools_page (#26193)

## Summary

We had this as a temporary fix for #24626. Now that Chrome team decides
to turn the flag on again (with good reasons explained in
https://bugs.chromium.org/p/chromium/issues/detail?id=1241986#c31), we
will turn it into a long term solution.
In the future, we want to explore whether we can render React elements
on panel.html instead, as `requestAnimationFrame` produces higher
quality animation.

## How did you test this change?

Tested on local build with ""Throttle non-visible cross-origin iframes""
flag enabled.",Mengdi Chen,2023-02-23T21:53:11Z
bfb9cbd8ca2d042677056110887cc62d438f665f,[difftrain] Make github sha clickable for easier debugging (#26225),lauren,2023-02-23T15:59:22Z
1dfaf8a94bf5ab3f7fe2afac6f31ac75ce884fed,"Lower all operands to temporaries 

This PR changes BuildHIR to lower all operands to temporaries. Example: 

```javascript 

// Input 

a + b; 

// Previous Lowering 

Const t0 = BinaryOperation Place(a) ""+"" Place(b) 

// New Lowering 

Const t0 = Place(a); 

Const t1 = Place(b); 

BinaryOperation Place(t0) ""+"" Place(t1) 

``` 

This is necessary to ensure we're always referring to the correct version of a 
variable, even in the case of reassignment mid-expression. For example, we 
previously evaluated `let x=1; x + (x = 2) + x` incorrectly to 6 because we 
lowered the `x = 2` prior to the binary operators. We now lowers each instance 
of x to a temporary, ensuring they refer to the correct SSA version of the 
variable, and produce the correct result (5). 

Note that with this change, the _only_ place a variable can appear as an 
operator is when the InstructionValue is a raw identifier. This was already the 
case for globals (as of the LoadGlobal instruction). All other instruction value 
variants will only ever receive temporaries as arguments. 

This necessitated a few changes to our inference: 

* The logic to extend the range of phi operands (if the phi is mutated) was 
previously in LeaveSSA, but that was actually too late. The introduction of 
lowering to temporaries help discover failing cases, which I fixed earlier in 
the stack by moving the logic to extend the range of phi operands into the 
InferMutableRanges fixpoint loop. 

* PropagateScopeDependencies now has to track variable reassignments in addition 
to tracking property accesses 

* AnalyzeFunctions now has to track variable reassignments in addition to 
tracking property accesses 

* InferReactiveIdentifiers now needs a fixpoint iteration, because identifiers 
don't directly appear together in the same instruction anymore (such that we can 
directly propagate the reactivity between them). Instead, we'll first see that 
the temporaries are reactive, and have to propagate that back to the identifiers 
the temporaries were loaded from. 

Overall while this does introduce a bit more complexity, it also makes the 
compiler more robust. As with the phi example illustrates, there are legitimate 
inputs that can create similar indirections to that introduced by lowering 
identifiers to temporaries. 

Note that there’s a theme to the changes here: several analysis passes need to 
map an operand back to its identifier value. Ideally our HIR structure would 
directly support looking up the value for a temporary. For example, if operands 
were references to eg the index of the instruction that produced them. Because 
we don’t have such a representation yet (it would fall out naturally if we were 
writing in Rust), we have to do some bookkeeping. The key takeaway here is that 
this bookkeeping is incidental complexity given our current representation, not 
fundamental complexity of the algorithm.",Joe Savona,2023-02-22T23:53:23Z
c04b18070145b82111e1162729f4776f4d2c6112,"Remove eventTime field from class Update type (#26219)

`eventTime` is a vestigial field that can be cleaned up. It was
originally used as part of the starvation mechanism but it's since been
replaced by a per-lane field on the root.

This is a part of a series of smaller refactors I'm doing to
simplify/speed up the `setState` path, related to the Sync Unification
project that @tyao1 has been working on.",Andrew Clark,2023-02-22T20:32:09Z
212b89fa25fd0a39473e845d1665d45f9da9dad3,"Bug: yarn flow dom does not exist, so console should suggest yarn flow dom-node (#26213)

<!--
  Thanks for submitting a pull request!
We appreciate you spending the time to work on these changes. Please
provide enough information so that others can review your pull request.
The three fields below are mandatory.

Before submitting a pull request, please make sure the following is
done:

1. Fork [the repository](https://github.com/facebook/react) and create
your branch from `main`.
  2. Run `yarn` in the repository root.
3. If you've fixed a bug or added code that should be tested, add tests!
4. Ensure the test suite passes (`yarn test`). Tip: `yarn test --watch
TestName` is helpful in development.
5. Run `yarn test --prod` to test in the production environment. It
supports the same options as `yarn test`.
6. If you need a debugger, run `yarn test --debug --watch TestName`,
open `chrome://inspect`, and press ""Inspect"".
7. Format your code with
[prettier](https://github.com/prettier/prettier) (`yarn prettier`).
8. Make sure your code lints (`yarn lint`). Tip: `yarn linc` to only
check changed files.
  9. Run the [Flow](https://flowtype.org/) type checks (`yarn flow`).
  10. If you haven't already, complete the CLA.

Learn more about contributing:
https://reactjs.org/docs/how-to-contribute.html
-->

## Summary
The `yarn flow` command, as suggested for every PR Submission (Task No.
9), tells us `The yarn flow command now requires you to pick a primary
renderer` and provides a list for the same. However, in at the bottom of
the prompt, it suggests `If you are not sure, run yarn flow dom`. This
command `yarn flow dom` does not exist in the list and thus the command
does nothing and exits with `status code 1` without any flow test.

<!--
Explain the **motivation** for making this change. What existing problem
does the pull request solve?
-->
While trying to submit a different PR for code cleaning, just during
submission I read the PR Guidelines, and while doing `yarn test`, `yarn
lint`, and `yarn flow`, I came across this issue and thought of
submitting a PR for the same.

## How did you test this change?
Since this code change does not change any logic, just the text
information, I only ran `yarn linc` and `yarn test` for the same.

<!--
Demonstrate the code is solid. Example: The exact commands you ran and
their output, screenshots / videos if the pull request changes the user
interface.
How exactly did you verify that your PR solves the issue you wanted to
solve?
  If you leave this empty, your PR will very likely be closed.
-->
Here is how the issue currently looks like:

![facebook yarn flow
dom](https://user-images.githubusercontent.com/20269286/220337686-b8a9b786-92e0-4c66-88a9-e94bfbed6edf.JPG)

Signed-off-by: abhiram11 <abhiramsatpute@gmail.com>
Co-authored-by: abhiram11 <abhiramsatpute@gmail.com>",Abhiram Satpute,2023-02-21T20:30:34Z
0a76fb9ec4999b2f21db2a385bfaa8b070b1f78b,"Copy from build to node_modules instead of linking to builds (#26210)

Using the `link:` protocol to create a dependency doesn't work when we
edit the `package.json` to lock the version to a specific version. It
didn't really work before neither, it was just that `yarn` installed an
existing `scheduler` dependency from npm instead of using the built one.

So I'm updating all the fixture to use the technique where we copy files
instead.",Sebastian Markbåge,2023-02-21T19:48:37Z
c8d4eeda5f88f75763cabd20416f4883fe160c95,"Rename `yarn start` to `yarn dev` and `yarn start:prod` to `yarn start` (#26209)

The `start` convention is a CRA convention but nobody else of the modern
frameworks / tools use this convention for a file watcher and dev mode.
Instead the common convention is `dev`. Instead `start` is for running a
production build that's already been built.

---------

Co-authored-by: Sebastian Silbermann <silbermann.sebastian@gmail.com>",Sebastian Markbåge,2023-02-21T19:18:21Z
60144a04da7970e30266f591dbcd67afe1097e41,"Split out Edge and Node implementations of the Flight Client (#26187)

This splits out the Edge and Node implementations of Flight Client into
their own implementations. The Node implementation now takes a Node
Stream as input.

I removed the bundler config from the Browser variant because you're
never supposed to use that in the browser since it's only for SSR.
Similarly, it's required on the server. This also enables generating a
SSR manifest from the Webpack plugin. This is necessary for SSR so that
you can reverse look up what a client module is called on the server.

I also removed the option to pass a callServer from the server. We might
want to add it back in the future but basically, we don't recommend
calling Server Functions from render for initial render because if that
happened client-side it would be a client-side waterfall. If it's never
called in initial render, then it also shouldn't ever happen during SSR.
This might be considered too restrictive.

~This also compiles the unbundled packages as ESM. This isn't strictly
necessary because we only need access to dynamic import to load the
modules but we don't have any other build options that leave
`import(...)` intact, and seems appropriate that this would also be an
ESM module.~ Went with `import(...)` in CJS instead.",Sebastian Markbåge,2023-02-21T18:18:24Z
70b0bbda767ed016925889e8952b10f49921c0cf,"[fizz][external-runtime] Fix: process mutation records before disconnecting (#26169)

> All notifications of mutations that have already been detected, but
not yet reported to the observer, are discarded. To hold on to and
handle the detected but unreported mutations, use the takeRecords()
method.
>    -- ([Mozilla docs for disconnect](

https://developer.mozilla.org/en-US/docs/Web/API/MutationObserver/disconnect))

Fizz external runtime needs to process mutation records (representing
potential Fizz instructions) before calling `disconnect()`. We currently
do not do this (and might drop some instructions).",mofeiZ,2023-02-21T17:10:23Z
c7967b194b41cb16907eed718b78d89120089f6a,"Distribute bundles more evenly into CI shards (#26208)

## Summary

Previously, we distributed bundles into shards and then checked if we
need to actually build that bundle. This can under-utilize shards
heavily (e.g.
https://app.circleci.com/pipelines/github/facebook/react/38611/workflows/df9e56e7-d476-49ee-9392-d8b37c81aa66/jobs/630545/parallel-runs/28?filterBy=ALL
only building a single bundle).

This won't result in an optimal distribution but, if we're lucky, we
might end up with shard #26 not taking 7mins anymore. The slowest shard
ultimately decicdes when we can start with testing builds.

## How did you test this change?

- [x] `CIRCLE_NODE_INDEX=28 CIRCLE_NODE_TOTAL=40 yarn build` building
more than 1 bundle
- [x] Check timings of `yarn_build` so that we don't up with an
over-stuffed shard (e.g. a shard having to build all the expensive
bundles). Casually dropping 60min idle time 🎉:
- Before:
https://app.circleci.com/pipelines/github/facebook/react/38683/workflows/a41533d7-811c-439d-9751-214ba06035c5/jobs/632230/timing
- After:
https://app.circleci.com/pipelines/github/facebook/react/38686/workflows/8a770df6-5b3e-41ea-b3b5-10abeae703e7/jobs/632247/timing",Sebastian Silbermann,2023-02-20T21:16:23Z
bb1e3d0e19f1e36ecb5b9e58d40bbf59fa220b73,"Fail yarn build if any bundle fails to build (#26207)

## Summary

`yarn build` would previously still exit with zero exit code hiding
build errors such as
https://app.circleci.com/pipelines/github/facebook/react/38609/workflows/62a73635-3bf3-4264-8c48-a61844a27764/jobs/630503/parallel-runs/11?filterBy=ALL&invite=true#step-105-17.
These issues are still surfaced due to missing size bot artifacts but
the overall PR status would still be green which we don't want.

Now we just exit with the same exit has a the process of a single build
if it's non-zero.

## How did you test this change?

- [x] fails based on the parent of
62e6c4612ec704cf07c99b318bc8f26d3ec3f588:
https://app.circleci.com/pipelines/github/facebook/react/38681/workflows/654c68ed-cebc-48d4-a156-bac719772f6f/jobs/632166
- [x] passes based on `main`",Sebastian Silbermann,2023-02-20T20:59:21Z
62e6c4612ec704cf07c99b318bc8f26d3ec3f588,"Move Mutation/Persistence fork inline into the functions (#26206)

We should never use any logic beyond declarations in the module scope,
including conditions, because in a cycle that can lead to problems.

More importantly, the compiler can't safely reorder statements between
these points which limits the optimizations we can do.",Sebastian Markbåge,2023-02-20T20:03:22Z
80cf4a099e99bbd4ed13e02d30136f669f2868b9,"Update Closure Compiler (#26205)

I need it for https://github.com/facebook/react/pull/26187.

We need to specify specifically the output mode `ECMASCRIPT5_STRICT` to
remove `const` from the Fizz runtime.",Sebastian Markbåge,2023-02-20T18:27:13Z
2cc54b57edec999cf00de949627de2853ef2a1a7,"Change commit message for DiffTrain commigs (#26203)

Previously, the commit message looked something like this in Github: 
<img width=""921"" alt=""Screenshot 2023-02-20 at 13 52 35""
src=""https://user-images.githubusercontent.com/1733610/220126265-d77931e0-18ac-46a0-bf23-d868f8af17a9.png"">

With this change, it will look like:

DiffTrain build for commit db5e6250d4bbb70c5085c58694a2e9c78c3f6371.",Samuel Susla,2023-02-20T15:17:44Z
8a82207286efc2211d3c3ad5360441a4e92bbcac,add test case for semver major comparisons,chenpeng,2023-02-20T14:36:48Z
6b6d0617eff48860c5b4e3e79c74cbd3312cf45a,"Update Rollup and related plugins to their most recent versions (#24916)

Update Rollup and related plugins to their most recent versions +
resolve any breaking changes/deprecations/etc along the way. I made each
change piece by piece, so the commit history tells a pretty good story
of what was changed where/how/why.

fixes https://github.com/facebook/react/issues/24894

For the full deepdive/context, see:

- https://github.com/facebook/react/issues/24894

The inspiration for this came from @jasonwilliams 's PR for attempting
to add sourcemap output support to React's builds:

- https://github.com/facebook/react/issues/20186
  - https://github.com/facebook/react/pull/21946

But I figured that it would be useful to minimise the scope of changes
in that PR, and to modernise the build tooling along the way.

If any of these updates rely on a node version later than `10.x`, then
the following PR may have to land first, otherwise things might break on
AppVeyor:

- https://github.com/facebook/react/issues/24891
  - https://github.com/facebook/react/pull/24892

Co-authored-by: Sebastian Markbage <sebastian@calyptus.eu>",Glenn 'devalias' Grant,2023-02-20T06:35:56Z
bc38a3dfa74f63e66a8307d34ad6d52e838ab3b0,"Update rollup config to use moduleSideEffects (#26199)

## Summary

In rollup v1.19.4, The ""treeshake.pureExternalModules"" option is
deprecated. The ""treeshake.moduleSideEffects"" option should be used
instead, see
https://github.com/rollup/rollup/blob/v1.19.4/src/Graph.ts#L130.

## How did you test this change?

ci green",Ming Ye,2023-02-20T05:04:26Z
256071460d8ca646e820596e5fc8ac8ccab6b43b,[destructuring] Cleanup InstructionValue type definition,Joe Savona,2023-02-17T23:30:42Z
1d0aa64b242e29020a8a5086fbedd6361f986532,Make it easier to debug lambdas,Joe Savona,2023-02-22T22:07:33Z
8da443b6737fc00f61cc613475264fb971608867,"Print HIR of function expressions for debugging 

Example output: 

``` 

bb0 (block): 

[1] Const mutate $9$ = read a$8 

[2] Const store x$10:TObject$ = Object { a: read $9 } 

[3] Const mutate $11:TObject$ = capture x$10:TObject 

[4] Const store $12[4:6]:TFunction$ = Function @deps[read $11:TObject]: 

bb0 (block): 

[1] Const mutate q$7$ = capture x$6 

[2] Const mutate $8$ = capture q$7 

[3] Const mutate $9$ = PropertyLoad read $8.b 

[4] Const store $10[4:6]:TFunction$ = Function @deps[read $9]: 

bb0 (block): 

[1] Const mutate $7:TPrimitive$ = 1 

[2] Const mutate $8[2:4]$ = capture q$6[0:4] 

[3] Const store $9$ = PropertyStore mutate $8[2:4].b = read $7:TPrimitive 

[4] Return 

[5] Const mutate $11$ = Call mutate $10[4:6]:TFunction() 

[6] Return 

[5] Const mutate $13$ = Call mutate $12[4:6]:TFunction() 

[6] Const mutate $14:TObject$ = capture x$10:TObject 

[7] Return freeze $14:TObject 

```",Joe Savona,2023-02-22T21:03:00Z
bae2cb5f89790eb6693e2f56ae24dcbabb3316f1,"Remove now-unnecessary mutable range extension in LeaveSSA 

This is no longer necessary now that we extend phi operands' ranges in 
InferMutableRanges",Joe Savona,2023-02-21T23:29:30Z
9a25b5a12aa3b8c4874f31c53ce614f7eb039dfe,"Fix previous examples, alias across phis 

Within the InferMutableRanges fixpoint iteration, we need to alias phi operands 
with the phi id if the phi id is later mutated.",Joe Savona,2023-02-21T23:29:30Z
79eb25018756cff958c28c6db523356c6bf5783e,"Bug repro for unobserved aliased mutation w phi 

I found this while working to ensure that we always lower all operands to 
temporaries. This works: 

```javascript 

// the whole computation of x is memoized in one block, bc of the mutation after 
the phi 

let x; 

if (cond) { 

x = someObj(); 

} else { 

x = someObj(); 

} 

mutate(x); 

``` 

However, if you alias either of the operands, we lose the mutation: 

```javascript 

let x; 

if (cond) { 

const y = someObj(); // OOPS this gets independently memoized 

x = y; 

} else { 

x = someObj(); 

} 

mutate(x); 

``` 

The core issue is that InferMutableRanges does not take into account mutation of 
phis. ~~My first thought is that we need an additional, outer fixpoint iteration 
loop to flow mutation back ""up"" to phi operands~~ 

edit: there was a much easier fix, we need to alias phi operands and phi id 
within the existing fixpoint iteration. See follow-up PR which fixes.",Joe Savona,2023-02-21T16:29:37Z
db5e6250d4bbb70c5085c58694a2e9c78c3f6371,"Rename yarn build-combined to just yarn build (#26192)

It's confusing to new contributors, and me, that you're supposed to use
`yarn build-combined` for almost everything but not fixtures.

We should use only one build command for everything.

Updated fixtures to use the folder convention of build-combined.",Sebastian Markbåge,2023-02-17T21:00:18Z
c9d9f524d7deaf3ec94e3d13dc84240bd63cded2,"Make enableCustomElementPropertySupport a dynamic flag in www build (#26194)

Turns enableCustomElementPropertySupport into a dynamic flag in the www
build so we can turn it on behind a GK.",Andrew Clark,2023-02-17T20:45:03Z
fcdcd6038fd72c3a6a5c183f367446fd711ba2b0,Constant propagation converts computed access to static property where possible,Joe Savona,2023-02-17T20:32:30Z
2b3902f043813a23c5f5e2ebd22786689abcdf04,Bailout on assigning to module-scope variables,Joe Savona,2023-02-17T20:18:17Z
a2ebea4cde7bded4dfe73922b4f1b7435c7702db,Bailout on assigning to globals,Joe Savona,2023-02-17T18:02:56Z
ac9212f24e254456de3fbe23b6b9b71f1bbc8d8a,"Make globals configurable; populate a reasonable default list 

This is a precursor to validating that all identifiers are defined - we need to 
know about gobals and module declarations, so this PR adds the ability to 
configure a Set<string> of defined globals. The default list is inspired by the 
globals that prepack defines, which just comes from the spec definition.",Joe Savona,2023-02-17T17:47:59Z
6b654f306ceb204ec0b2b7fd5556f92a512aca57,"Construct LoadGlobal; consume hook info from types 

Updates BuildHIR to produce LoadGlobal instructions for references to globals. 
Note that this breaks our previous strategy of finding hook calls: that relied 
on looking at the callee of a CallExpression and checking its name, which relied 
on the callee not being lowered to a temporary. By lowering the name (eg 
`useState`) to a temporary first, we now no longer see the name at the callsite. 

Thankfully @gsathya solved this for us already by teaching type inference about 
hooks, and more generally implementing type inference. I updated this so that we 
infer the type of a LoadGlobal if the name is a hook: the type inference picks 
this up and propagates the type forward correctly. So now, all places that 
needed to check for a hook can just look at the type and everything works. 

This is much more robust than before - you can now reassign a hook to a local 
variable and we'll still detect that when you call it, you're calling a hook.",Joe Savona,2023-02-17T17:47:58Z
1a49e2d833ed24b4d541fc70659a19821585e570,"remove flow check in electron app.js (#26184)

When we were upgrading flow in
https://github.com/facebook/react/commit/6ddcbd4f96cb103de3978617a53c200baf5b546c
we added `$FlowFixMe` for some parameters in this file. However, this
file is not compiled at all, and the `:` syntax breaks the code.

This PR removes the flow check in this file",Mengdi Chen,2023-02-17T16:54:43Z
4fcc9184ac2662186cbf1470005bf2b7c67dd40b,"Test :Add a small test for ReactTestUtils to find rendered component with type in document (#24368)

I tried to write test for the ReactTestUtils to find rendered component
with type in document

Tests before this PR

![Windows PowerShell 4_13_2022 11_35_24
PM](https://user-images.githubusercontent.com/72331432/163243620-40eb753c-4136-4793-a628-efcf9e004562.png)


Tests after this PR 

![Windows PowerShell 4_13_2022 11_35_30
PM](https://user-images.githubusercontent.com/72331432/163244704-cd17f0e3-7289-4794-895a-be03753e46de.png)",BIKI DAS,2023-02-17T11:23:10Z
326e8c13f777ca6583f11e1be39a3025eec08cf4,"Scaffolding for LoadGlobal instruction 

Adds a new `LoadGlobal` InstructionValue variant which will be used to represent 
identifiers that refer to globals. We don't construct this value type yet.",Joe Savona,2023-02-16T23:17:30Z
0c72eed413d0c4a484d5f8bc122c5d2d231952b3,"Pass environment options through babel plugin 

Updates the babel plugin so that environment options — including custom hook 
definitions — can be passed in through the plugin: 

* Renames `CompilerFlags` => `PluginOptions` since they are specific to the 
babel plugin, and are no longer just flags. 

* Moves the definition of `useFreeze()` out of the builtin hook list and instead 
passes it when our unit tests configure the plugin.",Joe Savona,2023-02-16T22:24:15Z
8810076bc63b2fcf3a750f0be815a84272cc1ba9,"Lookup hook declarations on environment 

Changes from calling the global parseHookCall() function to looking up the hook 
declaration on the environment.",Joe Savona,2023-02-16T22:06:17Z
cee25928bf1d31a5ba60dccd8b39f3efcf940529,"Rename Environment => State for infer reference effects for clarity 

InferReferenceEffects needs to be able to pass around the function's 
Environment, but there is already a local class with that name. It's confusing 
to have two ""environment"" concepts in one file, so this PR renames that local 
class to the more appropriate `InferenceState` and renames local variables and 
updates comments accordingly.",Joe Savona,2023-02-16T22:06:16Z
eece73262e134a1351d3069a3b79da014e078e46,"Start of making globals and hook declarations configurable 

Some refactoring to allow the environment options to be passed in from the 
outside.",Joe Savona,2023-02-16T22:06:15Z
42106558ed31a186ea76ea548db3d7e1427c8043,React DevTools 4.27.1 -> 4.27.2 (#26185),Mengdi Chen,2023-02-16T21:46:23Z
21b49103d6e79706401b3d66e15f6a9a15edf8ce,"[difftrain] Remove dependency on node-fetch (#26182)

`fetch` is now provided by github-scripts implicitly in
https://github.com/actions/github-script/releases/tag/v6.4.0, so this
was causing a duplicate declaration error.",lauren,2023-02-16T20:47:12Z
158c9e4fc12f0d0f0cd9c91c946110e2e03fe8ac,"[be] Extract Environment to a separate file 

Precursor to making the environment configurable",Joe Savona,2023-02-16T18:47:27Z
530231712fdb60044285c3b0eee9e665433f86d6,"[be] Extract hooks helpers to separate file 

This is a precursor to allowing the set of custom hooks (and their behavior) to 
be configurable.",Joe Savona,2023-02-16T18:38:06Z
b05fc6a945dd7978986cc227b51421c80bcb191b,Repro of tagged template as hook arg,Joe Savona,2023-02-16T18:21:53Z
26e9e14d8589e68eb5f29ca85252e7b8f3b8abd3,Fix typo,Joe Savona,2023-02-16T17:04:45Z
849198da9d18be4b5fb924f96717d132e96ec479,Pass cache size to useMemoCache(),Joe Savona,2023-02-16T16:57:42Z
93775440a635f0a461d40b888e6be7666c8d2385,Minimal repros of product patterns,Joe Savona,2023-02-16T16:57:38Z
fe5ca23384ba1af3890a2912b3e747544a512501,Fix PrintHIR for TaggedTemplateExpression,Joe Savona,2023-02-16T16:57:34Z
e45f69154f3f4dd2868cad7e86407a701d0af6ec,Fix dropped temporary in value block,Joe Savona,2023-02-16T16:57:30Z
e504e1212ab804048ba317e10b6755bc982560d1,[be] Import from index instead of direct path,Joe Savona,2023-02-16T16:57:26Z
55ca5fc26c4d6558477574feb71acf3221d611fc,"[playground] add flow parsing 

I don't think there is a monaco config to parse flow (for IDE integration), but 
now we should be able to parse flow for the Forget compiler. 

Since typescript and flow has different parsing rules, playground will only use 
flow parser if `// @flow` is at the top of the file. 

Test: 
[link](https://react-forget-playground-j7nd7j8cv-fbopensource.vercel.app/#eyJzb3VyY2UiOiIvLyBAZmxvd1xuZnVuY3Rpb24gQ29tcG9uZW50KHByb3BzKSB7XG4gIGxldCB4ID0gKHByb3BzOiBudW1iZXIpO1xuICByZXR1cm4geDtcbn1cbiJ9)",mofeiZ,2023-02-16T16:54:27Z
189f70e17b8f5e1e81d6a3ae024b086895bbc0f6,"Create a bunch of custom webpack vs unbundled node bundles (#26172)

We currently have an awkward set up because the server can be used in
two ways. Either you can have the server code prebundled using Webpack
(what Next.js does in practice) or you can use an unbundled Node.js
server (what the reference implementation does).

The `/client` part of RSC is actually also available on the server when
it's used as a consumer for SSR. This should also be specialized
depending on if that server is Node or Edge and if it's bundled or
unbundled.

Currently we still assume Edge will always be bundled since we don't
have an interceptor for modules there.

I don't think we'll want to support this many combinations of setups for
every bundler but this might be ok for the reference implementation.

This PR doesn't actually change anything yet. It just updates the
plumbing and the entry points that are built and exposed. In follow ups
I'll fork the implementation and add more features.

---------

Co-authored-by: dan <dan.abramov@me.com>",Sebastian Markbåge,2023-02-16T16:01:52Z
fbf3bc31585f7142b66eb22770fac90aa9a7e2c1,"Add `scale` as a unitless property (#25601)

## Summary

CSS has a new property called `scale` (`scale: 2` is a shorthand for
`transform: scale(2)`).

In vanilla JavaScript, we can do the following:

```js
document.querySelector('div').scale = 2;
```

which will make the `<div>` twice as big. So in JavaScript, it is
possible to pass a plain number.
However, in React, the following does not work currently:


```js
<div style={{scale: 2}}>
```

because `scale` is not in the list of unitless properties. This PR adds
`scale` to the list.


## How did you test this change?

I built `react` and `react-dom` from source and copied it into the
node_modules of my project and verified that now `<div style={{scale:
2}}>` does indeed work whereas before it did not.",Jonny Burger,2023-02-16T10:12:32Z
2f401701921d13ab65e2a2ee1c96caa94f426442,"Don't recommend deprecated debugger script (#26171)

yarn debug-test is now deprecated in React package.json. It has been
replaced by yarn test --debug.



https://user-images.githubusercontent.com/72331432/219268188-8ff5dd42-da2b-434c-83be-72a9d258ee98.mp4",BIKI DAS,2023-02-16T10:11:12Z
0d0d3a4038574ba221d88da83b4cadca51757a34,"Ensure stable variable names after leaving SSA 

With this PR we now no longer emit copy instructions during LeaveSSA, and 
restore the original identifier name.",Lauren Tan,2023-02-15T20:22:03Z
d1fd0449eeb5207649e0d202081d971bf486cab8,[be] Linter fixes for LeaveSSA,Lauren Tan,2023-02-15T20:22:01Z
06e5681198c92ffce8fd3c0344a9034c2d75ddf7,[hir] Use receiver of CallExpression as dep,Sathya Gunasekaran,2023-02-15T15:03:29Z
008cebd633d5f28955a3ddd358c9e177d256ddc4,"[facepalm] Fix bug w missing deps 

While reviewing @poteto's PR I noticed that there were some cases of missing 
dependencies. I tracked it down to a bug I introduced 
[here](https://github.com/facebook/react-forget/commit/5b827eb85ce0b09a72e620449d1d676071c2e0b9#r100646304). 
Decl.id is meant to be the id of the instruction that declares the variable. We 
then test to see if a dependency is later than that. If the Decl.id is 
incorrectly too high, then we miss some dependencies thinking they aren't 
defined yet.",Joe Savona,2023-02-15T00:22:58Z
b7b0118afad57ae3a7861ffa9781ad855d54927f,InferReactiveIdentifiers handles Capture effect,Joe Savona,2023-02-14T23:48:52Z
9493e13709867440e4a9192d3a3d6348820b0d38,[be] Use switch for exhaustiveness,Joe Savona,2023-02-14T23:48:49Z
eda7788c4861e3bd55056a9984e78c9adef99a3f,"InferReactiveIdentifiers uses IdentifierId 

This is to help prep for @poteto's renaming PR. To make that PR work we 
generally need to use IdentifierId to distinguish ""the same identifier"" rather 
than Identifier object identity.",Joe Savona,2023-02-14T23:44:46Z
490c204dcf8b648994977e87cd3cc8c995ac8a32,"Move logic for making reactive scope decls all reactive 

InferReactiveIdentifiers has some extra logic to find identifiers declared in 
the same scope, and promote non-reactive identifiers to reactive if they appear 
inside a reactive scope (reactive scope == scope with one or more (reactive) 
dependencies). Even though the identifier alone might not be technically 
reactive (have no reactive inputs), it can get re-recreated if the scope 
re-evaluates. 

We can now do this during PruneNonReactiveDependencies as we exit out of each 
scope.",Joe Savona,2023-02-14T23:27:52Z
b1ee3568051c2edde1cd05721fae8b2dc7b9fc39,"InferReactiveIdentifiers: fixpoint iteration is now unnecessary 

I removed fixpoint iteration and all tests pass, which matches my intuition that 
it's really that we need strictly two passes. Removing to simplify and for 
performance (avoid unnecessary extra visits of the ast)",Joe Savona,2023-02-14T23:24:01Z
2b47cac5fdf3e96f2e69d9081f5a03db4a2c97a2,"Create a separate pass to prune non-reactive dependencies 

The fact that InferReactiveIdentifiers is integrated directly into 
PropagateScopeDependencies has made the latter pretty tricky to debug at times. 
If a dependency is missing, we have to introspect and figure out if that's 
because it was somehow inferred as non-reactive. This PR creates a new 
PruneNonReactiveDependencies pass to separate out these phases.",Joe Savona,2023-02-14T22:09:53Z
fb8f293c321050817cb1c1fdb201cc33954d089b,"[hir] Add a DropMemoCall pass 

This drops the memo hook calls from the IR",Sathya Gunasekaran,2023-02-14T23:07:19Z
e0562bbd51c8da906e62e34e335d2bacd48aba6e,[typer] Type hook callee as Hook type,Sathya Gunasekaran,2023-02-14T23:07:18Z
d0f1a9814429278143e906425dad212440517b1e,[typer] Introduce a Hook type,Sathya Gunasekaran,2023-02-14T23:07:17Z
1dfd51cdb074a141cdc2f82a312fd122db8ad44f,[hir] Add name field to Hook,Sathya Gunasekaran,2023-02-14T23:07:17Z
a65bf197d7f166c7778cffd2ef831ae182872f59,[hir] Add Memo hooks,Sathya Gunasekaran,2023-02-14T23:07:16Z
12ca0ba61b85288a31c8e1993cb2dba0ba52bf29,[hir] Simplify HookKind,Sathya Gunasekaran,2023-02-14T23:07:16Z
81b23f92423b06c411b6bbb6987d3056aa1ff47e,[typer][be] Add helper for checking type.kind,Sathya Gunasekaran,2023-02-14T19:10:37Z
5673588be4bed93ba327fbcf5d74eddf102d2566,[be] Tidy up some mutableRange logic,Joe Savona,2023-02-13T23:26:07Z
225fe0835cc34139ee8644dd4fd01e48f3d952d4,"Optimize DCE to visit CFG only once when there are no loops 

Optimizes dead code elimination. Currently it keeps iterating the control flow 
graph until no new usages have been discovered, which accounts for usages across 
loops. However, when there are no loops it's sufficient to iterate the CFG 
exactly once.",Joe Savona,2023-02-13T21:59:44Z
6b67f597a6bc286fdf716c6840ece0c56997aba1,"Capturing a frozen value is a Read 

If a value is known to be frozen (or potentially frozen), then it doesn't need 
to be considered 'captured' since no mutation can occur via aliasing.",Joe Savona,2023-02-14T17:33:23Z
759a7e027b814ab4982b25974d93abbbbcf9286a,"Fix incorrectly recording declarations in reassignments in 
PropagateScopeDependencies 

This was incorrectly added in #1190, oops!",Lauren Tan,2023-02-13T21:52:08Z
b5a0739e8c438e44c8205528728988a87a2d9b8c,Scopes with reassignments should still emit memo block,Lauren Tan,2023-02-13T21:52:07Z
a76627c9725baf996ce1ea5e83a9042f841ef6f1,"Use IdentifierIds to when comparing Identifier 

With the upcoming changes to SSA renaming in #1194, we rewrite phi operand 
identifiers to have the same IdentifierId as the declaration the identifier 
originated from: so downstream checks need to compare ids instead of the 
identifier instance.",Lauren Tan,2023-02-13T21:52:05Z
985a289a4c0e489f6bdfbdd911e4b1707c234c49,[BE] Various linter fixes,Lauren Tan,2023-02-13T21:52:04Z
fccf3a9fba5fd778c678657c556344b333111cfb,"Remove redundant test steps (#26161)

<!--
  Thanks for submitting a pull request!
We appreciate you spending the time to work on these changes. Please
provide enough information so that others can review your pull request.
The three fields below are mandatory.

Before submitting a pull request, please make sure the following is
done:

1. Fork [the repository](https://github.com/facebook/react) and create
your branch from `main`.
  2. Run `yarn` in the repository root.
3. If you've fixed a bug or added code that should be tested, add tests!
4. Ensure the test suite passes (`yarn test`). Tip: `yarn test --watch
TestName` is helpful in development.
5. Run `yarn test --prod` to test in the production environment. It
supports the same options as `yarn test`.
6. If you need a debugger, run `yarn debug-test --watch TestName`, open
`chrome://inspect`, and press ""Inspect"".
7. Format your code with
[prettier](https://github.com/prettier/prettier) (`yarn prettier`).
8. Make sure your code lints (`yarn lint`). Tip: `yarn linc` to only
check changed files.
  9. Run the [Flow](https://flowtype.org/) type checks (`yarn flow`).
  10. If you haven't already, complete the CLA.

Learn more about contributing:
https://reactjs.org/docs/how-to-contribute.html
-->

## Summary

This TODO mentions an issue with JSDOM that [seems to have been
resolved](https://github.com/jsdom/jsdom/pull/2996).

<!--
Explain the **motivation** for making this change. What existing problem
does the pull request solve?
-->

## How did you test this change?

- Ensured that the `document.activeElement` is no longer `node` after
`node.blur` is called.
- Verified that the tests still pass.
- Looked for [a merged PR that fixes the
issue](https://github.com/jsdom/jsdom/pull/2996).

<!--
Demonstrate the code is solid. Example: The exact commands you ran and
their output, screenshots / videos if the pull request changes the user
interface.
How exactly did you verify that your PR solves the issue you wanted to
solve?
  If you leave this empty, your PR will very likely be closed.
-->",Mateus Toledo,2023-02-13T20:47:42Z
86c8c8db7938319027132eeea81c9b7e28938f9d,"test: Don't retry flushActWork if flushUntilNextPaint threw (#26121)

## Summary

Fixes ""ReferenceError: You are trying to access a property or method of
the Jest environment after it has been torn down."" in
`ReactIncrementalErrorHandling-test.internal.js`

Alternatives:

1. Additional `await act(cb)` call where `cb` makes sure we can flush
until next paint without throwing
    ```js
    // Ensure test isn't exited with pending work
    await act(async () => {
      root.render(<App shouldThrow={false} />);
    });
    ```
1. Use `toFlushAndThrow`
    ```diff
    -    let error;
    -    try {
    -      await act(async () => {
    -        root.render(<App shouldThrow={true} />);
    -      });
    -    } catch (e) {
    -      error = e;
    -    }
    +    root.render(<App shouldThrow={true} />);
     
    -    expect(error.message).toBe('Oops!');
    +    expect(Scheduler).toFlushAndThrow('Oops!');
         expect(numberOfThrows < 100).toBe(true);
    ```

But then it still wouldn't make sense to pass `resolve` and `reject` to
the next `flushActWork`. Even if the next `flushActWork` would flush
until next paint without throwing, we couldn't resolve or reject because
we already did reject.
 

## How did you test this change?

- `yarn test --watch
packages/react-reconciler/src/__tests__/ReactIncrementalErrorHandling-test.internal.js`
produces no more errors after the test finishes.",Sebastian Silbermann,2023-02-13T20:45:59Z
31d8aad40ee10badd4829dd53fb06b625ac1ddc1,"[hir] Check if defined before looking up ValueKind 

This handles globals now without throwing",Sathya Gunasekaran,2023-02-13T16:32:50Z
4a4ef2706cfb51db96d48fe20dadcb4fb8e3cb17,"Remove unnecessary flowconfig ignore paths (#26159)

## Summary

By removing them, the flowconfig file will be cleaner and easier to
maintain.

## How did you test this change?

ci green",Ming Ye,2023-02-12T21:03:32Z
64acd3918a26d92773d3dd451a735603ef50d3a7,"remove unguarded getRootNode call (#26152)

I forgot to guard the `getRootNode` call in #26106 and it fails in IE8
and old jsdom. I consolidated the implementation a bit and removed the
unguarded call",Josh Story,2023-02-10T21:35:50Z
2de85d7c712ff0f052d9c92f8129ed476f8ce4d8,"Minor Jest upgrade (#26150)

Minor version bump to get the fix for `numPassingAsserts`:
https://github.com/facebook/jest/pull/13795

Test Plan:
CI",Jan Kassens,2023-02-10T19:06:14Z
71cace4d3267e4527964db51ccaf5eab7234f37f,"Migrate testRunner from jasmine2 to jest-circus (#26144)

## Summary

In jest v27, jest-circus as default test runner
(https://github.com/facebook/jest/pull/10686)

## How did you test this change?

ci green",Ming Ye,2023-02-10T18:39:14Z
b8ae89f38288bfae37dff54fa1ec4bf3b4555ed5,"Fix and update attribute-behavior fixture (#26114)

## Summary

Due to https://github.com/facebook/react/issues/25928 the attribute
fixture could no longer finish since it expects at least something to
render. But since Fizz currently breaks down completely on malformed
`<meta>` tags, the fixture could no longer handle this.

The fixture now renders valid types for `meta` tags.

Note that the snapshot change to `viewTarget`` is already on `main`.
Review by commit helps to understand this.

Added `html[lang]` so that we test at least one standard attribute on
`<html>`. `version` is obsolete so results are not that trustworthy.

## How did you test this change?

With Chrome Version 109.0.5414.119 (Official Build) (64-bit)

- `yarn build --type=UMD_DEV react/index,react-dom && cd
fixtures/attribute-behavior && yarn install && yarn start`",Sebastian Silbermann,2023-02-10T18:19:26Z
7277897405cc36b9832dc9b9055aec871197f4fe,"[test] Add test for broken lambda capturing 

SSA redefines context refs which breaks our inference. The correct fix here is 
to not overwrite context refs in EnterSSA.",Sathya Gunasekaran,2023-02-10T17:59:59Z
b56f413e99903badfbbd60b23352bf06943fddea,"[hir] Mark ArrayExpression capturing a context ref as a context ref 

A context ref capture is transitive.",Sathya Gunasekaran,2023-02-10T17:59:58Z
343ebb47bd9fdf109c7a092a169c2a296f7f9f3a,"[hir] Mark ObjectExpression capturing a context ref as a context ref 

A context ref capture is transitive.",Sathya Gunasekaran,2023-02-10T17:59:57Z
fa57551dd51d6d3ad38b0a0bdb7543b41726c5dc,"[hir] Introduce ValueKind.Context 

This tracks whether a value is a context ref or generated from a context ref. 

This lets us track mutations to context refs and treat it separately as we want 
this to be more conservative than our existing inference. 

ValueKind.Context is exactly like ValueKind.Mutable but is more conservative.",Sathya Gunasekaran,2023-02-10T17:59:56Z
2a9fab001a9af34848ebc7d98f5351a6d673cb62,"[be] Fix test 

'e' does not exist, use 'd' instead",Sathya Gunasekaran,2023-02-10T17:26:25Z
199e284edaf1d2fd8b034ca15cc4dbe0dad32456,[hir] Mark Identifiers aliased as Effect.Capture,Sathya Gunasekaran,2023-02-10T17:26:21Z
40a85432ed87d45ad9b91921bc96cc07286e6acd,[hir] Move inference logic to Env.reference,Sathya Gunasekaran,2023-02-10T17:26:17Z
6877ac6500d7d000ee63e8158cf4ad8e5ef24d3d,Fix update assignment on computed memberexpression,Joe Savona,2023-02-10T16:59:15Z
d9e0485c84b45055ba86629dc20870faca9b5973,"Bypass packages that are already published when confirmed by users (#26141)

## Summary

I ran into some two factor certification issue and had to resume the
publish script. However, this time if I confirmed the published package,
it will still try to publish the same version and fail. This is not
expected, and it blocks me from publishing the rest of the packages.

## How did you test this change?

I re-run the publish script after the change and successfully publish
the rest of the packages.

```
? Have you run the build-and-test script? Yes

✓ Checking NPM permissions for ryancat. 881 ms

? Please provide an NPM two-factor auth token: 278924


react-devtools version 4.27.2 has already been published.

? Is this expected (will skip react-devtools@4.27.2)? Yes


react-devtools-core version 4.27.2 has already been published.

? Is this expected (will skip react-devtools-core@4.27.2)? Yes

✓ Publishing package react-devtools-inline 23.1 secs

You are now ready to publish the extension to Chrome, Edge, and Firefox:
  https://fburl.com/publish-react-devtools-extensions

When publishing to Firefox, remember the following:
  Build id: 625690
  Git archive: ******
```",Xin Chen,2023-02-10T16:28:31Z
c8510227c1b9c4049979b81e998ec40545e2ce9b,"Treat displayName as undefined (#26148)

When we have a key we read displayName eagerly for future warnings.

In general, React should be inspecting if something is a client
reference before dotting into it. However, we use displayName a lot and
it kind of has defined meaning for debugging everywhere it's used so
seems fine to treat this as undefined.",Sebastian Markbåge,2023-02-10T16:23:48Z
55542bc73decab8337df3f7e519451b28593b04e,Update jest printBasicPrototype config (#26142),Ming Ye,2023-02-10T08:58:57Z
6396b664118442f3c2eae7bf13732fcb27bda98f,"Model Float on Hoistables semantics (#26106)

## Hoistables

In the original implementation of Float, all hoisted elements were
treated like Resources. They had deduplication semantics and hydrated
based on a key. This made certain kinds of hoists very challenging such
as sequences of meta tags for `og:image:...` metadata. The reason is
each tag along is not dedupable based on only it's intrinsic properties.
two identical tags may need to be included and hoisted together with
preceding meta tags that describe a semantic object with a linear set of
html nodes.

It was clear that the concept of Browser Resources (stylesheets /
scripts / preloads) did not extend universally to all hositable tags
(title, meta, other links, etc...)

Additionally while Resources benefit from deduping they suffer an
inability to update because while we may have multiple rendered elements
that refer to a single Resource it isn't unambiguous which element owns
the props on the underlying resource. We could try merging props, but
that is still really hard to reason about for authors. Instead we
restrict Resource semantics to freezing the props at the time the
Resource is first constructed and warn if you attempt to render the same
Resource with different props via another rendered element or by
updating an existing element for that Resource.

This lack of updating restriction is however way more extreme than
necessary for instances that get hoisted but otherwise do not dedupe;
where there is a well defined DOM instance for each rendered element. We
should be able to update props on these instances.

Hoistable is a generalization of what Float tries to model for hoisting.
Instead of assuming every hoistable element is a Resource we now have
two distinct categories, hoistable elements and hoistable resources. As
one might guess the former has semantics that match regular Host
Components except the placement of the node is usually in the <head>.
The latter continues to behave how the original implementation of
HostResource behaved with the first iteration of Float

### Hoistable Element
On the server hoistable elements render just like regular tags except
the output is stored in special queues that can be emitted in the stream
earlier than they otherwise would be if rendered in place. This also
allow for instance the ability to render a hoistable before even
rendering the <html> tag because the queues for hoistable elements won't
flush until after we have flushed the preamble (`<DOCTYPE
html><html><head>`).

On the client, hoistable elements largely operate like HostComponents.
The most notable difference is in the hydration strategy. If we are
hydrating and encounter a hoistable element we will look for all tags in
the document that could potentially be a match and we check whether the
attributes match the props for this particular instance. We also do this
in the commit phase rather than the render phase. The reason hydration
can be done for HostComponents in render is the instance will be removed
from the document if hydration fails so mutating it in render is safe.
For hoistables the nodes are not in a hydration boundary (Root or
SuspenseBoundary at time of writing) and thus if hydration fails and we
may have an instance marked as bound to some Fiber when that Fiber never
commits. Moving the hydration matching to commit ensures we will always
succeed in pairing the hoisted DOM instance with a Fiber that has
committed.

### Hoistable Resource
On the server and client the semantics of Resources are largely the same
they just don't apply to title, meta, and most link tags anymore.
Resources hoist and dedupe via an `href` key and are ref counted. In a
future update we will add a garbage collector so we can clean up
Resources that no longer have any references

## `<style>` support
In earlier implementations there was no support for <style> tags. This
PR adds support for treating `<style href=""...""
precedence=""..."">...</style>` as a Resource analagous to `<link
rel=""stylesheet"" href=""..."" precedence=""..."" />`

It may seem odd at first to require an href to get Resource semantics
for a style tag. The rationale is that these are for inlining of actual
external stylesheets as an optimization and for URI like scoping of
inline styles for css-in-js libraries. The href indicates that the key
space for `<style>` and `<link rel=""stylesheet"" />` Resources is shared.
and the precedence is there to allow for interleaving of both kinds of
Style resources. This is an advanced feature that we do not expect most
app developers to use directly but will be quite handy for various
styling libraries and for folks who want to inline as much as possible
once Fizz supports this feature.

## refactor notes
* HostResource Fiber type is renamed HostHoistable to reflect the
generalization of the concept
* The Resource object representation is modified to reduce hidden class
checks and to use less memory overall
* The thing that distinguishes a resource from an element is whether the
Fiber has a memoizedState. If it does, it will use resource semantics,
otherwise element semantics
* The time complexity of matching hositable elements for hydration
should be improved",Josh Story,2023-02-10T06:59:29Z
5746d5b07f418c36c7372b863813723c2d25087b,"Temporary workaround for emitting temporaries multiple times 

This is a temporary fix for the issue we discovered on our first integration, 
where destructuring of a function return value is emitting the function call 
multiple times: 

```javascript 

// Input 

const [x, setX] = useState(null); 

// Output 

const x = useState(null)[0]; 

const setX = useState(null)[1]; 

``` 

The reason this happens is that we lower `useState(null)` to a temporary, and 
then generate a ComputedLoad for each of x and setX. Codegen doesn't emit 
temporaries eagerly - it assumes they are going to be used exactly once and it 
re-emits the value each time the temporary is used. Hence why the 
`useState(null)` part gets duplicated in the output. 

Right now destructuring is the only place i'm aware of where we reuse 
temporaries this way. And we do want to change codegen to preserve destructuring 
in the output to correctly handle array patterns. However, that's a more 
involved change. For now, this PR is a stopgap. During the pass where we promote 
temporaries used in scopes to named variables, we now check to see if those 
temporaries are used multiple times and promote them. 

The above example would then generate something like 

```javascript 

const t0 = useState(null); 

const x = t0[0]; 

const setX = t0[1]; 

``` 

This is still incorrect (it assumes t0 is an array), but it's more likely to 
work in practice. I'll revert this change once we correctly handle 
destructuring.",Joe Savona,2023-02-10T01:22:54Z
ef9f6e77b8ef968eee659ae797da4bdc07bbbde3,"Enable passing Server References from Server to Client (#26124)

This is the first of a series of PRs, that let you pass functions, by
reference, to the client and back. E.g. through Server Context. It's
like client references but they're opaque on the client and resolved on
the server.

To do this, for security, you must opt-in to exposing these functions to
the client using the `""use server""` directive. The `""use client""`
directive lets you enter the client from the server. The `""use server""`
directive lets you enter the server from the client.

This works by tagging those functions as Server References. We could
potentially expand this to other non-serializable or stateful objects
too like classes.

This only implements server->server CJS imports and server->server ESM
imports. We really should add a loader to the webpack plug-in for
client->server imports too. I'll leave closures as an exercise for
integrators.

You can't ""call"" a client reference on the server, however, you can
""call"" a server reference on the client. This invokes a callback on the
Flight client options called `callServer`. This lets a router implement
calling back to the server. Effectively creating an RPC. This is using
JSON for serializing those arguments but more utils coming from
client->server serialization.",Sebastian Markbåge,2023-02-10T00:45:05Z
6c75d4e00961f7d5679ad3bf85ead8d96b824d08,"Delete blocks fixture (#26143)

It's not really up-to-date and it's not really show casing anything we
don't have elsewhere.",Sebastian Markbåge,2023-02-09T23:44:37Z
35698311de3c068be9a542e1a2c545d718ec4782,"Update jest escapeString config (#26140)

## Summary

In jest v29, snapshotFormat default to escapeString:
false(https://github.com/facebook/jest/pull/13036)

## How did you test this change?

ci green",Ming Ye,2023-02-09T23:08:37Z
6ddcbd4f96cb103de3978617a53c200baf5b546c,"[flow] enable LTI inference mode (#26104)

This is the next generation inference mode for Flow.",Jan Kassens,2023-02-09T22:07:39Z
dd228c9ed022bf9c32d672dcda3ce2c5f9657891,"[be] non-blocking ESLint config, fixes 

Configures typescript-eslint for the project with an initial configuration that 
starts with their recommended rules, and adds/disables a few (generally either 
disabling warnings or promoting them to errors). The new `yarn lint` command is 
not hooked up to CI yet, so for now this is something we can opt-in to running 
locally. If you have some free time, help get us down to zero errors! 

My general philosophy for linting, which I propose we follow, is that lints 
should be very high-signal: 

* Error, don't warn. If it's worth mentioning it's worth fixing. 

* Enable rules that consistently identify real problems. If we frequently would 
have to disable the rule due to false positives, it isn't high-signal. 

* Enable rules that help improve consistent style (to avoid code review about 
style rather than substance).",Joe Savona,2023-02-09T19:58:06Z
8eb5feb847e4c399fb9525ca816477bf422994d3,[be] Cleanup BuildHIR,Joe Savona,2023-02-09T19:41:04Z
53b1f69ba6c08083e4934373d3f6f2e31b232874,"Implement unstable_getBoundingClientRect in RN Fabric refs (#26137)

We're fixing the timing of layout and passive effects in React Native,
and adding support for some Web APIs so common use cases for those
effects can be implemented with the same code on React and React Native.

Let's take this example:

```javascript
function MyComponent(props) {
  const viewRef = useRef();

  useLayoutEffect(() => {
    const rect = viewRef.current?.getBoundingClientRect();
    console.log('My view is located at', rect?.toJSON());
  }, []);

  return <View ref={viewRef}>{props.children}</View>;
}
```

This could would work as expected on Web (ignoring the use of `View` and
assuming something like `div`) but not on React Native because:
1. Layout is done asynchronously in a background thread in parallel with
the execution of layout and passive effects. This is incorrect and it's
being fixed in React Native (see
https://github.com/facebook/react-native/commit/afec07aca273503b0647dbf1f73c518c6e52e8ba).
2. We don't have an API to access layout information synchronously. The
existing `ref.current.measureInWindow` uses callbacks to pass the
result. That is asynchronous at the moment in Paper (the legacy renderer
in React Native), but it's actually synchronous in Fabric (the new React
Native renderer).

This fixes point 2) by adding a Web-compatible method to access layout
information (on Fabric only).

This has 2 dependencies in React Native:
1. Access to `getBoundingClientRect` in Fabric, which was added in
https://github.com/facebook/react-native/blob/main/ReactCommon/react/renderer/uimanager/UIManagerBinding.cpp#L644-
L676
2. Access to `DOMRect`, which was added in
https://github.com/facebook/react-native/commit/673c7617bcf90a892a0afc2c0d9cf9c0493fdf27
.

As next step, I'll modify the implementation of this and other methods
in Fabric to warn when they're accessed during render. We can't do this
on Web because we can't (shouldn't) modify built-in DOM APIs, but we can
do it in React Native because the refs objects are built by the
framework.",Rubén Norte,2023-02-09T18:51:47Z
c0b0b3a9f80fd57e882859afd95c2f08599442ba,"Only restore Yarn caches on exact key hits (#26133)

## Summary

[Current Yarn cache size:
555MB](https://app.circleci.com/pipelines/github/facebook/react/38163/workflows/70d0149e-b0bc-44e8-b8c9-e5c744cab89b/jobs/625334?invite=true#step-102-2)
[Used Yarn cache size:
344MB](https://app.circleci.com/pipelines/github/facebook/react/38166/workflows/4825d444-1426-4321-b95b-c540e6cdc6d7/jobs/625354?invite=true#step-104-5)

When we restore a global Yarn cache that's not specific to a lockfile
entry (i.e. a fallback cache), we might restore packages that are no
longer used. When we then run yarn install, we potentially add new
packages to the cache.
For example: 
1. we bump a package version
2. lockfile changes
3. cache restore misses for exact key
4. cache restore hits a prefix (fallback) containing the older version, 
5. yarn install adds the new version to the cache

Yarn is not clearing the unused packages from the global cache. So when
we then save the cache we now retain the old and new version of a
package in the global cache even though the old version is no longer
used.
This means that the global cache grows indefinitely. Restoring the cache
isn't free so CI install times will degrade over time.

Either we
1. periodically prune the cache
2. just not restore anything unless we have an exact hit. 


The chosen tradeoff depends on the
relation of commits changing deps to commits not changing deps. 
From my experience, we change deps rarely so I opted to only restore the
cache on exact hits.

## How did you test this change?

- run on `main` has 555MB of Yarn cache:
https://app.circleci.com/pipelines/github/facebook/react/38163/workflows/70d0149e-b0bc-44e8-b8c9-e5c744cab89b/jobs/625334?invite=true#step-102-2
- run on this branch only has 334MB of Yarn cache:
https://app.circleci.com/pipelines/github/facebook/react/38166/workflows/4825d444-1426-4321-b95b-c540e6cdc6d7/jobs/625354?invite=true#step-104-5",Sebastian Silbermann,2023-02-09T17:00:11Z
59409349671d7c096975025ff21996c525e4ae2b,"Update to Jest 29 (#26088)

## Summary

- yarn.lock diff +-6249, **small pr**
- use jest-environment-jsdom by default
- uncaught error from jsdom is an error object instead of strings
- abortSignal.reason is read-only in jsdom and node,
https://developer.mozilla.org/en-US/docs/Web/API/AbortSignal/reason

## How did you test this change?

ci green

---------

Co-authored-by: Sebastian Silbermann <silbermann.sebastian@gmail.com>",Ming Ye,2023-02-09T16:07:49Z
28fcae062bff2b611cd935911f8666b0627b9551,"Add support for SVG `transformOrigin` prop (#26130)

Co-authored-by: eps1lon <silbermann.sebastian@gmail.com>",Aravind D,2023-02-09T12:47:50Z
3ff1540e9bbe30aae52e2c9ab61c843bd0c94237,"Prefer JSX in ReactNoop assertions (to combat out-of-memory test runs) (#26127)

## Summary

Prefer `getChildrenAsJSX` or `toMatchRenderedOutput` over `getChildren`.
Use `dangerouslyGetChildren` if you really need to (e.g. for `toBe`
assertions).

Prefer `getPendingChildrenAsJSX` over `getPendingChildren`. Use
`dangerouslyGetPendingChildren` if you really need to (e.g. for `toBe`
assertions).

`ReactNoop.getChildren` contains the fibers as non-enumerable
properties. If you pass the children to `toEqual` and have a mismatch,
Jest performance is very poor (to the point of causing out-of-memory
crashes e.g.
https://app.circleci.com/pipelines/github/facebook/react/38084/workflows/02ca0cbb-bab4-4c19-8d7d-ada814eeebb9/jobs/624297/parallel-runs/5?filterBy=ALL&invite=true#step-106-27).
Mismatches can sometimes be intended e.g. on gated tests.

Instead, I converted almost all of the `toEqual` assertions to
`toMatchRenderedOutput` assertions or compare the JSX instead. For
ReactNoopPersistent we still use `getChildren` since we have assertions
on referential equality. `toMatchRenderedOutput` is more accurate in
some instances anyway. I highlighted some of those more accurate
assertions in review-comments.

## How did you test this change?

- [x] `CIRCLE_NODE_TOTAL=20 CIRCLE_NODE_INDEX=5 yarn test
-r=experimental --env=development --ci`: Can take up to 350s (and use up
to 7GB of memory) on `main` but 11s on this branch
- [x] No more slow `yarn test` parallel runs of `yarn_test` jobs (the
steps in these runs should take <1min but sometimes they take 3min and
end with OOM like
https://app.circleci.com/pipelines/github/facebook/react/38084/workflows/02ca0cbb-bab4-4c19-8d7d-ada814eeebb9/jobs/624258/parallel-runs/5?filterBy=ALL:
Looks good with a sample size of 1
https://app.circleci.com/pipelines/github/facebook/react/38110/workflows/745109a2-b86b-429f-8c01-9b23a245417a/jobs/624651",Sebastian Silbermann,2023-02-09T10:54:35Z
78d2e9e2a894a7ea9aa3f9faadfc4c6038e86a75,"Replace DevTools `semver` usages with `compare-versions` for smaller bundle size (#26122)

<!--
  Thanks for submitting a pull request!
We appreciate you spending the time to work on these changes. Please
provide enough information so that others can review your pull request.
The three fields below are mandatory.

Before submitting a pull request, please make sure the following is
done:

1. Fork [the repository](https://github.com/facebook/react) and create
your branch from `main`.
  2. Run `yarn` in the repository root.
3. If you've fixed a bug or added code that should be tested, add tests!
4. Ensure the test suite passes (`yarn test`). Tip: `yarn test --watch
TestName` is helpful in development.
5. Run `yarn test --prod` to test in the production environment. It
supports the same options as `yarn test`.
6. If you need a debugger, run `yarn debug-test --watch TestName`, open
`chrome://inspect`, and press ""Inspect"".
7. Format your code with
[prettier](https://github.com/prettier/prettier) (`yarn prettier`).
8. Make sure your code lints (`yarn lint`). Tip: `yarn linc` to only
check changed files.
  9. Run the [Flow](https://flowtype.org/) type checks (`yarn flow`).
  10. If you haven't already, complete the CLA.

Learn more about contributing:
https://reactjs.org/docs/how-to-contribute.html
-->

## Summary

This PR:

- Replaces the existing usages of methods from the `semver` library in
the React DevTools source with an inlined version based on
https://www.npmjs.com/package/semver-compare.

This appears to drop the unminified bundle sizes of 3 separate
`react-devtools-extensions` build artifacts by about 50K:


![image](https://user-images.githubusercontent.com/1128784/217326947-4c26d1be-d834-4f77-9e6e-be2d5ed0954d.png)


## How did you test this change?

I was originally working on [a fork of React
DevTools](https://github.com/replayio/react/pull/2) for use with
https://replay.io , specifically our integration of the React DevTools
UI to show the React component tree while users are debugging a recorded
application.

As part of the dev work on that fork, I wanted to shrink the bundle size
of the extension's generated JS build artifacts. I noted that the
official NPM `semver` library was taking up a noticeable chunk of space
in the bundles, and saw that it's only being used in a handful of places
to do some very simple version string comparisons.

I was able to replace the `semver` imports and usages with a simple
alternate comparison function, and confirmed via hands-on checks and
console logging that the checks behaved the same way.

Given that, I wanted to upstream this particular change to help shrink
the real extension's bundle sizes.

I know that it's an extension, so bundle size isn't _as_ critical a
concern as it would be for a pure library. But, smaller download sizes
do benefit all users, and that also includes sites like CodeSandbox and
Replay that are using the React DevTools as a library as well.

I'm happy to tweak this PR if necessary.  Thanks!",Mark Erikson,2023-02-09T01:00:22Z
41f52b73c2da70dbd0fa70d26b95ae1fcfcd6693,"Change reference effects for hooks 

I realized we hadn't updated InferReferenceEffects to match our latest thinking 
on hooks. Specifically, we will default to assuming that hooks can mutate their 
arguments and return mutable values — this works with our model since we don't 
treat hooks specially for reactive scope construction. Ie, first we figure out 
what variables construct together, then we create scopes, then we prune scopes 
that contain hooks. So changing the reference effects for hooks ""just works"". 

Note that it is helpful for our unit tests to have an example hook that we know 
_does_ freeze its input and return a frozen value, so i've temporarily added 
`useFreeze()` to the list of defined hooks. That is meant as a stopgap: the 
right solution is to allow some way to tell the compiler about specific custom 
hooks and their semantics.",Joe Savona,2023-02-08T22:24:14Z
7f60f321186ae64001adff905fdc1403aee327f2,Dont memoize scopes with hook calls,Joe Savona,2023-02-08T22:07:01Z
c7e3bc4d413fd5a17597bd345dc8766ceed983ea,"Visitor extension for transforming ReactiveFunction 

Adds a subclass of ReactiveFunctionVisitor, ReactiveFunctionTransform, which 
makes it easier to write passes that change the shape of a ReactiveFunction. The 
two use-cases converted so far are both flattening away certain categories of 
reactive scopes — this will make it easier to add a similar pass to prune scopes 
that contain hook calls.",Joe Savona,2023-02-08T22:07:00Z
a3152eda5f89e20f056521855f7fa101ce50e4c3,"support ReactDOM.render(..., document) without crashing (#26129)

as reported in #26128 `ReactDOM.render(..., document)` crashed when
`enableHostSingletons` was on. This is because it had a different way of
clearing the container than `createRoot(document)`. I updated the legacy
implementation to share the clearing behavior of `creatRoot` which will
preserve the singleton instances.

I also removed the warning saying not to use `document.body` as a
container",Josh Story,2023-02-08T19:32:38Z
394666118d565d00cf2874c6c71e2c92ce714606,[hir] Lower function expressions into HIR,Sathya Gunasekaran,2023-02-08T17:45:33Z
662b8d2ff3f9da4576646de621b161e1e63cefe2,[hir] Add lvalue effect for PropertyLoad and ComputedLoad,Sathya Gunasekaran,2023-02-08T16:01:36Z
d47f608c612082b82d9d5c79f696f86e394a4d1a,"Record reassignments 

Record a variable that is declared in some other scope and that is being 
reassigned in the current one as a reassignment",Lauren Tan,2023-02-08T15:26:33Z
e7f4eae619cd38c829c62f5a6f869b50f7789c70,Reset canonicalId mutable range if not mutated after creation,Lauren Tan,2023-02-08T15:26:31Z
6f661f3b799bc4aea96be2d6a9808801a11327b3,Extend mutable ranges if a phi is mutated after creation,Lauren Tan,2023-02-08T15:26:29Z
d43a5014f4ffa76251178dfac9e32c699c598d75,Rename ReactiveScope.outputs to ReactiveScope.declarations,Lauren Tan,2023-02-08T15:26:27Z
1809ffd06d4b37f1012284c6cc19558e1f74ced5,"Add new test cases for SSA 

Add these as a separate commit so we can see how later PRs in the stack change 
them",Lauren Tan,2023-02-08T15:26:26Z
5888cbdd9bbfa36979cb6fc3313f94c0c5c263d1,Don't throw on invalid compiler flags,Lauren Tan,2023-02-08T15:26:24Z
758fc7fde10f49912b18496299506cba30d6029b,"Support highlights for React Native apps in dev tools (#26060)

<!--
  Thanks for submitting a pull request!
We appreciate you spending the time to work on these changes. Please
provide enough information so that others can review your pull request.
The three fields below are mandatory.

Before submitting a pull request, please make sure the following is
done:

1. Fork [the repository](https://github.com/facebook/react) and create
your branch from `main`.
  2. Run `yarn` in the repository root.
3. If you've fixed a bug or added code that should be tested, add tests!
4. Ensure the test suite passes (`yarn test`). Tip: `yarn test --watch
TestName` is helpful in development.
5. Run `yarn test --prod` to test in the production environment. It
supports the same options as `yarn test`.
6. If you need a debugger, run `yarn debug-test --watch TestName`, open
`chrome://inspect`, and press ""Inspect"".
7. Format your code with
[prettier](https://github.com/prettier/prettier) (`yarn prettier`).
8. Make sure your code lints (`yarn lint`). Tip: `yarn linc` to only
check changed files.
  9. Run the [Flow](https://flowtype.org/) type checks (`yarn flow`).
  10. If you haven't already, complete the CLA.

Learn more about contributing:
https://reactjs.org/docs/how-to-contribute.html
-->

## Summary

<!--
Explain the **motivation** for making this change. What existing problem
does the pull request solve?
-->

This pull request emit the trace update events `drawTraceUpdates` with
the trace frame information when the trace update drawer runs outside of
web environment. This allows React Devtool running in mobile or other
platforms have a chance to render such highlights and provide similar
feature on web to provide re-render highlights. This is a feature needed
for identifying unnecessary re-renders.

## How did you test this change?

<!--
Demonstrate the code is solid. Example: The exact commands you ran and
their output, screenshots / videos if the pull request changes the user
interface.
How exactly did you verify that your PR solves the issue you wanted to
solve?
  If you leave this empty, your PR will very likely be closed.
-->

I tested this change with Flipper desktop app running against mobile
app, and verified that the event with correct array of frames are
passing through properly.",Xin Chen,2023-02-07T22:47:05Z
01a0c4e12c6aa9732d290e13b1452f72d276934d,"Add Edge Server Builds for workerd / edge-light (#26116)

We currently abuse the browser builds for Web streams derived
environments. We already have a special build for Bun but we should also
have one for [other ""edge""
runtimes](https://runtime-keys.proposal.wintercg.org/) so that we can
maximally take advantage of the APIs that exist on each platform.

In practice, we currently check for a global property called
`AsyncLocalStorage` in the server browser builds which we shouldn't
really do since browsers likely won't ever have it. Additionally, this
should probably move to an import which we can't add to actual browser
builds where that will be an invalid import. So it has to be a separate
build. That's not done yet in this PR but Vercel will follow
Cloudflare's lead here.

The `deno` key still points to the browser build since there's no
AsyncLocalStorage there but it could use this same or a custom build if
support is added.",Sebastian Markbåge,2023-02-07T20:10:01Z
24b28ae25748098f025892cdd23c776203f73367,"[λ] Remove broken support for identifiers defined after use 

This also adds some book keeping to throw if ever define identifiers after use 
to make sure we don't generate incorrect code.",Sathya Gunasekaran,2023-02-07T18:25:55Z
f0cf832e1d0c8544c36aa8b310960885a11a847c,"Update Flight Fixture to ""use client"" instead of .client.js (#26118)

This updates the Flight fixture to support the new ESM loaders in newer
versions of Node.js.

It also uses native fetch since react-fetch is gone now. (This part
requires Node 18 to run the fixture.)

I also updated everything to use the `""use client""` convention instead
of file name based convention.

The biggest hack here is that the Webpack plugin now just writes every
`.js` file in the manifest. This needs to be more scoped. In practice,
this new convention effectively requires you to traverse the server
graph first to find the actual used files. This is enough to at least
run our own fixture though.

I didn't update the ""blocks"" fixture.

More details in each commit message.",Sebastian Markbåge,2023-02-07T17:09:29Z
d1dbb007901a2be3a8ae55e12c72f703c7c89391,[hir] Throw if Effect.Store is not handled,Sathya Gunasekaran,2023-02-07T16:59:37Z
3df1ae66c0cf48e09e1f6fcbfa8d86b9dd8ebe4b,"[λ] Use Effect.Capture for mutating deps 

Leverage Effect.Capture to differentiate between mutating and non mutating deps.",Sathya Gunasekaran,2023-02-07T16:59:36Z
85c92bcfbe04c0edb8ec2bc850ec0d4edda6bb19,"[aliasing] Introduce Effect.Capture 

Effect.Capture is very similar to Effect.Read, but the only difference is that 
this reference is stored somewhere via a Effect.Store. 

Previously, any operand associated with a Effect.Store in the same instruction 
would get aliased -- so there was no need to explicitly differentiate between a 
""normal read"" and ""read that gets stored"". 

This difference is now explicit with FunctionExpression where every dependency 
is ""read"" but only a few are ""captured"" for store (and mutation). In a follow up 
PR, the mutating deps will have an Effect.Capture to differentiate from the 
other non mutating deps (Effect.Read).",Sathya Gunasekaran,2023-02-07T16:59:35Z
4e07b8a869aa9910b2128caf5a5b5bb338de3651,"[hir] Do not alias Identifier as Store 

Identifiers are never stored (Effect.Store), they are always mutated 
(Effect.Mutate) and aliased in the InferAlias pass.",Sathya Gunasekaran,2023-02-07T16:59:35Z
13f4ccfdba06b599a5db7c5a192024cbfa365edc,"Fix main (#26120)

## Summary

Prettier was bumped recently. So any branch not including that bump,
might bring in outdated formatting (e.g.
https://github.com/facebook/react/pull/26068)

## How did you test this change?

- [x] `yarn prettier-all`",Sebastian Silbermann,2023-02-07T16:57:43Z
195f473cb4dac36a98e87e37de19694f0b1cd5d4,"s/useMemoCache/unstable_useMemoCache 

uMC is still prefixed with unstable in React 
(https://github.com/facebook/react/blob/653dd2348ccfd7bfa4e11d814e247ed3ff7c5fa7/packages/react/src/React.js#L143)",Lauren Tan,2023-02-07T16:40:06Z
1f7cd2ff21f82443e69b7445a542217efeec2c63,[hir] Remove unnecessary null check,Sathya Gunasekaran,2023-02-07T15:08:38Z
9cac0b00685f0c140a1d36e8ed0fe89ae7e227c5,"Ensure Forget runs first if specified in a Babel config 

This commit adds a new Program visitor to our Babel plugin which then calls our 
FunctionDeclaration visitor. Babel does some ""smart"" merging of plugin passes so 
so even if plugin A is inserted prior to plugin B, if A does not have a Program 
visitor and B does, B will run first. 

Note that we also can't use Forget inside of a Babel preset as plugins run 
_before_ presets (https://babeljs.io/docs/en/plugins/#plugin-ordering).",Lauren Tan,2023-02-07T16:11:58Z
c12194f7485f298fadc1e51cfffb93e63d61ad96,"[DevTools] improve error handling in extension (#26068)

## Summary

This is to fix some edge cases I recently observed when developing and
using the extension:
- When you reload the page, there's a chance that a port (most likely
the devtools one) is not properly unloaded. In this case, the React
DevTools will stop working unless you create a new tab.
- For unknown reasons, Chrome sometimes spins up two service worker
processes. In this case, an error will be thrown ""duplicate ID when
registering content script"" and sometimes interrupt the execution of the
rest of service worker.

This is an attempt to make the logic more robust 
- Automatically shutting down the double pipe if the message fails, and
allowing the runtime to rebuild the double pipe.
- Log the error message so Chrome believes we've handled it and will not
interrupt the execution.

This also seems to be helpful in fixing #25806.",Mengdi Chen,2023-02-07T12:59:44Z
e159844b0d95cc65f3001c003d95faac6cf35b17,"Add generated code to errors thrown by BabelPlugin 

If we've generated an erroneous AST (eg duplicate declarations), this lets us 
observe what the code looked like to aid debugging",Lauren Tan,2023-02-07T00:03:54Z
0d2653dbd44c9f355134a48584d6aac12793a981,"Use parent of AssigmentExpressions when bailing out 

For some reason the expression itself wont print the codeframe, but its parent 
will, so print that instead",Lauren Tan,2023-02-06T22:32:30Z
382226ab3154967af30dd94ed61846eae5e2fe6b,Add missing return statements to fixtures,Joe Savona,2023-02-06T22:09:15Z
1445acf777a6e503e6c15e78dd4257abbd7a2264,"[CI] cache yarn instead of node_modules (#25834)

The current caching of steps of `node_modules` doesn't work reliable as
is because it includes `arch` in the cache key. `arch` might be
different across workers in the same commit.

I couldn't find a way to optionally restore caches, so what this PR does
is:
- remove the setup step that ran before all other steps and essentially
just populates a circle CI cache key
- all other steps now do: restore yarn cache, `yarn install`, save yarn
cache (fast if already exists)

With this change the initial batch of jobs all race to populate the
cache, but any subsequent jobs should find the existing cache. The
expected downside would be slightly more worker CPU time with all the
parallel jobs, but wall time might be shorter (1 step less in the
critical path) and we should be more reliable as we no longer have the
failure with multiple archs.


## Alternative 1
Remove the `{arch}` from the cache key.

Downside: this might run into weird issues with native dependencies.

## Alternative 2
Somehow check if the cache was restored and only then run a yarn
install.

Downside: couldn't figure out if it's possible to only restore the yarn
cache if restoring the node_modules cache failed. Without that we'd
either always restore both the yarn and node_modules cache or do yarn
installs w/o cache which are prone to failure in the past.",Jan Kassens,2023-02-06T21:11:17Z
03a216070dfe14ff8fecaee2fa95ca6d6e94846d,"Rename ""dom"" fork to ""dom-node"" and ""bun"" fork to ""dom-bun"" (#26117)

The ""dom"" configuration is actually the node specific configuration. It
just happened to be that this was the mainline variant before so it was
implied but with so many variants, this is less obvious now.

The ""bun"" configuration is specifically for ""bun"". There's no ""native""
renderer for ""bun"" yet.",Sebastian Markbåge,2023-02-06T20:54:14Z
4bf2113a153522904e34e7a2cef3c1de1c10cbec,"Revert ""Move the Webpack manifest config to one level deeper (#26083)""  (#26111)

Just kidding. We're not going to need any other fields afaik after all.",Sebastian Markbåge,2023-02-06T15:50:52Z
500cfddc3a67c7b9521ab3285f926b2e571fec5e,[λ] Remove unused params in FunctionExpression,Sathya Gunasekaran,2023-02-06T14:03:13Z
cd108cd430fecda79b2d75abacbe9e5c7ac4eee8,"Add enableOnlyOnUseForgetDirective flag 

When this flag is enabled, Forget will only compile function declarations opted 
in via the `'use forget'` directive. By default this is false. 

Tested internally, see related diffs",Lauren Tan,2023-02-06T21:47:35Z
b0096264315bd4efe9f404c8b65039120c5e8a49,"Improve DCE to handle unused loop phis 

Improves DCE, using fixpoint iteration to detect values that are updated across 
loops but otherwise never read. There is still some further optimization we can 
do (the dce-loop case could optimize out `y`), but this seems like plenty for 
now. 

Actually, we probably have to add some return statements to our fixtures before 
landing this, because otherwise most of the code goes away.",Joe Savona,2023-02-03T23:46:00Z
19e21b73a7962d458b2f34c5c6becb622f13bf5c,"Initial pass at dead code elimination 

This is a first pass at DCE without having read any literate on the subject, so 
lemme know if there's a better approach. That said the algorithm is: 

* Keep a `Set<Identifier>` of identifiers that are used (and whose constructing 
logic cannot be removed). 

* Do a first RPO iteration of all block's phis. Any phi operand that 
participates in a loop is preemptively marked as ""used"" even if it isn't 
strictly used somewhere. This step is necessary bc these operands may otherwise 
not be used. 

* Do a second post-order iteration of all blocks, including iterating first 
their terminals, then reverse iteration of instructions, then their phis. Mark 
the operands of each as used as we encounter them, and prune instructions whose 
lvalue is never used. 

For now I was conservative about which types of instructions can be pruned. For 
example, call instructions are never pruned, even if the result of the call is 
never used. 

However one catch is that we currently prune instructions that cause values to 
become frozen. We had planned to add runtime calls (in dev) to freeze values for 
runtime enforcement, and if we want to do that we can always add these 
instructions back (or replace them with explicit freeze calls). 

There are a few potential next steps but we should discuss whether they're worth 
it: 

* Use fixpoint iteration to find exactly which operands are actually used. This 
would allow us to to prune cases such as `let x = 0; while (...) { x += 1 }` eg 
where there's a phi but the result is never used. Such cases should be rare in 
practice though. 

* Eliminate more types of instructions, eg eliminate function calls that don't 
have any mutable arguments.",Joe Savona,2023-02-03T22:55:49Z
812e0ce7010ca9475a10981609467a9f5b6b5eac,"[valueblocks] Join blocks instead of replacing operands (fix edge case) 

There's a bug in the HIR->ReactiveFunction conversion for certain categories of 
compound value blocks where we replace operands (which must be a Place) with a 
ReactiveValue. This approach worked in practice for lots of cases so I thought a 
type coercion was safe, but then I found a case where this assumption breaks 
(see new test). 

The updated logic fixes the bug and is simpler. When a value block gets split up 
(because there was a nested value block), instead of replacing the earlier value 
in the later instructions, we append the instructions together. This can result 
in some extra nesting (which if we wanted we could flatten away) but ensures 
that we maintain type-safety.",Joe Savona,2023-02-03T22:16:17Z
cc33497c440d9b78372c90df72bfa4421f2da905,"[valueblocks] Add InstrId to SeqExperession value 

A SequenceExpression currently doesn't store the InstructionId that produced its 
final `.value`. This PR adds that instruction id, which is then used in the next 
PR as we compose SequenceExpressions.",Joe Savona,2023-02-03T22:16:17Z
29a95d2dea298b7ba06bbbb55dd781b32d306364,"[be] Use generator in InferTypes, extract helper 

Just small things I noticed when looking at InferTypes. I was thinking about how 
we'd adjust this pass to account for hooks, i'll probably pause that for now but 
putting this up in case you like the changes. If not no big deal!",Joe Savona,2023-02-03T20:59:13Z
e30a9e9258cebdf4e017443aa1606eecb2143f9a,[hir syntax] Handle TemplateLiteral syntax,Mofei Zhang,2023-02-03T20:44:37Z
34595b84c8e836bb56b9d495aea5c1d7cd46bbe6,[syntax] Followup: clean up InferReactiveIdentifiers,Mofei Zhang,2023-02-03T20:44:36Z
4b55399fb8d9aecb8ed0b961c3bb719e0440afd2,"[λ] Use context identifiers in inner functions 

This threads through context identifiers to inner functions and also uses them 
as dependencies if they are mutated in the inner function.",Sathya Gunasekaran,2023-02-03T17:42:07Z
ecb084c4b8b0e7dddadf5fce73e194a8b58d3187,"[ReactiveHIR] Infer reactive identifiers and promote temporaries 

Messed up ghstack, this is a duplicate of #1093",mofeiZ,2023-02-03T19:52:46Z
855b77c9bbee347735efcd626dda362db2ffae1d,"publish-prereleases: Exit if CircleCI request fails (#26100)

If the publish-prereleases command fails to access CircleCI, it will now
exit with a message instead of hanging indefinitely.",Andrew Clark,2023-02-03T00:20:34Z
2ef24145e4628fda9d8883cd573553b82a2e0a81,"[flow] upgrade to 0.199.0 (#26096)

`flow-remove-types` was also upgraded to the latest version.",Jan Kassens,2023-02-02T21:19:05Z
922dd7ba50f69f1f969c5809eb57104768716c89,"Revert the outer module object to an object (#26093)

This is because Webpack has a `typeof ... === 'object'` before its esm
compat test.

This is unfortunate because it means we can't have a nice error in CJS
when someone does this:

```
const fn = require('client-fn');
fn();
```

I also fixed some checks in the validator that read off the client ref.
It shouldn't do those checks against a client ref, since those now
throw.",Sebastian Markbåge,2023-02-02T20:30:59Z
34a7b58334011eace13767dc32c37a5336819983,"Restrict switch case test values until they use value blocks 

We currently lower switch case test values within the wrong scope: the test 
value really should be a value block rather than a `Place`. Until then, this PR 
adds a bailout for complex test values: we allow primitives and identifiers 
which should cover most real-world use-cases.",Joe Savona,2023-02-02T17:09:25Z
dc65e7c5a93cd581bed0b39ed93933e8988cfd26,"[aliasing] Make InferAliasForStores use the visitor infra 

No need for InferAliasForStores to know about the semantics of each instruction 
anymore. It's just a simple pass that iterates over every operand and lvalue. 

The FunctionExpression is special cased because it's slightly different but I 
have a follow up that removes this special casing.",Sathya Gunasekaran,2023-02-02T17:41:35Z
40f304392e71588f30efd519dc445c2834e7cd78,"[aliasing] Alias object loads to it's lvalue as well 

This doesn't change codegen as the lvalue is unused but it lets us make this 
pass be semantically the same across all instructions -- ""alias lvalue and 
operands of an instr"".",Sathya Gunasekaran,2023-02-02T17:41:31Z
018899d778bd6e33b4b2045122ab6ea82b5e68e0,[aliasing] Make aliasing account for MutableRange.end being exclusive,Sathya Gunasekaran,2023-02-02T17:41:27Z
98f67c407b390c7c581063c3336bf18a2a7503ac,[aliasing] Alias ComputedLoad operands,Sathya Gunasekaran,2023-02-02T15:45:16Z
5e1929c0022e8cab4a366545b64f3d1a0206f67b,[aliasing] Alias ComputedStore operands,Sathya Gunasekaran,2023-02-02T15:45:12Z
de929fcc40a8a975e11d839746d7b55b0e36b1b1,"Partial support for update expressions 

Adds limited support for UpdateExpressions (`x++`). We now support the postfix 
form (`x++` ok, `++x` is a todo) and only when the argument is an identifier. We 
can relax these restrictions with more work, but this PR should be sufficient 
for the examples we've seen so far.",Joe Savona,2023-02-02T15:53:24Z
7a92b2fe5d322f4b821db43f50c9687705b8575d,[be] Cleanup logic that matches mutatedId and mutatedDep,Sathya Gunasekaran,2023-02-02T14:05:37Z
12274f30b9ce08179416345b425a5df041c257d4,[be] Inline buildMutatedDeps,Sathya Gunasekaran,2023-02-02T14:05:36Z
aa2403e06883f023c5031666d8970bef2fe0b013,"[λ] Run analyseFunctions on inner func exprs 

Previously we would skip out on calling analyseFunctions on inner function  
exprs so we missed out on catching aliased mutation in a different scope.",Sathya Gunasekaran,2023-02-02T14:05:35Z
0522d5233bc1bd5a98ba5c266bfa4c08dc7eaa72,"[λ] Store and define captured bindings as context 

This lets us treat global references differently from captured references.",Sathya Gunasekaran,2023-02-02T14:05:34Z
8a0d3169fdb526ac68567ed9b3d6cd7b67d2ded3,"Record todo bailouts in CodegenReactiveFunction 

Went over this pass and converted any todos to bailouts, otherwise we continue 
to throw an invariant if there's an internal error",Lauren Tan,2023-02-01T19:49:47Z
1baf22a421b04d868d92e6cdb418205c3c67c8f1,"[playground] Fix error wrapping for realsies 

CSS is hard (jk i'm just terrible at it now)",Lauren Tan,2023-02-01T19:14:45Z
8c9d1b85be0753aae2e38f90443634e4c007a727,Failing test from - -,Lauren Tan,2023-02-01T18:46:20Z
f53318d0ba2b72335236d0b658016eb284dad710,[playground] Fix errors not wrapping,Lauren Tan,2023-02-01T18:17:04Z
9d111ffdfbcfee4b348a3d49c16f02cb718c896f,"Serialize Promises through Flight (#26086)

This lets you pass Promises from server components to client components
and `use()` them there.

We still don't support Promises as children on the client, so we need to
support both. This will be a lot simpler when we remove the need to
encode children as lazy since we don't need the lazy encoding anymore
then.

I noticed that this test failed because we don't synchronously resolve
instrumented Promises if they're lazy. The second fix calls `.then()`
early to ensure that this lazy initialization can happen eagerly. ~It
felt silly to do this with an empty function or something, so I just did
the attachment of ping listeners early here. It's also a little silly
since they will ping the currently running render for no reason if it's
synchronously available.~ EDIT: That didn't work because a ping might
interrupt the current render. Probably need a bigger refactor.

We could add another extension but we've already taken a lot of
liberties with the Promise protocol. At least this is one that doesn't
need extension of the protocol as much. Any sub-class of promises could
do this.",Sebastian Markbåge,2023-02-01T17:56:53Z
c2dda028fd4dd42fef7b1dc5d154b0059d5105af,Improve debugging for - errors,Joe Savona,2023-02-01T17:42:46Z
2069269903e316e548984d8ca49304da1fca3fd1,"Support TypeCastExpression 

Support TypeCastExpressions — `(x: TypeAnnotation)`. This is pretty 
straightforward, it's semantically identical to a raw identifier. 

One catch is that our prettier config is hard-coded to use the babel-ts parser, 
i wasn't sure how to make that dynamic based on the file extension so for now i 
just ignored .flow.js files in our pretter config.",Joe Savona,2023-02-01T16:42:33Z
0ba4698c7b178161ca8d9dded49d69a53ba3497a,Fix async test in React reconciler (#26087),Ming Ye,2023-02-01T08:59:41Z
8c234c0de9be40dcb95f33fcefb57aed845d324b,"Move the Webpack manifest config to one level deeper (#26083)

This frees up the Webpack manifest to contain a `serverManifest` part
too.

@shuding",Sebastian Markbåge,2023-02-01T04:33:31Z
47074a2def971e7afd807ea728f6ec4564d7ab5c,"Support JsxSpreadAttribute 

Changes the representation of JsxElement props to be an array of attributes, 
each of which can be a named attribute or spread attribute.",Joe Savona,2023-02-01T00:43:46Z
df07522b89703b4ec5e2b0c50dd263cdf6f03afb,"[be] Move Result into Utils/ 

The `Utils/` folder is meant to be a catch-all for code that doesn't have an 
obvious home in other directories.",Joe Savona,2023-02-01T00:14:23Z
e8650951ea652e26979319ba5eb56a7daa05f682,"[playground] Add diff view toggle 

Quick hack to show a diff view comparing previous pass to current. Default is 
the output view 

![Screenshot 2023-01-31 at 5 37 09 
PM](https://user-images.githubusercontent.com/1390709/215899637-672d578a-6fb9-4580-ae87-ae0be0878a59.png) 

![Screenshot 2023-01-31 at 5 37 12 
PM](https://user-images.githubusercontent.com/1390709/215899640-7aff3c06-fc67-476a-82f9-59d65b4f9ac4.png)",Lauren Tan,2023-01-31T22:37:22Z
5fbfce6d3b0ffc0b61cecacd028263608725024e,"[test case] Failing assignment inside of nested if statement 

``` 

function useBar(props) { 

let z; 

if (props.a) { 

if (props.b) { 

z = baz(); 

} 

} 

return z; 

} 

``` 

Currently fails with 

``` 

InvariantViolation: A phi cannot have two operands initialized before its 
declaration 

```",mofeiZ,2023-01-31T21:53:06Z
0c5176c61818779d97bc4ecfa8ac768519c3e89a,"[valueblocks] Cleanup 

Removes dead code related the now-unused old representation for value blocks.",Joe Savona,2023-01-31T21:39:41Z
fa525e0b6f58602f5d9578828c64939a1d818951,[valueblocks] For.init is a value block,Joe Savona,2023-01-31T21:39:40Z
894eadfa67752666a2d75ea39b6cf477fa9dfbfc,[valueblocks] For.update is a proper value block,Joe Savona,2023-01-31T21:39:39Z
6930b5f77e9da0e68c231ec189bb5e9189265318,[valueblocks] For.test is a proper value block,Joe Savona,2023-01-31T21:39:39Z
90e1265442fdce86c1de517c2bd8c53fa585e814,"[valueblocks] While.test is a proper value block 

Changes ReactiveWhileTerminal’s test to use the new value block representation. 
This means logical and condition expressions will work as while test values now.",Joe Savona,2023-01-31T21:39:38Z
50f300bc92a7edb684b0735e0cb46c1c866a4916,"[valueblocks] Update some passes to use the new visitor 

Updates some passes from ReactiveScopes/ to use the visitor added in the 
previous PR. The +124/-354 line count on this diff tells the story  — the new 
visitor avoids a lot of boilerplate and helps focus on the logic not the 
traversal. 

Note that there are a few passes which transform the function such as 
adding/removing scopes. A follow-up will extend the visitor to support that and 
convert the remaining passes.",Joe Savona,2023-01-31T21:39:38Z
400bf4588ce80ba6f401a39a5859a1a72ab92fc1,"[valueblocks] More general visitor for ReactiveFunctions 

This adds a truly general-purpose visitor pattern for ReactiveFunction, modeled 
on what's worked well in Relay Compiler. All types of node that have children 
get a visitFoo/traverseFoo pair of functions. By default the visitFoo() function 
delegates to the traverseFoo() function, but the visit variant is meant to be 
overridden and can delegate to the traverseFoo() variant — this gives you 
precise control so that you can save/restore state before/after traversing 
children. 

Probably the only interesting thing is that visitLValue() does not call 
visitPlace() by default though it technically could. So far that is making sense 
in the passes i converted. 

Note that once all passes are updated to use this, i'll delete the other visitor 
helpers for ReactiveFunction.",Joe Savona,2023-01-31T21:39:37Z
149353badb29b904ba0257b6679917d2d40a5b3c,[valueblocks] Support sequence expressions (comma operator),Joe Savona,2023-01-31T21:39:37Z
d6505572cb1de2542303b98d7280c7bef8ca1145,"[valueblocks] Disallow AssignmentExpression in value blocks (temporarily) 

There's a bug with assignment expression in normal value blocks due to LeaveSSA. 
Until that's resolved i'm temporarily distinguishing ""loop"" blocks and ""value"" 
blocks, and disallowing assignment expressions in value blocks specifically.",Joe Savona,2023-01-31T21:39:36Z
8c13c91f274c140ec7b233d4e567b630469f248a,"[valueblocks] ternary tests showing assignment bug 

A ternary that reassigns the same variable in both branches causes some 
weirdness with LeaveSSA, this PR just adds the failing case.",Joe Savona,2023-01-31T21:39:36Z
acd227440e7dc17655c56d9cf4a9d1b73eb4bdda,"[valueblocks] Support conditional expressions (ternary) 

Support conditional expressions from AST -> HIR -> ReactiveFunction -> AST. This 
also helps make the patterns for value block handling more clear, so i was able 
to extract some reusable logic in the HIR -> ReactiveFunction conversion phase.",Joe Savona,2023-01-31T21:39:35Z
dc7ac6fea4e42ad35a79832b79691ab0afba43e8,"[valueblocks] Scaffolding for ternary terminals 

Core representation for terminals, without the lowering and conversion logic.",Joe Savona,2023-01-31T21:39:34Z
aca0e270127347d15230de7344cae06046ac4274,[valueblocks] split working test and aliasing bug case,Joe Savona,2023-01-31T21:39:34Z
096482e5cbdc5f610dcdb29b57e6f421a1ebcda8,"print mutable ranges on every place 

useful for debugging",Joe Savona,2023-01-31T21:39:33Z
95642c4421304c6fdc5290316a8ebed59779f067,[valueblocks] Printing for LogicalValue/SequenceValue,Joe Savona,2023-01-31T21:39:33Z
86ffcde8edad93ce311dff9d0d13789daf3eae9e,"[valueblocks] Handle compound RHS for logicals 

The previous PR handled the case where the LHS of a logical was compound, but 
didn't handle compound RHS values. This is fixed now.",Joe Savona,2023-01-31T21:39:32Z
d4acc7efa6aa10d03cc2eda97345da12a60c6cbe,"[valueblocks] Convert logical terminal to ReactiveValue 

Implements the conversion from LogicalTerminal into a ReactiveLogicalValue (and 
ReactiveSequenveValue if necessary). The implementation is a bit rough, i clean 
it up in subsequent PRs which revealed parts of the logic that could be shared w 
ternaries.",Joe Savona,2023-01-31T21:39:32Z
bb8ae86c240cac6068e5cfddebc4252bfb886287,"[valueblocks] ReactiveFunction repr for logical expressions 

Extends ReactiveInstruction's value type to be a regular InstructionValue *or* a 
LogicalValue. LogicalValue is operator, left, and right. It's really convenient 
that we've already distinguished Instruction/ReactiveInstruction now — while the 
_helpers_ here are updated to handle this new value type, the types ensure that 
HIR can never encounter a LogicalValue. 

The actual conversion of logical terminals into this value is complex and is 
later in the stack.",Joe Savona,2023-01-31T21:39:31Z
c6a066af83ee999b11b6496cdc78705931e05b3a,"[valueblocks] Lower logical expressions into logical terminals 

Changes the lowering for LogicalExpression to use the new 'logical' terminal. 
Whereas before we tried to more directly model the semantics of `??` by 
generating an `if (<lhs> != null)`, we now generate a branch terminal that looks 
at the lhs. 

The HIR -> ReactiveFunction construction for logical and branch terminals are 
placeholders while I refactor the ReactiveFunction representation to support 
value blocks.",Joe Savona,2023-01-31T21:39:31Z
b1548100d1844331c8b1da3b221b2fe752116942,"[be] Clarify type of value block final value before change 

Makes the type of the final value of a ValueBlock more precise, prior to 
changing it",Joe Savona,2023-01-31T21:39:30Z
977bccd24de2b062d2c114e6cf160d2bd9ed9493,"Refactor Flight Encoding (#26082)

This is just shifting around some encoding strategies for Flight in
preparation for more types.

```
S1:""react.suspense""
J2:[""$"", ""$1"", {children: ""@3""}]
J3:""Hello""
```

```
1:""$Sreact.suspense""
2:[""$"", ""$1"", {children: ""$L3""}]
3:""Hello""
```",Sebastian Markbåge,2023-01-31T17:41:36Z
8b9ac8175fb3052ba5c82f99003bb8ff667e1e68,"Remove unused dependency 'abort-controller' (#26074)

## Summary
This PR removes the unused dependency 'abort-controller' from the
project. it helps to keep the project clean and maintainable.

## How did you test this change?
ci green",Ming Ye,2023-01-31T15:47:14Z
e48b615598473c3f441b60949ec8c9a2ce6d295a,"[playground] Fix header when horizontal scrolling 

Fixes a minor annoyance 

Before 

![Screenshot 2023-01-31 at 10 39 06 
AM](https://user-images.githubusercontent.com/1390709/215806108-f3b084d3-c693-404b-a9b3-785d0f15c332.png) 

After 

![Screenshot 2023-01-31 at 10 33 15 
AM](https://user-images.githubusercontent.com/1390709/215804818-c94a5905-e278-4380-af44-6ab34ac95ff3.png)",Lauren Tan,2023-01-31T15:36:31Z
d7bb524ade26513ad310fedab5cad659012efd45,"[cleanup] Remove unused package jest-mock-scheduler (#26084)

## Summary

Removing package jest-mock-scheduler introduced in PR
https://github.com/facebook/react/pull/14358, as it is no longer
referenced in the main branch code. The following files previously
referenced it:

- packages/scheduler/src/__tests__/Scheduler-test.js
- packages/scheduler/src/__tests__/SchedulerDOM-test.js
- packages/shared/__tests__/ReactDOMFrameScheduling-test.js
- scripts/jest/setupTests.js
- scripts/rollup/bundles.js

## How did you test this change?

ci green",Ming Ye,2023-01-31T15:23:31Z
6b3083266686f62b29462d32de75c6e71f7ba3e3,"Upgrade prettier (#26081)

The old version of prettier we were using didn't support the Flow syntax
to access properties in a type using `SomeType['prop']`. This updates
`prettier` and `rollup-plugin-prettier` to the latest versions.

I added the prettier config `arrowParens: ""avoid""` to reduce the diff
size as the default has changed in Prettier 2.0. The largest amount of
changes comes from function expressions now having a space. This doesn't
have an option to preserve the old behavior, so we have to update this.",Jan Kassens,2023-01-31T13:25:05Z
3b4f41b58d324264330fc72e189abf58e07043ea,"[ez] Make dev mode more obvious in playground 

It's easy to confuse your local browser tab with main, this modifies a 

few colors and labels to make it more obvious 

![Screenshot 2023-01-30 at 5 05 18 
PM](https://user-images.githubusercontent.com/1390709/215606089-78e5c874-263e-46e9-a99d-3d863bdc4432.png)",Lauren Tan,2023-01-30T22:03:59Z
1f5ce59dd7b6869b1a17ede65aa301002ef31d4b,"[cleanup] fully roll out warnAboutSpreadingKeyToJSX (#26080)

I fully enabled this flag internally now and unless I see complications,
we should be able to clean this up in the code.",Jan Kassens,2023-01-30T20:25:24Z
48b687fc95a172cec8f305312a27d105e5719581,"[trusted types][www] Add enableTrustedTypesIntegration flag back in (#26016)

## Summary

The flag was first added in #16157 and was rolled out to employees in
D17430095. #25997 removed this flag because it wasn't dynamically set to
a value in www. The www side was mistakenly removed in D41851685 due to
deprecation of a TypedJSModule but we still want to keep this flag, so
let's add it back in + add a GK on the www side to match the previous
rollout.

See D42574435 for the dynamic value change in www

## How did you test this change?

```
yarn test
yarn test --prod
```",an onion,2023-01-30T18:26:04Z
213ed2d6d0ecd61ef46ba7e40c4b99284cdb4f73,"[ez] Wrap output cols to prevent nested h-scroll 

![Screenshot 2023-01-30 at 1 03 46 
PM](https://user-images.githubusercontent.com/1390709/215558010-49d3ddf4-3dee-418e-9595-790e720bad22.png)",Lauren Tan,2023-01-30T18:04:39Z
04fb507876eb1f86045c44777ef20a87fc73c951,"[hir] Remove broken support for ForOf, ForIn, DoWhile",Sathya Gunasekaran,2023-01-30T19:12:43Z
9b1423cc09c11f0a4e05b0ccb66d185093a16413,"Revert ""Hold host functions in var"" (#26079)

Revert https://github.com/facebook/react/commit/353c30252. The commit
breaks old React Native where `nativeFabricUIManager` is undefined. I
need to add unit test for this to make sure it doesn't happen in the
future and create a mechanism to deal with undefined
`nativeFabricUIManager`.
This is to unblock React sync to React Native.",Samuel Susla,2023-01-30T17:23:02Z
019f0697781dace56209b9e78c0827b521f373ff,Fix not being able to scroll horizontally,Lauren Tan,2023-01-30T16:37:28Z
f0d64064a98c5b391b3cb8a68d22ee9220f24f5d,"Support partial compilation in playground 

This adds support in the playground for best effort compilation: if any 

passes have errors, we'll try to render as many successful tabs leading 

up to the pass with an error. 

Also contains some styling updates 

![Screenshot 2023-01-27 at 2 18 06 
PM](https://user-images.githubusercontent.com/1390709/215222635-59b42555-f1f3-4fc0-b1cd-3959946df6da.png) 

![Screenshot 2023-01-27 at 2 18 54 
PM](https://user-images.githubusercontent.com/1390709/215222636-4c0275fd-a95b-4f0f-946a-258ad8b27722.png) 

![Screenshot 2023-01-27 at 5 03 02 
PM](https://user-images.githubusercontent.com/1390709/215222637-92a8e459-173a-41ae-be9f-0cc0d54479d0.png)",Lauren Tan,2023-01-30T15:36:35Z
be4058057c9875f078a27f3eadbd88d977c8fcb2,Bailout TaggedTemplateExpressions instead of invariant,Lauren Tan,2023-01-30T15:36:34Z
545e53c4289e9c59104eb0c198c9e277b3f16f4c,"Use CompilerErrors to record errors 

This moves the bailout recording mechanism into a separate CompilerErrors class 
instead of repurposing HIRBuilder. This is to allow other passes to also record 
errors instead of immediately throwing.",Lauren Tan,2023-01-30T15:29:14Z
b0671f9ea03133298144f169f1062d274f7f57c0,Include removal of scheduler/tracing in changelog (#26063),Sebastian Silbermann,2023-01-30T07:12:48Z
ce09ace9a23b61dfba53f5a83d52b377bc642bae,"Improve Error Messages when Access Client References (#26059)

This renames Module References to Client References, since they are in
the server->client direction.

I also changed the Proxies exposed from the `node-register` loader to
provide better error messages. Ideally, some of this should be
replicated in the ESM loader too but neither are the source of truth.
We'll replicate this in the static form in the Next.js loaders. cc
@huozhi @shuding

- All references are now functions so that when you call them on the
server, we can yield a better error message.
- References that are themselves already referring to an export name are
now proxies that error when you dot into them.
- `use(...)` can now be used on a client reference to unwrap it server
side and then pass a reference to the awaited value.",Sebastian Markbåge,2023-01-28T01:08:26Z
78c4bec207795e718b5f4acc48ade19c8b94bf1f,"[DevTools] fix local build for extension (#26067)

## Summary

resolves #26051

After we upgrade to Manifest V3, the browser no longer allow us to run
`eval` within the extension. It's not a problem for prod build, but for
dev build, webpack has been using eval to inject the source map for
devtool. This PR changes it to an alternative method.",Mengdi Chen,2023-01-27T20:35:07Z
cb16201180a2642696303d4aac3a04e5fd348512,"Update danger.js token (#26066)

The old token was revoked, this updates the token by reading from CI
secrets instead, I'm not sure there's benefit in making it publicly
visible.",Jan Kassens,2023-01-27T19:05:08Z
0652bdbd10f6192e10f6cab9602f6bbfe5fd2c8e,"Add flow types to Maps in ReactNativeViewConfigRegistry.js (#26064)

Need to add types to these two maps to unblock React Native sync.",Samuel Susla,2023-01-27T16:55:38Z
c803558b2a6a76f37b40493ceeab29c8e0a45034,[hir] Parse object pattern params,Sathya Gunasekaran,2023-01-26T21:40:08Z
41e8088e8c20b07d4e0a96fb9066839196efaeca,[hir] Try to resolve a dep into a property load only if it's a temporary.,Sathya Gunasekaran,2023-01-26T21:40:07Z
978215eae6282e13f1e36e5034fd3f5c529c5663,"[test] Add test that resolves property loads to expanded places incorrectly 

Ideally this should happen only for temporary places containing property loads.",Sathya Gunasekaran,2023-01-26T18:38:55Z
98cb9eff929aa7363e6369ed3bc38c09cdd57198,"Fix playground tabs always showing the same HIR or reactive function 

Previously we were storing a pointer to the HIR or ReactiveFunction 

prior to printing, so when we printed them it would always print the 

results of the last pass. This commit changes it so we print them to 

strings when iterating through the compiler pipeline so each snapshot is 

correctly preserved 

![Screenshot 2023-01-26 at 4 34 23 
PM](https://user-images.githubusercontent.com/1390709/214955701-67f4da1e-b12c-432a-ba47-1a29afd91312.png)",Lauren Tan,2023-01-26T21:33:56Z
d44538ad9654e048e5cfb53e874265bbf77a4391,"Stop passing NodePaths to CompilerError 

This was causing issues in various places where errors would be stringified. 
Because the inner detail objects would contain a NodePath with circular 
structures this would cause a JSON.stringify error in code outside of our 
control. This change makes it so we always print the codeframe from the NodePath 
and then passing the string.",Lauren Tan,2023-01-26T18:58:56Z
4ab8cc6ae90c04e1eba6d12f427b26c8b8952fe6,"[valueblocks] Use branch terminal for if/for test blocks 

Updates `while` and `for` to use the new branch terminal as their test block 
terminal (IfTerminal is now only meant for if statements).",Joe Savona,2023-01-25T22:05:23Z
f88fa006e716a4a39cbf0608165956afb2b21fcb,"[valueblocks] Scaffolding for branch terminal 

Scaffolding for a new 'branch' terminal, which is the lower-level form of 'if' 
meant for use in value blocks. See design at 
https://fb.quip.com/b7N6AjkDcl2a#temp:C:bAO904b0cf06f154de4a7287af6d",Joe Savona,2023-01-25T22:05:22Z
1014727d41162e267ba5b9efdf64270fc96cf056,"[valueblocks] Specify block type at creation 

We need to know the kind of each block (regular or value). Rather than specify 
the kind when closing the block — when we've lost context about why the block 
was created — it's simpler and more accurate to specify the kind when 
creating/reserving the block.",Joe Savona,2023-01-25T22:05:22Z
840bb6fec28845e094fb66ead03b0dbfdd2c55d4,Add colors to debug logging,Lauren Tan,2023-01-25T21:15:12Z
e6b4988b1e52ba09502440aec0a3920cb4967bba,[hir] Infer UnaryExpression as non allocating,Sathya Gunasekaran,2023-01-25T16:11:16Z
9eb9071aedebd6c282c64c341de13978db370106,[typer] Add type inference for unary expr,Sathya Gunasekaran,2023-01-25T16:11:16Z
9bd67099d7a6a2ea1b1e9c1235b2b97fd958985a,"[prettier] detect changed files from relative dir 

Previously, `yarn prettier` didn't write changed files since `glob` produced 
paths relative to cwd and `git diff --name-only` produced paths relative to git 
root directory. 

This changes `git diff --name-only` to `git diff --name-only --relative`",mofeiZ,2023-01-25T20:16:39Z
f83ff2fedaae4effaa8cf9376f8b32443b50134f,[hir] Parse UnaryExpression,Sathya Gunasekaran,2023-01-25T16:11:16Z
b00963ffde2e27dea41c311b2b01f7cae5f799be,"[playground] Handle invariant violation errors 

playground currently hard crashes when we hit an invariant violation 

<img width=""1104"" alt=""image"" 
src=""https://user-images.githubusercontent.com/34200447/214615036-dbe307d8-132d-4186-a8ab-6fcaf69801d1.png""> 

[playground 
link](https://0xeac7-forget.vercel.app/#eyJzb3VyY2UiOiJcbmZ1bmN0aW9uIHVzZUJhcihwcm9wcykge1xuICBwcm9wcyA9IG51bGw7XG4gIGxldCB5LCB6O1xuXG4gIGlmIChwcm9wcy54KSB7XG4gICAgbGV0IHkgPSB1c2VGb28ocHJvcHMuYS5iKTtcbiAgICB3aGlsZSAoYmFyKCkpIHtcbiAgICAgIGlmIChwcm9wcy55KSB7XG4gICAgICAgIHogPSBiYXooKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gW3ksIHpdXG59In0=) 

This should fix that",mofeiZ,2023-01-25T16:23:09Z
47da50dfe88f54713266c5800be2160d5751db45,[ez] Fix typo,Lauren Tan,2023-01-25T15:20:53Z
62b75269294f9c1a39d6f6ea8c64363696efde40,"[hir] Handle OptionalMemberExpression syntax 

(Implemented as per discussions with @gsathya ) 

Handle OptionalMemberExpression by adding an 'optional' flag to `PropertyLoad` 
instruction, which is set during `BuildHIR` and read during 
`CodegenReactiveFunction`.",mofeiZ,2023-01-25T15:16:21Z
79d53f911707c4b25f638d9ad79d9792dc6bf6b0,"[hir] Parse and codegen TaggedTemplateExpression 

Basic support to parse relay fragments",Sathya Gunasekaran,2023-01-24T21:41:00Z
cd45341920dc8fcdfd55e5db9f1fa902bd407391,yarn install,Lauren Tan,2023-01-24T19:05:14Z
9d935db383204e1ae9a200a1fdc5deb81624c2ca,"Render error markers in playground 

Additionally with this commit we now support multiple top level 

functions 

![Screenshot 2023-01-24 at 12 01 34 
PM](https://user-images.githubusercontent.com/1390709/214359278-7160b612-094d-4498-918d-944d30d61366.png) 

![Screenshot 2023-01-24 at 12 01 21 
PM](https://user-images.githubusercontent.com/1390709/214359275-d776c416-badb-4989-8952-dec1b1f3f7ed.png)",Lauren Tan,2023-01-24T17:44:51Z
109d7ba9801af550b815b2dd46e6d7a09cb99e5e,"Refactor CompilerError 

This commit repurposes CompilerError to represent an aggregate of error details 
accumulated during HIR lowering. It also fixes the playground to correctly 
render errors again.",Lauren Tan,2023-01-24T17:44:51Z
3da8d52a0fc775cf4dad4c577ca024264a2a6798,Consistency pass for error messages in BuildHIR,Lauren Tan,2023-01-24T17:44:51Z
8f169574c7c1c6bec7c02fc7de3f034cacc8c141,[test262] Set language as typescript,Sathya Gunasekaran,2023-01-24T16:02:54Z
8041b0b0d5fee8cea8b1a20adca9a6cf207549b5,[λ] Parse and codegen concise arrow expressions,Sathya Gunasekaran,2023-01-24T15:47:49Z
9aed0fc6b123d5e18f7b1d13af7ef9a6b751e48b,"[babel] Add flow support 

Check if there's a pragma to toggle flow parsing",Sathya Gunasekaran,2023-01-24T15:21:25Z
19dd29707b5f4e3457588336a211e282cba1c39b,"[λ] Fix mutatedDep collection in AnalyseFunctions 

Make sure to check free variables as well for mutations. Not just object 
properties.",Sathya Gunasekaran,2023-01-23T20:46:35Z
ee3a88f20f773c91c538420a420ae2435277976f,[λ] Parse and codegen arrow function exprs,Sathya Gunasekaran,2023-01-23T22:39:37Z
3ba90a7f9c5ad26e7da84e539b3ee9b58e86717b,"Inline hasNode check (hack) 

www currently on an older version of babel",mofeiZ,2023-01-23T21:08:01Z
16169bec079682708e01bbb2bf20af760cdb6b8a,"Redo patch prettier 

reverts / redos #1055 

(accidentally merged changes from another PR in #1055)",mofeiZ,2023-01-23T21:03:49Z
07cda62430b103d9e1580fbb915b6c603ad1d2a2,[prettier] Patch prettier to write modified TS files (#1055),mofeiZ,2023-01-23T20:57:11Z
3927281fe4da48f0d9eb78019f832fd404a7c089,"[λ] Re run SSA on function expr 

Functions can capture variables declared after the definition of the function. 
This re runs SSA to map the captured identifiers to the new SSA identifiers if 
available.",Sathya Gunasekaran,2023-01-23T18:20:33Z
123d024af7827c3de1df0d3ab3ae3c58fa84e461,"[λ] Add test for function expr passed to jsx 

Function exprs become frozen when captured by jsx.",Sathya Gunasekaran,2023-01-20T19:44:32Z
294b6c752d62b717fb07b5170d45ee1601af01fa,[plugin] Add default export to forget,Sathya Gunasekaran,2023-01-23T19:36:54Z
8e08334a42a034a0f06b02c66fbca79e77e9aea5,"Specify sourceType ""module"" in hir-test and playground 

This was preventing the playground and fixture tests from being able to compile 
an ExportDefaultDeclaration",Lauren Tan,2023-01-23T18:11:35Z
b44f507c9212b49598fa7aa4d82ad47f0932ebaf,"[test262] Strip codeframes from Forget errors so results are grouped 

correctly",Lauren Tan,2023-01-20T16:47:11Z
44beb3c0238994a61ada2c0386a42107d03dc9ac,Collect bailouts in BuildHIR::lowerAssignment,Lauren Tan,2023-01-20T16:47:11Z
9ed6977c480648119dff7dc4ce10d3772b20a3fd,Collect bailouts in BuildHIR::lowerJsxElement,Lauren Tan,2023-01-20T16:47:10Z
4b3b498e37d70a451697e801a949bb5225c6dcb3,Collect bailouts in BuildHIR::lowerJsxElementName,Lauren Tan,2023-01-20T16:47:10Z
9697e15bd556dc50e5a6b355765de0bcb270fb3a,Collect bailouts in BuildHIR::lowerMemberExpression,Lauren Tan,2023-01-20T16:47:09Z
b2983571f284c31f74a8c34d37db9e7bd492a5e2,"Collect bailouts in BuildHIR::lowerExpression 

Mostly mechanical changes to lowerExpression to push an error to HIRBuilder 
rather than invariant.",Lauren Tan,2023-01-20T16:47:09Z
1a3e269274ac941ad05fb9d0364c2320e98ec89b,"Rename InstructionValue.OtherStatement to UnsupportedNode 

As discussed, this repurposes OtherStatement as a catch all variant for 
unsupported syntax or errors in the source. This also renames the previously 
added ErrorTerminal to UnsupportedTerminal for consistency (plus makes it a 
little bit less confusing that it's not an actual terminal representing an 
Error). 

Not loving the name but couldn't think of anything better, open to suggestions!",Lauren Tan,2023-01-20T16:47:08Z
c1c30889cc2fa92b92a477994bc5e91b16d888c3,[hir] Lower function expressions into HIR,Sathya Gunasekaran,2023-01-20T14:01:51Z
b3fedd32735925b0514b452a1882f4efa076ff98,"Fix import path to ReactForgetBabelPlugin 

This broke jest in watch mode",Lauren Tan,2023-01-19T18:33:32Z
7c73f5113923641bf5f6260f41ddb3186fa76f72,[hir] Define function name only if it exists,Sathya Gunasekaran,2023-01-19T18:39:23Z
da6d372c3a834cb89bb23f31ec655536f4adf23a,"[hir] Store env in HIRFunction 

The env is specific to the HIR function anwyays. It's not very useful outside 
the HIRFunction.",Sathya Gunasekaran,2023-01-19T18:39:19Z
0a60bf2071f6b98345827fed1d04f19715ee04e3,[ts] Make ts emit source maps,Sathya Gunasekaran,2023-01-19T18:39:14Z
a5b245b17d789a2ee8ff9789cca82e394449a3d9,[hir] Fix typescript warnings,Sathya Gunasekaran,2023-01-19T12:07:05Z
d295bb45167f265f99d7481ce0f3c84484677db8,"Fix scope merging in MergeOverlappingReactiveScopes 

When `MergeOverlappingReactiveScopes` identified scopes to be merged, it was 
currently (oops, my bad) updating the _existing_ scope's id and range. Later, 
PropagateScopeDependencies marks outputs of a scope by updating that 
identifier's scope instance — so if that scope instance isn't shared, then the 
output is lost. This PR fixes MergeOverlappingReactiveScopes to correctly update 
all operands for a scope to have the same scope instance.",Joe Savona,2023-01-19T18:10:21Z
7f7727d7e5c367273492ec932a10d73792ef9ba5,"Consolidate logic in MergeOverlappingScopes prior to fix 

Small refactor to consolidate visiting operands and their scopes, used in the 
follow-up PR.",Joe Savona,2023-01-19T18:10:20Z
6174c85ee99496b3e3da77d1db855a386400cd84,[oops] Use correct import path in test262-preprocessor,Lauren Tan,2023-01-19T17:29:49Z
40df4a8a86daaef373971b53761019c1cefc6d1c,[ez] Update test262-preprocessor to use the same config as hir-test,Lauren Tan,2023-01-19T16:37:50Z
32a83374be085a03942dd6e34358f9e8e285aef9,Format CompilerErrors with Babel codeframes,Lauren Tan,2023-01-19T16:37:49Z
60698e63c6a4072a3a390362489d057c7d82202f,"Re-emit unexpected hir-test error rather than a new one 

Makes debugging a little easier as the previous console.error would be logged 
out of band with the jest error message. And the jest error would be missing the 
error stack.",Lauren Tan,2023-01-19T16:37:49Z
b98e87aa633944d3b28ba2f4ad1fd18b13c93b0f,Use BabelPlugin in hir-test,Lauren Tan,2023-01-19T16:37:48Z
717719b8ea6dfb248b5cffa0224641f18de11d61,"Fix infinite loop in BabelPlugin 

After some painful debugging I isolated the infinite loop when attempting to use 
the BabelPlugin in hir-test rather than manually parsing and traversing it. The 
issue is that in the BabelPlugin we were replacing the original 
FunctionDeclaration with a new one, which would add it to Babel's traversal 
queue. This would effectively create an infinite loop where we would try to 
optimize a function that was already compiled by Forget (aside: _should_ running 
the compiler multiple times on code work?). 

To get around this we can just call the handy `skip` method on the new 
FunctionDeclaration to tell Babel to stop traversing it. I'm also moving the 
scope check here because I'll remove it from hir-test in a later commit.",Lauren Tan,2023-01-19T15:10:56Z
f42c51b9718aa767eb3d863f866938d0a13ad74e,"[λ] Support member expressions in lambdas 

Lower member expression if the receiver is in scope. Skip the remaining path 
before capturing so we don't recurse down the identifiers in the member 
expression.",Sathya Gunasekaran,2023-01-19T12:13:35Z
ef5636c25d5d274d12548a047b9f88ee28efea30,[λ] Use lowerExpression to create captured identifier,Sathya Gunasekaran,2023-01-19T12:13:34Z
50d27c325a3f42fdbec3defc1c76f1e3f92bd23a,"Allow tests to be skipped with @skip 

Also remove old filename based test directive, since the comment based one is 
much easier to use",Lauren Tan,2023-01-18T15:58:50Z
23a044e406c4004e3fc8a2cd2a269068079a9b5c,"Record more errors in BuildHIR::lowerStatement 

Captures other kinds of statements that we're lowering to OtherStatements as 
TODO errors",Lauren Tan,2023-01-18T15:58:50Z
de83adc739fd7dd5a699e0003627c876dee92c6b,"[be] Skip debug logging if content has not changed 

Avoids printing debug information if it exactly matches what was last printed. 
This means when debug printing (eg with `@only`) you'll see things like: 

``` 

BuildReactiveFunctions: 

...debug view... 

FlattenReactiveLoops: (no change) 

PropagateScopeDependencies: 

...debug view... 

``` 

Which saves time figuring out if something changed in a given pass.",Joe Savona,2023-01-18T00:00:42Z
8a15b65e1a0d02d38fbd30338001f224ccf19609,"[be] Reorder PruneUnusedLabels pass 

This pass can run later, rather than right in between two passes that affect 
scope creation.",Joe Savona,2023-01-18T00:00:39Z
0391405530e7953197944d99853b671ba847d2a9,"[be] Print implicit break/continue 

When debug printing `ReactiveFunction`, clarifies which break/continue are 
implicit.",Joe Savona,2023-01-18T00:00:36Z
2e501b0f01df960b3ed7cc63df3d7a208220c25d,"Rename variables during BuildHIR 

Per design discussion, this PR changes BuildHIR to maintain the invariant that, 
for each distinct variable in the input, that all references to that variable in 
the HIR will have the same unique `name` _and_ same unique `id`. Phrased 
differently: Identifiers with the same id will have the same name and 
vice-versa. 

This isn't an invariant we maintain throughout compilation — SSA form changes 
the `id`s — but crucially, ensuring that the `name` is also unique allows us to 
understand later which identifiers referred to the same original variable and 
which were different. 

Follow-up PRs will ensure that we maintain variable identifiers in the output as 
well, in all cases except shadowing (and for shadowing, we'll rewrite 
identifiers inside lambdas).",Joe Savona,2023-01-17T17:40:50Z
edeaaaf38aea54152f93a6136fdef15c49a2fc82,"Add PropertyCall/ComputedCall instructions 

Adds `PropertyCall` and `ComputedCall`, which are a combination of 
CallExpression and PropertyLoad/ComputedLoad, respectively. The goal is to 
ensure that we correctly model the receiver of a call where the callee is a 
member expression, and also accurately record scope dependencies in for both the 
computed and non-computed (property) cases. 

An alternative that I tried first was to add a `receiver: Place | null` to 
CallExpression. That works well for HIR construction, but it's then very 
difficult at codegen time to correctly reconstruct the original call: if the 
receiver and callee share part of their structure then we can transform back to 
a non-computed member expression, otherwise it has to be computed. Eg we have to 
distinguish `a.b.c[d.foo]()` from `a.b.c[a.b.c.foo]()`. Given that our target is 
high-level code, it seems reasonable to have a higher-level representation for 
these cases. 

I'm open to feedback but this feels pretty reasonable in terms of complexity / 
precision of modeling.",Joe Savona,2023-01-17T17:40:49Z
4a70aa7faf82bc20e09bca99b230c50a181378b3,"Make implicit break/continue explicit in ReactiveFunction 

Previously when converting from HIR -> ReactiveFunction we elided break/continue 
terminals in places where control would implicitly transfer to the 
break/continue target and therefore nothing has to be emitted. The one downside 
of this approach is that it makes scope analysis a bit trickier. We want to 
close scopes once we see an instruction id past the end of the scope's range, 
but these implicit breaks were causing us to miss some instruction ids. We 
compensated for this, but it's helpful to keep the representation explicit and 
discard these terminals later in codegen.",Joe Savona,2023-01-17T17:40:48Z
2c95cdb431d13057427b1a6d425129114347150f,"Collapse BuildReactiveFunction/TreeVisitor 

Collapses HIRTReeVisitor into BuildReactiveFunction, allowing us to remove the 
generic interface and simplify the code. Note that because the visitor was 
already not attempting to group instructions by scope anymore, the visitor code 
was very straightforward. This is mostly replacing calls to `appendBlock(block, 
instr)` with `block.push(instr)`.",Joe Savona,2023-01-17T17:40:47Z
ee85098019bf9703b32f608f8bbd5f8fb1a7d60b,"[cleanup] remove deletedTreeCleanUpLevel feature flag (#25529)

I noticed this was an experiment concluded 16 months ago (#21679) that
this extra work is beneficial
to break up cycles leaking memory in product code.",Jan Kassens,2023-01-17T16:03:29Z
39eb89f65e10aabac442c04072f9583756e8f769,[hir] Use types to infer constant declarations,Sathya Gunasekaran,2023-01-16T15:34:24Z
6ea0b6a42e0609dbb0ba80ca1ce638ca6cb506c4,[alias] Don't alias primitives,Sathya Gunasekaran,2023-01-16T15:34:21Z
4f8ffec453c41fcb6e98cb4e003f7319bb1c81b9,"Rejct toWarnDev if given callback throws (#26003)

## Summary

Should unblock https://github.com/facebook/react/pull/25970
If the callback for `toWarnDev` was `async` and threw, we didn't
ultimately reject the await Promise from the matcher. This resulted in
tests failing even though the failure was expected due to a test gate.

## How did you test this change?

- [x] tested in https://github.com/facebook/react/pull/25970 with `yarn
test --r=stable --env=development
packages/react-dom/src/__tests__/ReactDOMFizzServer-test.js --watch`
- [x] `yarn test`
- [x] CI",Sebastian Silbermann,2023-01-15T17:57:59Z
ab6a1dbbd430a61f95ec0d239ea99f114a554ee7,[λ] Add test for nested function declaration that captures a var,Sathya Gunasekaran,2023-01-14T10:19:40Z
6af9c25300187bc528f88f59e6f771f9337ae7dd,[test] Run Forget only on top level functions,Sathya Gunasekaran,2023-01-14T10:19:40Z
5fa3d41b22be14854f0ef2a10493a492e677b438,"[λ] Make function expr tests be reactive to input 

This lets us memoize more and test function expressions better",Sathya Gunasekaran,2023-01-14T10:19:39Z
e8cad1584c6d9ec31993636a709886b4fbf9bc78,[be] Refactor capturePureScopes to be more generic,Sathya Gunasekaran,2023-01-14T10:19:39Z
0e31dd028e8032ef433aea87268a5fd41cfb66a4,"Remove findDOMNode www shim (#25998)

This shim is no longer needed on www, in fact I had already deleted it
there and it's currently not on www. See D42503692 which is trying to
add it back as I didn't realize this file was synced from GitHub.",Jan Kassens,2023-01-13T21:27:03Z
379dd741e9aabefb880af1794d3c828984f9e143,"[www] set enableTrustedTypesIntegration to false (#25997)

This isn't configured to a dynamic value on www, so hardcode here to
false.",Jan Kassens,2023-01-13T21:02:24Z
b1eb22d94159e7e829fd0cb93e9c60e28f228ea0,"[be] Don't show duplicate codegen tab 

The JS tab and the codegen tab are the same.",Sathya Gunasekaran,2023-01-13T16:33:04Z
ddc135cf40b8e323f7b0bd03165127e958368b82,[be] Type CompilerPipeline as Generator,Sathya Gunasekaran,2023-01-13T16:26:09Z
d25c2d0d58743bc2742963fb97e2662f933919bd,"[be] Make ts emit ES2015 

This gives allows us to use generators without failing type checking.",Sathya Gunasekaran,2023-01-13T16:26:04Z
7c65f62c27921f4dc887f6e83eab433a0a39d956,"Collect bailouts in BuildHIR::lowerStatement 

Remove invariants and collect all errors",Lauren Tan,2023-01-13T21:14:07Z
73f09248fb9f6642f89580e3de7cfcb37b605186,"Add Result 

Adds a direct translation of Rust's Result type, for later use in BuildHIR and 
possibly other passes",Lauren Tan,2023-01-13T00:35:20Z
325987d744ed992a7147dba78a89d8ea80e0e85d,"Delete old CompilerError module 

This was a carryover from the old architecture; we can remove it now to get rid 
of the indirection.",Lauren Tan,2023-01-13T00:35:19Z
489d00fa61dd3c406b1c053a7a039d97f7fe213f,"[cleanup] Remove warnAboutDeprecatedLifecycles feature flag (#25992)

This `warnAboutDeprecatedLifecycles` is always true, and should be safe
to remove.",Andrey Lunyov,2023-01-12T21:57:14Z
321d7b7d007f82f737da4056d31428e5f0614e7d,"[be] Clean up public exports 

Cleans up the public exports for the package itself: 

* `parseFunctions()` was only used in playground, so this moves the definition 
there. I had to update playground's dependencies to ensure the babel version 
matched. 

* Flattens away the `HIR` const in the export, and exports just 4 functions all 
at the top-level: `run()`, `compile()`, `printHIR()`, and 
`printReactiveFunction()`. 

This will make it very easy to split the core compiler into a separate package 
from the babel plugin, though i'm not sure it's worth doing that (yet).",Joe Savona,2023-01-12T20:16:07Z
bd7e19b85f42f757b59e74cf2eb9ffe736916ae6,"Codegen is from ReactiveFunction->AST only 

Other than BuildReactiveFunction (HIR -> ReactiveFunction), Codegen.ts was the 
only other remaining place that we use HIRTreeVisitor. However, we've already 
switched the compiler to use the new form of codegen, 
CodegenReactiveFunction.ts. This PR extracts the shared code from Codegen.ts 
into the latter, and deletes the unused bits of Codegen.ts which relied on the 
visitor API. 

This now frees us up to merge BuildReactiveFunction and HIRTreeVisitor, removing 
all the complexity of the visitor trait and type params. 

Note that the `ReactiveFunction` data type can represent non-reactive functions. 
So we can still compile non-React code after this change, the pipeline is `AST` 
-> (BuildHIR) -> `HIR` -> (BuildReactiveFunction) -> `ReactiveFunction` -> 
(CodegenReactiveFunction) -> `AST`. Which is the exact sequence I mapped out at 
the start of this project ;-) (happy that worked out!)",Joe Savona,2023-01-12T19:49:47Z
da21e9c52507da43d9bce1e45e7c623722f8d664,Switch to new BuildReactiveFunction passes,Joe Savona,2023-01-12T19:06:40Z
a40ade1e6148b2a13e1179c477033324ea90debd,"Fixes, identical output in new version",Joe Savona,2023-01-12T17:43:17Z
919f193934169af600b4bdd865b720d2e8345c98,MergeOverlappingScopes visits value block final values,Joe Savona,2023-01-12T17:12:11Z
99dcf038524c86d4acd2041f8e1a17f63bde6222,AlignBlockScopes visits value block final values,Joe Savona,2023-01-12T17:12:08Z
09246207c7e9ffdee93731b194239b61406497fd,Value block final value has an InstrId,Joe Savona,2023-01-12T17:12:01Z
df8945b684cf7b6ba6205fee07fad19947ef7ad9,Visit terminal operands during alignment,Joe Savona,2023-01-12T17:11:58Z
9e549e9417698a8a12fb04917461e7a20b0b3000,Fork HIRTreeVisitor to specialize it for ReactiveFunction conversion,Joe Savona,2023-01-12T17:11:54Z
555ece0cd14779abd5a1fc50f71625f9ada42bef,"Don't warn about concurrently rendering contexts if we finished rendering (#22797)

Closes https://github.com/facebook/react/issues/22796",Sebastian Silbermann,2023-01-12T12:17:15Z
46024acb8203aacbaafe20404205fa16e259804e,"MergeOverlappingReactiveScopes (rewritten against ReactiveFunction) 

See the background in #982. This PR reimplements part of InferReactiveScopes, 
merging overlapping reactive scopes, but against ReactiveFunction instead of the 
HIR.",Joe Savona,2023-01-11T22:04:51Z
2358d9f01faf3f3ac91b32cab97e76d90f8ec20a,"AlignReactiveScopesToBlockScopes (rewritten against ReactiveFunction) 

See the background in #982. This PR reimplements part of InferReactiveScopes, 
aligning reactive scopes to block boundaries, but against ReactiveFunction 
instead of the HIR.",Joe Savona,2023-01-11T22:04:48Z
87d70b9129e91f85bbcc6945a4416d9d7ffe22a6,"BuildReactiveBlocks to construct scopes in ReactiveFunction 

The primary goal of this stack is to change HIRTreeVisitor to make it easier to 
handle value blocks. That's complicated by the fact that the visitor is a 
general-purpose visitor, used in several analysis passes including 
BuildReactiveFunction (which translates HIR->ReactiveFunction while also 
grouping instructions into scopes) and InferReactiveScopes (which is actually 
two passes, one to align scopes to block boundaries, one to merge overlapping 
scopes). The long-term goal then is as follows: 

1. Make BuildReactiveFunction transform HIR->ReactiveFunction but _without_ 
reactive scopes. 

2. Align scopes to block boundaries, but rewritten to operate on 
ReactiveFunction 

3. Merge overlapping scopes, again rewritten to operate on ReactiveFunction 

4. Group statements within ReactiveFunction into ReactiveScopeBlocks (today this 
occurs when constructing the ReactiveFunction). 

This PR implements 1 and 4. Because the implementation is incomplete this would 
break the whole compiler, so for now both versions are still around. By default 
compilation uses the old pipeline, but if a feature flag is enabled we use the 
new version. The plan is to incrementally fix up the new version of the passes 
in this stack, and then cutover: removing the flag and the old version of the 
passes.",Joe Savona,2023-01-11T22:04:45Z
0fce6bb498357feb4465859912004b2e20fe7084,"[cleanup] remove feature flags warnAboutDefaultPropsOnFunctionComponents and warnAboutStringRefs (#25980)

These feature flags are fully rolled out and easy to clean up. Let's
remove them!",Jan Kassens,2023-01-11T17:19:46Z
7002a6743ebb24ed55af8f626c89dd39460230fc,"[cleanup] remove unused values from ReactFeatureFlags.www-dynamic (#25575)

These values are never imported into `ReactFeatureFlags.www.js`, so
they're unused:
- `allowConcurrentByDefault`
- `consoleManagedByDevToolsDuringStrictMode`

These values are never set in the WWW module
(https://fburl.com/code/dsb2ohv8), so they're always `undefined` on www:
- `createRootStrictEffectsByDefault`
- `enableClientRenderFallbackOnTextMismatch`",Jan Kassens,2023-01-11T04:26:01Z
fb324faf8a3da08212bcc5ea9e3a084dbfa80dad,"Test case for stack overflow in ReactFizzServer (#25971)

SSR currently stack overflows when the component tree is extremely large",Tianyu Yao,2023-01-11T00:53:16Z
a4fc97534051d18c0a46238afd0a63c77e17b5a6,Scaffolding for LogicalTerminal,Joe Savona,2023-01-10T21:49:57Z
f9ecc96bf3a16d3a50d4a39b16af5174026ced5b,"[hir] Update mutable range of operands during LeaveSSA 

It's not enough to only update the mutable range of the canonical id created 
instead of the phi but we need to update the mutable range of each of the 
operands of the phi as well to account for the fact that the phi could've been 
mutated later. 

The operands are updated only if the phi is mutated later. Otherwise these 
operands can be cached in their blocks. 

Fixes https://github.com/facebook/react-forget/issues/978",Sathya Gunasekaran,2023-01-11T15:17:14Z
986c95bc09189f81f5a6a324f36195fe9bafcf47,"[hir] Add test case for incorrect memoisation of mutated objects 

In this case, x should not be cached within the if or else blocks as it is 
mutated later.",Sathya Gunasekaran,2023-01-11T15:17:13Z
ed63dba73930fb3ccc6658a497e2c09a6acb0b44,"[hir] Print MutableRange in lvalue 

This is admittedly a little noisy but super valuable when debugging.",Sathya Gunasekaran,2023-01-11T15:08:37Z
bbba752e98738c259e862ce0088dc8dda36cbec0,[typer] Add type inference for Phis,Sathya Gunasekaran,2023-01-11T11:30:58Z
1910ede50066ad6a1e4185d026fe24f2b0d211d5,[typer] Add PhiType to represent Phis,Sathya Gunasekaran,2023-01-11T11:30:58Z
0c3cfbdd3633632c1653161b02d32bdb14af7d92,[typer] Add type to Phi,Sathya Gunasekaran,2023-01-11T11:30:57Z
a48e54f2b74d87d90b0a3bff3a9b52fd9188308b,"[cleanup] remove old feature flag warnAboutDeprecatedLifecycles (#25978)

This feature flag was always set to true, we can easily clean it up.",Jan Kassens,2023-01-10T20:30:42Z
27b37341e5efc3d3a465a8d16962bd8d9aa62760,"Playground uses run() to automatically sync w compiler passes 

Changes playground to use the modified `run()` function of the compiler, polling 
the generator and building up a Map of tabs automatically based on the passes 
that the compiler runs. This means tabs are always derived from the current 
state of the compiler and we can never forget to add a pass. 

<img width=""1497"" alt=""Screen Shot 2023-01-10 at 11 06 03 AM"" 
src=""https://user-images.githubusercontent.com/6425824/211639442-da421f73-e19e-4b63-9f33-0ce5a68cceb7.png""> 

Note the inclusion of some recently added passes that weren't added to the 
playground — which was my fault but only bc i intended to ship this PR soon :-)",Joe Savona,2023-01-10T19:05:32Z
77512024334e0cb12836b441b7c853d165abaa95,"Make CompilerPipeline a generator 

Turns CompilerPipeline into two functions: 

* `run()` is a generator and yields values that are a disjoint union of either 
AST/HIR/ReactiveFunction along with a name for that step. The idea is to use 
this in the playground so that it always matches the exact steps for 
compilation. I'll update playground in a follow-up. 

* `compile()` is ast in, ast out, and uses `run()` under the hood.",Joe Savona,2023-01-10T18:15:45Z
f3168d020ff24d3530e6d4984c8ce9247bd97939,Distinguish regular/value blocks,Joe Savona,2023-01-10T17:37:33Z
0f4a83596646c610c06b751fc8ac0fc51f90d796,"Remove duplicate JSResourceReferenceImpl mock (#25976)

This mock exists in 2 directories (with identical implementation) and
Jest just picks one at random. This removes one which makes it at least
deterministic and fixes a Jest warning on startup.

It existed in these 2 places:
-
`packages/react-server-dom-relay/src/__mocks__/JSResourceReferenceImpl.js`
-
`packages/react-server-native-relay/src/__mocks__/JSResourceReferenceImpl.js`
(removed)",Jan Kassens,2023-01-10T15:32:59Z
c49131669ba23500b8b071a5ca6ef189a28aa83e,"Remove unused Flow suppressions (#25977)

These suppressions are no longer required.

Generated using:
```sh
flow/tool update-suppressions .
```
followed by adding back 1 or 2 suppressions that were only triggered in
some configurations.",Jan Kassens,2023-01-10T15:32:42Z
afe6521e134178920f0523ede4c715942d8f0564,"Refactor: remove useless parameter (#25923)

## Summary

I was reading the source code of `ReactFiberLane.js` and I found the
third parameter of the function markRootPinged was not used. So I think
we can remove it.

## How did you test this change?

There is no logic changed, so I think there is no need to add unit
tests. So I run `yarn test` and `yarn test --prod` locally and all tests
are passed.

Co-authored-by: Jan Kassens <jkassens@meta.com>",Chris,2023-01-10T04:25:02Z
1253462ea48db362faad864695a172f5a56759ca,"Refactor: Reuse variable ""remoteRepoDir"" (#25740)

Reuse variable `remoteRepoDir` , same with `join(__dirname, 'remote-repo')`.",Hoikan,2023-01-10T03:59:38Z
dce5371763114ba352dfd47b317a10ea923c7585,"Constant propagation/folding 

Implements constant propagation/constant folding for a conservative subset of 
the language. The approach is described in detail in the comments in the file 
itself, a key note here is that this pass currently emits what looks like 
garbage: 

``` 

// input 

const x = 1; 

const y = x + 1; 

// output 

const x = 1; 

2; // <---- you'll see a bunch of lines like this 

const y = 2; 

``` 

These useless lines occur where previously there was a temporary getting 
calculated that was used later (so we saved it until it was used), but now it 
isn't used later so we just emit it in-place. Dead code elimination (DCE) can 
eliminate these and other useless statements later. 

Note that a key motivation for implementing this pass is to reduce memoization 
blocks to what is strictly required for dynamic computations. Why memoize at 
runtime when we compute at build time?",Joe Savona,2023-01-09T23:30:20Z
6f9c9cf9ea037829b4da4bc419a877e3fc8b7d4a,"[hir] Make lambdas dependencies be a list of Places 

This lets HIR understand and rename dependencies correctly.",Sathya Gunasekaran,2023-01-10T16:06:55Z
34464fb16c2aec8202dab868eb381da0e807d771,"Upgrade to Flow 0.196.3 (#25974)

After the previous changes these upgrade are easy.

- removes config options that were removed
- object index access now requires an indexer key in the type, this
cause a handful of errors that were fixed
- undefined keys error in all places, this needed a few extra
suppressions for repeated undefined identifiers.

Flow's
[CHANGELOG.md](https://github.com/facebook/flow/blob/main/Changelog.md).",Jan Kassens,2023-01-09T22:52:42Z
e2424f33b3ad727321fc12e75c5e94838e84c2b5,"[flow] enable exact_empty_objects (#25973)

This enables the ""exact_empty_objects"" setting for Flow which makes
empty objects exact instead of building up the type as properties are
added in code below. This is in preparation to Flow 191 which makes this
the default and removes the config.

More about the change in the Flow blog
[here](https://medium.com/flow-type/improved-handling-of-the-empty-object-in-flow-ead91887e40c).",Jan Kassens,2023-01-09T22:00:36Z
0b4f443020af386f2b48c47c074cb504ed672dc8,"[flow] enable enforce_local_inference_annotations (#25921)

This setting is an incremental path to the next Flow version enforcing
type annotations on most functions (except some inline callbacks).

Used
```
node_modules/.bin/flow codemod annotate-functions-and-classes --write .
```
to add a majority of the types with some hand cleanup when for large
inferred objects that should just be `Fiber` or weird constructs
including `any`.

Suppressed the remaining issues.

Builds on #25918",Jan Kassens,2023-01-09T20:46:48Z
346ecb27fe1b5dc31912d0120929250affbdd24e,[hir] Gather dependencies for lambdas,Sathya Gunasekaran,2023-01-09T18:22:35Z
ce7cab4eeeae907d9cac4af10792272a63b01336,[hir] Parse and codegen FunctionExpression,Sathya Gunasekaran,2023-01-09T18:22:32Z
57ea3b7e8a04272282f303701d0b709981c96e39,"Merge consecutive blocks 

See the previous PR for context, this PR adds a new pass to merge consecutive 
blocks.",Joe Savona,2023-01-09T21:04:33Z
7a7538920eee213e70351d467e514b4e7be637a9,"Broken test for labeled statements 

When we convert a LabeledStatement to HIR we can end up emitting ""consecutive"" 
blocks, ie where there are two blocks such that control flow will always go from 
from one block to the other, with no other way to reach the second block but 
through the first. Example: 

```javascript 

label: { 

foo(); 

break label; 

} 

bar(); 

``` 

Converts to 

``` 

bb0: 

foo() 

goto bb1: 

bb1: 

bar(); 

... 

``` 

Ideally in this case we would merge these into a single block: 

* When debugging, the extra goto makes it look like there is conditional control 
flow when there isn't. If the code is consecutive it's easier to understand that 
if it's a single block. 

* Conversion from HIR -> AST relies on consecutive code all being in a single 
block, so this breaks codegen (we never visit the goto target since all gotos 
are assumed to be safe to convert to a break or continue). 

This PR adds a failing test case, the next PR fixes it.",Joe Savona,2023-01-09T21:04:30Z
d8d5fe989cc7dce1036307ea3bd2ec0007a7f445,[be] Improvements to shrink/markInstructionIds,Joe Savona,2023-01-09T18:06:03Z
0abc420c78ecee971074bae51386312a5614e94a,"[be] Preds/phis use BlockId since blocks may change 

Phi operands and Block predecessors currently use a `BasicBlock` reference 
rather than the BlockId. This diverges from other places (like terminals) where 
we use an id and not a direct object reference. Especially since blocks may get 
rewritten or pruned, it's a bit cleaner to use the block id in these places.",Joe Savona,2023-01-09T17:22:43Z
3765219933e8d9777e180d4b1172624ce8219e47,"[be] Mutate HIR in-place (shrink/rpo) 

Changes `shrink()` and `reversePostorderBlocks()` to modify the HIR in-place 
rather than return a new function, for consistency with all our other passes 
which mutate in-place (for performance reasons).",Joe Savona,2023-01-09T17:13:31Z
0b974418c9a56f6c560298560265dcf4b65784bc,"[Fizz] Fork Fizz instruction set for inline script and external runtime (#25862)

~~[Fizz] Duplicate completeBoundaryWithStyles to not reference globals~~

## Summary

Follow-up / cleanup PR to #25437 

- `completeBoundaryWithStylesInlineLocals` is used by the Fizz external
runtime, which bundles together all Fizz instruction functions (and is
able to reference / rename `completeBoundary` and `resourceMap` as
locals).
- `completeBoundaryWithStylesInlineGlobals` is used by the Fizz inline
script writer, which sends Fizz instruction functions on an as-needed
basis. This version needs to reference `completeBoundary($RC)` and
`resourceMap($RM)` as globals.

Ideally, Closure would take care of inlining a shared implementation,
but I couldn't figure out a zero-overhead inline due to lack of an
`@inline` compiler directive. It seems that Closure thinks that a shared
`completeBoundaryWithStyles` is too large and will always keep it as a
separate function. I've also tried currying / writing a higher order
function (`getCompleteBoundaryWithStyles`) with no luck



## How did you test this change?
- generated Fizz inline instructions should be unchanged
- bundle size for unstable_external_runtime should be slightly smaller
(due to lack of globals)
- `ReactDOMFizzServer-test.js` and `ReactDOMFloat-test.js` should be
unaffected",mofeiZ,2023-01-06T19:28:55Z
5379b6123f171bb48cc8a9c435c11ccb9f8ff0e7,"Batch sync, default and continuous lanes (#25700)

<!--
  Thanks for submitting a pull request!
We appreciate you spending the time to work on these changes. Please
provide enough information so that others can review your pull request.
The three fields below are mandatory.

Before submitting a pull request, please make sure the following is
done:

1. Fork [the repository](https://github.com/facebook/react) and create
your branch from `main`.
  2. Run `yarn` in the repository root.
3. If you've fixed a bug or added code that should be tested, add tests!
4. Ensure the test suite passes (`yarn test`). Tip: `yarn test --watch
TestName` is helpful in development.
5. Run `yarn test --prod` to test in the production environment. It
supports the same options as `yarn test`.
6. If you need a debugger, run `yarn debug-test --watch TestName`, open
`chrome://inspect`, and press ""Inspect"".
7. Format your code with
[prettier](https://github.com/prettier/prettier) (`yarn prettier`).
8. Make sure your code lints (`yarn lint`). Tip: `yarn linc` to only
check changed files.
  9. Run the [Flow](https://flowtype.org/) type checks (`yarn flow`).
  10. If you haven't already, complete the CLA.

Learn more about contributing:
https://reactjs.org/docs/how-to-contribute.html
-->

## Summary

<!--
Explain the **motivation** for making this change. What existing problem
does the pull request solve?
-->
This is the other approach for unifying default and sync lane
https://github.com/facebook/react/pull/25524.
The approach in that PR is to merge default and continuous lane into the
sync lane, and use a new field to track the priority. But there are a
couple places that field will be needed, and it is difficult to
correctly reset the field when there is no sync lane.

In this PR we take the other approach that doesn't remove any lane, but
batch them to get the behavior we want.


## How did you test this change?

<!--
Demonstrate the code is solid. Example: The exact commands you ran and
their output, screenshots / videos if the pull request changes the user
interface.
How exactly did you verify that your PR solves the issue you wanted to
solve?
  If you leave this empty, your PR will very likely be closed.
-->
yarn test

Co-authored-by: Andrew Clark <hi@andrewclark.io>",Tianyu Yao,2023-01-05T23:21:35Z
bbf4d22113bb93608e183b07af077816a4a7074a,"Update import for babel-code-frame in build script (#25963)

## Summary

Updating import for babel-code-frame to use the official @babel package,
as babel-code-frame is a ghost dependency. This change is necessary to
avoid potential issues and stay up-to-date with the latest version of
@babel/code-frame, which is already declared in our project's
package.json.

## How did you test this change?
yarn test",Ming Ye,2023-01-05T20:56:31Z
b83baf63f71669ca7bf222afec305b7a6fd782b7,"Transform updates to support Flow this annotation syntax (#25918)

Flow introduced a new syntax to annotated the context type of a
function, this tries to update the rest and add 1 example usage.

- 2b1fb91a55deb9b7b60452cb57184c2f182a42fd already added the changes
required for eslint.
- Jest transform is updated to use the recommended `hermes-parser` which
can parse current and Flow syntax and will be updated in the future.
- Rollup uses a new plugin to strip the flow types. This isn't ideal as
the npm module is deprecated in favor of using `hermes-parser`, but I
couldn't figure out how to integrate that with Rollup.",Jan Kassens,2023-01-05T20:41:49Z
2619886ac0f1d41c9b361d82f069f9ed682321ff,"fix function type for flow (#25965)

These files fail CI `yarn_flow`.",Mengdi Chen,2023-01-05T20:27:51Z
159a3f64d0d52736300f40ed4018ecd3a94ca331,[typer] Remove unnecessary unifier parameter,Sathya Gunasekaran,2023-01-05T13:46:55Z
db3839e716b397109f10d42e4d0a992c096cc9f8,[typer] Cleanup lvalue null checking,Sathya Gunasekaran,2023-01-05T13:46:51Z
ff9f943741671b6d83d732b2131d3f7e7d3c54c8,"[DevTools] add perf regression test page in shell (#25078)

## Summary

This PR adds a ""perf regression tests"" page to react-devtools-shell.
This page is meant to be used as a performance sanity check we will run
whenever we release a new version or finish a major refactor.
Similar to other pages in the shell, this page can load the inline
version of devtools and a test react app on the same page. But this page
does not load devtools automatically like other pages. Instead, it
provides a button that allows us to load devtools on-demand, so that we
can easily compare perf numbers without devtools against the numbers
with devtools.

<img width=""561"" alt=""image""
src=""https://user-images.githubusercontent.com/1001890/184059633-e4f0852c-8464-4d94-8064-1684eee626f4.png"">

As a first step, this page currently only contain one test:
mount/unmount a large subtree. This is to catch perf issues that
devtools can cause on the react applications it's running on, which was
once a bug fixed in #24863.
In the future, we plan to add:
- more test apps covering different scenarios 
- perf numbers within devtools (e.g. initial load) 

## How did you test this change?

In order to show this test app can actually catch the perf regression
it's aiming at, I reverted #24863 locally. Here is the result:


https://user-images.githubusercontent.com/1001890/184059214-9c9b308c-173b-4dd7-b815-46fbd7067073.mov

As shown in the video, the time it takes to unmount the large subtree
significantly increased after DevTools is loaded.

For comparison, here is how it looks like before the fix was reverted:
<img width=""452"" alt=""image""
src=""https://user-images.githubusercontent.com/1001890/184059743-0968bc7d-4ce4-42cd-b04a-f6cbc078d4f4.png"">

## about the `requestAnimationFrame` method

For this test, I used `requestAnimationFrame` to catch the time when
render and commit are done. It aligns very well with the numbers
reported by Chrome DevTools performance profiling. For example, in one
run, the numbers reported by my method are
<img width=""464"" alt=""image""
src=""https://user-images.githubusercontent.com/1001890/184060228-990a4c75-f594-411a-9f85-fa5532ec8c37.png"">
They are very close to the numbers reported by Chrome profiling:
<img width=""456"" alt=""image""
src=""https://user-images.githubusercontent.com/1001890/184060355-a15d1ec5-c296-4016-9c83-03e761f387e3.png"">

<img width=""354"" alt=""image""
src=""https://user-images.githubusercontent.com/1001890/184060375-19029010-3aed-4a23-890e-397cdba86d9e.png"">

`<Profiler>` is not able to catch this issue here.

If you are aware of a better way to do this, please kindly share with
me.",Mengdi Chen,2023-01-04T22:31:13Z
cccec0e5b23e4823d83b7f38a9e8afa6d6b6e6a2,[be] Don't use nested imports,Sathya Gunasekaran,2023-01-04T21:11:40Z
b8fd4680b1fc89f08ffb2bb8ded3000c516e1d90,[hir] Move inference passes to separate folder,Sathya Gunasekaran,2023-01-04T21:11:37Z
d187fff41450f95b6eb0b9c3dc512d794e3a6a1a,[typer] Move type inference to a separate folder,Sathya Gunasekaran,2023-01-04T21:11:33Z
c2d6552079178b36619f5dfd1ea39ae80b1d38b5,"Unify `use` and `renderDidSuspendDelayIfPossible` implementations (#25922)

When unwrapping a promise with `use`, we sometimes suspend the work loop
from rendering anything else until the data has resolved. This is
different from how Suspense works in the old throw-a-promise world,
where rather than suspend rendering midway through the render phase, we
prepare a fallback and block the commit at the end, if necessary;
however, the logic for determining whether it's OK to block is the same.
The implementation is only incidentally different because it happens in
two different parts of the code. This means for `use`, we end up doing
the same checks twice, which is wasteful in terms of computation, but
also introduces a risk that the logic will accidentally diverge.

This unifies the implementation by moving it into the SuspenseContext
module. Most of the logic for deciding whether to suspend is already
performed in the begin phase of SuspenseComponent, so it makes sense to
store that information on the stack rather than recompute it on demand.

The way I've chosen to model this is to track whether the work loop is
rendering inside the ""shell"" of the tree. The shell is defined as the
part of the tree that's visible in the current UI. Once we enter a new
Suspense boundary (or a hidden Offscreen boundary, which acts a Suspense
boundary), we're no longer in the shell. This is already how Suspense
behavior was modeled in terms of UX, so using this concept directly in
the implementation turns out to result in less code than before.

For the most part, this is purely an internal refactor, though it does
fix a bug in the `use` implementation related to nested Suspense
boundaries. I wouldn't be surprised if it happens to fix other bugs that
we haven't yet discovered, especially around Offscreen. I'll add more
tests as I think of them.",Andrew Clark,2023-01-04T20:11:56Z
48274a43aa708f63a7580142a4c1c1a47f31c1ac,"Remove vestigial Suspense batching logic (#25861)

This code was originally added in the old ExpirationTime implementation
of Suspense. The idea is that if multiple updates suspend inside the
same Suspense boundary, and both of them resolve, we should render both
results in the same batch, to reduce jank.

This was an incomplete idea, though. We later discovered a stronger
requirement — once we show a fallback, we cannot fill in that fallback
without completing _all_ the updates that were previously skipped over.
Otherwise you get tearing. This was fixed by #18411, then we discovered
additional related flaws that were addressed in #24685. See those PR
descriptions for additional context.

So I believe this older code is no longer necessary.",Andrew Clark,2023-01-04T19:50:00Z
efac190973d0f427a83b2b15be9aeca1354501cd,"[typer] Make type inference more conservative 

It's not entirely correct to infer arguments to (not) equals operator as 
primitives.",Sathya Gunasekaran,2023-01-04T18:09:25Z
09bdf3553f9de20ee17fe2e1fc3f6e8ba11efaef,"[hir] Remove unreachable fallthroughs separately from shrink 

shrink visits all the fallthroughs even if they are unreachable so this isn't 
the right place to prune unreachable blocks. 

This PR moves pruning into a separate pass.",Sathya Gunasekaran,2023-01-04T18:09:24Z
e4642326d3d8c27ff0639412ffd953b7606cde18,Make LValue non-nullable in HIR,Joe Savona,2023-01-04T17:51:17Z
29bb3f55a35ec906b3cdf37b7420a19eeaa375c1,"Rename IndexLoad/Store to ComputedLoad/Store 

Hopefully a more clear name, these values correspond to computed properties.",Joe Savona,2023-01-04T01:03:45Z
bd99d06a5fc5c739086e9961d9d0d35283989de6,"Support computed property access/assignment 

Supports computed properties (as LHS and RHS) correctly. Previously we only 
handled member expressions where the property was an identifier, and would 
incorrect treat `a[b]` the same as `a.b`. Now we correctly distinguish these and 
convert `a[b]` as an IndexLoad and `a.b` as a PropertyLoad. Similar for 
assignment, `a[b] = c` is an IndexStore. For both IndexLoad and IndexStore we 
lower the property to a Place first.",Joe Savona,2023-01-04T00:59:41Z
ab150bd9d10f227536edfe1ed146be6bd89f43cd,"Object and array destructuring support in declaration/assignment 

Implements support for array and object de-structuring in variable declarations 
and assignment expressions. Note that the code currently makes the overly 
optimistic assumption that the RHS is an array or object that can be safely 
indexed into. The correct representation would instead treat the RHS as possibly 
iterable, but we need to consider the appropriate representation. I think it's 
worth landing a first optimistic pass and we can iterate forward, this helps 
make it more clear what the ideal representation would have to be and should 
make a bunch of examples work. It also allows us to experiment with 
representations of, and handling for, scope dependencies that involve computed 
property access.",Joe Savona,2023-01-04T00:59:38Z
45b3bd48991772df7d014bcfde60e183074dc25b,"Foundation for IndexStore/IndexLoad (no lowering) 

Adds new types for IndexLoad/IndexStore (renamed later in the stack to 
ComputedLoad/ComputedStore) which will be used to represent computed property 
access/update. The actual lowering to use these is later in the stack.",Joe Savona,2023-01-04T00:59:35Z
c2b2df0d170ad27dc72c0d03c7567faf6b4f5fa6,"Remove unused Place.memberPath 

After the previous PR to change the scope dependency representation, 
`Place.memberPath` is now completely unused, this PR deletes that field and all 
references. Rejoice!",Joe Savona,2023-01-03T23:34:42Z
c69cba357f5b24ec110ecac40b30de48fa83ae3a,"Use distinct type for scope dependencies 

This is a pre-req to deleting the `Place.memberPath` field. We no longer need 
memberPath in the HIR now that we have PropertyStore and PropertyLoad. However, 
scope dependencies use memberPath to track the precise fields that a computation 
depends upon. This PR changes scopes dependencies to use a new 
`ReactiveScopeDependency` type (Place + optional path), which allows the next PR 
to remove `Place.memberPath`.",Joe Savona,2023-01-03T23:34:39Z
26cd435c7d45bed9075b48d6761f6f7874c7bdce,"Support chained assignment expressions 

Fixes codegen for chained assignment expressions. Previously each intermediate 
assignment would be generated independently _in addition_ to the final chained 
expression being emitted. We now emit a single chained expression, almost 
exactly matching the input except for expanding from `x += 1` into `x = x + 1`. 

There are two key changes: 

* Ensuring that assignment expressions always generate an lvalue, which is 
necessary for alias analysis to kick in, since it relies on the effect of the 
lvalue to know where to look for aliasing. 

* The above makes codegen think the entire assignment expression value is a 
temporary that can be emitted later, but that isn't true. The new 
PruneTemporaryLValue pass nulls out lvalues that are never read later, ensuring 
that codegen can eagerly emit the value instead of saving it as a temporary.",Joe Savona,2023-01-03T22:11:04Z
de7d1c90718ea8f4844a2219991f7115ef2bd2c5,"Add `fetchPriority` to `<img>` and `<link>` (#25927)

<!--
  Thanks for submitting a pull request!
We appreciate you spending the time to work on these changes. Please
provide enough information so that others can review your pull request.
The three fields below are mandatory.

Before submitting a pull request, please make sure the following is
done:

1. Fork [the repository](https://github.com/facebook/react) and create
your branch from `main`.
  2. Run `yarn` in the repository root.
3. If you've fixed a bug or added code that should be tested, add tests!
4. Ensure the test suite passes (`yarn test`). Tip: `yarn test --watch
TestName` is helpful in development.
5. Run `yarn test --prod` to test in the production environment. It
supports the same options as `yarn test`.
6. If you need a debugger, run `yarn debug-test --watch TestName`, open
`chrome://inspect`, and press ""Inspect"".
7. Format your code with
[prettier](https://github.com/prettier/prettier) (`yarn prettier`).
8. Make sure your code lints (`yarn lint`). Tip: `yarn linc` to only
check changed files.
  9. Run the [Flow](https://flowtype.org/) type checks (`yarn flow`).
  10. If you haven't already, complete the CLA.

Learn more about contributing:
https://reactjs.org/docs/how-to-contribute.html
-->

## Summary

- Fixes https://github.com/facebook/react/issues/25682

## How did you test this change?

I tried this but it didn't work
```
yarn build --type=UMD_DEV react/index,react-dom && cd fixtures/attribute-behavior && yarn install && yarn start
```

Co-authored-by: eps1lon <silbermann.sebastian@gmail.com>",Steven,2022-12-23T19:31:27Z
81d4ee9ca5c405dce62f64e61506b8e155f38d8d,"reconciler docs: fix small typo - ""mode"" (instead of ""node"") (#25863)",satelllte,2022-12-23T12:22:55Z
726a40eded10172e94678c93f6c24901201de4c3,CHANGELOG.md Change parentheses position (#25762),KZ-Lucas,2022-12-23T11:43:06Z
0a6af823b338d0b5831763163134e36605b6a45d,"Lowering for PropertyStore 

Converts assignment expressions where the lvalue is a MemberExpression to use 
PropertyStore, rather than creating an lvalue with a member path. The net effect 
is that lvalue will always have a null member path. 

There are two main cases: 

* `x.y = <value>`. We lower <value> to a Place, lower the object of the member 
expression to a place (`object)` create a temporary Place for the result of the 
assignment, and then create a `PropertyStore <object>, ""<property>"", <value>`. 

* `x.y += <value>` (and similar update-in-place operands). We extract the object 
of the member expression, read the current value via a PropertyLoad, compute the 
updated value, and store it back with a PropertyStore (each of these goes into 
its own temporary).",Joe Savona,2022-12-22T23:04:57Z
c7a84fc033a7638728b9c983c6e7e84d16c966e3,"Foundation for PropertyStore (no lowering yet) 

Adds a `InstructionValue::PropertyStore` variant and the minimal necessary 
handling across the passes to get things to compile. Lowering is in the next PR.",Joe Savona,2022-12-22T22:51:27Z
7ee40764e6f79bf7dad5b60aa468a9d9bbe35035,"Revert ""[nocommit] Run test262 on this PR to verify it works for real… 

…-realsies"" 

This reverts commit 3c8700cbc7502e56cca8d4bb77a08e1ee747c166. 

I'm not sure how this happened but I accidentally hit up + enter on a previous 
`ghstack land` command for a different stack and it landed this one. 
Infuriating.",lauren,2022-12-22T22:53:59Z
2d4c2094d820a7580b3f902101f8313bb2a6636c,"[@nocommit] Run test262 on this PR to verify it works for real-realsies 

final v2",Lauren Tan,2022-12-22T22:40:20Z
5e0dba9012af93733c07ca143be2d32fa1befb15,"[test262] Always return a pseudo Error object 

For unknown reasons I didn't have the energy to dig into, some Babel Error 
objects can't be written to so despite formatting the error message, the 
original one would still be used. To get around this I'm just constructing a 
fake object with a `name` and `message` so the correctly formatted messages are 
used.",Lauren Tan,2022-12-22T22:40:18Z
74a0d54db2e96ebcedfb5e39e41cb2bbd3acacef,Account for stores that can occur in object/array literals,Joe Savona,2022-12-22T22:00:49Z
1fd4bad52589ea750c2a54ecddc314166e2f6e4e,"RHS member expression converts to PropertyLoad 

This is an incremental step to removing `Place.memberPath`. This PR changes how 
we handle MemberExpressions in rvalue position, converting to a new 
`PropertyLoad` InstructionValue variant. Example: 

``` 

let x = a.b; 

x.y = b.c; 

=> 

Const tmp1 = PropertyLoad a, 'b'; 

Const x = Place tmp1; 

Const tmp2 = PropertyLoad b, 'c'; 

Reassign x.y = tmp2 

``` 

That we already recently made a chance to ensure that _if_ the lvalue is a 
member expression, that we convert the RHS to a Place. So although `x.y = b.c` 
could technically be lowered to a single instruction (with the`b.c` as a 
PropertyLoad), we force this to a temporary to ensure that we can independently 
memoize the RHS value. 

The net result is that the following combinations are possible: 

* `x = y`, lvalue identifier, rvalue identifier 

* `x.y = y` lvalue member path, rvalue identifier 

* `x = y.z` lvalue identifier, rvalue property load 

As noted above, `x.y = a.b` no longer occurs (and there's an invariant for this 
in one of the passes). 

A follow-up PR will add a PropertyStore instruction so that we can remove member 
paths in lvalue position too.",Joe Savona,2022-12-22T22:00:48Z
8246956331b690452a3d3690c70f45b714f9683a,"Force DisjointSet.union to always pick a root 

@josephsavona had the intuition that we were picking the wrong root in the 
previous infinite loop test case, so the fix for this is to force a root to 
always be picked. This works because `find` implements path compression (if a <- 
b and b <- c, then we can just point a <- c to ""flatten"" the tree which makes 
subsequent `find` operations more efficient since we don't have to follow the 
ancestor chain each time), so we're forcing all those unions to pick one parent. 

From some googling it looks like the traditional way to implement union is to 
call `find` so this should be the ""right"" way to fix it (?). 

I'm also adding a basic unit test for DisjointSet, I think we could revisit 
later and see if property testing is worth it but for now I mainly wanted to 
capture the regression test as a unit test.",Lauren Tan,2022-12-22T21:16:16Z
311e5fdf69d563e70e51f8cc3d7f2e49061a29f1,"Add infinite loop test case 

Discovered this by accident modifying Joe's playground example. This seemed to 
be triggered in inferReactiveScopeVariables when iterating over the DisjointSet 
of scopeIdentifiers. In particular this test case contains a cycle and 
DisjointSet.find would never terminate.",Lauren Tan,2022-12-22T21:16:16Z
75fc20981a2cf300c15c888c94ada62c7e80e2ce,"Fix test262 for realsies 

The github action was exceeding maximum allowed memory size because we were no 
longer grouping messages correctly prior to formatting them in the script. I 
think these were introduced when we integrated the Babel plugin into the 
preprocessor. This PR strips out filenames from the message so they can be 
grouped together again. Also added some light comments 

Test plan: manually ran `scripts/test262.sh` and verified that the JSON was 
grouped together correctly",Lauren Tan,2022-12-22T18:12:08Z
47e20c3f66f06f3c4d22bdb17d47f44c1ec33363,Expect files are input/ouput code only (no HIR/scopes),Joe Savona,2022-12-22T18:23:14Z
4385a283e4dce84029b1da51ce615e832e89f95c,"Ensure non-conflicting names in output, wo suffixes by default",Joe Savona,2022-12-22T18:23:11Z
5fcf1a4b4c2150a1b9fe0de0144a82a053c63966,"Bugfix: Synchronous ping during render phase sometimes unwinds the stack, leading to crash (#25851)

I found this bug when working on a different task.

`pingSuspendedRoot` sometimes calls `prepareFreshStack` to interupt the
work-in-progress tree and force a restart from the root. The idea is
that if the current render is already in a state where it be blocked
from committing, and there's new data that could unblock it, we might as
well restart from the beginning.

The problem is that this is only safe to do if `pingSuspendedRoot` is
called from a non-React task, like an event handler or a microtask.
While this is usually the case, it's entirely possible for a thenable to
resolve (i.e. to call `pingSuspendedRoot`) synchronously while the
render phase is already executing. If that happens, and work loop
attempts to unwind the stack, it causes the render phase to crash.",Andrew Clark,2022-12-22T04:55:49Z
b5623abf740c5f50a4e5ddc2aaad6d5a19ac02da,"[ez] Update test262 submodule 

`git submodule update --remote`",Lauren Tan,2022-12-21T21:07:11Z
003a1772abd3d79de13ed348d2841553751ac31b,"Fix broken import path in test262-preprocessor 

Previously we weren't ever clearing the `dist` directory so there were likely 
some vestigial files left over from previous builds that might have confused the 
import path. This commit fixes the import path and also deletes the `dist` 
directory on every build to ensure a clean slate.",Lauren Tan,2022-12-21T21:04:29Z
f72397b5c13174d705341d33d5fb64a52a9b4d64,[typer] Infer JSXText as a Primitive,Sathya Gunasekaran,2022-12-21T21:13:58Z
6ba211722756a78cd873ab126a3da9940f58b013,"[hir] Use type inference for Effect.Store refinement 

Only identifiers of type object can be safely refined to Effect.Store, default 
unknown identifiers to Effect.Mutate.",Sathya Gunasekaran,2022-12-21T21:13:58Z
ff29264050bba9ae823b7fc41eccf88dae28a28b,"[typer] Remove type inference of fields 

Given that our type inference needs to be very conservative, there's not a lot 
of benefit to having such fine grained type inference. 

In the future, we can use type information from flow/ts for inference.",Sathya Gunasekaran,2022-12-21T21:13:57Z
b59f9dd5618ac21e45a93e89df462a484519efab,"[hir] Remove unused code from InferAlias 

For now, we've decided to punt on super fine grained aliasing of fields (ie, 
mutating x.y shouldn't mutate x.z or it's aliases). 

This PR removes the code that tracks the aliases of each field. We can re-add 
this when we revisit this functionality. 

For the rest of the field aliasing, most of it has been replaced by 
InferAliasForStores.",Sathya Gunasekaran,2022-12-21T21:13:57Z
8c920cfa9049d00f3c1400132f4ca10ba903914a,"Factor out assignment expression cases 

Splits handling of simple assignment updates (`=`) from update-assignments (`+=` 
etc). This unblocks starting to support destructuring for the simple case in the 
subsequent PR.",Joe Savona,2022-12-21T18:02:06Z
69e34270a2e3f1307f90b219039b18449bd96ae2,Factor out assignment lowering to allow generating multiple instructions,Joe Savona,2022-12-21T18:02:06Z
836211a549e4928645eac0fb4261509f8947dff3,"Prep for destructuring, factor out lowerIdentifier()",Joe Savona,2022-12-21T00:57:13Z
079cfe68bfa7ee04a90af69b6186097598b2e3ea,"Fix test262 preprocessor 

The test262 preprocessor was correctly running forget against all the functions 
in each test file, but it was incorrectly transforming the file contents 
overall. Previously we swapped the contents of the file for the transformed 
output of the last function, now we use the babel plugin to rewrite functions in 
place and keep the rest of the file intact. 

Of course, the tests that failed before still fail. But when we fix them the 
tests will work now.",Joe Savona,2022-12-21T00:27:11Z
bc0787fefb637395c17c90558f9d22d6fcd89281,"More precise handling of const/reassign in ssa form 

Addressed a TODO from the previous PR. When we enter SSA form, when we rewrite 
variable reassignments we currently change the identifier but leave the kind of 
the lvalue alone; technically we should convert from Reassign to Const. After 
doing that, it's easier to correctly update when we leave SSA form, we can 
convert just a subset back into let/reassign (but leave most things alone as 
const).",Joe Savona,2022-12-21T00:09:59Z
178bde349598f277e1432c3c1baf72f3c535a66a,"Run LeaveSSA prior to analyzing reactive scopes 

Reorders LeaveSSA so that it runs before we begin evaluating reactive scopes. 
Note that reactive scopes must span the full construction of each variable — for 
variables with a phi, this must span the declaration and all assignments of the 
phi operands. And that's exactly what the new LeaveSSA does! LeaveSSA removes 
phi nodes and ensure that all versions of a variable which flow into a phi have 
been assigned a single canonical identifier (with an appropriate mutable range). 

This PR includes this and some related changes: 

* Reorders the pass 

* Changes hir-test to print the final HIR, eg just prior to codegen 

* Teaches LeaveSSA to update the mutable range of the canonical identifiers it 
assigns, based on the min/max of the variables assigned.",Joe Savona,2022-12-20T23:58:03Z
538883935787ec70273995adf962696d1d742ab2,"[hir] Generalize alias analysis for Effect.Store 

Rather than special casing for field stores, look for Effect.Store to alias 
fields. 

In the future, this will be extended to other constructs like Array#push.",Sathya Gunasekaran,2022-12-21T12:04:02Z
afdd2cb9104254ded6b507bfbbe5ada541e8be9d,"[hir] Add Effect.Store 

Effect.Store is exactly like Effect.Mutate, the only difference is that Store 
aliases one into a another value. 

There is no practical difference between Effect.Mutate and Effect.Store 
currently.",Sathya Gunasekaran,2022-12-21T12:04:01Z
2b1fb91a55deb9b7b60452cb57184c2f182a42fd,"ESLint upgrade to use hermes-eslint (#25915)

Hermes parser is the preferred parser for Flow code going forward. We
need to upgrade to this parser to support new Flow syntax like function
`this` context type annotations or `ObjectType['prop']` syntax.

Unfortunately, there's quite a few upgrades here to make it work somehow
(dependencies between the changes)

- ~Upgrade `eslint` to `8.*`~ reverted this as the React eslint plugin
tests depend on the older version and there's a [yarn
bug](https://github.com/yarnpkg/yarn/issues/6285) that prevents
`devDependencies` and `peerDependencies` to different versions.
- Remove `eslint-config-fbjs` preset dependency and inline the rules,
imho this makes it a lot clearer what the rules are.
- Remove the turned off `jsx-a11y/*` rules and it's dependency instead
of inlining those from the `fbjs` config.
- Update parser and dependency from `babel-eslint` to `hermes-eslint`.
- `ft-flow/no-unused-expressions` rule replaces `no-unused-expressions`
which now allows standalone type asserts, e.g. `(foo: number);`
- Bunch of globals added to the eslint config
- Disabled `no-redeclare`, seems like the eslint upgrade started making
this more precise and warn against re-defined globals like
`__EXPERIMENTAL__` (in rollup scripts) or `fetch` (when importing fetch
from node-fetch).
- Minor lint fixes like duplicate keys in objects.",Jan Kassens,2022-12-20T19:27:01Z
69fbdfc7cd81e50815fafaaf927c9cb3250a1d20,[typer] Add inferTypes pass to playground,Sathya Gunasekaran,2022-12-20T14:55:56Z
c130bcc9c2a6ad1922ca6da5ced2ad5c8a40cfb1,[typer] Use opaque TypeId to number types,Sathya Gunasekaran,2022-12-20T14:55:52Z
549f5a4af633621ceaebc41cf8ff9dbfe57e6ba1,[typer] Return a narrow-er type from makeType,Sathya Gunasekaran,2022-12-20T14:55:48Z
828fd81be352261df570285365e21825d5f67ed2,Add new pass to playground,Joe Savona,2022-12-20T20:16:34Z
af91a7ab863c1990be28b7b0db8bc1b0227c82b9,"Ensure member path assignments memoize independently 

Assignment expressions to a member path are a special case because they're the 
only place where a value isn't assigned to a (possibly temporary) variable, 
which is our unit of memoization. #901 demonstrated how this can lead to values 
that can't be independently memoized: 

```javascript 

const x = {a: a} 

x.y = [b, c]; // array recomputed w `x`, even if only `a` changed 

``` 

This PR ensures that assignment expressions where the LHS is a member path lower 
the RHS to a Place. That means the above example is handled as if you wrote: 

```javascript 

const x = {a: a}; 

const tmp1 = [b, c]; 

x.y = tmp1; 

``` 

And we independently memoize the temporary.",Joe Savona,2022-12-20T19:06:08Z
cedaee5b03e94ee5f41f3683dd61d8e917fe29a2,"Codegen for scopes without dependencies 

Completes a todo for the `if` condition of scopes without any inputs. In this 
case since there are no inputs we can check for changes, we check if the first 
_output_ cache slot is set to the sentinel. 

For this to work we need to ensure that all scopes have at least one output, 
which isn't currently the case. Dead code can produce output-less sentinels. So 
this PR also adds a pass to find scopes w/o any outputs and convert them to 
regular blocks. We could in theory also just delete them, but for now let's be 
more conservative. This is something we'd want to highlight as a diagnostic in 
an IDE, though existing dead code linters would almost certainly find this case 
too.",Joe Savona,2022-12-20T19:06:07Z
ae8f9066dd593646c90740d7b37461c90d12ad98,Fix invalid import path in test262-preprocessor,Lauren Tan,2022-12-20T16:42:51Z
2721d2a0d975324a560230b97c7adf34f7e917bf,"Remove compiler flags 

Remove our existing compiler flags since they were only being used for 
enabling/disabling passes to aid debugging and to simplify in preparation for 
the upcoming work on diagnostics and bailouts. Additionally with the new 
playground tabs disabling passes has become less necessary. In the future when 
we have actual compiler flags (eg tweaking optimization levels) we can add this 
back. 

I opted to keep the existing `CompilerResult` return value instead of just 
returning the optimized AST as we're still using `scopes` in our test fixtures.",Lauren Tan,2022-12-20T16:42:51Z
7cf8e9ac421f36fa468df264167b2a8ed89e981f,[ez] Fixup missing passes in test262-preprocessor,Lauren Tan,2022-12-20T16:13:05Z
9390e969e21d68ea109fdf55f7b0db6e7d65b742,"mv src/HIR/Pipeline src/CompilerPipeline 

Small reorganization to move Pipeline out of HIR since it's a compiler module. 
It used to make sense before to be in HIR since the old architecture was the 
still the primary, but no longer!",Lauren Tan,2022-12-20T16:13:05Z
f1af022be1a5594ddd67a68f2c7201d31513630a,[typer] Fix objectTypeEquals,Sathya Gunasekaran,2022-12-20T13:38:09Z
6f06b0e08a4ae43785e8b9fd2270d459af455973,[typer] Reuse PolyType objects,Sathya Gunasekaran,2022-12-20T13:38:08Z
2c3e572566daebda9581074984ef3fa29ce21e5d,"[typer] Be more conservative with function type inference 

It's not safe to infer types of arguments and return values because Javascript 
is so polymorphic. Instead just infer the type of the callee for non methods. 

Interestingly, even this is not conservative enough for JavaScript because Proxy 
can also be callable. But I think for our use cases we will treat Proxy and 
Functions similarly (they're all just objects) so it's ok.",Sathya Gunasekaran,2022-12-20T13:38:07Z
9207607d37a50ad85e7f16879fe636a40c71b649,"Delete old architecture 

Thanks old architecture! We learned a lot about what does and doesn't work via 
this POC, but it's time to move forward w the ~~new~~ current architecture.",Joe Savona,2022-12-19T18:04:54Z
d9b9554948899f92b7f8afc354e77393370866c2,"Remove old architecture from playground 

Removes the old architecture from the playground. Next step deletion.",Joe Savona,2022-12-19T18:00:16Z
5db523a98a617842bb45500ff82491184d8ecacd,"Fix bug with scope output analysis for nested scopes 

When collecting the output of each scope I was checking to see whether each 
operand was being used after the end of the _current_ scope. What we really want 
to be checking is whether the operand is used after _the scope in which it's 
defined_. Those are the same thing when there is no nesting, involved, so the 
previous logic worked for most examples. 

It isn't super easy to tell when if the operand's scope has ended, because we 
don't always know what the ""current"" InstructionId is inside a ReactiveFunction. 
And that in turn isn't quite so easy to change, because of some edge cases like 
break statements that we synthesize. The solution here is to track the set of 
active scopes, and if an operand is used and its scope is not active then voila, 
it's scope must have completed and its an output.",Joe Savona,2022-12-18T20:14:41Z
d649940c2754f73b1098c71dcc1c9ac9574c5710,Test case showing lack of independent memoization of object properties,Joe Savona,2022-12-18T20:14:38Z
05d1fe94f91fbe03fcdfbe661f677331f9283a14,"[be] Split files into directories 

Moves _some_ files from HIR into new top-level directories. To not make 
@gsathya's life a pain I left the files he's touching alone, but I moved some 
others. My intent is to have something like this: 

* Babel/ - code for the Babel plugin, though ideally this actually gets split 
into a separate package and the compiler itself is AST in, AST out w no Babel 
dep. 

* HIR/ - the core HIRFunction, HIR and related data types, plus the HIR 
construction and printing, HIR visitors. 

* Inference/ - the core inference passes that operate on the HIR, including type 
inference, reference effects, alias analysis, mutable range analysis, etc. I'll 
let @gsathya  move these files when at a good stopping point. 

* ReactiveScopes/ - inference relating to reactive scopes, 
constructing/printing/codegenning ReactiveFunction 

* SSA/ - enter/leave SSA and eliminate redundant phis 

* Utils/ - every project needs a place to put stuff that doesn't fit into the 
other categories, this is ours. 

This leaves just index.ts at the top level, and overall feels pretty tidy. Not 
too tedious to figure out where anything goes, hopefully.",Joe Savona,2022-12-17T01:25:11Z
6053703dbbb3c59157d5e07126fb77416ad01844,"add missing pass to playground 

It's pretty tedious to keep the playground in sync w `Pipeline` — we need some 
abstraction so we can write the sequence of passes once and reuse it (while 
inspecting intermediate states).",Joe Savona,2022-12-16T17:41:47Z
075cdcec9e02f3d39ec706d69f0eef4dd1904fad,[be] Move old compiler to separate package,Joe Savona,2022-12-16T17:33:07Z
7a29405d68bceba680c812f33074201516ab2668,[be] Rename some types for ReactiveFunction,Joe Savona,2022-12-16T16:45:46Z
fabef7a6b71798fe2477720e59d090a0e74e0009,"Resubmit Add HydrationSyncLane (#25878)

Depends on #25876

Resubmit #25711 again(previously reverted in #25812), and added the fix
for unwinding in selective hydration during a hydration on the sync
lane.",Tianyu Yao,2022-12-15T20:23:53Z
7efa9e59707b341f10fab79724e0fca373187925,"Fix unwinding context during selective hydration (#25876)

This PR includes the previously reverted #25695 and #25754, and the fix
for the regression test added in #25867.


Tested internally with a previous failed test,  and it's passing now.

Co-authored-by: Andrew Clark <git@andrewclark.io>",Tianyu Yao,2022-12-15T19:47:07Z
7ab0303822d0e553c4961eed9198a195f48a0559,[playground] Increase min width of output tabs,Sathya Gunasekaran,2022-12-15T18:38:06Z
25fb36c9661049930826a2d93bcf2b401e141107,[playground] Make gutter smaller in the output tabs,Sathya Gunasekaran,2022-12-15T18:38:05Z
9e9dba90eb5a2dc5a99a97141d1061ce492d6f55,[playground] Make input tab smaller,Sathya Gunasekaran,2022-12-15T18:38:05Z
78d976302f60b5e57310f21dbf274af965afc0ae,"[playground] Remove mobile support 

This is mostly unused and there's just not enough benefit for now. We can re-add 
this if folks start using this site on mobile. Removing now to simplify the 
codebase.",Sathya Gunasekaran,2022-12-15T18:38:04Z
c4f16fce5ccfd15ef0626c8fbde408fd6d1296ab,"[playground] Remove handlebar to resize input 

The only use of this is to resize the input tab immediately to be smaller. 
Instead, a follow on PR will just make the input tab smaller by default.",Sathya Gunasekaran,2022-12-15T18:38:03Z
6efac286770f8b104aea68bf84ae28c8286a24b2,Prune unnecessary labels in output,Joe Savona,2022-12-15T00:42:54Z
de3952352bf664ba63edd7211a1f732f791d9441,"Use new codegen in playground 

Switches to the new codegen with memoization applied, and puts the JS tab first 
to make it easier to look at the input/output 

side by side.",Joe Savona,2022-12-15T00:23:41Z
575db2b4ea7213badc3a0be2b58330a0918091cc,"[wip] Codegen with memoization applied 

Updates the ReactiveFunction-based codegen from the previous PR to emit 
memoization code for each scope. This is currently naive and has some bugs, but 
it gets the idea across. The core logic is straightforward at this point, all 
the hard work is in earlier passes: 

* Compute one change variable per scope dependency, eg `const c_0 = $[0] === 
maxItems` 

* Generate one `let` binding for each scope output 

* Generate an if block where the test is if any of the change variables are true 
(`||` them together) 

* Generate the consequent block with the original code block, plus statements to 
save dependencies and outputs to their cache slots 

* Generate the alternate block to populate the scope outputs from their cached 
values 

## Todos 

A few things don't quite work yet: 

* Codegen is designed to avoid emitting variables for temporary values, but 
that's causing a few values to sort of disappear n the examples, or get emitted 
twice. There are a variety of ways to achieve this but we'll need to ensure that 
this category of values gets assigned to a variable and then reference the 
variable. This is more involved. 

* Scopes can end up with zero dependencies, in which case we should check that 
the first output cache is initialized. This one is more straightforward. 

* If there are early returns, we don't record that they occurred and replay them 
in the `else` branch for each scope. We know the algorithm though so i'm okay 
delaying that for now.",Joe Savona,2022-12-15T00:12:36Z
70a7d5f41e10ca04bfa800ddba2cc649f3248b78,"Codegen from ReactiveFunction (no memoization yet) 

Currently codegen operates from HIR using a tree visitor, but for scope 
construction we're converting the HIR (CFG) into a ReactiveFunction (AST-like). 
Our original idea for codegen was that we would convert the ReactiveFunction 
back to HIR, and then codegen from there. However, the ReactiveFunction is 
already in tree form...which makes it very straightforward to generate code 
from. 

So this PR implements codegen from ReactiveFunction. The output is _identical_ 
thanks in large part to reusing as much logic from Codegen.ts as possible. The 
next PR will add memoization logic.",Joe Savona,2022-12-14T22:54:37Z
7199229cb45e896cf93faf5905636221c66e0b1f,"Record scope outputs 

While we're collecting scope dependencies, we have the exact right information 
to record scope outputs. These are variables that need to be defined outside of 
the scope and populated by recomputing (on change) or via the cached value (if 
no change).",Joe Savona,2022-12-14T21:27:20Z
84a0a171ea0ecd25e287bd3d3dd30e932beb4677,"Rename experimental useEvent to useEffectEvent (#25881)

We originally had grand plans for using this Event concept for more but
now it's only meant to be used in combination with effects.

It's an Event in the FRP terms, that is triggered from an Effect.
Technically it can also be from another function that itself is
triggered from an existing side-effect but that's kind of an advanced
case.

The canonical case is an effect that triggers an event:

```js
const onHappened = useEffectEvent(() => ...);
useEffect(() => {
  onHappened();
}, []);
```",Sebastian Markbåge,2022-12-14T20:08:29Z
459263b76320dabcc21cd6b523ea5b2440ba4e0b,Refactor reactive scope representation,Joe Savona,2022-12-14T20:07:50Z
552fe1878be8e73118bd18c1a217ca934aebdbb5,Cleanup previous dep collection,Joe Savona,2022-12-14T16:42:39Z
dd1ff4dc302b1cdcfd0df7494a6abbb9b9f73006,"Combine dependency collection and propagation, more precise collection 

I realized that properly propagating scope dependencies requires reusing the 
same logic as dependency collection itself: a dependency of an inner scope 
should only be propagated upward if the dependency was declared before the outer 
scope, for example. So this PR reimplements dependency collection in the 
propagation pass. 

At the same time I made a few other improvements: 

* Don't report dependencies that are ""constant"". This is a bit simplistic for 
now, we can use a more advanced analysis later. 

* Try to avoid creating duplicate dependencies. 

This addresses the todo from the previous PR (flattening scopes in loops) since 
now we don't need to compute deps until after that runs. As a follow-up i'll 
remove the existing dependency collection.",Joe Savona,2022-12-14T16:42:39Z
d909ae04349b5a781409929acd18447e80ada4e9,"Fix scope dependency collection ordering bug 

Dependency collection has to visit the instruction id first before evaluating 
the instruction, in order to completely any scopes that would end at that 
instruction. Note the removed dependencies that don't appear within the scopes.",Joe Savona,2022-12-14T16:42:38Z
972caf5bf15faf8f69e72f12dfd06d9ee3043451,"Propagate scope dependencies upwards 

Initial, partial implementation of dependency propagation. This lays the 
groundwork, #876 completes it after some other fixes this uncovered.",Joe Savona,2022-12-14T16:42:37Z
5f3dc0b6c7691c5213f29fd6bd52a29dec1c3e4c,"Flatten scopes within loops 

We can't independently memoize values created within a loop, so this pass 
flattens scopes within loops. Right now this just flattens the scope away 
without propagating any dependency (or output) information, follow-ups will 
extend it to do that.",Joe Savona,2022-12-14T16:42:37Z
be9b6356dfd43e55d305e04a7865d5c10bcaeb86,cleanup unnecessary code from BuildReactiveFunction,Joe Savona,2022-12-14T16:42:36Z
189f48ee0a704b12977742058af7d5f8d8385206,"Dont create scopes for consts w primitive values 

We don't need to create scopes for primitive values that are never reassigned. 
The actual rules are more complex — we could choose to skip creating scopes for 
values that don't allocate — but this simple heuristic is good for now.",Joe Savona,2022-12-14T16:42:36Z
73ad571c6b52cd7e5321ab52c81c5a133fd1d201,"Add invariant for problematic LeaveSSA case 

The new LeaveSSA looks ahead to the phis of fallback blocks. However, HIR can 
sometimes have multiple blocks with the same fallthrough (totally fine), so this 
diff clears the phis of fallbacks as they are reached to avoid reprocessing 
them. This caused a previously incorrect case to now fail, yay.",Joe Savona,2022-12-14T16:42:35Z
4b6653123732549aaa12f106f44f418dc7dbb2e2,[test] Remove mermaid diagrams from test output,Sathya Gunasekaran,2022-12-14T15:47:13Z
9bfad004107b5597000775717dbbebd64f2d12f2,"[type-infer] Implement Hindley Milner type inference 

Based on the lambda calculus of ForgetScript, this infers the types of 
primitives, objects and functions.",Sathya Gunasekaran,2022-12-14T15:36:32Z
6e52cc3f3800c885fac12541fa0372b43e85829a,"Construct nested reactive scopes 

There are a bunch of ways we can go about converting from the input HIR into a 
final form that has the preamble inserted and memoized blocks of code wrapped 
with change detection and caching. This is just one way, it might not be the 
ideal way. In any case, this pass converts HIRFunction -> ReactiveFunction. The 
latter is a recursive (tree-shaped) data structure that attempts to represent 
blocks each of composed of scopes or instructions, where scopes are themselves 
composed of blocks etc. The idea is a) this makes it easy to visualize the 
structure and check that the scopes and their dependencies are correct and b) 
this is a really nice form for adding the memoization code. We can convert from 
a ReactiveFunction back to an HIRFunction, wrapping each scope in the 
appropriate if checks and caching. 

## Example 

Consider the following example, which has 2 main scopes: an outer one for `x` 
and an inner one in the consequent for `y`: 

```javascript 

function foo(a, b, c) { 

const x = []; 

if (a) { 

const y = []; 

y.push(b); 

x.push(<div>{y}</div>); 

} else { 

x.push(c); 

} 

return x; 

} 

``` 

## Output 

The new builder constructs a ReactiveFunction for this example along the lines 
of the following (note that inputs are always empty bc we don't collect those 
yet): 

``` 

{ 

scope @0 [1:11] inputs=[]  { 

[1] Const mutate x$11_@0[1:11] = Array [] 

[2] if (read a$8) { 

scope @1 [3:5] inputs=[] { 

[3] Const mutate y$12_@1[3:5] = Array [] 

[4] Call mutate y$12_@1.push(read b$9) 

} 

scope @2 [5:6] inputs=[] { 

[5] Const mutate $13_@2 = ""div"" 

} 

scope @3 [6:7] inputs=[] { 

[6] Const mutate $14_@3 = JSX <read $13_@2>{freeze y$12_@1}</read $13_@2> 

} 

[7] Call mutate x$11_@0.push(read $14_@3) 

} else { 

[9] Call mutate x$11_@0.push(read c$10) 

} 

} 

[10] return x$11; 

} 

``` 

This shows the hierarchy: there's an outer scope, `@0` to compute `x` (the first 
scope), then within the if consequent there's another scope, `@1`, to compute 
`y`. We have some technically extraneous scopes to compute the JSX element; that 
can be cleaned up with a bit more refinement. 

With this structure — and the inputs and outputs of each scope filled in — we 
can convert to code in a straightforward manner. Each scope turns into a block 
along the lines of the following: 

(note here we use strings to index the cache, in reality these would be ints) 

```javascript 

// one change variable pet input: 

let c_a = a !== $['a']; 

... 

// one variable for each output: 

let x; 

... 

// if (changed) { recompute } else { use-cache } 

if (c_a || ... ) { 

x = ...; 

// one assignment per output 

$['x'] = x; 

// update cache per input 

$['a'] = a; 

... 

} else { 

// one assignment per output 

x = $['x']; 

... 

} 

```",Joseph Savona,2022-12-13T19:53:42Z
4dda96a4071d2cc4bbcc444438cfacee991f07e2,"[react-www] remove forked bundle (#25866)

*NOTE:* re-apply of 645ae2686b157c9f80193e1ada75b7e00ef49acf now that
www is updated.

The `enableNewReconciler` was gone with
420f0b7fa1fcc609fc7b438c4599d0f76fab4bc0, this removes the bundle
config.",Jan Kassens,2022-12-13T15:44:48Z
2df0c832f5fc62bf825e0c18968d6714c1ea0de0,"[be] Remove stale TODO 

Fixed in fa1ae5de5be84dd25263845fb43157d77c0826aa",Sathya Gunasekaran,2022-12-13T09:28:00Z
74599a92a28e0a5ea7db02afc44911cd2b1aae35,[hir] Update Place.type based on value inference,Sathya Gunasekaran,2022-12-13T09:17:19Z
7f8ad491651fa2136288bf731dda79f5d1e8f3e3,[hir] Split value tracking into a separate pass,Sathya Gunasekaran,2022-12-13T09:17:19Z
5aa4143e2404ee8b993c735ea6c5146e52edca71,"TreeVisitor distinguish blocks from statements 

TreeVisitor didn't distinguish between the type of a block and the type of an 
item that can occur within a block - this was fine for Codegen which can use 
`t.Statement` for both of those values. However, the upcoming scope construction 
needs to distinguish instructions in a block from a block itself, so this PR 
adds a new type parameter.",Joe Savona,2022-12-13T00:46:55Z
35ba4149ec2fb3831e7f82c00f68725c7897124f,"Support assignment in for statement's update clause 

Per the title, this PR adds support for assignment expressions in update 
clauses. This was mostly fixed by the previous diff to improve value block 
handling, and there's only a bit more to do here to allow a ""value block"" that 
doesn't produce a value (we need a better name).",Joseph Savona,2022-12-12T23:40:46Z
b8cf85d77dd964e2f658ab53d02d5636fffc8a46,[hir] Add Type to Place,Sathya Gunasekaran,2022-12-12T21:10:50Z
e2e5e389af35ae9223a99acc09cd8da651240467,[be] Move buildAliasSets to DisjointSet,Sathya Gunasekaran,2022-12-12T20:35:23Z
3c976a24b3eb25557e69448416015486dd75c0b8,[hir] Run mutable range analysis for aliases to fix point,Sathya Gunasekaran,2022-12-12T20:35:23Z
b8d78a94a8b2ad913be3bd6538c3ce34c07071df,"Improve ""value block"" handling 

This is a pre-req to construct reactive scopes in #857. ""Value blocks"" such as 
`for` init/test/update and `while` test need to be consistently wrapped in 
enter/leave calls so that we can extend the range of values properly. We also 
need to handle `for` init blocks a bit differently, since they allow variable 
declarations but not other types of statements. 

This PR ensures that we use consistent methods for handling value blocks (`for` 
test/update and `while` test) and treats `for` init as a new type with its own 
enter/append/leave visitor functions.",Joseph Savona,2022-12-12T19:20:10Z
9c09c1cd62ef862df91bcb4df4271917629d6963,"Revert ""Fork ReactDOMSharedInternals for www (#25791)"" (#25864)

We did some cleanup internally of our ReactDOM module, so this fork
should be safe to remove now. Will land this only after our internal
diff lands.",lauren,2022-12-12T17:39:57Z
996e4c0d56dabab382ca932cd5b8517e63020999,"Offscreen add attach (#25603)

`Offscreen.attach` is imperative API to signal to Offscreen that its
updates should be high priority and effects should be mounted. Coupled
with `Offscreen.detach` it gives ability to manually control Offscreen.
Unlike with mode `visible` and `hidden`, it is developers job to make
sure contents of Offscreen are not visible to users.
`Offscreen.attach` only works if mode is `manual`.

Example uses:
```jsx
let offscreenRef = useRef(null);
<Offscreen mode={'manual'} ref={offscreenRef)}>
  <Child />
</Offscreen>

// ------

// Offscreen is attached by default. 
// For example user scrolls away and Offscreen subtree is not visible anymore.
offscreenRef.current.detach();


// User scrolls back and Offscreen subtree is visible again.
offscreenRef.current.attach();
```

Co-authored-by: Andrew Clark <git@andrewclark.io>",Samuel Susla,2022-12-12T14:00:16Z
c8bb9ea0af2320455a2bc39f3fefe6c9650a2996,Move pretty printing Scopes into PrintHIR,Lauren Tan,2022-12-09T22:12:45Z
255700e2cdc5d66cb4158a136f9964b434352d55,"Increase precision in InferMutableRangesForAlias 

Previously, this step just set the mutable range of any alias set including any 

mutation to the end of the last mutable range of any of the containing 
identifiers. 

This change makes it so that the ends are only updated of the ranges that end 

before the last mutation. 

Fixes #852",Jan Kassens,2022-12-09T18:10:01Z
748992d508cefaa555c5465ce17d9e7a68941f55,"LeaveSSA: handle phi as operand to subsequent phi 

Fixes https://github.com/facebook/react-forget/pull/858#discussion_r1044626137. 
The case is 

```javascript 

function foo() { 

let x$1 = 1; 

let y = 2; 

if (y === 2) { 

x$2 = 3; 

} 

x$3 = phi(x$1, x$2) 

if (y === 3) { 

x4 = 5; 

} 

x$5 = phi(x$3, x$4); 

y = x$5; 

} 

``` 

What happens here is that there are two _sequential_ phis for `x`. Previously 
when we encountered the second phi we would find that there is no `let` 
declaration for the phi or any of its operands, and create a new one before the 
second `if`. That's incorrect, these should all merge into a single `x` 
declaration. We now look up the phi operands to see if they are part of a 
previous phi, and merge them correctly.",Joseph Savona,2022-12-09T17:47:47Z
d03c5bc0a0a3ffa16f6c9cf4834bbe2212c3d11c,"Run LeaveSSA prior to analyzing reactive scopes 

Reorders LeaveSSA so that it runs before we begin evaluating reactive scopes. 
Note that reactive scopes must span the full construction of each variable — for 
variables with a phi, this must span the declaration and all assignments of the 
phi operands. And that's exactly what the new LeaveSSA does! LeaveSSA removes 
phi nodes and ensure that all versions of a variable which flow into a phi have 
been assigned a single canonical identifier (with an appropriate mutable range). 

This PR includes this and some related changes: 

* Reorders the pass 

* Changes hir-test to print the final HIR, eg just prior to codegen 

* Teaches LeaveSSA to update the mutable range of the canonical identifiers it 
assigns, based on the min/max of the variables assigned.",Joseph Savona,2022-12-09T15:39:28Z
b14d7fa4b88dad5f0017d084e462952c700aa2ad,"Add support for setNativeProps to Fabric (#25737)

Add support for `setNativeProps` in Fabric to make migration to the new
architecture easier. The React Native part of this has already landed in
the core and iOS in
https://github.com/facebook/react-native/commit/1d3fa40c59b234f21f516db85c322ec0ed0311e0.

It is still recommended to move away from `setNativeProps` because the
API will not work with future features.",Samuel Susla,2022-12-09T14:43:52Z
daaf95854c48f1b829af9bd81ff9f020a5dd28e3,"[hir] Don't alias fields unless a mutation occurs after aliasing 

A wise Joe once said, ""We only care about observed aliasing"". 

Instead of performing aliasing for fields and non fields together, split the 
analysis to happen over separate passes. Similarly split inferring mutable 
lifetimes pass for fields and non fields. 

Now, we can identify the aliases of fields that are *not* mutated and only alias 
the ones that do mutate. 

The algorithm is roughly as follows: 

1. Build the set of aliases for non fields 

2. Infer mutable ranges for all instructions except aliasing fields 

3. Infer mutable ranges for all aliased instructions based on the alias set 
calculated in step 1 (this doesn't include aliasing fields) 

4. Extend the set of aliases (calculated in step 1)  to include fields only if 
the field or the receiver is mutated after the aliasing, ie, if _mutability is 
observed_. 

5. Run infer mutable ranges again for all instructions including the fields that 
were aliased in the previous step. 

6. Run infer mutable ranges for all aliased instructions including the fields 
that were aliased.",Sathya Gunasekaran,2022-12-08T23:29:41Z
1c7055ddbbdae81224f998e42832d882fde06686,"[DiffTrain] Add github url for the commit to the commit message (#25845)

Currently we just append the ref for the commit, let's make it clickable
for easier debugging in syncs.",lauren,2022-12-08T19:22:35Z
21652a135b6bd1cb87dbcc2480aaf0886e056d63,"Improved LeaveSSA pass 

## Problem 

The previous version of LeaveSSA used a very simple approach in which 
identifiers stored their pre-ssa id, and LeaveSSA restored this id back. The 
upside of this approach is that it's very simple and trivially correct (assuming 
no reordering of code). The downside is that after running LeaveSSA we lose all 
information about which versions of variable declarations are distinct, and 
which might merge together in a phi. That information is really useful for scope 
analysis! Consider this input (variables are numbered as they would be in SSA 
form): 

```javascript 

function foo(a, b, c) { 

let x$1 = null; 

if (a) { 

x$2 = b; 

} else { 

x$3 = c; 

} 

x$4 = phi(x$2, x$3); 

return x$4; 

``` 

The current LeaveSSA assigns all 4 variables back to `x$1`, with a single let 
declaration at `let x$1 = null`. However, from a reactive scopes perspective, 
there are really just 2 versions of x: the initial x$1 (defined and never used) 
and then x$2, x$3, and x$4, which have to be merged into a single scope because 
they are part of a phi. In other words, we can't independently compute x$2, x$3, 
or x$4 - if any of their inputs changes, we have to redo all the computation. 
However, the existing structure makes it difficult to figure out the correct 
starting point for this scope — there is no initial `let` declaration that we 
can refer to. 

Instead, we can represent the program as follows after LeaveSSA, and then use 
this form for scope analysis: 

```javascript 

function foo(a, b, c) { 

const x$1 = null; // NOTE: rewritten to const 

let x$2; // synthesized declaration to allow later reassignment 

if (a) { 

x$2 = b; 

} else { 

x$2 = c; 

} 

return x$2; 

``` 

Note that there are only 2 versions of x, and we have synthesized a variable 
declaration for x$2 at the appropriate scope. Our scope analysis can then 
determine that the range of x$2 is from the declaration to the end of the if. 

## Approach 

This pass does two main rewrites: 

* For variables that do *not* appear as a phi id or operand, it rewrites the 
declaration to be `const`. You can see this above for x$1. 

* For variables that *do* appear as a phi or operand, it synthesizes a new `let` 
binding at the appropriate scope (ie, in the appropriate block), and updates all 
other operands from the phi to use the same id for the variable.  You can see 
this above for x$2, x$3, and x$4. 

Note that the let binding is generated at the narrowest scope possible. In this 
example, we generate distinct let bindings for the other if and else branches: 

```javascript 

function foo(a, b, c) { 

let x = null; 

if (a) { 

// we generate a `let x$2` here 

if (b) { 

x = 0; // becomes x$2 

} else { 

x = 1;  // becomes x$2 

} 

x // becomes x$2 

} else { 

// we generate a `let x$3` here 

if (c) { 

x = 2; // becomes x$3 

} else { 

x = 3; // becomes x$3 

} 

x; // becomes x$3 

} 

} 

``` 

Because the different x values from the outer if/else can never join in a phi, 
we can treat them as independent variables and (re)compute them independently. 

The algorithm works by iterating in reverse-postorder, and looking ahead at 
fallthrough blocks to find phi nodes that may need a let declaration (see above 
example of where these are generated). It also tracks variables which _don't_ 
participate in a phi so that it can rewrite their declarations to `const`. 

## TODO 

This PR does *not* yet work for cases where there is unconditional assignment 
within a `while` test condition. That would technically create a distinct 
version of the variable that shadows the value for the loop, and you can't have 
variable declarations in a while test condition. 

That case already doesn't work, though, so i'm punting on it for now until we 
figure out a bit more around 

""value"" blocks. We have some good options, like desugaring to a `for(;;)` and 
manually implementing the while semantics in that case.",Joseph Savona,2022-12-08T15:35:14Z
81968727985a7afe6fc05d77a75d8a53ab10e39b,"[Float] Fix typo in ReactDOMResourceValidation.js (#25798)

Co-authored-by: Sebastian Silbermann <silbermann.sebastian@gmail.com>",Ikko Ashimine,2022-12-08T05:09:05Z
5dfc485f6957bf941fcd9565e0271aea019d7c9e,"fix tests for when float is off (#25839)

Some tests fail when float is off but when singletons are on. This PR
makes some adjustments

1. 2 singleton tests assert float semantics so will fail.
2. the float dispatcher was being set on the server even when float was
off. while the float calls didn't do anything warnings were still
generated. Instead we provide an empty object for the dispatcher if
float is off. Longer term the dispatcher should move to formatconfig and
just reference the float methods if the flag is on
3. some external fizz runtime tests did not gate against float but
should have",Josh Story,2022-12-07T20:51:46Z
827cbdbcc694e1aa9f4a8768c8677a1531c77ea3,"React DevTools 4.27.0 -> 4.27.1 (#25835)

patch for devtools bug",Mengdi Chen,2022-12-07T17:23:52Z
c60033920011043b4aee92ab3cc668ad7e146e1e,Bump qs from 6.5.2 to 6.5.3 in /fixtures/concurrent/time-slicing (#25846),dependabot[bot],2022-12-07T16:10:33Z
a0619e26ca46cb848a23e71b0ab8a2bd51d2053d,Bump qs from 6.4.0 to 6.4.1 in /fixtures/packaging/webpack-alias/prod (#25823),dependabot[bot],2022-12-07T15:58:42Z
8e24b046877b1a69e58b45dde15ef2e17124ad98,Bump qs from 6.4.0 to 6.4.1 in /fixtures/packaging/brunch/dev (#25822),dependabot[bot],2022-12-07T15:50:36Z
b94275150ab79f47f0ea889a729d85968caa0b4b,Bump qs from 6.4.0 to 6.4.1 in /fixtures/packaging/webpack/dev (#25824),dependabot[bot],2022-12-07T15:50:16Z
bfcbf3306794eb3de37d866551127fc2bdae53d7,"toString children of title (#25838)

children of title can either behave like children or like an attribute.
We're kind of treating it more like an attribute now so we should
support toString/valueOf like we do on attributes.",Sebastian Markbåge,2022-12-07T14:41:50Z
d4bc16a7d69eb2ea38a88c8ac0b461d5f72cdcab,"Revert ""[react-www] remove forked bundle"" (#25837)

Reverts facebook/react#25831",Ricky,2022-12-07T00:14:31Z
d69b2cf8208848b0f71b5214ddff55a1ff437cc8,"[bug fix] revert values in ReactFiberFlags to keep consistency for devtools (#25832)

## Summary

We see recent bug reports like #25755 and #25769 for devtools. Whenever
a component uses hook `useEffect`, it triggers an error.
This was introduced in #25663 when we try to keep the `ReactFiberFlags`
numbers consistent with reconciler, in order to fix an issue with server
components.
However, the values of `ReactFiberFlags` in reconciler were actually
changed a while ago in
https://github.com/facebook/react/commit/b4204ede66284e7153ffb11fd434cd9b9a64a56f
We made this mistake because, although it's not mentioned in the
comment, `DidCapture` and `Hydrating` are actually used by DevTools

This caused
- the latest (not stable) react version is broken on devtools before
4.27.0 (but only in uncommon cases such server components)
- all earlier react versions are broken on latest devtools (4.27.0)

To keep most versions work, we need to revert the commit that changed
the `ReactFiberFlags` values

## How did you test this change?

1. add a `useEffect` in a component in the TodoList of the shell,
trigger the error in devtools
2. after change, the error is gone",Mengdi Chen,2022-12-06T22:25:30Z
645ae2686b157c9f80193e1ada75b7e00ef49acf,"[react-www] remove forked bundle (#25831)

The `enableNewReconciler` was gone with
420f0b7fa1fcc609fc7b438c4599d0f76fab4bc0, this removes the bundle
config.",Jan Kassens,2022-12-06T21:12:20Z
7db45b9a38b8d1b5b945756cf38a174c1ec6118a,fix invalid link to react-devtools-extensions/src/__tests__ (#25816),lushevol,2022-12-06T20:21:01Z
c961f2f476092a138da5082dfc12916d85509649,"[DiffTrain] Add REVISION and REVISION_TRANSFORM to output (#25830)

We use these for the sync script, so to preserve option value let's
continue adding these files so the script can still be used for
arbitrary commits.",lauren,2022-12-06T17:55:37Z
4837e21de37098dc16fa78ad2f24495524f3aa90,"[HIR] add `for` terminal 

The changes here are pretty significant and there's a bunch more left: 

- support for with any of `<init>`, `<test>` or `<update>` empty. - support for 
with `<init>` as `Expression` instead of VariableDeclaration` node - support 
assignment expressions in `<update>`, this seems like it might require further 
new abstractions to allow something like a block to codegen into a single 
expression.",Jan Kassens,2022-12-06T17:01:32Z
7c39922891bf8e0ce179a78a373a61b3afe3c1c7,"[DiffTrain] Strip @license from files (#25821)

We need to remove this for some internal tests. This was previously in
our upgrade script so adding it back here for parity.

Test plan: files were updated correctly
[[1]](https://github.com/facebook/react/commit/1704bbb8268345bf7aa405101313b3639e03e221#diff-80b968e05ce2ceeff6e17c938dc722aff2c1c660f8ef402e6664bc5b2cafa5fbL2)
[[2]](https://github.com/facebook/react/commit/1704bbb8268345bf7aa405101313b3639e03e221#diff-6ecd07a61c8e0e28793dace3f9f62751e4808de9c2965aa1ddeb0157f3c9b4ecL2)

Co-authored-by: Jan Kassens <jkassens@meta.com>",lauren,2022-12-06T17:01:24Z
2f16409f3a40de334973abdcba08e09284ed1c9d,"Bump qs from 6.4.0 to 6.4.1 in /fixtures/attribute-behavior (#25820)

Bumps [qs](https://github.com/ljharb/qs) from 6.4.0 to 6.4.1.
<details>
<summary>Changelog</summary>
<p><em>Sourced from <a
href=""https://github.com/ljharb/qs/blob/main/CHANGELOG.md"">qs's
changelog</a>.</em></p>
<blockquote>
<h2><strong>6.4.1</strong></h2>
<ul>
<li>[Fix] <code>parse</code>: ignore <code>__proto__</code> keys (<a
href=""https://github-redirect.dependabot.com/ljharb/qs/issues/428"">#428</a>)</li>
<li>[Fix] fix for an impossible situation: when the formatter is called
with a non-string value</li>
<li>[Fix] use <code>safer-buffer</code> instead of <code>Buffer</code>
constructor</li>
<li>[Fix] <code>utils.merge</code>: avoid a crash with a null target and
an array source</li>
<li>[Fix]<code> </code>utils.merge`: avoid a crash with a null target
and a truthy non-array source</li>
<li>[Fix] <code>stringify</code>: fix a crash with
<code>strictNullHandling</code> and a custom
<code>filter</code>/<code>serializeDate</code> (<a
href=""https://github-redirect.dependabot.com/ljharb/qs/issues/279"">#279</a>)</li>
<li>[Fix] <code>utils</code>: <code>merge</code>: fix crash when
<code>source</code> is a truthy primitive &amp; no options are
provided</li>
<li>[Fix] when <code>parseArrays</code> is false, properly handle keys
ending in <code>[]</code></li>
<li>[Robustness] <code>stringify</code>: avoid relying on a global
<code>undefined</code> (<a
href=""https://github-redirect.dependabot.com/ljharb/qs/issues/427"">#427</a>)</li>
<li>[Refactor] use cached <code>Array.isArray</code></li>
<li>[Refactor] <code>stringify</code>: Avoid arr = arr.concat(...), push
to the existing instance (<a
href=""https://github-redirect.dependabot.com/ljharb/qs/issues/269"">#269</a>)</li>
<li>[readme] remove travis badge; add github actions/codecov badges;
update URLs</li>
<li>[Docs] Clarify the need for &quot;arrayLimit&quot; option</li>
<li>[meta] fix README.md (<a
href=""https://github-redirect.dependabot.com/ljharb/qs/issues/399"">#399</a>)</li>
<li>[meta] Clean up license text so it’s properly detected as
BSD-3-Clause</li>
<li>[meta] add FUNDING.yml</li>
<li>[actions] backport actions from main</li>
<li>[Tests] remove nonexistent tape option</li>
<li>[Dev Deps] backport from main</li>
</ul>
</blockquote>
</details>
<details>
<summary>Commits</summary>
<ul>
<li><a
href=""https://github.com/ljharb/qs/commit/486aa46547b4e878d6e87183de95dd26d46fb020""><code>486aa46</code></a>
v6.4.1</li>
<li><a
href=""https://github.com/ljharb/qs/commit/727ef5d34605108acb3513f72d5435972ed15b68""><code>727ef5d</code></a>
[Fix] <code>parse</code>: ignore <code>__proto__</code> keys (<a
href=""https://github-redirect.dependabot.com/ljharb/qs/issues/428"">#428</a>)</li>
<li><a
href=""https://github.com/ljharb/qs/commit/cd1874eb179950de3f5b32e708b4a3a2d0619501""><code>cd1874e</code></a>
[Robustness] <code>stringify</code>: avoid relying on a global
<code>undefined</code> (<a
href=""https://github-redirect.dependabot.com/ljharb/qs/issues/427"">#427</a>)</li>
<li><a
href=""https://github.com/ljharb/qs/commit/45e987c6038db47199a560294c20a67da9ab49e3""><code>45e987c</code></a>
[readme] remove travis badge; add github actions/codecov badges; update
URLs</li>
<li><a
href=""https://github.com/ljharb/qs/commit/90a3bced518c6ff4a97919d10de9498fea961acf""><code>90a3bce</code></a>
[meta] fix README.md (<a
href=""https://github-redirect.dependabot.com/ljharb/qs/issues/399"">#399</a>)</li>
<li><a
href=""https://github.com/ljharb/qs/commit/9566d25019caae8c4f1a9097bf344238a583d014""><code>9566d25</code></a>
[Fix] fix for an impossible situation: when the formatter is called with
a no...</li>
<li><a
href=""https://github.com/ljharb/qs/commit/74227ef022282881f41d37d65adba5d399d2b33a""><code>74227ef</code></a>
Clean up license text so it’s properly detected as BSD-3-Clause</li>
<li><a
href=""https://github.com/ljharb/qs/commit/35dfb227e274367e163b3d943fc975f95448685a""><code>35dfb22</code></a>
[actions] backport actions from main</li>
<li><a
href=""https://github.com/ljharb/qs/commit/7d4670fca6ed46a1fc6237bccffe0ea82a641411""><code>7d4670f</code></a>
[Dev Deps] backport from main</li>
<li><a
href=""https://github.com/ljharb/qs/commit/0485440902d3fc03d1d973d91af5a183fa4e3059""><code>0485440</code></a>
[Fix] use <code>safer-buffer</code> instead of <code>Buffer</code>
constructor</li>
<li>Additional commits viewable in <a
href=""https://github.com/ljharb/qs/compare/v6.4.0...v6.4.1"">compare
view</a></li>
</ul>
</details>
<br />


[![Dependabot compatibility
score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=qs&package-manager=npm_and_yarn&previous-version=6.4.0&new-version=6.4.1)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)

Dependabot will resolve any conflicts with this PR as long as you don't
alter it yourself. You can also trigger a rebase manually by commenting
`@dependabot rebase`.

[//]: # (dependabot-automerge-start)
[//]: # (dependabot-automerge-end)

---

<details>
<summary>Dependabot commands and options</summary>
<br />

You can trigger Dependabot actions by commenting on this PR:
- `@dependabot rebase` will rebase this PR
- `@dependabot recreate` will recreate this PR, overwriting any edits
that have been made to it
- `@dependabot merge` will merge this PR after your CI passes on it
- `@dependabot squash and merge` will squash and merge this PR after
your CI passes on it
- `@dependabot cancel merge` will cancel a previously requested merge
and block automerging
- `@dependabot reopen` will reopen this PR if it is closed
- `@dependabot close` will close this PR and stop Dependabot recreating
it. You can achieve the same result by closing it manually
- `@dependabot ignore this major version` will close this PR and stop
Dependabot creating any more for this major version (unless you reopen
the PR or upgrade to it yourself)
- `@dependabot ignore this minor version` will close this PR and stop
Dependabot creating any more for this minor version (unless you reopen
the PR or upgrade to it yourself)
- `@dependabot ignore this dependency` will close this PR and stop
Dependabot creating any more for this dependency (unless you reopen the
PR or upgrade to it yourself)
- `@dependabot use these labels` will set the current labels as the
default for future PRs for this repo and language
- `@dependabot use these reviewers` will set the current reviewers as
the default for future PRs for this repo and language
- `@dependabot use these assignees` will set the current assignees as
the default for future PRs for this repo and language
- `@dependabot use this milestone` will set the current milestone as the
default for future PRs for this repo and language

You can disable automated security fix PRs for this repo from the
[Security Alerts
page](https://github.com/facebook/react/network/alerts).

</details>

Signed-off-by: dependabot[bot] <support@github.com>
Co-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>",dependabot[bot],2022-12-06T16:51:09Z
db740366f821c10350d3eb94b384ef8911dedefd,"""ValueBlock"" for while test node 

The instructions of a while test node cannot just be pushed to the previous 
block. This creates a new block for the test node and then during code gen 
converts the statements pushed to the ""value block"" into expressions.",Jan Kassens,2022-12-06T16:28:15Z
3a1124fe143c067cb1f5c794d01e34e2498ec8fc,"[hir] Add alias analysis for lvalue aggregates 

This adds a field sensitive, flow-insensitive, context-insensitive alias 
analysis for lvalue aggregates. 

In the future, InferMutableLifetimes can refine it's analysis using these field 
sensitive alias sets.",Sathya Gunasekaran,2022-12-05T22:27:01Z
a855e764945ccc75f50c8c176528c77db13580ee,"[hir] Introduce AliasSet type 

Starting to get wonky typing out the entire type. This typedef is better for 
typing and readability.",Sathya Gunasekaran,2022-12-05T22:27:01Z
2dab6f6c4d90b3879133683311bdc9c5367710e0,[hir] Store Primitives in AbstractState,Sathya Gunasekaran,2022-12-05T22:27:00Z
9da7ad557d6ffe36db06e7bea82f21cbcedaa5d3,"[hir] Introduce AbstractState.store 

Currently AbstractState.alias performs three operations: - Reading a value - 
Storing the value - Updating aliasing (in the DisjointSet) 

This commit makes AbstractState.alias only responsible for updating the alias 
information. The rest of the operations are split into separate functions.",Sathya Gunasekaran,2022-12-05T22:27:00Z
1c6e39a1d6e04a7fc167fc2c57f5ff115e4d63ab,"[hir] Introduce AbstractState.read to lookup value 

Split AbstractState.alias into two separate operations for better readability.",Sathya Gunasekaran,2022-12-05T22:26:59Z
d807eb52cfd999cfbcb19078a75b15f844e409bb,"Revert recent hydration changes (#25812)

We're reverting the stack of changes that this code belongs to in order
to unblock the sync to Meta's internal codebase. We will attempt to
re-land once the sync is unblocked.

I have not yet verified that this fixes the error that were reported
internally. I will do that before landing.",Andrew Clark,2022-12-05T21:10:03Z
2ccfa657d9529cab25eaa25144efc64df12b13c7,"Fork ReactDOMSharedInternals for www (#25791)

This isn't the right way to do this, but internally we have some
restrictions so we need to add an indirection. Let's land this now so we
can catch up our sync and then fix forward from there.

Co-authored-by: Jan Kassens <jkassens@meta.com>",lauren,2022-12-05T20:08:28Z
cd23e40c734d758726419c0a3bd91576211bd83f,"[DiffTrain] Use original commit message (#25809)

Instead of the current commit message (which just shows ""Build for
<sha>"", re-use the commit message from the origin commit instead.",lauren,2022-12-05T18:56:57Z
f0534ae94a439dc7ac782b973792da59dbde7a7f,"Avoid replaying SelectiveHydrationException in dev (#25754)

<!--
  Thanks for submitting a pull request!
We appreciate you spending the time to work on these changes. Please
provide enough information so that others can review your pull request.
The three fields below are mandatory.

Before submitting a pull request, please make sure the following is
done:

1. Fork [the repository](https://github.com/facebook/react) and create
your branch from `main`.
  2. Run `yarn` in the repository root.
3. If you've fixed a bug or added code that should be tested, add tests!
4. Ensure the test suite passes (`yarn test`). Tip: `yarn test --watch
TestName` is helpful in development.
5. Run `yarn test --prod` to test in the production environment. It
supports the same options as `yarn test`.
6. If you need a debugger, run `yarn debug-test --watch TestName`, open
`chrome://inspect`, and press ""Inspect"".
7. Format your code with
[prettier](https://github.com/prettier/prettier) (`yarn prettier`).
8. Make sure your code lints (`yarn lint`). Tip: `yarn linc` to only
check changed files.
  9. Run the [Flow](https://flowtype.org/) type checks (`yarn flow`).
  10. If you haven't already, complete the CLA.

Learn more about contributing:
https://reactjs.org/docs/how-to-contribute.html
-->

## Summary
This is discovered by @acdlite.
In dev we replay errors so debugger will treat them as uncaught errors,
but we need to ignore internal exceptions.
<!--
Explain the **motivation** for making this change. What existing problem
does the pull request solve?
-->

## How did you test this change?
manually console.log in some tests, and noticed replay didn't happen.
<!--
Demonstrate the code is solid. Example: The exact commands you ran and
their output, screenshots / videos if the pull request changes the user
interface.
How exactly did you verify that your PR solves the issue you wanted to
solve?
  If you leave this empty, your PR will very likely be closed.
-->",Tianyu Yao,2022-12-02T19:48:58Z
7fab379d8edba5b9e2f81696ded6f147aafce55b,"fix link to ReactDOMHostconfig in reconciler docs (#25788)

## Summary

Reference to #25716, changed old link to a new, now page exist, instead
of 404.

## How did you test this change?

yarn test
and by clicking on the link of host config in
https://github.com/facebook/react/blob/main/packages/react-reconciler/README.md#practical-examples",Dmitry,2022-12-02T17:40:50Z
500c8aa0828b1c1f73e957b99bbe0e0f9b08aac5,"Add component name to StrictMode error message (#25718)

The error message to warn user about state update coming from inside an
update function does not contain name of the offending component. Other
warnings StrictMode has, always have offending component mentioned in
top level error message.


Previous error message:
```
An update (setState, replaceState, or forceUpdate) was scheduled 
from inside an update function. Update functions should be pure
with zero side-effects. Consider using componentDidUpdate or a
callback.
```

New error message:
```
An update (setState, replaceState, or forceUpdate) was scheduled 
from inside an update function. Update functions should be pure
with zero side-effects. Consider using componentDidUpdate or a
callback.

Please update the following component: Foo
```",Samuel Susla,2022-12-02T17:14:12Z
353c30252f67145fa8241b6979d570cb152c2b22,"Hold host functions in var (#25741)

Calling any function on `nativeFabricUIManager`, for example
`nativeFabricUIManager.measure`, results in a round trip to the host
platform through jsi layer. It is the same for repeated calls to same
host function. This is unnecessary overload which can be avoided by
retaining host function in a variable.",Samuel Susla,2022-12-02T15:53:55Z
17f6912a44e2ce7b88a72488931428da58f19c56,"Add flow types to ReactFiberHooks (#25752)

Increase type coverage in ReactFiberHooks file.",Samuel Susla,2022-12-02T15:31:53Z
f0bba2d4f57ed9b160cada4039e126b05b9e82de,"Bump decode-uri-component from 0.2.0 to 0.2.2 in /fixtures/concurrent/time-slicing (#25781)

Bumps
[decode-uri-component](https://github.com/SamVerschueren/decode-uri-component)
from 0.2.0 to 0.2.2.
<details>
<summary>Release notes</summary>
<p><em>Sourced from <a
href=""https://github.com/SamVerschueren/decode-uri-component/releases"">decode-uri-component's
releases</a>.</em></p>
<blockquote>
<h2>v0.2.2</h2>
<ul>
<li>Prevent overwriting previously decoded tokens  980e0bf</li>
</ul>
<p><a
href=""https://github.com/SamVerschueren/decode-uri-component/compare/v0.2.1...v0.2.2"">https://github.com/SamVerschueren/decode-uri-component/compare/v0.2.1...v0.2.2</a></p>
<h2>v0.2.1</h2>
<ul>
<li>Switch to GitHub workflows  76abc93</li>
<li>Fix issue where decode throws - fixes <a
href=""https://github-redirect.dependabot.com/SamVerschueren/decode-uri-component/issues/6"">#6</a>
746ca5d</li>
<li>Update license (<a
href=""https://github-redirect.dependabot.com/SamVerschueren/decode-uri-component/issues/1"">#1</a>)
486d7e2</li>
<li>Tidelift tasks  a650457</li>
<li>Meta tweaks  66e1c28</li>
</ul>
<p><a
href=""https://github.com/SamVerschueren/decode-uri-component/compare/v0.2.0...v0.2.1"">https://github.com/SamVerschueren/decode-uri-component/compare/v0.2.0...v0.2.1</a></p>
</blockquote>
</details>
<details>
<summary>Commits</summary>
<ul>
<li><a
href=""https://github.com/SamVerschueren/decode-uri-component/commit/a0eea469d26eb0df668b081672cdb9581feb78eb""><code>a0eea46</code></a>
0.2.2</li>
<li><a
href=""https://github.com/SamVerschueren/decode-uri-component/commit/980e0bf09b64d94f1aa79012f895816c30ffd152""><code>980e0bf</code></a>
Prevent overwriting previously decoded tokens</li>
<li><a
href=""https://github.com/SamVerschueren/decode-uri-component/commit/3c8a373dd4837e89b3f970e01295dd03e1405a33""><code>3c8a373</code></a>
0.2.1</li>
<li><a
href=""https://github.com/SamVerschueren/decode-uri-component/commit/76abc939783fe3900fadb7d384a74d324d5557f3""><code>76abc93</code></a>
Switch to GitHub workflows</li>
<li><a
href=""https://github.com/SamVerschueren/decode-uri-component/commit/746ca5dcb6667c5d364e782d53c542830e4c10b9""><code>746ca5d</code></a>
Fix issue where decode throws - fixes <a
href=""https://github-redirect.dependabot.com/SamVerschueren/decode-uri-component/issues/6"">#6</a></li>
<li><a
href=""https://github.com/SamVerschueren/decode-uri-component/commit/486d7e26d3a8c0fbe860fb651fe1bc98c2f2be30""><code>486d7e2</code></a>
Update license (<a
href=""https://github-redirect.dependabot.com/SamVerschueren/decode-uri-component/issues/1"">#1</a>)</li>
<li><a
href=""https://github.com/SamVerschueren/decode-uri-component/commit/a65045724e6234acef87f31da499d4807b20b134""><code>a650457</code></a>
Tidelift tasks</li>
<li><a
href=""https://github.com/SamVerschueren/decode-uri-component/commit/66e1c2834c0e189201cb65196ec3101372459b02""><code>66e1c28</code></a>
Meta tweaks</li>
<li>See full diff in <a
href=""https://github.com/SamVerschueren/decode-uri-component/compare/v0.2.0...v0.2.2"">compare
view</a></li>
</ul>
</details>
<br />


[![Dependabot compatibility
score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=decode-uri-component&package-manager=npm_and_yarn&previous-version=0.2.0&new-version=0.2.2)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)

Dependabot will resolve any conflicts with this PR as long as you don't
alter it yourself. You can also trigger a rebase manually by commenting
`@dependabot rebase`.

[//]: # (dependabot-automerge-start)
[//]: # (dependabot-automerge-end)

---

<details>
<summary>Dependabot commands and options</summary>
<br />

You can trigger Dependabot actions by commenting on this PR:
- `@dependabot rebase` will rebase this PR
- `@dependabot recreate` will recreate this PR, overwriting any edits
that have been made to it
- `@dependabot merge` will merge this PR after your CI passes on it
- `@dependabot squash and merge` will squash and merge this PR after
your CI passes on it
- `@dependabot cancel merge` will cancel a previously requested merge
and block automerging
- `@dependabot reopen` will reopen this PR if it is closed
- `@dependabot close` will close this PR and stop Dependabot recreating
it. You can achieve the same result by closing it manually
- `@dependabot ignore this major version` will close this PR and stop
Dependabot creating any more for this major version (unless you reopen
the PR or upgrade to it yourself)
- `@dependabot ignore this minor version` will close this PR and stop
Dependabot creating any more for this minor version (unless you reopen
the PR or upgrade to it yourself)
- `@dependabot ignore this dependency` will close this PR and stop
Dependabot creating any more for this dependency (unless you reopen the
PR or upgrade to it yourself)
- `@dependabot use these labels` will set the current labels as the
default for future PRs for this repo and language
- `@dependabot use these reviewers` will set the current reviewers as
the default for future PRs for this repo and language
- `@dependabot use these assignees` will set the current assignees as
the default for future PRs for this repo and language
- `@dependabot use this milestone` will set the current milestone as the
default for future PRs for this repo and language

You can disable automated security fix PRs for this repo from the
[Security Alerts
page](https://github.com/facebook/react/network/alerts).

</details>

Signed-off-by: dependabot[bot] <support@github.com>
Co-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>",dependabot[bot],2022-12-02T05:06:21Z
44a3d6e148fc2c4d13a84b88b934e4788c686f68,Bump decode-uri-component from 0.2.0 to 0.2.2 in /fixtures/ssr (#25782),dependabot[bot],2022-12-02T04:52:41Z
000c5cb28f22f5055e392b67530d07f2e9f5fff7,Bump decode-uri-component from 0.2.0 to 0.2.2 in /fixtures/blocks (#25777),dependabot[bot],2022-12-02T04:45:15Z
38208fc5ad4597f75e221501e374473d9e9e792e,Bump decode-uri-component from 0.2.0 to 0.2.2 in /fixtures/dom (#25783),dependabot[bot],2022-12-02T04:44:52Z
eb1024fd994247d0881841007fac62a94c0dd9fd,Bump decode-uri-component from 0.2.0 to 0.2.2 (#25778),dependabot[bot],2022-12-02T04:36:19Z
06fff18d2a2c062d22a3b2cdccbf61ba23dcf84c,Bump decode-uri-component from 0.2.0 to 0.2.2 in /fixtures/legacy-jsx-runtimes (#25779),dependabot[bot],2022-12-02T04:29:39Z
3e151c7d216904d5d92cce692e9eae1101a31a71,"Bump decode-uri-component from 0.2.0 to 0.2.2 in /fixtures/fizz (#25780)

Bumps
[decode-uri-component](https://github.com/SamVerschueren/decode-uri-component)
from 0.2.0 to 0.2.2.
<details>
<summary>Release notes</summary>
<p><em>Sourced from <a
href=""https://github.com/SamVerschueren/decode-uri-component/releases"">decode-uri-component's
releases</a>.</em></p>
<blockquote>
<h2>v0.2.2</h2>
<ul>
<li>Prevent overwriting previously decoded tokens  980e0bf</li>
</ul>
<p><a
href=""https://github.com/SamVerschueren/decode-uri-component/compare/v0.2.1...v0.2.2"">https://github.com/SamVerschueren/decode-uri-component/compare/v0.2.1...v0.2.2</a></p>
<h2>v0.2.1</h2>
<ul>
<li>Switch to GitHub workflows  76abc93</li>
<li>Fix issue where decode throws - fixes <a
href=""https://github-redirect.dependabot.com/SamVerschueren/decode-uri-component/issues/6"">#6</a>
746ca5d</li>
<li>Update license (<a
href=""https://github-redirect.dependabot.com/SamVerschueren/decode-uri-component/issues/1"">#1</a>)
486d7e2</li>
<li>Tidelift tasks  a650457</li>
<li>Meta tweaks  66e1c28</li>
</ul>
<p><a
href=""https://github.com/SamVerschueren/decode-uri-component/compare/v0.2.0...v0.2.1"">https://github.com/SamVerschueren/decode-uri-component/compare/v0.2.0...v0.2.1</a></p>
</blockquote>
</details>
<details>
<summary>Commits</summary>
<ul>
<li><a
href=""https://github.com/SamVerschueren/decode-uri-component/commit/a0eea469d26eb0df668b081672cdb9581feb78eb""><code>a0eea46</code></a>
0.2.2</li>
<li><a
href=""https://github.com/SamVerschueren/decode-uri-component/commit/980e0bf09b64d94f1aa79012f895816c30ffd152""><code>980e0bf</code></a>
Prevent overwriting previously decoded tokens</li>
<li><a
href=""https://github.com/SamVerschueren/decode-uri-component/commit/3c8a373dd4837e89b3f970e01295dd03e1405a33""><code>3c8a373</code></a>
0.2.1</li>
<li><a
href=""https://github.com/SamVerschueren/decode-uri-component/commit/76abc939783fe3900fadb7d384a74d324d5557f3""><code>76abc93</code></a>
Switch to GitHub workflows</li>
<li><a
href=""https://github.com/SamVerschueren/decode-uri-component/commit/746ca5dcb6667c5d364e782d53c542830e4c10b9""><code>746ca5d</code></a>
Fix issue where decode throws - fixes <a
href=""https://github-redirect.dependabot.com/SamVerschueren/decode-uri-component/issues/6"">#6</a></li>
<li><a
href=""https://github.com/SamVerschueren/decode-uri-component/commit/486d7e26d3a8c0fbe860fb651fe1bc98c2f2be30""><code>486d7e2</code></a>
Update license (<a
href=""https://github-redirect.dependabot.com/SamVerschueren/decode-uri-component/issues/1"">#1</a>)</li>
<li><a
href=""https://github.com/SamVerschueren/decode-uri-component/commit/a65045724e6234acef87f31da499d4807b20b134""><code>a650457</code></a>
Tidelift tasks</li>
<li><a
href=""https://github.com/SamVerschueren/decode-uri-component/commit/66e1c2834c0e189201cb65196ec3101372459b02""><code>66e1c28</code></a>
Meta tweaks</li>
<li>See full diff in <a
href=""https://github.com/SamVerschueren/decode-uri-component/compare/v0.2.0...v0.2.2"">compare
view</a></li>
</ul>
</details>
<br />


[![Dependabot compatibility
score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=decode-uri-component&package-manager=npm_and_yarn&previous-version=0.2.0&new-version=0.2.2)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)

Dependabot will resolve any conflicts with this PR as long as you don't
alter it yourself. You can also trigger a rebase manually by commenting
`@dependabot rebase`.

[//]: # (dependabot-automerge-start)
[//]: # (dependabot-automerge-end)

---

<details>
<summary>Dependabot commands and options</summary>
<br />

You can trigger Dependabot actions by commenting on this PR:
- `@dependabot rebase` will rebase this PR
- `@dependabot recreate` will recreate this PR, overwriting any edits
that have been made to it
- `@dependabot merge` will merge this PR after your CI passes on it
- `@dependabot squash and merge` will squash and merge this PR after
your CI passes on it
- `@dependabot cancel merge` will cancel a previously requested merge
and block automerging
- `@dependabot reopen` will reopen this PR if it is closed
- `@dependabot close` will close this PR and stop Dependabot recreating
it. You can achieve the same result by closing it manually
- `@dependabot ignore this major version` will close this PR and stop
Dependabot creating any more for this major version (unless you reopen
the PR or upgrade to it yourself)
- `@dependabot ignore this minor version` will close this PR and stop
Dependabot creating any more for this minor version (unless you reopen
the PR or upgrade to it yourself)
- `@dependabot ignore this dependency` will close this PR and stop
Dependabot creating any more for this dependency (unless you reopen the
PR or upgrade to it yourself)
- `@dependabot use these labels` will set the current labels as the
default for future PRs for this repo and language
- `@dependabot use these reviewers` will set the current reviewers as
the default for future PRs for this repo and language
- `@dependabot use these assignees` will set the current assignees as
the default for future PRs for this repo and language
- `@dependabot use this milestone` will set the current milestone as the
default for future PRs for this repo and language

You can disable automated security fix PRs for this repo from the
[Security Alerts
page](https://github.com/facebook/react/network/alerts).

</details>

Signed-off-by: dependabot[bot] <support@github.com>
Co-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>",dependabot[bot],2022-12-02T04:22:51Z
f101c2d0d3a6cb5a788a3d91faef48462e45f515,"Remove Reconciler fork (2/2) (#25775)

We've heard from multiple contributors that the Reconciler forking
mechanism was confusing and/or annoying to deal with. Since it's
currently unused and there's no immediate plans to start using it again,
this removes the forking.

Fully removing the fork is split into 2 steps to preserve file history:

**#25774 previous PR that did the bulk of the work:**
- remove `enableNewReconciler` feature flag.
- remove `unstable_isNewReconciler` export
- remove eslint rules for cross fork imports
- remove `*.new.js` files and update imports
- merge non-suffixed files into `*.old` files where both exist
(sometimes types were defined there)

**This PR**
- rename `*.old` files",Jan Kassens,2022-12-02T04:19:13Z
420f0b7fa1fcc609fc7b438c4599d0f76fab4bc0,"Remove Reconciler fork (1/2) (#25774)

We've heard from multiple contributors that the Reconciler forking
mechanism was confusing and/or annoying to deal with. Since it's
currently unused and there's no immediate plans to start using it again,
this removes the forking.

Fully removing the fork is split into 2 steps to preserve file history:

**This PR**
- remove `enableNewReconciler` feature flag.
- remove `unstable_isNewReconciler` export
- remove eslint rules for cross fork imports
- remove `*.new.js` files and update imports
- merge non-suffixed files into `*.old` files where both exist
(sometimes types were defined there)

**#25775**
- rename `*.old` files",Jan Kassens,2022-12-02T04:06:25Z
030dae2f4c22a86258b4dace3c9ab6b8b44a0d33,"[DiffTrain] Fix null artifactsUrl and add more logging (#25768)

Log more info on the status of the process_artifacts_combined job to
help with debugging, and exit with exitcode 1 if anything goes wrong

Test plan: Ran the workflow
[successfully](https://github.com/facebook/react/actions/runs/3595185062)",lauren,2022-12-01T19:08:29Z
7bdd0f03cb529f673a632e2a774b6a9de4fec5e4,"[hir] Perform alias analysis for aggregate rvalues 

Maintain and use abstract memory to peform more refined aliasing of member 
expressions.",Sathya Gunasekaran,2022-12-01T19:03:50Z
00f74d4e70bd6496a788bb0d0a32a7d5e102f0ff,"[hir] Correctly identify mutated identifiers 

mutableRange.end is exclusive so account for this extra 1 instruction.",Sathya Gunasekaran,2022-12-01T19:03:47Z
c96c9b458fafb67f26e4fd240889a34cbeea7159,"[hir] Add a buildAliasSets pass 

Moves the existing alias set building logic from inferMutableLifetimes to a 
separate pass. 

Additionally maintain abstract state to refine aliasing to not include 
primitives.",Sathya Gunasekaran,2022-12-01T19:03:44Z
4b9c2f36feb7b6ae8fd5a294e03c244d8397e839,"add missing reactive scope passes to playground 

I forget to add these passes to the playground, oops.",Joseph Savona,2022-12-01T19:02:27Z
df58546f4e3556a5f6f30495bd57f7039cdc0f13,Codegen TValue are just Expressions (#839),Jan Kassens,2022-12-01T17:56:45Z
3ba7add608ec8338cbcaea26d5935401853d2959,Allow async blocks in `to(Error|Warn)Dev` (#25338),Sebastian Silbermann,2022-12-01T10:26:43Z
f197ca997b9f220398db9a0a325bcc23e8417e0c,React DevTools 4.26.1 -> 4.27.0 (#25753),Mengdi Chen,2022-12-01T00:14:11Z
509aa9f0e504ead3133a5f7c75e2be5becbb69ab,"HIRVisitor - change labels to block ids 

HIRTreeVisitor previously passed a string label (for certain blocks). This 
changes to pass the raw BlockId, and have codegen convert that to a string. I'm 
not sure if we'll need this but it would be helpful for eg visiting the IR and 
emitting a new IR, while mapping block ids forward. Even if we don't need that 
it makes sense for Codegen to decide how to convert a block id into a label 
(which has to obey the rules of an identifier, not the visitor's concern).",Joe Savona,2022-11-30T18:24:51Z
fa11bd6ecca57d8ddbc728df881f0e165225c04f,"[ServerRenderer] Add option to send instructions as data attributes (#25437)

### Changes made:
- Running with enableFizzExternalRuntime (feature flag) and
unstable_externalRuntimeSrc (param) will generate html nodes with data
attributes that encode Fizz instructions.
```
<div 
  hidden data-rxi=""""
  data-bid=""param0""
  data-dgst=""param1""
></div>
```
- Added an external runtime browser script
`ReactDOMServerExternalRuntime`, which processes and removes these nodes
- This runtime should be passed as to renderInto[...] via
`unstable_externalRuntimeSrc`
- Since this runtime is render blocking (for all streamed suspense
boundaries and segments), we want this to reach the client as early as
possible. By default, Fizz will send this script at the end of the shell
when it detects dynamic content (e.g. suspenseful pending tasks), but it
can be sent even earlier by calling `preinit(...)` inside a component.
- The current implementation relies on Float to dedupe sending
`unstable_externalRuntimeSrc`, so `enableFizzExternalRuntime` is only
valid when `enableFloat` is also set.",mofeiZ,2022-11-30T18:22:08Z
aa2b152ea8d04896e36702b5065836af39b40bd6,"Fixture tests for 2 cases of expressions that produce incorrect output 

They're fairly related, but I figured it's worth keeping more examples. 

- For the `while` example we need to codegen into a single expression. - For the 
expression with contained assignment we need to either keep the SSA ids around 
or re-create a similar expression during codegen.",Jan Kassens,2022-11-29T23:33:00Z
b3a26f1de27e38b285a16bd013d285857344390a,"Infer reactive scope dependencies 

This builds upon @josephsavona's prior PR #817 to add support for inferring 
reactive scope dependencies for all instructions and terminals. 

Still TODO (probably in follow up PRs): 

- [ ] fix duplicate/different identity scope issue (see this [test 
fixture](https://github.com/facebook/react-forget/blob/5f3b260aaa3e936fb013716df3ef4e7676b7e9ea/forget/src/__tests__/fixtures/hir/overlapping-scopes-while.expect.md)) 
- [ ] also collect outputs of each scope - [ ] add new tree visitor that only 
visits, consider renaming the current `visitTree` to `mapTree` or similar 

Co-authored-by: Joe Savona <joesavonafb.com>",Lauren Tan,2022-11-29T22:07:55Z
ccca2d38cf7a006a6f7354d1b744afad64920158,[ez] Delete some old files,Lauren Tan,2022-11-29T20:23:56Z
e98225485a124e35abc4cea82e6da944472ce7c7,"Add ref cleanup function (#25686)

Add option for ref function to return a clean up function.

```jsx
<div ref={(_ref) => {
  // Use `_ref`
  return () => {
    // Clean up _ref
  };
}} />
```

If clean up function is not provided. Ref function is called with null
like it has been before.

```jsx
<div ref={(_ref) => {
  if (_ref) {
    // Use _ref
  } else {
    // Clean up _ref
  }
}} />
```",Samuel Susla,2022-11-29T16:41:02Z
179a7f96050976ab7b1ea814764e6e5c264fbca3,"Fix output tabs growing infinitely in height 

The `automaticLayout` config option for Monaco causes it to remeasure itself, 
and the parent container's height being longer than the screen causes it to 
constantly grow infinitely. You can observe this bug by going to the playground, 
expanding any tab, and watch the scrollbar grow as the editor quickly grows to 
ridiculous heights and your laptop starts glowing red hot and̶͙̕ H̴͉͘e comes 
t̵͙́o ̴̜̿de̷̼̚s̷̻̍ec̶̮͒rate all knowled̵̥̆ge",Lauren Tan,2022-11-29T16:07:03Z
edbfc6399ffa31267a2e884a63194b5ea17514ff,"Fix Jest cache for transform-react-version-pragma (#25712)

<!--
  Thanks for submitting a pull request!
We appreciate you spending the time to work on these changes. Please
provide enough information so that others can review your pull request.
The three fields below are mandatory.

Before submitting a pull request, please make sure the following is
done:

1. Fork [the repository](https://github.com/facebook/react) and create
your branch from `main`.
  2. Run `yarn` in the repository root.
3. If you've fixed a bug or added code that should be tested, add tests!
4. Ensure the test suite passes (`yarn test`). Tip: `yarn test --watch
TestName` is helpful in development.
5. Run `yarn test --prod` to test in the production environment. It
supports the same options as `yarn test`.
6. If you need a debugger, run `yarn debug-test --watch TestName`, open
`chrome://inspect`, and press ""Inspect"".
7. Format your code with
[prettier](https://github.com/prettier/prettier) (`yarn prettier`).
8. Make sure your code lints (`yarn lint`). Tip: `yarn linc` to only
check changed files.
  9. Run the [Flow](https://flowtype.org/) type checks (`yarn flow`).
  10. If you haven't already, complete the CLA.

Learn more about contributing:
https://reactjs.org/docs/how-to-contribute.html
-->

## Summary
Jest caching wasn't working correctly for
`transform-react-version-pragma`. One condition for including
`transform-react-version-pragma` is that `process.env.REACT_VERSION` is
set, but it wasn't included in the cache key computation. Thus local
test runs would only run without `transform-react-version-pragma`, if
jest runs weren't using the `-reactVersion` flag and then added it.

Inlined the `scripts/jest/devtools/preprocessor.js` file, because it
makes it more obvious that `process.env.REACT_VERSION` is used in
`scripts/jest/preprocessor.js`

<!--
Explain the **motivation** for making this change. What existing problem
does the pull request solve?
-->

## How did you test this change?

<!--
Demonstrate the code is solid. Example: The exact commands you ran and
their output, screenshots / videos if the pull request changes the user
interface.
How exactly did you verify that your PR solves the issue you wanted to
solve?
  If you leave this empty, your PR will very likely be closed.
-->

Repro step:
- Clear jest cache
- node ./scripts/jest/jest-cli.js --build --project devtools
--release-channel=experimental --reactVersion 18.0
- node ./scripts/jest/jest-cli.js --build --project devtools
--release-channel=experimental

Before:
Jest cached the first run with `REACT_VERSION` set, so in the second run
`transform-react-version-pragma` is still there and runs only the
regression tests on old react versions.

After:
- The second run runs all tests and ignore `// @reactVersion` as
expected.",Tianyu Yao,2022-11-28T23:14:34Z
9f7878c7c01eb0c7d6d95ed156850b02bbb02f32,"[easy] remove `isFallthrough` arg from `mapTerminalSuccessors` 

The argument was unused and a confusing boolean argument that's easy to mix up. 
Suggesting to remove it until we see a need for it at which point we might want 
to introduce an enum to make the argument more obvious.",Jan Kassens,2022-11-28T22:48:59Z
0bbb36e1a4d4db04a52c27fe07d9eb0de06c4889,"[codegen] more locations: binary, return, call (#820)",Jan Kassens,2022-11-28T21:54:46Z
15557fa67fe3cbd4a9bc7bf7340594d3f7e8ab89,"[Fix] properly track `useId` use in StrictMode in development (#25713)

In `<StrictMode>` in dev hooks are run twice on each render.

For `useId` the re-render pass uses the `updateId` implementation rather
than `mountId`. In the update path we don't increment the local id
counter. This causes the render to look like no id was used which
changes the tree context and leads to a different set of IDs being
generated for subsequent calls to `useId` in the subtree.

This was discovered here: https://github.com/vercel/next.js/issues/43033

It was causing a hydration error because the ID generation no longer
matched between server and client. When strict mode is off this does not
happen because the hooks are only run once during hydration and it
properly sees that the component did generate an ID.

The fix is to not reset the localIdCounter in `renderWithHooksAgain`. It
gets reset anyway once the `renderWithHooks` is complete and since we do
not re-mount the ID in the `...Again` pass we should retain the state
from the initial pass.",Josh Story,2022-11-28T17:42:57Z
8a23def32f9eb7495d6ece67af25fdfbebe42fcd,"Resubmit Add HydrationSyncLane (#25711)

<!--
  Thanks for submitting a pull request!
We appreciate you spending the time to work on these changes. Please
provide enough information so that others can review your pull request.
The three fields below are mandatory.

Before submitting a pull request, please make sure the following is
done:

1. Fork [the repository](https://github.com/facebook/react) and create
your branch from `main`.
  2. Run `yarn` in the repository root.
3. If you've fixed a bug or added code that should be tested, add tests!
4. Ensure the test suite passes (`yarn test`). Tip: `yarn test --watch
TestName` is helpful in development.
5. Run `yarn test --prod` to test in the production environment. It
supports the same options as `yarn test`.
6. If you need a debugger, run `yarn debug-test --watch TestName`, open
`chrome://inspect`, and press ""Inspect"".
7. Format your code with
[prettier](https://github.com/prettier/prettier) (`yarn prettier`).
8. Make sure your code lints (`yarn lint`). Tip: `yarn linc` to only
check changed files.
  9. Run the [Flow](https://flowtype.org/) type checks (`yarn flow`).
  10. If you haven't already, complete the CLA.

Learn more about contributing:
https://reactjs.org/docs/how-to-contribute.html
-->

## Summary
Submit https://github.com/facebook/react/pull/25698 again after fixing
the devtools regression tests in CI.
The PR changed lanes representation and some snapshot tests of devtools
captures lanes. In devtools tests for older versions, the updated lanes
representation no longer matched. The fix is to disable regression tests
for those tests.

## How did you test this change?

<!--
Demonstrate the code is solid. Example: The exact commands you ran and
their output, screenshots / videos if the pull request changes the user
interface.
How exactly did you verify that your PR solves the issue you wanted to
solve?
  If you leave this empty, your PR will very likely be closed.
-->

```
./scripts/circleci/download_devtools_regression_build.js 18.0 --replaceBuild
node ./scripts/jest/jest-cli.js --build --project devtools --release-channel=experimental --reactVersion 18.0
```

Unrelated to this PR. There was some issue with jest caching when I
locally ran that command. it didn't seem to include the @reactVersion
transform, but if I manually modified `scripts/jest/preprocessor.js` or
ran ` yarn test --clearCache`, the jest test runs correctly.",Tianyu Yao,2022-11-28T17:13:06Z
b932ce19a712223a0a1961ccf0f26bf2b1775a70,"[playground] TabbedWindowItem lifting tabs state up 

- List local state in TabbedWindowItem to Editor/index",jacdebug,2022-11-25T09:00:30Z
9ae698c7340d5dd477b281bb03bd331c7f0613a7,[playground] Add tab to display output from old architecture,Sathya Gunasekaran,2022-11-24T18:04:16Z
76a4bd67f44c217ef0c6eb84c50d0fd78f23f0ea,[playground] Remove unused kind parameter,Sathya Gunasekaran,2022-11-24T17:56:49Z
c203d07d8c3033a3b1d80958abe1329467979884,"[Playground] vertical tabs to see multiple stages same time 

# Add vertical tabs to see multiple stages same time 

<img width=""781"" alt=""image"" 
src=""https://user-images.githubusercontent.com/430289/203837762-ccf37491-2006-4512-8014-0b7893f3396f.png"">",jacdebug,2022-11-24T17:25:13Z
d958d4b73eee33ef1078d936bcfa140725a0f5b1,"[playground] Remove line number from output
We already have instruction numbers as part of the output so line numbers just add extra visual noise.",Sathya Gunasekaran,2022-11-24T16:04:27Z
06ca8b102609a77efb3d18f2e982ca670bb83dc6,"[playground] Refactor compilation of HIR 

Stack created with [Sapling](https://sapling-scm.com). Best reviewed with 
[ReviewStack](https://reviewstack.dev/facebook/react-forget/pull/825). * __->__ 
#825 

[playground] Refactor compilation of HIR",Sathya Gunasekaran,2022-11-24T15:28:38Z
e2cfbeb3d3457aa4f38bff54a34a04c68c8ab277,"[playground] Display only new HIR 

Stack created with [Sapling](https://sapling-scm.com). Best reviewed with 
[ReviewStack](https://reviewstack.dev/facebook/react-forget/pull/824). * #825 * 
__->__ #824 

[playground] Display only new HIR",Sathya Gunasekaran,2022-11-24T15:24:40Z
da6d84049e67cd2c9e0bdfd042d040929c02906d,easy: name InstructionKind enum values (#818),Jan Kassens,2022-11-23T15:48:53Z
e51553f5da66794e07fde96118e7816b1b92ea20,"InferReactiveScopes considers all operands, incl terminals",Joe Savona,2022-11-22T22:10:06Z
a0054a18371a5aa1a69a1132f420d69f3c373957,"Visit terminal ids before terminal branches 

This is a follow-up to merging ranges. I realized that we need to mark terminal 
ids as visited _before_ processing the branches of that terminal (whereas before 
we were marking terminal ids only _after_ processing the branches). That exposed 
another bug where interleaving could fail to be detected (with an error, 
thankfully) if one of the branches had completed already. 

Our small test suite is already really good!",Joe Savona,2022-11-22T20:10:26Z
d2e5c31fc66aba93bd63616c529a6df723033ea1,"Test case showing reassignment block scoping problem 

This demonstrates a situation we don't handle well today. The basic structure is 
that you have some variable defined at the top level, then some control flow 
like if/switch where _all_ branches reassign the variable, then some code after 
that references the resulting phi node: 

```javascript 

let x1; 

// ... mutate/read x1 

if (cond) { 

x2 = {}; 

} else { 

x3 = {}; 

} 

x4 = phi(x2, x3); 

``` 

We currently group x3, x3, and x4 into a scope together, but note that...there's 
no `let` declaration for any of those! This means that it looks like the scope 
for x2 and x3 start in the consequent/alternate, but the true scope spans from 
before-after the if. I'm inclined to say that LeaveSSA should run _before_ scope 
analysis, and produce something like the following in this case: 

```javascript 

let x1; 

// ...mutate/read x1 

let x2; // new variable declaration for the new version of x 

if (cond) { 

x2 = {}; 

} else { 

x2 = {}; 

} 

x2; 

``` 

This then allows us to construct a correct range for x2, which starts in the 
other block.",Joe Savona,2022-11-22T18:42:36Z
4a3640f25c97e1862812b62885f4447de9f1f8d9,"Merge scopes that interleave or cross control-flow boundaries together 

- [x] Merge scopes that are interleaved 

- [x] Merge scopes if they both cross control-flow boundaries together 

- [x] Don't merge scopes that strictly shadow 

Still WIP because I want to double-check and see if i can find a simpler 
algorithm for this. But it works.",Joe Savona,2022-11-22T18:42:33Z
d9c6d611921b252a539872e9640d04c00e51a82b,"[test] Print HIR before leaving SSA 

Stack created with [Sapling](https://sapling-scm.com). Best reviewed with 
[ReviewStack](https://reviewstack.dev/facebook/react-forget/pull/812). * __->__ 
#812 

[test] Print HIR before leaving SSA Looking at the HIR before it leaves SSA 
helps debugging better.",Sathya Gunasekaran,2022-11-22T17:59:42Z
1f4705bbab547140b63f25769fddb5fc763d5c21,[ez] Update test262,Lauren Tan,2022-11-22T16:39:42Z
6bf5a1b39647c4e4a2ca2874e827073472e259a1,"[codegen] Elide final return stmt if no value 

This is a random driveby improvement. I realized that we can eliminate `return` 
statements if a) they have no value and b) they are in the top-level block. 
Functions implicitly return at that point — there can't be any succeeding 
instructions anyway — so we can save bytes in the output.",Joe Savona,2022-11-22T16:03:40Z
1976fd03b4ae71c97e375f0e74d094a0a9088d79,"Adjust scope ranges to block boundaries 

Visits the HIR as a tree and updates mutable ranges to ensure their range end is 
aligned with the block in which the scope is declared: 

```javascript 

function foo(cond, a) { 

⌵ original scope 

⌵ expanded scope 

const x = [];    ⌝    ⌝ 

if (cond) {      ⎮    ⎮ 

...            ⎮    ⎮ 

x.push(a);     ⌟    ⎮ 

...                 ⎮ 

}                     ⎮ 

...                   ⌟ 

} 

``` 

The implementation tracks the block in which each scope ""starts"" (first 
instruction with an operand in that scope), and then finds the first instruction 
at that block (or a parent) which is after the scope's end.",Joe Savona,2022-11-22T16:03:39Z
796e14f38e1ff45ee91f8f9448b9e5fb4189ad2e,"Identifier.scope includes scope id and range 

Refactors `Identifier.scope` to be a `ReactiveScope` object with an id and 
range. This gives us a place to later add a list of dependencies for the scope.",Joe Savona,2022-11-22T16:03:38Z
2655c9354d8e1c54ba888444220f63e836925caa,"Fizz Browser: fix precomputed chunk being cleared on Node 18 (#25645)

## Edit

Went for another approach after talking with @gnoff. The approach is
now:
- add a dev-only error when a precomputed chunk is too big to be written
- suggest to copy it before passing it to `writeChunk`

This PR also includes porting the React Float tests to use the browser
build of Fizz so that we can test it out on that environment (which is
the one used by next).

<!--
  Thanks for submitting a pull request!
We appreciate you spending the time to work on these changes. Please
provide enough information so that others can review your pull request.
The three fields below are mandatory.

Before submitting a pull request, please make sure the following is
done:

1. Fork [the repository](https://github.com/facebook/react) and create
your branch from `main`.
  2. Run `yarn` in the repository root.
3. If you've fixed a bug or added code that should be tested, add tests!
4. Ensure the test suite passes (`yarn test`). Tip: `yarn test --watch
TestName` is helpful in development.
5. Run `yarn test --prod` to test in the production environment. It
supports the same options as `yarn test`.
6. If you need a debugger, run `yarn debug-test --watch TestName`, open
`chrome://inspect`, and press ""Inspect"".
7. Format your code with
[prettier](https://github.com/prettier/prettier) (`yarn prettier`).
8. Make sure your code lints (`yarn lint`). Tip: `yarn linc` to only
check changed files.
  9. Run the [Flow](https://flowtype.org/) type checks (`yarn flow`).
  10. If you haven't already, complete the CLA.

Learn more about contributing:
https://reactjs.org/docs/how-to-contribute.html
-->

## Summary

Someone reported [a bug](https://github.com/vercel/next.js/issues/42466)
in Next.js that pointed to an issue with Node 18 in the streaming
renderer when using importing a CSS module where it only returned a
malformed bootstraping script only after loading the page once.

After investigating a bit, here's what I found:

- when using a CSS module in Next, we go into this code path, which
writes the aforementioned bootstrapping script


https://github.com/facebook/react/blob/5f7ef8c4cbe824ef126a947b7ae0e1c07b143357/packages/react-dom-bindings/src/server/ReactDOMServerFormatConfig.js#L2443-L2447

- the reason for the malformed script is that
`completeBoundaryWithStylesScript1FullBoth` is emptied after the call to
`writeChunk`
- it gets emptied in `writeChunk` because we stream the chunk directly
without copying it in this codepath

https://github.com/facebook/react/blob/a438590144d2ad40865b58e0c0e69595fc1aa377/packages/react-server/src/ReactServerStreamConfigBrowser.js#L63
- the reason why it only happens from Node 18 is because the Webstreams
APIs are available natively from that version and in their
implementation, [`enqueue` transfers the array buffer
ownership](https://github.com/nodejs/node/blob/9454ba6138d11e8a4d18b073de25781cad4bd2c8/lib/internal/webstreams/readablestream.js#L2641),
thus making it unavailable/empty for subsequent calls. In older Node
versions, we don't encounter the bug because we are using a polyfill in
Next.js, [which does not implement properly the array buffer transfer
behaviour](https://cs.github.com/MattiasBuelens/web-streams-polyfill/blob/d354a7457ca8a24030dbd0a135ee40baed7c774d/src/lib/abstract-ops/ecmascript.ts#L16).

I think the proper fix for this is to clone the array buffer before
enqueuing it. (we do this in the other code paths in the function later
on, see ```((currentView: any): Uint8Array).set(bytesToWrite,
writtenBytes);```





## How did you test this change?

Manually tested by applying the change in the compiled Next.js version.

<!--
Demonstrate the code is solid. Example: The exact commands you ran and
their output, screenshots / videos if the pull request changes the user
interface.
How exactly did you verify that your PR solves the issue you wanted to
solve?
  If you leave this empty, your PR will very likely be closed.
-->

Co-authored-by: Sebastian Markbage <sebastian@calyptus.eu>",Jimmy Lai,2022-11-22T00:33:41Z
799ee65343fe79d5871531769c13abc2ba32492b,"[DiffTrain] Tweak folder structure (#25724)

Should hopefully be final tweaks! Sorry about all the noise.

Test plan: temporarily ran the workflow on this branch, verified output
in the builds/facebook-www branch is correct:
https://github.com/facebook/react/commit/bfc0eb6cd4d0a3cf9ae67f95b08d786356260cf6",lauren,2022-11-21T22:35:52Z
62e2b1374be04f1a366005002dee6ae178058de6,[DiffTrain] Fix incorrect build path (#25723),lauren,2022-11-21T21:00:50Z
e58b6c158bf7baeedc918353d1fea658003ef65c,"Reorganize build folders for DiffTrain (#25722)

Reorganize some files to make the DiffTrain config easier to setup. Also
add unstable_server-external-runtime to sync.",lauren,2022-11-21T20:42:49Z
d44082d63c835df9b4f209a260539c640c783f30,"[codegen] location refinements 

- Add a `loc` to the `while` terminal node. 

- Move location data for assignments 1 level higher as that seems to work better 
in the generated code (not tested with actual debugger yet though, we'll 
probably want to look at this more closely.",Jan Kassens,2022-11-21T20:35:39Z
1228bc8ce5eadd15a4d25ba373afcb4eef8543be,[codegen] assign some locations in generated code (#802),Jan Kassens,2022-11-21T20:14:20Z
855d13f4b23b0af8b7004fd29ac7425e3636ba8a,"Add instruction ids to terminals 

[ghstack-poisoned] 

closes #799",Joseph Savona,2022-11-21T19:51:19Z
9948e389f15596be642e006c92f1c4c35968082c,"Opaque InstructionId type 

[ghstack-poisoned] 

closes #797",Joseph Savona,2022-11-21T19:47:14Z
391aeab5aa683342457aa75d1c7c389601463930,"MutableRange is start(inclusive) to end(exclusive) 

closes #796",Joseph Savona,2022-11-21T19:44:02Z
e59c17ad85c0b290e4b78838832ba5a054f113a8,"[playground] upgrade to Next 13' 

- update dependencies - migrate to app directory",Jan Kassens,2022-11-21T19:03:30Z
13681aaf9c55851e374336120e5acf79da3c5183,"Add github action to commit build artifacts for Facebook (#25721)

This PR adds a new GitHub action to commit build artifacts for Facebook
into a new protected branch. This will later be used to setup an
automatic sync to www.

The hacky spinloop is meant to be a temporary implementation until we
can support running a script internally on top of the synced diff
(coming soon). A GitHub token is otherwise required if we want to setup
a pub/sub between cirleci and github but it's not straightforward to
provision one for our org. So this workaround should do for now since we
won't keep it around for too long.

Example of it running and creating a commit on the `builds/facebook-www`
branch:
https://github.com/facebook/react/actions/runs/3516958576/jobs/5894251359",lauren,2022-11-21T19:03:23Z
5f2833bd5ca70ea1fd6f72dc4ed6aaa298024c8a,"Add HIR ""tree"" visitor and use it for codegen, alternate printer 

Refactors Codegen to extract the core ""visit IR as a tree"" logic separately from 
the code to emit JS: 

* `HIRTreeVisitor` is a new helper that visits the HIR as a tree. You call 
`visitTree(ir, yourVisitor)` and it drives visiting of the IR, tracking blocks 
and scopes and calling methods as appropriate. 

* `Codegen` is now implemented as a Visitor implementation. For example 
`enterBlock()` creates an empty `Array<t.Statement>`, `leaveBlock()` wraps that 
in a `t.BlockStatement`, etc. 

* `printHIRTree()` is a new IR printer (implemented as a visitor) that prints 
the HIR in tree form, so it retains the original shape of the code but with each 
block replaced with its IR equivalent.",Joe Savona,2022-11-19T01:15:16Z
0c1f88db6c00e10ba8b226966230078747d65936,[test262] Use compiler pipeline in test262 runner (#800),Sathya Gunasekaran,2022-11-21T18:55:57Z
61e018695029cc8b2ee5032831550f3880e29b4d,Add compiler pipeline (#795),Sathya Gunasekaran,2022-11-21T18:42:58Z
584eff2d38670dcfb98d947b3db39dfb06f6cabb,[hir] Handle simple aliases when inferring mutable lifetimes (#794),Sathya Gunasekaran,2022-11-21T18:35:14Z
43686787a0b9f62d896037485a2d7e8d9601fccf,[playground] add link to view sourcemap (#798),Jan Kassens,2022-11-21T18:19:36Z
c08d8b8041a1fa2eba423cdb0398dfbc6402a5bc,"Revert ""Add SyncHydrationLane"" (#25708)

Reverts facebook/react#25698
DevTools CI for older version are failing",Tianyu Yao,2022-11-18T23:00:35Z
92afc1a50bb13b3e754595d3733e1b808cf55cd9,Stub for final phase of reactive scope construction w docs,Joe Savona,2022-11-18T22:59:33Z
71a7f0d6b23856687590d1e8fa1added93a2f9a8,"Wrap mermaid labels as strings 

The new pretty printed scopes ""syntax"" breaks mermaid labels because the `@` 
character seems to be reserved. This wraps them all as a string so they work 
again.",Lauren Tan,2022-11-18T16:09:21Z
70e7a632bb07ed1fa36c4cccc941ca4e6d89bbe3,"Annotate mutable range for each scope 

Expands InferReactiveScopeVariables to update the mutableRange of all 
identifiers to be the range of its scope. The result is that all identifiers in 
a given scope will have the same range, whose start is the minimum of the 
identifiers range starts, and end is the maximum.",Joe Savona,2022-11-17T23:13:35Z
56ffca8b9e4e49ad46136fe705203afc2d20fd9f,"Add Bun streaming server renderer (#25597)

Add support for Bun server renderer",Colin McDonnell,2022-11-17T21:15:56Z
f31005d6ad5f48b586e1645226fcfe97cd112aa3,"Add SyncHydrationLane (#25698)

<!--
  Thanks for submitting a pull request!
We appreciate you spending the time to work on these changes. Please
provide enough information so that others can review your pull request.
The three fields below are mandatory.

Before submitting a pull request, please make sure the following is
done:

1. Fork [the repository](https://github.com/facebook/react) and create
your branch from `main`.
  2. Run `yarn` in the repository root.
3. If you've fixed a bug or added code that should be tested, add tests!
4. Ensure the test suite passes (`yarn test`). Tip: `yarn test --watch
TestName` is helpful in development.
5. Run `yarn test --prod` to test in the production environment. It
supports the same options as `yarn test`.
6. If you need a debugger, run `yarn debug-test --watch TestName`, open
`chrome://inspect`, and press ""Inspect"".
7. Format your code with
[prettier](https://github.com/prettier/prettier) (`yarn prettier`).
8. Make sure your code lints (`yarn lint`). Tip: `yarn linc` to only
check changed files.
  9. Run the [Flow](https://flowtype.org/) type checks (`yarn flow`).
  10. If you haven't already, complete the CLA.

Learn more about contributing:
https://reactjs.org/docs/how-to-contribute.html
-->

## Summary

<!--
Explain the **motivation** for making this change. What existing problem
does the pull request solve?
-->
For more context: https://github.com/facebook/react/pull/25692

Based on https://github.com/facebook/react/pull/25695. This PR adds the
`SyncHydrationLane` so we rewind on sync updates during selective
hydration. Also added tests for ContinuouseHydration and
DefaultHydration lanes.


## How did you test this change?

<!--
Demonstrate the code is solid. Example: The exact commands you ran and
their output, screenshots / videos if the pull request changes the user
interface.
How exactly did you verify that your PR solves the issue you wanted to
solve?
  If you leave this empty, your PR will very likely be closed.
-->
yarn test",Tianyu Yao,2022-11-17T20:14:49Z
f284d9fafac3af79c6901b6b63305cbd161304cd,"Track ThenableState alongside other hooks

Now that hook state is preserved while the work loop is suspended, we
don't need to track the thenable state in the work loop. We can track
it alongside the rest of the hook state.

This is a nice simplification and also aligns better with how it works
in Fizz and Flight.

The promises will still be cleared when the component finishes rendering
(either complete or unwind). In the future, we could stash the promises
on the fiber and reuse them during an update. However, this would only
work for `use` calls that occur before an prop/state/context is
processed, because `use` calls can only be assumed to execute in the
same order if no other props/state/context have changed. So it might not
be worth doing until we have finer grained memoization.",Andrew Clark,2022-11-03T23:25:43Z
6b4c0314e82e3e56a8af84f3af3c0822a950ad1f,"Check thenable instead of thenableState

Now that hook state is preserved while the work loop is suspended, we
don't need to track the thenable state in the work loop. We can track
it alongside the rest of the hook state.

Before deleting the thenable state variable from the work loop, I need
to remove the other places where it's referenced.

One of them is `isThenableStateResolved`. This grabs the last thenable
from the array and checks if it has resolved.

This was a pointless indirection anyway. The thenable is already stored
as `workInProgressThrownValue`. So we can check that directly.",Andrew Clark,2022-11-03T21:23:16Z
33e3d2878e9ec82c65468316ffcc473e5288bb87,"Reuse hooks when replaying a suspended component

When a component suspends, under some conditions, we can wait for the
data to resolve and replay the component without unwinding the stack or
showing a fallback in the interim. When we do this, we reuse the
promises that were unwrapped during the previous attempts, so that if
they aren't memoized, the result can still be used.

We should do the same for all hooks. That way, if you _do_ memoize an
async function call with useMemo, it won't be called again during the
replay. This effectively gives you a local version of the functionality
provided by `cache`, using the normal memoization patterns that have
long existed in React.",Andrew Clark,2022-11-03T01:43:14Z
4387d752dadada921938f9ea171d065b44a769c1,"Allow more hooks to be added when replaying mount

Currently, if you call setState in render, you must render the exact
same hooks as during the first render pass.

I'm about to add a behavior where if something suspends, we can reuse
the hooks from the previous attempt. That means during initial render,
if something suspends, we should be able to reuse the hooks that were
already created and continue adding more after that. This will error
in the current implementation because of the expectation that every
render produces the same list of hooks.

In this commit, I've changed the logic to allow more hooks to be added
when replaying. But only during a mount — if there's already a current
fiber, then the logic is unchanged, because we shouldn't add any
additional hooks that aren't in the current fiber's list. Mounts are
special because there's no current fiber to compare to.

I haven't change any other behavior yet. The reason I've put this into
its own step is there are a couple tests that intentionally break the
Hook rule, to assert that React errors in these cases, and those happen
to be coupled to the behavior. This is undefined behavior that is always
accompanied by a warning and/or error. So the change should be safe.",Andrew Clark,2022-11-03T02:50:45Z
5eb78d0a04dee8fa14189a31c19831dd390225cb,"Pass ThenableState to replaySuspendedUnitOfWork

Tiny refactor to refine the work loop variable so Flow knows it's not
null when we access it in replaySuspendedUnitOfWork.",Andrew Clark,2022-11-02T18:18:29Z
4a2d86bddbcef3e64bc404302cdbd9638af8801b,"Don't reset work loop until stack is unwound

When replaying a suspended function components, we want to reuse the
hooks that were computed during the original render.

Currently we reset the state of the hooks right after the component 
suspends (or throws an error). This is too early because it doesn't 
give us an opportunity to wait for the promise to resolve.

This refactors the work loop to reset the hooks right before unwinding
instead of right after throwing. It doesn't include any other changes
yet, so there should be no observable behavioral change.",Andrew Clark,2022-11-02T20:19:22Z
9dfbd9fa90a6f7c1182e2c6dc85956cf7ea3010c,"use: Don't suspend if there are pending updates

Before suspending, check if there are other pending updates that might
possibly unblock the suspended component. If so, interrupt the current
render and switch to working on that.

This logic was already implemented for the old ""throw a Promise""
Suspense but has to be replicated for `use` because it suspends the
work loop much earlier.

I'm getting a little anxious about the divergence between the two
Suspense patterns. I'm going to look into enabling the new behavior for
the old pattern so that we can unify the implementations.",Andrew Clark,2022-11-03T20:15:26Z
44c4e6f4ddbc9aacd17acba19eb95dba21a2cff2,"Force unwind work loop during selective hydration (#25695)

When an update flows into a dehydrated boundary, React cannot apply the
update until the boundary has finished hydrating. The way this currently
works is by scheduling a slightly higher priority task on the boundary,
using a special lane that's reserved only for this purpose. Because the
task is slightly higher priority, on the next turn of the work loop, the
Scheduler will force the work loop to yield (i.e. shouldYield starts
returning `true` because there's a higher priority task).

The downside of this approach is that it only works when time slicing is
enabled. It doesn't work for synchronous updates, because the
synchronous work loop does not consult the Scheduler on each iteration.

We plan to add support for selective hydration during synchronous
updates, too, so we need to model this some other way.

I've added a special internal exception that can be thrown to force the
work loop to interrupt the work-in-progress tree. Because it's thrown
from a React-only execution stack, throwing isn't strictly necessary —
we could instead modify some internal work loop state. But using an
exception means we don't need to check for this case on every iteration
of the work loop. So doing it this way moves the check out of the fast
path.

The ideal implementation wouldn't need to unwind the stack at all — we
should be able to hydrate the subtree and then apply the update all
within a single render phase. This is how we intend to implement it in
the future, but this requires a refactor to how we handle ""stack""
variables, which are currently pushed to a per-render array. We need to
make this stack resumable, like how context works in Flight and Fizz.",Andrew Clark,2022-11-17T18:51:33Z
2d8dc3ec4f84bd961924965aad26776e674e4f44,"Phi operands belong in the same reactive scope 

This completes the implementation of InferReactiveScopeVariables, adding support 
for phi nodes. Example: 

```javascript 

let x$0 = null; 

mutate(x$0); 

if (cond) { 

x$1 = a; 

mutate(x$1) 

} else { 

x$2 = b; 

} 

x$3 = phi(x$1, x$2); 

mutate(x$3); 

``` 

We now add x$1, x$2, and x$3 to the same reactive scope. This reflects the fact 
that x$3 cannot be computed without also computing both x$1 and x$2. Note that 
x$3 can never be x$0, so x$0 is _not_ added to the same scope. This allows us to 
take advantage of SSA form to note that _some_ instances of an identifier really 
are distinct.",Joe Savona,2022-11-17T17:35:00Z
7b17f7bbf3243c2890cb830902be8ef8b51db3da,"Enable warning for defaultProps on function components for everyone (#25699)

This also fixes a gap where were weren't warning on memo components.",Sebastian Markbåge,2022-11-17T17:22:23Z
cf7176d3f24e0b116cd9bee3878480e0010e1176,"Add prettier script 

Copies over the prettier script from the React repo with a few tiny tweaks for a 
nicer experience running prettier on changed files",Lauren Tan,2022-11-17T15:31:34Z
6fb8133ed3aa6b23063375dd345c6e413b05f0fe,"Turn on string ref deprecation warning for everybody (not codemoddable) (#25383)

## Summary
 
Alternate to https://github.com/facebook/react/pull/25334 without any
prod runtime changes i.e. the proposed codemod in
https://github.com/reactjs/rfcs/blob/createlement-rfc/text/0000-create-element-changes.md#deprecate-string-refs-and-remove-production-mode-_owner-field
would not work.

## How did you test this change?

- [x] CI
- [x] `yarn test` with and without `warnAboutStringRefs`",Sebastian Silbermann,2022-11-17T00:15:57Z
07f46ecf2e559d03699263932b3ec82fb1099f1c,"Turn on key spread warning in jsx-runtime for everyone (#25697)

This improves the error message a bit and ensures that we recommend
putting the key first, not last, which ensures that the faster
`jsx-runtime` is used.

This only affects the modern ""automatic"" JSX transform.",Sebastian Markbåge,2022-11-16T23:57:50Z
188c1501be47401fbe1884a601e0e31d42a58c9a,"Condense test262 output in ci 

There's no option to output the results of the test262 harness in silent mode so 
every pass and failure outputs multiple lines to stdout. Since there are many 
thousands of tests this results in unusable log files that are over 200k lines 
long. This PR redirects stdout to a tmp file and then we reformat the result 
into a small JSON object, grouped by the failure message with count. 

Example: 

```json [   {     ""pass"": false,     ""data"": {       ""message"": ""Expected no 
error, got Error: TODO: Support complex object assignment"",       ""count"": 66    
 }   },   {     ""pass"": false,     ""data"": {       ""message"": ""Expected no 
error, got Error: TODO: lowerExpression(FunctionExpression)"",       ""count"": 4   
  }   },   {     ""pass"": false,     ""data"": {       ""message"": ""Expected no 
error, got Error: TODO: lowerExpression(UnaryExpression)"",       ""count"": 6     
}   },   {     ""pass"": false,     ""data"": {       ""message"": ""Expected no error, 
got Error: todo: lower initializer in ForStatement"",       ""count"": 28     }   
},   {     ""pass"": false,     ""data"": {       ""message"": ""Expected no error, got 
Invariant Violation: Expected value for identifier `15` to be initialized."",     
  ""count"": 14     }   },   {     ""pass"": false,     ""data"": {       ""message"": 
""Expected no error, got Invariant Violation: `var` declarations are not 
supported, use let or const"",       ""count"": 76     }   },   {     ""pass"": true, 
    ""data"": {       ""message"": null,       ""count"": 1     }   } ] ```",Lauren Tan,2022-11-16T23:24:07Z
d65b88d0319b37eec59c74ed9189cf5ab18b56e8,"Eagerly initialize an mutable object for instance.refs (#25696)

This micro-optimization never made sense and less so now that they're
rare.

This still initializes the class with a shared immutable object in the
constructor - which is also what createClass() does.

Then we override it during mount. This is done in case someone messes up
the initialization of the super() constructor for example, which was
more common in polyfills.

This change means that if a ref is initialized during the constructor
itself it wouldn't be lazily initialized but that's not user code that
does it, it's React so that shouldn't happen.

This makes string refs codemoddable as described in.
https://github.com/facebook/react/pull/25334",Sebastian Markbåge,2022-11-16T20:16:54Z
db8a3fcc31896d0e8181cffb8ed52c41f02ef26e,"Bump loader-utils from 1.4.0 to 1.4.2 in /fixtures/fizz (#25680)

[//]: # (dependabot-start)
⚠️  **Dependabot is rebasing this PR** ⚠️ 

Rebasing might not happen immediately, so don't worry if this takes some
time.

Note: if you make any changes to this PR yourself, they will take
precedence over the rebase.

---

[//]: # (dependabot-end)

Bumps [loader-utils](https://github.com/webpack/loader-utils) from 1.4.0
to 1.4.2.
<details>
<summary>Release notes</summary>
<p><em>Sourced from <a
href=""https://github.com/webpack/loader-utils/releases"">loader-utils's
releases</a>.</em></p>
<blockquote>
<h2>v1.4.2</h2>
<h3><a
href=""https://github.com/webpack/loader-utils/compare/v1.4.1...v1.4.2"">1.4.2</a>
(2022-11-11)</h3>
<h3>Bug Fixes</h3>
<ul>
<li>ReDoS problem (<a
href=""https://github-redirect.dependabot.com/webpack/loader-utils/issues/226"">#226</a>)
(<a
href=""https://github.com/webpack/loader-utils/commit/17cbf8fa8989c1cb45bdd2997aa524729475f1fa"">17cbf8f</a>)</li>
</ul>
<h2>v1.4.1</h2>
<h3><a
href=""https://github.com/webpack/loader-utils/compare/v1.4.0...v1.4.1"">1.4.1</a>
(2022-11-07)</h3>
<h3>Bug Fixes</h3>
<ul>
<li>security problem (<a
href=""https://github-redirect.dependabot.com/webpack/loader-utils/issues/220"">#220</a>)
(<a
href=""https://github.com/webpack/loader-utils/commit/4504e34c4796a5836ef70458327351675aed48a5"">4504e34</a>)</li>
</ul>
</blockquote>
</details>
<details>
<summary>Changelog</summary>
<p><em>Sourced from <a
href=""https://github.com/webpack/loader-utils/blob/v1.4.2/CHANGELOG.md"">loader-utils's
changelog</a>.</em></p>
<blockquote>
<h3><a
href=""https://github.com/webpack/loader-utils/compare/v1.4.1...v1.4.2"">1.4.2</a>
(2022-11-11)</h3>
<h3>Bug Fixes</h3>
<ul>
<li>ReDoS problem (<a
href=""https://github-redirect.dependabot.com/webpack/loader-utils/issues/226"">#226</a>)
(<a
href=""https://github.com/webpack/loader-utils/commit/17cbf8fa8989c1cb45bdd2997aa524729475f1fa"">17cbf8f</a>)</li>
</ul>
<h3><a
href=""https://github.com/webpack/loader-utils/compare/v1.4.0...v1.4.1"">1.4.1</a>
(2022-11-07)</h3>
<h3>Bug Fixes</h3>
<ul>
<li>security problem (<a
href=""https://github-redirect.dependabot.com/webpack/loader-utils/issues/220"">#220</a>)
(<a
href=""https://github.com/webpack/loader-utils/commit/4504e34c4796a5836ef70458327351675aed48a5"">4504e34</a>)</li>
</ul>
<p><!-- raw HTML omitted --><!-- raw HTML omitted --></p>
</blockquote>
</details>
<details>
<summary>Commits</summary>
<ul>
<li><a
href=""https://github.com/webpack/loader-utils/commit/331ad5067d9a1a7b8d646692e6959639969210d1""><code>331ad50</code></a>
chore(release): 1.4.2</li>
<li><a
href=""https://github.com/webpack/loader-utils/commit/17cbf8fa8989c1cb45bdd2997aa524729475f1fa""><code>17cbf8f</code></a>
fix: ReDoS problem (<a
href=""https://github-redirect.dependabot.com/webpack/loader-utils/issues/226"">#226</a>)</li>
<li><a
href=""https://github.com/webpack/loader-utils/commit/8f082b39f6903929f30fe29dab34f4d9c7ef070a""><code>8f082b3</code></a>
chore(release): 1.4.1</li>
<li><a
href=""https://github.com/webpack/loader-utils/commit/4504e34c4796a5836ef70458327351675aed48a5""><code>4504e34</code></a>
fix: security problem (<a
href=""https://github-redirect.dependabot.com/webpack/loader-utils/issues/220"">#220</a>)</li>
<li>See full diff in <a
href=""https://github.com/webpack/loader-utils/compare/v1.4.0...v1.4.2"">compare
view</a></li>
</ul>
</details>
<br />


[![Dependabot compatibility
score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=loader-utils&package-manager=npm_and_yarn&previous-version=1.4.0&new-version=1.4.2)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)

Dependabot will resolve any conflicts with this PR as long as you don't
alter it yourself. You can also trigger a rebase manually by commenting
`@dependabot rebase`.

[//]: # (dependabot-automerge-start)
[//]: # (dependabot-automerge-end)

---

<details>
<summary>Dependabot commands and options</summary>
<br />

You can trigger Dependabot actions by commenting on this PR:
- `@dependabot rebase` will rebase this PR
- `@dependabot recreate` will recreate this PR, overwriting any edits
that have been made to it
- `@dependabot merge` will merge this PR after your CI passes on it
- `@dependabot squash and merge` will squash and merge this PR after
your CI passes on it
- `@dependabot cancel merge` will cancel a previously requested merge
and block automerging
- `@dependabot reopen` will reopen this PR if it is closed
- `@dependabot close` will close this PR and stop Dependabot recreating
it. You can achieve the same result by closing it manually
- `@dependabot ignore this major version` will close this PR and stop
Dependabot creating any more for this major version (unless you reopen
the PR or upgrade to it yourself)
- `@dependabot ignore this minor version` will close this PR and stop
Dependabot creating any more for this minor version (unless you reopen
the PR or upgrade to it yourself)
- `@dependabot ignore this dependency` will close this PR and stop
Dependabot creating any more for this dependency (unless you reopen the
PR or upgrade to it yourself)
- `@dependabot use these labels` will set the current labels as the
default for future PRs for this repo and language
- `@dependabot use these reviewers` will set the current reviewers as
the default for future PRs for this repo and language
- `@dependabot use these assignees` will set the current assignees as
the default for future PRs for this repo and language
- `@dependabot use this milestone` will set the current milestone as the
default for future PRs for this repo and language

You can disable automated security fix PRs for this repo from the
[Security Alerts
page](https://github.com/facebook/react/network/alerts).

</details>

Signed-off-by: dependabot[bot] <support@github.com>
Co-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>",dependabot[bot],2022-11-16T18:19:42Z
355dd7d9dc401d600c01c51a0b71bc21db2ecf83,"Bump loader-utils from 2.0.0 to 2.0.4 in /fixtures/flight (#25694)

Bumps [loader-utils](https://github.com/webpack/loader-utils) from 2.0.0
to 2.0.4.
<details>
<summary>Release notes</summary>
<p><em>Sourced from <a
href=""https://github.com/webpack/loader-utils/releases"">loader-utils's
releases</a>.</em></p>
<blockquote>
<h2>v2.0.4</h2>
<h3><a
href=""https://github.com/webpack/loader-utils/compare/v2.0.3...v2.0.4"">2.0.4</a>
(2022-11-11)</h3>
<h3>Bug Fixes</h3>
<ul>
<li>ReDoS problem (<a
href=""https://github-redirect.dependabot.com/webpack/loader-utils/issues/225"">#225</a>)
(<a
href=""https://github.com/webpack/loader-utils/commit/ac09944dfacd7c4497ef692894b09e63e09a5eeb"">ac09944</a>)</li>
</ul>
<h2>v2.0.3</h2>
<h3><a
href=""https://github.com/webpack/loader-utils/compare/v2.0.1...v2.0.3"">2.0.3</a>
(2022-10-20)</h3>
<h3>Bug Fixes</h3>
<ul>
<li><strong>security:</strong> prototype pollution exploit (<a
href=""https://github-redirect.dependabot.com/webpack/loader-utils/issues/217"">#217</a>)
(<a
href=""https://github.com/webpack/loader-utils/commit/a93cf6f4702012030f6b5ee8340d5c95ec1c7d4c"">a93cf6f</a>)</li>
</ul>
<h2>v2.0.2</h2>
<h3><a
href=""https://github.com/webpack/loader-utils/compare/v2.0.1...v2.0.2"">2.0.2</a>
(2021-11-04)</h3>
<h3>Bug Fixes</h3>
<ul>
<li>base64 generation and unicode characters (<a
href=""https://github-redirect.dependabot.com/webpack/loader-utils/issues/197"">#197</a>)
(<a
href=""https://github.com/webpack/loader-utils/commit/8c2d24ee400bc4567335e97ee6004c3baa6ef66f"">8c2d24e</a>)</li>
</ul>
<h2>v2.0.1</h2>
<h3><a
href=""https://github.com/webpack/loader-utils/compare/v2.0.0...v2.0.1"">2.0.1</a>
(2021-10-29)</h3>
<h3>Bug Fixes</h3>
<ul>
<li>md4 support on Node.js v17 (<a
href=""https://github-redirect.dependabot.com/webpack/loader-utils/issues/193"">#193</a>)
(<a
href=""https://github.com/webpack/loader-utils/commit/1069f61284a571614ee4acdde6e6087174be118a"">1069f61</a>)</li>
</ul>
</blockquote>
</details>
<details>
<summary>Changelog</summary>
<p><em>Sourced from <a
href=""https://github.com/webpack/loader-utils/blob/v2.0.4/CHANGELOG.md"">loader-utils's
changelog</a>.</em></p>
<blockquote>
<h3><a
href=""https://github.com/webpack/loader-utils/compare/v2.0.3...v2.0.4"">2.0.4</a>
(2022-11-11)</h3>
<h3>Bug Fixes</h3>
<ul>
<li>ReDoS problem (<a
href=""https://github-redirect.dependabot.com/webpack/loader-utils/issues/225"">#225</a>)
(<a
href=""https://github.com/webpack/loader-utils/commit/ac09944dfacd7c4497ef692894b09e63e09a5eeb"">ac09944</a>)</li>
</ul>
<h3><a
href=""https://github.com/webpack/loader-utils/compare/v2.0.1...v2.0.3"">2.0.3</a>
(2022-10-20)</h3>
<h3>Bug Fixes</h3>
<ul>
<li><strong>security:</strong> prototype pollution exploit (<a
href=""https://github-redirect.dependabot.com/webpack/loader-utils/issues/217"">#217</a>)
(<a
href=""https://github.com/webpack/loader-utils/commit/a93cf6f4702012030f6b5ee8340d5c95ec1c7d4c"">a93cf6f</a>)</li>
</ul>
<h3><a
href=""https://github.com/webpack/loader-utils/compare/v2.0.1...v2.0.2"">2.0.2</a>
(2021-11-04)</h3>
<h3>Bug Fixes</h3>
<ul>
<li>base64 generation and unicode characters (<a
href=""https://github-redirect.dependabot.com/webpack/loader-utils/issues/197"">#197</a>)
(<a
href=""https://github.com/webpack/loader-utils/commit/8c2d24ee400bc4567335e97ee6004c3baa6ef66f"">8c2d24e</a>)</li>
</ul>
<h3><a
href=""https://github.com/webpack/loader-utils/compare/v2.0.0...v2.0.1"">2.0.1</a>
(2021-10-29)</h3>
<h3>Bug Fixes</h3>
<ul>
<li>md4 support on Node.js v17 (<a
href=""https://github-redirect.dependabot.com/webpack/loader-utils/issues/193"">#193</a>)
(<a
href=""https://github.com/webpack/loader-utils/commit/1069f61284a571614ee4acdde6e6087174be118a"">1069f61</a>)</li>
</ul>
</blockquote>
</details>
<details>
<summary>Commits</summary>
<ul>
<li><a
href=""https://github.com/webpack/loader-utils/commit/6688b5028106f144ee9f543bebc8e6a87b57829f""><code>6688b50</code></a>
chore(release): 2.0.4</li>
<li><a
href=""https://github.com/webpack/loader-utils/commit/ac09944dfacd7c4497ef692894b09e63e09a5eeb""><code>ac09944</code></a>
fix: ReDoS problem (<a
href=""https://github-redirect.dependabot.com/webpack/loader-utils/issues/225"">#225</a>)</li>
<li><a
href=""https://github.com/webpack/loader-utils/commit/7162619fb982c394ed75098a0a0ed7e7f3177c70""><code>7162619</code></a>
chore(release): 2.0.3</li>
<li><a
href=""https://github.com/webpack/loader-utils/commit/a93cf6f4702012030f6b5ee8340d5c95ec1c7d4c""><code>a93cf6f</code></a>
fix(security): prototype polution exploit (<a
href=""https://github-redirect.dependabot.com/webpack/loader-utils/issues/217"">#217</a>)</li>
<li><a
href=""https://github.com/webpack/loader-utils/commit/90c7c4be17e3e0b2f6091a69c67db7a6df9fd044""><code>90c7c4b</code></a>
chore(release): 2.0.2</li>
<li><a
href=""https://github.com/webpack/loader-utils/commit/8c2d24ee400bc4567335e97ee6004c3baa6ef66f""><code>8c2d24e</code></a>
fix: base64 generation and unicode characters (<a
href=""https://github-redirect.dependabot.com/webpack/loader-utils/issues/197"">#197</a>)</li>
<li><a
href=""https://github.com/webpack/loader-utils/commit/5fb556208426d281a18dfbf6f45dca24bfb24e96""><code>5fb5562</code></a>
chore(release): 2.0.1</li>
<li><a
href=""https://github.com/webpack/loader-utils/commit/1069f61284a571614ee4acdde6e6087174be118a""><code>1069f61</code></a>
fix: md4 support on Node.js v17 (<a
href=""https://github-redirect.dependabot.com/webpack/loader-utils/issues/193"">#193</a>)</li>
<li>See full diff in <a
href=""https://github.com/webpack/loader-utils/compare/v2.0.0...v2.0.4"">compare
view</a></li>
</ul>
</details>
<br />


[![Dependabot compatibility
score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=loader-utils&package-manager=npm_and_yarn&previous-version=2.0.0&new-version=2.0.4)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)

Dependabot will resolve any conflicts with this PR as long as you don't
alter it yourself. You can also trigger a rebase manually by commenting
`@dependabot rebase`.

[//]: # (dependabot-automerge-start)
[//]: # (dependabot-automerge-end)

---

<details>
<summary>Dependabot commands and options</summary>
<br />

You can trigger Dependabot actions by commenting on this PR:
- `@dependabot rebase` will rebase this PR
- `@dependabot recreate` will recreate this PR, overwriting any edits
that have been made to it
- `@dependabot merge` will merge this PR after your CI passes on it
- `@dependabot squash and merge` will squash and merge this PR after
your CI passes on it
- `@dependabot cancel merge` will cancel a previously requested merge
and block automerging
- `@dependabot reopen` will reopen this PR if it is closed
- `@dependabot close` will close this PR and stop Dependabot recreating
it. You can achieve the same result by closing it manually
- `@dependabot ignore this major version` will close this PR and stop
Dependabot creating any more for this major version (unless you reopen
the PR or upgrade to it yourself)
- `@dependabot ignore this minor version` will close this PR and stop
Dependabot creating any more for this minor version (unless you reopen
the PR or upgrade to it yourself)
- `@dependabot ignore this dependency` will close this PR and stop
Dependabot creating any more for this dependency (unless you reopen the
PR or upgrade to it yourself)
- `@dependabot use these labels` will set the current labels as the
default for future PRs for this repo and language
- `@dependabot use these reviewers` will set the current reviewers as
the default for future PRs for this repo and language
- `@dependabot use these assignees` will set the current assignees as
the default for future PRs for this repo and language
- `@dependabot use this milestone` will set the current milestone as the
default for future PRs for this repo and language

You can disable automated security fix PRs for this repo from the
[Security Alerts
page](https://github.com/facebook/react/network/alerts).

</details>

Signed-off-by: dependabot[bot] <support@github.com>
Co-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>",dependabot[bot],2022-11-16T18:16:39Z
c343f80254306e7ea4343a614c678bb03c4be9fd,"[react-float] feature detect getRootNode (#25689)

Some old environments like IE11 or very old versions of jsdom are
missing `getRootNode()`. Use feature detection to fall back to
`ownerDocuments` in these environments that also won't be supporting
shadow DOM anyway.",Jan Kassens,2022-11-16T18:12:04Z
9058797e6a5a5a30a53676db3fc7f1e7e6f10a40,"Add test262 github action 

Add a new workflow to run the test262 tests on commits to main but not in pull 
requests. This is to keep this test non-blocking on PRs but lets us track pass 
rates over time",Lauren Tan,2022-11-16T15:45:36Z
e1dd0a2f54f2a3699edd0eb1aceae83ab63839d1,"Remove recoverable error when a sync update flows into a dehydrated boundary (#25692)

This just removes the error but the underlying issue is still there, and
it's likely that the best course of action is to not update in effects
and to wrap most updates in startTransition. However, that's more of a
performance concern which is not something we generally do even in
recoverable errors since they're less actionable and likely belong in
another channel. It is also likely that in many cases this happens so
rarely because you have to interact quickly enough that it can often be
ignored.

After changes to other parts of the model, this only happens for
sync/discrete updates. There are three scenarios that can happen:
- We replace a server rendered fallback with a client rendered fallback.
Other than this potentially causing some flickering in the loading
state, it's not a big deal.
- We replace the server rendered content with a client side fallback if
this suspends on the client. This is in line with what would happen
anyway. We will loose state of forms which is not intended semantics.
State and animations etc would've been lost anyway if it was client-side
so that's not a concern.
- We replace the server rendered content with a client side rendered
tree and lose selection/state and form state. While the content looks
the same, which is unfortunate.

In most scenarios it's a bad loading state but it's the same scenario as
flushing sync client-side. So it's not so bad.

The big change here is that we consider this a bug of React that we
should fix. Therefore it's not actionable to users today because it
should just get fixed. So we're removing the error early. Although
anyone that has fixed these issues already are probably better off for
it.

To fix this while still hydrating we need to be able to rewind a sync
tree and then replay it.

@tyao1 is going to add a Sync hydration lane. This is will allow us to
rewind the tree when we hit this state, and replay it given the previous
Context, hydrate and then reapply the update. The reason we didn't do
this originally is because it causes sync mode to unwind where as for
backwards compatibility we didn't want to cause that breaking semantic -
outside Suspense boundaries - and we don't want that semantic longer
term. We're only do this as a short term fix.

We should also have a way to leave a partial tree in place. If the sync
hydration lane suspends, we should be able to switch to a client side
fallback without throwing away the state of the DOM and then hydrate
later.

We now know how we want to fix this longer term. We're going to move all
Contexts into resumable trees like what Fizz/Flight does. That way we
can leave the original Context at the hydration boundaries and then
resume from there. That way the rewinding would never happen even in the
existence of a sync hydration lane which would only apply locally to the
dehydrated tree.

So the steps are 1) remove the error 2) add the sync hydration lane with
rewinding 3) Allow hiding server-rendered content while still not
hydrated 4) add resumable contexts at these boundaries.

Fixes #25625 and #24959.",Sebastian Markbåge,2022-11-16T03:10:54Z
4a21bb8856097a21532406a4a2a5689763da2e29,"Infer sets of variables in each reactive scope 

Adds a new pass `InferReactiveScopeVariables` which determines the sets of 
variables (by Identifier) which ""construct together"" and belong in the same 
reactive scope. Concretely, `Identifier` gets a new property `scope: ScopeId`, 
and this pass assigns each identifier a ScopeId value. The algorithm iterates 
over all instructions in all blocks (in a single pass) and builds up disjoint 
sets of identifiers that appear as mutable operands in the same instruction. 

The algorithm is relatively simple (especially since I had already implemented a 
union-find data structure): however looking at some examples reinforced that 
other planned todos around alias analysis are really important. We also have to 
think more about what ""mutable lifetime"" means in the context of SSA: currently 
variables that are reassigned (but never ""mutated"", eg bc they're assigned a 
value type) never appear as mutable.",Joe Savona,2022-11-15T22:26:18Z
e6956bd4d8aa268331e7ad9b9c72a7d69b1ffe11,"[ez] Remove test262-all script 

Just realized we can run all tests without encountering the arg limit if a 
string is passed in. 

This is much better because the test runner will count all tests in the parent 
test directory rather than run the tests in each subdirectory",Lauren Tan,2022-11-15T22:01:28Z
dff31d80eb1ad6fdf6acfa56d9d705ffb8a3469e,"[ez] Don't output the command when running test262 

Currently yarn prints out the command prior to executing it which makes test 
output for test262 very verbose",Lauren Tan,2022-11-15T19:06:49Z
ec64edae213019f8fd0ecc58dace3e439e0a635a,"Create identifier for any global or unscoped variable 

Noticed this while running test262 tests that many variables were throwing an 
invariant for being undefined. This includes things like the special `arguments` 
object, a global `assert` function used by test262, etc.",Lauren Tan,2022-11-15T18:32:53Z
9027117c4f06ee657384b9d4eb8bc8178c9b1e28,"Scaffolding for test262 

- Adds a shallow git submodule for test262 as the tests aren't available   as an 
npm module - To run all tests: `yarn test262:all`. Note that this chunks up the  
 tests by test262 folder as there are over 50k+ tests and the test harness only 
accepts arrays of filepaths which exceeds arg limits - To run a specific test: 
`yarn test262 test262/test/folder/file.js`.   You can also pass globs which 
expand into an array of filepaths: `yarn test262 test262/test/folder/**/*.js` - 
More instructions for the test-harness can be found here: 
https://github.com/bterlson/test262-harness",Lauren Tan,2022-11-15T18:24:14Z
e149413057b911ea82597251ccb3b023c0d3ac81,"Distinguish identifier id and ssa id 

I noticed on @kassens's #771 that despite running LeaveSSA there are still cases 
where we still reassign to a unique identifier: functions that have reassignment 
but no phi nodes, such as: 

```javascript 

function foo() { 

let x$1 = 0; 

x$2 = x$1 + 1; 

} 

``` 

Here SSA form rewrote the second statement's LHS, but bc there's no phi node we 
can't recover what the original was supposed to be (`x = x + 1`). This was my 
oversight when suggesting the simpler LeaveSSA algorithm, it works for 
eliminating phis but not other reassignments. The only alternative to removing 
SSA form is to add assignment statements, which we obviously don't want to do 
since that generates bloat. 

This PR addresses the issue by adding an additional, optional property to 
`Identifier` called `preSsaId` that starts off null. When entering SSA we save 
the original id in this property and update id to a new SSA value. LeaveSSA does 
the inverse, setting id = preSsaId and nulling out the latter. This means that 
an identifier can always be uniquely identified by its `id` value at any point 
in the compiler, while it's trivial to correctly undo SSA form. 

```typescript 

type Identifier = { 

// Unique value for each original identifier 

id: IdentifierId; 

// The original, un-mangled variable name if this was a variable present in the 
source (null if it's generated) 

name: string | null; 

// When in SSA mode, this is set to the original, pre-SSA `id` value 

preSsaId: IdentifierId | null; 

} 

```",Joseph Savona,2022-11-15T18:36:54Z
5f40a1bf751459341b61de757a4eee203eb04172,[bug] fix codegen for LVals with memberPath (#772),Jan Kassens,2022-11-14T16:35:47Z
99181160d56ac573b7dc5cfb7291dfb3634c94db,"[hir] implement assignment expressions 

Implements assignment expressions with operators other than `=` (such as `+=`) 
by lowering to an assignment. 

I think this isn't fully correct for something like `a.b.c += 1`, but it seems 
like there's more gaps in object accesses.",Jan Kassens,2022-11-14T15:58:55Z
0c5fc52c479fd47526997ec1d0bcff23ff623c6f,"Refactor VisualizeHIRMermaid 

- Get rid of `indent` as it was making the code hard to read - Remove 
unnecessary 2nd iteration over blocks - Remove extra newline between the bb 
subgraphs and the jumps section - Remove trailing spaces - Remove newlines 
between each subgraph and jump",Lauren Tan,2022-11-13T21:07:53Z
d9724c7e006fecfdd0eec955b98148ecdfad214e,"[playground] option to codegen output in HIR tab 

We might need to revisit the tabs vs. options split, but for now this just adds 
a checkbox toggle that outputs codegenned JS instead of HIR in the HIR tab. Open 
to ideas to organize this in the future...",Jan Kassens,2022-11-13T16:00:29Z
c54e3541b2fb6251bd7cd399e77037220b47de2e,"[DevTools] bug fix for Hydrating fibers (#25663)

## Summary

This PR is to fix a bug: an ""element cannot be found"" error when
hydrating Server Components

### The problem
<img width=""1061"" alt=""image""
src=""https://user-images.githubusercontent.com/1001890/201206046-ac32a5e3-b08a-4dc2-99f4-221dad504b28.png"">

To reproduce:
1. setting up a vercel next.js 13 playground locally
https://github.com/vercel/app-playground
2. visit http://localhost:3000/loading
3. click ""electronics"" button to navigate to
http://localhost:3000/loading/electronics to trigger hydrating
4. inspect one of the skeleton card UI from React DevTools extension

### The root cause & fix
This bug was introduced in #22527. When syncing reconciler changes, the
value of `Hydrating` was copied from another variable `Visibility` (one
more zero in the binary number).
To avoid this kind of issue in the future, a new file `ReactFiberFlags`
is created following the same format of the one in reconciler, so that
it's easier to sync the number without making mistakes.
The reconciler fiber flag file is also updated to reflect which of the
flags are used in devtools

## How did you test this change?

I build it locally and the bug no longer exist on
http://localhost:3000/loading",Mengdi Chen,2022-11-11T20:18:06Z
16430247a4a61e0715b3ae869c181190b7b84f95,[playground] remove unused dependency next-transpile-modules (#768),Jan Kassens,2022-11-11T17:27:28Z
3fd88b7f6fb6afac38edbc397b76340b4b67caa5,[playground] fixup for TS error,Jan Kassens,2022-11-11T17:18:18Z
b9ffb594781167ad4fa9c95e7b58d354e0673845,[playground] remove multi-file support and preview (#767),Jan Kassens,2022-11-11T17:11:08Z
3b3107fb3e335d39287589a37b68495d47862cf3,"Add Mermaid visualizations for CFG into fixtures 

This PR adds a new section to fixture tests, which renders the HIR into 

a visualization using mermaid.js syntax which can then be embedded 

directly into markdown. 

The nice thing about the mermaid syntax is that it's quite readable, so 

if desired we could replace the current basic block textual output with 

the mermaid block. I'm opting to append it for now and wait for feedback 

if we want to keep both or replace. 

To view the graphs in your editor, download an extension that 

adds mermaid.js support: 
https://mermaid-js.github.io/mermaid/#/integrations?id=editor-plugins. In vscode 
you can use this plugin by right clicking on ""Open Preview"" on any expect.md 
file. No extra dependencies are required for GitHub which should have builtin 
support for mermaid in markdown",Lauren Tan,2022-11-10T22:09:28Z
779947520d0aa8fd75deb0f1440f61004299f5cd,"[playground] new HIR tab 

Instead of hacking into the babel plugin passes, this now takes a new approach 
for the HIR tab: 

- The different passes are exported from the babel plugin (for simplicity) 

- The tab actually runs the compiler steps based on local config in the tab. 

- Re-purposed the CompilerFlags component to configure what passes to run. This 
is currently mostly causing different errors, but could be useful going forward 
as a direction.",Jan Kassens,2022-11-10T20:45:51Z
5e86e6a9c8f07779b43065e65a5187a23811e860,"[playground] refactor output tabs 

Removes a bit of indirection and opens the way to more easily customize specific 
tabs.",Jan Kassens,2022-11-10T19:32:40Z
21b6112238bbb25e1d56dbe71f9121e7444a8eec,"Fix `yarn dev` to run tsc watch mode 

The `--watch` argument forwarding wasn't working anymore because `yarn build` 
doesn't have the `tsc` command at the end anymore. There's maybe something that 
can be done to forward the watch argument, just call `tsc --watch` directly.",Jan Kassens,2022-11-10T16:30:45Z
d1e35c70398a3341d2e090d09a0863c7fe6c3325,"Don't disappear layout effects unnecessarily (#25660)

Nested Offscreens can run into a case where outer Offscreen is revealed
while inner one is hidden in a single commit. This is an edge case that
was previously missed. We need to prevent call to disappear layout
effects.

When we go from state:
```jsx
<Offscreen mode={'hidden'}> // outer offscreen
  <Offscreen mode={'visible'}> // inner offscreen
    {children}
  </Offscreen>
</Offscreen>
```

To following. Notice that visibility of each offscreen flips.

```jsx
<Offscreen mode={'visible'}> // outer offscreen
  <Offscreen mode={'hidden'}> // inner offscreen
    {children}
  </Offscreen>
</Offscreen>
```

Inner offscreen must not call
`recursivelyTraverseDisappearLayoutEffects`.
Check unit tests for an example of this.",Samuel Susla,2022-11-10T14:49:30Z
f57bcacced0cd532cfd94dea00cf9d50023e86a4,"fix for while (...) { break } edge case 

Small adjustment to the previous PR for a special case: 

```javascript 

while (cond) { 

break; 

} 

``` 

The loop body is an indirection to the fallthrough, so shrink() collapses that 
and makes the while.loop === while.fallthrough. We now detect that this is the 
case in codegen and correctly emit a `break` rather than trying to write the 
fallthrough block inside the loop.",Joe Savona,2022-11-10T04:52:08Z
656b8c9a0ed2dc2d99d07f9a4a878c35f9a0d09c,"While terminal and codegen 

Adds a new 'while' terminal variant, which will be a model for other loop 
terminals, and adds support for the entire compilation pipeline through codegen. 
To understand the structure of the terminal consider this input: 

```javascript 

let x = 0; 

while (x) { 

x = foo(x); 

} 

return x; 

``` 

We currently lower this to ifs and gotos: 

``` 

bb0: precursor to loop 

let x = 0; 

goto(break) bb1; // <-- **The new terminal replaces this** 

bb1: test block, whether to (re-)enter the loop 

if (x) consequent=bb2 alternate=bb3; 

bb2: loop body 

x = foo(x); 

goto(continue) bb1; 

bb3: fallthrough after the loop 

return x 

``` 

This representation correctly models the semantics of while statements, but 
loses the high-level information that there was a loop. The new 'while' terminal 
replaces the first 'goto(break) bb1'. Conceptually, the 'while' terminal means 
""enter the starting point of a while loop"". In this example the terminal would 
look like this: 

``` 

{ 

kind: 'while', 

testBlock: 'bb1', // the basic block that checks whether to enter the loop or 
not 

loop: 'bb2', // the block containing the loop body 

fallthrough: 'bb3' // the block that goes after the loop 

} 

``` 

Most passes will only look at 'testBlock', ie they will treat this terminal as a 
simple goto:testBlock. However, codegen uses the full information in the 
terminal to reconstruct the loop. My previous PR, #755, added a mechanism to be 
smart about when to emit or not emit `break` statements; this PR improves upon 
that to accurately emit the minimal break and continue statements: ie omitting 
entirely where they are extraneous, emitting unlabeled break/continue when 
sufficient, and falling back to labeled break/continue only where strictly 
necessary. The logic is very much analogous to IR construction.",Joe Savona,2022-11-10T00:39:50Z
90aa627c6b563a79b56737bb0c3c0a7970483074,Add LeaveSSA pass to DumpHIRPass,Lauren Tan,2022-11-09T22:31:00Z
e64ef9e1e04f333f0a820cd698ff039a11efd959,"Extract eachBlockOperand to its own visitor 

Follow up for #757: 

- Adds a new visitor which iterates over every Place within a BasicBlock - 
Remove unused entryBlock binding - Comments",Lauren Tan,2022-11-09T21:37:14Z
74e6ffc4a2e0a99bd6e2cdbc9a05c4d481c58dd0,"Leave SSA form 

Alternative approach to #750. We now store the original identifier on the Phi 
node, then rewrite every BasicBlock's identifiers to reference the original id 
instead of the SSA'd id. 

This solves the shadowing problem and also lets us omit adding copies of 
instructions.",Lauren Tan,2022-11-09T20:12:04Z
ea1a18ec169f459bc5b389c35af197db268cbe31,"Emit labeled ifs/switch/break; gen each block exactly once 

The approach is very similar to what BuildHIR does to resolve break and continue 
targets during IR construction: 

* We annotate goto targets as either a break or a continue (during HIR 
construction). This is necessary to reconstruct the right kind in codegen. 

* Codegen continues to work by traversing the IR as if it were a tree, relying 
on the `fallthrough` branches of if/switch to be able to visit the 
consequent/alternate recursively and then emit the fallthrough branch. 

* We track a Set of blocks that are scheduled to be emitted by some parent in 
the tree. Nested ifs may all have the same fallthrough branch, which we only 
want to emit once. This set helps us to know that a parent is already going to 
emit some block, such that children can skip it. 

* We also keep a stack of break targets that are in scope, and use this to 
convert gotos appropriately, as either a break, continue, or nothing at all (for 
example a switch case that falls through has no explicit syntax to model this 
fall-through, the only option is to emit nothing for the goto). 

* Then, if/switch have to carefully check whether each branch should be emitted 
or not. For example, if the alternate is already scheduled to be emitted (by a 
parent), then we emit a block with a break statement instead. 

* Switch in particular is tricky, because we need to know that subsequent cases 
are scheduled, but only for preceding blocks. So we visit the cases in reverse 
order (not surprisingly, we do the same thing during IR construction for similar 
reasons!). 

The bookkeeping is a bit finicky but this works reliably. There are some cases 
where we could try to emit an unlabeled break instead of a labeled break, or 
avoid emitting a label at all (if nothing will explicitly break to that label), 
but overall the generated code is readable enough that i'm inclined to ship and 
iterate. I'm open to feedback though, as always!",Joe Savona,2022-11-09T05:14:10Z
22d1481125f948b051de7a0e4a2f105b2ba7e089,Add and use mapInstructionOperands(),Joe Savona,2022-11-08T22:46:03Z
afabaa0af3fd636a0740e573daf929b8422d98c6,Add and use mapTerminalOperands(),Joe Savona,2022-11-08T22:45:59Z
2a049044bbd0ed76ccc88f6c9d34783158b444b3,Add and use eachTerminalSuccessor(),Joe Savona,2022-11-08T22:45:56Z
e665f6b877ec5f6ce29ccac50c25ab30e9ad1165,Cleanup in advance of reworking codegen,Joe Savona,2022-11-08T22:45:53Z
e336ea44ed14fa20568b4c9fd63e4667437e6e85,[playground] include HIR output (#756),Jan Kassens,2022-11-09T18:39:50Z
1e3e30dae2bcfbeb0abc686f2a37aec208eedb39,"Fix useSyncExternalStore dropped update when state is dispatched in render phase (#25578)

Fix https://github.com/facebook/react/issues/25565",Aurélien Chivot-Buhler,2022-11-08T10:25:42Z
f8f4dc4b8b044b9e6ceaa106e5a7667c2fdd308d,"s/SSAify/Enter SSA/ 

Rename this existing pass to make more sense with the next PR",Lauren Tan,2022-11-07T23:34:45Z
5bd3a39d86dc0fe52548b9d4d98416eb17b5ceeb,Implement HIR visitors (#747),Jan Kassens,2022-11-08T14:55:35Z
7c094af34e01e7e5cd0af668107cfff49811f624,"[HIR] fix missing read reference to switch test value 

Unless I'm mistaken, the switch operand is missing here.",Jan Kassens,2022-11-07T21:38:58Z
18dff7990a81b3ff1e716dd2cf113c6027bdcc06,"[DevTools] add support for HostSingleton & HostResource (#25616)

## Summary

This is to support two new reconciler work tags `HostSingleton` and
`HostResource` introduced in PRs #25243 #25426. The behavior is
described below.
I also renamed an option in components settings from an internal concept
""host"" to more understood ""dom nodes""

## How did you test this change?

Tested on the latest Vercel playground app
https://github.com/vercel/app-playground/

Before the change, devtools cannot show correct display name for these
new elements. Also, some unnecessary internal details are exposed to
users.
<img width=""1395"" alt=""image""
src=""https://user-images.githubusercontent.com/1001890/199578181-c4e4ea74-baa1-4507-83d0-91a62ad7de5f.png"">

After the change, the display names are correctly shown and the ""state""
would always be hidden in the detail view.
<img width=""1417"" alt=""image""
src=""https://user-images.githubusercontent.com/1001890/199578442-adc1951d-7d5b-4b84-ad64-85bcf7a8ebcc.png"">

These elements will also be hidden just like other native dom elements
(e.g. `<div>`)
<img width=""836"" alt=""image""
src=""https://user-images.githubusercontent.com/1001890/199578598-2dfacf64-ddc9-42b5-a246-dd0b09f629af.png"">",Mengdi Chen,2022-11-07T20:23:17Z
5d81fdeb5f1ae606d34d7a5b594a21c293912159,"[easy] use yield* in eachInstructionOperand 

Noticed we could simplify this code a bit using `yield*`.",Jan Kassens,2022-11-07T20:10:49Z
69cce3d51f067d6bf1b4a539ca130eafd3c52517,"[hir][be] Move collectInputs to HIRBuilder 

This seems like a better place to put helper methods.",Sathya Gunasekaran,2022-11-07T18:45:29Z
4d9022a17ce369067660319168d8357c0648f6c0,"Remove early SSA phi optimzation 

Reverts #726 which added an early optimization to the SSAify pass in skipping 
over phi creation if only one unique operand. This is no longer necessary with 
the addition of a phi elimination pass added in #739.",Lauren Tan,2022-11-07T17:25:50Z
3a200fa4a1911eb2eee8f5bbfdedfb478462a4ab,"Pass to eliminate redundant phis 

This is an alternate take on phi elimination to the one we pursued over VC w 
@poteto driving. This version exploits the RPO ordering of blocks to do phi 
elimination in a single pass when there are no loops, and to minimize repeated 
visits when there are loops. The main difference is when redundant phis are 
removed. Rather than eagerly walking through the CFG for each pruned phi to 
rewrite its uses, we build up a mapping of rewritten identifiers. As we walk 
through subsequent instructions, we rewrite each place based on that mapping. We 
continue cycling through the blocks so long as a given iteration *both* added 
new rewrites (meaning there may be subsequent uses to rewrite) *and* there are 
back-edges. With no loops this results in a single visit of each block and of 
each instruction, but even with loops this is bounded.",Joseph Savona,2022-11-07T16:37:19Z
4bd245e9ee22458bcd5b68524c47eaaab2cf2058,"Do not unmount layout effects if ancestor Offscreen is hidden (#25628)

This is a follow up on https://github.com/facebook/react/pull/25592

There is another condition Offscreen calls
`recursivelyTraverseDisappearLayoutEffects` when it shouldn't. Offscreen
may be nested. When nested Offscreen is hidden, it should only unmount
layout effects if it meets following conditions:
1. This is an update, not first mount.
2. This Offscreen was hidden before.
3. No ancestor Offscreen is hidden.

Previously, we were not accounting for the third condition.",Samuel Susla,2022-11-04T13:31:07Z
df61e708c82134133e002f8559c19d4897204b54,"Remove check in renderDidSuspendDelayIfPossible (#25630)

I don't think we need this anymore. It was added originally because
RootSuspended would take priority over RootSuspendedWithDelay. But we've
since changed it: any ""bad"" fallback state is permitted to block a
""good"" fallback state.

The other status flags that this check used to account for are
RootDidNotComplete and RootFatalErrored:

- RootFatalErrored is like an invariant violation, it means something
went really wrong already and we can't recover from it
- RootCompleted and RootDidNotComplete are only set at the very end of
the work loop, there's no way for renderDidSuspendDelayIfPossible to
sneak in after that (at least none that I can think of — it's only
called from the render phase)

So I think we can just delete this.

It's entirely possible there's some scenario I haven't considered,
though, which is why I'm submitting this change as its own PR. To
preserve the ability to bisect to it later.",Andrew Clark,2022-11-03T20:15:55Z
1a08f1478d965693611087393fc7271bf1e7e8f9,"[ServerRenderer] Move fizz external runtime implementation to react-dom-bindings (#25617)

<!--
  Thanks for submitting a pull request!
We appreciate you spending the time to work on these changes. Please
provide enough information so that others can review your pull request.
The three fields below are mandatory.

Before submitting a pull request, please make sure the following is
done:

1. Fork [the repository](https://github.com/facebook/react) and create
your branch from `main`.
  2. Run `yarn` in the repository root.
3. If you've fixed a bug or added code that should be tested, add tests!
4. Ensure the test suite passes (`yarn test`). Tip: `yarn test --watch
TestName` is helpful in development.
5. Run `yarn test --prod` to test in the production environment. It
supports the same options as `yarn test`.
6. If you need a debugger, run `yarn debug-test --watch TestName`, open
`chrome://inspect`, and press ""Inspect"".
7. Format your code with
[prettier](https://github.com/prettier/prettier) (`yarn prettier`).
8. Make sure your code lints (`yarn lint`). Tip: `yarn linc` to only
check changed files.
  9. Run the [Flow](https://flowtype.org/) type checks (`yarn flow`).
  10. If you haven't already, complete the CLA.

Learn more about contributing:
https://reactjs.org/docs/how-to-contribute.html
-->

Following
[comment](https://github.com/facebook/react/pull/25437#discussion_r1010944983)
in #25437 , the external runtime implementation should be moved from
`react-dom` to `react-dom-bindings`.

I did have a question here:
I set the entrypoint to `react-dom/unstable_server-external-runtime.js`,
since a.) I was following #25436 as an example and b.)
`react-dom-bindings` was missing a `README.md` and `npm/`. This also
involved adding the external runtime to `package.json`.
However, the external runtime isn't really a `react-dom` entrypoint. Is
this change alright, or should I change the bundling code instead?
## How did you test this change?

<!--
Demonstrate the code is solid. Example: The exact commands you ran and
their output, screenshots / videos if the pull request changes the user
interface.
How exactly did you verify that your PR solves the issue you wanted to
solve?
  If you leave this empty, your PR will very likely be closed.
-->",mofeiZ,2022-11-03T15:15:29Z
1a902623a84ab004f9f042162bdcbce20f08b13f,"Unwrap sync resolved thenables without suspending  (#25615)

If a thenable resolves synchronously, `use` should unwrap its result
without suspending or interrupting the component's execution.",Andrew Clark,2022-11-02T17:53:23Z
4ea063b56ff7ccc69c4cc67c30fd6f31f9880464,"refactor isHostResourceType to not receive the context from reconciler and not leak types (#25610)

type validateDOMNesting
move `isHostResourceType` to ReactDOMHostConfig
type `AncestorInfo`
refactor `resourceFormOnly` into `ancestorInfo.containerTagInScope`
provide hostContext from reconciler",Josh Story,2022-11-02T00:14:46Z
8e69bc45aa2edf9fba0f5a26f1db6a4a1f87d70f,"Make host context use null as empty and only error in dev (#25609)

Makes it slightly more blazing.

No host config actually uses null as any useful and we use this as a
placeholder value anyway. It's also better for perf since it doesn't let
two different hidden classes pass around. It's also a magic place holder
that triggers error if we do try to access anything from it.",Sebastian Markbåge,2022-11-01T23:02:37Z
5f7ef8c4cbe824ef126a947b7ae0e1c07b143357,"[Float] handle resource Resource creation inside svg context (#25599)

`title` is a valid element descendent of `svg`. this PR adds a
prohibition on turning titles in svg into Resources.

This PR also adds additional warnings if you render something that is
almost a Resource inside an svg.",Josh Story,2022-11-01T21:57:45Z
36426e6cb6b6998cba934d239ba6274c9119118c,"Allow uncached IO to stablize (#25561)

Initial draft. I need to test this more.

If a promise is passed to `use`, but the I/O isn't cached, we should
still be able to unwrap it.

This already worked in Server Components, and during SSR.

For Fiber (in the browser), before this fix the state would get lost
between attempts unless the promise resolved immediately in a microtask,
which requires IO to be cached. This was due to an implementation quirk
of Fiber where the state is reset as soon as the stack unwinds. The
workaround is to suspend the entire Fiber work loop until the promise
resolves.

The Server Components and SSR runtimes don't require a workaround: they
can maintain multiple parallel child tasks and reuse the state
indefinitely across attempts. That's ideally how Fiber should work, too,
but it will require larger refactor.

The downside of our approach in Fiber is that it won't ""warm up"" the
siblings while you're suspended, but to avoid waterfalls you're supposed
to hoist data fetches higher in the tree regardless. But we have other
ideas for how we can add this back in the future. (Though again, this
doesn't affect Server Components, which already have the ideal
behavior.)",Andrew Clark,2022-11-01T19:00:34Z
6883d79445f38e2cdabf6fe1fa04cb44c2644c1c,[ServerRenderer] Setup for adding data attributes streaming format (#25567),mofeiZ,2022-11-01T16:04:50Z
ab075a232409ea1f566526c6a5dca30f658280de,"Do not unmount layout effects on initial Offscreen mount (#25592)

`wasHidden` is evaluted to false if `current` is null. This means
Offscreen has never been shown but this code assumes it is going from
'visible' to 'hidden' and unmounts layout effects.
To fix this, only unmount layout effects if `current` is not null.

I'm not able to repro this problem or write unit test for it. I see this
crash bug in production test.
The problem with repro is that if Offscreen starts as hidden, it's
render is deferred and current is no longer null.",Samuel Susla,2022-11-01T15:11:28Z
765805bf88f7e4ac8db7b0a587bd82c7ac404220,Fix type check for null (#25595),Sebastian Markbåge,2022-10-31T21:29:01Z
2ac77aab94d125942d71e9113d70253eaaef698f,"Clean up vestige of useOpaqueIdentifier (#25587)

Found some code that was left over from the experimental
useOpaqueIdentifier hook, which we eventually replaced with useId.

This deletes it.",Andrew Clark,2022-10-30T00:46:54Z
bdd3d0807c6e9f417909bab93ffe9795128b04d8,"Extract logic for detecting bad fallback to helper

Pure refactor, no change in behavior.

Extracts the logic for detecting whether a suspended component will
result in a ""bad"" Suspense fallback into a helper function. An example
of a bad Suspense fallback is one that causes already-visible content
to disappear.

I want to reuse this same logic in the work loop, too.",Andrew Clark,2022-10-24T17:47:29Z
952dfff3f1b1ef4644ba99a778dda787fa6d9b18,"Split suspended work loop logic into separate functions

Refactors the logic for handling when the work loop is suspended into
separate functions for replaying versus unwinding. This allows us to
hoist certain checks into the caller.

For example, when rendering due to flushSync, we will always unwind the
stack without yielding the microtasks.

No intentional behavior change in this commit.",Andrew Clark,2022-10-24T20:23:27Z
d2c0ab10de957ba1758dad6405c824d251990ea4,"In work loop, add enum of reasons for suspending

This is a pure refactor, no change to behavior.

When a component throws, the work loop can handle that in one of several
ways — unwind immediately, wait for microtasks, and so on. I'm about
to add another one, too. So I've changed the variable that tracks
whether the work loop is suspended from a boolean
(workInProgressIsSuspended) to an enum (workInProgressSuspendedReason).",Andrew Clark,2022-10-24T17:13:26Z
5450dd409863b31fa7ef4dfcf8aeb06ac16c4c10,"Strict Mode: Reuse memoized result from first pass (#25583)

In Strict Mode, during development, user functions are double invoked to
help detect side effects. Currently, the way we implement this is to
completely discard the first pass and start over. Theoretically this
should be fine because components are idempotent. However, it's a bit
tricky to get right because our implementation (i.e. `renderWithHooks`)
is not completely idempotent with respect to internal data structures,
like the work-in-progress fiber. In the past we've had to be really
careful to avoid subtle bugs — for example, during the initial mount,
`setState` functions are bound to the particular hook instances that
were created during that render. If we compute new hook instances, we
must also compute new children, and they must correspond to each other.

This commit addresses a similar issue that came up related to `use`:
when something suspends, `use` reuses the promise that was passed during
the first attempt. This is itself a form of memoization. We need to be
able to memoize the reactive inputs to the `use` call using a hook (i.e.
`useMemo`), which means, the reactive inputs to `use` must come from the
same component invocation as the output.

The solution I've chosen is, rather than double invoke the entire
`renderWithHook` function, we should double invoke each individual user
function. It's a bit confusing but here's how it works:

We will invoke the entire component function twice. However, during the
second invocation of the component, the hook state from the first
invocation will be reused. That means things like `useMemo` functions
won't run again, because the deps will match and the memoized result
will be reused.

We want memoized functions to run twice, too, so account for this, user
functions are double invoked during the *first* invocation of the
component function, and are *not* double invoked during the second
incovation:

- First execution of component function: user functions are double
invoked
- Second execution of component function (in Strict Mode, during
development): user functions are not double invoked.

It's hard to explain verbally but much clearer when you run the test
cases I've added.",Andrew Clark,2022-10-28T21:46:20Z
d2a0176a13c95bd4a48cb355592db1b9105bd5d8,"Detect and warn if use(promise) is wrapped with try/catch block (#25543)

The old (unstable) mechanism for suspending was to throw a promise. The
purpose of throwing is to interrupt the component's execution, and also
to signal to React that the interruption was caused by Suspense as
opposed to some other error.

A flaw is that throwing is meant to be an implementation detail — if
code in userspace catches the promise, it can lead to unexpected
behavior.

With `use`, userspace code does not throw promises directly, but `use`
itself still needs to throw something to interrupt the component and
unwind the stack.

The solution is to throw an internal error. In development, we can
detect whether the error was caught by a userspace try/catch block and
log a warning — though it's not foolproof, since a clever user could
catch the object and rethrow it later.

The error message includes advice to move `use` outside of the try/catch
block.

I did not yet implement the warning in Flight.",Andrew Clark,2022-10-28T21:46:03Z
cf3932be5ca95bf5507a9566e4a9605bce0c5e21,"Remove old react-fetch, react-fs and react-pg libraries (#25577)

To avoid confusion. We are patching `fetch`, and only `fetch`, for a
small fix scoped to react renders elsewhere, but this code is not it.

This code was for the strategy used in the original [React Server
Components demo](https://github.com/reactjs/server-components-demo).
Which [we
announced](https://reactjs.org/blog/2022/06/15/react-labs-what-we-have-been-working-on-june-2022.html)
that we're moving away from in favor of [First class support for
promises and async/await](https://github.com/reactjs/rfcs/pull/229).

We might explore using these package for other instrumentation in the
future but not now and not like this.",Sebastian Markbåge,2022-10-27T21:52:53Z
28a574ea8f5d0efa95f861abca26a67af47dd0c0,"Try assigning fetch to globalThis if global assignment fails (#25571)

In case it's a more modern yet rigid environment.",Sebastian Markbåge,2022-10-27T06:43:17Z
09def5990b01d04433f852c9e6bc41039be052d9,"[Float] handle noscript context for Resources (#25559)

stacked on https://github.com/facebook/react/pull/25569

On the client noscript already never renders children so no resources
will be extracted from this context. On the server we now track if we
are in a noscript context and turn off Resource semantics in this scope",Josh Story,2022-10-27T06:11:31Z
17204056d5ec0a53a74979321c519137d215cf64,"[Float] fix coordination of resource identity and hydration (#25569)

there are a few bugs where dom representations from SSR aren't
identified as Resources when they should be.

There are 3 semantics

Resource -> hoist to head, deduping, etc...
hydratable Component -> SSR'd and hydrated in place
non-hydratable Component -> never SSR'd, never hydrated, always inserted
on the client

this last category is small
(non stylesheet) links with onLoad and/or onError
async scripts with onLoad and/or onError

The reason we have this distinction for now is we need every SSR'd async
script to be assumable to be a Resource. we don't currently encode
onLoad on the server and so we couldn't otherwise tell if an async
script is a Resource or is an async script with an onLoad which would
not be a resource. To avoid this ambiguity we never emit the scripts in
SSR and assume they need to be inserted on the client.

We can explore changes to these semantics in the future or possibly
encode some identifier when we want to opt out of resource semantics but
still SSR the link or script.",Josh Story,2022-10-27T02:53:29Z
fecc288b7dce182fbc3056b3f98a445a95fb1e68,"[react devtools] Device storage support (#25452)

# Summary
* This PR adds support for persisting certain settings to device
storage, allowing e.g. RN apps to properly patch the console when
restarted.
* The device storage APIs have signature `getConsolePatchSettings()` and
`setConsolePatchSettings(string)`, in iOS, are thin wrappers around the
`Library/Settings` turbomodule, and wrap a new TM that uses the `SharedPreferences` class in Android.
* Pass device storage getters/setters from RN to DevTools'
`connectToDevtools`. The setters are then used to populate values on
`window`. Later, the console is patched using these values.
* If we receive a notification from DevTools that the console patching
fields have been updated, we write values back to local storage.
* See https://github.com/facebook/react-native/pull/34903

# How did you test this change?
Manual testing, `yarn run test-build-devtools`, `yarn run prettier`,
`yarn run flow dom`

## Manual testing setup:

### React DevTools Frontend
* Get the DevTools frontend in flipper:
* `nvm install -g react-devtools-core`, then replace that package with a
symlink to the local package
  * enable ""use globally installed devtools"" in flipper
* yarn run start in react-devtools, etc. as well

### React DevTools Backend
* `yarn run build:backend` in react-devtools-core, then copy-paste that
file to the expo app's node_modules directory

### React Native
* A local version of React Native can be patched in by modifying an expo
app's package.json, as in `""react-native"":
""rbalicki2/react-native#branch-name""`

# Versioning safety
* There are three versioned modules to worry about: react native, the
devtools frontend and the devtools backend.
* The react devtools backend checks for whether a `cachedSettingsStore`
is passed from react native. If not (e.g. if React Native is outdated),
then no behavior changes.
* The devtools backend reads the patched console values from the cached
settings store. However, if nothing has been stored, for example because
the frontend is outdated or has never synced its settings, then behavior
doesn't change.
* The devtools frontend sends no new messages. However, if it did send a
new message (e.g. ""store this value at this key""), and the backend was
outdated, that message would be silently ignored.",Robert Balicki,2022-10-25T02:25:33Z
d925a8d0be69595bab9f7c8698df39ab68b68750,"Flight client error stack (#25560)

restore error message into stack for flight prod errors",Josh Story,2022-10-24T23:32:33Z
996b00b78708ece4d584c9a81b5460a1bdb752e6,"[Tiny] Fixed incorrect import in `react-server-dom-webpack` (#25554)

<!--
  Thanks for submitting a pull request!
We appreciate you spending the time to work on these changes. Please
provide enough information so that others can review your pull request.
The three fields below are mandatory.

Before submitting a pull request, please make sure the following is
done:

1. Fork [the repository](https://github.com/facebook/react) and create
your branch from `main`.
  2. Run `yarn` in the repository root.
3. If you've fixed a bug or added code that should be tested, add tests!
4. Ensure the test suite passes (`yarn test`). Tip: `yarn test --watch
TestName` is helpful in development.
5. Run `yarn test --prod` to test in the production environment. It
supports the same options as `yarn test`.
6. If you need a debugger, run `yarn debug-test --watch TestName`, open
`chrome://inspect`, and press ""Inspect"".
7. Format your code with
[prettier](https://github.com/prettier/prettier) (`yarn prettier`).
8. Make sure your code lints (`yarn lint`). Tip: `yarn linc` to only
check changed files.
  9. Run the [Flow](https://flowtype.org/) type checks (`yarn flow`).
  10. If you haven't already, complete the CLA.

Learn more about contributing:
https://reactjs.org/docs/how-to-contribute.html
-->

## Summary

In https://github.com/facebook/react/pull/25504,
`react-server-dom-webpack/` was deprecated in favor of
`react-server-dom-webpack/client`, but a remaining import wasn't
adjusted accordingly.

As a result, the remaining conditions within the file are no longer
firing appropriately, which I ran into while playing around with a fork
of
[server-components-demo](https://github.com/reactjs/server-components-demo).

The `index.js` file now contains a
[placeholder](https://github.com/facebook/react/blob/main/packages/react-server-dom-webpack/index.js)
and the actual logic of the client now sits in `/client`.

## How did you test this change?

I replaced `require.resolve('../')` with `require.resolve('../client')`
in the `react-server-dom-webpack` package in `node_modules` and
confirmed that the output of the build looked good again.",Leo Lamprecht,2022-10-24T17:40:18Z
e7c5af45ceb8fa2b64d39ec68345254ce9abd65e,"Update cache() and use() to the canary aka next channel (#25502)

Testing what it would look like to move this to the `next` channel.",Sebastian Markbåge,2022-10-24T03:20:52Z
fa77f52e74d816f3d7ad0e71850932508c1b353e,"Unify promise switch statements

There are two different switch statements that we use to unwrap a
`use`-ed promise, but there really only needs to be one. This was a
factoring artifact that arose because I implemented the yieldy `status`
instrumentation thing before I implemented `use` (for promises that are
thrown directly during render, which is the old Suspense pattern that
will be superseded by `use`).",Andrew Clark,2022-10-23T00:39:19Z
7572e4931f820ad7c8aa59452ab7a40eb68843fc,"Track thenable state in work loop

This is a refactor to track the array of thenables that is preserved
across replays in the work loop instead of the Thenable module.

The reason is that I'm about to add additional state to the Thenable
module that is specific to a particular attempt — like the current
index — and is reset between replays. So it's helpful to keep the two
kinds of state separate so it's clearer which state gets reset when.

The array of thenables is not reset until the work-in-progress either
completes or unwinds.

This also makes the structure more similar to Fizz and Flight.",Andrew Clark,2022-10-22T23:29:58Z
7fc3eefd859611ef4d13329039c695520cfe8ad3,"Revert yieldy behavior for non-use Suspense (in Flight, too)

Same as #25537 but for Flight.

I was going to wait to do this later because the temporary
implementation of async components uses some of the same code that
non-used wakables do, but it's not so bad. I just had to inline one bit
of code, which we'll remove when we unify the implementation with `use`.",Andrew Clark,2022-10-23T02:52:39Z
2c37aa78d3ff00d25d7ce919482fdf7a02c06e5a,"[Playground] Style compiler options editor 

This diff adds styling to the compiler options editor. The floating input/output 
toggle button on small screens now spans the bottom of the screen, so that it 
doesn't block the compiler options. 

Height overflows when adjusting screen size are complicated by Monaco Editor and 
will be addressed in a later diff. 

Test plan: 

Start Playground and see the latest look of the compiler options editor beneath 
the output section.",Robert Zhang,2022-10-23T22:33:39Z
22cbd97fe5999a0449246e877e6827223c5c5a59,Update outdated package.json repo url,Lauren Tan,2022-11-04T22:13:47Z
285b7e7acb05c747eaa420db0b918506ebe64bfc,Update outdated fixture snapshots,Lauren Tan,2022-11-04T21:59:04Z
24ea3fa4bcd7becafab5858a3ef83586ac9fd4f6,"Support JSX fragments (#736)

* handle jsx fragments

* update effects for jsx fragments",Joseph Savona,2022-11-04T18:16:50Z
871a171a1f6f04a473c71238a2bfa56fc3807883,[hir] Add InferMutableRange pass,Sathya Gunasekaran,2022-11-04T16:39:45Z
c75a1fe6bb8aa3c8376a536445b3ac48f1f6914a,[hir] Add MutableRange to Identifier,Sathya Gunasekaran,2022-11-04T16:39:45Z
e69888054c7afcc9d37e52ac47b7bd606dc4a49b,[hir] Add id to number Instruction,Sathya Gunasekaran,2022-11-04T16:39:44Z
e015bf6a7b97fefc194cd58e9af0c7028c8194b4,[test] Add pragma parsing to test runner,Sathya Gunasekaran,2022-11-04T16:39:43Z
5f81b7bc303da1b674f476f3e5fea3dbc8be35b2,"Replace NodePath with SourceLocation 

Removes all the `path: NodePath` values from various IR node types, replacing 
them with `loc: SourceLocation`. This type is an alias for babel's source 
location type plus a ""generated"" variant. The ""OtherStatement"" kind also used 
the `path` to print back the original AST (since we don't look into these); 
instead, we now capture the underlying `node` and emit that as-is during 
codegen. 

While I was doing this, i also fixed up the places where we had passed a null 
path; the vast majority have a clear place we can pull a location from. For 
example, `a ?? b` syntax creates some places/instructions for the `a != null`, 
but those can all point back to the `a` location.",Joseph Savona,2022-11-04T15:55:18Z
a9419099b4b5bbd130162d15ed59cba03c7caccc,"Allow fixture tests to be `only` or `skip` 

This commit introduces a small update to our fixture tests to allow certain jest 
`test` modifiers to be added to fixture tests via a leading prefix in the 
fixture name. 

For example, `only.my-fixture.js` is the equivalent of writing 
`test.only(""my-fixture"")`.",Lauren Tan,2022-11-03T22:47:02Z
acb49990492dc6c258fb3b0d0acc6dfabde7d3eb,Import invariant from CompilerError,Lauren Tan,2022-11-03T22:47:00Z
189b22171f1ffb93fa2570d1dac01c99731bba40,"[hir] implement nullish coalescing operator 

This currently basically lowers the code into the equivalent of 

``` 

const vLeft = <left>; 

const vNull = null; 

const vCond = vLeft != vNull; 

vCond ? vLeft : <right> 

``` 

I created a temporary `Place` to hold the `null` constant value because the 
binary operator in HIR accepts only `Place`s. Not sure if this is the preferred 
approach. Alternatives I could think of: 

-  Allow constants as an alternative to Place? 

- A `NotNull` operator for `<x> != null` 

- Some other extension to the HIR?",Jan Kassens,2022-11-03T14:28:26Z
515c33d2a650dbfa6158c709cfc96092e136789e,"Custom version of no-use-before-define rule 

## Proper Detection of Out-of-order Functions 

The no-use-before-define rule from ESLint has a strange behavior in which it 
treats variables differently than functions: 

```javascript 

function foo() { 

return bar(X); 

} 

const X = null; 

function bar(x) {} 

``` 

By default, `bar(x)` has two errors: one because X is used before defined, and 
once because `bar` is used before defined. The rule has an option `{variables: 
false}` which only enables validation when the variable is from the same ""scope"" 
as the reference, the net result of which is it means it doesn't report spurious 
errors such as X being undefined. There is _also_ a `{functions: false}` option, 
but for some reason that doesn't work the same way, it just turns off all 
validation of references that came from functions. So enabling that option would 
suppress the (spurious) error on invoking `bar()` above, but causes the rule to 
miss invalid code such as: 

``` 

function foo() { 

return bar(); 

function bar() {} 

} 

``` 

This PR adds a fork of the rule that makes `{functions: false}` behave similarly 
to `{variables: false}`, which should help avoid some of the spurious errors i 
saw internally. The rule is exported from Forget itself, which will make it 
easier to consume internally, in tests, and in the playground. 

## Targeting the validation to Forget functions 

Even with the above, there are still some false positives coming from code such 
as: 

```javascript 

const x = foo(); 

function foo() {} 

``` 

This PR changes codegen to ensure that the output of a function _always_ has the 
body starting with 'use forget'. The ESLint rule then only looks at function 
declarations/expressions whose body starts with that expression. The new unit 
test confirms that the validation finds invalid reorderings even on functions 
that weren't explicitly tagged as 'use forget'.",Joseph Savona,2022-10-27T23:29:09Z
fc1320552b0c36ce0bdbe985941398afcc43989a,"[ssa] Potential improvements to ssa construction 

Redo of #711 

Note that one test (switch.js) is failing, i'm working on a fix.",Joseph Savona,2022-10-27T20:20:10Z
89151eb4871a040fea3e8cefd095019f63bc1876,[ssa][be] Refactor visitedBlocks out of SSABuilder,Sathya Gunasekaran,2022-10-27T15:43:41Z
23293265523c70facea017a4336ae55534e2f20d,[hir] Run SSA pass on all tests,Sathya Gunasekaran,2022-10-27T15:43:38Z
a5fb869640c0f35bd6b02e223ec03d7187a80c49,"[hir] Skip backedges when handling phis 

These will be handled later during Environment.merge, no need to set an empty 
Set as value.",Sathya Gunasekaran,2022-10-27T15:43:34Z
d9c61bac70217841e9ec35d765fd9cba83079ce4,[hir][be] Improve debug printing of invariant,Sathya Gunasekaran,2022-10-27T15:43:31Z
fd6cb34843f0c3d4b71ca354352fa7156584403b,"[ssa] Run SSA in RPO traversal 

This prevents us from looking up state in blocks that have not been visited.",Sathya Gunasekaran,2022-10-27T15:43:28Z
15104ab21bcc4848fdb5be5c1773ced5ecabf41f,[ssa] Infer arguments of a function,Sathya Gunasekaran,2022-10-27T14:16:56Z
fed106a8ebf40a306daa8cbd5965f0304482f726,[ssa][be] Fix printing of SSA blocks,Sathya Gunasekaran,2022-10-27T14:16:52Z
97757ea988e04aaded1c2ddd016bf9a9b293ecfb,[hir] Run SSA pass before InferReferenceEffects pass,Sathya Gunasekaran,2022-10-27T14:16:49Z
6b9f07624f02de3466d896010139160a1439603d,"[hir] Add support for handling phis in InferReferenceEffects 

This just piggybacks on the infrastructure for handling Env.#variables. 

In the future, a better approach would be to simplify the environment creation 
and merging by leveraging the SSA property of the new IR -- 1) We don't need to 
track IdentifierId per environment as they are all    unique 2) Rather than 
tracking values, we can just track Identifiers because    Identifiers can never 
be reassigned.",Sathya Gunasekaran,2022-10-27T14:16:46Z
de6afc2c52c41eb412f4972226a7f2719fdb2344,"[ssa] Update lvalue based on whether it has a memberPath or not 

The semantics of lvalue changes based on whether lvalue.place.memberPath is null 
or not. If it's null, then lvalue.place acts as the lvalue for the instruction, 
otherwise it's just a reference to the memberPath specified location. 

Ideally we'd have an MemberExpression IR that lowers this complex lvalue into a 
temporary Place, uses this temporary place and stores back to the 
MemberExpression. 

Working around for now, will refactor to create a MemberExpression in the future 
if necessary for other analysis.",Sathya Gunasekaran,2022-10-27T13:11:23Z
c8aaa7f172cb8c5d879c226058d6a2e877a32955,"[ssa] Use Identifier for updating SSA 

Instead of using Place, use Identifier as the unit of comparison in SSA. 

Place is too high level and can not be substituted for other Places (even those 
with the same Identifier) as Place contain higher level metadata such as 
memberPath.",Sathya Gunasekaran,2022-10-27T13:11:19Z
588a0981494a0725ec653a8e80d2ee7242679040,[hir][be] Remove unused param,Sathya Gunasekaran,2022-10-27T13:11:16Z
1396ee28a4033b721ff3f4f78bf4f14452c7a644,[ssa][be] Refactor to be more idiomatic typescript,Sathya Gunasekaran,2022-10-27T13:11:12Z
e262d9e5ba3e78edbe92c8abab856ce252b17d11,"only run validation if code is actually transformed 

Disables post-codegen validation if there were no React functions in the input.",Joseph Savona,2022-10-25T15:33:20Z
eb13f84b2df59dec1d413c5f0347d0b69a82d968,"[fix] consistently import from `react` 

Instead of a combination of `react` and `React`, consistently use `react` which 
is the preferred name to import.",Jan Kassens,2022-10-25T15:00:27Z
34e02dab326cad40c3d2850e7e7de429f1dec973,"[ssa] Fix lookup of global values 

Currently, HIR doesn't load global idenfifiers into a temporary Place which 
means our SSA transform breaks when it tries to lookup this global identifier. 

Instead of throwing, let's log and return the old place. This works for now but 
will probably break when we start mutating globals, but at that point our HIR 
builder will need fixes.",Sathya Gunasekaran,2022-10-24T15:04:20Z
75871d7de751d0fed77981c20159f491465d05ca,[ssa] Add support for other kinds of Instructions,Sathya Gunasekaran,2022-10-24T15:04:19Z
bb91cbbf62a148379c0c96ea3cd6b378d8b486e9,"[hir][be] Use a Map to store ObjectExpression.properties 

Semantically this seems like a better fit as we're using Map like methods to 
iterate and update values anyway.",Sathya Gunasekaran,2022-10-24T15:04:18Z
f54d121d7171debcabe0cb60b55750a808ae3a32,"[hir][be] Use a Map to store JsxExpression.props 

Semantically this seems like a better fit as we're using Map like methods to 
iterate and update values anyway.",Sathya Gunasekaran,2022-10-24T15:04:18Z
c347e8b6d235b0418d01b649a43270bdf432be44,"[ssa][be] Delete dead code 

Leftover from 4eba7a87ec6b27d1e8bad697ff6c0ac5db1ae7ad",Sathya Gunasekaran,2022-10-24T14:49:49Z
152c3e81d3f07371b496e3e9f3c39b761399f872,[hir][be] Use .kind() to update and find ValueKind,Sathya Gunasekaran,2022-10-24T14:49:45Z
61f9b5e97b36de205c7d16256334cd85b92adc2d,"[Float] support <base> as Resource (#25546)

keys off `target` and `href`.
prepends on insertion similar to title.
only flushes on the server in the shell (should probably add a warning
if there are any to flush in a boundary)",Josh Story,2022-10-23T22:03:52Z
1d3fc9c9c4d88536dcc36a0c771c6bb75f68f78b,"Bug fix when resolving cache (#25545)

We must use the asynclocalstorage one if it's available.",Sebastian Markbåge,2022-10-23T18:12:47Z
cce18e3504fca651051da72cf9c2d126c16eb013,"[Flight] Use AsyncLocalStorage to extend the scope of the cache to micro tasks (#25542)

This extends the scope of the cache and fetch instrumentation using
AsyncLocalStorage for microtasks. This is an intermediate step. It sets
up the dispatcher only once. This is unique to RSC because it uses the
react.shared-subset module for its shared state.

Ideally we should support multiple renderers. We should also have this
take over from an outer SSR's instrumented fetch. We should also be able
to have a fallback to global state per request where AsyncLocalStorage
doesn't exist and then the whole client-side solutions. I'm still
figuring out the right wiring for that so this is a temporary hack.",Sebastian Markbåge,2022-10-23T05:06:58Z
caa84c8da0aed390ec25783e577d91711dfd6bcc,"Revert fetch instrumentation to only RSC (#25540)

Revert fetch instrumentation so that it only affects RSC by applying it
only in the react-server condition of ""react"".

This helps make the rollout a little smoother because these affects
existing libraries that fetch during client components, and then gets
forever cached. We need to implement the GC first.

I haven't fully implemented the SSR part anyway.

The main problem that we discovered is that `""react""` and
`""react/react.shared-subset""` have separate dispatchers in an
environment that runs both Fizz and Flight. That's intentional and
sometimes a feature. However, in this case it means that we instrument
fetch twice and when you run Flight inside Fizz, that fetch goes into
both caches when it's supposed to only see the inner one. I'm not sure
how to solve that atm.",Sebastian Markbåge,2022-10-23T02:58:30Z
0c11baa6abea41132d0c894264783041ca852548,"add warnings for non-resources rendered outside body or head (#25532)

Adds some clarifying warnings when you render a component that is almost
a resource but isn't and the element was rendered outside the main
document tree (outside of `<body>` or `<head>`",Josh Story,2022-10-22T22:19:42Z
9236abdb5ad61606c23f81eafd09f4fb51ea9a98,"when float is enabled only push title and script as a single unit (#25536)

replaces: https://github.com/facebook/react/pull/25535

This takes a more huerstic based approach with no new conditionals on
the hot path of fizz rendering.

If float is enabled
* title and script can only have simple children
* if non-simple children are found they will be ignored
* title and script are pushed in a single unit during pushStartInstance
including their children and closing tags

If float is not enabled
* the original pushing behaviors are in place and you can have complex
children but you will get warnings",Josh Story,2022-10-22T22:11:26Z
dd5c2082572a6bf21530b5eecd138b9a455558fe,"Revert yieldy behavior for non-use Suspense (#25537)

To derisk the rollout of `use`, and simplify the implementation, this
reverts the yield-to-microtasks behavior for promises that are thrown
directly (as opposed to being unwrapped by `use`).

We may add this back later. However, the plan is to deprecate throwing a
promise directly and migrate all existing Suspense code to `use`, so the
extra code probably isn't worth it.",Andrew Clark,2022-10-22T21:52:20Z
934177598e583672ac12fbc63288848c2f2930bc,"fix transposed escape functions (#25534)

escapeTextForBrowser accepts any type so flow did not identify that we
were escaping a Chunk rather than a string. It's tricky because we
sometimes want to be able to escape non strings.

I've also updated the types for `Chunk` and `escapeTextForBrowser`
so that we should be able to catch this statically in the future.

The reason this did not show up in tests is almost all of our tests of
float (the areas affected by transpositions) are tested using the Node
runtime where a chunk type is a string. It may be wise to run these
tests in every runtime in the future or at least make sure there is
broad representation of resources in each specific runtime test suite.",Josh Story,2022-10-22T16:56:40Z
d1ced9fd58a1ba91febacba8ceaf2e17640fb942,"[Float] support all links as Resources (#25515)

stacked on https://github.com/facebook/react/pull/25514

This PR adds support for any type of Link as long as it has a string rel
and href and does not include an onLoad or onError property.

The semantics for generic link resources matches other head resources,
they will be inserted and removed as their ref counts go positive and
back to zero.

Keys are based on rel, href, sizes, and media.

on the server preconnect and prefetch-dns are privileged and will emit
near the start of the stream.",Josh Story,2022-10-22T05:38:24Z
6dbccb92493c3a4fea14b6832ceb4ac42e6330c1,"[DevTools] upgrade to Manifest V3 (#25145)

## Summary

resolves #24522

To upgrade to Manifest V3, one of the biggest issue is that we are no
longer allowed to add a script element with code in textContent so that
it would run synchronously. It's necessary for us because we need to
inject a global hook for react reconciler to detect whether devtools
exist.
To do that, we'll leverage a new API
`chrome.scripting.registerContentScripts` in V3. Particularly, we rely
on the ""world"" option (added in Chrome v102
[commit](https://chromium.googlesource.com/chromium/src/+/e5ad3451c17b21341b0b9019b074801c44c92c9f))
to run it in the ""main world"" on the page.

This PR also renames a few content script files so that it's easier to
tell them apart from other extension scripts and understand the purpose
of each of them.

Manifest V3 is not yet ready for Firefox, so we need to keep some code
for compatibility.

## How did you test this change?

`yarn build:chrome && yarn test:chrome`
`yarn build:edge && yarn test:edge`
`yarn build:firefox && yarn test:firefox`",Mengdi Chen,2022-10-22T02:52:18Z
973b90bdf6f4a1d9b3864d93985d4a204f233855,"[Float] support meta tags as Resources (#25514)

Stacked on #25508

This PR adds meta tags as a resource type.

metas are classified in the following priority

1. charset
2. http-equiv
3. property
4. name
5. itemprop

when using property, there is special logic for og type properties where
a `property=""og:image:height""` following a `property=""og:image""` will
inherit the key of the previous tag. this relies on timing effects to
stay consistent so when mounting new metas it is important that if
structured properties are being used all members of a structure mount
together. This is similarly true for arrays where the implicit
sequential order defines the array structure. if you need an array you
need to mount all array members in the same pass.",Josh Story,2022-10-21T22:21:29Z
f4df345420e06a6d4607f2a3c7d273d0e492f276,"Improve playground validation, workaround lack of JSX support 

ESLint's default parser doesn't support any non-standard syntax, which includes 
JSX. So when I added the ESLint validation step to the playground, it meant that 
valid examples containing JSX still reported ""invalid output"". I tried to use an 
alternative parser, but I couldn't figure out the right webpack incantations to 
make `@babel/eslint-parser` or `hermes-eslint` work. I even tried recreating 
some of their code to avoid problematic imports, no dice. 

Instead this PR: 

* No longer uses the `postCodegenValidator` step, and runs the validation on the 
output after compilation completes. This is better anyway since we can see the 
output *and* the error messages 

* Shows rule violations as an ""Invalid output"" comment 

* Shows parser errors as a note (mostly to indicate that the validation step 
couldn't run, there could still be no-use-before-define violations that weren't 
found) 

Invalid example: 

<img width=""1502"" alt=""Screen Shot 2022-10-21 at 9 50 23 AM"" 
src=""https://user-images.githubusercontent.com/6425824/197249007-1ec244a0-6dfe-4ec6-a0d0-60302efd86bd.png""> 

Sample example but with some JSX: 

<img width=""1500"" alt=""Screen Shot 2022-10-21 at 9 50 39 AM"" 
src=""https://user-images.githubusercontent.com/6425824/197249030-e68ba968-4101-47c7-a148-f548f84f375c.png"">",Joseph Savona,2022-10-21T18:00:39Z
a7450572faeca9c0d976c7620251475a48a13ed3,"import runtime from ""React.unstable_ForgetRuntime"" 

Imports the runtime from `React.unstable_ForgetRuntime` rather than from a 
separate module. The hope is that any code that gets transformed already has a 
dependency on React anyway, so we can avoid adding a new dependency that other 
systems don't know about. 

While here, i also cleaned up the `guardThrows` flag (we still parse it if 
present and warn, rather than throwing, to make it easier to adopt the latest 
version in various places).",Joseph Savona,2022-10-21T16:13:37Z
2f34f85011b63228cb22d35f17c6551f6b194de8,"Enable no-use-before-define validation in playground 

#686 added an option to validate generated code after transformation and adds an 
ESLint-based validator function to transform-test. Unfortunately it isn't super 
easy to wire up ESLint for use in a browser: traditionally the ESLint project 
specifically did _not_ support browser builds, but they recently have relaxed 
this because they added a browser playground on their website. There isn't 
official support, but the [playground 
repo](https://github.com/eslint/playground/blob/f3b1f78cc1c06dadfe7bb50c6c0f913c0d23670d/webpack.config.js) 
has a webpack config that, when combined with requiring a specific file, allows 
making things work in a browser. 

I tried using this directly in our playground app but Next's default webpack 
config doesn't work. So I created a separate package, playground-validator, 
which exports a webpack-built version of `eslint.Linter`. Then the playground 
can consume that, and everything works: 

## Test Plan 👀 

Confirmed that a known problematic example displays the validation message in 
playground (both locally and on the preview deployment): 

<img width=""1500"" alt=""Screen Shot 2022-10-20 at 12 22 59 PM"" 
src=""https://user-images.githubusercontent.com/6425824/197041265-966ffda2-a3d0-450e-8fc4-fd1a7ca06e1a.png"">",Joseph Savona,2022-10-21T15:37:18Z
79c5829813d07371d0f99a43a47c88e2b444fb1d,"Let ReactDOM initialize in RSC (#25503)

With the `react-dom/server-rendering-stub` you can import `react-dom` in
RSC so that you can call `preload` and `preinit` but if you don't alias
it, then requiring it breaks because we React.Component which doesn't
exist in the react subset.",Sebastian Markbåge,2022-10-21T14:41:14Z
1f7a2f577bc9e0264256d834d3daffbd7d6618f9,"[Float] support title tags as Resources (#25508)

Adds a category of Resources of type `head` which will be used to track
the tags that go into the <head>

Currently only implements for `<title>`.

titles are keyed off their textContent so each time the title changes a
new resource will be created. Currently insertion is done by prepending
in the <head>. The argument here is that the newest title should ""win""
if there are multiple rendered. This also helps when a navigation or
update causes a server rendered title to hang around but it is not the
most recent one.",Josh Story,2022-10-21T06:13:32Z
c635807875630e7057777e898372eed43e3b0a24,"Support `use` in `act` testing API (#25523)

`use` can avoid suspending on already resolved data by yielding to
microtasks. In a real, browser environment, we do this by scheduling a
platform task (i.e. postTask).

In a test environment, tasks are scheduled on a special internal queue
so that they can be flushed by the `act` testing API. So we need to add
support for this in `act`.

This behavior only works if you `await` the thenable returned by the
`act` call. We currently do not require that users do this. So I added a
warning, but it only fires if `use` was called. The old Suspense pattern
will not trigger a warning. This is to avoid breaking existing tests
that use Suspense.

The implementation of `act` has gotten extremely complicated because of
the subtle changes in behavior over the years, and our commitment to
maintaining backwards compatibility. We really should consider being
more restrictive in a future major release.

The changes are a bit confusing so I did my best to add inline comments
explaining how it works.

## Test plan

I ran this against Facebook's internal Jest test suite to confirm
nothing broke",Andrew Clark,2022-10-21T02:08:23Z
65e32e58b6057db1fdfed95a942fad4fc96da191,"Add fetch Instrumentation to Dedupe Fetches (#25516)

* Add fetch instrumentation in cached contexts

* Avoid unhandled rejection errors for Promises that we intentionally ignore

In the final passes, we ignore the newly generated Promises and use
the previous ones. This ensures that if those generate errors, that we
intentionally ignore those.

* Add extra fetch properties if there were any",Sebastian Markbåge,2022-10-19T22:37:00Z
00a58cdab16569521585b5fabedb9b1e55534921,"Option to validate output with ESLint 

Adds a new compiler option `validateNoUseBeforeDefine`, which enables a 
post-codegen pass to validate that there are no usages of values before they are 
defined (which causes a ReferenceError at runtime). This can occur when a value 
is accessed when its in the TDZ (temporary dead zone), after the hoisted 
_declaration_ but before the variable is defined: 

```javascript 

function foo() { 

x; // x is in the TDX here: the binding from the subsequent statement is 
hoisted, but x is not yet defined. 

let x; 

} 

``` 

* The validation is off by default, but enabled in transform-test 

* The validation crashes compilation, rather than bailout, because the code has 
already been mangled and we can't roll back at the point the validation runs. 

* The validator uses ESLint's no-use-before-define rule by printing the program 
to source and then configuring ESLint to use Hermes parser. 

* transform-test now supports tests prefixed with ""error."" to indicate tests for 
which compilation is expected to crash (not just bailout), and the expect file 
includes the error message.",Joseph Savona,2022-10-19T20:00:47Z
9336e29d917f286f74fc1e10db4cfbc9ccf67a38,"[useEvent] Lint for presence of useEvent functions in dependency lists (#25512)

* [useEvent] Lint for presence of useEvent functions in dependency lists

With #25473, the identity of useEvent's return value is no longer stable
across renders. Previously, the ExhaustiveDeps lint rule would only
allow the omission of the useEvent function, but you could still add it
as a dependency.

This PR updates the ExhaustiveDeps rule to explicitly check for the
presence of useEvent functions in dependency lists, and emits a warning
and suggestion/autofixer for removing the dependency.",lauren,2022-10-19T19:03:46Z
3cc792bfb53c63de34bbb1e8ca131c11faca6cba,"[useEvent] Non-stable function identity (#25473)

* [useEvent] Non-stable function identity

Since useEvent shouldn't go in the dependency list of whatever is
consuming it (which is enforced by the fact that useEvent functions are
always locally created and never passed by reference), its identity
doesn't matter. Effectively, this PR is a runtime assertion
that you can't rely on the return value of useEvent to be stable.

* Test: Events should see latest bindings

The key feature of useEvent that makes it different from useCallback
is that events always see the latest committed values. There's no such
thing as a ""stale"" event handler.

* Don't queue a commit effect on mount

* Inline event function wrapping

- Inlines wrapping of the callback
- Use a mutable ref-style object instead of a callable object
- Fix types

Co-authored-by: Andrew Clark <git@andrewclark.io>",lauren,2022-10-19T18:59:27Z
94f1e6f27c972432926d797e1b92cbf11e8b3799,"Add runtime dependencies to the dependencies 

These are used somewhere in the `dist/` directory after building and as such 
should be included in the dependencies of the package.json.",Jan Kassens,2022-10-19T17:09:03Z
987292815c68be0fd5916d1f9b0d6c983e2db7ce,Remove feature flag enableStrictEffects (#25387),Samuel Susla,2022-10-19T09:57:09Z
8e2bde6f2751aa6335f3cef488c05c3ea08e074a,"Add cache() API (#25506)

Like memo() but longer lived.",Sebastian Markbåge,2022-10-18T20:55:06Z
eeb01b17e6a4b183bdc10233eb69746dcf592401,"[ssa] Remove lambdas for update functions 

Rather than passing lambdas above to the builder, pass the builder down and 
update places.",Sathya Gunasekaran,2022-10-18T18:30:53Z
b9ce8bdcfde51a4f7b4f1068e58ba99450efbb47,"[SSA] Fix identifierID hack 

Rather than starting from 1000, start from the last used identifier id.",Sathya Gunasekaran,2022-10-18T17:57:34Z
379251c65f39039ace1d2e5a80bdb5938cf3427c,"Add SSA-ify pass 

The algorithm is described in detail here: 

https://pp.info.uni-karlsruhe.de/uploads/publikationen/braun13cc.pdf 

Note that the SSA form generated is not minimal. A follow on 
RedundantPhiElimination pass 

is required to prune the graph.",Sathya Gunasekaran,2022-10-18T17:45:01Z
9524c58486a5bbc3e0e9935df2a48f383e0a5df1,"Replace `import from '.'` with path name 

Somehow these imports aren't compatible with builds inside buck.",Jan Kassens,2022-10-18T17:14:27Z
9cdf8a99edcfd94d7420835ea663edca04237527,"[Codemod] Update copyright header to Meta (#25315)

* Facebook -> Meta in copyright

rg --files | xargs sed -i 's#Copyright (c) Facebook, Inc. and its affiliates.#Copyright (c) Meta Platforms, Inc. and affiliates.#g'

* Manual tweaks",Andrew Clark,2022-10-18T15:19:24Z
e54015e267698a23ee85ddf192769d716ed04742,Refactor: fill in the flow missing type (#25496),c0dedance,2022-10-18T15:06:35Z
3b1fd5767a8f1660eeb1e0951b0b7c85ea516625,"refactor: Flow: typing of Scheduler (#25485)

Flow: typing of Scheduler.",bubucuo,2022-10-18T15:05:38Z
14072ce6489d8968d3687b4410da4c9f59f87cb5,Add detach to Offscreen component (#25265),Samuel Susla,2022-10-18T14:56:41Z
3bb71dfd4bfc68920e758cd5fcf9fbfa44b99a21,Rename react-server-dom-webpack entry points to /client and /server (#25504),Sebastian Markbåge,2022-10-18T14:15:52Z
95fe4ed0ed2cafb16f6a12667487f7d5151404e4,"Include `Utils.Component()` in BailOnCapitalizedFunctionCalls 

`Utils.Component()` wasn't caught by the bailout, and there are such usage on 
WWW 

Fixes #671",Tianyu Yao,2022-10-18T05:44:03Z
704d936009d025bd616dca04b5440fd509d7e2bf,"[easy] rename InferReference{Capability=>Effects} 

Forgot to rename the function/file when changing from capability to effect. 

#accept2ship",Joseph Savona,2022-10-18T15:49:31Z
71f2c8cf1583f65224bce37bb2ef69e533671183,move resource acquisition to mutation phase (#25500),Josh Story,2022-10-17T22:21:06Z
500bea532d1b349fd5681b6477c14cedf4ed54ac,"Add option to load Fizz runtime from external file (#25499)

* Add feature flag for external Fizz runtime

Only enabled for www for now

* Add option to load Fizz runtime from external file

When unstable_externalRuntimeSrc is provided, React will inject a script
tag that points to the provided URL.

Then, instead of emitting inline scripts, the Fizz stream will emit
HTML nodes with data attributes that encode the instructions. The
external runtime will detect these with a mutation observer and
translate them into runtime commands. This part isn't implemented in 
this PR, though — all this does is set up the option to use 
an external runtime, and inject the script tag.

The external runtime is injected at the same time as bootstrap scripts.",Andrew Clark,2022-10-17T21:57:59Z
4712017744735dbb28ca069433bb3f1565ad2cbd,"Include `Utils.Component()` in BailOnCapitalizedFunctionCalls 

`Utils.Component()` wasn't caught by the bailout, and there are such usage on 
WWW 

Fixes #671",Tianyu Yao,2022-10-17T21:41:26Z
4494f2a86f4bfb94e0e78feef2dda72d93b6aa9e,"[Float] add support for scripts and other enhancements (#25480)

* float enhance!!!

Support preinit as script
Support resources from async scripts
Support saving the precedence place when rendering the shell

There was a significant change to the flushing order of resources which follows the general principal of...
1. stuff that blocks display
2. stuff that we know will be used
3. stuff that was explicitly preloaded

As a consequence if you preinit a style now it won't automatically flush in the shell unless you actually depend on it in your tree. To avoid races with precedence order we now emit a tag that saves the place amongst the precedence hierarchy so late insertions still end up where they were intended

There is also a novel hydration pathway for certain tags. If you render an async script with an onLoad or onError it will always treat it like an insertion rather than a hydration.

* restore preinit style flushing behavior and nits",Josh Story,2022-10-17T21:00:20Z
46d7f4f8afd25fe84b4d9916923aac72ba28f395,"Synchronize symbol names with React 

In the upstream useMemoCache PR this symbol got renamed and unexpectedly caused 
a RN crash. Synchronize it so the comparison works.",Lauren Tan,2022-10-17T20:07:50Z
b03752cbe0b5f20708cf49e4e966bfa6d0b1587d,"Use for loop instead of Array.prototype.fill 

Some prior [microbenchmarking](https://jsbench.me/7ol98ws520/1) showed that a 
for loop outperformed `fill` (which is about ~60% slower). This is the same 
approach we use in the latest useMemoCache PR",Lauren Tan,2022-10-17T20:07:50Z
9ecf84ed7ffb21c8746ecf227209c050d99393cd,"Bugfix: Suspending in shell during discrete update (#25495)

Fixes a bug that happens when you suspend in the shell (the part of the
tree that is not wrapped in a Suspense boundary) during a
discrete update.

There were two underyling issues. One was just a mistake:
RootDidNotComplete needs to be handled in both renderRootConcurrent and
renderRootSync, but it was only handled in renderRootConcurrent. I did
it this way because I thought this path was unreachable during a sync
update, but I neglected to consider that renderRootSync is sometimes
called for non-concurrent lanes, like when recovering from an error, or
patching up a mutation to an external store.

After I fixed that oversight, the other issue is that we intentionally
error if the shell suspends during a sync update. The idea was that you
should either wrap the tree in a Suspense boundary, or you should mark
the update as a transition to allow React to suspend.

However, this did not take into account selective hydration, which can
force a sync render before anything has even committed. There's no way
in that case to wrap the update in startTransition.

Our solution for now is to remove the error that happens when you
suspend in the shell during a sync update — even for discrete updates.

We will likely revisit this in the future. One appealing possibility is
to commit the whole root in an inert state, as if it were a hidden
Offscreen tree.

Co-authored-by: Sebastian Markbåge <sebastian@calyptus.eu>

Co-authored-by: Sebastian Markbåge <sebastian@calyptus.eu>",Andrew Clark,2022-10-17T18:17:17Z
90e189ae82022d5183f1711d44cc2d7ee02af1ab,"Add react-forget-runtime 

This is a new module that holds: 

- the `useMemoCache` stub (hopefully to be deleted next week) 

- various helpers that can be imported by the compiler, e.g. the dispatcher 
guard `$startLazy` 

- skipped the implementation of `makeReadOnly` for now as there's already 
multiple copies and I wanted to avoid typescript in this file for now to make 
the build easier (i.e. no build)",Jan Kassens,2022-10-17T17:08:34Z
8f42eda432bffa9446c935f7a49748915d4e0fac,"Provide full path to tsc 

I think my previous stack got mangled somehow",Lauren Tan,2022-10-17T15:33:24Z
54f297a60ce13d6f9ea385614498650c1935c572,Enable useMemoCacheHook for ReactNative-fb build (#25498),Jan Kassens,2022-10-17T14:40:59Z
9fb581c7cc9b08a776d440254048734c3ffec78c,"Refactor: merge duplicate imports (#25489)

Co-authored-by: Jan Kassens <jan@kassens.net>",c0dedance,2022-10-17T01:58:58Z
bc358362a6dc9265705f9f09cba78bb919254737,"[Flight] Improve Error Messages when Invalid Object is Passed to Client/Host Components (#25492)

* Print built-in specific error message for toJSON

This is a better message for Date.

Also, format the message to highlight the affected prop.

* Describe error messages using JSX elements in DEV

We don't have access to the grand parent objects on the stack so we stash
them on weakmaps so we can access them while printing error messages.

Might be a bit slow.

* Capitalize Server/Client Component

* Special case errror messages for children of host components

These are likely meant to be text content if they're not a supported object.

* Update error messages",Sebastian Markbåge,2022-10-17T01:49:17Z
3ba788ff347a1b772b7482e2535e156825239432,"Fix download-build script (#25493)

The download-build script works by scraping the CircleCI job number from
the GitHub status API. Yes, I know this is super hacky but last I
checked this was the least bad of not a lot of options. Because the
response is paginated, sometimes the status for the build job exceeds
the page size.

This increases the page size to 100 so this is less likely to happen.

It'd be great to find a better way to download the artifacts. I don't
love how brittle this solution is. I think switching to the GitHub
Checks API might be worth trying, but last I looked into it, it has
other flaws.",Andrew Clark,2022-10-16T23:17:07Z
780eacd408f95f7d4fc15532c4e982b29e9e91fb,Flow upgrade to 0.190 (#25483),Jan Kassens,2022-10-15T21:33:51Z
4e27881cfe8cb00a645134f1b4710b648a59bcd9,"Add Jest entry file for external-server-runtime (#25484)

Follow-up to #25482.

This file is created during build, but we need an entry point for local
development, too.",Andrew Clark,2022-10-15T19:33:33Z
54f0e0f7308b4d0d51e52e149d3f7e5a207991ee,"Scaffolding for react-dom/unstable_external-server-runtime (#25482)

* Scaffolding for react-dom/unstable_external-server-runtime

Implements a new bundle type for in our build config called
BROWSER_SCRIPT. This is intended for scripts that get delivered straight
to the browser without needing to be processed by a bundler. (And also
doesn't include any extra UMD crap.)

Right now there's only a single use case so I didn't stress about making
it general purpose.

The use case is: a script that loads the Fizz browser runtime, and sets
up a MutationObserver to receive instructions as HTML streams in. This
will be an alternative option to the default Fizz behavior of sending
the runtime down as inline script tags, to accommodate environments
where inline script tags are not allowed.

There's no development version of this bundle because it doesn't contain
any warnings or run any user code.

None of the actual implementation is in this PR; it just sets up the
build infra.

Co-authored-by: Mofei Zhang <feifei0@fb.com>

* Set BUNDLE_SCRIPT's GCC output format to ES5

This removes the automatic 'use strict' directive, which we don't need.

Co-authored-by: Mofei Zhang <feifei0@fb.com>",Andrew Clark,2022-10-15T03:29:17Z
0eaca37565b3aeb0d967bf403029a2d39d831ad4,"Add script to generate inline Fizz runtime (#25481)

* Move Fizz inline instructions to unified module

Instead of a separate module per instruction, this exports all of them
from a unified module.

In the next step, I'll add a script to generate this new module.

* Add script to generate inline Fizz runtime

This adds a script to generate the inline Fizz runtime. Previously, the
runtime source was in an inline comment, and a compiled version of the
instructions were hardcoded as strings into the Fizz implementation,
where they are injected into the HTML stream.

I've moved the source for the instructions to a regular JavaScript
module. A script compiles the instructions with Closure, then generates
another module that exports the compiled instructions as strings.

Then the Fizz runtime imports the instructions from the
generated module.

To build the instructions, run:
  yarn generate-inline-fizz-runtime

In the next step, I'll add a CI check to verify that the generated files
are up to date.

* Check in CI if generated Fizz runtime is in sync

The generated Fizz runtime is checked into source. In CI, we'll ensure
it stays in sync by running the script and confirming nothing changed.",Andrew Clark,2022-10-15T01:00:14Z
69c7246d9dec4f5a235f3d8353811df3a80d24f5,"Initialize useMemoCache with sentinel values (#25465)

* Flush out useMemoCache API

* rename symbol

* rename symbol.for string name

* workaround symbol export not working in unit tests",Joseph Savona,2022-10-14T22:00:31Z
9e8224cc5973d5d3d919b154d78352fe193a1376,"Pass `init` to E0007 diagnostic 

I'm not sure why exactly but previously this diagnostic message was 

unusually slow to typecheck. Lifting the getter for init outside of the 

diagnostic to the callsite seems to fix the hotspot. Probably some 

interaction with string interpolation, or something else. 

Test case: ran `yarn ts:analyze-trace`, hotspot for Diagnostic.ts no 

longer present",Lauren Tan,2022-10-14T21:36:20Z
33735b90fe61341f1831fdc6f9922a251069d73b,"Add a ts:analyze-trace command 

I think all of us have noticed TS slowing to a crawl in the past couple of weeks 
and I was curious what exactly was causing it. This adds a yarn command to 
generate a TS trace and then runs a script on it to identify any hot spots 
during compilation. 

Example trace and hot spot analysis: 

``` yarn run v1.22.19 $ scripts/ts-analyze-trace.sh Hot Spots ├─ Check file 
[35m/users/laurentan/code/react-forget/forget/src/ir/[36mbabel-utils.ts[39m[35m[39m 
(2326ms) │  └─ Check expression from (line 141, char 5) to (line 141, char 19) 
(1760ms) │     └─ Check expression from (line 141, char 14) to (line 141, char 
18) (1760ms) │        └─ Compare types 658 and 607 (1759ms) │           ├─ 
{""id"":658,""kind"":""GenericInstantiation"",""name"":""NodePath"",""instantiatedType"":350,""typeArguments"":[657],""location"":{""path"":""[35m/users/laurentan/code/react-forget/forget/node_modules/[36m@types/babel__traverse[39m[35m/index.d.ts[39m"",""line"":237,""char"":1}} 
│           │  ├─ 
{""id"":350,""kind"":""GenericType"",""name"":""NodePath"",""typeArguments"":[351],""location"":{""path"":""[35m/users/laurentan/code/react-forget/forget/node_modules/[36m@types/babel__traverse[39m[35m/index.d.ts[39m"",""line"":237,""char"":1}} 
│           │  │  └─ 
{""id"":351,""kind"":""TypeParameter"",""name"":""T"",""location"":{""path"":""[35m/users/laurentan/code/react-forget/forget/node_modules/[36m@types/babel__traverse[39m[35m/index.d.ts[39m"",""line"":237,""char"":23}} 
│           │  └─ {""id"":657,""kind"":""Union"",""count"":2,""types"":[430,452]} │        
   │     ├─ 
{""id"":430,""kind"":""Object"",""name"":""Identifier"",""location"":{""path"":""[35m/users/laurentan/code/react-forget/forget/node_modules/[36m@babel/types[39m[35m/lib/index.d.ts[39m"",""line"":156,""char"":1}} 
│           │     └─ 
{""id"":452,""kind"":""Object"",""name"":""JSXIdentifier"",""location"":{""path"":""[35m/users/laurentan/code/react-forget/forget/node_modules/[36m@babel/types[39m[35m/lib/index.d.ts[39m"",""line"":982,""char"":1}} 
│           └─ 
{""id"":607,""kind"":""GenericInstantiation"",""name"":""NodePath"",""instantiatedType"":350,""typeArguments"":[606],""location"":{""path"":""[35m/users/laurentan/code/react-forget/forget/node_modules/[36m@types/babel__traverse[39m[35m/index.d.ts[39m"",""line"":237,""char"":1}} 
│              ├─ 
{""id"":350,""kind"":""GenericType"",""name"":""NodePath"",""typeArguments"":[351],""location"":{""path"":""[35m/users/laurentan/code/react-forget/forget/node_modules/[36m@types/babel__traverse[39m[35m/index.d.ts[39m"",""line"":237,""char"":1}} 
│              │  └─ 
{""id"":351,""kind"":""TypeParameter"",""name"":""T"",""location"":{""path"":""[35m/users/laurentan/code/react-forget/forget/node_modules/[36m@types/babel__traverse[39m[35m/index.d.ts[39m"",""line"":237,""char"":23}} 
│              └─ 
{""id"":606,""kind"":""AliasedUnion"",""name"":""Node"",""count"":252,""types"":[353,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,465,466,467,468,469,470,471,472,473,474,475,476,477,478,479,480,481,482,483,484,485,486,487,488,489,490,491,492,493,494,495,496,497,498,499,500,501,502,503,504,505,506,507,508,509,510,511,512,513,514,515,516,517,518,519,520,521,522,523,524,525,526,527,528,529,530,531,532,533,534,535,536,537,538,539,540,541,542,543,544,545,546,547,548,549,550,551,552,553,554,555,556,557,558,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,597,598,599,600,601,602,603,604,605],""location"":{""path"":""[35m/users/laurentan/code/react-forget/forget/node_modules/[36m@babel/types[39m[35m/lib/index.d.ts[39m"",""line"":38,""char"":1}} 
│                 ├─ 
{""id"":353,""kind"":""Object"",""name"":""AnyTypeAnnotation"",""location"":{""path"":""[35m/users/laurentan/code/react-forget/forget/node_modules/[36m@babel/types[39m[35m/lib/index.d.ts[39m"",""line"":625,""char"":1}} 
│                 ├─ 
{""id"":355,""kind"":""Object"",""name"":""ArgumentPlaceholder"",""location"":{""path"":""[35m/users/laurentan/code/react-forget/forget/node_modules/[36m@babel/types[39m[35m/lib/index.d.ts[39m"",""line"":1035,""char"":1}} 
│                 ├─ 
{""id"":356,""kind"":""Object"",""name"":""ArrayExpression"",""location"":{""path"":""[35m/users/laurentan/code/react-forget/forget/node_modules/[36m@babel/types[39m[35m/lib/index.d.ts[39m"",""line"":39,""char"":1}} 
│                 ├─ 
{""id"":357,""kind"":""Object"",""name"":""ArrayPattern"",""location"":{""path"":""[35m/users/laurentan/code/react-forget/forget/node_modules/[36m@babel/types[39m[35m/lib/index.d.ts[39m"",""line"":356,""char"":1}} 
│                 ├─ 
{""id"":358,""kind"":""Object"",""name"":""ArrayTypeAnnotation"",""location"":{""path"":""[35m/users/laurentan/code/react-forget/forget/node_modules/[36m@babel/types[39m[35m/lib/index.d.ts[39m"",""line"":628,""char"":1}} 
│                 ├─ 
{""id"":359,""kind"":""Object"",""name"":""ArrowFunctionExpression"",""location"":{""path"":""[35m/users/laurentan/code/react-forget/forget/node_modules/[36m@babel/types[39m[35m/lib/index.d.ts[39m"",""line"":363,""char"":1}} 
│                 ├─ 
{""id"":360,""kind"":""Object"",""name"":""AssignmentExpression"",""location"":{""path"":""[35m/users/laurentan/code/react-forget/forget/node_modules/[36m@babel/types[39m[35m/lib/index.d.ts[39m"",""line"":43,""char"":1}} 
│                 ├─ 
{""id"":361,""kind"":""Object"",""name"":""AssignmentPattern"",""location"":{""path"":""[35m/users/laurentan/code/react-forget/forget/node_modules/[36m@babel/types[39m[35m/lib/index.d.ts[39m"",""line"":349,""char"":1}} 
│                 ├─ 
{""id"":362,""kind"":""Object"",""name"":""AwaitExpression"",""location"":{""path"":""[35m/users/laurentan/code/react-forget/forget/node_modules/[36m@babel/types[39m[35m/lib/index.d.ts[39m"",""line"":523,""char"":1}} 
│                 ├─ 
{""id"":363,""kind"":""Object"",""name"":""BigIntLiteral"",""location"":{""path"":""[35m/users/laurentan/code/react-forget/forget/node_modules/[36m@babel/types[39m[35m/lib/index.d.ts[39m"",""line"":530,""char"":1}} 
│                 ├─ 
{""id"":364,""kind"":""Object"",""name"":""BinaryExpression"",""location"":{""path"":""[35m/users/laurentan/code/react-forget/forget/node_modules/[36m@babel/types[39m[35m/lib/index.d.ts[39m"",""line"":49,""char"":1}} 
│                 ├─ 
{""id"":365,""kind"":""Object"",""name"":""BindExpression"",""location"":{""path"":""[35m/users/laurentan/code/react-forget/forget/node_modules/[36m@babel/types[39m[35m/lib/index.d.ts[39m"",""line"":1038,""char"":1}} 
│                 ├─ 
{""id"":366,""kind"":""Object"",""name"":""BlockStatement"",""location"":{""path"":""[35m/users/laurentan/code/react-forget/forget/node_modules/[36m@babel/types[39m[35m/lib/index.d.ts[39m"",""line"":67,""char"":1}} 
│                 ├─ 
{""id"":367,""kind"":""Object"",""name"":""BooleanLiteral"",""location"":{""path"":""[35m/users/laurentan/code/react-forget/forget/node_modules/[36m@babel/types[39m[35m/lib/index.d.ts[39m"",""line"":192,""char"":1}} 
│                 ├─ 
{""id"":368,""kind"":""Object"",""name"":""BooleanLiteralTypeAnnotation"",""location"":{""path"":""[35m/users/laurentan/code/react-forget/forget/node_modules/[36m@babel/types[39m[35m/lib/index.d.ts[39m"",""line"":635,""char"":1}} 
│                 ├─ 
{""id"":369,""kind"":""Object"",""name"":""BooleanTypeAnnotation"",""location"":{""path"":""[35m/users/laurentan/code/react-forget/forget/node_modules/[36m@babel/types[39m[35m/lib/index.d.ts[39m"",""line"":632,""char"":1}} 
│                 ├─ 
{""id"":370,""kind"":""Object"",""name"":""BreakStatement"",""location"":{""path"":""[35m/users/laurentan/code/react-forget/forget/node_modules/[36m@babel/types[39m[35m/lib/index.d.ts[39m"",""line"":72,""char"":1}} 
│                 ├─ 
{""id"":371,""kind"":""Object"",""name"":""CallExpression"",""location"":{""path"":""[35m/users/laurentan/code/react-forget/forget/node_modules/[36m@babel/types[39m[35m/lib/index.d.ts[39m"",""line"":76,""char"":1}} 
│                 ├─ 
{""id"":372,""kind"":""Object"",""name"":""CatchClause"",""location"":{""path"":""[35m/users/laurentan/code/react-forget/forget/node_modules/[36m@babel/types[39m[35m/lib/index.d.ts[39m"",""line"":84,""char"":1}} 
│                 ├─ 
{""id"":373,""kind"":""Object"",""name"":""ClassAccessorProperty"",""location"":{""path"":""[35m/users/laurentan/code/react-forget/forget/node_modules/[36m@babel/types[39m[35m/lib/index.d.ts[39m"",""line"":570,""char"":1}} 
│                 ├─ 
{""id"":374,""kind"":""Object"",""name"":""ClassBody"",""location"":{""path"":""[35m/users/laurentan/code/react-forget/forget/node_modules/[36m@babel/types[39m[35m/lib/index.d.ts[39m"",""line"":374,""char"":1}} 
│                 ├─ 
{""id"":375,""kind"":""Object"",""name"":""ClassDeclaration"",""location"":{""path"":""[35m/users/laurentan/code/react-forget/forget/node_modules/[36m@babel/types[39m[35m/lib/index.d.ts[39m"",""line"":389,""char"":1}} 
│                 ├─ 
{""id"":376,""kind"":""Object"",""name"":""ClassExpression"",""location"":{""path"":""[35m/users/laurentan/code/react-forget/forget/node_modules/[36m@babel/types[39m[35m/lib/index.d.ts[39m"",""line"":378,""char"":1}} 
│                 ├─ 
{""id"":377,""kind"":""Object"",""name"":""ClassImplements"",""location"":{""path"":""[35m/users/laurentan/code/react-forget/forget/node_modules/[36m@babel/types[39m[35m/lib/index.d.ts[39m"",""line"":642,""char"":1}} 
│                 ├─ 
{""id"":378,""kind"":""Object"",""name"":""ClassMethod"",""location"":{""path"":""[35m/users/laurentan/code/react-forget/forget/node_modules/[36m@babel/types[39m[35m/lib/index.d.ts[39m"",""line"":460,""char"":1}} 
│                 ├─ 
{""id"":379,""kind"":""Object"",""name"":""ClassPrivateMethod"",""location"":{""path"":""[35m/users/laurentan/code/react-forget/forget/node_modules/[36m@babel/types[39m[35m/lib/index.d.ts[39m"",""line"":598,""char"":1}} 
│                 ├─ 
{""id"":380,""kind"":""Object"",""name"":""ClassPrivateProperty"",""location"":{""path"":""[35m/users/laurentan/code/react-forget/forget/node_modules/[36m@babel/types[39m[35m/lib/index.d.ts[39m"",""line"":587,""char"":1}} 
│                 ├─ 
{""id"":381,""kind"":""Object"",""name"":""ClassProperty"",""location"":{""path"":""[35m/users/laurentan/code/react-forget/forget/node_modules/[36m@babel/types[39m[35m/lib/index.d.ts[39m"",""line"":553,""char"":1}} 
│                 ├─ 
{""id"":382,""kind"":""Object"",""name"":""ConditionalExpression"",""location"":{""path"":""[35m/users/laurentan/code/react-forget/forget/node_modules/[36m@babel/types[39m[35m/lib/index.d.ts[39m"",""line"":89,""char"":1}} 
│                 ├─ 
{""id"":383,""kind"":""Object"",""name"":""ContinueStatement"",""location"":{""path"":""[35m/users/laurentan/code/react-forget/forget/node_modules/[36m@babel/types[39m[35m/lib/index.d.ts[39m"",""line"":95,""char"":1}} 
│                 ├─ 
{""id"":384,""kind"":""Object"",""name"":""DebuggerStatement"",""location"":{""path"":""[35m/users/laurentan/code/react-forget/forget/node_modules/[36m@babel/types[39m[35m/lib/index.d.ts[39m"",""line"":99,""char"":1}} 
│                 ├─ 
{""id"":385,""kind"":""Object"",""name"":""DecimalLiteral"",""location"":{""path"":""[35m/users/laurentan/code/react-forget/forget/node_modules/[36m@babel/types[39m[35m/lib/index.d.ts[39m"",""line"":1069,""char"":1}} 
│                 ├─ 
{""id"":386,""kind"":""Object"",""name"":""DeclareClass"",""location"":{""path"":""[35m/users/laurentan/code/react-forget/forget/node_modules/[36m@babel/types[39m[35m/lib/index.d.ts[39m"",""line"":647,""char"":1}} 
│                 ├─ 
{""id"":387,""kind"":""Object"",""name"":""DeclareExportAllDeclaration"",""location"":{""path"":""[35m/users/laurentan/code/react-forget/forget/node_modules/[36m@babel/types[39m[35m/lib/index.d.ts[39m"",""line"":704,""char"":1}} 
│                 ├─ 
{""id"":388,""kind"":""Object"",""name"":""DeclareExportDeclaration"",""location"":{""path"":""[35m/users/laurentan/code/react-forget/forget/node_modules/[36m@babel/types[39m[35m/lib/index.d.ts[39m"",""line"":697,""char"":1}} 
│                 ├─ 
{""id"":389,""kind"":""Object"",""name"":""DeclareFunction"",""location"":{""path"":""[35m/users/laurentan/code/react-forget/forget/node_modules/[36m@babel/types[39m[35m/lib/index.d.ts[39m"",""line"":656,""char"":1}} 
│                 ├─ 
{""id"":390,""kind"":""Object"",""name"":""DeclareInterface"",""location"":{""path"":""[35m/users/laurentan/code/react-forget/forget/node_modules/[36m@babel/types[39m[35m/lib/index.d.ts[39m"",""line"":661,""char"":1}} 
│                 ├─ 
{""id"":391,""kind"":""Object"",""name"":""DeclareModule"",""location"":{""path"":""[35m/users/laurentan/code/react-forget/forget/node_modules/[36m@babel/types[39m[35m/lib/index.d.ts[39m"",""line"":670,""char"":1}} 
│                 ├─ 
{""id"":392,""kind"":""Object"",""name"":""DeclareModuleExports"",""location"":{""path"":""[35m/users/laurentan/code/react-forget/forget/node_modules/[36m@babel/types[39m[35m/lib/index.d.ts[39m"",""line"":676,""char"":1}} 
│                 ├─ 
{""id"":393,""kind"":""Object"",""name"":""DeclareOpaqueType"",""location"":{""path"":""[35m/users/laurentan/code/react-forget/forget/node_modules/[36m@babel/types[39m[35m/lib/index.d.ts[39m"",""line"":686,""char"":1}} 
│                 ├─ 
{""id"":394,""kind"":""Object"",""name"":""DeclareTypeAlias"",""location"":{""path"":""[35m/users/laurentan/code/react-forget/forget/node_modules/[36m@babel/types[39m[35m/lib/index.d.ts[39m"",""line"":680,""char"":1}} 
│                 ├─ 
{""id"":395,""kind"":""Object"",""name"":""DeclareVariable"",""location"":{""path"":""[35m/users/laurentan/code/react-forget/forget/node_modules/[36m@babel/types[39m[35m/lib/index.d.ts[39m"",""line"":693,""char"":1}} 
│                 ├─ 
{""id"":396,""kind"":""Object"",""name"":""DeclaredPredicate"",""location"":{""path"":""[35m/users/laurentan/code/react-forget/forget/node_modules/[36m@babel/types[39m[35m/lib/index.d.ts[39m"",""line"":709,""char"":1}} 
│                 ├─ 
{""id"":397,""kind"":""Object"",""name"":""Decorator"",""location"":{""path"":""[35m/users/laurentan/code/react-forget/forget/node_modules/[36m@babel/types[39m[35m/lib/index.d.ts[39m"",""line"":1048,""char"":1}} 
│                 ├─ 
{""id"":398,""kind"":""Object"",""name"":""Directive"",""location"":{""path"":""[35m/users/laurentan/code/react-forget/forget/node_modules/[36m@babel/types[39m[35m/lib/index.d.ts[39m"",""line"":59,""char"":1}} 
│                 ├─ 
{""id"":399,""kind"":""Object"",""name"":""DirectiveLiteral"",""location"":{""path"":""[35m/users/laurentan/code/react-forget/forget/node_modules/[36m@babel/types[39m[35m/lib/index.d.ts[39m"",""line"":63,""char"":1}} 
│                 ├─ 
{""id"":400,""kind"":""Object"",""name"":""DoExpression"",""location"":{""path"":""[35m/users/laurentan/code/react-forget/forget/node_modules/[36m@babel/types[39m[35m/lib/index.d.ts[39m"",""line"":1052,""char"":1}} 
│                 ├─ 
{""id"":401,""kind"":""Object"",""name"":""DoWhileStatement"",""location"":{""path"":""[35m/users/laurentan/code/react-forget/forget/node_modules/[36m@babel/types[39m[35m/lib/index.d.ts[39m"",""line"":102,""char"":1}} 
│                 ├─ 
{""id"":402,""kind"":""Object"",""name"":""EmptyStatement"",""location"":{""path"":""[35m/users/laurentan/code/react-forget/forget/node_modules/[36m@babel/types[39m[35m/lib/index.d.ts[39m"",""line"":107,""char"":1}} 
│                 ├─ 
{""id"":403,""kind"":""Object"",""name"":""EmptyTypeAnnotation"",""location"":{""path"":""[35m/users/laurentan/code/react-forget/forget/node_modules/[36m@babel/types[39m[35m/lib/index.d.ts[39m"",""line"":764,""char"":1}} 
│                 ├─ 
{""id"":404,""kind"":""Object"",""name"":""EnumBooleanBody"",""location"":{""path"":""[35m/users/laurentan/code/react-forget/forget/node_modules/[36m@babel/types[39m[35m/lib/index.d.ts[39m"",""line"":902,""char"":1}} 
│                 ├─ 
{""id"":405,""kind"":""Object"",""name"":""EnumBooleanMember"",""location"":{""path"":""[35m/users/laurentan/code/react-forget/forget/node_modules/[36m@babel/types[39m[35m/lib/index.d.ts[39m"",""line"":925,""char"":1}} 
│                 ├─ 
{""id"":406,""kind"":""Object"",""name"":""EnumDeclaration"",""location"":{""path"":""[35m/users/laurentan/code/react-forget/forget/node_modules/[36m@babel/types[39m[35m/lib/index.d.ts[39m"",""line"":897,""char"":1}} 
│                 ├─ 
{""id"":407,""kind"":""Object"",""name"":""EnumDefaultedMember"",""location"":{""path"":""[35m/users/laurentan/code/react-forget/forget/node_modules/[36m@babel/types[39m[35m/lib/index.d.ts[39m"",""line"":940,""char"":1}} 
│                 ├─ 
{""id"":408,""kind"":""Object"",""name"":""EnumNumberBody"",""location"":{""path"":""[35m/users/laurentan/code/react-forget/forget/node_modules/[36m@babel/types[39m[35m/lib/index.d.ts[39m"",""line"":908,""char"":1}} 
│                 ├─ 
{""id"":409,""kind"":""Object"",""name"":""EnumNumberMember"",""location"":{""path"":""[35m/users/laurentan/code/react-forget/forget/node_modules/[36m@babel/types[39m[35m/lib/index.d.ts[39m"",""line"":930,""char"":1}} 
│                 ├─ 
{""id"":410,""kind"":""Object"",""name"":""EnumStringBody"",""location"":{""path"":""[35m/users/laurentan/code/react-forget/forget/node_modules/[36m@babel/types[39m[35m/lib/index.d.ts[39m"",""line"":914,""char"":1}} 
│                 ├─ 
{""id"":411,""kind"":""Object"",""name"":""EnumStringMember"",""location"":{""path"":""[35m/users/laurentan/code/react-forget/forget/node_modules/[36m@babel/types[39m[35m/lib/index.d.ts[39m"",""line"":935,""char"":1}} 
│                 ├─ 
{""id"":412,""kind"":""Object"",""name"":""EnumSymbolBody"",""location"":{""path"":""[35m/users/laurentan/code/react-forget/forget/node_modules/[36m@babel/types[39m[35m/lib/index.d.ts[39m"",""line"":920,""char"":1}} 
│                 ├─ 
{""id"":413,""kind"":""Object"",""name"":""ExistsTypeAnnotation"",""location"":{""path"":""[35m/users/laurentan/code/react-forget/forget/node_modules/[36m@babel/types[39m[35m/lib/index.d.ts[39m"",""line"":713,""char"":1}} 
│                 ├─ 
{""id"":414,""kind"":""Object"",""name"":""ExportAllDeclaration"",""location"":{""path"":""[35m/users/laurentan/code/react-forget/forget/node_modules/[36m@babel/types[39m[35m/lib/index.d.ts[39m"",""line"":402,""char"":1}} 
│                 ├─ 
{""id"":415,""kind"":""Object"",""name"":""ExportDefaultDeclaration"",""location"":{""path"":""[35m/users/laurentan/code/react-forget/forget/node_modules/[36m@babel/types[39m[35m/lib/index.d.ts[39m"",""line"":408,""char"":1}} 
│                 ├─ 
{""id"":416,""kind"":""Object"",""name"":""ExportDefaultSpecifier"",""location"":{""path"":""[35m/users/laurentan/code/react-forget/forget/node_modules/[36m@babel/types[39m[35m/lib/index.d.ts[39m"",""line"":1057,""char"":1}} 
│                 ├─ 
{""id"":417,""kind"":""Object"",""name"":""ExportNamedDeclaration"",""location"":{""path"":""[35m/users/laurentan/code/react-forget/forget/node_modules/[36m@babel/types[39m[35m/lib/index.d.ts[39m"",""line"":413,""char"":1}} 
│                 ├─ 
{""id"":418,""kind"":""Object"",""name"":""ExportNamespaceSpecifier"",""location"":{""path"":""[35m/users/laurentan/code/react-forget/forget/node_modules/[36m@babel/types[39m[35m/lib/index.d.ts[39m"",""line"":534,""char"":1}} 
│                 ├─ 
{""id"":419,""kind"":""Object"",""name"":""ExportSpecifier"",""location"":{""path"":""[35m/users/laurentan/code/react-forget/forget/node_modules/[36m@babel/types[39m[35m/lib/index.d.ts[39m"",""line"":421,""char"":1}} 
│                 ├─ 
{""id"":420,""kind"":""Object"",""name"":""ExpressionStatement"",""location"":{""path"":""[35m/users/laurentan/code/react-forget/forget/node_modules/[36m@babel/types[39m[35m/lib/index.d.ts[39m"",""line"":110,""char"":1}} 
│                 ├─ 
{""id"":421,""kind"":""Object"",""name"":""File"",""location"":{""path"":""[35m/users/laurentan/code/react-forget/forget/node_modules/[36m@babel/types[39m[35m/lib/index.d.ts[39m"",""line"":114,""char"":1}} 
│                 ├─ 
{""id"":422,""kind"":""Object"",""name"":""ForInStatement"",""location"":{""path"":""[35m/users/laurentan/code/react-forget/forget/node_modules/[36m@babel/types[39m[35m/lib/index.d.ts[39m"",""line"":120,""char"":1}} 
│                 ├─ 
{""id"":423,""kind"":""Object"",""name"":""ForOfStatement"",""location"":{""path"":""[35m/users/laurentan/code/react-forget/forget/node_modules/[36m@babel/types[39m[35m/lib/index.d.ts[39m"",""line"":427,""char"":1}} 
│                 ├─ 
{""id"":424,""kind"":""Object"",""name"":""ForStatement"",""location"":{""path"":""[35m/users/laurentan/code/react-forget/forget/node_modules/[36m@babel/types[39m[35m/lib/index.d.ts[39m"",""line"":126,""char"":1}} 
│                 ├─ 
{""id"":425,""kind"":""Object"",""name"":""FunctionDeclaration"",""location"":{""path"":""[35m/users/laurentan/code/react-forget/forget/node_modules/[36m@babel/types[39m[35m/lib/index.d.ts[39m"",""line"":133,""char"":1}} 
│                 ├─ 
{""id"":426,""kind"":""Object"",""name"":""FunctionExpression"",""location"":{""path"":""[35m/users/laurentan/code/react-forget/forget/node_modules/[36m@babel/types[39m[35m/lib/index.d.ts[39m"",""line"":145,""char"":1}} 
│                 ├─ 
{""id"":427,""kind"":""Object"",""name"":""FunctionTypeAnnotation"",""location"":{""path"":""[35m/users/laurentan/code/react-forget/forget/node_modules/[36m@babel/types[39m[35m/lib/index.d.ts[39m"",""line"":716,""char"":1}} 
│                 ├─ 
{""id"":428,""kind"":""Object"",""name"":""FunctionTypeParam"",""location"":{""path"":""[35m/users/laurentan/code/react-forget/forget/node_modules/[36m@babel/types[39m[35m/lib/index.d.ts[39m"",""line"":724,""char"":1}} 
│                 ├─ 
{""id"":429,""kind"":""Object"",""name"":""GenericTypeAnnotation"",""location"":{""path"":""[35m/users/laurentan/code/react-forget/forget/node_modules/[36m@babel/types[39m[35m/lib/index.d.ts[39m"",""line"":730,""char"":1}} 
│                 ├─ 
{""id"":430,""kind"":""Object"",""name"":""Identifier"",""location"":{""path"":""[35m/users/laurentan/code/react-forget/forget/node_modules/[36m@babel/types[39m[35m/lib/index.d.ts[39m"",""line"":156,""char"":1}} 
│                 ├─ 
{""id"":431,""kind"":""Object"",""name"":""IfStatement"",""location"":{""path"":""[35m/users/laurentan/code/react-forget/forget/node_modules/[36m@babel/types[39m[35m/lib/index.d.ts[39m"",""line"":163,""char"":1}} 
│                 ├─ 
{""id"":432,""kind"":""Object"",""name"":""Import"",""location"":{""path"":""[35m/users/laurentan/code/react-forget/forget/node_modules/[36m@babel/types[39m[35m/lib/index.d.ts[39m"",""line"":527,""char"":1}} 
│                 ├─ 
{""id"":433,""kind"":""Object"",""name"":""ImportAttribute"",""location"":{""path"":""[35m/users/laurentan/code/react-forget/forget/node_modules/[36m@babel/types[39m[35m/lib/index.d.ts[39m"",""line"":1043,""char"":1}} 
│                 ├─ 
{""id"":434,""kind"":""Object"",""name"":""ImportDeclaration"",""location"":{""path"":""[35m/users/laurentan/code/react-forget/forget/node_modules/[36m@babel/types[39m[35m/lib/index.d.ts[39m"",""line"":434,""char"":1}} 
│                 ├─ 
{""id"":435,""kind"":""Object"",""name"":""ImportDefaultSpecifier"",""location"":{""path"":""[35m/users/laurentan/code/react-forget/forget/node_modules/[36m@babel/types[39m[35m/lib/index.d.ts[39m"",""line"":441,""char"":1}} 
│                 ├─ 
{""id"":436,""kind"":""Object"",""name"":""ImportNamespaceSpecifier"",""location"":{""path"":""[35m/users/laurentan/code/react-forget/forget/node_modules/[36m@babel/types[39m[35m/lib/index.d.ts[39m"",""line"":445,""char"":1}} 
│                 ├─ 
{""id"":437,""kind"":""Object"",""name"":""ImportSpecifier"",""location"":{""path"":""[35m/users/laurentan/code/react-forget/forget/node_modules/[36m@babel/types[39m[35m/lib/index.d.ts[39m"",""line"":449,""char"":1}} 
│                 ├─ 
{""id"":438,""kind"":""Object"",""name"":""IndexedAccessType"",""location"":{""path"":""[35m/users/laurentan/code/react-forget/forget/node_modules/[36m@babel/types[39m[35m/lib/index.d.ts[39m"",""line"":944,""char"":1}} 
│                 ├─ 
{""id"":439,""kind"":""Object"",""name"":""InferredPredicate"",""location"":{""path"":""[35m/users/laurentan/code/react-forget/forget/node_modules/[36m@babel/types[39m[35m/lib/index.d.ts[39m"",""line"":735,""char"":1}} 
│                 ├─ 
{""id"":440,""kind"":""Object"",""name"":""InterfaceDeclaration"",""location"":{""path"":""[35m/users/laurentan/code/react-forget/forget/node_modules/[36m@babel/types[39m[35m/lib/index.d.ts[39m"",""line"":743,""char"":1}} 
│                 ├─ 
{""id"":441,""kind"":""Object"",""name"":""InterfaceExtends"",""location"":{""path"":""[35m/users/laurentan/code/react-forget/forget/node_modules/[36m@babel/types[39m[35m/lib/index.d.ts[39m"",""line"":738,""char"":1}} 
│                 ├─ 
{""id"":442,""kind"":""Object"",""name"":""InterfaceTypeAnnotation"",""location"":{""path"":""[35m/users/laurentan/code/react-forget/forget/node_modules/[36m@babel/types[39m[35m/lib/index.d.ts[39m"",""line"":752,""char"":1}} 
│                 ├─ 
{""id"":443,""kind"":""Object"",""name"":""InterpreterDirective"",""location"":{""path"":""[35m/users/laurentan/code/react-forget/forget/node_modules/[36m@babel/types[39m[35m/lib/index.d.ts[39m"",""line"":55,""char"":1}} 
│                 ├─ 
{""id"":444,""kind"":""Object"",""name"":""IntersectionTypeAnnotation"",""location"":{""path"":""[35m/users/laurentan/code/react-forget/forget/node_modules/[36m@babel/types[39m[35m/lib/index.d.ts[39m"",""line"":757,""char"":1}} 
│                 ├─ 
{""id"":445,""kind"":""Object"",""name"":""JSXAttribute"",""location"":{""path"":""[35m/users/laurentan/code/react-forget/forget/node_modules/[36m@babel/types[39m[35m/lib/index.d.ts[39m"",""line"":955,""char"":1}} 
│                 ├─ 
{""id"":446,""kind"":""Object"",""name"":""JSXClosingElement"",""location"":{""path"":""[35m/users/laurentan/code/react-forget/forget/node_modules/[36m@babel/types[39m[35m/lib/index.d.ts[39m"",""line"":960,""char"":1}} 
│                 ├─ 
{""id"":447,""kind"":""Object"",""name"":""JSXClosingFragment"",""location"":{""path"":""[35m/users/laurentan/code/react-forget/forget/node_modules/[36m@babel/types[39m[35m/lib/index.d.ts[39m"",""line"":1020,""char"":1}} 
│                 ├─ 
{""id"":448,""kind"":""Object"",""name"":""JSXElement"",""location"":{""path"":""[35m/users/laurentan/code/react-forget/forget/node_modules/[36m@babel/types[39m[35m/lib/index.d.ts[39m"",""line"":964,""char"":1}} 
│                 ├─ 
{""id"":449,""kind"":""Object"",""name"":""JSXEmptyExpression"",""location"":{""path"":""[35m/users/laurentan/code/react-forget/forget/node_modules/[36m@babel/types[39m[35m/lib/index.d.ts[39m"",""line"":971,""char"":1}} 
│                 ├─ 
{""id"":450,""kind"":""Object"",""name"":""JSXExpressionContainer"",""location"":{""path"":""[35m/users/laurentan/code/react-forget/forget/node_modules/[36m@babel/types[39m[35m/lib/index.d.ts[39m"",""line"":974,""char"":1}} 
│                 ├─ 
{""id"":451,""kind"":""Object"",""name"":""JSXFragment"",""location"":{""path"":""[35m/users/laurentan/code/react-forget/forget/node_modules/[36m@babel/types[39m[35m/lib/index.d.ts[39m"",""line"":1011,""char"":1}} 
│                 ├─ 
{""id"":452,""kind"":""Object"",""name"":""JSXIdentifier"",""location"":{""path"":""[35m/users/laurentan/code/react-forget/forget/node_modules/[36m@babel/types[39m[35m/lib/index.d.ts[39m"",""line"":982,""char"":1}} 
│                 ├─ 
{""id"":453,""kind"":""Object"",""name"":""JSXMemberExpression"",""location"":{""path"":""[35m/users/laurentan/code/react-forget/forget/node_modules/[36m@babel/types[39m[35m/lib/index.d.ts[39m"",""line"":986,""char"":1}} 
│                 ├─ 
{""id"":454,""kind"":""Object"",""name"":""JSXNamespacedName"",""location"":{""path"":""[35m/users/laurentan/code/react-forget/forget/node_modules/[36m@babel/types[39m[35m/lib/index.d.ts[39m"",""line"":991,""char"":1}} 
│                 ├─ 
{""id"":455,""kind"":""Object"",""name"":""JSXOpeningElement"",""location"":{""path"":""[35m/users/laurentan/code/react-forget/forget/node_modules/[36m@babel/types[39m[35m/lib/index.d.ts[39m"",""line"":996,""char"":1}} 
│                 ├─ 
{""id"":456,""kind"":""Object"",""name"":""JSXOpeningFragment"",""location"":{""path"":""[35m/users/laurentan/code/react-forget/forget/node_modules/[36m@babel/types[39m[35m/lib/index.d.ts[39m"",""line"":1017,""char"":1}} 
│                 ├─ 
{""id"":457,""kind"":""Object"",""name"":""JSXSpreadAttribute"",""location"":{""path"":""[35m/users/laurentan/code/react-forget/forget/node_modules/[36m@babel/types[39m[35m/lib/index.d.ts[39m"",""line"":1003,""char"":1}} 
│                 ├─ 
{""id"":458,""kind"":""Object"",""name"":""JSXSpreadChild"",""location"":{""path"":""[35m/users/laurentan/code/react-forget/forget/node_modules/[36m@babel/types[39m[35m/lib/index.d.ts[39m"",""line"":978,""char"":1}} 
│                 ├─ 
{""id"":459,""kind"":""Object"",""name"":""JSXText"",""location"":{""path"":""[35m/users/laurentan/code/react-forget/forget/node_modules/[36m@babel/types[39m[35m/lib/index.d.ts[39m"",""line"":1007,""char"":1}} 
│                 ├─ 
{""id"":460,""kind"":""Object"",""name"":""LabeledStatement"",""location"":{""path"":""[35m/users/laurentan/code/react-forget/forget/node_modules/[36m@babel/types[39m[35m/lib/index.d.ts[39m"",""line"":169,""char"":1}} 
│                 ├─ 
{""id"":461,""kind"":""Object"",""name"":""LogicalExpression"",""location"":{""path"":""[35m/users/laurentan/code/react-forget/forget/node_modules/[36m@babel/types[39m[35m/lib/index.d.ts[39m"",""line"":209,""char"":1}} 
│                 ├─ 
{""id"":462,""kind"":""Object"",""name"":""MemberExpression"",""location"":{""path"":""[35m/users/laurentan/code/react-forget/forget/node_modules/[36m@babel/types[39m[35m/lib/index.d.ts[39m"",""line"":215,""char"":1}} 
│                 ├─ 
{""id"":463,""kind"":""Object"",""name"":""MetaProperty"",""location"":{""path"":""[35m/users/laurentan/code/react-forget/forget/node_modules/[36m@babel/types[39m[35m/lib/index.d.ts[39m"",""line"":455,""char"":1}} 
│                 ├─ 
{""id"":464,""kind"":""Object"",""name"":""MixedTypeAnnotation"",""location"":{""path"":""[35m/users/laurentan/code/react-forget/forget/node_modules/[36m@babel/types[39m[35m/lib/index.d.ts[39m"",""line"":761,""char"":1}} 
│                 ├─ 
{""id"":465,""kind"":""Object"",""name"":""ModuleExpression"",""location"":{""path"":""[35m/users/laurentan/code/react-forget/forget/node_modules/[36m@babel/types[39m[35m/lib/index.d.ts[39m"",""line"":1073,""char"":1}} 
│                 ├─ 
{""id"":466,""kind"":""Object"",""name"":""NewExpression"",""location"":{""path"":""[35m/users/laurentan/code/react-forget/forget/node_modules/[36m@babel/types[39m[35m/lib/index.d.ts[39m"",""line"":222,""char"":1}} 
│                 ├─ 
{""id"":467,""kind"":""Object"",""name"":""Noop"",""location"":{""path"":""[35m/users/laurentan/code/react-forget/forget/node_modules/[36m@babel/types[39m[35m/lib/index.d.ts[39m"",""line"":1023,""char"":1}} 
│                 ├─ 
{""id"":468,""kind"":""Object"",""name"":""NullLiteral"",""location"":{""path"":""[35m/users/laurentan/code/react-forget/forget/node_modules/[36m@babel/types[39m[35m/lib/index.d.ts[39m"",""line"":189,""char"":1}} 
│                 ├─ 
{""id"":469,""kind"":""Object"",""name"":""NullLiteralTypeAnnotation"",""location"":{""path"":""[35m/users/laurentan/code/react-forget/forget/node_modules/[36m@babel/types[39m[35m/lib/index.d.ts[39m"",""line"":639,""char"":1}} 
│                 ├─ 
{""id"":470,""kind"":""Object"",""name"":""NullableTypeAnnotation"",""location"":{""path"":""[35m/users/laurentan/code/react-forget/forget/node_modules/[36m@babel/types[39m[35m/lib/index.d.ts[39m"",""line"":767,""char"":1}} 
│                 ├─ 
{""id"":471,""kind"":""Object"",""name"":""NumberLiteral$1"",""location"":{""path"":""[35m/users/laurentan/code/react-forget/forget/node_modules/[36m@babel/types[39m[35m/lib/index.d.ts[39m"",""line"":185,""char"":1}} 
│                 ├─ 
{""id"":472,""kind"":""Object"",""name"":""NumberLiteralTypeAnnotation"",""location"":{""path"":""[35m/users/laurentan/code/react-forget/forget/node_modules/[36m@babel/types[39m[35m/lib/index.d.ts[39m"",""line"":771,""char"":1}} 
│                 ├─ 
{""id"":473,""kind"":""Object"",""name"":""NumberTypeAnnotation"",""location"":{""path"":""[35m/users/laurentan/code/react-forget/forget/node_modules/[36m@babel/types[39m[35m/lib/index.d.ts[39m"",""line"":775,""char"":1}} 
│                 ├─ 
{""id"":474,""kind"":""Object"",""name"":""NumericLiteral"",""location"":{""path"":""[35m/users/laurentan/code/react-forget/forget/node_modules/[36m@babel/types[39m[35m/lib/index.d.ts[39m"",""line"":178,""char"":1}} 
│                 ├─ 
{""id"":475,""kind"":""Object"",""name"":""ObjectExpression"",""location"":{""path"":""[35m/users/laurentan/code/react-forget/forget/node_modules/[36m@babel/types[39m[35m/lib/index.d.ts[39m"",""line"":238,""char"":1}} 
│                 ├─ 
{""id"":476,""kind"":""Object"",""name"":""ObjectMethod"",""location"":{""path"":""[35m/users/laurentan/code/react-forget/forget/node_modules/[36m@babel/types[39m[35m/lib/index.d.ts[39m"",""line"":242,""char"":1}} 
│                 ├─ 
{""id"":477,""kind"":""Object"",""name"":""ObjectPattern"",""location"":{""path"":""[35m/users/laurentan/code/react-forget/forget/node_modules/[36m@babel/types[39m[35m/lib/index.d.ts[39m"",""line"":479,""char"":1}} 
│                 ├─ 
{""id"":478,""kind"":""Object"",""name"":""ObjectProperty"",""location"":{""path"":""[35m/users/laurentan/code/react-forget/forget/node_modules/[36m@babel/types[39m[35m/lib/index.d.ts[39m"",""line"":255,""char"":1}} 
│                 ├─ 
{""id"":479,""kind"":""Object"",""name"":""ObjectTypeAnnotation"",""location"":{""path"":""[35m/users/laurentan/code/react-forget/forget/node_modules/[36m@babel/types[39m[35m/lib/index.d.ts[39m"",""line"":778,""char"":1}} 
│                 ├─ 
{""id"":480,""kind"":""Object"",""name"":""ObjectTypeCallProperty"",""location"":{""path"":""[35m/users/laurentan/code/react-forget/forget/node_modules/[36m@babel/types[39m[35m/lib/index.d.ts[39m"",""line"":795,""char"":1}} 
│                 ├─ 
{""id"":481,""kind"":""Object"",""name"":""ObjectTypeIndexer"",""location"":{""path"":""[35m/users/laurentan/code/react-forget/forget/node_modules/[36m@babel/types[39m[35m/lib/index.d.ts[39m"",""line"":800,""char"":1}} 
│                 ├─ 
{""id"":482,""kind"":""Object"",""name"":""ObjectTypeInternalSlot"",""location"":{""path"":""[35m/users/laurentan/code/react-forget/forget/node_modules/[36m@babel/types[39m[35m/lib/index.d.ts[39m"",""line"":787,""char"":1}} 
│                 ├─ 
{""id"":483,""kind"":""Object"",""name"":""ObjectTypeProperty"",""location"":{""path"":""[35m/users/laurentan/code/react-forget/forget/node_modules/[36m@babel/types[39m[35m/lib/index.d.ts[39m"",""line"":808,""char"":1}} 
│                 ├─ 
{""id"":484,""kind"":""Object"",""name"":""ObjectTypeSpreadProperty"",""location"":{""path"":""[35m/users/laurentan/code/react-forget/forget/node_modules/[36m@babel/types[39m[35m/lib/index.d.ts[39m"",""line"":819,""char"":1}} 
│                 ├─ 
{""id"":485,""kind"":""Object"",""name"":""OpaqueType"",""location"":{""path"":""[35m/users/laurentan/code/react-forget/forget/node_modules/[36m@babel/types[39m[35m/lib/index.d.ts[39m"",""line"":823,""char"":1}} 
│                 ├─ 
{""id"":486,""kind"":""Object"",""name"":""OptionalCallExpression"",""location"":{""path"":""[35m/users/laurentan/code/react-forget/forget/node_modules/[36m@babel/types[39m[35m/lib/index.d.ts[39m"",""line"":545,""char"":1}} 
│                 ├─ 
{""id"":487,""kind"":""Object"",""name"":""OptionalIndexedAccessType"",""location"":{""path"":""[35m/users/laurentan/code/react-forget/forget/node_modules/[36m@babel/types[39m[35m/lib/index.d.ts[39m"",""line"":949,""char"":1}} 
│                 ├─ 
{""id"":488,""kind"":""Object"",""name"":""OptionalMemberExpression"",""location"":{""path"":""[35m/users/laurentan/code/react-forget/forget/node_modules/[36m@babel/types[39m[35m/lib/index.d.ts[39m"",""line"":538,""char"":1}} 
│                 ├─ 
{""id"":489,""kind"":""Object"",""name"":""ParenthesizedExpression"",""location"":{""path"":""[35m/users/laurentan/code/react-forget/forget/node_modules/[36m@babel/types[39m[35m/lib/index.d.ts[39m"",""line"":288,""char"":1}} 
│                 ├─ 
{""id"":490,""kind"":""Object"",""name"":""PipelineBareFunction"",""location"":{""path"":""[35m/users/laurentan/code/react-forget/forget/node_modules/[36m@babel/types[39m[35m/lib/index.d.ts[39m"",""line"":1084,""char"":1}} 
│                 ├─ 
{""id"":491,""kind"":""Object"",""name"":""PipelinePrimaryTopicReference"",""location"":{""path"":""[35m/users/laurentan/code/react-forget/forget/node_modules/[36m@babel/types[39m[35m/lib/index.d.ts[39m"",""line"":1088,""char"":1}} 
│                 ├─ 
{""id"":492,""kind"":""Object"",""name"":""PipelineTopicExpression"",""location"":{""path"":""[35m/users/laurentan/code/react-forget/forget/node_modules/[36m@babel/types[39m[35m/lib/index.d.ts[39m"",""line"":1080,""char"":1}} 
│                 ├─ 
{""id"":493,""kind"":""Object"",""name"":""Placeholder"",""location"":{""path"":""[35m/users/laurentan/code/react-forget/forget/node_modules/[36m@babel/types[39m[35m/lib/index.d.ts[39m"",""line"":1026,""char"":1}} 
│                 ├─ 
{""id"":494,""kind"":""Object"",""name"":""PrivateName"",""location"":{""path"":""[35m/users/laurentan/code/react-forget/forget/node_modules/[36m@babel/types[39m[35m/lib/index.d.ts[39m"",""line"":617,""char"":1}} 
│                 ├─ 
{""id"":495,""kind"":""Object"",""name"":""Program"",""location"":{""path"":""[35m/users/laurentan/code/react-forget/forget/node_modules/[36m@babel/types[39m[35m/lib/index.d.ts[39m"",""line"":230,""char"":1}} 
│                 ├─ 
{""id"":496,""kind"":""Object"",""name"":""QualifiedTypeIdentifier"",""location"":{""path"":""[35m/users/laurentan/code/react-forget/forget/node_modules/[36m@babel/types[39m[35m/lib/index.d.ts[39m"",""line"":830,""char"":1}} 
│                 ├─ 
{""id"":497,""kind"":""Object"",""name"":""RecordExpression"",""location"":{""path"":""[35m/users/laurentan/code/react-forget/forget/node_modules/[36m@babel/types[39m[35m/lib/index.d.ts[39m"",""line"":1061,""char"":1}} 
│                 ├─ 
{""id"":498,""kind"":""Object"",""name"":""RegExpLiteral"",""location"":{""path"":""[35m/users/laurentan/code/react-forget/forget/node_modules/[36m@babel/types[39m[35m/lib/index.d.ts[39m"",""line"":196,""char"":1}} 
│                 ├─ 
{""id"":499,""kind"":""Object"",""name"":""RegexLiteral$1"",""location"":{""path"":""[35m/users/laurentan/code/react-forget/forget/node_modules/[36m@babel/types[39m[35m/lib/index.d.ts[39m"",""line"":204,""char"":1}} 
│                 ├─ 
{""id"":500,""kind"":""Object"",""name"":""RestElement"",""location"":{""path"":""[35m/users/laurentan/code/react-forget/forget/node_modules/[36m@babel/types[39m[35m/lib/index.d.ts[39m"",""line"":263,""char"":1}} 
│                 ├─ 
{""id"":501,""kind"":""Object"",""name"":""RestProperty$1"",""location"":{""path"":""[35m/users/laurentan/code/react-forget/forget/node_modules/[36m@babel/types[39m[35m/lib/index.d.ts[39m"",""line"":273,""char"":1}} 
│                 ├─ 
{""id"":502,""kind"":""Object"",""name"":""ReturnStatement"",""location"":{""path"":""[35m/users/laurentan/code/react-forget/forget/node_modules/[36m@babel/types[39m[35m/lib/index.d.ts[39m"",""line"":280,""char"":1}} 
│                 ├─ 
{""id"":503,""kind"":""Object"",""name"":""SequenceExpression"",""location"":{""path"":""[35m/users/laurentan/code/react-forget/forget/node_modules/[36m@babel/types[39m[35m/lib/index.d.ts[39m"",""line"":284,""char"":1}} 
│                 ├─ 
{""id"":504,""kind"":""Object"",""name"":""SpreadElement"",""location"":{""path"":""[35m/users/laurentan/code/react-forget/forget/node_modules/[36m@babel/types[39m[35m/lib/index.d.ts[39m"",""line"":485,""char"":1}} 
│                 ├─ 
{""id"":505,""kind"":""Object"",""name"":""SpreadProperty$1"",""location"":{""path"":""[35m/users/laurentan/code/react-forget/forget/node_modules/[36m@babel/types[39m[35m/lib/index.d.ts[39m"",""line"":492,""char"":1}} 
│                 ├─ 
{""id"":506,""kind"":""Object"",""name"":""StaticBlock"",""location"":{""path"":""[35m/users/laurentan/code/react-forget/forget/node_modules/[36m@babel/types[39m[35m/lib/index.d.ts[39m"",""line"":621,""char"":1}} 
│                 ├─ 
{""id"":507,""kind"":""Object"",""name"":""StringLiteral"",""location"":{""path"":""[35m/users/laurentan/code/react-forget/forget/node_modules/[36m@babel/types[39m[35m/lib/index.d.ts[39m"",""line"":174,""char"":1}} 
│                 ├─ 
{""id"":508,""kind"":""Object"",""name"":""StringLiteralTypeAnnotation"",""location"":{""path"":""[35m/users/laurentan/code/react-forget/forget/node_modules/[36m@babel/types[39m[35m/lib/index.d.ts[39m"",""line"":835,""char"":1}} 
│                 ├─ 
{""id"":509,""kind"":""Object"",""name"":""StringTypeAnnotation"",""location"":{""path"":""[35m/users/laurentan/code/react-forget/forget/node_modules/[36m@babel/types[39m[35m/lib/index.d.ts[39m"",""line"":839,""char"":1}} 
│                 ├─ 
{""id"":510,""kind"":""Object"",""name"":""Super"",""location"":{""path"":""[35m/users/laurentan/code/react-forget/forget/node_modules/[36m@babel/types[39m[35m/lib/index.d.ts[39m"",""line"":496,""char"":1}} 
│                 ├─ 
{""id"":511,""kind"":""Object"",""name"":""SwitchCase"",""location"":{""path"":""[35m/users/laurentan/code/react-forget/forget/node_modules/[36m@babel/types[39m[35m/lib/index.d.ts[39m"",""line"":292,""char"":1}} 
│                 ├─ 
{""id"":512,""kind"":""Object"",""name"":""SwitchStatement"",""location"":{""path"":""[35m/users/laurentan/code/react-forget/forget/node_modules/[36m@babel/types[39m[35m/lib/index.d.ts[39m"",""line"":297,""char"":1}} 
│                 ├─ 
{""id"":513,""kind"":""Object"",""name"":""SymbolTypeAnnotation"",""location"":{""path"":""[35m/users/laurentan/code/react-forget/forget/node_modules/[36m@babel/types[39m[35m/lib/index.d.ts[39m"",""line"":842,""char"":1}} 
│                 ├─ 
{""id"":514,""kind"":""Object"",""name"":""TSAnyKeyword"",""location"":{""path"":""[35m/users/laurentan/code/react-forget/forget/node_modules/[36m@babel/types[39m[35m/lib/index.d.ts[39m"",""line"":1171,""char"":1}} 
│                 ├─ 
{""id"":515,""kind"":""Object"",""name"":""TSArrayType"",""location"":{""path"":""[35m/users/laurentan/code/react-forget/forget/node_modules/[36m@babel/types[39m[35m/lib/index.d.ts[39m"",""line"":1246,""char"":1}} 
│                 ├─ 
{""id"":516,""kind"":""Object"",""name"":""TSAsExpression"",""location"":{""path"":""[35m/users/laurentan/code/react-forget/forget/node_modules/[36m@babel/types[39m[35m/lib/index.d.ts[39m"",""line"":1342,""char"":1}} 
│                 ├─ 
{""id"":517,""kind"":""Object"",""name"":""TSBigIntKeyword"",""location"":{""path"":""[35m/users/laurentan/code/react-forget/forget/node_modules/[36m@babel/types[39m[35m/lib/index.d.ts[39m"",""line"":1177,""char"":1}} 
│                 ├─ 
{""id"":518,""kind"":""Object"",""name"":""TSBooleanKeyword"",""location"":{""path"":""[35m/users/laurentan/code/react-forget/forget/node_modules/[36m@babel/types[39m[35m/lib/index.d.ts[39m"",""line"":1174,""char"":1}} 
│                 ├─ 
{""id"":519,""kind"":""Object"",""name"":""TSCallSignatureDeclaration"",""location"":{""path"":""[35m/users/laurentan/code/react-forget/forget/node_modules/[36m@babel/types[39m[35m/lib/index.d.ts[39m"",""line"":1132,""char"":1}} 
│                 ├─ 
{""id"":520,""kind"":""Object"",""name"":""TSConditionalType"",""location"":{""path"":""[35m/users/laurentan/code/react-forget/forget/node_modules/[36m@babel/types[39m[35m/lib/index.d.ts[39m"",""line"":1276,""char"":1}} 
│                 ├─ 
{""id"":521,""kind"":""Object"",""name"":""TSConstructSignatureDeclaration"",""location"":{""path"":""[35m/users/laurentan/code/react-forget/forget/node_modules/[36m@babel/types[39m[35m/lib/index.d.ts[39m"",""line"":1138,""char"":1}} 
│                 ├─ 
{""id"":522,""kind"":""Object"",""name"":""TSConstructorType"",""location"":{""path"":""[35m/users/laurentan/code/react-forget/forget/node_modules/[36m@babel/types[39m[35m/lib/index.d.ts[39m"",""line"":1219,""char"":1}} 
│                 ├─ 
{""id"":523,""kind"":""Object"",""name"":""TSDeclareFunction"",""location"":{""path"":""[35m/users/laurentan/code/react-forget/forget/node_modules/[36m@babel/types[39m[35m/lib/index.d.ts[39m"",""line"":1099,""char"":1}} 
│                 ├─ 
{""id"":524,""kind"":""Object"",""name"":""TSDeclareMethod"",""location"":{""path"":""[35m/users/laurentan/code/react-forget/forget/node_modules/[36m@babel/types[39m[35m/lib/index.d.ts[39m"",""line"":1109,""char"":1}} 
│                 ├─ 
{""id"":525,""kind"":""Object"",""name"":""TSEnumDeclaration"",""location"":{""path"":""[35m/users/laurentan/code/react-forget/forget/node_modules/[36m@babel/types[39m[35m/lib/index.d.ts[39m"",""line"":1352,""char"":1}} 
│                 ├─ 
{""id"":526,""kind"":""Object"",""name"":""TSEnumMember"",""location"":{""path"":""[35m/users/laurentan/code/react-forget/forget/node_modules/[36m@babel/types[39m[35m/lib/index.d.ts[39m"",""line"":1360,""char"":1}} 
│                 ├─ 
{""id"":527,""kind"":""Object"",""name"":""TSExportAssignment"",""location"":{""path"":""[35m/users/laurentan/code/react-forget/forget/node_modules/[36m@babel/types[39m[35m/lib/index.d.ts[39m"",""line"":1397,""char"":1}} 
│                 ├─ 
{""id"":528,""kind"":""Object"",""name"":""TSExpressionWithTypeArguments"",""location"":{""path"":""[35m/users/laurentan/code/react-forget/forget/node_modules/[36m@babel/types[39m[35m/lib/index.d.ts[39m"",""line"":1313,""char"":1}} 
│                 ├─ 
{""id"":529,""kind"":""Object"",""name"":""TSExternalModuleReference"",""location"":{""path"":""[35m/users/laurentan/code/react-forget/forget/node_modules/[36m@babel/types[39m[35m/lib/index.d.ts[39m"",""line"":1389,""char"":1}} 
│                 ├─ 
{""id"":530,""kind"":""Object"",""name"":""TSFunctionType"",""location"":{""path"":""[35m/users/laurentan/code/react-forget/forget/node_modules/[36m@babel/types[39m[35m/lib/index.d.ts[39m"",""line"":1213,""char"":1}} 
│                 ├─ 
{""id"":531,""kind"":""Object"",""name"":""TSImportEqualsDeclaration"",""location"":{""path"":""[35m/users/laurentan/code/react-forget/forget/node_modules/[36m@babel/types[39m[35m/lib/index.d.ts[39m"",""line"":1382,""char"":1}} 
│                 ├─ 
{""id"":532,""kind"":""Object"",""name"":""TSImportType"",""location"":{""path"":""[35m/users/laurentan/code/react-forget/forget/node_modules/[36m@babel/types[39m[35m/lib/index.d.ts[39m"",""line"":1376,""char"":1}} 
│                 ├─ 
{""id"":533,""kind"":""Object"",""name"":""TSIndexSignature"",""location"":{""path"":""[35m/users/laurentan/code/react-forget/forget/node_modules/[36m@babel/types[39m[35m/lib/index.d.ts[39m"",""line"":1164,""char"":1}} 
│                 ├─ 
{""id"":534,""kind"":""Object"",""name"":""TSIndexedAccessType"",""location"":{""path"":""[35m/users/laurentan/code/react-forget/forget/node_modules/[36m@babel/types[39m[35m/lib/index.d.ts[39m"",""line"":1296,""char"":1}} 
│                 ├─ 
{""id"":535,""kind"":""Object"",""name"":""TSInferType"",""location"":{""path"":""[35m/users/laurentan/code/react-forget/forget/node_modules/[36m@babel/types[39m[35m/lib/index.d.ts[39m"",""line"":1283,""char"":1}} 
│                 ├─ 
{""id"":536,""kind"":""Object"",""name"":""TSInstantiationExpression"",""location"":{""path"":""[35m/users/laurentan/code/react-forget/forget/node_modules/[36m@babel/types[39m[35m/lib/index.d.ts[39m"",""line"":1337,""char"":1}} 
│                 ├─ 
{""id"":537,""kind"":""Object"",""name"":""TSInterfaceBody"",""location"":{""path"":""[35m/users/laurentan/code/react-forget/forget/node_modules/[36m@babel/types[39m[35m/lib/index.d.ts[39m"",""line"":1326,""char"":1}} 
│                 ├─ 
{""id"":538,""kind"":""Object"",""name"":""TSInterfaceDeclaration"",""location"":{""path"":""[35m/users/laurentan/code/react-forget/forget/node_modules/[36m@babel/types[39m[35m/lib/index.d.ts[39m"",""line"":1318,""char"":1}} 
│                 ├─ 
{""id"":539,""kind"":""Object"",""name"":""TSIntersectionType"",""location"":{""path"":""[35m/users/laurentan/code/react-forget/forget/node_modules/[36m@babel/types[39m[35m/lib/index.d.ts[39m"",""line"":1272,""char"":1}} 
│                 ├─ 
{""id"":540,""kind"":""Object"",""name"":""TSIntrinsicKeyword"",""location"":{""path"":""[35m/users/laurentan/code/react-forget/forget/node_modules/[36m@babel/types[39m[35m/lib/index.d.ts[39m"",""line"":1180,""char"":1}} 
│                 ├─ 
{""id"":541,""kind"":""Object"",""name"":""TSLiteralType"",""location"":{""path"":""[35m/users/laurentan/code/react-forget/forget/node_modules/[36m@babel/types[39m[35m/lib/index.d.ts[39m"",""line"":1309,""char"":1}} 
│                 ├─ 
{""id"":542,""kind"":""Object"",""name"":""TSMappedType"",""location"":{""path"":""[35m/users/laurentan/code/react-forget/forget/node_modules/[36m@babel/types[39m[35m/lib/index.d.ts[39m"",""line"":1301,""char"":1}} 
│                 ├─ 
{""id"":543,""kind"":""Object"",""name"":""TSMethodSignature"",""location"":{""path"":""[35m/users/laurentan/code/react-forget/forget/node_modules/[36m@babel/types[39m[35m/lib/index.d.ts[39m"",""line"":1154,""char"":1}} 
│                 ├─ 
{""id"":544,""kind"":""Object"",""name"":""TSModuleBlock"",""location"":{""path"":""[35m/users/laurentan/code/react-forget/forget/node_modules/[36m@babel/types[39m[35m/lib/index.d.ts[39m"",""line"":1372,""char"":1}} 
│                 ├─ 
{""id"":545,""kind"":""Object"",""name"":""TSModuleDeclaration"",""location"":{""path"":""[35m/users/laurentan/code/react-forget/forget/node_modules/[36m@babel/types[39m[35m/lib/index.d.ts[39m"",""line"":1365,""char"":1}} 
│                 ├─ 
{""id"":546,""kind"":""Object"",""name"":""TSNamedTupleMember"",""location"":{""path"":""[35m/users/laurentan/code/react-forget/forget/node_modules/[36m@babel/types[39m[35m/lib/index.d.ts[39m"",""line"":1262,""char"":1}} 
│                 ├─ 
{""id"":547,""kind"":""Object"",""name"":""TSNamespaceExportDeclaration"",""location"":{""path"":""[35m/users/laurentan/code/react-forget/forget/node_modules/[36m@babel/types[39m[35m/lib/index.d.ts[39m"",""line"":1401,""char"":1}} 
│                 ├─ 
{""id"":548,""kind"":""Object"",""name"":""TSNeverKeyword"",""location"":{""path"":""[35m/users/laurentan/code/react-forget/forget/node_modules/[36m@babel/types[39m[35m/lib/index.d.ts[39m"",""line"":1183,""char"":1}} 
│                 ├─ 
{""id"":549,""kind"":""Object"",""name"":""TSNonNullExpression"",""location"":{""path"":""[35m/users/laurentan/code/react-forget/forget/node_modules/[36m@babel/types[39m[35m/lib/index.d.ts[39m"",""line"":1393,""char"":1}} 
│                 ├─ 
{""id"":550,""kind"":""Object"",""name"":""TSNullKeyword"",""location"":{""path"":""[35m/users/laurentan/code/react-forget/forget/node_modules/[36m@babel/types[39m[35m/lib/index.d.ts[39m"",""line"":1186,""char"":1}} 
│                 ├─ 
{""id"":551,""kind"":""Object"",""name"":""TSNumberKeyword"",""location"":{""path"":""[35m/users/laurentan/code/react-forget/forget/node_modules/[36m@babel/types[39m[35m/lib/index.d.ts[39m"",""line"":1189,""char"":1}} 
│                 ├─ 
{""id"":552,""kind"":""Object"",""name"":""TSObjectKeyword"",""location"":{""path"":""[35m/users/laurentan/code/react-forget/forget/node_modules/[36m@babel/types[39m[35m/lib/index.d.ts[39m"",""line"":1192,""char"":1}} 
│                 ├─ 
{""id"":553,""kind"":""Object"",""name"":""TSOptionalType"",""location"":{""path"":""[35m/users/laurentan/code/react-forget/forget/node_modules/[36m@babel/types[39m[35m/lib/index.d.ts[39m"",""line"":1254,""char"":1}} 
│                 ├─ 
{""id"":554,""kind"":""Object"",""name"":""TSParameterProperty"",""location"":{""path"":""[35m/users/laurentan/code/react-forget/forget/node_modules/[36m@babel/types[39m[35m/lib/index.d.ts[39m"",""line"":1091,""char"":1}} 
│                 ├─ 
{""id"":555,""kind"":""Object"",""name"":""TSParenthesizedType"",""location"":{""path"":""[35m/users/laurentan/code/react-forget/forget/node_modules/[36m@babel/types[39m[35m/lib/index.d.ts[39m"",""line"":1287,""char"":1}} 
│                 ├─ 
{""id"":556,""kind"":""Object"",""name"":""TSPropertySignature"",""location"":{""path"":""[35m/users/laurentan/code/react-forget/forget/node_modules/[36m@babel/types[39m[35m/lib/index.d.ts[39m"",""line"":1144,""char"":1}} 
│                 ├─ 
{""id"":557,""kind"":""Object"",""name"":""TSQualifiedName"",""location"":{""path"":""[35m/users/laurentan/code/react-forget/forget/node_modules/[36m@babel/types[39m[35m/lib/index.d.ts[39m"",""line"":1127,""char"":1}} 
│                 ├─ 
{""id"":558,""kind"":""Object"",""name"":""TSRestType"",""location"":{""path"":""[35m/users/laurentan/code/react-forget/forget/node_modules/[36m@babel/types[39m[35m/lib/index.d.ts[39m"",""line"":1258,""char"":1}} 
│                 ├─ 
{""id"":559,""kind"":""Object"",""name"":""TSStringKeyword"",""location"":{""path"":""[35m/users/laurentan/code/react-forget/forget/node_modules/[36m@babel/types[39m[35m/lib/index.d.ts[39m"",""line"":1195,""char"":1}} 
│                 ├─ 
{""id"":560,""kind"":""Object"",""name"":""TSSymbolKeyword"",""location"":{""path"":""[35m/users/laurentan/code/react-forget/forget/node_modules/[36m@babel/types[39m[35m/lib/index.d.ts[39m"",""line"":1198,""char"":1}} 
│                 ├─ 
{""id"":561,""kind"":""Object"",""name"":""TSThisType"",""location"":{""path"":""[35m/users/laurentan/code/react-forget/forget/node_modules/[36m@babel/types[39m[35m/lib/index.d.ts[39m"",""line"":1210,""char"":1}} 
│                 ├─ 
{""id"":562,""kind"":""Object"",""name"":""TSTupleType"",""location"":{""path"":""[35m/users/laurentan/code/react-forget/forget/node_modules/[36m@babel/types[39m[35m/lib/index.d.ts[39m"",""line"":1250,""char"":1}} 
│                 ├─ 
{""id"":563,""kind"":""Object"",""name"":""TSTypeAliasDeclaration"",""location"":{""path"":""[35m/users/laurentan/code/react-forget/forget/node_modules/[36m@babel/types[39m[35m/lib/index.d.ts[39m"",""line"":1330,""char"":1}} 
│                 ├─ 
{""id"":564,""kind"":""Object"",""name"":""TSTypeAnnotation"",""location"":{""path"":""[35m/users/laurentan/code/react-forget/forget/node_modules/[36m@babel/types[39m[35m/lib/index.d.ts[39m"",""line"":1405,""char"":1}} 
│                 ├─ 
{""id"":565,""kind"":""Object"",""name"":""TSTypeAssertion"",""location"":{""path"":""[35m/users/laurentan/code/react-forget/forget/node_modules/[36m@babel/types[39m[35m/lib/index.d.ts[39m"",""line"":1347,""char"":1}} 
│                 ├─ 
{""id"":566,""kind"":""Object"",""name"":""TSTypeLiteral"",""location"":{""path"":""[35m/users/laurentan/code/react-forget/forget/node_modules/[36m@babel/types[39m[35m/lib/index.d.ts[39m"",""line"":1242,""char"":1}} 
│                 ├─ 
{""id"":567,""kind"":""Object"",""name"":""TSTypeOperator"",""location"":{""path"":""[35m/users/laurentan/code/react-forget/forget/node_modules/[36m@babel/types[39m[35m/lib/index.d.ts[39m"",""line"":1291,""char"":1}} 
│                 ├─ 
{""id"":568,""kind"":""Object"",""name"":""TSTypeParameter"",""location"":{""path"":""[35m/users/laurentan/code/react-forget/forget/node_modules/[36m@babel/types[39m[35m/lib/index.d.ts[39m"",""line"":1417,""char"":1}} 
│                 ├─ 
{""id"":569,""kind"":""Object"",""name"":""TSTypeParameterDeclaration"",""location"":{""path"":""[35m/users/laurentan/code/react-forget/forget/node_modules/[36m@babel/types[39m[35m/lib/index.d.ts[39m"",""line"":1413,""char"":1}} 
│                 ├─ 
{""id"":570,""kind"":""Object"",""name"":""TSTypeParameterInstantiation"",""location"":{""path"":""[35m/users/laurentan/code/react-forget/forget/node_modules/[36m@babel/types[39m[35m/lib/index.d.ts[39m"",""line"":1409,""char"":1}} 
│                 ├─ 
{""id"":571,""kind"":""Object"",""name"":""TSTypePredicate"",""location"":{""path"":""[35m/users/laurentan/code/react-forget/forget/node_modules/[36m@babel/types[39m[35m/lib/index.d.ts[39m"",""line"":1231,""char"":1}} 
│                 ├─ 
{""id"":572,""kind"":""Object"",""name"":""TSTypeQuery"",""location"":{""path"":""[35m/users/laurentan/code/react-forget/forget/node_modules/[36m@babel/types[39m[35m/lib/index.d.ts[39m"",""line"":1237,""char"":1}} 
│                 ├─ 
{""id"":573,""kind"":""Object"",""name"":""TSTypeReference"",""location"":{""path"":""[35m/users/laurentan/code/react-forget/forget/node_modules/[36m@babel/types[39m[35m/lib/index.d.ts[39m"",""line"":1226,""char"":1}} 
│                 ├─ 
{""id"":574,""kind"":""Object"",""name"":""TSUndefinedKeyword"",""location"":{""path"":""[35m/users/laurentan/code/react-forget/forget/node_modules/[36m@babel/types[39m[35m/lib/index.d.ts[39m"",""line"":1201,""char"":1}} 
│                 ├─ 
{""id"":575,""kind"":""Object"",""name"":""TSUnionType"",""location"":{""path"":""[35m/users/laurentan/code/react-forget/forget/node_modules/[36m@babel/types[39m[35m/lib/index.d.ts[39m"",""line"":1268,""char"":1}} 
│                 ├─ 
{""id"":576,""kind"":""Object"",""name"":""TSUnknownKeyword"",""location"":{""path"":""[35m/users/laurentan/code/react-forget/forget/node_modules/[36m@babel/types[39m[35m/lib/index.d.ts[39m"",""line"":1204,""char"":1}} 
│                 ├─ 
{""id"":577,""kind"":""Object"",""name"":""TSVoidKeyword"",""location"":{""path"":""[35m/users/laurentan/code/react-forget/forget/node_modules/[36m@babel/types[39m[35m/lib/index.d.ts[39m"",""line"":1207,""char"":1}} 
│                 ├─ 
{""id"":578,""kind"":""Object"",""name"":""TaggedTemplateExpression"",""location"":{""path"":""[35m/users/laurentan/code/react-forget/forget/node_modules/[36m@babel/types[39m[35m/lib/index.d.ts[39m"",""line"":499,""char"":1}} 
│                 ├─ 
{""id"":579,""kind"":""Object"",""name"":""TemplateElement"",""location"":{""path"":""[35m/users/laurentan/code/react-forget/forget/node_modules/[36m@babel/types[39m[35m/lib/index.d.ts[39m"",""line"":505,""char"":1}} 
│                 ├─ 
{""id"":580,""kind"":""Object"",""name"":""TemplateLiteral"",""location"":{""path"":""[35m/users/laurentan/code/react-forget/forget/node_modules/[36m@babel/types[39m[35m/lib/index.d.ts[39m"",""line"":513,""char"":1}} 
│                 ├─ 
{""id"":581,""kind"":""Object"",""name"":""ThisExpression"",""location"":{""path"":""[35m/users/laurentan/code/react-forget/forget/node_modules/[36m@babel/types[39m[35m/lib/index.d.ts[39m"",""line"":302,""char"":1}} 
│                 ├─ 
{""id"":582,""kind"":""Object"",""name"":""ThisTypeAnnotation"",""location"":{""path"":""[35m/users/laurentan/code/react-forget/forget/node_modules/[36m@babel/types[39m[35m/lib/index.d.ts[39m"",""line"":845,""char"":1}} 
│                 ├─ 
{""id"":583,""kind"":""Object"",""name"":""ThrowStatement"",""location"":{""path"":""[35m/users/laurentan/code/react-forget/forget/node_modules/[36m@babel/types[39m[35m/lib/index.d.ts[39m"",""line"":305,""char"":1}} 
│                 ├─ 
{""id"":584,""kind"":""Object"",""name"":""TopicReference"",""location"":{""path"":""[35m/users/laurentan/code/react-forget/forget/node_modules/[36m@babel/types[39m[35m/lib/index.d.ts[39m"",""line"":1077,""char"":1}} 
│                 ├─ 
{""id"":585,""kind"":""Object"",""name"":""TryStatement"",""location"":{""path"":""[35m/users/laurentan/code/react-forget/forget/node_modules/[36m@babel/types[39m[35m/lib/index.d.ts[39m"",""line"":309,""char"":1}} 
│                 ├─ 
{""id"":586,""kind"":""Object"",""name"":""TupleExpression"",""location"":{""path"":""[35m/users/laurentan/code/react-forget/forget/node_modules/[36m@babel/types[39m[35m/lib/index.d.ts[39m"",""line"":1065,""char"":1}} 
│                 ├─ 
{""id"":587,""kind"":""Object"",""name"":""TupleTypeAnnotation"",""location"":{""path"":""[35m/users/laurentan/code/react-forget/forget/node_modules/[36m@babel/types[39m[35m/lib/index.d.ts[39m"",""line"":848,""char"":1}} 
│                 ├─ 
{""id"":588,""kind"":""Object"",""name"":""TypeAlias"",""location"":{""path"":""[35m/users/laurentan/code/react-forget/forget/node_modules/[36m@babel/types[39m[35m/lib/index.d.ts[39m"",""line"":856,""char"":1}} 
│                 ├─ 
{""id"":589,""kind"":""Object"",""name"":""TypeAnnotation"",""location"":{""path"":""[35m/users/laurentan/code/react-forget/forget/node_modules/[36m@babel/types[39m[35m/lib/index.d.ts[39m"",""line"":862,""char"":1}} 
│                 ├─ 
{""id"":590,""kind"":""Object"",""name"":""TypeCastExpression"",""location"":{""path"":""[35m/users/laurentan/code/react-forget/forget/node_modules/[36m@babel/types[39m[35m/lib/index.d.ts[39m"",""line"":866,""char"":1}} 
│                 ├─ 
{""id"":591,""kind"":""Object"",""name"":""TypeParameter"",""location"":{""path"":""[35m/users/laurentan/code/react-forget/forget/node_modules/[36m@babel/types[39m[35m/lib/index.d.ts[39m"",""line"":871,""char"":1}} 
│                 ├─ 
{""id"":592,""kind"":""Object"",""name"":""TypeParameterDeclaration"",""location"":{""path"":""[35m/users/laurentan/code/react-forget/forget/node_modules/[36m@babel/types[39m[35m/lib/index.d.ts[39m"",""line"":878,""char"":1}} 
│                 ├─ 
{""id"":593,""kind"":""Object"",""name"":""TypeParameterInstantiation"",""location"":{""path"":""[35m/users/laurentan/code/react-forget/forget/node_modules/[36m@babel/types[39m[35m/lib/index.d.ts[39m"",""line"":882,""char"":1}} 
│                 ├─ 
{""id"":594,""kind"":""Object"",""name"":""TypeofTypeAnnotation"",""location"":{""path"":""[35m/users/laurentan/code/react-forget/forget/node_modules/[36m@babel/types[39m[35m/lib/index.d.ts[39m"",""line"":852,""char"":1}} 
│                 ├─ 
{""id"":595,""kind"":""Object"",""name"":""UnaryExpression"",""location"":{""path"":""[35m/users/laurentan/code/react-forget/forget/node_modules/[36m@babel/types[39m[35m/lib/index.d.ts[39m"",""line"":315,""char"":1}} 
│                 ├─ 
{""id"":596,""kind"":""Object"",""name"":""UnionTypeAnnotation"",""location"":{""path"":""[35m/users/laurentan/code/react-forget/forget/node_modules/[36m@babel/types[39m[35m/lib/index.d.ts[39m"",""line"":886,""char"":1}} 
│                 ├─ 
{""id"":597,""kind"":""Object"",""name"":""UpdateExpression"",""location"":{""path"":""[35m/users/laurentan/code/react-forget/forget/node_modules/[36m@babel/types[39m[35m/lib/index.d.ts[39m"",""line"":321,""char"":1}} 
│                 ├─ 
{""id"":598,""kind"":""Object"",""name"":""V8IntrinsicIdentifier"",""location"":{""path"":""[35m/users/laurentan/code/react-forget/forget/node_modules/[36m@babel/types[39m[35m/lib/index.d.ts[39m"",""line"":1031,""char"":1}} 
│                 ├─ 
{""id"":599,""kind"":""Object"",""name"":""VariableDeclaration"",""location"":{""path"":""[35m/users/laurentan/code/react-forget/forget/node_modules/[36m@babel/types[39m[35m/lib/index.d.ts[39m"",""line"":327,""char"":1}} 
│                 ├─ 
{""id"":600,""kind"":""Object"",""name"":""VariableDeclarator"",""location"":{""path"":""[35m/users/laurentan/code/react-forget/forget/node_modules/[36m@babel/types[39m[35m/lib/index.d.ts[39m"",""line"":333,""char"":1}} 
│                 ├─ 
{""id"":601,""kind"":""Object"",""name"":""Variance"",""location"":{""path"":""[35m/users/laurentan/code/react-forget/forget/node_modules/[36m@babel/types[39m[35m/lib/index.d.ts[39m"",""line"":890,""char"":1}} 
│                 ├─ 
{""id"":602,""kind"":""Object"",""name"":""VoidTypeAnnotation"",""location"":{""path"":""[35m/users/laurentan/code/react-forget/forget/node_modules/[36m@babel/types[39m[35m/lib/index.d.ts[39m"",""line"":894,""char"":1}} 
│                 ├─ 
{""id"":603,""kind"":""Object"",""name"":""WhileStatement"",""location"":{""path"":""[35m/users/laurentan/code/react-forget/forget/node_modules/[36m@babel/types[39m[35m/lib/index.d.ts[39m"",""line"":339,""char"":1}} 
│                 ├─ 
{""id"":604,""kind"":""Object"",""name"":""WithStatement"",""location"":{""path"":""[35m/users/laurentan/code/react-forget/forget/node_modules/[36m@babel/types[39m[35m/lib/index.d.ts[39m"",""line"":344,""char"":1}} 
│                 └─ 
{""id"":605,""kind"":""Object"",""name"":""YieldExpression"",""location"":{""path"":""[35m/users/laurentan/code/react-forget/forget/node_modules/[36m@babel/types[39m[35m/lib/index.d.ts[39m"",""line"":518,""char"":1}} 
└─ Check file 
[35m/users/laurentan/code/react-forget/forget/src/[36mdiagnostic.ts[39m[35m[39m 
(809ms)    └─ Check expression from (line 222, char 14) to (line 228, char 8) 
(698ms)       └─ Check expression from (line 227, char 21) to (line 227, char 
74) (697ms)          └─ Check expression from (line 227, char 29) to (line 227, 
char 61) (697ms)             └─ Check expression from (line 227, char 39) to 
(line 227, char 60) (697ms) 

No duplicate packages found Done in 16.27s. ```",Lauren Tan,2022-10-14T21:36:19Z
3b814327e2390e6f3dfd4c855d849662ddd52b2a,"Allow Async Functions to be used in Server Components (#25479)

This is a temporary step until we allow Promises everywhere.

Currently this serializes to a Lazy which can then be consumed in this same
slot by the client.",Sebastian Markbåge,2022-10-14T19:09:33Z
44e2ca393e2affc85fa31049e7e29955fb5ac607,React DevTools 4.26.0 -> 4.26.1 (#25478),Tianyu Yao,2022-10-14T17:36:52Z
e939cacf97e0dabfa61be4808e67a7d9466d2183,"Don't console.error in dev 

Previously the PassManager would console.error if an unexpected error was 
thrown, to help with debugging jest. However because we now capture all 
invariants in compiler passes as bailouts, these are already captured in fixture 
tests. 

Additionally, we also already console.error if we find an unexpected bailout in 
a fixture test. So this is purely redundant and removing reduces some noise when 
running tests.",Lauren Tan,2022-10-14T16:10:58Z
101ee3a440e01a90787d294e57287c4f8de6286a,"Allow capitalized function identifiers to be allowlisted 

The current allowlist for capitalized function identifiers only allows stdlib JS 
modules. This PR introduces a new compiler option to allow passing in a set of 
allowed capitalized user function identifiers. It's a hack (in the absence of a 
type system) to let us check that capitalized function calls are only possible 
for identifiers that aren't bound to a React component. 

I considered adding a mechanism in fixtures to configure compiler options 
per-fixture, but opted to keep it simple for now and special case a 
`ReactForgetSecretInternals` identifier as one allowed user function in 
transform tests.",Lauren Tan,2022-10-14T16:10:55Z
58100e3d60124cfc41268c27f8b68ff00cc00685,"Use CompilerError invariant 

The CompilerError module's `invariant` is wired up to our bailout system so in 
compiler passes should be preferred to the raw `invariant` module. 

We should probably add an internal eslint rule to suggest using CompilerError if 
the file is in one of the compiler pass directories.",Lauren Tan,2022-10-14T16:10:53Z
a6bf466892c23a100991580895ddd80667c1b777,"Extract Fizz instruction set to build macro (#25457)

We're adding an option to Fizz to support an alternate output format
that doesn't rely on inline script tags (see #25437). The two outputs
will share the same ""instruction set"" of functions. These functions are
currently inlined into the source file; to make this a bit more maintainable,
and eventually have a single source of truth, in preparation for the new option,
this commit moves the instruction set to a separate files that are imported.

In the future, we could improve this further by running Closure on the
instruction set and generating it at build time. This isn't an urgent
improvement, though, because we rarely modify the instruction set.

Co-authored-by: Mofei Zhang <feifei0@fb.com>

Co-authored-by: Mofei Zhang <feifei0@fb.com>",Andrew Clark,2022-10-14T15:00:35Z
ea5bc6bac122ac9e0b45b5200f1456d47801fa18,[React Native FB] dynamic feature flag for ref access warning (#25471),Jan Kassens,2022-10-14T14:11:42Z
fd31724d5d41a4df71af55f710b46562874511f9,Stop spamming highlight events when a component is selected (#25448),Tianyu Yao,2022-10-14T00:38:05Z
08d035bc8f02be2bd0f23eec2c9e8ddec51083f6,Remove Shallow Renderer Tests (#25475),Sebastian Markbåge,2022-10-13T23:02:03Z
b1006e12cd996debe341fa27db548d4c794bbdaa,Invariant for use before definition of reactive values (#662),Jan Kassens,2022-10-13T20:17:39Z
0000ab6ca4ac5a983ffea36503ebf1f046c7f789,"[new-arch] HIR cleanup per discussion 

* Renames `Capability` to `Effect` and clarifies the kinds as Freeze, Read, and 
Mutate. The real intent of what we're inferring/representing is ""what effect 
does this reference to the value have on its value"". Ie freeze freezes the 
value, mutate mutates it. 

* Consolidates Capability and EffectKind into Effect 

* Renames some properties on Place for clarity 

* Adds `value: ValueKind` to Place, which indicates the (merged) kind of the 
value at that place at that point in the program. 

* Changes HIR printing to show the effect and the value kind 

* Simplifies some inference logic",Joseph Savona,2022-10-13T18:23:14Z
73059d9a4f453ce0fec26f736c694319e25a6323,"[Playground][Nit] Add delete + overtype for autoclosing brackets 

Fix for papercut: playground should now be smart about autoclosing brackets. 

Before: 


https://user-images.githubusercontent.com/34200447/195653419-0eb529e4-0aed-4894-9db6-bfe1554aaded.mov 

Now: 


https://user-images.githubusercontent.com/34200447/195653738-07abed36-d9e8-4842-bac5-9e84b72c0704.mov",mofeiZ,2022-10-13T17:16:56Z
144e856264d1326fc39d32ac4e2165cbf8a2904b,"Cleanup reverse postordering 

Splits out the reverse postorder logic from `shrink` into a separate method.",Joseph Savona,2022-10-13T14:58:06Z
b01fbfa7fbfc7e5c3005febd8a2c6ca05f1519d9,"Change function parameters to type Place 

So that we can infer a Capability of Freeze for components",Sathya Gunasekaran,2022-10-13T10:29:58Z
a8c16a00406a204f0153c21023a04ca9a68411da,"Split Cache into its own Dispatcher (#25474)

* Missing Hooks

* Remove www forks. These can use __SECRET... instead.

* Move cache to separate dispatcher

These will be available in more contexts than just render.",Sebastian Markbåge,2022-10-13T03:13:39Z
5149ce0fbb5114a8ee46f313365d5e4984fcab94,"[new-arch] Store HIR blocks in reverse postorder 

* Changes HIR to store blocks in reverse postorder, which allows forward data 
flow analysis to iterate the blocks in order and (in the absence of loops) see 
all predecessors before visiting a successor. 

* Updates reference kind inference to exploit this ordering 

Note that the approach of modifying the ordering in `mapTerminalSuccessors()` 
feels gross, i'd like to split this up a bit.",Joseph Savona,2022-10-12T23:11:15Z
3d4130140ab6c0dbf88a6898e77a562442d12892,"[new-arch] Scaffolding and fixtures for mutability lifetime inference 

Scaffolds out mutable lifetime inference and the potential two-pass approach, 
with motivating examples. Also adds some fixtures that collectively demonstrate 
a bunch of cases of aliasing: 

* direct assignment `a = b` 

* property assignment `a.b = b` 

* array literals `a = [b]` 

* object literals `a = {b}` 

* mutable arguments to the same call `foo(mut a, mut b)` 

* return values aliasing arguments `a = foo(mut b)` 

* aliasing that occurs only after multiple loop iterations 

All of these fixtures use an empty `if (varName) {}` as a way to check that an 
otherwise readonly usage of a variable is correctly inferred as mutable.",Joseph Savona,2022-10-12T17:54:09Z
94adcf91b146504e6765029689a441d6e91ca998,[new-arch] Cleanup unused analysis (#651),Joseph Savona,2022-10-11T19:00:45Z
beb6e1431ca53b6f20f69e40f1dbb95bbdc5095a,"[new-arch] Improve reference-kind analysis 

This implements an alternative approach to reference kind inference in the new 
architecture based on feedback. Here, we track an environment that maps 
top-level identifiers (IdentifierId) to the ""kind"" of value stored: immutable, 
mutable, frozen, or maybe-frozen. We then do a forward data flow analysis 
updating this environment based on the semantics of each instruction combined 
with the types of values present. For example a reference of a value in a 
""mutable"" position is inferred as readonly if the value is known to be frozen or 
immutable. Similarly, a usage of a reference in a ""freeze"" position is inferred 
as a freeze if the value is not yet definitively frozen, and inferred as 
readonly if the value is already frozen. 

When multiple control paths converge we merge the previous and new incoming 
environments, and only reprocess the block if the environment changed relative 
to the previous value. This has some noticeable benefits over the previous 
version: 

* We now infer precisely where `makeReadOnly()` calls need to be inserted, aka 
points where a value needs to be frozen may not yet be frozen. 

* We track immutable values and can infer their usage as readonly rather than 
mutable. 

* The system handles aliasing by representing values as distinct from variables, 
so that we can handle situations such as: 

```javascript 

const a = [];  // env: {a: value0; value0: mutable} 

const b = a;   // env: {a: value0, b: value0; value0: mutable} 

freeze(a);     // env: {a: value0, b: value0; value0: frozen} 

mayMutate(b);  // ordinarily inferred as a mutable reference, but we know its 
readonly 

```",Joseph Savona,2022-10-11T18:32:49Z
7f17dd84d1504b67f35eecb1703bf0367411903d,"Import useMemoCache from unstable name 

I didn't make this an option as it's unclear we'll really need this. We can 
always add an option later, I think. 

This is the name that's available on facebook.com at the moment.",Jan Kassens,2022-10-11T17:16:01Z
2cf4352e1c81a5b8c3528519a128c20e8e65531d,Implement HostSingleton Fiber type (#25426),Josh Story,2022-10-11T15:42:42Z
aa9988e5e669122ed0d76c72f2dea159eef872b4,"Server render fork for react-dom (#25436)

Publish an aliasable entry for `react-dom` top level package exports for use in server environments. This is a stub containing only the exports that we expect to retain in the top level once 19 is released",Josh Story,2022-10-10T18:06:22Z
513417d6951fa3ff5729302b7990b84604b11afa,Return lastNonHostInstance in getInspectorDataForInstance for devtools (#25441),Tianyu Yao,2022-10-07T22:43:02Z
5d60a0b8407d57ac9ab0302ab241107ab289e561,"Bugfix: LegacyHidden shouldn't defer effects (#25442)

In #24967, I changed the behavior of Offscreen so that passive effects
are not fired when the tree is hidden. I accidentally applied this
behavior to the old LegacyHidden API, too, which is a deprecated
internal-only type that www has been using while they wait for Offscreen
to be ready.

This fixes LegacyHidden so that the effects do not get deferred, like
before. The new behavior still remains in the Offscreen API, which is
experimental and not currently in use in www.",Andrew Clark,2022-10-06T21:23:27Z
e575e22925f4dcb6e04cb21b98bf9dc6f90207ba,"Add hash of Babel plugin to Jest transform 

Jest caches based on the hash of the babel config. This caused us to not break 
that cache when the we made changes to the plugin. 

Fixes #643",Jan Kassens,2022-10-06T20:59:12Z
b605fc1ab3ba92d8b38616529f80edf4d23494ae,"[BE] Even more permissive ref annotation comment 

Allow `readOnly` and `writable` or even `WriTaBlE`. 

commit-id:f6f77fd8",Xuan Huang (黄玄),2022-10-05T22:42:16Z
a574d15985fbdc184e7e3328fe4d528472c843ae,"[Fix] Control Dep Should Only Add To Defs 

Control dep should only affect how things are invalidated, which are modeled as 
defs including declarations, writable uses to variables and expressions. 

Closes #633 

commit-id:41bd6fe5",Xuan Huang (黄玄),2022-10-05T22:42:11Z
19b08e67add524fa0c8c5e19b3b8da22f2528c46,"[Bailout] When Inputs Detected In DepGraph Cycle 

Inputs occured in depGraph cycle is dangenrous and should be treated as an 
invariant since Forget _may_ generate broken code in this case, despite that 
technically this is a stricter then what we needed for the particular case of 
#633 and #634 and there   could be case that this is safe (like many `cfg-`   
tests that I have to mark as `bailout.`) 

I expect the next diff will fix them though. 

commit-id:0b13ed02",Xuan Huang (黄玄),2022-10-05T22:42:10Z
cbbfba27b4d88c3ada8118a8096a07350c2aa5ed,"[new-arch][easy] Handle declarations (let/const) through codegen 

Distinguishes between `LValue` and `Place`. For the most part this is the same 
data structure (LValue composes Place), but it's helpful to distinguish them 
since LValue has other properties such as the kind of declaration. The 
representations may diverge more in the future. 

This change lets us correctly emit code for variable declarations: previously we 
didn't emit `let` or `const`.",Joseph Savona,2022-10-06T15:56:20Z
90ab346505d211745ac286f2ec8329e380687df1,"[new-arch][easy] Codegen for switch statements 

Flushes out basic codegen for switch statements. This is more indication that we 
can recover nearly the original source even for complex control-flow, given the 
right IR design.",Joseph Savona,2022-10-06T02:45:05Z
f5f91433812c0be771294860102f51fd09d0534c,"[new-architecture] Reassignment-safe frozenness inference 

NOTE: this improves the equivalent of ""ref kind inference"" in the new 
architecture. I'd appreciate review here on the algorithm in particular, but in 
general my plan is to try to implement this on the current architecture. 

The previous InferMutability reference kind inference didn't properly handle 
capturing or reassignment combined with control flow. This is a new version 
(i'll clean up to delete InferMutability entirely) that is less ambitious but 
fully accurate (i hope, hence WIP): 

* Annotates all references of frozen variables as frozen. This includes 
following reassignment, so if you do `const x = props.x; foo(x);` we know that 
`x` is frozen because it derived from a frozen value. This even works 
conditionally, so if `x` is conditionally assigned to some value derived from eg 
props, and you later use `x`, that will be marked as frozen even if it could 
have other values at runtime (since it must conservatively assume a frozen value 
flowed in at runtime). 

* Annotates references that may mutate as mutable. 

* Annotates references that are not frozen, but not mutated _at this reference 
site_, as readonly. It's possible that a readonly usage is followed by a mutable 
usage, since we don't yet know the ""lifetime"" of the mutability. 

The notable difference from the previous attempt is that we do not attempt to 
find the point at which a formerly-mutable values becomes readonly (and 
therefore eligible for caching). That requires pointer analysis, let's discuss 
offline.",Joseph Savona,2022-10-05T20:56:13Z
e877f89ddaa47613730c1e340419f8c4dea17687,"Allow comment annotation to be spaced 

I.e. `/* readonly */` is fine too 

commit-id:1437395a",Xuan Huang (黄玄),2022-10-05T17:30:25Z
83f3999a2e87248412ff3e5ad0ebec51b3d0b045,"Support var declaration hoisting 

Var declarations were treated identical as other declarations which cause code 
relying on them getting hoisted now triggers runtime exception on TDZ. 

This diff fixed that by generating `var` for `var` so they can be hoisted as 
usual. 

commit-id:00ab02f6",Xuan Huang (黄玄),2022-10-05T17:23:37Z
e40893d097f6894b4768d749f796302c57161734,add tests for resource emission when rendering no head or just a head (#25433),Josh Story,2022-10-05T17:14:40Z
792343dd863185228d5308b94a03fb79aed12449,Bump css-what from 2.1.0 to 2.1.3 in /fixtures/flight (#25434),dependabot[bot],2022-10-05T17:00:21Z
aea1e6fb3723d72fe6cc3c7bb29522dc48b198a5,"Bump css-what from 2.1.0 to 2.1.3 in /fixtures/expiration (#25431)

Bumps [css-what](https://github.com/fb55/css-what) from 2.1.0 to 2.1.3.
- [Release notes](https://github.com/fb55/css-what/releases)
- [Commits](https://github.com/fb55/css-what/compare/v2.1.0...v2.1.3)

---
updated-dependencies:
- dependency-name: css-what
  dependency-type: indirect
...

Signed-off-by: dependabot[bot] <support@github.com>

Signed-off-by: dependabot[bot] <support@github.com>
Co-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>",dependabot[bot],2022-10-05T16:54:19Z
5aec50533c9718f1fd4d2e6ee32e8384acbb9ae6,"Bump css-what from 2.1.0 to 2.1.3 in /fixtures/attribute-behavior (#25429)

Bumps [css-what](https://github.com/fb55/css-what) from 2.1.0 to 2.1.3.
- [Release notes](https://github.com/fb55/css-what/releases)
- [Commits](https://github.com/fb55/css-what/compare/v2.1.0...v2.1.3)

---
updated-dependencies:
- dependency-name: css-what
  dependency-type: indirect
...

Signed-off-by: dependabot[bot] <support@github.com>

Signed-off-by: dependabot[bot] <support@github.com>
Co-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>",dependabot[bot],2022-10-05T16:53:42Z
da876b98094b3d99c061cedc2fc015e5ba9db31a,"Bump css-what from 2.1.0 to 2.1.3 in /fixtures/fiber-debugger (#25430)

Bumps [css-what](https://github.com/fb55/css-what) from 2.1.0 to 2.1.3.
- [Release notes](https://github.com/fb55/css-what/releases)
- [Commits](https://github.com/fb55/css-what/compare/v2.1.0...v2.1.3)

---
updated-dependencies:
- dependency-name: css-what
  dependency-type: indirect
...

Signed-off-by: dependabot[bot] <support@github.com>

Signed-off-by: dependabot[bot] <support@github.com>
Co-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>",dependabot[bot],2022-10-05T16:53:32Z
618388bc323356a5a9c0a6f162f516d35a3b4b2d,"[Float] Support script preloads (#25432)

* support script preloads

* gates",Josh Story,2022-10-05T16:47:35Z
65b3449c89870dbce9c8ca01c892825dc9d74ca3,"Include install command for devtools-extension build instructions (#25053)

Include install command for devtools-extension build instructions",Sebastian Silbermann,2022-10-05T15:27:09Z
2872a26e14627f90e812048f21feb6d0c8cc0244,"track resources in different roots separately (#25388)

* track resources in different roots separately

* flow types

* add test demonstrating portals deep into shadowRoots

* revert hostcontext changes

* lints

* funge style cache key a la ReactDOMComponentTree

* hide hacks in componentTree",Josh Story,2022-10-04T23:11:15Z
ea04a486a7c27771f7eea896565c0980927ed3b4,"Flow: remove unused suppressions (#25424)

Removes $FlowFixMe's that are no longer needed.

Used flow/tool from the Flow repo:

```
 ~/Developer/flow/tool update-suppressions .
```",Jan Kassens,2022-10-04T20:18:12Z
9813edef2964d5d01308540e4eb7804dfc95425f,"Flow upgrade to 0.188

ghstack-source-id: 5c359b97cc0a2587cf55ff879c863415a2c13127
Pull Request resolved: https://github.com/facebook/react/pull/25423",Jan Kassens,2022-10-04T19:39:26Z
3b6826ed9e76207d9ab7a513a069fd67b69599a8,"Flow: inference_mode=constrain_writes

This mode is going to be the new default in Flow going forward.
There was an unfortuante large number of suppressions in this update.

More on the changes can be found in this [Flow blog post](https://medium.com/flow-type/new-flow-language-rule-constrained-writes-4c70e375d190).

Added some of the required annotations using the provided codemod:

```sh
node_modules/.bin/flow codemod annotate-declarations --write .
```

ghstack-source-id: 0b168e1b23f1305083e71d0b931b732e94705c73
Pull Request resolved: https://github.com/facebook/react/pull/25422",Jan Kassens,2022-10-04T19:39:26Z
af9afe9b3f622aa5eb4caf873025423ba8163c9f,"Update safe-string-coercion to handle additions of string literals (#25286)

* Update safe-string-coercion to handle additions of string literals

Adding strings shouldn't trigger a lint violation of this rule, since
adding strings are always safe.",lauren,2022-10-04T19:29:36Z
aed33a49ccac5f42ea1bde6e97f2f470edcd6574,"Flow upgrade to 0.185

ghstack-source-id: 8104710c9643aa54961a02546f253dc99d70dd5d
Pull Request resolved: https://github.com/facebook/react/pull/25420",Jan Kassens,2022-10-04T17:42:34Z
f02a5f5c79eed4a200afe477452b6b7a680c16af,"Flow upgrade to 0.182

ghstack-source-id: b9bb8c1560e8ac6baf424deea2015c00629fb353
Pull Request resolved: https://github.com/facebook/react/pull/25419",Jan Kassens,2022-10-04T17:25:17Z
72593f008ec2011104d78b460dd287e7dfcac838,"Flow upgrade to 0.176

This upgrade deprecated calling `new` on functions which introduced
the majority of breakages and I suppressed those.

ghstack-source-id: 545363f3c5b9f0327ac53fdea56a582d6cc29d72
Pull Request resolved: https://github.com/facebook/react/pull/25418",Jan Kassens,2022-10-04T17:25:17Z
46d40f306ad5fb5c868d9022ce848f49fc5c1ac0,"Flow upgrade to 0.175

ghstack-source-id: 99008118ef76d850eb1c460e07b1db1392c55806
Pull Request resolved: https://github.com/facebook/react/pull/25417",Jan Kassens,2022-10-04T17:25:16Z
1089faf0d88411921980b7d1dfe3f539b5fda1d3,"Flow: run codemod to remove existential type

The existential type `*` was deprecated and a codemod provided to replace it. Ran that and did some manual fixups:

```sh
node_modules/.bin/flow codemod replace-existentials --write .
```

ghstack-source-id: 4c98b8db6a80159aa6ba3f2fc3659c11939da134
Pull Request resolved: https://github.com/facebook/react/pull/25416",Jan Kassens,2022-10-04T17:25:16Z
3fd9bd8e748231f2efb3624ee29f55633c0f3e05,"Add RulesOfHooks support for `use`

Usage of the new `use` hook needs to conform to the rules of hooks, with
the one exception that it can be called conditionally.

ghstack-source-id: 7ea5beceaf2c080f2c48821b5117bdd0c1194836
Pull Request resolved: https://github.com/facebook/react/pull/25370",Lauren Tan,2022-10-04T15:52:21Z
338e6a967ccbdde156559b00e17ffcc7319533fc,"Flow upgrade to 0.155

This version banned use of this in object functions.

ghstack-source-id: f49fd5e1b7732cea1ec75e71f2611f0ffa19e80d
Pull Request resolved: https://github.com/facebook/react/pull/25414",Jan Kassens,2022-10-04T15:39:26Z
8bc95bb3c8c975d650161e472de4d8a92d9a92fd,"Flow upgrade to 0.154

ghstack-source-id: d84024950a249f209db88be6788b80f7fa4f26d0
Pull Request resolved: https://github.com/facebook/react/pull/25413",Jan Kassens,2022-10-04T15:39:25Z
9f8a98a390bca3310cb80f536ba015446af19c3f,"Flow upgrade to 0.153

- method unbinding is no longer supported in Flow for soundness, this added a bunch of suppressions
- Flow now prevents objects to be supertypes of interfaces/classes

ghstack-source-id: d7749cbad8050874fa14d533442f110ad1d0209d
Pull Request resolved: https://github.com/facebook/react/pull/25412",Jan Kassens,2022-10-04T15:04:47Z
adb58f529d861882418274966f53767f60501c01,"Flow upgrade to 0.152

- 0.147 removes access to Object.prototype via the global object.
- 0.149 removed deprecated config options

ghstack-source-id: c77f9b3739796547dd2d82a549b6dc24d502af54
Pull Request resolved: https://github.com/facebook/react/pull/25411",Jan Kassens,2022-10-04T15:04:43Z
64fe791be84ad04a4a1d005376ba5cf5701db9b7,"Flow upgrade to 0.146

This upgrade made more expressions invalidate refinements. In some
places this lead to a large number of suppressions that I automatically
suppressed and should be followed up on when the code is touched.
I think most of them might require either manual annotations or moving
a value into a const to allow refinement.

ghstack-source-id: a45b40abf03474b691a2dc18a4f1f3b06cfbdffd
Pull Request resolved: https://github.com/facebook/react/pull/25410",Jan Kassens,2022-10-04T14:50:34Z
d3c6c16a0312b4d2051d75aaf85bb5335a8a6fa6,"Flow upgrade to 0.145

Fixed a RN library definition that defined `CustomEvent` as a reference to itself.

ghstack-source-id: 90da2e316f4caf3e5ff1172982f02d0a87a45ecb
Pull Request resolved: https://github.com/facebook/react/pull/25409",Jan Kassens,2022-10-04T14:50:31Z
00a2f81508cccd59556e1bea0208726f9dbfbfa9,"Flow upgrade to 0.143

This was a large upgrade that removed ""classic mode"" and made ""types first"" the only option.
Most of the needed changes have been done in previous PRs, this just fixes up the last few instances.

ghstack-source-id: 9612d95ba4b32edeb73fee8be9f3d67c43e86b80
Pull Request resolved: https://github.com/facebook/react/pull/25408",Jan Kassens,2022-10-04T14:50:28Z
0a3072278ee5fb46ddb58e6f5ba9e2b78f6f715a,"Flow: complete types first migration (#25389)

This complete the ""types first"" migration and enables the config everywhere.",Jan Kassens,2022-10-04T01:59:33Z
bcc05671fcdb159016fb64ab6f0b8f137fa3862c,Flow: types first in shared (#25343),Jan Kassens,2022-10-04T00:57:34Z
dc52b6739e2cdff92d5d877ef69c507237f6b537,Add NodeJS 18.x as devEngine (#25348),Jan Kassens,2022-10-04T00:57:06Z
b1f34aa307b004681b3d4c75446d354cda6368cb,Flow: types first in react-native-renderer (#25363),Jan Kassens,2022-10-03T21:03:33Z
9143864ae1f6d3e8158e5670f5a8623dc6c47dbf,"Flow: well formed exports for smaller packages (#25361)

Enforces well formed exports for packages where the fixes are small.",Jan Kassens,2022-10-03T20:52:41Z
94ac3066882903ed1739d7f4457bda87dc6fc236,"CI: update CircleCI docker image (#25374)

This updates to an image that's using node 16.16.0 and java 18.0.2.

| Package | Old    | New
| ------ | ------- | ---
| git    | 2.32.0  | 2.37.1
| gradle | 7.2     | 7.5.1
| java   | 17      | 18.0.2
| maven  | 3.8.2   | 3.8.6
| node   | 14.17.6 | 16.16.0
| ubuntu | 20.04.2 LTS |  20.04.4 LTS
| yarn   | 1.22.5 |  1.22.5",Jan Kassens,2022-10-03T20:52:14Z
896ef251b4f2c802313bb7019e49aaf004c8c4e6,patch makeReadOnly into playground,Mofei Zhang,2022-10-03T18:37:24Z
4e0639c2dceef3feca273cf0dadfd4f045826f77,Add makeReadOnly codegen into the compiler,Mofei Zhang,2022-10-03T18:37:23Z
2d80a0cd690bb5650b6c8a6c079a87b5dc42bd15,Fix: Updated link in CONTRIBUTING (#25381),Kirankumar Ambati,2022-10-03T14:29:57Z
041dbe2e1fa94f5bb1eb0e85c69f08ce6f32c2ae,"Bump eventsource from 1.0.7 to 1.1.2 (#25386)

Bumps [eventsource](https://github.com/EventSource/eventsource) from 1.0.7 to 1.1.2.
- [Release notes](https://github.com/EventSource/eventsource/releases)
- [Changelog](https://github.com/EventSource/eventsource/blob/master/HISTORY.md)
- [Commits](https://github.com/EventSource/eventsource/compare/v1.0.7...v1.1.2)

---
updated-dependencies:
- dependency-name: eventsource
  dependency-type: indirect
...

Signed-off-by: dependabot[bot] <support@github.com>

Signed-off-by: dependabot[bot] <support@github.com>
Co-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>",dependabot[bot],2022-10-03T14:28:38Z
55811834b0e868376a476e013009788ec66bfda2,"Bump eventsource from 1.0.7 to 1.1.2 in /fixtures/blocks (#25385)

Bumps [eventsource](https://github.com/EventSource/eventsource) from 1.0.7 to 1.1.2.
- [Release notes](https://github.com/EventSource/eventsource/releases)
- [Changelog](https://github.com/EventSource/eventsource/blob/master/HISTORY.md)
- [Commits](https://github.com/EventSource/eventsource/compare/v1.0.7...v1.1.2)

---
updated-dependencies:
- dependency-name: eventsource
  dependency-type: indirect
...

Signed-off-by: dependabot[bot] <support@github.com>

Signed-off-by: dependabot[bot] <support@github.com>
Co-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>",dependabot[bot],2022-10-03T14:16:08Z
21a851e03507e77bf51b410c36e4d32d6e5bf728,"Fix devtools typos and grammar (#24587)

Closes #24587",Alexandru Tasica,2022-05-20T10:05:23Z
cfafeb68580d7a230550a6758aa834f6bb3bd28a,Remove extra space in Wedge.js (#24611),Kerim Büyükakyüz,2022-10-03T14:03:56Z
9c3de25e1ce52066c0518b3ca0803b69e684edd6,"Flow: types first in reconciler (#25362)

This contains one code change, renaming the local function `ChildReconciler` to `createChildReconciler` as it's called as a function, not a constructor and to free up the name for the return value.",Jan Kassens,2022-10-01T22:47:32Z
0033d1a98c402a9e0ba8f03f702749d66cb0f6f0,Fix failing tests in latest 16.x and 18.x Node versions (#25378),Sebastian Silbermann,2022-10-01T21:12:28Z
7b25b961df878109a2b3810f33815249cae37ecc,"[Fizz/Float] Float for stylesheet resources (#25243)

* [Fizz/Float] Float for stylesheet resources

This commit implements Float in Fizz and on the Client. The initial set of supported APIs is roughly

1. Convert certain stylesheets into style Resources when opting in with precedence prop
2. Emit preloads for stylesheets and explicit preload tags
3. Dedupe all Resources by href
4. Implement ReactDOM.preload() to allow for imperative preloading
5. Implement ReactDOM.preinit() to allow for imperative preinitialization

Currently supports
1. style Resources (link rel ""stylesheet"")
2. font Resources (preload as ""font"")

later updates will include support for scripts and modules",Josh Story,2022-09-30T23:14:04Z
d061e6e7d4ea80ef884ff9ed731be91eb8aa081e,"CI: delete old AppVeyor config (#25373)

I noticed this file as #24892 is updating the NodeJS version in it.

I don't think this is used for anything as the config just runs a handful
of yarn commands and I assume that's all covered by CircleCI.",Jan Kassens,2022-09-30T23:02:25Z
4c016e7aafb17657c143e14093c6013a2d805ae0,Refactor: use  property shorthand (#25366),zhangrenyang,2022-09-30T21:50:08Z
06066c1a5a372110b12b39cc312268437015a043,"Make RulesOfHooks-test more consistent with ExhaustiveDeps-test

Small formatting changes to make the tests consistent.

ghstack-source-id: 7013a37f1f349273e35a639dd153ffcfc63595ba
Pull Request resolved: https://github.com/facebook/react/pull/25369",Lauren Tan,2022-09-30T16:31:21Z
49ae0fad84593c4de6511a85773740d2aec919c3,"Fix RulesOfHooks test case indentation

Just a small formatting fix.

ghstack-source-id: c71ff02ed972f3dad5a2a6bb4842d1f1cf52813e
Pull Request resolved: https://github.com/facebook/react/pull/25368",Lauren Tan,2022-09-30T16:31:18Z
abbbdf4cec992666885cc67344563795a333d4a2,"Put modern StrictMode behind a feature flag (#25365)

* Put modern StrictMode behind a feature flag

* Remove unneeded flag",Samuel Susla,2022-09-30T16:06:11Z
434110390a444bac81efe9ab44364d94b37cbe43,"ReactHooks.js - delete emptyObject (#25031)

It's not mentioned in docs and never used by projects.. should be removed..",Igor Berlenko,2022-09-30T15:29:51Z
31400ce293c6a99a770df435961df413e49ccf0f,Refactor: merge duplicate imports (#25364),jerry-lllman,2022-09-30T13:57:50Z
3517bd9f77dc63189f3bafedf83ba1bf8ae359df,"Refactor useEvent (#25336)

* Refactor useEvent

Previously, the useEvent implementation made use of effect infra under
the hood. This was a lot of extra overhead for functionality we didn't
use (events have no deps, and no clean up functions). This PR refactors
the implementation to instead use a queue to ensure that the callback is
stable across renders.

Additionally, the function signature was updated to infer the callback's argument types and return value. While this doesn't affect anything internal it more accurately describes what's being passed.",Lauren Tan,2022-09-29T20:45:27Z
abd7bcd8b2d2e4688a5427278003dd6e1b255c3b,"Flow: remove max_workers setting (#25349)

This was added back in #17880 to make CI pass for an unrelated change.

This limits the max worker setting to CI environments as removing the setting completely still seems to break on CircleCI.",Jan Kassens,2022-09-29T18:49:41Z
72775fba109d05d31fb731cafab7e497c6759d1a,"makeReadOnly implementation 

Added utility package to track mutations to objects marked as ""read-only"".",Mofei Zhang,2022-09-29T18:17:38Z
3158146989de57b085ff84c0bb6ba7aaee2df61c,"POC of new expression-oriented inference model for memoization within control-flow (#589)

* [hir] Core data types and lowering for new model

* Handle more expressions, including using babel for binding resolution

* test setup with pretty printing of ir

* Basic codegen and improved pretty printing

* avoid else block when if has no fallthrough

* emit function declarations with mapped name/params

* start of scope analysis

* saving state pre-run

* add slightly more complex example and flush out lowering/printing (jsx, new, variables)

* Various improvements:
* Convert logical expressions (|| and &&) to control flow, accounting
  for lazy evaluation semantics.
* Handle expression statements
* Improve printing of HIR for unsupported node kinds
* Handle more cases of JSX by falling by to OtherStatement to wrap
  subtrees at coarse granularity.

* improve HIR printing, lowering of expression statements

* handle object expression printing

* improve IR model for values/places along w codegen

* more test cases

* start of mutability inference

* passable but still incorrect mutability inference

* improved mutability inference, should cover most cases now

* visualization of reference graph

* correctly flow mutability backwards (have to actually set the capability)

* separate visualization in output

* consolidate on frozen/readonly/mutable capabilities

* cleanup

* conditional reassignment test (not quite working)

* hack to output svg files for debugging

* handle conditional reassignment

* improve capture analysis

* treat jsx as (interior) mutable; handle memberexpression lvalues

* lots of comments; hook return is frozen

* update main comment

* inference for switch, which reveals a bug

* fix yarn.lock",Joseph Savona,2022-09-30T21:11:48Z
a33c0b897c502f82f59fe283e71323b9cb0503a6,Initial commit,Xuan Huang (黄玄),2021-05-11T23:10:34Z
8ee4f529897bc85220ee1dcfc61613da03c71d55,"Fix: Documentation typos (#24471)

* fix: typo

Co-authored-by: Jan Kassens <jkassens@meta.com>",Sreecharan,2022-09-29T16:46:53Z
6cf06a92971731532d988f3a147857b2c81e5335,"Remove outdated comments. (#24464)

fixed by https://github.com/facebook/react/pull/20894",zhangenming,2022-09-29T16:40:42Z
20a257c259c265d25ece77ee3c18f353b4b9a925,Refactor: more word doubles removed (#25352),Vic Graf,2022-09-29T13:57:49Z
8cadcffd5d9ea293e9127ee4811589a91d0e4e58,Fix typo: reconcilation -> reconciliation (#25355),zhangrenyang,2022-09-29T13:34:30Z
ebbe599a25f4d751787ad49a9026215f14dc6d03,Fix EventListener fork (#25347),Sebastian Markbåge,2022-09-28T23:45:59Z
904555eb6491d830872991758d8dccc5c1b617c4,"Bump mout from 1.1.0 to 1.2.4 in /fixtures/packaging/brunch/dev (#25346)

Bumps [mout](https://github.com/mout/mout) from 1.1.0 to 1.2.4.
- [Release notes](https://github.com/mout/mout/releases)
- [Changelog](https://github.com/mout/mout/blob/master/CHANGELOG.md)
- [Commits](https://github.com/mout/mout/compare/v1.1.0...v1.2.4)

---
updated-dependencies:
- dependency-name: mout
  dependency-type: indirect
...

Signed-off-by: dependabot[bot] <support@github.com>

Signed-off-by: dependabot[bot] <support@github.com>
Co-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>",dependabot[bot],2022-09-28T23:44:04Z
97d75c9c8bcddb0daed1ed062101c7f5e9b825f4,"Move react-dom implementation files to react-dom-bindings (#25345)

This lets us share it with react-server-dom-webpack while still having a
dependency on react-dom. It also makes somewhat sense from a bundling
perspective since react-dom is an external to itself.",Sebastian Markbåge,2022-09-28T23:05:50Z
3de926449681015c4f1eec1147baa03a3cb823f5,"[Fizz] experimental_useEvent (#25325)

* [Fizz] useEvent

* Use same message on client and server",dan,2022-09-27T19:42:16Z
ae7ad8b4c26f9ac8afe7640559bc8f9f73bf2775,refactor: removed duplicated words in comments (#25332),Vic Graf,2022-09-27T14:07:46Z
5b59dd640084f7bbb0a68988d45cecef8fa96a4d,"Fix duplicate words tests (#25333)

* refactor: removed duplicated words in comments
* refactor: removed duplicate words in tests",Vic Graf,2022-09-27T14:07:06Z
cb5084d1c4dc0693e7dcd8af7e921a0aa771914b,"[ESLint] Check useEvent references instead (#25319)

* [ESLint] Check useEvent references instead

Previously the useEvent check in RulesOfHooks would collect all
definitions of useEvent functions at the top level, record them as
violations, then clear those violations if the useEvent function was
later called or referened inside of an effect or another event.

The flaw with this approach was in the special case where useEvent
functions could be passed by reference inside of effects or events. The
violation would be cleared here (since it was called at least once)
and subsequent usages of the useEvent function would not be properly
checked.

This PR changes it so we check all identifiers that resolve to a
useEvent function, and if they are not in an effect or event must be
called or a lint error is emitted.

Co-authored-by: Dan Abramov <dan.abramov@gmail.com>

* Add comment

Co-authored-by: Dan Abramov <dan.abramov@gmail.com>",Lauren Tan,2022-09-24T00:34:17Z
c89a83695c18814e98a8e815a2389a11540e0160,"Update RulesOfHooks with useEvent rules (#25285)

This update to the RulesOfHooks rule checks that functions created with
`useEvent` can only be invoked in a `useEffect` callback, in another
event function, or a closure.
They can't be passed down directly as a reference to child components.

This PR also updates the ExhaustiveDeps lint rule to treat useEvent's 
return value as stable, so it can be omitted from dependency lists.

Currently this all gated behind an experimental flag.

Co-authored-by: Dan Abramov <dan.abramov@gmail.com>",Lauren Tan,2022-09-23T21:55:12Z
efc6a08e98ce6546f41f90ac519b2faf94ae04b3,"[Flight] Implement error digests for Flight runtime and expose errorInfo in getDerivedStateFromError (#25302)

Similar to Fizz, Flight now supports a return value from the user provided onError option. If a value is returned from onError it will be serialized and provided to the client.

The digest is stashed on the constructed Error on the client as .digest",Josh Story,2022-09-23T20:19:29Z
c1d414d75851aee7f25f69c1b6fda6a14198ba24,"Add ref to Offscreen component (#25254)

* Expose ref to Offscreen if mode is manual

* Prepend private fields on OffscreenInstance with underscore

* Schedule Ref effect unconditionally on Offscreen

* Make sure Offscreen's ref is detached when unmounted

* Make sure ref is mounted/unmounted in all scenarious

* Nit: pendingProps -> memoizedProps

Co-authored-by: Andrew Clark <git@andrewclark.io>",Samuel Susla,2022-09-23T15:31:34Z
135e33c954ebc084e70fa765c07007ebddf18361,"Flow: typing of Scheduler (#25317)

Enables well formed exports for /scheduler. Some of the modules there were missing `@flow` and were therefore completely unchecked (despite some spurious types sprinkled around).",Jan Kassens,2022-09-23T14:28:34Z
cc8cb145f0bfebaeaddc4e7439efe5f3e14639ae,"Flow: add some missing types in react-reconciler (#25316)

To enable the next Flow version, we need to annotate exported values. This adds a few automatically inferred types that didn't look huge or just `any`.",Jan Kassens,2022-09-23T14:28:00Z
112d0498c8e05100f0a1fa0c4c0cc11534ae5353,"[Fizz] Move digest from errorInfo to Error instance (#25313)

* suspense boundary error digest to Error instance and deprecate digest from errorInfo for onRecoverableError

* fix closure escape",Josh Story,2022-09-22T19:40:30Z
d1bb1c586117df11123859d1ef59228bbf7c750a,"Fix memory leak after repeated setState bailouts (#25309)

There's a global queue (`concurrentQueues` in the
ReactFiberConcurrentUpdates module) that is cleared at the beginning of
each render phase.

However, in the case of an eager `setState` bailout where the state is
updated to same value as the current one, we add the update to the queue
without scheduling a render. So the render phase never removes it from
the queue. This can lead to a memory leak if it happens repeatedly
without any other updates.

There's only one place where this ever happens, so the fix was pretty
straightforward.

Currently there's no great way to test this from a Jest test, so I
confirmed locally by checking in an existing test whether the array gets
reset. @sompylasar had an interesting suggestion for how to catch these
in the future: in the development build (perhaps behind a flag), use a
Babel plugin to instrument all module-level variables. Then periodically
sweep to confirm if something has leaked. The logic is that if there's
no React work scheduled, and a module-level variable points to an
object, it very likely indicates a memory leak.",Andrew Clark,2022-09-22T15:19:54Z
0cac4d54c3eb144b72b7bf0ccf05b3740c6b747f,"Double invoked effects on suspended children (#25307)

Co-authored-by: Robert Balicki <robertbalicki@fb.com>",Samuel Susla,2022-09-21T15:58:04Z
b2748907c3cffb226447417957f2608a7c60c27d,Updated the URL link for serve (#25296),Brandon Chan,2022-09-19T17:13:38Z
3d615fc14aff7586a2080d7da182497ba7ec1bec,"Grammar. Removed doubles of the word ""the"". (#25295)",Victoria Graf,2022-09-19T14:04:03Z
e099e1dc0eeaef7ef1cb2b6430533b2e962f80a9,React DevTools 4.25.0 -> 4.26.0 (#25283),Tianyu Yao,2022-09-16T19:35:00Z
6e3bc8a2e82d6fb627315b97f946f4ff2ee367de,[DevTools] Check if Proxy exists before creating DispatcherProxy (#25278),Tianyu Yao,2022-09-16T18:24:03Z
8951c5fc9dc8445747706605860421eed4b11296,"[DevTools][BE] Read username using gh in release script (#25270)

* [DevTools][BE] Read username using gh in release script

* better regex & fix lint",Tianyu Yao,2022-09-16T01:12:46Z
e7fc04b2970197cb953833aa15597cbc9fe38f2e,"[react-dom] Reorganize react-dom internals to match react (#25277)

* reorganize react-dom internals to match react

* refactor and make forks work for flow and internal imports

* flew too close to the sun

* typo",Josh Story,2022-09-15T22:31:31Z
fc16293f3f8fd4483f0c8f358d1f2187fbb07463,Flow: well_formed_exports for devtools (#25266),Jan Kassens,2022-09-15T20:45:29Z
0b54e0047598e255bcbb7e3aff23c26d7382c54d,Handle rejections to avoid uncaught rejections (#25272),Sebastian Markbåge,2022-09-15T03:22:27Z
c5d06fdc5daf0605a035b283207f349abb990d9c,"[Flight] Fix Webpack Chunk Loading (#25271)

* Fix acorn import

I'm not sure how this ever worked.

* Fix cache to wait for entries already added to the chunk cache

* Modernize API",Sebastian Markbåge,2022-09-15T02:57:35Z
975b644643a1479367fddac6b5b8dc854303d6a3,"[Flight] response.readRoot() -> use(response) (#25267)

* [Flight] Move from suspensey readRoot() to use(thenable)

* Update noop tests

These are no longer sync so they need some more significant updating.

Some of these tests are written in a non-idiomatic form too which is not
great.

* Update Relay tests

I kept these as sync for now and just assume a sync Promise.

* Updated the main tests

* Gate tests

* We need to cast through any because Thenable doesn't support unknown strings",Sebastian Markbåge,2022-09-15T00:20:33Z
60fbb7b1433c5b268a88e0f693f29e6541e1a831,"[Flight] Implement FlightClient in terms of Thenable/Promises instead of throwing Promises (#25260)

* [Flight] Align Chunks with Thenable used with experimental_use

Use the field names used by the Thenable data structure passed to use().
These are considered public in this model.

This adds another field since we use a separate field name for ""reason"".

* Implement Thenable Protocol on Chunks

This doesn't just ping but resolves/rejects with the value.

* Subclass Promises

* Pass key through JSON parsing

* Wait for preloadModules before resolving module chunks

* Initialize lazy resolved values before reading the result

* Block a model from initializing if its direct dependencies are pending

If a module is blocked, then we can't complete initializing a model.
However, we can still let it parse, and then fill in the missing pieces
later.

We need to block it from resolving until all dependencies have filled in
which we can do with a ref count.

* Treat blocked modules or models as a special status

We currently loop over all chunks at the end to error them if they're
still pending. We shouldn't do this if they're pending because they're
blocked on an external resource like a module because the module might not
resolve before the Flight connection closes and that's not an error.

In an alternative solution I had a set that tracked pending chunks and
removed one at a time. While the loop at the end is faster it's more
work as we go.

I figured the extra status might also help debugging.

For modules we can probably assume no forward references, and the first
async module we can just use the promise as the chunk.

So we could probably get away with this only on models that are blocked by
modules.",Sebastian Markbåge,2022-09-15T00:13:33Z
c91a1e03be54733a7dbfcb5663d7a9e8606ab1c1,"experimental_useEvent (#25229)

This commit adds a new hook `useEvent` per the RFC [here](https://github.com/reactjs/rfcs/pull/220), gated as experimental. 

Co-authored-by: Rick Hanlon <rickhanlonii@gmail.com>
Co-authored-by: Rick Hanlon <rickhanlonii@fb.com>
Co-authored-by: Lauren Tan <poteto@users.noreply.github.com>",Lauren Tan,2022-09-14T18:39:06Z
2248dccfb36d735dcf6e411846e87ac8a5329ebd,"[DevTools] Show DevTools icons in Edge browser panel (#25257)

Show DevTools icons in Edge browser panel",Srikanth Kolli,2022-09-14T17:50:57Z
c327b91d22d95de2d43c899c3d8eb87a3ffca048,"CI: try to make caching more reliable (#25259)

- `~/.yarn/cache` is now restored from an hierarchical cache key, if no precise match is found, we fallback to less precise ones. 
- The yarn install in `fixtures/dom` is also cached. Notably, is utilizes the cache from root, but stores into its more precise key.
- Steps running in root no longer have a `yarn install` and rely on the cache from the setup step.
- Retry `yarn install` once on failure.",Jan Kassens,2022-09-14T17:22:20Z
afe664d9d7fc7c58d6a3c6eb3c2865500e00401f,Flow: upgrade to 0.142 (#25255),Jan Kassens,2022-09-13T22:39:26Z
346c7d4c43a0717302d446da9e7423a8e28d8996,straightford explicit types (#25253),Jan Kassens,2022-09-13T21:57:38Z
aca7f30c9599d8724a3ae1a3df8ce3e14e48029a,CI: extract node_modules cache key computation (#25258),Jan Kassens,2022-09-13T21:54:00Z
3401e9200efbdb27815f739a90f6e18d1073de13,"useMemoCache implementation (#25143)

* useMemoCache impl
* test for multiple calls in a component (from custom hook)
* Use array of arrays for multiple calls; use alternate/local as the backup
* code cleanup
* fix internal test
* oops we do not support nullable property access
* Simplify implementation, still have questions on some of the PR feedback though
* Gate all code based on the feature flag
* refactor to use updateQueue
* address feedback
* Try to eliminate size increase in prod bundle
* update to retrigger ci",Joseph Savona,2022-09-13T21:44:32Z
0556bab32c4350971619350d1efc230baf2ea147,"[Transition Tracing] More Accurate End Time (#25105)

add more accurate end time for transitions and update host configs with `requestPostPaintCallback` function and move post paint logic to another module and use it in the work loop",Luna Ruan,2022-09-13T17:55:56Z
5fdcd23aaa30a13eead12b7661a3a5903c6837f1,"Flow: upgrade to 0.140 (#25252)

This update range includes:

- `types_first` ([blog](https://flow.org/en/docs/lang/types-first/), all exports need annotated types) is default. I disabled this for now to make that change incremental.
- Generics that escape the scope they are defined in are an error. I fixed some with explicit type annotations and some are suppressed that I didn't easily figure out.",Jan Kassens,2022-09-13T17:33:43Z
e6a062bd2a1d53f7349a0d0950d89593b63a0c3c,Flow: add simple explicit export types to Devtools (#25251),Jan Kassens,2022-09-13T16:03:20Z
271bf90a94bf177e16e4482e6060c57f742eaf61,"[react devtools][easy] Centralize calls to patchConsoleUsingWindowValues (#25222)

* Instead of reading from window in two separate places, do this in a single function
* Add some type safety",Robert Balicki,2022-09-13T15:24:10Z
5c43c6f02652b0a3f66678a560e84d3110c573b7,"Unwind the current workInProgress if it's suspended (#25247)

Usually we complete workInProgress before yielding but if that's the
currently suspended one, we don't yet complete it in case we can
immediately unblock it.

If we get interrupted, however, we must unwind it. Where as we usually
assume that we've already completed it.

This shows up when the current work in progress was a Context that pushed
and then it suspends in its immediate children. If we don't unwind,
it won't pop and so we get an imbalance.",Sebastian Markbåge,2022-09-13T15:18:57Z
e52fa4c575e92b27d5d453829c7110bc5193f7a0,Add early exit to strict mode (#25235),Samuel Susla,2022-09-13T11:08:51Z
f2e4ff082dc273b1958423a5fce04833af43f855,fix: prettier ignore removed and fixed (#24811),Akul Srivastava,2022-09-13T01:16:29Z
6aa38e74c7960465db4cf4377e26abb3a205f5d9,Flow: enable unsafe-addition error (#25242),Jan Kassens,2022-09-12T20:22:50Z
ba7b6f4183dacb9ce332f715bcb84ce4cc7c2b8d,Flow: upgrade to 0.132 (#25244),Jan Kassens,2022-09-12T18:36:02Z
9328988c024800de05dfab70e55cfd0999445d8a,Flow: fix Fiber typed as any (#25241),Jan Kassens,2022-09-12T17:44:58Z
c739cef2fc628e50ffbb71d9f91f12c4e8e8cf36,Flow: ReactFiberHotReloading recursive type (#25225),Jan Kassens,2022-09-12T14:25:01Z
c156ecd483b4adc8e16254b8cab3ee735e893271,Add some test coverage for some error cases (#25240),Sebastian Markbåge,2022-09-12T01:53:00Z
3613284dceac38de4ef5a7c93c4897600ee6923b,"experimental_use(context) for server components and ssr (#25226)

implements the experimental use(context) API for the server components (Flight) and SSR (Fizz) runtimes",mofeiZ,2022-09-10T01:19:28Z
d5ddc6543efb2d26303a8bc3f38a5ad5dfe0e4f7,"Flow: upgrade to 0.131 (#25224)

This also downgrades the new lint warning to avoid new suppressions with this upgrade.",Jan Kassens,2022-09-09T20:21:32Z
269c4e975f10838ab36d08763f3ddf635f24690a,"Prevent infinite re-renders in StrictMode + Offscreen (#25203)

* Prevent infinite re-render in StrictMode + Offscreen

* Only fire effects for Offscreen when it is revealed

* Move setting debug fiber into if branch

* Move settings of debug fiber out of if branch",Samuel Susla,2022-09-09T20:10:26Z
8003ab9cf5c711eb00f741bbd89def56b066b999,Flow: remove explicit object syntax (#25223),Jan Kassens,2022-09-09T20:03:48Z
492c6e29e7c155e81292632e86453c5f06bcf6b9,"Flow: upgrade to 0.127 (#25221)

A smaller incremental update as some next version was changing more.",Jan Kassens,2022-09-09T16:21:44Z
bbd56b278cea8ab46f1d0439d20ad521381c36af,"Flow: enable exact_by_default (#25220)

With this change, a simple object type `{ }` means an exact object `{| |}` which most people assume.
Opting for inexact requires the extra `{ a: number, ... }` syntax at the end.

A followup, someone could replace all the `{| |}` with `{ }`.",Jan Kassens,2022-09-09T16:16:40Z
425f9fbba0266836a13f391aab0571193a0a4058,"[react devtools] Don't check for NODE_ENV==='test' because it never is (#25186)

* remove useless condition",Robert Balicki,2022-09-09T15:31:32Z
540ba5b4039cf3489a3a7d5da90211c1dc00eb39,"[react devtools][easy] Change variable names, etc. (#25211)

* Change variable names, put stuff in constants, etc. in preparation for next diff",Robert Balicki,2022-09-09T15:09:30Z
b0593dd9645ad17b46e0156a9bef022ad0cd0d9e,"Bump async from 2.6.3 to 2.6.4 in /fixtures/concurrent/time-slicing (#24443)

Bumps [async](https://github.com/caolan/async) from 2.6.3 to 2.6.4.
- [Release notes](https://github.com/caolan/async/releases)
- [Changelog](https://github.com/caolan/async/blob/v2.6.4/CHANGELOG.md)
- [Commits](https://github.com/caolan/async/compare/v2.6.3...v2.6.4)

---
updated-dependencies:
- dependency-name: async
  dependency-type: indirect
...

Signed-off-by: dependabot[bot] <support@github.com>

Signed-off-by: dependabot[bot] <support@github.com>
Co-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>",dependabot[bot],2022-09-09T14:56:21Z
8a9e7b6cefb5e7e94333c7d5fe2cca6541776d5b,"Flow: implicit-inexact-object=error (#25210)

* implicit-inexact-object=error
* default everything ambiguous to exact object
* inexact where exact causes errors",Jan Kassens,2022-09-09T14:13:58Z
37cc6bf12400b76cb79bb504071926ac91b4989e,Remove useDeferredValue and useTransition from Flight subset (#25215),Sebastian Markbåge,2022-09-09T13:32:40Z
c28f313e6d90a13b2eca85c1b3543d1ea6f81603,"experimental_use(promise) for SSR (#25214)

Follow up to #25084 and #25207. Implements experimental_use(promise) API
in the SSR runtime (Fizz).

This is largely a copy-paste of the Flight implementation. I have
intentionally tried to keep both as close as possible.",Andrew Clark,2022-09-09T01:47:33Z
d6f9628a8c8065295584d4393e51cac23fc4d3c2,Remove some RSC subset entry points that were removed in the main entry point (#25209),Sebastian Markbåge,2022-09-08T17:25:10Z
a473d08fcee187f957b844b53b2eee2d2714630b,"Update to Flow from 0.97 to 0.122 (#25204)

* flow 0.122
* update ReactModel type",Jan Kassens,2022-09-08T15:46:07Z
fe55c0ea09f0241d4f012d3c6a69e77014d3ca52,"Bump jsdom from 16.4.0 to 16.7.0 in /fixtures/legacy-jsx-runtimes (#24924)

Bumps [jsdom](https://github.com/jsdom/jsdom) from 16.4.0 to 16.7.0.
- [Release notes](https://github.com/jsdom/jsdom/releases)
- [Changelog](https://github.com/jsdom/jsdom/blob/master/Changelog.md)
- [Commits](https://github.com/jsdom/jsdom/compare/16.4.0...16.7.0)

---
updated-dependencies:
- dependency-name: jsdom
  dependency-type: indirect
...

Signed-off-by: dependabot[bot] <support@github.com>

Signed-off-by: dependabot[bot] <support@github.com>
Co-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>",dependabot[bot],2022-09-08T15:02:18Z
f094ee56d1027af46f77ccad43da1623c0fdca6f,"Bump terser from 4.6.13 to 4.8.1 (#24971)

Bumps [terser](https://github.com/terser/terser) from 4.6.13 to 4.8.1.
- [Release notes](https://github.com/terser/terser/releases)
- [Changelog](https://github.com/terser/terser/blob/master/CHANGELOG.md)
- [Commits](https://github.com/terser/terser/commits)

---
updated-dependencies:
- dependency-name: terser
  dependency-type: indirect
...

Signed-off-by: dependabot[bot] <support@github.com>

Signed-off-by: dependabot[bot] <support@github.com>
Co-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>",dependabot[bot],2022-09-08T14:57:43Z
0d095a3d960524fe766047636da24af75c516e16,Bump cross-fetch from 3.1.4 to 3.1.5 (#24462),dependabot[bot],2022-09-08T14:55:35Z
eaf8a138a95d8a0dd570c248cbcdf354c7701efb,"Bump terser from 4.6.7 to 4.8.1 in /fixtures/blocks (#24970)

Bumps [terser](https://github.com/terser/terser) from 4.6.7 to 4.8.1.
- [Release notes](https://github.com/terser/terser/releases)
- [Changelog](https://github.com/terser/terser/blob/master/CHANGELOG.md)
- [Commits](https://github.com/terser/terser/commits)

---
updated-dependencies:
- dependency-name: terser
  dependency-type: indirect
...

Signed-off-by: dependabot[bot] <support@github.com>

Signed-off-by: dependabot[bot] <support@github.com>
Co-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>",dependabot[bot],2022-09-08T14:49:16Z
15d6bd79b590631af908adf22f8ab3e71f54e93b,"Bump terser from 4.8.0 to 4.8.1 in /fixtures/fizz (#24974)

Bumps [terser](https://github.com/terser/terser) from 4.8.0 to 4.8.1.
- [Release notes](https://github.com/terser/terser/releases)
- [Changelog](https://github.com/terser/terser/blob/master/CHANGELOG.md)
- [Commits](https://github.com/terser/terser/commits)

---
updated-dependencies:
- dependency-name: terser
  dependency-type: indirect
...

Signed-off-by: dependabot[bot] <support@github.com>

Signed-off-by: dependabot[bot] <support@github.com>
Co-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>",dependabot[bot],2022-09-08T14:27:54Z
84d7e3720d29282bcbf474a140b03e9db1235028,Bump shell-quote in /fixtures/packaging/browserify/dev (#24773),dependabot[bot],2022-09-08T14:26:04Z
e1020aa52a48a4ea4e795c9135fd5f674722e97b,Bump moment from 2.24.0 to 2.29.4 (#24875),dependabot[bot],2022-09-08T14:24:56Z
43aa6f4c8897bc3da7fd3caddad08e7ee2428597,Bump jpeg-js from 0.4.3 to 0.4.4 (#24747),dependabot[bot],2022-09-08T14:23:31Z
126d3bf7493b7f96e178186e9abd05d76ca48d1d,Bump shell-quote in /fixtures/packaging/browserify/prod (#24772),dependabot[bot],2022-09-08T14:14:50Z
5ecc6568a1f48abb91e208bbb4711d72ce36b034,Bump async from 2.6.3 to 2.6.4 in /fixtures/dom (#24664),dependabot[bot],2022-09-08T14:03:21Z
a2331343bac2f50abf711d4c9277add7c8b4adbc,Bump async from 2.6.3 to 2.6.4 in /fixtures/blocks (#24668),dependabot[bot],2022-09-08T13:56:07Z
b3ebca732937587dc78f600915aea925ed274cdb,Bump moment from 2.29.1 to 2.29.4 in /fixtures/ssr (#24879),dependabot[bot],2022-09-08T13:53:25Z
79e2671168585e0200af7b301a2597479e0ba322,"Bump jszip from 2.6.1 to 2.7.0 (#25208)

Bumps [jszip](https://github.com/Stuk/jszip) from 2.6.1 to 2.7.0.
- [Release notes](https://github.com/Stuk/jszip/releases)
- [Changelog](https://github.com/Stuk/jszip/blob/main/CHANGES.md)
- [Commits](https://github.com/Stuk/jszip/commits)

---
updated-dependencies:
- dependency-name: jszip
  dependency-type: indirect
...

Signed-off-by: dependabot[bot] <support@github.com>

Signed-off-by: dependabot[bot] <support@github.com>
Co-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>",dependabot[bot],2022-09-08T13:39:33Z
7028ce74561b1585de401f8a70ce79b98d63849d,"experimental_use(promise) for Server Components (#25207)

Follow up to #25084. Implements experimental_use(promise) API in 
the Server Components runtime (Flight).

The implementation is much simpler than in Fiber because there is no
state. Even the ""state"" added in this PR — to track the result of each
promise across attempts — is reset as soon as a component 
successfully renders without suspending.

There are also fewer caveats around neglecting to cache a promise
because the state of the promises is preserved even if we switch to a
different task.

Server Components is the primary runtime where this API is intended to
be used.

The last runtime where we need to implement this is the server renderer
(Fizz).",Andrew Clark,2022-09-08T02:27:04Z
c80e54116e2f9c550472116181a5c66ad97adfbf,"[DevTools][Bugfix] Don't hide fragment if it has a key (#25197)

resolves #25187

---

We shouldn't hide fragments that have a key because this is important information that the user might want in the future.",Luna Ruan,2022-09-07T17:21:30Z
bfb65681e7d77ba9bd79f7f95ac57930542b57c1,experimental_use(context)(#25202),mofeiZ,2022-09-07T17:09:42Z
a9dc73cfd4db480b4cadf8624351004fe96f5a12,"Handle info, group, and groupCollapsed in Strict Mode logging (#25172)

* Handle info, group, and groupCollapsed in Strict Mode logging

While working on the new Next.js router which heavily relies on useReducer I noticed that `group` and `groupCollapsed` which both take labels were showing as-is in the console for the second render/dispatch in Strict Mode logs. While looking at the code I found that `info` was also not instrumented.

I've added additional handling for:
- `info`
- `group`
- `groupCollapsed`

* Remove console.log

* Fix tests",Tim Neutkens,2022-09-06T17:03:27Z
81b79c7c2966d08eb74954805394fe6cb290b796,Added the word 'own' to the README file for design consistency (#25185),Brandon Chan,2022-09-06T15:06:18Z
f0efa1164b7ca8523b081223954d05c88e92053b,[flow] remove custom suppress comment config (#25170),Jan Kassens,2022-09-01T16:55:59Z
2e7f422fea445c232c4723b97e0351aa93eeaa00,Refactor: its type is Container (#25153),bubucuo,2022-09-01T14:43:40Z
2c2d9a1df03f04d7aa7b37ec48d4e1e22b475dd8,"[eslint-plugin-react-hooks] only allow capitalized component names (#25162)

- update naming rules to disallow _component
- update eslint-plugin-react-hooks version",Jan Kassens,2022-09-01T14:07:31Z
36c908a6c85f271358ef91936df6ded18bbc6789,Don't use the Flight terminology in public error messages (#25166),Sebastian Markbåge,2022-09-01T03:07:56Z
8d1b057ec1394cecdbc5a63b1c8b2cd443afa7b2,"[Flight] Minor error handling fixes (#25151)

* Fix error handling when the Flight client itself errors

* Serialize references to errors in the error priority queue

It doesn't make sense to emit references to future values at higher pri
than the value that they're referencing.

This ensures that we don't emit hard forward references to values that
don't yet exist.",Sebastian Markbåge,2022-08-31T22:40:17Z
7e5322ccf2971dca90fa0cb9d7db91e60e877314,run prettier (#25164),Robert Balicki,2022-08-31T18:20:01Z
47867a772eec67f8cbefbc8575fb99f609c270f6,"[react devtools][easy] Fix code highlighting in VSCode (#25155)

* Minor change that fixes code highlighting in VSCode in a particular file",Robert Balicki,2022-08-31T18:07:37Z
a40ddf31246628423236ad1d8c6549409822e253,Fix CI: run `yarn prettier-all` (#25163),Jan Kassens,2022-08-31T17:50:04Z
aa80a309b19d59832ffeb82dfb6235da0c93dd42,"[react devtools][easy] Rename LOCAL_STORAGE_SHOULD_PATCH_CONSOLE_KEY to LOCAL_STORAGE_SHOULD_APPEND_COMPONENT_STACK_KEY (#25154)

* This more accurately describes what this constant does",Robert Balicki,2022-08-30T17:32:52Z
9ff738f53f228ea4343886a1e719ec2f1533d300,[devtools][easy] Fix flow type (#25147),Tianyu Yao,2022-08-27T01:47:39Z
0de3ddf56e011c708067319d9b8e94e1cd1ea1a5,Remove Symbol Polyfill (again) (#25144),Ricky,2022-08-25T21:01:30Z
b36f7223573c23da8ed794fcac81c607c389fe5f,Remove ReactFiberFlags MountLayoutDev and MountPassiveDev (#25091),Samuel Susla,2022-08-25T19:23:10Z
b6978bc38f6788c7e73982b9fd2771aabdf36f15,"experimental_use(promise) (#25084)

* Internal `act`: Unwrapping resolved promises

This update our internal implementation of `act` to support React's new
behavior for unwrapping promises. Like we did with Scheduler, when 
something suspends, it will yield to the main thread so the microtasks
can run, then continue in a new task.

I need to implement the same behavior in the public version of `act`,
but there are some additional considerations so I'll do that in a
separate commit.

* Move throwException to after work loop resumes

throwException is the function that finds the nearest boundary and
schedules it for a second render pass. We should only call it right 
before we unwind the stack — not if we receive an immediate ping and
render the fiber again.

This was an oversight in 8ef3a7c that I didn't notice because it happens
to mostly work, anyway. What made me notice the mistake is that
throwException also marks the entire render phase as suspended
(RootDidSuspend or RootDidSuspendWithDelay), which is only supposed to
be happen if we show a fallback. One consequence was that, in the 
RootDidSuspendWithDelay case, the entire commit phase was blocked,
because that's the exit status we use to block a bad fallback
from appearing.

* Use expando to check whether promise has resolved

Add a `status` expando to a thrown thenable to track when its value has
resolved.

In a later step, we'll also use `value` and `reason` expandos to track
the resolved value.

This is not part of the official JavaScript spec — think of
it as an extension of the Promise API, or a custom interface that is a
superset of Thenable. However, it's inspired by the terminology used
by `Promise.allSettled`.

The intent is that this will be a public API — Suspense implementations
can set these expandos to allow React to unwrap the value synchronously
without waiting a microtask.

* Scaffolding for `experimental_use` hook

Sets up a new experimental hook behind a feature flag, but does not
implement it yet.

* use(promise)

Adds experimental support to Fiber for unwrapping the value of a promise
inside a component. It is not yet implemented for Server Components, 
but that is planned.

If promise has already resolved, the value can be unwrapped
""immediately"" without showing a fallback. The trick we use to implement
this is to yield to the main thread (literally suspending the work
loop), wait for the microtask queue to drain, then check if the promise
resolved in the meantime. If so, we can resume the last attempted fiber
without unwinding the stack. This functionality was implemented in 
previous commits.

Another feature is that the promises do not need to be cached between
attempts. Because we assume idempotent execution of components, React
will track the promises that were used during the previous attempt and
reuse the result. You shouldn't rely on this property, but during
initial render it mostly just works. Updates are trickier, though,
because if you used an uncached promise, we have no way of knowing 
whether the underlying data has changed, so we have to unwrap the
promise every time. It will still work, but it's inefficient and can
lead to unnecessary fallbacks if it happens during a discrete update.

When we implement this for Server Components, this will be less of an
issue because there are no updates in that environment. However, it's
still better for performance to cache data requests, so the same
principles largely apply.

The intention is that this will eventually be the only supported way to
suspend on arbitrary promises. Throwing a promise directly will
be deprecated.",Andrew Clark,2022-08-25T18:12:07Z
11ed7010c6d34c40342e8b829a48fec138215ae0,"[Transition Tracing] onMarkerIncomplete - Tracing Marker/Suspense Boundary Deletions (#24885)

This PR adds the `onMarkerIncomplete` callback for tracing marker name changes. Specifically, this PR:
* Adds the `onMarkerIncomplete` callback
* When a tracing marker is deleted, call `onMarkerIncomplete` with the `name` of the tracing marker for the tracing marker. 
* When a tracing marker/suspense boundary is deleted, call `onMarkerIncomplete` for every parent tracing marker with the `name` of the tracing marker that caused the transition to be incomplete. 
* Don't call `onTransitionComplete` or `onMarkerComplete` when `onMarkerIncomplete` is called for all tracing markers with the same transitions, but continue to call `onTransitionProgress`",Luna Ruan,2022-08-25T18:03:03Z
b79894259a2f54bcc457ea91f35411878c11e32c,"[Flight] Add support for Webpack Async Modules (#25138)

This lets you await the result of require(...) which will then
mark the result as async which will then let the client unwrap the Promise
before handing it over in the same way.",Sebastian Markbåge,2022-08-25T16:27:30Z
c8b778b7f44faba63d1d2eeb9f7d95da282e0a34,Fix typo: supportsMicrotask -> supportsMicrotasks (#25142),kwzr,2022-08-25T15:56:24Z
d0f396651bd654a9c2058d9c779aab843651ca9a,Allow functions to be used as module references (#25137),Sebastian Markbåge,2022-08-25T11:47:38Z
38c5d8a035c6e8070ab00d9cf7b9d2fae7752fdf,Test the node-register hooks in unit tests (#25132),Sebastian Markbåge,2022-08-24T23:05:39Z
3f70e68cea8d2ed0f53d35420105ae20e22ce428,Return closestInstance in `getInspectorDataForViewAtPoint` (#25118),Tianyu Yao,2022-08-24T18:26:08Z
181525338e62a698c05ca04cf91fdccdafd2b5db,"[DevTools] Highlight RN elements on hover (#25106)

* [DevTools] Highlight RN elements on hover

* Remove unused TODO",Tianyu Yao,2022-08-24T18:25:22Z
3d443cad74bdd8f3d617c39756afe02d51f8d636,"Update fixtures/flight to webpack 5 (#25115)

* Add new flight fixture

* Move flight dir files

* Enable writeToDisk and distDir

* Move flight2 -> flight

* flight2 -> flight

* Remove unused files

* Remove unused files

* Run prettier

* Ignore eslint cache

Co-authored-by: Sebastian Markbage <sebastian@calyptus.eu>",Tim Neutkens,2022-08-24T01:18:05Z
5d1ce651393524639a3b4b1e861a0413a4d25629,"Align StrictMode behaviour with production (#25049)

* Skip double invoking effects in Offscreen

* Run yarn replace-fork

* Use executionContext to disable profiler timer

* Restructure recursion into two functions

* Fix ReactStrictMode test

* Use gate pragma in ReacetOffscreenStrictMode test

* Set and reset current debug fiber in dev

* Skip over paths that don't include any insertions

* Extract common logic to check for profiling to a helper function

* Remove hasPassiveEffects flag from StrictMode

* Fix flow issues

* Revert ""Skip over paths that don't include any insertions""",Samuel Susla,2022-08-23T17:19:07Z
9e67e7a31582079263665fac0391220b99d8bb86,"Scaffolding for useMemoCache hook (#25123)

* Scaffolding for useMemoCache hook
* cleanup leftovers from copy/paste of use() diff

Co-authored-by: Andrew Clark <git@andrewclark.io>",Joseph Savona,2022-08-23T08:36:02Z
e25648b0a89eab6f82bea2c2a1ef90866ac82b33,devtools: Fix typo from directores to directories (#25124),taiga,2022-08-22T16:40:26Z
1b69a8bb73f653c3f421cc1f7ae00ad9ce1f24be,fixture: Fix typo from perfomrance to performance (#25100),Evren,2022-08-21T19:16:01Z
26ba5fb2e003e334c51b0e2ea750faa32a27a8f9,"[DevTools] Add events necessary for click to inspect on RN (#25111)

* Add inspectingNative events for RN

* Enable inspection toggle UI for RN

* Add a stopInspectingNative method for agent",Tianyu Yao,2022-08-19T23:18:14Z
19e9a4c68e16356f5079cb1d3939ac1515a9fdad,Add missing createServerContext for experimental shared subset (#25114),Jiachi Liu,2022-08-18T13:33:36Z
1e5245df89e45b788acf3af3769f0d816b18458d,support subresource integrity for bootstrapScripts and bootstrapModules (#25104),Josh Story,2022-08-17T07:31:05Z
6ef466c681c987493432608be56f2e01f94268d7,make preamble and postamble types explicit and fix typo (#25102),Josh Story,2022-08-16T11:17:49Z
796d31809b3683083d3b62ccbab4f00dec8ffb1f,"Implement basic stylesheet Resources for react-dom (#25060)

Implement basic support for ""Resources"". In the context of this commit, the only thing that is currently a Resource are

<link rel=""stylesheet"" precedence=""some-value"" ...>

Resources can be rendered anywhere in the react tree, even outside of normal parenting rules, for instance you can render a resource before you have rendered the <html><head> tags for your application. In the stream we reorder this so the browser always receives valid HTML and resources are emitted either in place (normal circumstances) or at the top of the <head> (when you render them above or before the <head> in your react tree)

On the client, resources opt into an entirely different hydration path. Instead of matching the location within the Document these resources are queried for in the entire document. It is an error to have more than one resource with the same href attribute.

The use of precedence here as an opt-in signal for resourcifying the link is in preparation for a more complete Resource implementation which will dedupe resource references (multiple will be valid), hoist to the appropriate container (body, head, or elsewhere), order (according to precedence) and Suspend boundaries that depend on them. More details will come in the coming weeks on this plan.

This feature is gated by an experimental flag and will only be made available in experimental builds until some future time.",Josh Story,2022-08-12T20:27:53Z
32baab38f8f48f629ccd3f7564251b91dc2d777d,"[Transition Tracing] Add Tag Field to Marker Instance (#25085)

We were previously using `markerInstance.name` to figure out whether the marker instance was on the tracing marker or the root, but this is unsustainable. This adds a tag field so we can explicitly check this.",Luna Ruan,2022-08-12T03:04:45Z
8ef3a7c08c55c13995267902859381da8b5985ac,"Resume immediately pinged fiber without unwinding (#25074)

* Yield to main thread if continuation is returned

Instead of using an imperative method `requestYield` to ask Scheduler to
yield to the main thread, we can assume that any time a Scheduler task
returns a continuation callback, it's because it wants to yield to the
main thread. We can assume the task already checked some condition that
caused it to return a continuation, so we don't need to do any
additional checks — we can immediately yield and schedule a new task
for the continuation.

The replaces the `requestYield` API that I added in ca990e9.

* Move unwind after error into main work loop

I need to be able to yield to the main thread in between when an error
is thrown and when the stack is unwound. (This is the motivation behind
the refactor, but it isn't implemented in this commit.) Currently the
unwind is inlined directly into `handleError`.

Instead, I've moved the unwind logic into the main work loop. At the
very beginning of the function, we check to see if the work-in-progress
is in a ""suspended"" state — that is, whether it needs to be unwound. If
it is, we will enter the unwind phase instead of the begin phase.

We only need to perform this check when we first enter the work loop:
at the beginning of a Scheduler chunk, or after something throws. We
don't need to perform it after every unit of work.

* Yield to main thread whenever a fiber suspends

When a fiber suspends, we should yield to the main thread in case the
data is already cached, to unblock a potential ping event.

By itself, this commit isn't useful because we don't do anything special
in the case where to do receive an immediate ping event. I've split this
out only to demonstrate that it doesn't break any existing behavior.

See the next commit for full context and motivation.

* Resume immediately pinged fiber without unwinding

If a fiber suspends, and is pinged immediately in a microtask (or a
regular task that fires before React resumes rendering), try rendering
the same fiber again without unwinding the stack. This can be super
helpful when working with promises and async-await, because even if the
outermost promise hasn't been cached before, the underlying data may
have been preloaded. In many cases, we can continue rendering
immediately without having to show a fallback.

This optimization should work during any concurrent (time-sliced)
render. It doesn't work during discrete updates because those are
semantically required to finish synchronously — those get the current
behavior.",Andrew Clark,2022-08-12T02:01:56Z
4e60dbd90506ab7e08f9fe13922e18a1778b9bcb,"[easy] Clarify folders in react devtools readme #25077

Clarify the folder from which we run various commands in the react-devtools readme",Robert Balicki,2022-08-11T23:47:02Z
7bcc687720bbb31873768399dd87c27d8c231011,Remove argument committedLanes from reappearLayoutEffects and recursivelyTraverseReappearLayoutEffects (#25080),Samuel Susla,2022-08-11T13:24:56Z
7a227276e653b481b73ed9e9178244b53d61f730,"revert last grammatical edit (#25067)

on line 29, #24798 edited (others') to (other's); however, the subject here is plural (e.g. ""others in the community""), thus (others') is grammatically correct",ZA Syed,2022-08-10T19:14:31Z
17e2a15bea2df9232411a35c6d967fa18f6e8b25,"Added a comma to understand better the Readme file for the contributor and the viewer. (#24798)

* Small change for Readme file

Added a comma, for better understanding for the contributor and the viewer.

* Update CODE_OF_CONDUCT.md

* Updated, requested changes are done!",Krishnamohan Yerrabilli,2022-08-08T11:31:34Z
ca990e9a753597768765e71c98fe650789c9ee8b,"Add API to force Scheduler to yield for macrotask (#25044)

We need a way to yield control of the main thread and schedule a
continuation in a separate macrotask. (This is related to some Suspense
optimizations we have planned.)

Our solution needs account for how Scheduler is implemented. Scheduler
tasks are not 1:1 with real browser macrotasks — many Scheduler ""tasks""
can be executed within a single browser task. If a Scheduler task yields
control and posts a continuation, but there's still time left in the
frame, Scheduler will execute the continuation immediately
(synchronously) without yielding control back to the main thread. That's
not what we want — we want to schedule a new macrotask regardless of
where we are in the browser's render cycle.

There are several ways we could approach this. What I ended up doing was
adding a new Scheduler method `unstable_requestYield`. (It's similar to
the existing `unstable_requestPaint` that we use to yield at the end of
the frame.)

It works by setting the internal start time of the current work loop to
a large negative number, so that when the `shouldYield` call computes
how much time has elapsed, it's guaranteed to exceed the deadline. The
advantage of doing it this way is that there are no additional checks in
the normal hot path of the work loop.

The existing layering between Scheduler and React DOM is not ideal. None
of the APIs are public, so despite the fact that Scheduler is a separate
package, I consider that a private implementation detail, and think of
them as part of the same unit.

So for now, though, I think it makes sense to implement this macrotask
logic directly inside of Scheduler instead of layering it on top.

The rough eventual plan for Scheduler is turn it into a `postTask`
prollyfill. Because `postTask` does not yet have an equivalent for
`shouldYield`, we would split that out into its own layer, perhaps
directly inside the reconciler. In that world, the macrotask logic I've
added in this commit would likely live in that same layer. When the
native `postTask` is available, we may not even need any additional
logic because it uses actual browser tasks.",Andrew Clark,2022-08-05T01:20:15Z
b4204ede66284e7153ffb11fd434cd9b9a64a56f,"Clean up unused Deletion flag (#24992)

This was replaced by the ChildDeletion flag when we refactored the 
commit phase.",Andrew Clark,2022-08-03T21:03:53Z
e193be87e683fd7c1a03f09505013c67a454040f,"[Transition Tracing] Add Offscreen Test (#25035)

Add a test to make sure offscreen trees don't stop transitions from completing.",Luna Ruan,2022-08-03T17:24:41Z
9fcaf88d58cfd942e2fdd303ae8291dbf4828969,"Remove rootContainerInstance from unnecessary places (#25024)

We only really use this for the create APIs since the DOM requires it.

We could probably use the Host Context for this instead since they're
updated at the same time and the namespace is related to this concept.",Sebastian Markbåge,2022-08-02T03:30:04Z
3f3b46c845333be5d8efcd9acb06e3ff57358189,docs(react-devtools-inline): `react-dom@experimental` instead of `react-dom@experimenal` (#25001),Konpaku Youmu,2022-07-30T08:57:13Z
80f3d88190c07c2da11b5cac58a44c3b90fbc296,"Mount/unmount passive effects when Offscreen visibility changes (#24977)

* Remove unnecessary try-catch from passive deletion

The individual unmount calls are already wrapped in a catch block, so
this outer one serves no purpose.

* Extract passive unmount effects to separate functions
    
I'm about to add a ""disconnect passive effects"" function that will share
much of the same code as commitPassiveUnmountOnFiber. To minimize the
duplicated code, I've extracted the shared parts into separate
functions, similar to what I did for commitLayoutEffectOnFiber and
reappearLayoutEffects.

This may not save much on code size because Closure will likely inline
some of it, anyway, but it makes it harder for the two paths to
accidentally diverge.

* Mount/unmount passive effects on hide/show

This changes the behavior of Offscreen so that passive effects are
unmounted when the tree is hidden, and re-mounted when the tree is
revealed again. This is already how layout effects worked.

In the future we will likely add an option or heuristic to only unmount
the effects of a hidden tree after a delay. That way if the tree quickly
switches back to visible, we can skip toggling the effects entirely.

This change does not apply to suspended trees, which happen to use
the Offscreen fiber type as an implementation detail. Passive effects
remain mounted while the tree is suspended, for the reason described
above — it's likely that the suspended tree will resolve and switch
back to visible within a short time span.

At a high level, what this capability enables is a feature we refer to
as ""resuable state"". The real value proposition here isn't so much the
behavior of effects — it's that you can switch back to a previously
rendered tree without losing the state of the UI.

* Add more coverage for nested Offscreen cases",Andrew Clark,2022-07-29T23:34:28Z
4ea064eb0915b355b584bff376e90dbae0e8b169,"Don't fire passive effects during initial mount of a hidden Offscreen tree (#24967)

* Change OffscreenInstance isHidden to bitmask

The isHidden field of OffscreenInstance is a boolean that represents
whether the tree is currently hidden. To implement resuable effects, we
need to also track whether the passive effects are currently connected.
So I've changed this field to a bitmask.

No other behavior has changed in this commit. I'll update the effects
behavior in the following steps.

* Extract passive mount effects to separate functions

I'm about to add a ""reappear passive effects"" function that will share
much of the same code as commitPassiveMountEffectOnFiber. To minimize
the duplicated code, I've extracted the shared parts into separate
functions, similar to what I did for commitLayoutEffectOnFiber and
reappearLayoutEffects.

This may not save much on code size because Closure will likely inline
some of it, anyway, but it makes it harder for the two paths to
accidentally diverge.

* Don't mount passive effects in a new hidden tree

This changes the behavior of Offscreen so that passive effects do not
fire when prerendering a brand new tree. Previously, Offscreen did not
affect passive effects at all — only layout effects, which mount or
unmount whenever the visibility of the tree changes.

When hiding an already visible tree, the behavior of passive effects is
unchanged, for now; unlike layout effects, the passive effects will not
get unmounted. Pre-rendered updates to a hidden tree in this state will
also fire normally. This is only temporary, though — the plan is for
passive effects to act more like layout effects, and unmount them when
the tree is hidden. Perhaps after a delay so that if the visibility
toggles quickly back and forth, the effects don't need to remount. I'll
implement this separately.

* ""Atomic"" passive commit effects must always fire

There are a few cases where commit phase logic always needs to fire even
inside a hidden tree. In general, we should try to design algorithms
that don't depend on a commit effect running during prerendering, but
there's at least one case where I think it makes sense.

The experimental Cache component uses reference counting to keep track
of the lifetime of a cache instance. This allows us to expose an
AbortSignal object that data frameworks can use to cancel aborted
requests. These cache objects are considered alive even inside a
prerendered tree.

To implement this I added an ""atomic"" passive effect traversal that runs
even when a tree is hidden. (As a follow up, we should add a special
subtree flag so that we can skip over nodes that don't have them. There
are a number of similar subtree flag optimizations that we have planned,
so I'll leave them for a later refactor.)

The only other feature that currently depends on this behavior is
Transition Tracing. I did not add a test for this because Transition
Tracing is still in development and doesn't yet work with Offscreen.",Andrew Clark,2022-07-29T23:22:57Z
2c7dea73659da283fa433f5fd657a5a29797fd67,"Implement Offscreen in Fizz (#24988)

During server rendering, a visible Offscreen subtree acts exactly like a
fragment: a pure indirection.

A hidden Offscreen subtree is not server rendered at all. It's ignored
during hydration, too. Prerendering happens only on the client. We
considered prerendering hidden trees on the server, too, but our
conclusion is that it's a waste of bytes and server computation. We
can't think of any compelling cases where it's the right trade off. (If
we ever change our mind, though, the way we'll likely model it is to
treat it as if it's a Suspense boundary with an empty fallback.)",Andrew Clark,2022-07-26T04:35:51Z
5f34b051dfb708ef6e8dc8e55d5e1bbd209381e8,"[Devtools] add logs for profiler tab switch & settings change (#24966)

* [devtools] add logs for profiler tab switch & settings change

* prettier

* remove unnecessary console.log

* better naming: logEvent -> loggerEvent

* use same object for event and metadata",Mengdi Chen,2022-07-25T15:53:38Z
b66936ece7d9ad41a33e077933c9af0bda8bff87,"devtools: Remove ForwardRef/Memo from display name if `displayName` is set (#21952)

* feat(devtools): Remove ForwardRef/Memo from display name if `displayName` is set

* Avoid potentially wasting work by inlining `functionName`",Sebastian Silbermann,2022-07-25T07:02:12Z
49f8254d6dec7c6de789116e20ffc5a9401aa725,Bug fix for <App /> vs. <Counter /> (#24972),davidrenne,2022-07-22T15:24:49Z
6b28bc9c5aa91e1d848c97c380e284d3f518b3bd,test: Throw custom error instead of relying on runtime error (#24946),Sebastian Silbermann,2022-07-21T19:46:57Z
9bd0dd4c181a5be8b6c62cc5d90a727570f08b9c,test(react-debug-tools): Improve coverage of currentDispatcher.current setter (#24945),Sebastian Silbermann,2022-07-21T19:46:43Z
59bc52a16c5bdec6de5fc87de4d900ebc20389b2,"Add 4.5.0 release to eslint rules CHANGELOG (#24853)

Eye-balled from https://app.renovatebot.com/package-diff?name=eslint-plugin-react-hooks&from=4.4.0&to=4.5.0#d2h-042857 which changes were included.",Sebastian Silbermann,2022-07-21T19:46:10Z
3ddbedd0520a9738d8c3c7ce0268542e02f9738a,"[devtools] log more events + metadata (#24951)

* [devtools] log more events + metadata

* better typing

* consistent string type",Mengdi Chen,2022-07-19T19:22:09Z
cfb6cfa25031992569a328530b4fb8612a5d377b,"Reused components commit with timing as new ones

When an Offscreen tree goes from hidden -> visible, the tree may include
both reused components that were unmounted when the tree was hidden, and
also brand new components that didn't exist in the hidden tree.

Currently when this happens, we commit all the reused components'
effects first, before committing the new ones, using two separate
traversals of the tree.

Instead, we should fire all the effects with the same timing as if it
were a completely new tree. See the test I wrote for an example.

This is also more efficient because we only need to traverse the
tree once.",Andrew Clark,2022-07-15T16:49:30Z
679eea3282967742473910aed1209ac8c21f2a67,"Extract layout effects to separate functions

There's a lot of duplicated code between commitLayoutEffectOnFiber and the
""reappear layout effects"" path that happens when an Offscreen tree goes from
hidden back to visible. I'm going to refactor these to share more of the same
code. As a first step, this extracts the shared parts into separate functions.

This may not save much on code size because Closure will likely inline some of
it, anyway, but it makes it harder for the two paths to accidentally diverge.",Andrew Clark,2022-07-14T16:29:18Z
41287d44753f0ea03d54bd8296d733ff82dfe336,"Use recursion to traverse during ""reappear layout"" phase

This converts the ""reappear layout"" phase to iterate over its effects
recursively instead of iteratively. This makes it easier to track
contextual information, like whether a fiber is inside a hidden tree.

We already made this change for several other phases, like mutation and
layout mount. See 481dece for more context.",Andrew Clark,2022-07-14T21:55:28Z
697702bf341dcf63c47f6de9645970d45f6cf9ef,"Use recursion to traverse during ""disappear layout"" phase

This converts the ""disappear layout"" phase to iterate over its effects
recursively instead of iteratively. This makes it easier to track
contextual information, like whether a fiber is inside a hidden tree.

We already made this change for several other phases, like mutation and
layout mount. See 481dece for more context.",Andrew Clark,2022-07-13T15:45:53Z
992911981bc35b6fc3e7cacb4294d6d782527603,"[DevTools] add simple usage events for internal logging (#24888)

* [DevTools] add simple events for internal logging

* fix lint

* fix lint

* better event name

* fix flow

* better way to fix flow

* combine 'select-element'

* use same event name for selecting element by inspecting",Mengdi Chen,2022-07-18T19:52:53Z
6daf600609e7699106673b37b507097bc2ea5139,"add transistion callbacks to hydrateRoot (#24937)

This PR adds transition callbacks to hydrateRoot.",Luna Ruan,2022-07-18T17:22:47Z
02206099afe9bf54435fe0bd978a4ccf3df9cace,"Use recursion to traverse during passive unmount phase (#24918)

This converts the layout phase to iterate over its effects recursively
instead of iteratively. This makes it easier to track contextual
information, like whether a fiber is inside a hidden tree.

We already made this change for several other phases, like mutation and
layout mount. See 481dece for more context.",Andrew Clark,2022-07-14T15:08:08Z
d54880d4241aab772e6e2e6aedbb7176b9f2c191,React DevTools 4.24.7 -> 4.25.0 (#24919),Mengdi Chen,2022-07-13T19:57:50Z
f629495199791ce2811661ab50c37aac7898f862,"[Transition Tracing] Rename transitionCallbacks to unstable_transitionCallbacks  (#24920)

Renaming transitionCallbacks to unstable_transitionCallbacks as per convention",Luna Ruan,2022-07-13T19:27:12Z
4bc83e682119085481a7c940d23c5f1568be002b,[DevTools] enable `enableProfilerComponentTree` flag for all builds (#24921),Mengdi Chen,2022-07-13T19:21:32Z
7a4336c4040bb26d8fe143f96d842acae4c728b5,"Use recursion to traverse during passive mount phase 

This converts the layout phase to iterate over its effects
recursively instead of iteratively. This makes it easier to track 
contextual information, like whether a fiber is inside a hidden tree.

We already made this change for the mutation phase. See 481dece for
more context.",Andrew Clark,2022-07-12T19:02:07Z
bb1357b38170e81cfbf2398cc6fefcf7a1ef2ccb,"Wrap try-catch directly around each user function 

(This is the same as f9e6aef, but for the passive mount phase rather than the
mutation phase.)

This moves the try-catch from around each fiber's passive mount phase to
direclty around each user function (effect function, callback, etc).

We already do this when unmounting because if one unmount function
errors, we still need to call all the others so they can clean up
their resources.

Previously we didn't bother to do this for anything but unmount,
because if a mount effect throws, we're going to delete that whole
tree anyway.

But now that we're switching from an iterative loop to a recursive one,
we don't want every call frame on the stack to have a try-catch, since
the error handling requires additional memory.

Wrapping every user function is a bit tedious, but it's better
for performance. Many of them already had try blocks around
them already.",Andrew Clark,2022-07-12T18:45:21Z
de3c069843af825503b91ed10d04d03db2aa1c94,"Move flag check into each switch case 

The fiber tag is more specific than the effect flag, so we should always
refine the type of work first, to minimize redundant checks.",Andrew Clark,2022-07-12T18:36:31Z
f5916d15b66cce92bf0a6a4c8752154cadcc0cf8,"[Transition Tracing][Code Cleanup] Delete Marker Name Change Tests (#24908)

We decided that changing the Tracing Marker name wasn't allowed and we would error, so this PR deletes all the tests that tested name change behavior",Luna Ruan,2022-07-12T19:59:58Z
fa20b319fcfad50d7b981ec57f111b4e24d6f559,"[Transition Tracing] Code Cleanup (#24880)

This PR cleans up some of the transition tracing code by:
* Looping through marker transitions only when we process the markerComplete callback (rather than in the commit phase) so we block for less time during commit.
* Renaming `PendingSuspenseBoundaries` to `pendingBoundaries`
* Cleaning up the callback functions",Luna Ruan,2022-07-12T19:48:04Z
5e8c1961c03269ca0ee741182f3c877e0766efb8,"[Transition Tracing] onMarkerProgress (#24861)

This PR adds support for `onMarkerProgress` (`onTransitionProgress(transitionName: string, markerName: string, startTime: number, currentTime: number, pending: Array<{name: null | string}>)`)

We call this callback when:
    * When **a child suspense boundary of the marker commits in a fallback state**. Only the suspense boundaries that are triggered and commit in a fallback state when the transition first occurs (and all subsequent suspense boundaries in the initial suspense boundary's subtree) are considered a part of the transition
    * **A child suspense boundary of the marker resolves**
   
When we call `onMarkerProgress`, we call the function with a `pending` array. This array contains the names of the transition's suspense boundaries that are still in a fallback state",Luna Ruan,2022-07-12T18:59:54Z
b641d0209717d1127296d26b53b8dc056d9e6952,"Use recursion to traverse during layout phase

This converts the layout phase to iterate over its effects
recursively instead of iteratively. This makes it easier to track 
contextual information, like whether a fiber is inside a hidden tree.

We already made this change for the mutation phase. See 481dece for
more context.",Andrew Clark,2022-07-12T17:25:31Z
a1b1e391e1663a401b84642b2107390fe9451a38,"Wrap try-catch directly around each user function

(This is the same as f9e6aef, but for the layout phase rather than the
mutation phase.)

This moves the try-catch from around each fiber's layout phase to
direclty around each user function (effect function, callback, etc).

We already do this when unmounting because if one unmount function
errors, we still need to call all the others so they can clean up
their resources.

Previously we didn't bother to do this for anything but unmount,
because if a mount effect throws, we're going to delete that whole
tree anyway.

But now that we're switching from an iterative loop to a recursive one,
we don't want every call frame on the stack to have a try-catch, since
the error handling requires additional memory.

Wrapping every user function is a bit tedious, but it's better
for performance. Many of them already had try blocks around
them already.",Andrew Clark,2022-07-12T16:57:34Z
3df7e8f5dcc3e379d8ce738da2a87029467bcf1d,"Move flag check into each switch case 

The fiber tag is more specific than the effect flag, so we should always
refine the type of work first, to minimize redundant checks.",Andrew Clark,2022-07-08T17:28:45Z
b8c96b136d9968fd593ea0ed44adfc2ac39b6b8d,"Move ref commit effects inside switch statement

Only certain fiber types can have refs attached to them, so this moves the
Ref effect logic out of the common path and into the corresponding branch
of the layout phase's switch statement.

The types of fibers this affects are host components and class components.
Function components are not affected because they can only have a ref via
useImperativeHandle, which has a different implementation. The experimental
Scope type attaches its refs in the mutation phase, not the layout phase.",Andrew Clark,2022-07-08T17:10:14Z
e225fa43ada4f4cf3d3ba4982cdd81bb093eaa46,"[Transition Tracing] Don't call transition callbacks if no transition name specified (#24887)

This PR checks to see if `transition.name` is defined before adding the transition so we avoid doing unnecessary work for transitions without a transition name",Luna Ruan,2022-07-11T22:00:49Z
dd2d6522754f52c70d02c51db25eb7cbd5d1c8eb,"[Transition Tracing] Tracing Marker Name Change in Update Warning (#24873)

We should only support Tracing Marker's name field during component mount. This PR adds a warning if the Tracing Marker's name changes during an update.",Luna Ruan,2022-07-08T16:31:44Z
80208e7696b8e391fe301ab312c73cd5f500bd4c,"[Transition Tracing] Add onTransitionProgress Callback (#24833)

This PR adds support for `onTransitionProgress` (`onTransitionProgress(transitionName: string, startTime: number, currentTime: number, pending: Array<{name: null | string}>)`)

We call this callback when:
    * When **a child suspense boundary of the transition commits in a fallback state**. Only the suspense boundaries that are triggered and commit in a fallback state when the transition first occurs (and all subsequent suspense boundaries in the initial suspense boundary's subtree) are considered a part of the transition
    * **A child suspense boundary of the transition resolves**
   
When we call `onTransitionProgress`, we call the function with a `pending` array. This array contains the names of the transition's suspense boundaries that are still in a fallback state",Luna Ruan,2022-07-08T16:13:29Z
30eb267abdb032bf78e6394bd9ad79102e1d3fb1,"Land forked reconciler changes (#24878)

This applies forked changes from the ""new"" reconciler to the ""old"" one.

Includes:

- 67de5e3 [FORKED] Hidden trees should capture Suspense
- 6ab05ee [FORKED] Track nearest Suspense handler on stack
- 051ac55 [FORKED] Add HiddenContext to track if subtree is hidden",Andrew Clark,2022-07-08T15:55:53Z
5e4e2dae0ba1836d26fa4e5edb4475d3b3e0a60c,"Defer setState callbacks until component is visible (#24872)

A class component `setState` callback should not fire if a component is inside a
hidden Offscreen tree. Instead, it should wait until the next time the component
is made visible.",Andrew Clark,2022-07-08T15:51:40Z
95e22ff528c875b090de51a0fb0d83181c4d1111,"Delete Partial Renderer SSR implementation (#24868)

This removes the old server rendering implementation (the ""Partial Renderer"").
It was replaced in React 18 with a new streaming implementation (Fizz).

We hadn't removed it from the codebase yet because Facebook hadn't finished
rolling out Fizz in production; it's been behind a feature flag while we run
performance tests and migrate our internal infrastructure.

The diff to land Fizz will land imminently, and once it does, we can merge
this commit.",Andrew Clark,2022-07-07T20:57:42Z
c3b18571dbf27b47675619aefc9cc9a4a06dbe18,"[DevTools][Bugfix] Fix DevTools Perf Issue When Unmounting Large React Subtrees (#24863)

We've recently had multiple reports where, if React DevTools was installed, unmounting large React subtrees would take a huge performance hit (ex. from 50ms to 7 seconds). 

Digging in more, we realized for every fiber that unmounts, we called `untrackFibers`, which calls `clearTimeout` (and does some work manipulating a set, but this wasn't the bulk of the time). We ten call `recordUnmount`, which adds the timer back. Adding and removing the timer so many times was taking upwards of 50ms per timer add/remove call, which was resulting in exorbitant amounts of time spent in DevTools deleting subtrees.

It looks like we are calling `untrackFibers` so many times to avoid a race condition with Suspense children where we unmount them twice (first a ""virtual"" unmount when the suspense boundary is toggled from visible to invisible, and then an actual unmount when the new children are rendered) without modifying `fiberIDMap`. We can fix this race condition by using the `untrackFibersSet` as a lock and not calling `recordUnmount` if the fiber is in the set and hasn't been processed yet. This works because the only way fibers are added in the set is via `recordUnmount` anyway.

This PR also adds a test to make sure this change doesn't regress the previous behavior.

**Before**
![image](https://user-images.githubusercontent.com/2735514/177655428-774ee306-0568-49ce-987e-b5213b613265.png)

**After**
![image](https://user-images.githubusercontent.com/2735514/177655604-a217583f-787e-438e-b6f9-18953fe32444.png)",Luna Ruan,2022-07-07T14:43:25Z
8e35b5060875c875f468878f94bc3c0d7d45c52d,"[Transition Tracing] Refactor Code to Remove OffscreeInstance TODOs (#24855)

Refactored code to pass flow and remove TODOs introduced in #24846",Luna Ruan,2022-07-06T13:38:28Z
deab1263a8b8a2cea96bcbff27358570cccc7284,"[Transition Tracing] Change Transition Type Passed Pending Transitions (#24856)

This PR changes the type of the object we store in the pending transitions callbacks map. Previously, we were recreating the transition object that we initially created during `startTransition`. However, we can actually reuse the object instead (and it also gives us a stable way to identify a transition). This PR changes the implementation to reuse the transition object instead of creating a new one",Luna Ruan,2022-07-06T13:37:46Z
82e9e9909876591dbe808cdac7110610e63c3896,"Suspending inside a hidden tree should not cause fallbacks to appear (#24699)

* [FORKED] Hidden trees should capture Suspense

If something suspends inside a hidden tree, it should not affect
anything in the visible part of the UI. This means that Offscreen acts
like a Suspense boundary whenever it's in its hidden state.

* Add previous commit to forked revisions",Andrew Clark,2022-07-05T21:51:27Z
c1f5884ffeceb8be2277e10c81aeaffca2dfe9d8,"Add missing null checks to OffscreenInstance code (#24846)

`stateNode` is any-typed, so when reading from `stateNode` we should always cast
it to the specific type for that type of work. I noticed a place in the commit
phase where OffscreenInstance wasn't being cast. When I added the type
assertion, it exposed some type errors where nullable values were being accessed
without first being refined.

I added the required null checks without verifying the logic of the existing
code. If the existing logic was correct, then the extra null checks won't have
any affect on the behavior, because all they do is refine from a nullable type
to a non-nullable type in places where the type was assumed to already be
non-nullable. But the result looks a bit fishy to me, so I also left behind some
TODOs to follow up and verify it's correct.",Andrew Clark,2022-07-05T15:40:44Z
4cd788aef03d8f32c03e4dac4d0cf28b220cedfb,"Revert ""Revert [Transition Tracing] Refactor Transition Tracing Root Code"" (#24830)

* refactor root

* old

* Add comments and push actual marker instance in pushMarkerInstance

* old

* refactor pushRootMarkerInstance

* old

* fix test",Luna Ruan,2022-06-30T17:16:08Z
e61fd91f5c523adb63a3b97375ac95ac657dc07f,"Revert ""[Transition Tracing] Refactor Transition Tracing Root Code (#24766)"" (#24829)

This reverts commit 401296310fbc6a9e769936eda6a6d0269e9c84d0 because it's
failing on main, likely due to conflict with something that landed before the
PR was merged. Need to rebase and fix.",Andrew Clark,2022-06-30T15:48:25Z
401296310fbc6a9e769936eda6a6d0269e9c84d0,"[Transition Tracing] Refactor Transition Tracing Root Code (#24766)

This PR refactors the transition tracing root code by reusing the tracing marker code. Namely it:
* Refactors the tracing marker code so that it takes a tracing marker instance instead of a tracing marker fiber and rename the stack to `markerInstance` instead of `tracingMarker`
* Pushes the root code onto the stack
* Moves the instantiation of `root.incompleteTransitions` to the begin phase when we are pushing the root to the stack rather than in the commit phase",Luna Ruan,2022-06-30T15:16:32Z
1859329021892484051339a76c2250fa4ca5f77e,"Track nearest Suspense handler on stack (#24585)

* [FORKED] Add HiddenContext to track if subtree is hidden

This adds a new stack cursor for tracking whether we're rendering inside
a subtree that's currently hidden.

This corresponds to the same place where we're already tracking the
""base lanes"" needed to reveal a hidden subtree — that is, when going
from hidden -> visible, the base lanes are the ones that we skipped
over when we deferred the subtree. We must includes all the base lanes
and their updates in order to avoid an inconsistency with the
surrounding content that already committed.

I consolidated the base lanes logic and the hidden logic into the same
set of push/pop calls.

This is intended to replace the InvisibleParentContext that is currently
part of SuspenseContext, but I haven't done that part yet.

* Add previous commit to forked revisions

* [FORKED] Track nearest Suspense handler on stack

Instead of traversing the return path whenever something suspends to
find the nearest Suspense boundary, we can push the Suspense boundary
onto the stack before entering its subtree. This doesn't affect the
overall algorithm that much, but because we already do all the same
logic in the begin phase, we can save some redundant work by tracking
that information on the stack instead of recomputing it every time.

* Add previous commit to forked revisions",Andrew Clark,2022-06-30T14:03:29Z
a7b192e0f16a5a585796c78cfdb688845d7710a5,"Add test gate alias for Offscreen (#24749)

Offscreen is only enabled in the www and experimental channels. Instead
of listing these on every Offscreen test, I added a test gate alias
called `enableOffscreen`. Makes it easier to grep for these, and edit or
remove the channels later.",Andrew Clark,2022-06-30T13:44:54Z
6b6cf8311c05a10667c852e833d6f7f51fa476c7,"Land forked reconciler changes (#24817)

This applies forked changes from the ""new"" reconciler to the ""old"" one.

Includes:

- d410f0a [FORKED] Bugfix: Offscreen instance is null during setState
- 58bb117 [FORKED] Check for infinite update loops even if unmounted
- 31882b5 [FORKED] Bugfix: Revealing a hidden update
- 17691ac [FORKED] Don't update childLanes until after current render",Andrew Clark,2022-06-30T03:31:42Z
4e1fcfa77175765a7d51d70a2e519569012593d8,"[DevTools] Resign Timeline Profiler Sidebar (#24816)

This PR:
* Redesigned the sidebar to resemble the flamegraph profiler sidebar and added title and timestamp to the sidebar
* Added ability to copy the component stack (for places where you're unable to link to source)

https://user-images.githubusercontent.com/2735514/176564897-5301d6d4-429a-4ea3-86cd-74427cff4ce6.mov",Luna Ruan,2022-06-30T00:54:06Z
1974d08c93ddf171779fde59215e8430f36d281a,"[DevTools] Fix Bugs With Component Stacks (#24815)

This PR:
* Simplifies the code in `SidebarEventInfo` by passing it the actual clicked event rather than an index.
* Lightly refactored the `SidebarEventInfo` code so that it can be used for more than just `schedulingEvents`
* Fixes bug. Previously, whenever a state update event was clicked, we updated the `selectedCommitIndex` in the `ProfilerContext`. However, this index is used for the selected commit in the Flamegraph profiler, which caused a bug where if you would change the contents of the event sidebar, the commit sidebar in the Flamegraph profiler would change too. This PR replaces this with the actual event info instead",Luna Ruan,2022-06-29T23:00:48Z
cd80d3274d48155d0f83347daab3eda57009f41b,"[DevTools] Add column number to viewSourceLineFunction (#24814)

Add column number for `viewSourceLineFunction` and renamed the function to `viewUrlSourceFunction` to match the other source function naming conventions",Luna Ruan,2022-06-29T17:38:27Z
f01e119b7d6b32104d37a7a9247fdd5a25bd29d2,"[DevTools] Log page URL in internal build (#24799)

* test log

* fix attribute name

* fix lint

* tabs can be empty

* improve coding style per comments",Mengdi Chen,2022-06-29T17:02:53Z
d1432ba93e971b249d7055dbb3b91e34eb0d2100,"[Transition Tracing] Fix excess calls to the transition start callback (#24806)

This PR fixes a bug where we would add a transition to the lanes map every time an update occurs. However, we didn't factor in that there might be multiple updates in a transition, which would cause the transition to be added multiple times to the transitionLanes map.

This changes the transitionLanes object from an Array of Arrays to an Array of Sets so that we only add a transition if it hasn't been added before, avoiding duplicates",Luna Ruan,2022-06-29T01:17:14Z
2e1c8841e97923e7af50c5c5311e3724b7b6555d,"[DevTools] front-end for profiling event stack (#24805)

* [DevTools] front-end for profiling event stack

Adds a side-bar to the profiling tab. Users can now select an update event, and are
shown the callstack from the originating component. When a source path is available
there is now UI to jump to source.

Add FB enabled feature flag: enableProfilerComponentTree for the side-bar.

resolves #24170",Blake Friedman,2022-06-28T21:15:24Z
88574c1b8bd4ed187f09a9c91d327784fe50dbe8,"Fix enableTransitionTracing flag (#24801)

Move `enableTransitionTracing` to `dynamicFeatureFlags` so it runs when you run `yarn test`",Luna Ruan,2022-06-28T17:09:59Z
a4bed469697a1e23c398fe80228df31ef6d4b612,"[Transition Tracing] Add Tracing Markers (#24686)

This PR adds support for Tracing Markers as well as onTracingMarkerComplete",Luna Ruan,2022-06-27T16:46:43Z
167853026cb193f81c0474d3bf9ef9e03dde203e,"fix hydration warning suppression in text comparisons (#24784)

* fix hydration warning suppression in text comparisons

* lint

* lowercase test",Josh Story,2022-06-26T19:22:10Z
652e6c5a1b2067cbe1964c6b4ec1af5ff295d7ed,"[sizebot] Add link to diff view (#24790)

Updates the sizebot output so that the file names link to a diff view of
the corresponding build artifact.

Example diff view: https://react-builds.vercel.app/commits/955cad9bcc6d755b2a672f8038fe9754e0fe5108/files/oss-stable-semver/react-dom/cjs/react-dom.production.min.js?compare=c3d7a7e3d72937443ef75b7e29335c98ad0f1424

The diff view itself is rendered by a Next.js app that I built as a side
project and is hosted at https://react-builds.vercel.app. If we find
this useful enough I could move the app to a React-owned repo but since
this isn't a critical feature it might be OK to leave it separate for
now, so we don't need to commit to supporting it indefinitely.",Andrew Clark,2022-06-25T23:13:41Z
955cad9bcc6d755b2a672f8038fe9754e0fe5108,"[DevTools] Clean Up DevTools Code (#24782)

This PR cleans up the DevTools codebase by:
* Consolidating `normalizeCodeLocInfo` into one place
* Remove unused source argument in the DevTools component stacks code",Luna Ruan,2022-06-23T22:47:47Z
9abe745aa748271be170c67cc43b09f62ca5f2dc,"[DevTools][Timeline Profiler] Component Stacks Backend (#24776)

This PR adds a component stack field to the `schedule-state-update` event. The algorithm is as follows:
* During profiling, whenever a state update happens collect the parents of the fiber that caused the state update and store it in a map
* After profiling finishes, post process the `schedule-state-update` event and using the parent fibers, generate the component stack by using`describeFiber`, a function that uses error throwing to get the location of the component by calling the component without props.

---

Co-authored-by: Blake Friedman <blake.friedman@gmail.com>",Luna Ruan,2022-06-23T18:19:23Z
cf665c4b73a28b034c8173f4d929205fb12d2d2e,"[DevTools] Refactor incompleteTransitions field from Root Fiber memoized state to FiberRoot (#24765)

`incompleteTransitions` persists across renders, so it should be part of the `fiber.stateNode` (ie FiberRoot) rather than `fiber.memoizedState`",Luna Ruan,2022-06-21T00:08:54Z
d6255f0ac4d3282272165a68f64ab3444d6790d3,[DevTool] fix build-for-devtools script (#24764),Mengdi Chen,2022-06-20T19:06:40Z
56389e81ffe17c97f3137f18cc6446a4b2c956de,"Abort Flight (#24754)

Add aborting to the Flight Server. This encodes the reason as an ""error""
row that gets thrown client side. These are still exposed in prod which
is a follow up we'll still have to do to encode them as digests instead.

The error is encoded once and then referenced by each row that needs to
be updated.",Sebastian Markbåge,2022-06-19T15:05:41Z
0f216ae31d91f882134707af99d5da9c01e1f603,"Add entry points for ""static"" server rendering passes (#24752)

This will be used to add optimizations for static server rendering.",Sebastian Markbåge,2022-06-19T02:34:31Z
f796fa13ad13ee9939cb7847bfa90ada860068b2,"Rename Segment to Task in Flight (#24753)

In Fizz this got split into Task and Segment. We don't have a concept of
Segment in Flight yet because we don't inline multiple segments into one
""Row"". We just emit one ""Row"" for each Segment if something suspends.

This makes Flight non-deterministic atm but that's something we'll want to
address.

Regardless, right now, this is more like a Task than a Segment.",Sebastian Markbåge,2022-06-18T19:02:11Z
0f0aca3ab35354040950ac0001fd4c01d70dceb4,"Aborting early should not infinitely suspend (#24751)

Before this change we weren't calling onError nor onFatalError if you abort
before completing the shell.

This means that the render never completes and hangs.

Aborting early can happen before even creating the stream for AbortSignal,
before rendering starts in Node since there's an setImmediate atm, or
during rendering.",Sebastian Markbåge,2022-06-18T15:01:58Z
12a738f1a87889bb5f7c4159641573fd04140664,"[Transition Tracing] Add Support for Multiple Transitions on Root (#24732)

We can think of transitions on the root as a bunch of tracing markers. Therefore, we can map each transition to a map of pending suspense boundaries. When a transition's pending suspense boundary map is empty, we know that it's complete. This PR:
* Combines the `pendingSuspenseBoundaries` and `transitions` into one `incompleteTransitions` object. This object is a map from a `transition` to a map of `pendingSuspenseBoundaries`
* Refactored code to make it so that every transition has its own `pendingSuspenseBoundaries` map rather than sharing just one.
* Moves the transition complete callback to the root. Alternatively, we can also keep a map of pendingSuspenseBoundaries to transitions on the Offscreen marker, but it's simpler to just call the transition complete callback on the root instead. We also only do this if there are transitions pending, so it shouldn't make too big of a difference",Luna Ruan,2022-06-17T20:43:46Z
72ebc703ac8abacd44fdeb1e3d66eb28b75e5a5b,"[DevTools] fix useDeferredValue to match reconciler change (#24742)

* [DevTools] fix useDeferredValue to match reconciler change

* fixup

* update test to catch original issue

* fix lint

* add safer tests for other composite hooks",Mengdi Chen,2022-06-17T18:43:10Z
a7c322c6f5fd33acfecf1d50dec4f911c3e9daf4,Fix typo in dangerfile.js (insiginificant -> insignificant) (#24393),Siyabend Ürün,2022-06-17T17:43:52Z
7cf9f5e03a245b4a879c5abc84e5ffb2824370e4,Extra space (#24612),Kerim Büyükakyüz,2022-06-17T17:43:17Z
229c86af07302d40b70c41de18106f80fe89836c,"Revert ""Land enableClientRenderFallbackOnTextMismatch"" (#24738)

This reverts commit 327e4a1f96fbb874001b17684fbb073046a84938.

Turns out we hadn't rolled this out internally yet — I mistook
enableClientRenderFallbackOnHydrationMismatch for
said enableClientRenderFallbackOnTextMismatch. Need to revert
until we finish rolling out the change.",Andrew Clark,2022-06-16T15:38:37Z
c3d7a7e3d72937443ef75b7e29335c98ad0f1424,"Bugfix: Offscreen instance is null during setState (#24734)

* [FORKED] Bugfix: Offscreen instance is null during setState

During a setState, we traverse up the return path and check if any
parent Offscreen components are currently hidden. To do that, we must
access the Offscreen fiber's `stateNode` field.

On a mounted Offscreen fiber, the `stateNode` is never null, so usually
we don't need to refine the type. When a fiber is unmounted, though,
we null out its `stateNode` field to prevent memory cycles. However,
we also null out its `return` field, so I had assumed that an unmounted
Offscreen fiber would never be reachable.

What I didn't consider is that it's possible to call `setState` on a
fiber that never finished mounting. Because it never mounted, it was
never deleted. Because it was never deleted, its `return` field was
never disconnected.

This pattern is always accompanied by a warning but we still need to
account for it. There may also be other patterns where an unmounted
Offscreen instance is reachable, too.

The discovery also suggests it may be better for memory
usage if we don't attach the `return` pointer until the commit phase,
though in order to do that we'd need some other way to track the return
pointer during initial render, like on the stack.

The fix is to add a null check before reading the instance
during setState.

* Add previous commit to list of forked revisions",Andrew Clark,2022-06-16T02:13:22Z
fcd720d3631a23a9e273db60bf2d35ff5f7dc406,"[Transition Tracing] Push Transition When Offscreen Becomes Visible (#24718)

This PR pushes all of a suspense boundary's transitions onto the transition stack when it goes from hidden to visible so we can pass it to any child suspense boundaries or tracing markers.",Luna Ruan,2022-06-15T18:51:51Z
522f47345f79bb117f338384e75c8a79622bd735,"Move the Error creation to be lazy (#24728)

Creating an Error captures a stack trace which can be somewhat expensive.
We shouldn't do tthat always for every render.

This also ensures that the stack trace is more useful because you can
follow through the Node.js code to see the cause.",Sebastian Markbåge,2022-06-15T00:16:42Z
256aefbea1449869620fb26f6ec695536ab453f5,Typo,dan,2022-06-14T21:34:30Z
6522179f43949d3b5d9b7d46f7a2f9574eebce81,Enable no-longer experimental (#24727),Sebastian Markbåge,2022-06-14T21:11:01Z
567500d71083f84cdd4259a76f8a1289d159747f,"Move renderToString tests out of the streamable API tests (#24724)

ReactDOMFizzServer(Browser/Node)-test file is really meant to just be a
very shallow tests of the Browser/Node specific streaming APIs.

Most of the general streaming tests are in ReactDOMFizzServer-test instead
of testing all streaming related things in each environment.

The legacy renderToString APIs are mostly covered by ReactServerRendering-test
et al for historical reasons.",Sebastian Markbåge,2022-06-14T20:48:33Z
5cc2487e0858c8d3c5415137b3c3a95d8f5a0356,bump versions for next release (#24725),Josh Story,2022-06-14T20:24:00Z
89bae8f371eb2cf49dbe310ec7f04d0e52e32f98,Update Changelog release date for 18.2.0,Josh Story,2022-06-14T19:49:54Z
54f17e490f8b8f39ef9f296c87cd0fba217ce28c,"[Transition Tracing] Fix Cache and Transitions Pop Order (#24719)

We push the Cache before the transition so we should pop the transition before the cache. This PR fixes this issue.",Luna Ruan,2022-06-14T18:48:01Z
be229c5655074642ee664f532f2e7411dd7dccc7,"Changelog for 18.2 (#24717)

* 1820-changelog

* generalize date and fix version typo

* reword, edit, and condense

* punctuation

* Nits

Co-authored-by: dan <dan.abramov@gmail.com>",Josh Story,2022-06-13T19:36:49Z
7cf8dfd94f29a42102e5e553395d9bb1b1710c42,"[Transition Tracing] Create/Process Marker Complete Callback (#24700)

This PR adds code to add a marker complete callback to the queue. It also adds code to process marker complete callback.

Marker complete callbacks, in addition to the fields that transition complete callbacks need, also have a `markerName` field",Luna Ruan,2022-06-13T17:56:21Z
327e4a1f96fbb874001b17684fbb073046a84938,"[Follow-up] Land enableClientRenderFallbackOnTextMismatch

This was meant to land in the previous commit; forgot to stage the
changes when I was rebasing.",Andrew Clark,2022-06-12T22:12:33Z
29c2c633159cb2171bb04fe84b9caa09904388e8,"Land enableClientRenderFallbackOnTextMismatch (#24714)

This was released to open source in 18.0 and is already hardcoded to
true in www.",Andrew Clark,2022-06-13T15:58:03Z
a8c9cb18b7e5d9eb3817272a1260f9f6b79815a2,"Land enableSuspenseLayoutEffectSemantics flag (#24713)

This was released to open source in 18.0 and is already hardcoded to
true in www.",Andrew Clark,2022-06-13T15:27:40Z
f7b44539ca9c2d126c7d12cfd0d9d4f13ad5851f,"[DevTools] enable ""reload & profile"" button for timeline view (#24702)",Mengdi Chen,2022-06-10T14:38:33Z
a8555c308e06eacf807ec47caafd1e0e789d2c54,"[Transition Tracing] Add Tracing Marker Stack (#24661)

When a suspense boundary suspends or commits, we need to notify the corresponding tracing markers so that they know when to log that they've completed. To do this, we add a stack of tracing markers. In the begin phase, we will push the tracing markers onto the stack, and during the complete/unwind phase we will pop the tracing markers off the stack

In a later PR, we will store the active tracing markers on the suspense boundary, and during the commit phase we will process the active tracing markers by adding/removing the boundary as appropriate.",Luna Ruan,2022-06-10T00:10:42Z
8186b19378d9085fcdec32c42e2ec8845c1f8ce0,"Check for infinite update loops even if unmounted (#24697)

* [FORKED] Check for infinite update loops even if unmounted

The infinite update loop check doesn't need to run if the component
already unmounted, because an update to an unmounted component can't
cause a re-render. But because we used to run the check in this case,
anyway, I found one test in www that happens to ""rely on"" this behavior
(accidentally). The test is a pretty messy snapshot thing that I have no
interest fixing so to unblock the sync I'm just going to switch this
back to how it was.

* Add previous commit to forked revisions",Andrew Clark,2022-06-09T02:29:10Z
9e3b772b8cabbd8cadc7522ebe3dde3279e79d9e,"Update error transform to allow excluding errors inside subexpressions like ternaries (#24693)

* Update error transform to allow excluding errors inside subexpressions like ternaries

* make leadingcomments aggregation walk the expression stack",Josh Story,2022-06-08T23:59:49Z
3e92eb0fce762aca49d2ea18b869a2fd8a75089e,"[DevTools] find best renderer when inspecting (#24665)

* [DevTools] find best renderer when inspecting

* fix lint

* fix test

* fix lint

* move logic to agent

* fix lint

* style improvements per review comments

* fix lint & flow

* re-add try catch for safety",Mengdi Chen,2022-06-08T20:01:06Z
42b330c1c9bf71ca512c56c204bca36bdd53b3c6,"Fix check_error_codes CI job (#24692)

The diff command was missing a --quiet argument, causing the job not to
fail when unminified messages were found.",Andrew Clark,2022-06-08T17:07:05Z
060505e9dce2f3d5d9d67c2a9415b94e5b0ca291,"Fix misapplying prod error opt-out (#24688)

The eslint-disable-next-line opt out for prod error minification was not properly working. In the build a replacable error was output even though it was not failing the build. This change refactors the code to avoid the erroneous behavior but a fix for the lint may be better",Josh Story,2022-06-08T16:49:31Z
47944142f57d8c1c7b79eaf6522de38e76137ca5,`now` isn't part of the react-reconciler config anymore (#24689),Mathieu Dutour,2022-06-08T16:00:10Z
b345523528f6b346c3a6de2145d5df6b2e23ca75,"[Fizz] Support abort reasons (#24680)

* [Fizz] Support abort reasons

Fizz supports aborting the render but does not currently accept a reason. The various render functions that use Fizz have some automatic and some user-controlled abort semantics that can be useful to communicate with the running program and users about why an Abort happened.

This change implements abort reasons for renderToReadableStream and renderToPipeable stream as well as legacy renderers such as renderToString and related implementations.

For AbortController implementations the reason passed to the abort method is forwarded to Fizz and sent to the onError handler. If no reason is provided the AbortController should construct an AbortError DOMException and as a fallback Fizz will generate a similar error in the absence of a reason

For pipeable  streams, an abort function is returned alongside pipe which already accepted a reason. That reason is now forwarded to Fizz and the implementation described above.

For legacy renderers there is no exposed abort functionality but it is used internally and the reasons provided give useful context to, for instance to the fact that Suspense is not supported in renderToString-like renderers",Josh Story,2022-06-08T05:36:09Z
79f54c16dc3d5298e6037df75db2beb3552896e9,"Bugfix: Revealing a hidden update (#24685)

* Add `isHidden` to OffscreenInstance

We need to be able to read whether an offscreen tree is hidden from
an imperative event. We can store this on its OffscreenInstance.

We were already scheduling a commit effect whenever the visibility
changes, in order to toggle the inner effects. So we can reuse that.

* [FORKED] Bugfix: Revealing a hidden update

This fixes a bug I discovered related to revealing a hidden Offscreen
tree. When this happens, we include in that render all the updates that
had previously been deferred — that is, all the updates that would have
already committed if the tree weren't hidden. This is necessary to avoid
tearing with the surrounding contents. (This was the ""flickering""
Suspense bug we found a few years ago: #18411.)

The way we do this is by tracking the lanes of the updates that were
deferred by a hidden tree. These are the ""base"" lanes. Then, in order
to reveal the hidden tree, we process any update that matches one of
those base lanes.

The bug I discovered is that some of these base lanes may include
updates that were not present at the time the tree was hidden. We cannot
flush those updates earlier that the surrounding contents — that, too,
could cause tearing.

The crux of the problem is that we sometimes reuse the same lane for
base updates and for non-base updates. So the lane alone isn't
sufficient to distinguish between these cases. We must track this in
some other way.

The solution I landed upon was to add an extra OffscreenLane bit to any
update that is made to a hidden tree. Then later when we reveal the
tree, we'll know not to treat them as base updates.

The extra OffscreenLane bit is removed as soon as that lane is committed
by the root (markRootFinished) — at that point, it gets
""upgraded"" to a base update.

The trickiest part of this algorithm is reliably detecting when an
update is made to a hidden tree. What makes this challenging is when the
update is received during a concurrent event, while a render is already
in progress — it's possible the work-in-progress render is about to
flip the visibility of the tree that's being updated, leading to a race
condition.

To avoid a race condition, we will wait to read the visibility of the
tree until the current render has finished. In other words, this makes
it an atomic operation. Most of this logic was already implemented
in #24663.

Because this bugfix depends on a moderately risky refactor to the update
queue (#24663), it only works in the ""new"" reconciler fork. We will roll
it out gradually to www before landing in the main fork.

* Add previous commit to list of forked revisions",Andrew Clark,2022-06-08T00:04:02Z
7e8a020a4aa8a24e5f0c0ce06b25e485d2888f57,"Remove extra Server Context argument (#24683)

This was left over from a refactor.",Sebastian Markbåge,2022-06-07T19:12:51Z
3bb154bbab78038f1b0aad42f10c006b71eac8da,"[DevTools] Run Devtools Regression Tests Once a Day (#24678)

We don't need to run DevTools regression tests once an hour, and also it makes getting the most recent react build or react devtools build really annoying, so run them once a day instead",Luna Ruan,2022-06-07T18:05:04Z
bcbeb52bf36c6f5ecdad46a48e87cf4354c5a64f,"[Fizz] Disallow complex children in <title> elements (#24679)

* [Fizz] Disallow complex children in <title> elements

<title> Elements in the DOM can only have Text content. In Fizz if more than one text node is emitted an HTML comment node is used as a text separator. Unfortunately because of the content restriction of the DOM representation of the title element this separator is displayed as escaped text which is not what the component author intended.

This commit special cases title handling, primarily to issue warnings if you pass complex children to <title>. At the moment title expects to receive a single child or an array of length 1. In both cases the type of that child must be string or number. If anything more complex is provided a warning will be logged to the console explaining why this is problematic.

There is no runtime behavior change so broken things are still broken (e.g. returning two text nodes which will cause a separator or using Suspense inside title children) but they should at least be accompanied by warnings that are useful.

One edge case that will now warn but won't technically break an application is if you use a Component that returns a single string as a child of title. This is a form of indirection that works but becasue we cannot discriminate between a Component that will follow the rules and one that violates them the warning is issued regardless.

* fixup dev warning conditional logic

* lints

* fix bugs",Josh Story,2022-06-07T07:33:36Z
4f29ba1cc52061e439cede3813e100557b23a15c,"support errorInfo in onRecoverableError (#24591)

* extend onRecoverableError API to support errorInfo

errorInfo has been used in Error Boundaries wiht componentDidCatch for a while now. To date this metadata only contained a componentStack. onRecoverableError only receives an error (type mixed) argument and thus providing additional error metadata was not possible without mutating user created mixed objects.

This change modifies rootConcurrentErrors rootRecoverableErrors, and hydrationErrors so all expect CapturedValue types. additionally a new factory function allows the creation of CapturedValues from a value plus a hash and stack.

In general, client derived CapturedValues will be created using the original function which derives a componentStack from a fiber and server originated CapturedValues will be created using with a passed in hash and optional componentStack.",Josh Story,2022-06-06T21:23:32Z
254b49e5897b4e493c88ecec5c80abeacda90526,"Add snapshot testing on e2e test failure (#24672)

We have a currently unreproducible flaky e2e test. This PR captures snapshots on e2e test failures so we can better debug flaky e2e tests that don't fail locally.",Luna Ruan,2022-06-06T17:36:58Z
1cd90d2ccc791f3ed25d93ceb7137746185f6e34,"Refactor of interleaved (""concurrent"") update queue (#24663)

* Always push updates to interleaved queue first

Interleaves updates (updates that are scheduled while another render
is already is progress) go into a special queue that isn't applied until
the end of the current render. They are transferred to the ""real"" queue
at the beginning of the next render.

Currently we check during `setState` whether an update should go
directly onto the real queue or onto the special interleaved queue. The
logic is subtle and it can lead to bugs if you mess it up, as in #24400.

Instead, this changes it to always go onto the interleaved queue. The
behavior is the same but the logic is simpler.

As a further step, we can also wait to update the `childLanes` until
the end of the current render. I'll do this in the next step.

* Move setState return path traversal to own call

A lot of the logic around scheduling an update needs access to the
fiber root. To obtain this reference, we must walk up the fiber return
path. We also do this to update `childLanes` on all the parent
nodes, so we can use the same traversal for both purposes.

The traversal currently happens inside `scheduleUpdateOnFiber`, but
sometimes we need to access it beyond that function, too.

So I've hoisted the traversal out of `scheduleUpdateOnFiber` into its
own function call that happens at the beginning of the
`setState` algorithm.

* Rename ReactInterleavedUpdates -> ReactFiberConcurrentUpdates

The scope of this module is expanding so I've renamed accordingly. No
behavioral changes.

* Enqueue and update childLanes in same function

During a setState, the childLanes are updated immediately, even if a
render is already in progress. This can lead to subtle concurrency bugs,
so the plan is to wait until the in-progress render has finished before
updating the childLanes, to prevent subtle concurrency bugs.

As a step toward that change, when scheduling an update, we should not
update the childLanes directly, but instead defer to the
ReactConcurrentUpdates module to do it at the appropriate time.

This makes markUpdateLaneFromFiberToRoot a private function that is
only called from the ReactConcurrentUpdates module.

* [FORKED] Don't update childLanes until after current render

(This is the riskiest commit in the stack. Only affects the ""new""
reconciler fork.)

Updates that occur in a concurrent event while a render is already in
progress can't be processed during that render. This is tricky to get
right. Previously we solved this by adding concurrent updates to a
special `interleaved` queue, then transferring the `interleaved` queue
to the `pending` queue after the render phase had completed.

However, we would still mutate the `childLanes` along the parent path
immediately, which can lead to its own subtle data races.

Instead, we can queue the entire operation until after the render phase
has completed. This replaces the need for an `interleaved` field on
every fiber/hook queue.

The main motivation for this change, aside from simplifying the logic a
bit, is so we can read information about the current fiber while we're
walking up its return path, like whether it's inside a hidden tree.
(I haven't done anything like that in this commit, though.)

* Add 17691ac to forked revisions",Andrew Clark,2022-06-06T16:15:59Z
4ddd8b455ce1dac02c56a18790d5068a7714c1a0,"Track revs that intentionally fork the reconciler (#24671)

* Track revs that intentionaly fork the reconciler

When we fork the the ""old"" and ""new"" reconciler implementations, it can
be difficult to keep track of which commits introduced the delta
in behavior. This makes bisecting difficult if one of the changes
introduces a bug.

I've added a new file called `forked-revisions` that contains the list
of commits that intentionally forked the reconcilers.

In CI, we'll confirm that the reconcilers are identical except for the
changes in the listed revisions. This also ensures that the revisions
can be cleanly reverted.

* [TEST] Add trivial divergence between forks

This should fail CI. We'll see if the next commit fixes it.

* [TEST] Update list of forked revisions

This should fix CI

* Revert temporary fork

This reverts the temporary fork added in the previous commits that was
used to test CI.

* Update error message when CI fails",Andrew Clark,2022-06-06T15:53:11Z
652dcf6550f3586377e910cf41b4846eff374210,"Fix CI: Persist build artifacts to workspace

The download_build job needs to persist its artifacts to the workspace
so downstream jobs can access them.

Persist the same directories as the normal build job.",Andrew Clark,2022-06-06T15:33:22Z
dfd6f96f7699adc005a1b0a011b7c8e7261345ce,"Fix CI: Remove copypasta from sizebot download job

This was copy pasted from the similar job that exists to download
base artifacts for sizebot.",Andrew Clark,2022-06-06T15:29:37Z
a621cb099dafb8bd77370ed4f4d832f049642183,"Fix CI: Download to build instead of base-build (#24677)

Fixes a mistake in #24676. The get_base_build job downloads artifacts to
`base-build` instead of `build`, so that sizebot can compare the two
directories. For most other jobs, though, we want it to produce the
same output as the normal build job.",Andrew Clark,2022-06-06T14:38:02Z
a97a0810eae4428dd55dc1fa1b94ee1f9c18715b,"DevTools e2e workflow: Download build artifacts (#24676)

When running the hourly DevTools testing workflow, we don't need to
build React from scratch each time; we can download its build artifacts,
like we do for sizebot and the release workflow.",Andrew Clark,2022-06-06T13:57:35Z
7a5b8227c7d67aefe62f015cf0e961e28075d897,"Allow aritfacts download even if CI is broken (#24666)

* Allow aritfacts download even if CI is broken

Adds an option to the download script to disable the CI check and
continue downloading the artifacts even if CI is broken.

I often rely on this to debug broken build artifacts. I was thinking
the sizebot should also use this when downloading the base artifacts
from main, since for the purposes of size tracking, it really doesn't
matter whether the base commit is broken.

* Sizebot should work even if base rev is broken

Sizebot works by downloading the build artifacts for the base revision
and comparing the fize sizes, but the download script will fail if
the base revision has a failing CI job. This happens more often than it
should because of flaky cron jobs, but even when it does, we shouldn't
let it affect the sizebot — for the purposes of tracking sizes, it
doesn't really matter whether the base revision is broken.",Andrew Clark,2022-06-03T01:55:35Z
d300cebde2a63e742ccb8b6aa7b0f61db1ae29b4,[DevTools] only polyfill requestAnimationFrame when necessary (#24651),Mengdi Chen,2022-06-01T17:04:09Z
d2c9e834ae07377edbc94128eec4480693b64292,"[DevTools] Run e2e Regression Tests Hourly on Circle CI (#24648)

Modifies Circle CI so we run e2e regression tests hourly on Circle CI",Luna Ruan,2022-06-01T14:55:26Z
