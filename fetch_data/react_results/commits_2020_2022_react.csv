SHA,Message,Author,Date
4cd788aef03d8f32c03e4dac4d0cf28b220cedfb,"Revert ""Revert [Transition Tracing] Refactor Transition Tracing Root Code"" (#24830)

* refactor root

* old

* Add comments and push actual marker instance in pushMarkerInstance

* old

* refactor pushRootMarkerInstance

* old

* fix test",Luna Ruan,2022-06-30T17:16:08Z
e61fd91f5c523adb63a3b97375ac95ac657dc07f,"Revert ""[Transition Tracing] Refactor Transition Tracing Root Code (#24766)"" (#24829)

This reverts commit 401296310fbc6a9e769936eda6a6d0269e9c84d0 because it's
failing on main, likely due to conflict with something that landed before the
PR was merged. Need to rebase and fix.",Andrew Clark,2022-06-30T15:48:25Z
401296310fbc6a9e769936eda6a6d0269e9c84d0,"[Transition Tracing] Refactor Transition Tracing Root Code (#24766)

This PR refactors the transition tracing root code by reusing the tracing marker code. Namely it:
* Refactors the tracing marker code so that it takes a tracing marker instance instead of a tracing marker fiber and rename the stack to `markerInstance` instead of `tracingMarker`
* Pushes the root code onto the stack
* Moves the instantiation of `root.incompleteTransitions` to the begin phase when we are pushing the root to the stack rather than in the commit phase",Luna Ruan,2022-06-30T15:16:32Z
1859329021892484051339a76c2250fa4ca5f77e,"Track nearest Suspense handler on stack (#24585)

* [FORKED] Add HiddenContext to track if subtree is hidden

This adds a new stack cursor for tracking whether we're rendering inside
a subtree that's currently hidden.

This corresponds to the same place where we're already tracking the
""base lanes"" needed to reveal a hidden subtree — that is, when going
from hidden -> visible, the base lanes are the ones that we skipped
over when we deferred the subtree. We must includes all the base lanes
and their updates in order to avoid an inconsistency with the
surrounding content that already committed.

I consolidated the base lanes logic and the hidden logic into the same
set of push/pop calls.

This is intended to replace the InvisibleParentContext that is currently
part of SuspenseContext, but I haven't done that part yet.

* Add previous commit to forked revisions

* [FORKED] Track nearest Suspense handler on stack

Instead of traversing the return path whenever something suspends to
find the nearest Suspense boundary, we can push the Suspense boundary
onto the stack before entering its subtree. This doesn't affect the
overall algorithm that much, but because we already do all the same
logic in the begin phase, we can save some redundant work by tracking
that information on the stack instead of recomputing it every time.

* Add previous commit to forked revisions",Andrew Clark,2022-06-30T14:03:29Z
a7b192e0f16a5a585796c78cfdb688845d7710a5,"Add test gate alias for Offscreen (#24749)

Offscreen is only enabled in the www and experimental channels. Instead
of listing these on every Offscreen test, I added a test gate alias
called `enableOffscreen`. Makes it easier to grep for these, and edit or
remove the channels later.",Andrew Clark,2022-06-30T13:44:54Z
6b6cf8311c05a10667c852e833d6f7f51fa476c7,"Land forked reconciler changes (#24817)

This applies forked changes from the ""new"" reconciler to the ""old"" one.

Includes:

- d410f0a [FORKED] Bugfix: Offscreen instance is null during setState
- 58bb117 [FORKED] Check for infinite update loops even if unmounted
- 31882b5 [FORKED] Bugfix: Revealing a hidden update
- 17691ac [FORKED] Don't update childLanes until after current render",Andrew Clark,2022-06-30T03:31:42Z
4e1fcfa77175765a7d51d70a2e519569012593d8,"[DevTools] Resign Timeline Profiler Sidebar (#24816)

This PR:
* Redesigned the sidebar to resemble the flamegraph profiler sidebar and added title and timestamp to the sidebar
* Added ability to copy the component stack (for places where you're unable to link to source)

https://user-images.githubusercontent.com/2735514/176564897-5301d6d4-429a-4ea3-86cd-74427cff4ce6.mov",Luna Ruan,2022-06-30T00:54:06Z
1974d08c93ddf171779fde59215e8430f36d281a,"[DevTools] Fix Bugs With Component Stacks (#24815)

This PR:
* Simplifies the code in `SidebarEventInfo` by passing it the actual clicked event rather than an index.
* Lightly refactored the `SidebarEventInfo` code so that it can be used for more than just `schedulingEvents`
* Fixes bug. Previously, whenever a state update event was clicked, we updated the `selectedCommitIndex` in the `ProfilerContext`. However, this index is used for the selected commit in the Flamegraph profiler, which caused a bug where if you would change the contents of the event sidebar, the commit sidebar in the Flamegraph profiler would change too. This PR replaces this with the actual event info instead",Luna Ruan,2022-06-29T23:00:48Z
cd80d3274d48155d0f83347daab3eda57009f41b,"[DevTools] Add column number to viewSourceLineFunction (#24814)

Add column number for `viewSourceLineFunction` and renamed the function to `viewUrlSourceFunction` to match the other source function naming conventions",Luna Ruan,2022-06-29T17:38:27Z
f01e119b7d6b32104d37a7a9247fdd5a25bd29d2,"[DevTools] Log page URL in internal build (#24799)

* test log

* fix attribute name

* fix lint

* tabs can be empty

* improve coding style per comments",Mengdi Chen,2022-06-29T17:02:53Z
d1432ba93e971b249d7055dbb3b91e34eb0d2100,"[Transition Tracing] Fix excess calls to the transition start callback (#24806)

This PR fixes a bug where we would add a transition to the lanes map every time an update occurs. However, we didn't factor in that there might be multiple updates in a transition, which would cause the transition to be added multiple times to the transitionLanes map.

This changes the transitionLanes object from an Array of Arrays to an Array of Sets so that we only add a transition if it hasn't been added before, avoiding duplicates",Luna Ruan,2022-06-29T01:17:14Z
2e1c8841e97923e7af50c5c5311e3724b7b6555d,"[DevTools] front-end for profiling event stack (#24805)

* [DevTools] front-end for profiling event stack

Adds a side-bar to the profiling tab. Users can now select an update event, and are
shown the callstack from the originating component. When a source path is available
there is now UI to jump to source.

Add FB enabled feature flag: enableProfilerComponentTree for the side-bar.

resolves #24170",Blake Friedman,2022-06-28T21:15:24Z
88574c1b8bd4ed187f09a9c91d327784fe50dbe8,"Fix enableTransitionTracing flag (#24801)

Move `enableTransitionTracing` to `dynamicFeatureFlags` so it runs when you run `yarn test`",Luna Ruan,2022-06-28T17:09:59Z
a4bed469697a1e23c398fe80228df31ef6d4b612,"[Transition Tracing] Add Tracing Markers (#24686)

This PR adds support for Tracing Markers as well as onTracingMarkerComplete",Luna Ruan,2022-06-27T16:46:43Z
167853026cb193f81c0474d3bf9ef9e03dde203e,"fix hydration warning suppression in text comparisons (#24784)

* fix hydration warning suppression in text comparisons

* lint

* lowercase test",Josh Story,2022-06-26T19:22:10Z
652e6c5a1b2067cbe1964c6b4ec1af5ff295d7ed,"[sizebot] Add link to diff view (#24790)

Updates the sizebot output so that the file names link to a diff view of
the corresponding build artifact.

Example diff view: https://react-builds.vercel.app/commits/955cad9bcc6d755b2a672f8038fe9754e0fe5108/files/oss-stable-semver/react-dom/cjs/react-dom.production.min.js?compare=c3d7a7e3d72937443ef75b7e29335c98ad0f1424

The diff view itself is rendered by a Next.js app that I built as a side
project and is hosted at https://react-builds.vercel.app. If we find
this useful enough I could move the app to a React-owned repo but since
this isn't a critical feature it might be OK to leave it separate for
now, so we don't need to commit to supporting it indefinitely.",Andrew Clark,2022-06-25T23:13:41Z
955cad9bcc6d755b2a672f8038fe9754e0fe5108,"[DevTools] Clean Up DevTools Code (#24782)

This PR cleans up the DevTools codebase by:
* Consolidating `normalizeCodeLocInfo` into one place
* Remove unused source argument in the DevTools component stacks code",Luna Ruan,2022-06-23T22:47:47Z
9abe745aa748271be170c67cc43b09f62ca5f2dc,"[DevTools][Timeline Profiler] Component Stacks Backend (#24776)

This PR adds a component stack field to the `schedule-state-update` event. The algorithm is as follows:
* During profiling, whenever a state update happens collect the parents of the fiber that caused the state update and store it in a map
* After profiling finishes, post process the `schedule-state-update` event and using the parent fibers, generate the component stack by using`describeFiber`, a function that uses error throwing to get the location of the component by calling the component without props.

---

Co-authored-by: Blake Friedman <blake.friedman@gmail.com>",Luna Ruan,2022-06-23T18:19:23Z
cf665c4b73a28b034c8173f4d929205fb12d2d2e,"[DevTools] Refactor incompleteTransitions field from Root Fiber memoized state to FiberRoot (#24765)

`incompleteTransitions` persists across renders, so it should be part of the `fiber.stateNode` (ie FiberRoot) rather than `fiber.memoizedState`",Luna Ruan,2022-06-21T00:08:54Z
d6255f0ac4d3282272165a68f64ab3444d6790d3,[DevTool] fix build-for-devtools script (#24764),Mengdi Chen,2022-06-20T19:06:40Z
56389e81ffe17c97f3137f18cc6446a4b2c956de,"Abort Flight (#24754)

Add aborting to the Flight Server. This encodes the reason as an ""error""
row that gets thrown client side. These are still exposed in prod which
is a follow up we'll still have to do to encode them as digests instead.

The error is encoded once and then referenced by each row that needs to
be updated.",Sebastian Markbåge,2022-06-19T15:05:41Z
0f216ae31d91f882134707af99d5da9c01e1f603,"Add entry points for ""static"" server rendering passes (#24752)

This will be used to add optimizations for static server rendering.",Sebastian Markbåge,2022-06-19T02:34:31Z
f796fa13ad13ee9939cb7847bfa90ada860068b2,"Rename Segment to Task in Flight (#24753)

In Fizz this got split into Task and Segment. We don't have a concept of
Segment in Flight yet because we don't inline multiple segments into one
""Row"". We just emit one ""Row"" for each Segment if something suspends.

This makes Flight non-deterministic atm but that's something we'll want to
address.

Regardless, right now, this is more like a Task than a Segment.",Sebastian Markbåge,2022-06-18T19:02:11Z
0f0aca3ab35354040950ac0001fd4c01d70dceb4,"Aborting early should not infinitely suspend (#24751)

Before this change we weren't calling onError nor onFatalError if you abort
before completing the shell.

This means that the render never completes and hangs.

Aborting early can happen before even creating the stream for AbortSignal,
before rendering starts in Node since there's an setImmediate atm, or
during rendering.",Sebastian Markbåge,2022-06-18T15:01:58Z
12a738f1a87889bb5f7c4159641573fd04140664,"[Transition Tracing] Add Support for Multiple Transitions on Root (#24732)

We can think of transitions on the root as a bunch of tracing markers. Therefore, we can map each transition to a map of pending suspense boundaries. When a transition's pending suspense boundary map is empty, we know that it's complete. This PR:
* Combines the `pendingSuspenseBoundaries` and `transitions` into one `incompleteTransitions` object. This object is a map from a `transition` to a map of `pendingSuspenseBoundaries`
* Refactored code to make it so that every transition has its own `pendingSuspenseBoundaries` map rather than sharing just one.
* Moves the transition complete callback to the root. Alternatively, we can also keep a map of pendingSuspenseBoundaries to transitions on the Offscreen marker, but it's simpler to just call the transition complete callback on the root instead. We also only do this if there are transitions pending, so it shouldn't make too big of a difference",Luna Ruan,2022-06-17T20:43:46Z
72ebc703ac8abacd44fdeb1e3d66eb28b75e5a5b,"[DevTools] fix useDeferredValue to match reconciler change (#24742)

* [DevTools] fix useDeferredValue to match reconciler change

* fixup

* update test to catch original issue

* fix lint

* add safer tests for other composite hooks",Mengdi Chen,2022-06-17T18:43:10Z
a7c322c6f5fd33acfecf1d50dec4f911c3e9daf4,Fix typo in dangerfile.js (insiginificant -> insignificant) (#24393),Siyabend Ürün,2022-06-17T17:43:52Z
7cf9f5e03a245b4a879c5abc84e5ffb2824370e4,Extra space (#24612),Kerim Büyükakyüz,2022-06-17T17:43:17Z
229c86af07302d40b70c41de18106f80fe89836c,"Revert ""Land enableClientRenderFallbackOnTextMismatch"" (#24738)

This reverts commit 327e4a1f96fbb874001b17684fbb073046a84938.

Turns out we hadn't rolled this out internally yet — I mistook
enableClientRenderFallbackOnHydrationMismatch for
said enableClientRenderFallbackOnTextMismatch. Need to revert
until we finish rolling out the change.",Andrew Clark,2022-06-16T15:38:37Z
c3d7a7e3d72937443ef75b7e29335c98ad0f1424,"Bugfix: Offscreen instance is null during setState (#24734)

* [FORKED] Bugfix: Offscreen instance is null during setState

During a setState, we traverse up the return path and check if any
parent Offscreen components are currently hidden. To do that, we must
access the Offscreen fiber's `stateNode` field.

On a mounted Offscreen fiber, the `stateNode` is never null, so usually
we don't need to refine the type. When a fiber is unmounted, though,
we null out its `stateNode` field to prevent memory cycles. However,
we also null out its `return` field, so I had assumed that an unmounted
Offscreen fiber would never be reachable.

What I didn't consider is that it's possible to call `setState` on a
fiber that never finished mounting. Because it never mounted, it was
never deleted. Because it was never deleted, its `return` field was
never disconnected.

This pattern is always accompanied by a warning but we still need to
account for it. There may also be other patterns where an unmounted
Offscreen instance is reachable, too.

The discovery also suggests it may be better for memory
usage if we don't attach the `return` pointer until the commit phase,
though in order to do that we'd need some other way to track the return
pointer during initial render, like on the stack.

The fix is to add a null check before reading the instance
during setState.

* Add previous commit to list of forked revisions",Andrew Clark,2022-06-16T02:13:22Z
fcd720d3631a23a9e273db60bf2d35ff5f7dc406,"[Transition Tracing] Push Transition When Offscreen Becomes Visible (#24718)

This PR pushes all of a suspense boundary's transitions onto the transition stack when it goes from hidden to visible so we can pass it to any child suspense boundaries or tracing markers.",Luna Ruan,2022-06-15T18:51:51Z
522f47345f79bb117f338384e75c8a79622bd735,"Move the Error creation to be lazy (#24728)

Creating an Error captures a stack trace which can be somewhat expensive.
We shouldn't do tthat always for every render.

This also ensures that the stack trace is more useful because you can
follow through the Node.js code to see the cause.",Sebastian Markbåge,2022-06-15T00:16:42Z
256aefbea1449869620fb26f6ec695536ab453f5,Typo,dan,2022-06-14T21:34:30Z
6522179f43949d3b5d9b7d46f7a2f9574eebce81,Enable no-longer experimental (#24727),Sebastian Markbåge,2022-06-14T21:11:01Z
567500d71083f84cdd4259a76f8a1289d159747f,"Move renderToString tests out of the streamable API tests (#24724)

ReactDOMFizzServer(Browser/Node)-test file is really meant to just be a
very shallow tests of the Browser/Node specific streaming APIs.

Most of the general streaming tests are in ReactDOMFizzServer-test instead
of testing all streaming related things in each environment.

The legacy renderToString APIs are mostly covered by ReactServerRendering-test
et al for historical reasons.",Sebastian Markbåge,2022-06-14T20:48:33Z
5cc2487e0858c8d3c5415137b3c3a95d8f5a0356,bump versions for next release (#24725),Josh Story,2022-06-14T20:24:00Z
89bae8f371eb2cf49dbe310ec7f04d0e52e32f98,Update Changelog release date for 18.2.0,Josh Story,2022-06-14T19:49:54Z
54f17e490f8b8f39ef9f296c87cd0fba217ce28c,"[Transition Tracing] Fix Cache and Transitions Pop Order (#24719)

We push the Cache before the transition so we should pop the transition before the cache. This PR fixes this issue.",Luna Ruan,2022-06-14T18:48:01Z
be229c5655074642ee664f532f2e7411dd7dccc7,"Changelog for 18.2 (#24717)

* 1820-changelog

* generalize date and fix version typo

* reword, edit, and condense

* punctuation

* Nits

Co-authored-by: dan <dan.abramov@gmail.com>",Josh Story,2022-06-13T19:36:49Z
7cf8dfd94f29a42102e5e553395d9bb1b1710c42,"[Transition Tracing] Create/Process Marker Complete Callback (#24700)

This PR adds code to add a marker complete callback to the queue. It also adds code to process marker complete callback.

Marker complete callbacks, in addition to the fields that transition complete callbacks need, also have a `markerName` field",Luna Ruan,2022-06-13T17:56:21Z
327e4a1f96fbb874001b17684fbb073046a84938,"[Follow-up] Land enableClientRenderFallbackOnTextMismatch

This was meant to land in the previous commit; forgot to stage the
changes when I was rebasing.",Andrew Clark,2022-06-12T22:12:33Z
29c2c633159cb2171bb04fe84b9caa09904388e8,"Land enableClientRenderFallbackOnTextMismatch (#24714)

This was released to open source in 18.0 and is already hardcoded to
true in www.",Andrew Clark,2022-06-13T15:58:03Z
a8c9cb18b7e5d9eb3817272a1260f9f6b79815a2,"Land enableSuspenseLayoutEffectSemantics flag (#24713)

This was released to open source in 18.0 and is already hardcoded to
true in www.",Andrew Clark,2022-06-13T15:27:40Z
f7b44539ca9c2d126c7d12cfd0d9d4f13ad5851f,"[DevTools] enable ""reload & profile"" button for timeline view (#24702)",Mengdi Chen,2022-06-10T14:38:33Z
a8555c308e06eacf807ec47caafd1e0e789d2c54,"[Transition Tracing] Add Tracing Marker Stack (#24661)

When a suspense boundary suspends or commits, we need to notify the corresponding tracing markers so that they know when to log that they've completed. To do this, we add a stack of tracing markers. In the begin phase, we will push the tracing markers onto the stack, and during the complete/unwind phase we will pop the tracing markers off the stack

In a later PR, we will store the active tracing markers on the suspense boundary, and during the commit phase we will process the active tracing markers by adding/removing the boundary as appropriate.",Luna Ruan,2022-06-10T00:10:42Z
8186b19378d9085fcdec32c42e2ec8845c1f8ce0,"Check for infinite update loops even if unmounted (#24697)

* [FORKED] Check for infinite update loops even if unmounted

The infinite update loop check doesn't need to run if the component
already unmounted, because an update to an unmounted component can't
cause a re-render. But because we used to run the check in this case,
anyway, I found one test in www that happens to ""rely on"" this behavior
(accidentally). The test is a pretty messy snapshot thing that I have no
interest fixing so to unblock the sync I'm just going to switch this
back to how it was.

* Add previous commit to forked revisions",Andrew Clark,2022-06-09T02:29:10Z
9e3b772b8cabbd8cadc7522ebe3dde3279e79d9e,"Update error transform to allow excluding errors inside subexpressions like ternaries (#24693)

* Update error transform to allow excluding errors inside subexpressions like ternaries

* make leadingcomments aggregation walk the expression stack",Josh Story,2022-06-08T23:59:49Z
3e92eb0fce762aca49d2ea18b869a2fd8a75089e,"[DevTools] find best renderer when inspecting (#24665)

* [DevTools] find best renderer when inspecting

* fix lint

* fix test

* fix lint

* move logic to agent

* fix lint

* style improvements per review comments

* fix lint & flow

* re-add try catch for safety",Mengdi Chen,2022-06-08T20:01:06Z
42b330c1c9bf71ca512c56c204bca36bdd53b3c6,"Fix check_error_codes CI job (#24692)

The diff command was missing a --quiet argument, causing the job not to
fail when unminified messages were found.",Andrew Clark,2022-06-08T17:07:05Z
060505e9dce2f3d5d9d67c2a9415b94e5b0ca291,"Fix misapplying prod error opt-out (#24688)

The eslint-disable-next-line opt out for prod error minification was not properly working. In the build a replacable error was output even though it was not failing the build. This change refactors the code to avoid the erroneous behavior but a fix for the lint may be better",Josh Story,2022-06-08T16:49:31Z
47944142f57d8c1c7b79eaf6522de38e76137ca5,`now` isn't part of the react-reconciler config anymore (#24689),Mathieu Dutour,2022-06-08T16:00:10Z
b345523528f6b346c3a6de2145d5df6b2e23ca75,"[Fizz] Support abort reasons (#24680)

* [Fizz] Support abort reasons

Fizz supports aborting the render but does not currently accept a reason. The various render functions that use Fizz have some automatic and some user-controlled abort semantics that can be useful to communicate with the running program and users about why an Abort happened.

This change implements abort reasons for renderToReadableStream and renderToPipeable stream as well as legacy renderers such as renderToString and related implementations.

For AbortController implementations the reason passed to the abort method is forwarded to Fizz and sent to the onError handler. If no reason is provided the AbortController should construct an AbortError DOMException and as a fallback Fizz will generate a similar error in the absence of a reason

For pipeable  streams, an abort function is returned alongside pipe which already accepted a reason. That reason is now forwarded to Fizz and the implementation described above.

For legacy renderers there is no exposed abort functionality but it is used internally and the reasons provided give useful context to, for instance to the fact that Suspense is not supported in renderToString-like renderers",Josh Story,2022-06-08T05:36:09Z
79f54c16dc3d5298e6037df75db2beb3552896e9,"Bugfix: Revealing a hidden update (#24685)

* Add `isHidden` to OffscreenInstance

We need to be able to read whether an offscreen tree is hidden from
an imperative event. We can store this on its OffscreenInstance.

We were already scheduling a commit effect whenever the visibility
changes, in order to toggle the inner effects. So we can reuse that.

* [FORKED] Bugfix: Revealing a hidden update

This fixes a bug I discovered related to revealing a hidden Offscreen
tree. When this happens, we include in that render all the updates that
had previously been deferred — that is, all the updates that would have
already committed if the tree weren't hidden. This is necessary to avoid
tearing with the surrounding contents. (This was the ""flickering""
Suspense bug we found a few years ago: #18411.)

The way we do this is by tracking the lanes of the updates that were
deferred by a hidden tree. These are the ""base"" lanes. Then, in order
to reveal the hidden tree, we process any update that matches one of
those base lanes.

The bug I discovered is that some of these base lanes may include
updates that were not present at the time the tree was hidden. We cannot
flush those updates earlier that the surrounding contents — that, too,
could cause tearing.

The crux of the problem is that we sometimes reuse the same lane for
base updates and for non-base updates. So the lane alone isn't
sufficient to distinguish between these cases. We must track this in
some other way.

The solution I landed upon was to add an extra OffscreenLane bit to any
update that is made to a hidden tree. Then later when we reveal the
tree, we'll know not to treat them as base updates.

The extra OffscreenLane bit is removed as soon as that lane is committed
by the root (markRootFinished) — at that point, it gets
""upgraded"" to a base update.

The trickiest part of this algorithm is reliably detecting when an
update is made to a hidden tree. What makes this challenging is when the
update is received during a concurrent event, while a render is already
in progress — it's possible the work-in-progress render is about to
flip the visibility of the tree that's being updated, leading to a race
condition.

To avoid a race condition, we will wait to read the visibility of the
tree until the current render has finished. In other words, this makes
it an atomic operation. Most of this logic was already implemented
in #24663.

Because this bugfix depends on a moderately risky refactor to the update
queue (#24663), it only works in the ""new"" reconciler fork. We will roll
it out gradually to www before landing in the main fork.

* Add previous commit to list of forked revisions",Andrew Clark,2022-06-08T00:04:02Z
7e8a020a4aa8a24e5f0c0ce06b25e485d2888f57,"Remove extra Server Context argument (#24683)

This was left over from a refactor.",Sebastian Markbåge,2022-06-07T19:12:51Z
3bb154bbab78038f1b0aad42f10c006b71eac8da,"[DevTools] Run Devtools Regression Tests Once a Day (#24678)

We don't need to run DevTools regression tests once an hour, and also it makes getting the most recent react build or react devtools build really annoying, so run them once a day instead",Luna Ruan,2022-06-07T18:05:04Z
bcbeb52bf36c6f5ecdad46a48e87cf4354c5a64f,"[Fizz] Disallow complex children in <title> elements (#24679)

* [Fizz] Disallow complex children in <title> elements

<title> Elements in the DOM can only have Text content. In Fizz if more than one text node is emitted an HTML comment node is used as a text separator. Unfortunately because of the content restriction of the DOM representation of the title element this separator is displayed as escaped text which is not what the component author intended.

This commit special cases title handling, primarily to issue warnings if you pass complex children to <title>. At the moment title expects to receive a single child or an array of length 1. In both cases the type of that child must be string or number. If anything more complex is provided a warning will be logged to the console explaining why this is problematic.

There is no runtime behavior change so broken things are still broken (e.g. returning two text nodes which will cause a separator or using Suspense inside title children) but they should at least be accompanied by warnings that are useful.

One edge case that will now warn but won't technically break an application is if you use a Component that returns a single string as a child of title. This is a form of indirection that works but becasue we cannot discriminate between a Component that will follow the rules and one that violates them the warning is issued regardless.

* fixup dev warning conditional logic

* lints

* fix bugs",Josh Story,2022-06-07T07:33:36Z
4f29ba1cc52061e439cede3813e100557b23a15c,"support errorInfo in onRecoverableError (#24591)

* extend onRecoverableError API to support errorInfo

errorInfo has been used in Error Boundaries wiht componentDidCatch for a while now. To date this metadata only contained a componentStack. onRecoverableError only receives an error (type mixed) argument and thus providing additional error metadata was not possible without mutating user created mixed objects.

This change modifies rootConcurrentErrors rootRecoverableErrors, and hydrationErrors so all expect CapturedValue types. additionally a new factory function allows the creation of CapturedValues from a value plus a hash and stack.

In general, client derived CapturedValues will be created using the original function which derives a componentStack from a fiber and server originated CapturedValues will be created using with a passed in hash and optional componentStack.",Josh Story,2022-06-06T21:23:32Z
254b49e5897b4e493c88ecec5c80abeacda90526,"Add snapshot testing on e2e test failure (#24672)

We have a currently unreproducible flaky e2e test. This PR captures snapshots on e2e test failures so we can better debug flaky e2e tests that don't fail locally.",Luna Ruan,2022-06-06T17:36:58Z
1cd90d2ccc791f3ed25d93ceb7137746185f6e34,"Refactor of interleaved (""concurrent"") update queue (#24663)

* Always push updates to interleaved queue first

Interleaves updates (updates that are scheduled while another render
is already is progress) go into a special queue that isn't applied until
the end of the current render. They are transferred to the ""real"" queue
at the beginning of the next render.

Currently we check during `setState` whether an update should go
directly onto the real queue or onto the special interleaved queue. The
logic is subtle and it can lead to bugs if you mess it up, as in #24400.

Instead, this changes it to always go onto the interleaved queue. The
behavior is the same but the logic is simpler.

As a further step, we can also wait to update the `childLanes` until
the end of the current render. I'll do this in the next step.

* Move setState return path traversal to own call

A lot of the logic around scheduling an update needs access to the
fiber root. To obtain this reference, we must walk up the fiber return
path. We also do this to update `childLanes` on all the parent
nodes, so we can use the same traversal for both purposes.

The traversal currently happens inside `scheduleUpdateOnFiber`, but
sometimes we need to access it beyond that function, too.

So I've hoisted the traversal out of `scheduleUpdateOnFiber` into its
own function call that happens at the beginning of the
`setState` algorithm.

* Rename ReactInterleavedUpdates -> ReactFiberConcurrentUpdates

The scope of this module is expanding so I've renamed accordingly. No
behavioral changes.

* Enqueue and update childLanes in same function

During a setState, the childLanes are updated immediately, even if a
render is already in progress. This can lead to subtle concurrency bugs,
so the plan is to wait until the in-progress render has finished before
updating the childLanes, to prevent subtle concurrency bugs.

As a step toward that change, when scheduling an update, we should not
update the childLanes directly, but instead defer to the
ReactConcurrentUpdates module to do it at the appropriate time.

This makes markUpdateLaneFromFiberToRoot a private function that is
only called from the ReactConcurrentUpdates module.

* [FORKED] Don't update childLanes until after current render

(This is the riskiest commit in the stack. Only affects the ""new""
reconciler fork.)

Updates that occur in a concurrent event while a render is already in
progress can't be processed during that render. This is tricky to get
right. Previously we solved this by adding concurrent updates to a
special `interleaved` queue, then transferring the `interleaved` queue
to the `pending` queue after the render phase had completed.

However, we would still mutate the `childLanes` along the parent path
immediately, which can lead to its own subtle data races.

Instead, we can queue the entire operation until after the render phase
has completed. This replaces the need for an `interleaved` field on
every fiber/hook queue.

The main motivation for this change, aside from simplifying the logic a
bit, is so we can read information about the current fiber while we're
walking up its return path, like whether it's inside a hidden tree.
(I haven't done anything like that in this commit, though.)

* Add 17691ac to forked revisions",Andrew Clark,2022-06-06T16:15:59Z
4ddd8b455ce1dac02c56a18790d5068a7714c1a0,"Track revs that intentionally fork the reconciler (#24671)

* Track revs that intentionaly fork the reconciler

When we fork the the ""old"" and ""new"" reconciler implementations, it can
be difficult to keep track of which commits introduced the delta
in behavior. This makes bisecting difficult if one of the changes
introduces a bug.

I've added a new file called `forked-revisions` that contains the list
of commits that intentionally forked the reconcilers.

In CI, we'll confirm that the reconcilers are identical except for the
changes in the listed revisions. This also ensures that the revisions
can be cleanly reverted.

* [TEST] Add trivial divergence between forks

This should fail CI. We'll see if the next commit fixes it.

* [TEST] Update list of forked revisions

This should fix CI

* Revert temporary fork

This reverts the temporary fork added in the previous commits that was
used to test CI.

* Update error message when CI fails",Andrew Clark,2022-06-06T15:53:11Z
652dcf6550f3586377e910cf41b4846eff374210,"Fix CI: Persist build artifacts to workspace

The download_build job needs to persist its artifacts to the workspace
so downstream jobs can access them.

Persist the same directories as the normal build job.",Andrew Clark,2022-06-06T15:33:22Z
dfd6f96f7699adc005a1b0a011b7c8e7261345ce,"Fix CI: Remove copypasta from sizebot download job

This was copy pasted from the similar job that exists to download
base artifacts for sizebot.",Andrew Clark,2022-06-06T15:29:37Z
a621cb099dafb8bd77370ed4f4d832f049642183,"Fix CI: Download to build instead of base-build (#24677)

Fixes a mistake in #24676. The get_base_build job downloads artifacts to
`base-build` instead of `build`, so that sizebot can compare the two
directories. For most other jobs, though, we want it to produce the
same output as the normal build job.",Andrew Clark,2022-06-06T14:38:02Z
a97a0810eae4428dd55dc1fa1b94ee1f9c18715b,"DevTools e2e workflow: Download build artifacts (#24676)

When running the hourly DevTools testing workflow, we don't need to
build React from scratch each time; we can download its build artifacts,
like we do for sizebot and the release workflow.",Andrew Clark,2022-06-06T13:57:35Z
7a5b8227c7d67aefe62f015cf0e961e28075d897,"Allow aritfacts download even if CI is broken (#24666)

* Allow aritfacts download even if CI is broken

Adds an option to the download script to disable the CI check and
continue downloading the artifacts even if CI is broken.

I often rely on this to debug broken build artifacts. I was thinking
the sizebot should also use this when downloading the base artifacts
from main, since for the purposes of size tracking, it really doesn't
matter whether the base commit is broken.

* Sizebot should work even if base rev is broken

Sizebot works by downloading the build artifacts for the base revision
and comparing the fize sizes, but the download script will fail if
the base revision has a failing CI job. This happens more often than it
should because of flaky cron jobs, but even when it does, we shouldn't
let it affect the sizebot — for the purposes of tracking sizes, it
doesn't really matter whether the base revision is broken.",Andrew Clark,2022-06-03T01:55:35Z
d300cebde2a63e742ccb8b6aa7b0f61db1ae29b4,[DevTools] only polyfill requestAnimationFrame when necessary (#24651),Mengdi Chen,2022-06-01T17:04:09Z
d2c9e834ae07377edbc94128eec4480693b64292,"[DevTools] Run e2e Regression Tests Hourly on Circle CI (#24648)

Modifies Circle CI so we run e2e regression tests hourly on Circle CI",Luna Ruan,2022-06-01T14:55:26Z
b1858b110d2888034355ee6dd9c0b581feabbed3,"[DevTools] devtools-test-shell Regression App fixes (#24644)

Made a couple of fixes to the `devtools-test-shell`
* test selectors aren't available in > React v18.0 either, so we'll need to mock the test selector functions there as well
* `react-dom/client` should map to `react-dom/client` and not `react-dom`",Luna Ruan,2022-05-31T23:13:41Z
dd4950c90e65a6c53870fd61d2aea67bce7d6713,"[Flight] Implement useId hook (#24172)

* Implements useId hook for Flight server.

The approach for ids for Flight is different from Fizz/Client where there is a need for determinancy. Flight rendered elements will not be rendered on the client and as such the ids generated in a request only need to be unique. However since FLight does support refetching subtrees it is possible a client will need to patch up a part of the tree rather than replacing the entire thing so it is not safe to use a simple incrementing counter. To solve for this we allow the caller to specify a prefix. On an initial fetch it is likely this will be empty but on refetches or subtrees we expect to have a client `useId` provide the prefix since it will guaranteed be unique for that subtree and thus for the entire tree. It is also possible that we will automatically provide prefixes based on a client/Fizz useId on refetches

in addition to the core change I also modified the structure of options for renderToReadableStream where `onError`, `context`, and the new `identifierPrefix` are properties of an Options object argument to avoid the clumsiness of a growing list of optional function arguments.

* defend against useId call outside of rendering

* switch to S from F for Server Component ids

* default to empty string identifier prefix

* Add a test demonstrating that there is no warning when double rendering on the client a server component that used useId

* lints and gates",Josh Story,2022-05-31T21:53:32Z
26a5b3c7f781e93b5bcf4e5a7a6f13233409475d,"Explicitly set `highWaterMark` to 0 for `ReadableStream` (#24641)

* Explicitly set highWaterMark to 0 for ReadableStreams

This is because not all streaming implementations respect the
default behavior of settings highWaterMark to 0 for byte streams.
Being explicit guarantees the intended behavior across runtimes.

* Remove size methods and add FlowFixMe instead",Josh Larson,2022-05-31T20:20:36Z
25837acfee5f5305d49fe19649e010dbf4f887a2,React DevTools 4.24.6 -> 4.24.7 (#24646),Luna Ruan,2022-05-31T20:16:07Z
be1fd48e96a617f3758d179ebfb0386a382af942,"[DevTools] mock requestAnimationFrame with setTimeout as a temporary fix for #24626 (#24633)

* mock requestAnimationFrame as a temp workaround for #24626

* give name to constant variable",Mengdi Chen,2022-05-31T19:32:21Z
0b545551e6dea328797e64eed6a9677bf4051eae,"[DevTools] Modify DevTools e2e test script for regression tests (#24642)

Modified the `run_devtools_e2e_tests` script so that you can pass in a React version. If you pass in a version, it will build the DevTools shell and run the e2e tests with that version.",Luna Ruan,2022-05-31T18:39:30Z
f534cc6ea4e7cffbfd53b00e14cd0b1849b291f1,"[DevTools] Add --replaceBuild option to Older React Builds Download Script (#24621)

This PR adds a `--replaceBuild` option to the script that downloads older React version builds. If this flag is true, we will replace the contents of the `build` folder with the contents of the `build-regression` folder and remove the `build-regression` folder after, which was the original behavior.

However, for e2e tests, we need both the original build (for DevTools) and the new build (for the React Apps), so we need both the `build` and the `build-regression` folders. Not adding the `--replaceBuild` option will do this.

This PR also modifies the circle CI config to reflect this change.",Luna Ruan,2022-05-31T16:23:44Z
aec575914a0fd76c9db8998ea62c3ee975de70d7,"[Fizz] Send errors down to client (#24551)

* use return from onError

* export getSuspenseInstanceFallbackError

* stringToChunk

* return string from onError in downstream type signatures

* 1 more type

* support encoding errors in html stream and escape user input

This commit adds another way to get errors to the suspense instance by encoding them as dataset properties of a template element at the head of the boundary. Previously if there was an error before the boundary flushed there was no way to stream the error to the client because there would never be a client render instruction.

Additionally the error is sent in 3 parts

1) error hash - this is always sent (dev or prod) if one is provided
2) error message - Dev only
3) error component stack - Dev only, this now captures the stack at the point of error

Another item addressed in this commit is the escaping of potentially unsafe data. all error components are escaped as test for browers when written into the html and as javascript strings when written into a client render instruction.

* nits

Co-authored-by: Marco Salazar <salazarm@fb.com>",Josh Story,2022-05-30T06:07:10Z
a2766387efe68b318b23d8c35c70b850d1e6a250,"[Fizz] Improve text separator byte efficiency (#24630)

* [Fizz] Improve text separator byte efficiency

Previously text separators were inserted following any Text node in Fizz. This increases bytes sent when streaming and in some cases such as title elements these separators are not interpreted as comment nodes and leak into the visual aspects of a page as escaped text.

The reason simple tracking on the last pushed type doesn't work is that Segments can be filled in asynchronously later and so you cannot know in a single pass whether the preceding content was a text node or not. This commit adds a concept of TextEmbedding which provides a best effort signal to Segments on whether they are embedded within text. This allows the later resolution of that Segment to add text separators when possibly necessary but avoid them when they are surely not.

The current implementation can only ""peek"" head if the segment is a the Root Segment or a Suspense Boundary Segment. In these cases we know there is no trailing text embedding and we can eliminate the separator at the end of the segment if the last emitted element was Text. In normal Segments we cannot peek and thus have to assume there might be a trailing text embedding and we issue a separator defensively. This should be rare in practice as it is assumed most components that will cause segment creation will also emit some markup at the edges.

* [Fizz] Improve separator efficiency when flushing delayed segments

The method by which we get segment markup into the DOM differs depending on when the Segment resolves.

If a Segment resolves before flushing begins for it's parent it will be emitted inline with the parent markup. In these cases separators may be necessary because they are how we clue the browser into breakup up text into distinct nodes that will later match up with what will be hydrated on the client.

If a Segment resolves after flushing has happened a script will be used to patch up the DOM in the client. when this happens if there are any text nodes on the boundary of the patch they won't be ""merged"" and thus will continue to have distinct representation as Nodes in the DOM. Thus we can avoid doing any separators at the boundaries in these cases.

After applying these changes the only time you will get text separators as follows

* in between serial text nodes that emit at the same time - these are necessary and cannot be eliminated unless we stop relying on the browser to automatically parse the correct text nodes when processing this HTML
* after a final text node in a non-boundary segment that resolves before it's parent has flushed - these are sometimes extraneous, like when the next emitted thing is a non-Text node.

In all other cases text separators should be omitted which means the general byte efficiency of this approach should be pretty good",Josh Story,2022-05-28T15:30:38Z
f7860538a6e48e61be34f4ba1dfb3f2713820742,Fix typo in useSyncExternalStore main entry point error (#24631),François Chalifour,2022-05-27T21:16:51Z
1bed20731fa2789c46d7bff89cd44c3ea9d51abf,"Add a module map option to the Webpack Flight Client (#24629)

On the server we have a similar translation map from the file path that the
loader uses to the refer to the original module and to the bundled module ID.

The Flight server is optimized to emit the smallest format for the client.
However during SSR, the same client component might go by a different
module ID since it's a different bundle than the client bundle.

This provides an option to add a translation map from client ID to SSR ID
when reading the Flight stream.

Ideally we should have a special SSR Flight Client that takes this option
but for now we only have one Client for both.",Sebastian Markbåge,2022-05-27T20:16:24Z
3133dfa6ee8d1a8355c0249007176955d4b7d6b0,"DevTools] e2e Regression Testing App (#24619)

This PR adds an e2e regression app to the react-devtools-shell package. This app:

* Has an app.js and an appLegacy.js entrypoint because apps prior to React 18 need to use ReactDOM.render. These files will create and render multiple test apps (though they currently only render the List)
* Moved the ListApp out of the e2e folder and into an e2e-apps folder so that both e2e and e2e-regression can use the same test apps
* Creates a ListAppLegacy app because prior to React 16.8 hooks didn't exist.
* Added a devtools file for the e2e-regression
* Modifies the webpack config so that the e2e-regression React app can use different a different React version than DevTools",Luna Ruan,2022-05-26T15:36:00Z
1328ff70cd69f02e48ec5505a1f93501b2bcaef4,"[DevTools] Regression-proof e2e Tests (#24620)

This PR:

* Increases test retry count to 2 so that flaky tests have more of a chance to pass
* Ideally most e2e tests will run for all React versions (and ensure DevTools elegantly fails if React doesn't support its features). However, some features aren't supported in older React versions at all (ex. Profiling) Add runOnlyForReactRange function in these cases to skip tests that don't satisfy the correct React semver range
* Fix should allow searching for component by name test, which was flaky because sometimes the Searchbox would be unfocused the second time we try to type in it
* Edited test Should allow elements to be inspected to check that element inspect gracefully fails in older React versions
* Updated config to add a config.use.url field and a config.use.react_version field, which change depending on the React Version (and whether it's specified)",Luna Ruan,2022-05-26T00:53:44Z
05c34dea91eced40d08cd72432087c1e26a4f59c,"[Test] Outer boundary should not report errors from an inner boundary (#24618)

* Test to assert that hydration errors of an inner suspended boundary are not retained by an unsuspended outer boundary

* lints",Josh Story,2022-05-25T21:10:50Z
b2763d3eaa4a56ce9c973945783aba7cac63478f,"Move hydration code out of normal Suspense path (#24532)

* Move hydration code out of normal Suspense path

Shuffling some code around to make it easier to follow. The logic for
updating a dehydrated Suspense boundary is significantly different
from the logic for a client-rendered Suspense boundary. Most of it was
already lifted out into a separate function; this moves the remaining
hydration-specific logic out of updateSuspenseComponent and into
updateDehydratedSuspenseComponent instead.

No expected changes to program behavior.

* Extract hydration logic in complete phase, too

Same as previous step but for the complete phase. This is a separate
commit to make bisecting easier in case something breaks. The logic
is very subtle but mostly all I've done is extract it to
another function.",Andrew Clark,2022-05-25T19:42:02Z
2c68776abe2100bbf749ac4451b90e66f8290f2f,fix scripts folder text (#24609),Alexandru Tasica,2022-05-25T13:56:35Z
a2505792ed17fd4d7ddc69561053c3ac90899491,"[DevTools] Add CircleCI Chron Job For DevTools Regression Tests  (#24601)

This PR adds an hourly chron job on Circle CI that runs regression tests on the most recent DevTools build for React v16.0, v16.5, v16.8 v17.0 and v18.0.",Luna Ruan,2022-05-24T13:46:22Z
1e98682dd383ca07f2819dc8987bd46cdb5fa028,"[DevTools] Fix moduleNameMapper Order in DevTools Config  #24602)

We need the regression config moduleNameMapper to come before the current moduleNameMapper so when it tries to map ""/^react-dom\/([^/]+)$/ it doesn't get confused. The reason is because order in which the mappings are defined matters. Patterns are checked one by one until one fits, and the most specific rule should be listed first.",Luna Ruan,2022-05-23T21:18:17Z
210fee474d7152b08171c2953678b607f8baad3e,"[DevTools] Make Devtools Regression Build (#24599)

This PR adds a script that downloads the specified react version from NPM (ie. react-dom, react, and react-test-renderer) and replaces the corresponding files in the build folder with the downloaded react files.

The scheduler package, unlike react-dom, react, and react-test-renderer, is versioned differently, so we also need to specifically account for that in the script.",Luna Ruan,2022-05-23T18:33:04Z
5a1e558df21bd3cafbaea01cc418fa69d14a8cab,"[DevTools] Regression Test Jest Config (#24598)

Some older React versions have different module import names and are missing certain features. This PR mocks modules that don't exist and maps modules in older versions to the ones that are required in tests. Specifically:

* In React v16.5, scheduler is named schedule
* In pre concurrent React, there is no act
* Prior to React v18.0, react-dom/client doesn't exist
* In DevTools, we expect to use scheduler/tracing-profiling instead of scheduler/tracing",Luna Ruan,2022-05-23T17:50:53Z
82c64e1a49239158c0daa7f0d603d2ad2ee667a9,"Match Preact behavior for boolean props on custom elements (#24541)

* Log unexpected warnings when testing with ReactDOMServerIntegrationTestUtils

* Add test

Following https://github.com/facebook/react/issues/9230#issuecomment-322007671 except that `foo={true}` renders an empty string.
See https://github.com/facebook/react/issues/9230#issuecomment-1123464720 for rationale.

* Match Preact behavior for boolean props on custom elements

* Poke CircleCI",Sebastian Silbermann,2022-05-20T17:10:43Z
6e2f38f3a4d58f11bbe86ca6f938c27767366967,"[DevTools] Remove string.replaceAll Call in @reactVersion Pragma Functions (#24584)

`string.replaceAll` doesn't exist in our CircleCI Docker environment. We also don't need it in this case because `semver.satisfies` allows for whitespace when specifying a range. This PR removes the unnecessary call.",Luna Ruan,2022-05-19T16:59:36Z
d89657bc8f60e9d00e3f73d5bda262fdcb651cdc,"[DevTools] Use Inline Snapshots for storeStressTestSync (#24583)

Change storeStressTestSync to use inline snapshots instead of a snapshot file. We want to do this because some tests are gated and not called in regression tests, and if snapshot tests are not called when there is a corresponding .snap file, that test will fail.

Arguably inline snapshots are a better pattern anyway, so enforcing this in DevTools tests IMO makes sense",Luna Ruan,2022-05-19T14:52:30Z
835d9c9f4724b71b429a6b7aaced6da1448e7fb8,"Handle github rate limiting response (#24573)

Make the error messages clearer when the API doesn't respond with 200.",Blake Friedman,2022-05-18T19:14:27Z
769875806ca7b90b6ce9178531628e97ef43cd84,"Add option for source maps when running tests (#24577)

I added a `--sourceMaps` option to our test command that enables inline
source maps. I've kept it disabled by default, since it makes the tests
run slower. But it's super useful when attaching to a debugger.",Andrew Clark,2022-05-18T17:48:21Z
b77c12576d332d5cee07305a6afee68203d43e9c,"[DevTools] Add React Version Pragma to Tests (#24576)

This PR adds the reactVersion pragma to tests.

Tests without the reactVersion pragma won't be run if the reactVersion pragma isn't specified.

Tested each React version manually with the pragma to make sure the tests pass",Luna Ruan,2022-05-18T16:37:17Z
a412d787e997da9e47e47886cf7a8fed2ccb6bee,"Remove dependency on build artifacts mirror (#24575)

This reverts #24106.

There was a regression in CircleCI's artifacts API recently where you
could no longer access artifacts without an authorization token. This
broke our size reporting CI job because we can't use an authorization
token on external PRs without potentially leaking it. As a temporary
workaround, I changed the size reporting job to use a public mirror of
our build artifacts.

The CircleCI API has since been fixed to no longer require
authorization, so we can revert the workaround.",Andrew Clark,2022-05-18T15:13:19Z
357a61324f8d746a7f745dfc57009ba952c7d640,"[DevTools][Transition Tracing] Added support for Suspense Boundaries (#23365)

This PR:

* During the passive effect complete phase for Offscreen, we add all the transitions that were added to the update queue in the render phase to the transitions set on the memoziedState. We also add the stateNode for the Offscreen component to the root pendingSuspenseBoundaries map if the suspense boundary has gone from shown to fallback. We remove the stateNode if the boundary goes from fallback to shown.
* During the passive effect complete phase for the HostRoot, for each transition that was initiated during this commit, we add a pending transitionStart callback. We also add them to the transition set on the memoizedState for the HostRoot. If the root pendingSuspenseBoundaries is empty, we add a pending transitionComplete callback.",Luna Ruan,2022-05-16T17:23:46Z
c5e039d9b0857b10fbcea861469ad0948c84b045,"[DevTools] Add jest-cli --reactVersion argument (#24556)

Add `--reactVersion` argument. This argument is only used in DevTools. When this is specified, run only the tests that have the `// @reactVersion` pragma that satisfies the semver version range. Otherwise, run tests as normal",Luna Ruan,2022-05-16T15:30:43Z
4c03bb6ed01a448185d9a1554229208a9480560d,"[DevTools] ignore tests without reactVersion pragma if REACT_VERSION specified (#24555)

In DevTools tests, if the REACT_VERSION specified, we know this is a regression test (testing older React Versions). Because a lot of tests test the DevTools front end and we don't want to run them in the regression test scenario, we decided to only run tests that have the // @reactVersion pragma defined.

Because if there are no tests specified, jest will fail, we also opt to use jest.skip to skip all the tests that we don't want to run for a specific React version istead.

This PR makes this change.",Luna Ruan,2022-05-14T04:54:50Z
0ecb77d4c54664e20abd89df0d19ef4e4594f4c8,"[DevTools] Fix formatWithStyles not styling the results if the first argument is an object + Added unit tests (#24554)

formatWithStyles currently doesn't style the array argument if the first argument is an object. This PR fixes this and also adds unit tests.",Luna Ruan,2022-05-13T22:34:33Z
2c8a1452b82b9ec5ebfa3f370b31fda19610ae92,Fix ignored setState in Safari when iframe is touched (#24459),dan,2022-05-12T16:58:18Z
62662633d1293f47ab0f5ee444a2a2fd52df322a,Remove enableFlipOffscreenUnhideOrder (#24545),Ricky,2022-05-12T16:40:17Z
52c434be1dffd0d599a7977ce9cf8bb3326c7806,React DevTools 4.24.5 -> 4.24.6 (#24547),"Mengdi ""Monday"" Chen",2022-05-12T14:52:55Z
852f10b5cf188f8aa797f9a809f0caeaa95a4231,fix a bug in console.log with non-string args (#24546),"Mengdi ""Monday"" Chen",2022-05-12T14:29:36Z
34da5aa69b0694348fee9c3cd1351ecc70cd5bb1,"Only treat updates to lazy as a new mount in legacy mode (#24530)

* Only treat updates to lazy as a new mount in legacy mode

* Update name and swap current check

* Flip order back",Ricky,2022-05-12T12:51:32Z
7d9e17a9826595dacbf9e19e8f85b07837adf276,"[DevTools] Add Pragma to Only Run Tests if Version Requirement Satisfied (#24533)

This PR:

Adds a transform-react-version-pragma that transforms // @reactVersion SEMVER_VERSION into _test_react_version(...) and _test_react_version_focus(...) that lets us only run a test if it satisfies the right react version.
Adds _test_react_version and _test_react_version_focus to the devtools setupEnv file
Add a devtools preprocessor file for devtools specific plugins",Luna Ruan,2022-05-11T16:01:05Z
8197c73ec334e4430d892cead14aa371f13467a9,"Support document rendering (#24523)

* Support Document as a container for hydration and rendering

Previously Document was not handled effectively as a container. in particual when hydrating if there was a fallback to client rendering React would attempt to append a new <html> element into the document before clearing out the existing one which errored leaving the application in brokent state.

The initial approach I took was to recycle the documentElement and never remove or append it, always just moving it to the right fiber and appending the right children (heady/body) as needed. However in testing a simple approach in modern browsers it seems like treating the documentElement like any other element works fine. This change modifies the clearContainer method to remove the documentElement if the container is a DOCUMENT_NODE. Once the container is cleared React can append a new documentElement via normal means.

* Allow Document as container for createRoot

previously rendering into Document was broken and only hydration worked because React did not properly deal with the documentElement and would error in a broken state if used that way. With the previous commit addressing this limitation this change re-adds Document as a valid container for createRoot.

It should be noted that if you use document with createRoot it will drop anything a 3rd party scripts adds the page before rendering for the first time.",Josh Story,2022-05-10T17:17:36Z
d20c3af9d11ea4a35bfc76cb44c15af9d42059c4,"[DevTools][Bug] Fix Race Condition When Unmounting Fibers (#24510)

When we delete fibers, we will call onCommitFiberUnmount on every deleted fiber to also remove them from the element tree. However, there are some cases where fibers aren't deleted but we still want to remove them from the element tree (ex. offscreen). In the second case, we recursively remove these children during handleCommitFiberRoot.

When we remove an element, we will untrack its corresponding fiber ID. However, because of fast refresh, we don't do this immediately, opting to instead add the value to a set to process later. However, before the set has been processed, we unmount that fiber again, we will get duplicate unmounts.

To fix this, handleCommitFiberRoot explicitly flushes all the fibers in the set before starting the deletion process. We also need to do this in handleCommitFiberUnmount in case handleCommitFiberRoot gets called first.",Luna Ruan,2022-05-06T19:36:03Z
46a6d77e32d00c8c71ab989ca88b1c51aad07cdd,Unify JSResourceReference Interfaces (#24507),Timothy Yung,2022-05-06T18:24:04Z
e531a4a62d0b88301ac06d4efd3f5a30faa03c94,"[React DevTools] Improve DevTools UI when Inspecting a user Component that Throws an Error  (#24248)

* [ReactDevTools] custom view for errors occur in user's code

* [ReactDevTools] show message for unsupported feature

* fix bad import

* fix typo

* fix issues from rebasing

* prettier

* sync error names

* sync error name with upstream

* fix lint & better comment

* fix error message for test

* better error message per review

* add missing file

* remove dead enum & provide component name in error message

* better error message

* better user facing error message","Mengdi ""Monday"" Chen",2022-05-06T00:17:23Z
547b707493735327373a9f8792343f73a5b080da,React DevTools 4.24.4 -> 4.24.5 (#24503),Brian Vaughn,2022-05-05T17:19:08Z
d4acbe85d55b6048d65b6ff258b7996516d4aa58,Fixed possible undefined error in TreeContext reducer (#24501),Brian Vaughn,2022-05-05T15:46:57Z
024a7274fb07f154676ec6443b83a4e31f259c22,"Constrain the container type of createPortal (#24496)

We already constrained the type of createRoot (can't take document) and hydrateRoot (can't take fragments).",Sebastian Markbåge,2022-05-05T03:05:37Z
3dc9a8af05f98d185ca55d56f163dbb46e7ad3f4,"fix forward ref (#24494)

Resolves #24428

---

For fiber types that render user code, we check the PerformedWork flag rather than the props, ref, and state to see if the fiber rendered (rather than bailing out/etc.) so we know whether we need to do things like record profile durations. ForwardRef wasn't added to this list, which caused #24428.",Luna Ruan,2022-05-04T20:25:27Z
c7e494b55320768863b821be96896b28f0a280ef,"[React DevTools] Fix regex for formateWithStyles function (#24486)

The previous regex to detect string substitutions is not quite right, this PR fixes it by:

Check to make sure we are starting either at the beginning of the line or we match a character that's not % to make sure we capture all the % in a row.
Make sure there are an odd number of % (the first X pairs are escaped % characters. The odd % followed by a letter is the string substitution)",Luna Ruan,2022-05-03T22:52:56Z
6cbf0f7fac772c3fd18706d73af00f3fd06a55b5,"Fork ReactSymbols (#24484)

* Fork ReactSymbols

* Fix tests

* Update jest config",Ricky,2022-05-03T21:12:23Z
a10a9a6b5b891dd3ce238bf39a6147bb0f3a1d2a,Add test for hiding children after layout destroy (#24483),Ricky,2022-05-03T18:24:23Z
b4eb0ad71fb365cb760a5b9ab1a1e2dd6193fac7,"Do not replay erroring beginWork with invokeGuardedCallback when suspended or previously errored (#24480)

When hydrating a suspense boundary an error or a suspending fiber can often lead to a cascade of hydration errors. While in many cases these errors are simply discarded (e.g. when teh root does not commit and we fall back to client rendering) the use of invokeGuardedCallback can lead to many of these errors appearing as uncaught in the browser console. This change avoids error replaying using invokeGuardedCallback when we are hydrating a suspense boundary and have either already suspended or we have one previous error which was replayed.",Josh Story,2022-05-03T18:07:47Z
99eef9e2df7b6aade461a1a958eb3838239e72c4,Hide children of Offscreen after destroy effects (#24446),Ricky,2022-05-03T14:16:53Z
6c36aee9443d4b30d13137dbb1660f73522aa3c9,Fixed wrong method call for LRU cache (#24477),Brian Vaughn,2022-05-03T01:17:01Z
ce13860281f833de8a3296b7a3dad9caced102e9,"Remove enablePersistentOffscreenHostContainer flag (#24460)

This was a Fabric-related experiment that we ended up not shipping.",Andrew Clark,2022-04-28T19:05:41Z
340060cccd21b47f364646c894a3406b0f0341ba,Add @Andarist to changelog credits,dan,2022-04-28T15:03:34Z
9f80a48ad464c9240ea7f9d3f37251559cf7fe7e,Add missing item to the changelog,dan,2022-04-27T01:03:08Z
53b95e5511c7cb5364de374a99da728cf256dc4b,Fill in date in changelog for 18.1 (#24449),Andrew Clark,2022-04-26T21:09:08Z
d78460490be08435ee50025ea792ec4d5a5a999e,Add date to changelog,dan,2022-04-26T21:07:33Z
9c25728d10dac574761359f359e34ca1010a8b11,"Changelog for 18.1 (#24411)

* 1810-changelog

* Update CHANGELOG.md

Co-authored-by: Strek <ssharishkumar@gmail.com>

* Update CHANGELOG.md

Co-authored-by: Strek <ssharishkumar@gmail.com>",dan,2022-04-26T21:05:29Z
2633a6efc45ed6b4f9b73fa795fcc494dbc22ca9,"Bump `@next` versions (#24448)

18.2 will be the next release",Andrew Clark,2022-04-26T20:58:53Z
72b7462fe73ea2f7bc296bc58670baf9677ce8b2,Bump local package.json versions for 18.1 release (#24447),Andrew Clark,2022-04-26T20:58:44Z
22edb9f777d27369fd2c1fad378f74e237b6dfd3,"React `version` field should match package.json (#24445)

The `version` field exported by the React package currently corresponds
to the `@next` release for that build. This updates the build script
to output the same version that is used in the package.json file.

It works by doing a find-and-replace of the React version after the
build has completed. This is a bit weird but it saves us from having
to build the `@next` and `@latest` releases separately; they are
identical except for the version numbers.",Andrew Clark,2022-04-26T20:28:48Z
6bf3deef59a1c910d4cda57409411cb0a6bcd43e,"Upgrade react-shallow-renderer to support react 18 (#24442)

To a minimum version that support react 18",Michael サイトー 中村 Bashurov,2022-04-26T18:45:04Z
bd4784c8f8c6b17cf45c712db8ed8ed19a622b26,"Revert #24236 (Don't recreate the same fallback on the client if hydrating suspends) (#24434)

* Revert #24236 (Don't recreate the same fallback on the client if hydrating suspends)

* Use @gate FIXME",dan,2022-04-25T15:16:32Z
6d3b6d0f408136479d7298f1a14d79e8a12f0c65,"forwardRef et al shouldn't affect if props reused (#24421)

We don't have strong guarantees that the props object is referentially
equal during updates where we can't bail out anyway — like if the props
are shallowly equal, but there's a local state or context update in the
same batch.

However, as a principle, we should aim to make the behavior consistent
across different ways of memoizing a component. For example, React.memo
has a different internal Fiber layout if you pass a normal function
component (SimpleMemoComponent) versus if you pass a different type like
forwardRef (MemoComponent). But this is an implementation detail.
Wrapping a component in forwardRef (or React.lazy, etc) shouldn't affect
whether the props object is reused during a bailout.

Co-authored-by: Mateusz Burzyński <mateuszburzynski@gmail.com>",Andrew Clark,2022-04-22T18:23:26Z
bd081376665f5f081dcf4bf72f06b7e563c8046d,"Fix: useDeferredValue should reuse previous value (#24413)

During an urgent update, useDeferredValue should reuse the previous
value. The regression test I added shows that it was reverting to
the initial value instead.

The cause of the bug was trivial: the update path doesn't update the
hook's `memoizedState` field. Only the mount path.

None of the existing tests happened to catch this because to trigger the
bug, you have to do an urgent update that isn't the first update after
initial render. In all of the existing tests that included an urgent
update, it was the first update, so the ""previous"" value and the initial
value happened to be the same thing.",Andrew Clark,2022-04-21T03:30:46Z
9ae80d6a2bf8f48f20e3d62b9672f21c1ff77bd8,"Suppress hydration warnings when a preceding sibling suspends (#24404)

* Add failing test case for #24384

If a components suspends during hydration we expect there to be mismatches with server rendered HTML but we were not always supressing warning messages related to these expected mismatches

* Mark hydration as suspending on every thrownException

previously hydration would only be marked as supsending when a genuine error was thrown. This created an opportunity for a hydration mismatch that would warn after which later hydration mismatches would not lead to warnings. By moving the marker check earlier in the thrownException function we get the hydration context to enter the didSuspend state on both error and thrown promise cases which eliminates this gap.

* Fix failing test related to client render fallbacks

This test was actually subject to the project identified in the issue fixed in this branch. After fixing the underlying issue the assertion logic needed to change to pick the right warning which now emits after hydration successfully completes on promise resolution. I changed the container type to 'section' to make the error message slightly easier to read/understand (for me)

* Only mark didSuspend on suspense path

For unknown reasons the didSuspend was being set only on the error path and nto the suspense path. The original change hoisted this to happen on both paths. This change moves the didSuspend call to the suspense path only. This appears to be a noop because if the error path marked didSuspend it would suppress later warnings but if it does not the warning functions themsevles do that suppression (after the first one which necessarily already happened)

* gate test on hydration fallback flags

* refactor didSuspend to didSuspendOrError

the orignial behavior applied the hydration warning bailout to error paths only. originally I moved it to Suspense paths only but this commit restores it to both paths and renames the marker function as didThrow rather than didSuspend

The logic here is that for either case if we get a mismatch in hydration we want to warm up components but effectively consider the hydration for this boundary halted

* factor tests to assert different behavior between prod and dev

* add DEV suffix to didSuspendOrError to better indicate this feature should only affect dev behavior

* move tests back to ReactDOMFizzServer-test

* fix comment casing

* drop extra flag gates in tests

* add test for user error case

* remove unnecessary gate

* Make test better

it now has an intentional client mismatch that would error if there wasn't suppression brought about by the earlier error. when it client renders it has the updated value not found in the server response but we do not see a hydration warning because it was superseded by the thrown error in that render",Josh Story,2022-04-20T21:52:54Z
0dc4e6663dc875e0f734b1a96b26ebc33902323a,"Land enableClientRenderFallbackOnHydrationMismatch (#24410)

This flag is already enabled on all relevant surfaces. We can remove it.",Andrew Clark,2022-04-20T18:09:11Z
354772952a8228255cc7e8e32906e427e5255c30,"Land enableSelectiveHydration flag (#24406)

This flag is already enabled on all relevant surfaces. We can remove it.",Andrew Clark,2022-04-20T14:26:25Z
392808a1f7fa2909492a742116ba8b549e862d70,"Land enableClientRenderFallbackOnTextMismatch flag (#24405)

This flag is already enabled on all relevant surfaces. We can remove it.",Andrew Clark,2022-04-20T14:21:36Z
1e748b4528cec1e5e8c8413f8b2e9bcde999d981,"Land enableLazyElements flag (#24407)

This flag is already enabled on all relevant surfaces. We can remove it.",Andrew Clark,2022-04-20T14:17:52Z
4175f05934d3954827c00b7633c1ce8e4e87d227,Temporarily feature flag numeric fallback for symbols (#24401),Ricky,2022-04-19T21:34:49Z
a6d53f3468636bcee30c26d4e0df7a4582526d63,"Revert ""Clean up Selective Hydration / Event Replay flag (#24156)"" (#24402)

This reverts commit b5cca182ffd5500b83f20f215d0e16d6dbae0efb.",Ricky,2022-04-19T21:34:30Z
ab9cdd34fb6c88d56c83882dbd011b4546878483,"Bugfix: In legacy mode, call suspended tree's unmount effects when it is deleted (#24400)

* Bug: Missing unmount when suspended tree deleted

When a suspended tree switches to a fallback, we unmount the effects.
If the suspended tree is then deleted, there's a guard to prevent us
from unmounting the effects again.

However, in legacy mode, we don't unmount effects when a tree suspends.
So if the suspended tree is then deleted, we do need to unmount
the effects.

We're missing a check for legacy/concurrent mode.

* Fix: Unmount suspended tree when it is deleted",Andrew Clark,2022-04-19T21:09:07Z
2bf5eba7247a58aeb7ba23b3b5630d8bf6c2c4da,explain the rationale for the chosen escaping implemenation in a comment (#24389),Josh Story,2022-04-16T21:29:12Z
d40dc73cf903e8a12fd29e900df2406e7f611c5c,"Escape bootstrapScriptContent for javascript embedding into HTML (#24385)

The previous escape was for Text into HTML and breaks script contents. The new escaping ensures that the script contents cannot prematurely close the host script tag by escaping script open and close string sequences using a unicode escape substitution.",Josh Story,2022-04-16T17:47:46Z
726ba80298dad46b331aca1bcb71ca9b2004ed91,"Synchronize implementations of second render logging (#24381)

Minor followup to #24373. The fix for #24373 (comment) didn't get synchronized to the hook implementation.",Billy Janitsch,2022-04-15T15:35:35Z
d63cd972454125d4572bb8ffbfeccbdf0c5eb27b,"don't stringify objects for console log second render (#24373)

Fixes #24302 based on #24306.
---

The current implementation for strict mode double logging stringiness and dims the second log. However, because we stringify everything, including objects, this causes objects to be logged as `[object Object]` etc.

This PR creates a new function that formats console log arguments with a specified style. It does this by:
1. The first param is a string that contains %c: Bail out and return the args without modifying the styles. We don't want to affect styles that the developer deliberately set.
2. The first param is a string that doesn't contain %c but contains string formatting: `[`%c${args[0]}`, style, ...args.slice(1)]` Note: we assume that the string formatting that the developer uses is correct.
3. The first param is a string that doesn't contain string formatting OR is not a string: Create a formatting string where:
   -  boolean, string, symbol -> %s
   -  number -> %f OR %i depending on if it's an int or float
   -  default -> %o
---
Co-authored-by: Billy Janitsch <billy@kensho.com>",Luna Ruan,2022-04-14T16:30:04Z
ddb1ab1e97588136a3db736696bbc3c8cf9f0210,"Rename react-dom/testing to react-dom/unstable_testing in yarn build-for-devtools (#24364)

The shell package wasn't compiling because yarn build-for-devtools was incorrect. The react-dom/test package was renamed to react-dom/unstable_testing. This PR fixes this in the package.json.

Note: Adding packages to the yarn build-for-devtools command isn't great in the long run. Eventually we should make devtools have its own build script.",Luna Ruan,2022-04-13T18:07:26Z
168da8d55782f3b34e2a6aa0c4dd0587696afdbd,"Fix typo that happened during rebasing

I changed the type of this functions returned value but forgot to change
the check.

It happens to work before anyway, because eventually the interleaved
updates will get transferred at the beginning of the next render phase.
But this is more logically consistent.",Andrew Clark,2022-04-12T19:41:34Z
8bc527a4cf3e7e8b15ad0312cd49b438181103f2,"Bugfix: Fix race condition between interleaved and non-interleaved updates (#24353)

* Regression test: Interleaved update race condition

Demonstrates the bug reported in #24350.

* Bugfix: Last update wins, even if interleaved

""Interleaved"" updates are updates that are scheduled while a render is
already in progress. We put these on a special queue so that they don't
get processed during the current render. Then we transfer them to
the ""real"" queue after the render has finished.

There was a race condition where an update is received after the render
has finished but before the interleaved update queue had been
transferred, causing the updates to be queued in the wrong order.

The fix I chose is to check if the interleaved updates queue is empty
before adding any update to the real queue. If it's not empty, then
the new update must also be treated as interleaved.",Andrew Clark,2022-04-12T19:39:11Z
f7cf077cca6524877cb837adb9a8ff54242672b1,"[Transition Tracing] Add Offscreen Queue (#24341)

Adds an Offscreen Queue. We use the offscreen queue to store not yet processed transitions. During the commit phase, we will add these transitions to the transitions field in memoizedState (in the subsequent PR) and clear the transitions field in the updateQueue",Luna Ruan,2022-04-12T15:42:08Z
4fc394bbecdf55e46d192536e1a545376f90d84b,"Fix suspense fallback throttling (#24253)

* fix suspense throttling

* fix lint

* Tweak tests + another test

Co-authored-by: Dan Abramov <dan.abramov@gmail.com>",sunderls,2022-04-12T14:42:05Z
80170a0681def183f8f3153425f1086d3d383922,"Match bundle.name and match upper case entry points (#24346)

Fix matching in the build script.

It's possible to provide a custom bundle name in the case we build deep
imports. We should match those names as a convenience.

The script also calls toLowerCase on requested names but some entries have
upper case now.",Sebastian Markbåge,2022-04-12T01:01:48Z
fea6f8da6ab669469f2fa3f18bd3a831f00ab284,"[Transition Tracing] Add transition to OffscreenState and pendingSuspenseBoundaries to RootState (#24340)

In this PR we:

Add transitions boilerplate to the OffscreenState. The transitions field will be null on initiation. During the commit phase, if there are any new transitions, we will add any new transitions (either as a result of a transition occurring or a parent suspense boundary completing) to the transitions field. Once the suspense boundary resolves, we no longer need to store the transitions on the boundary, so we can put this field on the Offscreen memoized state
Add pendingSuspenseBoundaries boilerplate to the RootState. This field starts as null. During the commit phase, if a suspense boundary has either gone from fallback to resolved or from resolved to fallback, we will create a new Map if there isn't one, and if there is, we will add (if the boundary is a fallback) or remove the suspense boundary (if the boundary has resolved) from the map.
Add an optional name field to the Suspense boundary",Luna Ruan,2022-04-11T21:56:20Z
8e2f9b086e7abc7a92951d264a6a5d048defd914,"move passive flag (#24339)

Previously, we were only adding the passive flag when we add the Visibility flag, which is only set when we go from primary to fallback. Now, we add the passive flag BOTH when we go from primary to fallback and from fallback to primary.

An alternate solution is to add the passive flag in the same place as the visibility flag in the offscreen complete phase (rather than the suspense complete phase), but this feature is currently only for suspense, and offscreen can be used in different ways, so for now we add the passive flag only in the suspense component's complete phase. We might want to revisit this later when we think about how offscreen should work with transition tracing.",Luna Ruan,2022-04-11T21:54:57Z
55a21ef7e78a4e35302cbc7ffb19934a23cc6957,"fix pushTransition for transition tracing (#24338)

We forgot to move pushTransition out from the enableCache flag in #24321 in a place that both transition tracing and cache need to push transitions. Move it out from behind the enableCache to prepare for the next PRs.",Luna Ruan,2022-04-11T21:54:25Z
069d23bb74939c19bc8860ad4013324bd6e1c5f3," [eslint-plugin-exhaustive-deps] Fix exhaustive deps check for unstable vars (#24343)

* Fix exhaustive deps for unstable vars

* Fix formatting

* Optimise iterations

* Fix linting",Afzal Sayed,2022-04-11T20:43:16Z
4997515b96eede5ab1ca622e0439a0707f8d4afd,"Point useSubscription to useSyncExternalStore shim (#24289)

* Point useSubscription to useSyncExternalStore shim

* Update tests

* Update README

* Ad hoc case",dan,2022-04-11T20:15:13Z
df5d32f230fea7b2ca1e1ddcb78efd6c3f8d7ef2,Remove create-subscription from the list,Dan Abramov,2022-04-11T19:12:59Z
01e2bff1dcd99fffc9b1ea3fc398ad1b36f969eb,Remove unnecessary check (#24332),zhoulixiang,2022-04-11T19:08:29Z
d9a0f9e20338f05f0992562075ff034ccde008fe,Delete create-subscription folder (#24288),dan,2022-04-11T19:07:22Z
f993ffc5141a58e2a53d4b822b15744b0542aa93,"Fix infinite update loop that happens when an unmemoized value is passed to useDeferredValue (#24247)

* Fix infinite loop if unmemoized val passed to uDV

The current implementation of useDeferredValue will spawn a new
render any time the input value is different from the previous one. So
if you pass an unmemoized value (like an inline object), it will never
stop spawning new renders.

The fix is to only defer during an urgent render. If we're already
inside a transition, retry, offscreen, or other non-urgen render, then
we can use the latest value.

* Temporarily disable ""long nested update"" warning

DevTools' timeline profiler warns if an update inside a layout effect
results in an expensive re-render. However, it misattributes renders
that are spawned from a sync render at lower priority. This affects the
new implementation of useDeferredValue but it would also apply to things
like Offscreen.

It's not obvious to me how to fix this given how DevTools models the
idea of a ""nested update"" so I'm disabling the warning for now to
unblock the bugfix for useDeferredValue.",Andrew Clark,2022-04-11T16:34:03Z
fa580022624974f4a8d0e0a3b67e1dc2fd54d583,"[Fizz] Pipeable Stream Perf (#24291)

* Add fixture for comparing baseline render perf for renderToString and renderToPipeableStream

Modified from ssr2 and https://github.com/SuperOleg39/react-ssr-perf-test

* Implement buffering in pipeable streams

The previous implementation of pipeable streaming (Node) suffered some performance issues brought about by the high chunk counts and innefficiencies with how node streams handle this situation. In particular the use of cork/uncork was meant to alleviate this but these methods do not do anything unless the receiving Writable Stream implements _writev which many won't.

This change adopts the view based buffering techniques previously implemented for the Browser execution context. The main difference is the use of backpressure provided by the writable stream which is not implementable in the other context. Another change to note is the use of standards constructs like TextEncoder and TypedArrays.

* Implement encodeInto during flushCompletedQueues

encodeInto allows us to write directly to the view buffer that will end up getting streamed instead of encoding into an intermediate buffer and then copying that data.",Josh Story,2022-04-11T16:13:44Z
0568c0f8cde4ac6657dff9a5a8a7112acc35a748,Replace zero with NoLanes for consistency in FiberLane (#24327),Leo,2022-04-09T19:29:08Z
e0160d50c5a492a925db6ab3f8478e118336c722,"add transition tracing transitions stack (#24321)

Added a transitions stack for to keep track of which transitions are still happening for the current boundary.
* On the root, we will get all transitions that have been initiated for the corresponding lanes.
* Whenever we encounter a suspended boundary, we will add all transitions on the stack onto the boundary
* Whenever we encounter a boundary that just unsuspended, we will add all transitions on the boundary onto the stack
A transition will be considered complete when there are no boundaries that have the associated transition",Luna Ruan,2022-04-09T00:48:30Z
b0f13e5d391c0deba4327eb15c07e7321f3a871e,"add pendingPassiveTransitions (#24320)

Add pendingPassiveTransitions work loop module level variable. Because workInProgressTransitions might change before we process it in the passive effects, we introduce a new variable, pendingPassiveTransitions, where we store the transitions until we can actually process them in the commit phase.",Luna Ruan,2022-04-08T23:35:18Z
60e63b960f19d4c846cf32d47d2a974297ae253a,"remove console.error in ReactFiberLane (#24319)

We changed the implementation of root.transitionLanes so that, if there is no transitions for a given lane, we use null instead of an array. This means that this error is no longer valid, so we are removing it",Luna Ruan,2022-04-08T22:33:52Z
ec52a5698e2dfea7050a0b015f0b79abfb2d81b7,"Fix: Don't call cWU if already unmounted

When a tree goes offscreen, we unmount all the effects just like we
would in a normal deletion. (Conceptually it _is_ a deletion; we keep
the fiber around so we can reuse its state if the tree mounts again.)

If an offscreen component gets deleted ""for real"", we shouldn't unmount
it again.

The fix is to track on the stack whether we're inside a hidden tree.

We already had a stack variable for this purpose, called
`offscreenSubtreeWasHidden`, in another part of the commit phase, so I
reused that variable instead of creating a new one. (The name is a bit
confusing: ""was"" refers to the current tree before this commit. So, the
""previous current"".)

Co-authored-by: dan <dan.abramov@me.com>",Andrew Clark,2022-04-07T03:47:17Z
46db4e996d686ffbc8ec4cc7d559d6897288b780,"Combine deletion phase into single recursive function

Similar to the previous step, this converts the deletion phase into
a single recursive function. Although there's less code, this one is
a bit trickier because it's already contains some stack-like logic
for tracking the nearest host parent. But instead of using the actual
stack, it repeatedly searches up the fiber return path to find the
nearest host parent.

Instead, I've changed it to track the nearest host parent on the
JS stack.

(We still search up the return path once, to set the initial host parent
right before entering a deleted tree. As a follow up, we can instead
push this to the stack as we traverse during the main mutation phase.)",Andrew Clark,2022-04-07T03:25:39Z
481dece5808d1207acd66a6a0365efee729cf0f7,"Use recursion to traverse during mutation phase

Most of the commit phase uses iterative loops to traverse the tree.
Originally we thought this would be faster than using recursion, but
a while back @trueadm did some performance testing and found that the
loop was slower because we assign to the `return` pointer before
entering a subtree (which we have to do because the `return` pointer
is not always consistent; it could point to one of two fibers).

The other motivation is so we can take advantage of the JS stack to
track contextual information, like the nearest host parent.

We already use recursion in a few places; this changes the mutation
phase to use it, too.",Andrew Clark,2022-04-08T04:45:10Z
f9e6aef82880615d7d11fb9facf9edfd8c80dcf6,"Wrap try-catch directly around each user function

This moves the try-catch from around each fiber's mutation phase to
direclty around each user function (effect function, callback, etc).

We already do this when unmounting because if one unmount function
errors, we still need to call all the others so they can clean up
their resources.

Previously we didn't bother to do this for anything but unmount,
because if a mount effect throws, we're going to delete that whole
tree anyway.

But now that we're switching from an iterative loop to a recursive one,
we don't want every call frame on the stack to have a try-catch, since
the error handling requires additional memory.

Wrapping every user function is a bit tedious, but it's better
for performance. Many of them already had try blocks around
them already.",Andrew Clark,2022-04-08T04:34:56Z
bcc1b3121e3052f88a643eaefe93f300a4bfa7b2,"Move reportUncaughtErrorInDev to captureCommitPhaseError

reportUncaughtErrorInDev is always followed by captureCommitPhaseError,
so we can move it into that function.",Andrew Clark,2022-04-08T04:05:15Z
c99c5f1df6e3c274d34bd2e5f0b27ac4af481f94,"Move ad hoc flag checks into main switch statement

We should always refine the type of fiber before checking the effect
flag, because the fiber tag is more specific.

Now we have a single switch statement for all mutation effects.",Andrew Clark,2022-04-08T00:05:50Z
54b5b32d53355ad1634a97e604a583e8da6fa842,"Move Update flag check into each switch case

The fiber tag is more specific than the effect flag, so we should always
refine the type of work first, to minimize redundant checks.

In the next step I'll move all other other flag checks in this function
into the same switch statement.",Andrew Clark,2022-04-07T23:51:05Z
e66e7a0fb875dac2d3e34c005c5be7503f979143,"Inline commitWork into commitMutationOnFiber

There's not really any reason these should be separate functions. The
factoring has gotten sloppy and redundant because there's similar logic
in both places, which is more obvious now that they're combined.

Next I'll start combining the redundant branches.",Andrew Clark,2022-04-07T23:09:07Z
12d7a9ad7082106102b7dd9fec4c75abafe1c2a8,"Combine commitWork into single switch statement

commitWork is forked into a separate implementation for mutation mode
(DOM) and persistent mode (React Native). But unlike when it was first
introduced, there's more overlap than differences between the forks,
mainly because we've added new types of fibers. So this joins the two
forks and adds more local branches where the behavior actually
diverges: host nodes, host containers, and portals.",Andrew Clark,2022-04-07T23:00:20Z
ea7b2ec2898c615f648aec30fcbcf73aed156583,"Remove wrong return pointer warning

I'm about to refactor part of the commit phase to use recursion instead
of iteration. As part of that change, we will no longer assign the
`return` pointer when traversing into a subtree. So I'm disabling
the internal warning that fires if the return pointer is not consistent
with the parent during the commit phase.

I had originally added this warning to help prevent mistakes when
traversing the tree iteratively, but since we're intentionally switching
to recursion instead, we don't need it.",Andrew Clark,2022-04-07T03:01:07Z
8dcedba15a4a0f5545e3b386355000208884b24f,"Add fallback shim for AbortController (#24285)

* Add fallback shim for AbortController

* Replace shim with a minimal stub

* replace-fork

* Better minification

* Fix flow

* Even smaller

* replace-fork

* Revert back to object constructor

* replace-fork",Ricky,2022-04-08T19:53:40Z
b86baa1cb7b0838169eb762873d53442b9075c94,Add back lost cache test (#24317),Ricky,2022-04-08T19:34:41Z
a9add2fe08cc3fa8fc811f6efce84815827fb98c,"Fix file path separator compatibility in scripts/babel (#24318)

The problem in scripts\babel\transform-object-assign.js is that file path separator has '/' and '\' between Linux, MacOS and Windows, which causes yarn build error. See https://github.com/facebook/react/issues/24103",Zhongjan,2022-04-08T18:47:31Z
bafe912a5f20736c40f505a47fcb238a375572a6,update types for InputContinuousLane and DefaultLane (#24316),Leo,2022-04-08T17:51:40Z
4ebaeae40dec52c84c968a25f1f21f4d0f571336,"moved mutation code to passive (#24251)

This PR moves the code for transition tracing in the mutation phase that adds transitions to the pending callbacks object (to be called sometime later after paint) from the mutation to the passive phase.

Things to think about:

Passive effects can be flushed before or after paint. How do we make sure that we get the correct end time for the interaction?",Luna Ruan,2022-04-08T16:28:20Z
5b2e7253f92a879894f7371472e43c2cff511b30,React DevTools 4.24.3 -> 4.24.4 (#24315),Brian Vaughn,2022-04-08T15:38:07Z
caa60e8fccf4346c64a92fce0e6c171d0ee9764c,update types for NonIdleLanes and IdleLane (#24313),Leo,2022-04-08T15:01:18Z
65f35035a6184865c495934c89477a4d507fba1a,Allow react-devtools-inline createStore() method to override Store config params (#24303),Brian Vaughn,2022-04-08T12:59:12Z
1f7a901d7b2fc073e29a1887553b1bd18080da1b,"Fix false positive lint error with large number of branches  (#24287)

* Switched RulesOfHooks.js to use BigInt. Added test and updated .eslintrc.js to use es2020.

* Added BigInt as readonly global in eslintrc.cjs.js and eslintrc.cjs2015.js

* Added comment to RulesOfHooks.js that gets rid of BigInt eslint error

* Got rid of changes in .eslintrc.js and yarn.lock

* Move global down

Co-authored-by: stephen cyron <stephen.cyron@fdmgroup.com>
Co-authored-by: dan <dan.abramov@gmail.com>",Stephen Cyron,2022-04-07T23:22:47Z
f56dfe950b206651913bf0b836c10592c393357d,"Warn on setState() in useInsertionEffect() (#24298)

* Warn on setState() in useInsertionEffect()

* Use existing DEV reset mechanism",dan,2022-04-07T19:12:49Z
548b542b41565340a9ffd36d0d4e5e1d244cc113,Update renderToPipeableStream#options.onShellError to match usage (#24299),Sebastian Silbermann,2022-04-07T19:06:54Z
d68b09defca37c30d3a7a34d4de884e374c74858,"Fix warning about setState in useEffect (#24295)

* Fix warning about setState in useEffect

* Fix test

* Fix multiple roots",dan,2022-04-07T17:06:35Z
0579154772af551bfccf9ff0cc7076a39316344a,Update create-subscription README (#24294),dan,2022-04-07T15:41:38Z
e8f4a6653dc3f5d9702236a3abed887ca44dcfbb,Fix import in example,dan,2022-04-07T13:12:58Z
3e8c91c5f8e142f341b407bdebfe4fe4e0930914,Fix import in README,dan,2022-04-07T12:46:36Z
bb49abea2377d6391a98cef536e9da4c26ddaa39,"Update some READMEs (#24290)

* Update some READMEs

* Update README.md",dan,2022-04-07T01:35:01Z
4bc465a16f3270283886221604c1187fc976859b,"Rename Controls to PipeableStream (#24286)

This type isn't exported so it's technically not public.

This object mimics a ReadableStream.

Currently this is safe to destructure and call separately but I'm not sure
that's even guaranteed. It should probably be treated as a class in docs.",Sebastian Markbåge,2022-04-06T23:27:38Z
ece5295e5af992d30256f26ca428abdad514f862,Remove unnecessary flag check (#24284),zhoulixiang,2022-04-06T16:42:53Z
af730436c05a2fb2c6d8a334c578fc347392ba38,"test: Update attribute fixture snapshot (#24083)

* test: Update attribute fixture snapshot

* Poke CircleCI

* Poke CircleCI",Sebastian Silbermann,2022-04-05T01:59:26Z
1d1fa94a66275c42b5339dabf9985379a0c74a23,Fix false positive warning about react-dom/client with UMD builds (#24274),alireza molaee,2022-04-05T01:56:18Z
9ededef945f032fa6257711d45a4f198bfdf1633,"Don't mute hydration errors forcing client render (#24276)

* Don't mute hydration errors forcing client render

* Nits",dan,2022-04-05T01:11:22Z
5f7f5280836a44d4b81c1cb13f51e7482470cf1b,"Add more tests for suppressHydrationWarning (#24275)

* More tests for suppressHydrationWarning

* Move suppressHydration tests to new file

* Extract more tests

* Test name

* Test legacy behavior too",dan,2022-04-04T23:04:15Z
fc47cb1b61ac012f9bd6d7251eb19fcecf364a3b,Fix suppressHydrationWarning not working in production (#24271),dan,2022-04-04T15:23:58Z
985272e26858ce3838fde856b022200b9c7d3dcb,Fix name mismatch in react-reconciler custom build. (#24272),Hikari Hayashi,2022-04-04T08:47:36Z
e912da964dbf5f84bf8c4e78e0ac218362bc074e,Update Example render for React v18 (#24259),Noel Kim (김민혁),2022-04-03T01:41:49Z
b8cfda15e1232554487c7285fb464f22705a23ce,"changed Transitions type to Array<Transition> (#24249)

Changed the Transitions type to Array<Transition> because Transitions was confusing",Luna Ruan,2022-04-01T21:02:28Z
c89a15c716febe71b7d857f839829cd1dc74918f,"[ReactDebugTools] wrap uncaught error from rendering user's component (#24216)

* [ReactDebugTools] wrap uncaught error from rendering user's component

* fix lint

* make error names more package specific

* update per review comments

* fix tests

* fix lint

* fix tests

* fix lint

* fix error name & nits

* try catch instead of mocking error

* fix test for older node.js version

* avoid false positive from try-catch in tests","Mengdi ""Monday"" Chen",2022-04-01T18:38:11Z
ebd7ff65b6fea73313c210709c88224910e86339,"Don't recreate the same fallback on the client if hydrating suspends (#24236)

* Delay showing fallback if hydrating suspends

* Fix up

* Include all non-urgent lanes

* Moar tests

* Add test for transitions",dan,2022-04-01T01:49:54Z
d352fd09315276b3def318d91f462ee7c49fb1af,"Fix for SSR2 fixture not working locally  (#24237)

* SS2 fixture not working locally fix

* Fix prettier issue

* prettier excess line fix

* Update render.js

* Update README.md

Co-authored-by: dan <dan.abramov@gmail.com>",Kay,2022-03-31T23:26:12Z
4db3ff6c1ac092676dffc2251f5dec908eca9c74,"Test suite for hydration diff warnings (#24229)

* Test suite for hydration diff warnings

* Test both variants

* Add more edge cases",dan,2022-03-31T16:35:51Z
aa05e73150d4a80fe4b1f9cbf61d3b81766fa127,Add 4.4.0 release to eslint rules CHANGELOG (#24234),Brian Vaughn,2022-03-31T14:43:08Z
b76103d66fdb7396cbfcc66a032b31a0cd8ad342,"Remove React 18 issue template (#24220)

React 18 is just React now.",dan,2022-03-30T18:37:31Z
77938881f42ac466c573fa24ecc9eff84ff7aca4,"Update @next version (#24218)

Now that 18.0 is out, the next minor is 18.1",Andrew Clark,2022-03-30T16:28:49Z
7e3121e1cfe25f1af5079b3bf487b5b5202400d4,Remove unstable_createMutableSource from experimental build (#24209),Sebastian Silbermann,2022-03-30T16:05:07Z
a0fb3cf37ec6e81de7b7b1ca01b2cc560231e0c1,Fix changelog typos,dan,2022-03-30T16:00:29Z
0415b18a100043df164bcd40639f9373e3358350,"[ReactDebugTools] add custom error type for future new hooks (#24168)

* [ReactDebugTools] add custom error type for future new hooks

* update per review comments

* remove unused argument","Mengdi ""Monday"" Chen",2022-03-30T15:07:12Z
8b95ea2cba17d3dd653324debc1170fa50bda038,Inline DevTools test snapshots and cleaned up tests (#24199),Brian Vaughn,2022-03-30T15:02:51Z
c9100d95b97913192397772ad81038ba322d068b,DevTools release script: Show changelog before minor/patch prompt (#24200),Brian Vaughn,2022-03-30T13:26:33Z
27199d75678bea21f51ab1364e69ef58e0bde663,fix build script for react dev tools (#24193),"Mengdi ""Monday"" Chen",2022-03-30T13:26:14Z
cfc76b46582b6614aa1db191734c75ca58c8dacd,Update CHANGELOG.md (#24206),Strek,2022-03-30T06:48:32Z
8acc812c673023ad9b3d5940e94584254a46af2d,Add a missing breaking change to changelog,dan,2022-03-29T22:13:50Z
adb8ebc927ea091ba5ffba6a9f30dbe62eaee0c5,React DevTools 4.24.2 -> 4.24.3 (#24198),"Mengdi ""Monday"" Chen",2022-03-29T18:44:32Z
509d2d906591b0fd364b2853433a4fe5b111bf02,"Add React 18 changelog (#24195)

* Add React 18 to changelog

* Fix typo

Co-authored-by: Rick Hanlon <rickhanlonii@gmail.com>",dan,2022-03-29T17:13:05Z
b2b4bddeb85480922542fd1f3f64982d0e916831,Bump react-refresh version,Andrew Clark,2022-03-29T16:08:09Z
3e997fdbaad54bac4aa067895da7814e0f8cfc9e,Bump react-refresh version,Andrew Clark,2022-03-29T16:08:09Z
34aa5cfe0d9b6ec4667e02bf46ab34d83dfb2d6d,Update local package.jsons for 18,Andrew Clark,2022-03-29T16:04:56Z
eaa493e5325cec0d8ba41bc0a4bcb300d1a72b7d,"Profiler should only report stateful hooks that change between renders (#24189)

The Profiler has an advanced feature that shows why a component re-rendered. In the case of props and (class) state, it shows the names of props/state values that changed between renders. For hooks, DevTools tries to detect which ones may been related to the update by comparing prev/next internal hook structures.

My initial implementation tried to detect all changed hooks. In hindsight this is confusing, because only stateful hooks (e.g. useState, useReducer, and useSyncExternalStore) can schedule an update. (Other types of hooks can change between renders, but in a reactive way.) This PR changes the behavior to only report hooks that scheduled the update.",Brian Vaughn,2022-03-29T15:11:31Z
fc46dba67fc47783bbb5919e656c66c6e51ce16d,"Remove rc suffix from versions (#24190)

* Remove rc suffix from versions

* Bump eslint-plugin-react-hooks version

I noticed this one was behind the latest published version",Andrew Clark,2022-03-29T14:53:46Z
fe6e0741286345edb2aa23784c21f8ea611ebdea,"Fix usage of console.error to prevent transform (#24188)

We were suppressing the `react-internals/warning-args` lint rule
for the call to `console.error` in `defaultOnRecoverableError`.

As far as I could tell, the lint rule exists because on dev builds,
we replace all calls to `console.error` with [this error
function](https://github.com/facebook/react/blob/main/packages/shared/consoleWithStackDev.js#L31-L37)
which expects a format string + args and nothing else. We were trying
to pass in an `Error` object directly. After this commit's change,
we will still be passing an `Error` but the transform won't occur.",Yash Srivastav,2022-03-29T09:45:14Z
ba0aee5d71874202ebf8760a802bb1d6f2f61a5e,"DevTools bugfix: Ignore duplicate welcome ""message"" events (#24186)",Brian Vaughn,2022-03-28T18:25:30Z
e7d0053e65db49a536440eb24e6c1e4961d976f6,"[fizz] Fix validateIterable call (#24166)

* fix validate iterable call

* supports iterable

* gate test by experimental",salazarm,2022-03-25T18:03:06Z
3787230b1bff799bb8837b5a30e2d11d24b77ce1,Fix fixture,Dan Abramov,2022-03-25T17:38:10Z
a6bdb882b73cd0b2702656d767606c74ac0b6670,"Attach DevTools Tree keyboard events to the Tree container (not the document) (#24164)

We used to listen to at the document level for this event. That allowed us to listen to up/down arrow key events while another section
of DevTools (like the search input) was focused. This was a minor UX positive.

(We had to use ownerDocument rather than document for this, because the DevTools extension renders the Components and Profiler tabs into portals.)

This approach caused a problem though: it meant that a react-devtools-inline instance could steal (and prevent/block) keyboard events from other JavaScript on the page– which could even include other react-devtools-inline instances. This is a potential major UX negative.

Given the above trade offs, we now listen on the root of the Tree itself.",Brian Vaughn,2022-03-25T16:41:13Z
033fe52b48338aec2522f1918408296cbec523d6,"DevTools imports (#24163)

* Update DevTools imports: react-dom -> react-dom/client
* Silence ReactDOM.render warning in DevTools test shell",Brian Vaughn,2022-03-25T16:02:39Z
4072bdfd6d1fcebe520e114e04047e06992af839,Add Node 17 to devEngines,Dan Abramov,2022-03-25T04:20:39Z
78fa7109c76225187427266e4f682fb713f3b922,Release script prompts to stop running DEV scripts (#24154),Brian Vaughn,2022-03-24T23:33:59Z
6b85823b35f75baec9022a40df336d6aee788ce0,"Clean up Selective Hydration / Event Replay flag (#24156)

* clean up selective hydration / replay flag

* dont export return_targetInst",salazarm,2022-03-24T18:12:43Z
1159ff6193d500046d7bb86c234e167ea4b0becb,"Add details in READMEs for react-devtools local developement (#24148)

* Add details in READMEs for react-devtools local developement

* typo

* update yarn for release script","Mengdi ""Monday"" Chen",2022-03-24T14:04:12Z
8df8a57eddbb3e89f0383c9d4d7feb6a13034fef,React DevTools 4.24.1 -> 4.24.2 (#24150),Brian Vaughn,2022-03-24T13:06:10Z
e62a8d754548a490c2a3bcff3b420e5eedaf11c0,"Store throws a specific Error type (UnsupportedBridgeOperationError) (#24147)

When this Error type is detected, DevTools shows a custom error overlay with upgrade/downgrade instructions.",Brian Vaughn,2022-03-23T21:04:54Z
3f8990898309c61c817fbf663f5221d9a00d0eaa,"Fix test-build-devtools if build was generated by build-for-devtools (#24088)

Co-authored-by: Brian Vaughn <brian.david.vaughn@gmail.com>",Sebastian Silbermann,2022-03-23T13:51:59Z
de516ca5a635220d0cbe82b8f04003820e3f4072,Bump versions to rc.3 (#24141),Andrew Clark,2022-03-22T01:36:45Z
577f2de46cb2f6d71380551478a02de3965a764b,"enableCacheElement flag (#24131)

* enableCacheElement flag

* Update packages/shared/forks/ReactFeatureFlags.testing.js

Co-authored-by: Ricky <rickhanlonii@gmail.com>

* Update packages/shared/forks/ReactFeatureFlags.test-renderer.js

Co-authored-by: Ricky <rickhanlonii@gmail.com>

* Update packages/shared/forks/ReactFeatureFlags.native-oss.js

Co-authored-by: Ricky <rickhanlonii@gmail.com>

* Update packages/shared/ReactFeatureFlags.js

Co-authored-by: Ricky <rickhanlonii@gmail.com>

Co-authored-by: Dave McCabe <davemccabe@fb.com>
Co-authored-by: Ricky <rickhanlonii@gmail.com>",David McCabe,2022-03-21T03:41:02Z
2e0d86d22192ff0b13b71b4ad68fea46bf523ef6,"Allow updating dehydrated root at lower priority without forcing client render (#24082)

* Pass children to hydration root constructor

I already made this change for the concurrent root API in #23309. This
does the same thing for the legacy API.

Doesn't change any behavior, but I will use this in the next steps.

* Add isRootDehydrated function

Currently this does nothing except read a boolean field, but I'm about
to change this logic.

Since this is accessed by React DOM, too, I put the function in a
separate module that can be deep imported. Previously, it was accessing
the FiberRoot directly. The reason it's a separate module is to break a
circular dependency between React DOM and the reconciler.

* Allow updates at lower pri without forcing client render

Currently, if a root is updated before the shell has finished hydrating
(for example, due to a top-level navigation), we immediately revert to
client rendering. This is rare because the root is expected is finish
quickly, but not exceedingly rare because the root may be suspended.

This adds support for updating the root without forcing a client render
as long as the update has lower priority than the initial hydration,
i.e. if the update is wrapped in startTransition.

To implement this, I had to do some refactoring. The main idea here is
to make it closer to how we implement hydration in Suspense boundaries:

- I moved isDehydrated from the shared FiberRoot object to the
HostRoot's state object.
- In the begin phase, I check if the root has received an by comparing
the new children to the initial children. If they are different, we
revert to client rendering, and set isDehydrated to false using a
derived state update (a la getDerivedStateFromProps).
- There are a few places where we used to set root.isDehydrated to false
as a way to force a client render. Instead, I set the ForceClientRender
flag on the root work-in-progress fiber.
- Whenever we fall back to client rendering, I log a recoverable error.

The overall code structure is almost identical to the corresponding
logic for Suspense components.

The reason this works is because if the update has lower priority than
the initial hydration, it won't be processed during the hydration
render, so the children will be the same.

We can go even further and allow updates at _higher_ priority (though
not sync) by implementing selective hydration at the root, like we do
for Suspense boundaries: interrupt the current render, attempt hydration
at slightly higher priority than the update, then continue rendering the
update. I haven't implemented this yet, but I've structured the code in
anticipation of adding this later.

* Wrap useMutableSource logic in feature flag",Andrew Clark,2022-03-20T20:18:51Z
dbe9e732af1f12757a55adb12a8279d7db898b60,"Avoid conditions where control flow is sufficient (#24126)

This also fixes a type error since resetTextContent can only be called
on Instances.",Sebastian Markbåge,2022-03-18T20:51:40Z
645ec5d6fce7926e1d23105a93621147ec3d7f17,"fix inspecting an element in a nested renderer bug (#24116)

Fixes this issue, where inspecting components in nested renderers results in an error. The reason for this is because we have different fiberToIDMap instances for each renderer, and owners of a component could be in different renderers.

This fix moves the fiberToIDMap and idToArbitraryFiberMap out of the attach method so there's only one instance of each for all renderers.",Luna Ruan,2022-03-17T19:40:03Z
1c44437355e21f2992344fdef9ab1c1c5a7f8c2b,"Fix createRoot container signature (#24110)

The internal Container type represents the types of containers that React
can support in its internals that deal with containers.

This didn't include DocumentFragment which we support specifically for
rendering into shadow roots.

However, not all types makes sense to pass into the createRoot API.

One of those is comment nodes that is deprecated and we don't really fully
support. It really only exists for FB legacy.

For createRoot it doesn't make sense to pass a Document since that will try
to empty the document which removes the HTML tag which doesn't work.
Documents can only be passed to hydrateRoot.

Conversely I'm not sure we actually support hydrating a shadow root properly
so I excluded DocumentFragment from hydrateRoot.",Sebastian Markbåge,2022-03-17T00:06:00Z
b075f974229f5eee820e97e87c2c73056c12c0b7,Fix dispatch config type for skipBubbling (#24109),Luna,2022-03-16T19:05:57Z
8fce116998ea525194e02075d1b89ddafc8d698f,Update DevTools READMEs (#24105),Brian Vaughn,2022-03-16T15:37:10Z
ef23a9ee8114c939946ceff91becc13415d99d5a,"Flag for text hydration mismatch (#24107)

* flag for text hydration mismatch

* rm unused import",salazarm,2022-03-16T14:12:59Z
ba5dc6ccde775e742643ac7da16ff5d4b29cc09c,"Add authorization header to artifacts request (#24106)

* Add authorization header to artifacts request

CircleCI's artifacts API was updated; it now errors unless you're
logged in. This affects any of our workflows that download
build artifacts.

To fix, I added an authorization header to the request.

* Update sizbot to pull artifacts from public mirror

We can't use the normal download-build script in sizebot because it
depends on the CircleCI artifacts API, which was recently changed to
require authorization. And we can't pass an authorization token
without possibly leaking it to the public, since we run sizebot on
PRs from external contributors. As a temporary workaround, this job
will pull the artifacts from a public mirror that I set up. But we
should find some other solution so we don't have to maintain
the mirror.",Andrew Clark,2022-03-16T03:10:23Z
0412f0c1a46ef60032b70c43d55ec010f908855f,"add offscreen state node (#24026)

Add state node on Offscreen fibers with id (in preparation for transition tracing)",Luna Ruan,2022-03-15T20:28:50Z
d9677e3492f058e32468b8e728683d1d08bcba6f,Update CHANGELOG.md,Brian Vaughn,2022-03-15T18:21:21Z
ac574d68834cbe7fd053b411e32a1b7687f5a473,React DevTools 4.24.0 -> 4.24.1 (#24100),Luna Ruan,2022-03-15T18:13:00Z
63b86e19955a3f68c3e6e4928f4e5b24fd8a8342,"Disable unsupported Bridge protocol version dialog and add workaround for old protocol operations format (#24093)

Rationale: The only case where the unsupported dialog really matters is React Naive. That's the case where the frontend and backend versions are most likely to mismatch. In React Native, the backend is likely to send the bridge protocol version before sending operations– since the agent does this proactively during initialization.

I've tested the React Native starter app– after forcefully downgrading the backend version to 4.19.1 (see #23307 (comment)) and verified that this change ""fixes"" things. Not only does DevTools no longer throw an error that causes the UI to be hidden– it works (meaning that the Components tree can be inspected and interacted with).",Brian Vaughn,2022-03-15T17:48:26Z
43eb28339a0dc645c27b36f06200da63d57c292f,Add skipBubbling property to dispatch config (#23366),Luna,2022-03-14T17:59:21Z
2bf7c02f0ecddff385f8acb9c797e65884f1a3b3,Don't hide console error|warn in inspectedElement-test (#24086),Sebastian Silbermann,2022-03-14T13:17:37Z
061ac27bc9c30e758301d9db823677a0803938c8,"Fix use of hydrateRoot in DevTools test (#24084)

I noticed while working on a different PR that this test was not
using hydrateRoot correctly. You're meant to pass the initial children
as the second argument.",Andrew Clark,2022-03-13T00:21:58Z
796724086a8a64100abf8bbc848a07daeb37777d,Match select value against primitives to string but not undefined (#24077),Sebastian Markbåge,2022-03-12T18:34:55Z
832e2987e01aa357c3b2e551acae0682ca36fb14,Revert accdientally merged PR (#24081),Andrew Clark,2022-03-12T02:31:23Z
02b65fd8c5dbc6bfe2c976841f2f70a593ac9129,"Allow updates at lower pri without forcing client render

Currently, if a root is updated before the shell has finished hydrating
(for example, due to a top-level navigation), we immediately revert to
client rendering. This is rare because the root is expected is finish
quickly, but not exceedingly rare because the root may be suspended.

This adds support for updating the root without forcing a client render
as long as the update has lower priority than the initial hydration,
i.e. if the update is wrapped in startTransition.

To implement this, I had to do some refactoring. The main idea here is
to make it closer to how we implement hydration in Suspense boundaries:

- I moved isDehydrated from the shared FiberRoot object to the
HostRoot's state object.
- In the begin phase, I check if the root has received an by comparing
the new children to the initial children. If they are different, we
revert to client rendering, and set isDehydrated to false using a
derived state update (a la getDerivedStateFromProps).
- There are a few places where we used to set root.isDehydrated to false
as a way to force a client render. Instead, I set the ForceClientRender
flag on the root work-in-progress fiber.
- Whenever we fall back to client rendering, I log a recoverable error.

The overall code structure is almost identical to the corresponding
logic for Suspense components.

The reason this works is because if the update has lower priority than
the initial hydration, it won't be processed during the hydration
render, so the children will be the same.

We can go even further and allow updates at _higher_ priority (though
not sync) by implementing selective hydration at the root, like we do
for Suspense boundaries: interrupt the current render, attempt hydration
at slightly higher priority than the update, then continue rendering the
update. I haven't implemented this yet, but I've structured the code in
anticipation of adding this later.",Andrew Clark,2022-03-12T00:48:36Z
83b941a519f0528f3c7938f2bc6094a8de60c21e,"Add isRootDehydrated function

Currently this does nothing except read a boolean field, but I'm about
to change this logic.

Since this is accessed by React DOM, too, I put the function in a
separate module that can be deep imported. Previously, it was accessing
the FiberRoot directly. The reason it's a separate module is to break a
circular dependency between React DOM and the reconciler.",Andrew Clark,2022-03-04T17:37:53Z
c8e4789e21f6cb031b92b3bd8a905244bfd808b2,"Pass children to hydration root constructor

I already made this change for the concurrent root API in #23309. This
does the same thing for the legacy API.

Doesn't change any behavior, but I will use this in the next steps.",Andrew Clark,2022-03-04T21:50:29Z
581f0c42ed4baa07309dbda296dc93a101bd922b,"[Flight] add support for Lazy components in Flight server (#24068)

* [Flight] add support for Lazy components in Flight server

Lazy components suspend until resolved just like in Fizz. Add tests to confirm Lazy works with Shared Components and Client Component references.

* Support Lazy elements

React.Lazy can now return an element instead of a Component. This commit implements support for Lazy elements when server rendering.

* add lazy initialization to resolveModelToJson

adding lazying initialization toResolveModelToJson means we use attemptResolveElement's full logic on whatever the resolved type ends up being. This better aligns handling of misued Lazy types like a lazy element being used as a Component or a lazy Component being used as an element.",Josh Story,2022-03-10T19:18:54Z
82762bea55d56afda2dcd00a565941be3798e0ac,"React DevTools 4.23.0 -> 4.24.0 (#24066)

* Revert ""React DevTools 4.23.0 -> 4.24.0 (#23400)""

This reverts commit f6c130f6145dbae5436625560f520957b5e27859.

* React DevTools 4.23.0 -> 4.24.0

* Added additional, pending bugfixes to CHANGELOG

* Updated DevTools build and release script to fix header format",Brian Vaughn,2022-03-10T18:37:01Z
4a87fb52115ca26b2251bdcc94deeff841b66e52,Better handle undefined Error stacks in DevTools error boundary (#24065),Brian Vaughn,2022-03-10T18:36:47Z
48a8574a68066be0385bd90c4a24e3e620eafb92,Fixed edge case bug in Profiler (#24031),Brian Vaughn,2022-03-10T18:35:52Z
72a933d2892dac9e5327678b6bd37af8d589bb22,"Gate legacy hidden (#24047)

* Gate legacy hidden

* Gate tests

* Remove export from experimental",Sebastian Markbåge,2022-03-09T16:48:03Z
b9de50d2f9ad6ff8caae0729976c3cc9a69c176e,Update test to reset modules instead of using private state (#24055),Sebastian Markbåge,2022-03-09T04:13:32Z
c91892ec3c180a8f85a030aea931b58e326a55a7,"[Fizz] Don't flush empty segments (#24054)

Before this change, we would sometimes write segments without any content
in them. For example for a Suspense boundary that immediately suspends
we might emit something like:

<div hidden id=""123"">
  <template id=""456""></template>
</div>

Where the outer div is just a temporary wrapper and the inner one is a
placeholder for something to be added later.

This serves no purpose.

We should ideally have a heuristic that holds back segments based on byte
size and time. However, this is a straight forward clear win for now.",Sebastian Markbåge,2022-03-09T04:12:50Z
11c5bb6e168297f01f7a5954961706237937c105,Bump versions to rc.2,Andrew Clark,2022-03-08T19:36:24Z
9fa654eccd74035de0c2c873e61ecfe3fae1bf09,Bump versions to rc.2,Andrew Clark,2022-03-08T19:36:24Z
a59f53a603306777fc6f949d84ce85f09bba4e4c,Fizz: Prevent UnhandledPromiseRejection if shell errors (#24043),Sebastian Silbermann,2022-03-08T14:13:47Z
d5f1b067c8bbb826b823d0354a28ba31078b70c0,"[ServerContext] Flight support for ServerContext (#23244)

* Flight side of server context

* 1 more test

* rm unused function

* flow+prettier

* flow again =)

* duplicate ReactServerContext across packages

* store default value when lazily initializing server context

* .

* better comment

* derp... missing import

* rm optional chaining

* missed feature flag

* React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED ??

* add warning if non ServerContext passed into useServerContext

* pass context in as array of arrays

* make importServerContext nott pollute the global context state

* merge main

* remove useServerContext

* dont rely on object getters in ReactServerContext and disallow JSX

* add symbols to devtools + rename globalServerContextRegistry to just ContextRegistry

* gate test case as experimental

* feedback

* remove unions

* Lint

* fix oopsies (tests/lint/mismatching arguments/signatures

* lint again

* replace-fork

* remove extraneous change

* rebase

* 1 more test

* rm unused function

* flow+prettier

* flow again =)

* duplicate ReactServerContext across packages

* store default value when lazily initializing server context

* .

* better comment

* derp... missing import

* rm optional chaining

* missed feature flag

* React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED ??

* add warning if non ServerContext passed into useServerContext

* pass context in as array of arrays

* make importServerContext nott pollute the global context state

* merge main

* remove useServerContext

* dont rely on object getters in ReactServerContext and disallow JSX

* add symbols to devtools + rename globalServerContextRegistry to just ContextRegistry

* gate test case as experimental

* feedback

* remove unions

* Lint

* fix oopsies (tests/lint/mismatching arguments/signatures

* lint again

* replace-fork

* remove extraneous change

* rebase

* reinline

* rebase

* add back changes lost due to rebase being hard

* emit chunk for provider

* remove case for React provider type

* update type for SomeChunk

* enable flag with experimental

* add missing types

* fix flow type

* missing type

* t: any

* revert extraneous type change

* better type

* better type

* feedback

* change import to type import

* test?

* test?

* remove react-dom

* remove react-native-renderer from react-server-native-relay/package.json

* gate change in FiberNewContext, getComponentNameFromType, use switch statement in FlightServer

* getComponentNameFromTpe: server context type gated and use displayName if available

* fallthrough

* lint....

* POP

* lint",salazarm,2022-03-08T12:55:32Z
6edd55a3ffda9267cdbf3237ba0e44b5d62b6552,Gate unstable_expectedLoadTime on enableCPUSuspense (#24038),Sebastian Markbåge,2022-03-08T06:33:52Z
57799b912d365b373d2fe18d637e77480415df91,Add more feature flag checks (#24037),Sebastian Markbåge,2022-03-08T05:13:22Z
e09518e5bbb78447d6c86481cf0dcafb4b09c734,"[Fizz] write chunks to a buffer with no re-use (#24034)

* write chunks to a buffer with no re-use

chunks were previously enqueued to a ReadableStream as they were written. We now write them to a view over an ArrayBuffer
and enqueue them only when writing has completed or the buffer's size is exceeded. In addition this copy now ensures
we don't attempt to re-send buffers that have already been transferred.

* refactor writeChunk to be more defensive and efficient

We now defend against overflows using the next views length instead of the current one. this protects us against a future where we use byobRequest and we get longer initial views than we might create after overflowing the first time. Additionally we add in an optimization when we have completely filled up the currentView where we avoid creating subarrays of the chunk to write since it lands exactly on a view boundary. Finally we move the view creation to beginWriting to avoid a runtime check on each write and because we want to reset the view on each beginWriting call in case a throw elsewhere in the program leaves the currentView in an unfinished state

* add tests to exercise codepaths dealing with buffer overlows",Josh Story,2022-03-07T18:34:11Z
14c2be8dac2d5482fda8a0906a31d239df8551fc,"Rename Node SSR Callbacks to onShellReady/onAllReady and Other Fixes (#24030)

* I forgot to call onFatalError

I can't figure out how to write a test for this because it only happens
when there is a bug in React itself which would then be fixed if we found
it.

We're also covered by the protection of ReadableStream which doesn't leak
other errors to us.

* Abort requests if the reader cancels

No need to continue computing at this point.

* Abort requests if node streams get destroyed

This is if the downstream cancels is for example.

* Rename Node APIs for Parity with allReady

The ""Complete"" terminology is a little misleading because not everything
has been written yet. It's just ""Ready"" to be written now.

onShellReady
onShellError
onAllReady

* 'close' should be enough",Sebastian Markbåge,2022-03-04T19:38:46Z
cb1e7b1c6ccd989d54b376ee4ae9da72a34f96e5,"Move onCompleteAll to .allReady Promise (#24025)

* Move onCompleteAll to .allReady Promise

The onCompleteAll callback can sometimes resolve before the promise that
returns the stream which is tough to coordinate. A more idiomatic API
for a one shot event is a Promise.

That way the way you render for SEO or SSG is:

const stream = await renderToReadableStream(...);
await stream.readyAll;
respondWith(stream);

Ideally this should be a sub-class of ReadableStream but we don't yet
compile these to ES6 and they'd had to be to native class to subclass
a native stream.

I have other ideas for overriding the .tee() method in a subclass anyway.
So this is inline with that strategy.

* Reject the Promise on fatal errors",Sebastian Markbåge,2022-03-03T17:46:12Z
5662857616f7d645d3f7f5d4709c5bc36c660fcf,"[Fizz] Export debug function for FB (#24024)

* export debug function for FB

* silence flow",salazarm,2022-03-03T17:02:37Z
05c283c3c31184d68c6a54dfd6a044790b89a08a,"Fabric HostComponent as EventEmitter: support add/removeEventListener (unstable only) (#23386)

* Implement addEventListener and removeEventListener on Fabric HostComponent

* add files

* re-add CustomEvent

* fix flow

* Need to get CustomEvent from an import since it won't exist on the global scope by default

* yarn prettier-all

* use a mangled name consistently to refer to imperatively registered event handlers

* yarn prettier-all

* fuzzy null check

* fix capture phase event listener logic

* early exit from getEventListeners more often

* make some optimizations to getEventListeners and the bridge plugin

* fix accumulateInto logic

* fix accumulateInto

* Simplifying getListeners at the expense of perf for the non-hot path

* feedback

* fix impl of getListeners to correctly remove function

* pass all args in to event listeners",Joshua Gross,2022-03-02T20:00:08Z
08644348b62bbfe979570b7174ff493da9bc70e9,"Added unit Tests in the ReactART, increasing the code coverage (#23195)",BIKI DAS,2022-03-02T19:10:06Z
f6c130f6145dbae5436625560f520957b5e27859,"React DevTools 4.23.0 -> 4.24.0 (#23400)

* React DevTools 4.23.0 -> 4.24.0

* Fixed CHANGELOG header format

* Add separator line beween header version numbers",Brian Vaughn,2022-03-02T18:28:42Z
0e0b1a45fa09c0a8b162cde655016af97eda5c88,"Show DevTools backend and frontend versions in UI (#23399)

This information can help with bug investigation for renderers (like React Native) that embed the DevTools backend into their source (separately from the DevTools frontend, which gets run by the user).

If the DevTools backend is too old to report a version, or if the version reported is the same as the frontend (as will be the case with the browser extension) then only a single version string will be shown, as before. If a different version is reported, then both will be shown separately.",Brian Vaughn,2022-03-02T17:26:48Z
f0dd459e0d97081cb3c313ec52285e3e422f8dbf,"reassign src from props not the dom element src property (#23395)

The src property on the dom element will return a fully qualified name and this does not match the dom
src attribute or the props provided to react. instead of reading from the element and re-assigning the property we
assign the property from props which is how it was initially assigned during the render

Co-authored-by: Josh Story <story@hey.com>",Josh Story,2022-03-01T23:23:16Z
feefe437fe160cb99facbf9444ad6a32a901c6a3,"Refactor Cache Code (#23393)

This PR refactors the cache code by moving it out of ReactFiberCacheComponent to ReactFiberTransitionPool in anticipation of it being reused by multiple stacks (ie. transition tracing)",Luna Ruan,2022-03-01T20:39:51Z
17806594cc28284fe195f918e8d77de3516848ec,"Move createRoot/hydrateRoot to react-dom/client (#23385)

* Move createRoot/hydrateRoot to /client

We want these APIs ideally to be imported separately from things you
might use in arbitrary components (like flushSync). Those other methods
are ""isomorphic"" to how the ReactDOM tree is rendered. Similar to hooks.

E.g. importing flushSync into a component that only uses it on the client
should ideally not also pull in the entry client implementation on the
server.

This also creates a nicer parity with /server where the roots are in a
separate entry point.

Unfortunately, I can't quite do this yet because we have some legacy APIs
that we plan on removing (like findDOMNode) and we also haven't implemented
flushSync using a flag like startTransition does yet.

Another problem is that we currently encourage these APIs to be aliased by
/profiling (or unstable_testing). In the future you don't have to alias
them because you can just change your roots to just import those APIs and
they'll still work with the isomorphic forms. Although we might also just
use export conditions for them.

For that all to work, I went with a different strategy for now where the
real API is in / but it comes with a warning if you use it. If you instead
import /client it disables the warning in a wrapper. That means that if you
alias / then import /client that will inturn import the alias and it'll
just work.

In a future breaking changes (likely when we switch to ESM) we can just
remove createRoot/hydrateRoot from / and move away from the aliasing
strategy.

* Update tests to import from react-dom/client

* Fix fixtures

* Update warnings

* Add test for the warning

* Update devtools

* Change order of react-dom, react-dom/client alias

I think the order matters here. The first one takes precedence.

* Require react-dom through client so it can be aliased

Co-authored-by: Andrew Clark <git@andrewclark.io>",Sebastian Markbåge,2022-03-01T05:13:28Z
75662d6a7d135df9d10055f49c3a4ca09fe4efcc,"Remove hacky stream.locked check, declare as byte stream instead (#23387)

We used to check for stream.locked in pull to see if we've been passed to
something that reads yet.

This was a bad hack because it won't actually call pull again if that changes.

The source of this is because the default for ""highWaterMark"" is 1 on some
streams. So it always wants to add one ""chunk"" (of size 1).

If we leave our high water mark as 0, we won't fill up any buffers unless we're
asked for more.

This web API is somewhat odd because it would be way more efficient if it
just told us how much the recipient wants instead of calling us once per
chunk.

Anyway, I turns out that if we define ourselves as a ""bytes"" type of
stream, the default also happens to be a high water mark of 0 so we can
just use that instead.",Sebastian Markbåge,2022-03-01T02:35:00Z
086fa8ee2f80f0dc34b7d145be72f9843fca975d,"re-trigger load events for img elements on commit (#23316)

early load events will be missed by onLoad handlers if they trigger before the tree is committed
to avoid this we reset the src property on the img element to cause the browser to re-load
the img.

Co-authored-by: Josh Story <story@hey.com>",Josh Story,2022-02-28T23:07:39Z
a2327442157265873bf63f1124c142322f41f6de,"Remove flushControlled from experimental releases (#23384)

This brings the exports on npm to parity which simplifies things a bit.

We also don't plan to release this. It is used by Draft.js but that caller
will need to switch to flushSync.",Sebastian Markbåge,2022-02-28T19:38:13Z
a82ef6d40bb0b000a97ca82590bfeaa3637c66bb,"Add back skipUnmountedBoundaries flag only for www (#23383)

There are a few internal tests that still need to be updated, so I'm
adding this flag back for www only.

The desired behavior rolled out to 10% public, so we're confident there
are no issues.

The open source behavior remains (skipUnmountedBoundaries = true).",Andrew Clark,2022-02-28T16:14:30Z
f468816ef1000b2fe0086feabc0115b86f299cad,"Fix false positive hydration warnings (#23364)

* Failing test for react#23331

* Don't warn on hydration mismatch if suspended

When something suspends during hydration, we continue rendering the
siblings to warm up the cache and fire off any lazy network requests.
However, if there are any mismatches while rendering the siblings, it's
likely a false positive caused by the earlier suspended component. So
we should suppress any hydration warnings until the tree no
longer suspends.

Fixes #23332

Co-authored-by: Marcel Laverdet <marcel@laverdet.com>",Andrew Clark,2022-02-25T23:10:10Z
5d08a24c21dcb3d42ea628ce3f94bdbd0d432756,"useId: Use 'H' to separate main id from hook index (#23363)

No id should be a subset of any other id. Currently, this is not true
when there are multiple hooks in the same component. We append the
hook index to the end of the id, except for the first one. So you get
this pattern.

Before this change:

- 1st hook's id: :R0:
- 2nd hook's id: :R0:1:

The first hook's id is a subset of all the other ids in the
same component.

The fix for this is to use a different character to separate the main
id from the hook index. I've chosen a captial 'H' for this because
capital letters are not part of the base 32 character set when encoding
with `toString(32)`.

After this change:

- 1st hook's id: :R0:
- 2nd hook's id: :R0H1:",Andrew Clark,2022-02-25T20:46:59Z
629036a9c4fa925351fe714162dd2218eef3ac56,Bump versions to prepare for rc.1 (#23362),Andrew Clark,2022-02-25T02:24:46Z
3a60844a0f3449d7e6d208e31df44c5ba3466e38,"Update error message for suspending at sync priority (#23361)

Instead of adding a new Suspense boundary, the default recommendation
is to wrap the suspending update with startTransition.",Andrew Clark,2022-02-25T02:02:06Z
8d0d0e9a8aadc4bdddff3a40871dbc54c63264f3,"Deprecate renderToNodeStream (and fix textarea bug) (#23359)

* Deprecate renderToNodeStream

* Use renderToPipeableStream in tests instead of renderToNodeStream

This is the equivalent API. This means that we have way less test coverage
of this API but I feel like that's fine since it has a deprecation warning
in it and we have coverage on renderToString that is mostly the same.

* Fix textarea bug

The test changes revealed a bug with textarea. It happens because we
currently always insert trailing comment nodes. We should optimize that
away. However, we also don't really support complex children so we
should toString it anyway which is what partial renderer used to do.

* Update tests that assert number of nodes

These tests are unnecessarily specific about number of nodes.

I special case these, which these tests already do, because they're good
tests to test that the optimization actually works later when we do
fix it.",Sebastian Markbåge,2022-02-25T01:09:03Z
efe4121ee218099539523a713272edadbaafca2a,"Add : to beginning and end of every useId (#23360)

The ids generated by useId are unique per React root. You can create
additional ids by concatenating them with locally unique strings.

To support this pattern, no id will ever be a subset of another id. We
achieve this by adding a special character to the beginning and end.

We use a colon ("":"") because it's uncommon — even if you don't prefix
the ids using the `identifierPrefix` option, collisions are unlikely.

One downside of a colon is that it's not a valid character in DOM
selectors, like `querySelectorAll`. We think this is probably
fine because it's not a common use case in React, and there are
workarounds or alternative solutions. But we're open to reconsidering
this in the future if there's a compelling argument.",Andrew Clark,2022-02-25T01:07:41Z
42f15b324f50d0fd98322c21646ac3013e30344a,"[DevTools][Transition Tracing] onTransitionComplete and onTransitionStart implmentation (#23313)

* add transition name to startTransition

Add a transitionName to start transition, store the transition start time and name in the batch config, and pass it to the root on render

* Transition Tracing Types and Consts

* Root begin work

The root operates as a tracing marker that has all transitions on it. This PR only tested the root with one transition so far

- Store transitions in memoizedState. Do this in updateHostRoot AND attemptEarlyBailoutIfNoScheduledUpdate. We need to do this in the latter part because even if the root itself doesn't have an update, it could still have new transitions in its transitionLanes map that we need to process.

* Transition Tracing commit phase

- adds a module scoped pending transition callbacks object that contains all transition callbacks that have not yet been processed. This  contains all callbacks before the next paint occurs.
- Add code in the mutation phase to:
        * For the root, if there are transitions that were initialized during this commit in the root transition lanes map, add a transition start call to the pending transition callbacks object. Then, remove the transitions from the root transition lanes map.
        * For roots, in the commit phase, add a transition complete call

We add this code in the mutation phase because we can't add it to the passive phase because then the paint might have occurred before we even know which callbacks to call

* Process Callbacks after paint

At the end of the commit phase, call scheduleTransitionCallbacks to schedule all pending transition callbacks to be called after paint. Then clear the callbacks",Luna Ruan,2022-02-24T22:28:18Z
68cb55f262b75f5d5b723104b830daab37b1ea14,"Add more warnings for second argument to root.render. (#23358)

We already had one for callbacks but containers is also an easy mistake.",Sebastian Markbåge,2022-02-24T21:31:48Z
8c4cd65cfaa4614bac7fd7783b4ec502a337eba3,"Add warnings for common root API mistakes (#23356)

For createRoot, a common mistake is to pass JSX as the second argument,
instead of calling root.render.

For hydrateRoot, a common mistake is to forget to pass children as
the second argument.

The type system will enforce correct usage, but since not everyone uses
types we'll log a helpful warning, too.",Andrew Clark,2022-02-24T15:57:37Z
a5b22155c8431c25df728f61869ff1616e51e133,"Warn if renderSubtreeIntoContainer is called (#23355)

We already warn for all the other legacy APIs. Forgot to enable
this one.",Andrew Clark,2022-02-24T06:42:22Z
52c393b5d261550609dda955f059a26d1db63538,"Revert to client render on text mismatch (#23354)

* Refactor warnForTextDifference

We're going to fork the behavior of this function between concurrent
roots and legacy roots.

The legacy behavior is to warn in dev when the text mismatches during
hydration. In concurrent roots, we'll log a recoverable error and revert
to client rendering. That means this is no longer a development-only
function — it affects the prod behavior, too.

I haven't changed any behavior in this commit. I only rearranged the
code slightly so that the dev environment check is inside the body
instead of around the function call. I also threaded through an
isConcurrentMode argument.

* Revert to client render on text content mismatch

Expands the behavior of enableClientRenderFallbackOnHydrationMismatch to
check text content, too.

If the text is different from what was rendered on the server, we will
recover the UI by falling back to client rendering, up to the nearest
Suspense boundary.",Andrew Clark,2022-02-24T05:23:56Z
1ad8d81292415e26ac070dec03ad84c11fbe207d,"Remove object-assign polyfill (#23351)

* Remove object-assign polyfill

We really rely on a more modern environment where this is typically
polyfilled anyway and we don't officially support IE with more extensive
polyfilling anyway. So all environments should have the native version
by now.

* Use shared/assign instead of Object.assign in code

This is so that we have one cached local instance in the bundle.

Ideally we should have a compile do this for us but we already follow
this pattern with hasOwnProperty, isArray, Object.is etc.

* Transform Object.assign to now use shared/assign

We need this to use the shared instance when Object.spread is used.",Sebastian Markbåge,2022-02-24T00:34:24Z
b3f3da205b9abfc3c70e7018b03114a33ef43ca5,"Land warnOnSubscriptionInsideStartTransition flag (#23353)

We're including this in 18. The feature was already enabled — this just
removes the flag.",Andrew Clark,2022-02-23T23:52:08Z
990098f88aef825762f72e76ae84cfe1520222c2,"Re-arrange main ReactFeatureFlags module (#23350)

@sebmarkbage and I audited the feature flags file to review the status
of each feature or experiment. Based on that, I've added some more
comments to the main ReactFeatureFlags module and rearranged them
into groups.

I haven't changed the value of any flags, yet. There are a few we're
going to land but I'll do them as separate PRs.",Andrew Clark,2022-02-23T23:49:16Z
1f3f6db73caf72a7d2287241212b7669d0c2dd2f,"Remove createMutableSource from stable exports (#23352)

I removed useMutableSource in a previous PR but forgot this one.

We still export it in the FB builds until we can migrate the internal
callers (Recoil).",Andrew Clark,2022-02-23T23:11:22Z
587e759302ef1cc02954831ccc72f7f668e32426,"Remove Numeric Fallback of Symbols (#23348)

This was already defeating the XSS issue that Symbols was meant to protect
against. So you were already supposed to use a polyfill for security.

We rely on real Symbol.for in Flight for Server Components so those require
real symbols anyway.

We also don't really support IE without additional polyfills anyway.",Sebastian Markbåge,2022-02-23T23:08:30Z
40351575d3cfaef62426c889a90431c01fdeff0f,"Split writeChunk into void and return value (#23343)

This function was modeled after Node streams where write returns a boolean
whether to keep writing or not. I think we should probably switch this
up and read desired size explicitly in appropriate places.

However, in the meantime, we don't have to return a value where we're
not going to use it. So I split this so that we call writeChunkAndReturn
if we're going to return the boolean.

This should help with the compilation so that they can be inlined.",Sebastian Markbåge,2022-02-23T16:35:21Z
2c693b2dee6e0a644e9e952b5c2b64a1b21c8e55,"Re-add reentrancy avoidance (#23342)

* tests: add failing test to demonstrate bug in ReadableStream implementation

* Re-add reentrancy avoidance

I removed the equivalency of this in #22446. However, I didn't fully
understand the intended semantics of the spec but I understand this better
now.

The spec is not actually recursive. It won't call pull again inside of a
pull. It might not call it inside startWork neither which the original
issue avoided. However, it will call pull if you enqueue to the controller
without filling up the desired size outside any call.

We could avoid that by returning a Promise from pull that we wait to
resolve until we've performed all our pending tasks. That would be the
more idiomatic solution. That's a bit more involved but since we know
understand it, we can readd the reentrancy hack since we have an easy place
to detect it. If anything, it should probably throw or log here otherwise.

I believe this fixes #22772.

This includes the test from #22889 but should ideally have one for Fizz.

Co-authored-by: Josh Larson <josh.larson@shopify.com>",Sebastian Markbåge,2022-02-23T05:33:41Z
1760b27c02b632594048183a93afc7881203a230,"Remove ./src/* export from public build (#23262)

We only export the source directory so Jest and Rollup can access them
during local development and at build time. The files don't exist in the
public builds, so we don't need the export entry, either.",Andrew Clark,2022-02-23T01:13:33Z
552c067bb18062f6a1bba2fc848033abd2ea8090,"Remove public export for unstable-shared-subset.js (#23261)

The unstable-shared-subset.js file is not a public module — it's a
private module that the ""react"" package maps to when it's accessed from
the ""react-server"" package.

We originally added it because it was required to make our Rollup
configuration work, because at the time only ""public"" modules could act
as the entry point for a build artifact — that's why it's prefixed with
""unstable"". We've since updated our Rollup config to support private
entry points, so we can remove the extra indirection.",Andrew Clark,2022-02-23T01:03:51Z
4de99b3ca689e8f995f90f199cd8d7bfb4b35eca,"fix getSnapshot warning when a selector returns NaN (#23333)

* fix getSnapshot warning when a selector returns NaN

useSyncExternalStoreWithSelector delegate a selector as
getSnapshot of useSyncExternalStore.

* Fiber's use sync external store has a same issue

* Small nits

We use Object.is to check whether the snapshot value has been updated,
so we should also use it to check whether the value is cached.

Co-authored-by: Andrew Clark <git@andrewclark.io>",OGURA Daiki,2022-02-21T06:07:41Z
40eaa22d9af685c239f9d8d42b454d031791e76d,"Remove dependency on Offscreen Fiber updateQueue for React Cache (#23229)

We need to use the Offscreen Fiber's update queue for interaction tracing. This PR removes the optimization that React Cache uses to not need to push and pop the cache in special circumstances and defaults to always pushing and popping the cache as long as there was a previous cache.",Luna Ruan,2022-02-19T15:25:27Z
caf6d470772d3bf06af5042502579477e367e04f,"Enable enableCache on Test Renderer native (#23314)

Co-authored-by: Dave McCabe <davemccabe@fb.com>",David McCabe,2022-02-18T18:44:10Z
419ccc2b1974206b9fcbe539a31654dd64024156,"Land skipUnmountedBoundaries experiment (#23322)

This has been rolled out to 10% of Facebook users for months without
any issues.",Andrew Clark,2022-02-18T02:43:25Z
54f785bc51800556dead12aaedf9594b2f15e836,"Disallow comments as DOM containers for createRoot (#23321)

This is an old feature that we no longer support. `hydrateRoot` already
throws if you pass a comment node; this change makes `createRoot`
throw, too.

Still enabled in the Facebook build until we migrate the callers.",Andrew Clark,2022-02-17T21:44:22Z
e9aa9592c10f604dde7bb31b73e58ec190f3b3dc,"change ReactBatchConfig.transition

Previously, ReactBatchConfig.transition was an number (1 = there is a transition, 0 = there isn't one). This PR changes this to a transition object (object = there is a transition, null = there isn't one) in preparation for transition tracing changes.",Luna Ruan,2022-02-17T21:13:27Z
51c8411d9dab33290b794fe716b9514e7db1fb68,"Log a recoverable error whenever hydration fails (#23319)

There are several cases where hydration fails, server-rendered HTML is
discarded, and we fall back to client rendering. Whenever this happens,
we will now log an error with onRecoverableError, with a message
explaining why.

In some of these scenarios, this is not the only recoverable error that
is logged. For example, an error during hydration will cause hydration
to fail, which is itself an error. So we end up logging two separate
errors: the original error, and one that explains why hydration failed.

I've made sure that the original error always gets logged first, to
preserve the causal sequence.

Another thing we could do is aggregate the errors with the Error ""cause""
feature and AggregateError. Since these are new-ish features in
JavaScript, we'd need a fallback behavior. I'll leave this for a
follow up.",Andrew Clark,2022-02-17T20:16:17Z
79ed5e18fd5dba4148e3ca73da53fd6eef037209,"Delete vestigial RetryAfterError logic (#23312)

This code was originally added to force a client render after receiving
an error during hydration. Later we added the ForceClientRender to
implement the same behavior, but scoped to an individual Suspense
boundary instead of all the boundaries in the entire root. So it's
now redudant.

We had some test coverage already but I added another test specifically
for the case of throwing a recoverable hydration error in the shell.",Andrew Clark,2022-02-17T15:24:03Z
80059bb7307e30234ebcc9e6b491c0606e66e6c7,"Switch to client rendering if root receives update (#23309)

If a hydration root receives an update before the outermost shell has
finished hydrating, we should give up hydrating and switch to
client rendering.

Since the shell is expected to commit quickly, this doesn't happen that
often. The most common sequence is something in the shell suspends, and
then the user quickly navigates to a different screen, triggering a
top-level update.

Instead of immediately switching to client rendering, we could first
attempt to hydration at higher priority, like we do for updates that
occur inside nested dehydrated trees.

But since this case is expected to be rare, and mainly only happens when
the shell is suspended, an attempt at higher priority would likely end
up suspending again anyway, so it would be wasted effort. Implementing
it this way would also require us to add a new lane especially for root
hydration. For simplicity's sake, we'll immediately switch to client
rendering. In the future, if we find another use case for a root
hydration lane, we'll reconsider.",Andrew Clark,2022-02-16T18:15:25Z
f7f7ed089eb04a3504762425baf1d673701c736b,"Allow suspending in the shell during hydration (#23304)

* Allow suspending in the shell during hydration

Builds on behavior added in #23267.

Initial hydration should be allowed to suspend in the shell. In
practice, this happens because the code for the outer shell hasn't
loaded yet.

Currently if you try to do this, it errors because it expects there to
be a parent Suspense boundary, because without a fallback we can't
produce a consistent tree. However, for non-sync updates, we don't need
to produce a consistent tree immediately — we can delay the commit
until the data resolves.

In #23267, I added support for suspending without a parent boundary if
the update was wrapped with `startTransition`. Here, I've expanded this
to include hydration, too.

I wonder if we should expand this even further to include all non-sync/
discrete updates.

* Allow suspending in shell for all non-sync updates

Instead of erroring, we can delay the commit.

The only time we'll continue to error when there's no parent Suspense
boundary is during sync/discrete updates, because those are expected to
produce a complete tree synchronously to maintain consistency with
external state.",Andrew Clark,2022-02-16T17:47:50Z
27b5699694f20220e0448f0ba3eb6bfa0d3a64ed,"Simplify cache pool contexts (#23280)

The `pooledCache` variable always points to either `root.pooledCache`
or the stack cursor that is used to track caches that were resumed from
a previous render. We can get rid of it by reading from those instead.
This simplifies the code a lot and is harder to mess up, I think.",Andrew Clark,2022-02-11T22:51:57Z
08fce6208ed8bede70fa9291eac8412f20ac56b5,"Gracefully handle empty ""xstyle"" prop values (Part 2) (#23279)

#23190 misses if entry is undefined or null. This fixes this issue.",Luna Ruan,2022-02-11T19:36:36Z
1fb0d06878416d321182ddb4601231982e7433c9,"[Devtools][Transition Tracing] Add Transition callbacks to createRoot (#23276)

- Add the type of transition tracing callbacks
- Add transition tracing callbacks as an option to `createRoot`
- Add transition tracing callbacks on the root
- Add option to pass transition tracing callbacks to createReactNoop",Luna Ruan,2022-02-11T18:15:10Z
a6987bee730052dccdddd4645e15b1ce458fd9a6,"add <TracingMarker> component boilerplate (#23275)

- Add Tracing Marker component type to React exports
- Add reconciler work tag
- Add devtools work tag
- Add boilerplate for the cache to render children

No functionality yet",Luna Ruan,2022-02-11T16:42:55Z
796fff5483925f90db5fe705af6d8b06fce661a5,"Allow suspending outside a Suspense boundary (#23267)

(If the update is wrapped in startTransition)

Currently you're not allowed to suspend outside of a Suspense boundary.
We throw an error:

> A React component suspended while rendering, but no fallback UI
was specified

We treat this case like an error because discrete renders are expected
to finish synchronously to maintain consistency with external state.
However, during a concurrent transition (startTransition), what we can
do instead is treat this case like a refresh transition: suspend the
commit without showing a fallback.

The behavior is roughly as if there were a built-in Suspense boundary
at the root of the app with unstable_avoidThisFallback enabled.
Conceptually it's very similar because during hydration you're already
showing server-rendered UI; there's no need to replace that with
a fallback when something suspends.",Andrew Clark,2022-02-11T16:26:00Z
64223fed82414ee41839e95ebc97df330b2b71ca,"Fix: Multiple hydration errors in same render (#23273)

I made a minor mistake in the original onRecoverableError PR that
only surfaces if there are hydration errors in two different Suspense
boundaries in the same render. This fixes it and adds a unit test.",Andrew Clark,2022-02-10T16:40:00Z
efd8f6442d1aa7c4566fe812cba03e7e83aaccc3,"Resolve default onRecoverableError at root init (#23264)

Minor follow up to initial onRecoverableError PR.

When onRecoverableError is not provided to `createRoot`, the
renderer falls back to a default implementation. Originally I
implemented this with a host config method, but what we can do instead
is pass the default implementation the root constructor as if it were
a user provided one.",Andrew Clark,2022-02-10T15:59:10Z
e0af1aabec3d3ee24f57aaaf9407860463f20213,"Fix wrong context argument to `apply`

The context argument should be the array, not null.

I wrote a test that I'll include in the next PR.",Andrew Clark,2022-02-10T01:49:35Z
9b5e0517b4d203d49063e975a4597e9c666e0212,"Remove deprecated wildcard folder mapping (#23256)

* Remove deprecated folder mapping

Node v16 deprecated the use of trailing ""/"" to define subpath folder
mappings in the ""exports"" field of package.json.

The recommendation is to explicitly list all our exports. We already do
that for all our public modules. I believe the only reason we have a
wildcard pattern is because our package.json files are also used at
build time (by Rollup) to resolve internal source modules that don't
appear in the final npm artifact.

Changing trailing ""/"" to ""/*"" fixes the warnings. See
https://nodejs.org/api/packages.html#subpath-patterns for more info.

Since the wildcard pattern only exists so our build script has access to
internal at build time, I've scoped the wildcard to ""/src/*"". Because
our public modules are located outside the ""src"" directory, this means
deep imports of our modules will no longer work: only packages that are
listed in the ""exports"" field.

The only two affected packages are react-dom and react. We need to be
sure that all our public modules are still reachable. I audited the
exports by comparing the entries to the ""files"" field in package.json,
which represents a complete list of the files that are included in the
final release artifact.

At some point, we should add an e2e packaging test to prevent
regressions; for now, we should have decent coverage because in CI we
run our Jest test suite against the release artifacts.

* Remove umd from exports

Our expectation is that if you're using the UMD builds, you're not
loading them through a normal module system like require or import.
Instead you're probably copying the files directly or loading them from
a CDN like unpkg.",Andrew Clark,2022-02-09T19:37:17Z
274b9fb168eae1b3e5b83db657eb964d365fc45a,"Remove path resolution from internal forks plugin (#23255)

Alternative to #23254

Our build script has a custom plugin to resolve internal module forks.
Currently, it uses require.resolve to resolve the path to a real file
on disk.

Instead, I've updated all the forked module paths to match their
location on disk, relative to the project root, to remove the need to
resolve them in the build script's runtime.

The main motivation is because require.resolve doesn't work with ESM
modules, but aside from that, hardcoding the relative paths is more
predictable — the Node module resolution algorithm is complicated, and
we don't really need its features for this purpose.",Andrew Clark,2022-02-09T16:44:02Z
a3bde7974c48cfa749b18531700f895c86cbad91,"Exclude react-dom/unstable_testing entry point from stable releases (#23258)

* Use consistent naming for unstable_testing entry point

* Exclude the testing build from non-experimental builds except at FB

* FB builds shouldn't contribute to whether we include the npm files

* Exclude exports fields if we delete the files entry

* Move test to no longer be internal so we can test against the build

* Update the bundle artifact names since they've now changed

* Gate import since it doesn't exist",Sebastian Markbåge,2022-02-09T04:12:31Z
5690932765b65998ea9f054f0740002257b7675c,"Add onErrorShell Callback (#23247)

This indicates that an error has happened before the shell completed and
there's no point in emitting the result of this stream.

This is not quite the same as other fatal errors that can happen even
after streaming as started.

It's also not quite the same as onError before onCompleteShell because
onError can be called for an error inside a Suspense boundary before the
shell completes.

Implement shell error handling in Node SSR fixtures

Instead of hanging indefinitely.

Update Browser Fixture

Expose onErrorShell to the Node build

This API is not Promisified so it's just a separate callback instead.

Promisify the Browser Fizz API

It's now a Promise of a readable stream. The Promise resolves when the
shell completes. If the shell errors, the Promise is rejected.",Sebastian Markbåge,2022-02-09T03:38:14Z
0dedfcc681d7963c5d4d138dc8eba69539a56015,"Update the exports field (#23257)

* Add .browser and .node explicit entry points

This can be useful when the automatic selection doesn't work properly.

* Remove react/index

I'm not sure why I added this in the first place. Perhaps due to how our
builds work somehow.

* Remove build-info.json from files field",Sebastian Markbåge,2022-02-09T02:07:26Z
7b541a980dbebc3b44b6c3b0c2806add79786222,"Add exports field to react-dom (#23252)

This configures the exports field for react-dom.

Notably there are some conditions for the /server entry point where we pick
the export based on environments. Most environments now support Web Streams
which is preferred in those environments.

We already do this using the ""browser"" field so the ""browser"" condition
applies here too.

I don't think it's necessary, but I also specified ""worker"" explicitly
since this is for Service Workers and those are often targeted with
Web Pack's ""webworker"" target, which is also what Cloudflare currently
recommends.

I also added ""deno"" but deno is a bit special because this only works if
you run with the node compatibility since otherwise you have to specify
absolute URLs for the imports.",Sebastian Markbåge,2022-02-08T22:19:52Z
9d4e8e84f7fb782385d81ffcdcda73822acf4ad1,"React Native raw event EventEmitter - intended for app-specific perf listeners and debugging (#23232)

* RawEventEmitter: new event perf profiling mechanism outside of Pressability to capture all touch events, and other event types

* sync

* concise notation

* Move event telemetry event emitter call from Plugin to ReactFabricEventEmitter, to reduce reliance on the plugin system and move the emit call further into the core

* Backout changes to ReactNativeEventPluginOrder

* Properly flow typing event emitter, and emit event to two channels: named and catchall

* fix typing for event name string

* fix typing for event name string

* fix flow

* Add more comments about how the event telemetry system works

* Add more comments about how the event telemetry system works

* rename to RawEventTelemetryEventEmitterOffByDefault

* yarn prettier-all

* rename event

* comments

* improve flow types

* renamed file",Joshua Gross,2022-02-08T02:34:01Z
1dece523505390a2e0da5f93db6d0c37287e02c4,"Add back warning with component stack on Hydration mismatch (#23241)

* add back warning

* wrapper errorMock in __DEV__ flag

* lint",salazarm,2022-02-07T22:25:33Z
cd4eb116cf24d5b05107caf67b96c8e0f0cd7dbc,"Revert ""update node.js version for CI (#23236)"" (#23239)

This reverts commit 1d7728bf9daebb7e04f13fc13bb595c12caae46d.",dan,2022-02-07T03:55:57Z
1d7728bf9daebb7e04f13fc13bb595c12caae46d,update node.js version for CI (#23236),sunderls,2022-02-07T01:10:37Z
848e802d203e531daf2b9b0edb281a1eb6c5415d,"Add onRecoverableError option to hydrateRoot, createRoot (#23207)

* [RFC] Add onHydrationError option to hydrateRoot

This is not the final API but I'm pushing it for discussion purposes.

When an error is thrown during hydration, we fallback to client
rendering, without triggering an error boundary. This is good because,
in many cases, the UI will recover and the user won't even notice that
something has gone wrong behind the scenes.

However, we shouldn't recover from these errors silently, because the
underlying cause might be pretty serious. Server-client mismatches are
not supposed to happen, even if UI doesn't break from the users
perspective. Ignoring them could lead to worse problems later. De-opting
from server to client rendering could also be a significant performance
regression, depending on the scope of the UI it affects.

So we need a way to log when hydration errors occur.

This adds a new option for `hydrateRoot` called `onHydrationError`. It's
symmetrical to the server renderer's `onError` option, and serves the
same purpose.

When no option is provided, the default behavior is to schedule a
browser task and rethrow the error. This will trigger the normal browser
behavior for errors, including dispatching an error event. If the app
already has error monitoring, this likely will just work as expected
without additional configuration.

However, we can also expose additional metadata about these errors, like
which Suspense boundaries were affected by the de-opt to client
rendering. (I have not exposed any metadata in this commit; API needs
more design work.)

There are other situations besides hydration where we recover from an
error without surfacing it to the user, or notifying an error boundary.
For example, if an error occurs during a concurrent render, it could be
due to a data race, so we try again synchronously in case that fixes it.
We should probably expose a way to log these types of errors, too. (Also
not implemented in this commit.)

* Log all recoverable errors

This expands the scope of onHydrationError to include all errors that
are not surfaced to the UI (an error boundary). In addition to errors
that occur during hydration, this also includes errors that recoverable
by de-opting to synchronous rendering. Typically (or really, by
definition) these errors are the result of a concurrent data race;
blocking the main thread fixes them by prevents subsequent races.

The logic for de-opting to synchronous rendering already existed. The
only thing that has changed is that we now log the errors instead of
silently proceeding.

The logging API has been renamed from onHydrationError
to onRecoverableError.

* Don't log recoverable errors until commit phase

If the render is interrupted and restarts, we don't want to log the
errors multiple times.

This change only affects errors that are recovered by de-opting to
synchronous rendering; we'll have to do something else for errors
during hydration, since they use a different recovery path.

* Only log hydration error if client render succeeds

Similar to previous step.

When an error occurs during hydration, we only want to log it if falling
back to client rendering _succeeds_. If client rendering fails,
the error will get reported to the nearest error boundary, so there's
no need for a duplicate log.

To implement this, I added a list of errors to the hydration context.
If the Suspense boundary successfully completes, they are added to
the main recoverable errors queue (the one I added in the
previous step.)

* Log error with queueMicrotask instead of Scheduler

If onRecoverableError is not provided, we default to rethrowing the
error in a separate task. Originally, I scheduled the task with
idle priority, but @sebmarkbage made the good point that if there are
multiple errors logs, we want to preserve the original order. So I've
switched it to a microtask. The priority can be lowered in userspace
by scheduling an additional task inside onRecoverableError.

* Only use host config method for default behavior

Redefines the contract of the host config's logRecoverableError method
to be a default implementation for onRecoverableError if a user-provided
one is not provided when the root is created.

* Log with reportError instead of rethrowing

In modern browsers, reportError will dispatch an error event, emulating
an uncaught JavaScript error. We can do this instead of rethrowing
recoverable errors in a microtask, which is nice because it avoids any
subtle ordering issues.

In older browsers and test environments, we'll fall back
to console.error.

* Naming nits

queueRecoverableHydrationErrors -> upgradeHydrationErrorsToRecoverable",Andrew Clark,2022-02-04T15:57:33Z
5318971f50da06fd42763689826acecdb14b4c5e,"Remove logic for multiple error recovery attempts (#23227)

This deletes some internal behavior that was only used by
useOpaqueIdentifier, as an implementation detail: if an update is
scheduled during the render phase, and something threw an error, we
would try rendering again, either until there were no more errors or
until there were no more render phase updates. This was not a publicly
defined behavior — regular render phase updates are accompanied by
a warning.

Because useOpaqueIdentifier has been replaced by useId, and does not
rely on this implementation detail, we can delete this code.",Andrew Clark,2022-02-02T21:14:20Z
3a44621296e866eb86123fa5777975765138e633,"Disable avoidThisFallback support in Fizz  (#23224)

* disable fizz avoidThisFallback support

* true",salazarm,2022-02-01T23:22:04Z
0318ac2c41f7330a211ca7c16c148a6a7c0397f8,Revert 4f5449,Ricky,2022-02-01T20:36:49Z
4f5449eb4b6658225e3b4f063b6786d03d78b82b,Remove main from scheduler `index.js`,Ricky,2022-02-01T20:05:18Z
3f5ff16c1a743bce3f3d772dc5ac63c5fd2dac0a,"[Hydration] Fallback to client render if server rendered extra nodes (#23176)

* rename

* rename

* replace-fork

* rename

* warn in a loop",salazarm,2022-02-01T19:52:01Z
fa816be7f0b28df051d80acfc85156197a9365de,"DevTools: Timeline profiler refactor

Refactor DevTools to record Timeline data (in memory) while profiling. Updated the Profiler UI to import/export Timeline data along with legacy profiler data.

Relates to issue #22529",Brian Vaughn,2022-01-28T18:09:28Z
2ed58eb889b2b2a8a745ec6c73785f8a87034d1f,"Readme fixes (#23187)

* readme: fix contributing guide links",Shivam Jha,2022-01-27T00:13:17Z
3d1e7e72783bbd03d5d28c5e9d682da98d6b426e,"Suppress act() warnings in DevTools tests (#23192)

These warnings are not useful for DevTools tests– and sometimes may mask other, important warnings. This commit disables them.",Brian Vaughn,2022-01-26T20:18:21Z
934f72221df0a006a96e9be70e5dae72aa060ab3,"Gracefully handle empty ""xstyle"" prop values (#23190)",Brian Vaughn,2022-01-26T18:54:44Z
529dc3ce84f0efe99a8be33ff453c09d5801d5ca,"Fix context providers in SSR when handling multiple requests (#23171)

* add failing test for renderToPipeableStream

* Fix context providers in SSR when handling multiple requests. Closes #23089

* Add sibling regression test

Co-authored-by: zhuyi01 <zhuyi01@ke.com>
Co-authored-by: Dan Abramov <dan.abramov@me.com>",Fran Dios,2022-01-24T17:52:51Z
e28a0db224e1c702cf63916eb39284325c439b8b,React DevTools 4.22.1 -> 4.23.0,Brian Vaughn,2022-01-24T14:29:18Z
13036bfbc8ecbcf4451adb7bde397f438caa8607,"DevTools should not crawl unmounted subtrees when profiling starts (#23162)

Previously we crawled all subtrees, even not-yet-mounted ones, to initialize context values. This was not only unecessary, but it also caused an error to be thrown. This commit adds a test and fixes that behavior.",Brian Vaughn,2022-01-21T16:05:49Z
ca143e18d83dcc57d7133d8859e0fc06df39b9f0,Prettier,Andrew Clark,2022-01-21T14:59:11Z
26baf6a174d97bf4821c54e0083e69422cb87f45,styles: replace Array.isArray with module isArray (#23154),Behnam Mohammadi,2022-01-21T14:33:00Z
7bee1379b740896c5e6a91c2e95d4fe8bb557105,"Filter out deleted components that are added to the updaters list (#23156)

There was a bug that occurred when a destroy effect is called that causes an update. The update would be added to the updaters list even though the fiber that was calling the destroy effect was unmounted and no longer exists. This PR:

* Adds a patch to Devtools to filter out all in the update list that aren't in the fiberToIDMap (which contains all fibers currently on screen)",Luna Ruan,2022-01-20T21:29:43Z
a63708432082d480d422b0c93de5403611d9ce38,"DevTools: Add Jest snapshot serializer for number formatting (#23139)

Numbers in JavaScript can have precision issues due to how they are encoded. This shows up in snapshot tests sometimes with values like 0.0009999999999999992, which makes the tests hard to read and visually diff.

This PR adds a new snapshot serializers which clamps numbers at 3 decimal points (e.g. the above number 0.0009999999999999992 is serialized as 0.001). This new serializer does not impact non-numeric values, integers, and special numbers like NaN and Infinity.",Brian Vaughn,2022-01-20T20:52:17Z
505c15c9ef40556b72ddf5cb3a78a6b2dc56908e,"Don't inject timeline hooks unless React supports profiling (#23151)

This gives DevTools a way to detect whether the current React renderer supports Timeline profiling. (Version alone isn't enough to detect this, neither is general profiling support– since these two are controlled by different feature flags.)",Brian Vaughn,2022-01-20T16:11:26Z
e12a9dfc96be12ea8e5c759986041ee5308e8e06,"Fix production-only updateSyncExternalStore() crash when doing setState in render (#23150)

* Update ReactFiberHooks.new.js

* Add regression test + replace-fork

* Prettier

Co-authored-by: Dan Abramov <dan.abramov@me.com>",Douglas Armstrong,2022-01-20T15:22:17Z
3fba8d64f12ae04af1b7df88604c49b8ec410b76,Include other build types when building for CodeSandbox CI (#23152),Ives van Hoorne,2022-01-20T15:20:02Z
e4894025570ebbe5955b4e4b226dd900e17c93e7,Warn when a callback ref returns a function (#23145),Dan Abramov,2022-01-20T15:18:38Z
05a55a4b09b7b7c8f63778fb8252a001ca66f8d7,"Fix change events for custom elements (#22938)

* Bypass react event system for custom elements

* Going to try fixing react event system instead

* finally got it to call onChange, but perhaps too many times

* update test

* Removed ReactDOMComponent changes, now works but still doubles for bubbles

* Maybe i should only support bubbling events

* removed some old stuff

* cleaned up changeeventplugin stuff

* prettier, lint

* removed changeeventplugin stuff

* remove unneeded gate for onInput test

* Go back to using ChangeEventPlugin

* Add input+change test

* lint

* Move logic to shouldUseChangeEvent

* use memoizedProps instead of pendingProps

* Run form control behavior before custom element behavior

* add bubbling test

* forgot to append container to body

* add child event target test

* expand <input is=...> test expectations

* Make tests more realistic

* Add extra test

* Add missing gating

* Actually fix gating

Co-authored-by: Dan Abramov <dan.abramov@me.com>",Joey Arhar,2022-01-19T19:34:07Z
d8cfeaf221563f3828fe7bf07833f3824accfa39,"Fix context propagation for offscreen/fallback trees (#23095)

* Failing test for Context.Consumer in suspended Suspense

See issue #19701.

* Fix context propagation for offscreen trees

* Address nits

* Specify propagation root for Suspense too

* Pass correct propagation root

* Harden test coverage

This test will fail if we remove propagation, or if we propagate with a root node like fiber.return or fiber.return.return. The additional DEV-only error helps detect a different kind of mistake, like if the thing being passed hasn't actually been encountered on the way up. However, we still leave the actual production loop to check against null so that there is no way we loop forever if the propagation root is wrong.

* Remove superfluous warning

Co-authored-by: overlookmotel <theoverlookmotel@gmail.com>",Dan Abramov,2022-01-19T16:30:34Z
d5048247804ad3e6bb8e59dd311a4470affd7811,Enable scheduling profiler flag in react-dom/testing builds (#23142),Brian Vaughn,2022-01-19T16:20:42Z
790b5246f691adafbf4b6a4b3fe2e6cc1370c43e,"Fix setState ignored in Safari when iframe is added to DOM in the same commit (#23111)

* Fix setState being ignored in Safari

* Add a regression test

* Add comment",Dan Abramov,2022-01-18T18:25:34Z
51947a14bb24bd151f76f6fc0acdbbc404de13f7,"Refactored how React/DevTools log Timeline performance data (#23102)

Until now, DEV and PROFILING builds of React recorded Timeline profiling data using the User Timing API. This commit changes things so that React records this data by calling methods on the DevTools hook. (For now, DevTools still records that data using the User Timing API, to match previous behavior.)

This commit is large but most of it is just moving things around:

* New methods have been added to the DevTools hook (in ""backend/profilingHooks"") for recording the Timeline performance events.
* Reconciler's ""ReactFiberDevToolsHook"" has been updated to call these new methods (when they're present).
* User Timing method calls in ""SchedulingProfiler"" have been moved to DevTools ""backend/profilingHooks"" (to match previous behavior, for now).
* The old reconciler tests, ""SchedulingProfiler-test"" and ""SchedulingProfilerLabels-test"", have been moved into DevTools ""TimelineProfiler-test"" to ensure behavior didn't change unexpectedly.
* Two new methods have been added to the injected renderer interface: injectProfilingHooks() and getLaneLabelMap().

Relates to #22529.",Brian Vaughn,2022-01-13T19:55:54Z
c09596cc6021e1f9f8a88179add93f80fc07823b,"Add RN_FB bundles for react-is (#23101)

* Add RN_FB bundles for react-is

* Update packaging.js

* Add ReactNativeInternalFeatureFlags to externals",Moti Zilberman,2022-01-12T21:53:50Z
a87adefecdff672d5261e93945c227ad72c5444c,"Allow functions to be passed to custom element setters (#23042)

This is part of the new custom element features that were implemented
here:
https://github.com/facebook/react/commit/24dd07bd269590ee5024b7f0f1906887d256ea86

When a custom element has a setter for a property and passes the `in`
heuristic, the value passed to the react property should be assigned
directly to the custom element's property, regardless of the type of the
value. However, it was discovered that this isn't working with
functions. This patch makes it work with functions.

Fixes https://github.com/facebook/react/issues/23041",Joey Arhar,2022-01-12T20:12:07Z
9a7e6bf0d0cf08114b74c9fe45c06e60a5e496e4,"Add --no-show-signature to ""git show"" commands (#23038)

* Add --no-show-signature to ""git show"" commands.

This fixes errors if the user has configured the following in their ~/.gitconfig:
[log]
showSignature = true

* yarn prettier-all",Stefan Sundin,2022-01-11T17:14:08Z
2f26eb85d657a08c21edbac1e00f9626d68f84ae,"Add exports field to react-refresh's package.json (#23087)

* Add exports field to react-refresh's package.json

* Update package.json

* Add runtime to exports",Gray Zhang,2022-01-11T16:48:09Z
811634762a389bce81bdc145f84bdf247910b8dd,"add enableTransitionTracing feature flag (#23079)

This PR adds the enableTransitionTracing feature flag",Luna Ruan,2022-01-10T20:32:40Z
fe905f152f1c9740279e31ce4478a5b8ca75172e,Update package.json (#22954),Jack Works,2022-01-07T20:59:47Z
fe419346da0de40858d5a5c5992c29a1e0b79bb5,Console message fixed for devtools (#23067),Andrew Covenant,2022-01-05T16:45:45Z
42c30e8b122841d7fe72e28e36848a6de1363b0c,"Correct typing errors detected in several files (#22965)

* Correct spelling errors in several files
* Correct typos in devtools-shared package files",Borja Paz Rodríguez,2022-01-04T15:30:07Z
9724e180045806480d7ef2a50e6a9d70fea98252,Run DevTools e2e tests on Circle CI (#23019),Brian Vaughn,2022-01-04T15:28:03Z
3dc41d8a2590768a6ac906cd1f4c11ca00417eee,fix: parseExportNamesInto specifiers typo (#22537),btea,2021-12-23T18:08:56Z
20212349add45c81fe5ab4760214eabc3d91077f,Fix variable name (#23021),BIKI DAS,2021-12-23T13:35:54Z
a8e9bbe0fe19266e3061b266aabc0269f332a03c,Made the variable name more meaningful (#23017),BIKI DAS,2021-12-22T20:58:06Z
bcd24a6706cd802e49e9c0a509a42893ddceca7b,"DevTools: Only show StrictMode badge on root elements (#23012)

* DevTools: Only show StrictMode badge on root elements

Showing an inline non-compliance badge for every element in the tree is noisy. This commit changes it so that we only show inline icons for root elements (although we continue to show an icon for inspected elements regardless).",Brian Vaughn,2021-12-21T20:26:42Z
bd0a5dd6826ff7b3ab889ed0bd55dacc2f69a47e,"#22988 - Fix Bug: @license header in React 18 bundles contains vundefined (#23004)

* Fix Bug: @license header in React 18 bundles contains vundefined
* Remove React version from the header comment",Vitalie,2021-12-21T17:27:59Z
a4ead704ba1df8718d4866a23ac25e78f8ea901a,"Use ReactDOM Test Selector API in DevTools e2e tests (#22978)

Builds on top of the existing Playwright tests to plug in the test selector API: https://gist.github.com/bvaughn/d3c8b8842faf2ac2439bb11773a19cec

My goals in doing this are to...
1. Experiment with the new API to see what works and what doesn't.
2. Add some test selector attributes (and remove DOM-structure based selectors).
3. Focus the tests on DevTools itself (rather than the test app).

I also took this opportunity to add a few new test cases– like named hooks, editable props, component search, and profiling- just to play around more with the Playwright API.

Relates to issue #22646",Brian Vaughn,2021-12-21T16:58:04Z
ceee524a8f45b97c5fa9861aec3f36161495d2e1,"Remove unnecessary clearContainer call (#22979)

This was added when we added error recovery for hydration errors. However,
when the fix up pass happens later on, it'll still call clearContainer in
the commit phase. So this call is unnecessary.",Sebastian Markbåge,2021-12-17T17:40:39Z
aa8f2bdbce0aa8d5128461190f7ea40f891cb78e,"Refactored DevTools test shell for e2e (#22968)

Fixes a regression in the e2e target and makes things easier (hopefully) going forward when adding new e2e tests.",Brian Vaughn,2021-12-15T16:42:59Z
e59233aa854fbeabe4698b40ef95da8e4c69ed6c,react-devtools-inline README updates (#22967),Brian Vaughn,2021-12-15T15:44:14Z
5b69c94eed8efab55ee60c7f10704ab832d47a70,React DevTools 4.22.0 -> 4.22.1 (#22962),Brian Vaughn,2021-12-15T04:52:50Z
b10c3780246c82d4b9770309dec44070a2003ad8,Revert changes to react-devtools-inline Webpack config from PR #22760 (#22961),Brian Vaughn,2021-12-15T04:45:46Z
3f45b681414a64c7034fab7f5e7bb4bb8df60f9c,Re-added deleted files array to react-devtools package.json (#22960),Brian Vaughn,2021-12-15T04:28:57Z
cd1a3e9b556ab1eb8009676a38857aae7585dc8b,"Build both a partial renderer and fizz renderer of the legacy API for FB (#22933)

This lets us test how the new architecture performs without comparing it to
other infra changes related to streaming.

I renamed the streaming one to ReactDOMServerStreaming so the references
in www need to be updated.

I'll open an adhoc sync with just those files.",Sebastian Markbåge,2021-12-15T00:19:19Z
75d34aa083fad0d6bc3ecebe089d00c7ca26ecdc,Updated DevTools changelog,Brian Vaughn,2021-12-14T21:50:17Z
0229baee21e8e6ecef04d4d76c41af84dfcca8bc,React DevTools 4.21.0 -> 4.22.0 (#22951),jstejada,2021-12-14T19:19:21Z
911f92a44da540b3c60779b28745d050ddd21679,"DevTools: Support mulitple DevTools instances per page (#22949)

This is being done so that we can embed DevTools within the new React (beta) docs.

The primary changes here are to `react-devtools-inline/backend`:
* Add a new `createBridge` API
* Add an option to the `activate` method to support passing in the custom bridge object.

The `react-devtools-inline` README has been updated to include these new methods.

To verify these changes, this commit also updates the test shell to add a new entry-point for multiple DevTools.

This commit also replaces two direct calls to `window.postMessage()` with `bridge.send()` (and adds the related Flow types).",Brian Vaughn,2021-12-14T17:16:16Z
575791925697c7e23966e6934b577e69aef736f3,DevTools: Correctly log errors reported from the store (#22950),jstejada,2021-12-13T17:02:14Z
a049aa015563c2e50f44214c28d186c0bae09ba6,[DevTools] Log errors occurring or reported to the frontend (#22948),jstejada,2021-12-13T16:38:45Z
3b3daf5573efe801fa3dc659020625b4023d3a9f,"Advocate for StrictMode usage within Components tree (#22886)

Adds the concept of subtree modes to DevTools to bridge protocol as follows:
1. Add-root messages get two new attributes: one specifying whether the root is running in strict mode and another specifying whether the root (really the root's renderer) supports the concept of strict mode.
2. A new backend message type (TREE_OPERATION_SET_SUBTREE_MODE). This type specifies a subtree root (id) and a mode (bitmask). For now, the only mode this message deals with is strict mode.

The DevTools frontend has been updated as well to highlight non-StrictMode compliant components.

The changes to the bridge protocol require incrementing the bridge protocol version number, which will also require updating the version of react-devtools-core backend that is shipped with React Native.",Brian Vaughn,2021-12-10T16:05:18Z
2c1cf5618a24238136e3bd6139fb7f359dffe0f9,DevTools should inject itself for XHTML pages too (not just HTML) (#22932),Brian Vaughn,2021-12-09T20:32:11Z
f2a59df48bec2352a4dd3b5415282a4ea240a4f8,"Remove unstableAvoidThisFallback from OSS (#22884)

* avoidThisFallbackFlag

* avoidThisFallback flag

* missed a spot

* rm gating",salazarm,2021-12-08T16:21:02Z
d3001fb6f1bd75c9872efb49195bff990e4eed49,"Use `next` as prerelease label

Instead of `rc`, which is redundant since it's in the next version
number already.",Andrew Clark,2021-12-08T15:57:13Z
29d2bef9f5d21187b4ae71608739fe490c0d15cb,Bump beta -> rc,Andrew Clark,2021-12-08T15:51:17Z
24dd07bd269590ee5024b7f0f1906887d256ea86,"Add custom element property support behind a flag (#22184)

* custom element props

* custom element events

* use function type for on*

* tests, htmlFor

* className

* fix ReactDOMComponent-test

* started on adding feature flag

* added feature flag to all feature flag files

* everything passes

* tried to fix getPropertyInfo

* used @gate and __experimental__

* remove flag gating for test which already passes

* fix onClick test

* add __EXPERIMENTAL__ to www flags, rename eventProxy

* Add innerText and textContent to reservedProps

* Emit warning when assigning to read only properties in client

* Revert ""Emit warning when assigning to read only properties in client""

This reverts commit 1a093e584ce50e2e634aa743e04f9cb8fc2b3f7d.

* Emit warning when assigning to read only properties during hydration

* yarn prettier-all

* Gate hydration warning test on flag

* Fix gating in hydration warning test

* Fix assignment to boolean properties

* Replace _listeners with random suffix matching

* Improve gating for hydration warning test

* Add outerText and outerHTML to server warning properties

* remove nameLower logic

* fix capture event listener test

* Add coverage for changing custom event listeners

* yarn prettier-all

* yarn lint --fix

* replace getCustomElementEventHandlersFromNode with getFiberCurrentPropsFromNode

* Remove previous value when adding event listener

* flow, lint, prettier

* Add dispatchEvent to make sure nothing crashes

* Add state change to reserved attribute tests

* Add missing feature flag test gate

* Reimplement SSR changes in ReactDOMServerFormatConfig

* Test hydration for objects and functions

* add missing test gate

* remove extraneous comment

* Add attribute->property test",Joey Arhar,2021-12-08T15:11:42Z
72e48b8e16cab83e22b5cf24ac73499a48aba23c,"Fix: Don't skip writing updated package.json

Another fix to previous commit. The special case for
use-sync-external-store still needs to write out the updated
package.json, because we also use that branch to update the
version field.",Andrew Clark,2021-12-08T07:55:46Z
e39b2c8998a458a772b9284d0fb9f6a5ccdda914,"Fix peer deps for use-sync-external-store

Merged last PR too quickly",Andrew Clark,2021-12-08T07:44:12Z
ec78b135fb0b6184bc42e11b15e4b492764ed0f3,"Don't override use-sync-external-store peerDeps (#22882)

Usually the build script updates transitive React dependencies so that
they refer to the corresponding release version.

For use-sync-external-store, though, we also want to support older
versions of React, too. So the normal behavior of the build script
isn't sufficient.

For now, to unblock, I hardcoded a special case, but we should consider
a better way to handle this in the future.",Andrew Clark,2021-12-08T07:26:12Z
06f403481fe1f30d6952ad60ecd759b410962926,"Add CI job to check npm dependencies (#22881)

Checks that if one React package depends on another, the current
version satisfies the given dependency range.

That way we don't forget to bump dependencies when we release a
new version.",Andrew Clark,2021-12-08T07:09:00Z
ad607469c58d337d23d05e3be73087d370f7d715,"StyleX plug-in for resolving atomic styles to values for props.xstyle (#22808)

Adds the concept of ""plugins"" to the inspected element payload. Also adds the first plugin, one that resolves StyleX atomic style names to their values and displays them as a unified style object (rather than a nested array of objects and booleans).

Source file names are displayed first, in dim color, followed by an ordered set of resolved style values.

For builds with the new feature flag disabled, there is no observable change.

A next step to build on top of this could be to make the style values editable, but change the logic such that editing one directly added an inline style to the item (rather than modifying the stylex class– which may be shared between multiple other components).",Brian Vaughn,2021-12-08T01:04:12Z
5041c37d27ee8f80bf152951d20bf861f817c7c6,"Remove hydrate option from createRoot (#22878)

* remove hydrate: true option

* remove missed comment

* lint

* warning

* circumvent flow",salazarm,2021-12-07T21:10:00Z
c7917fe76982c499c81be9571de44fe1293ac893,"Test showing that a mismatch at the root recovers with client render but shows loading state (#22873)

* rm console.log

* gate test

* move test

* show fallback state",salazarm,2021-12-06T17:36:02Z
12bffc78d8d9e0ee8d494849f20611fe15d598ef,[DevTools] Emit new event when DevTools connects in standalone app (#22848),jstejada,2021-12-06T13:49:15Z
3f9480f0f5ceb5a32a3751066f0b8e9eae5f1b10,enable continuous replay flag (#22863),salazarm,2021-12-04T00:35:20Z
8b8817845a8efd8cf53be395fafbb1d0f62c4368,"Timeline search (#22799)

Refactor SearchInput component (used in Components tree) to be generic DevTools component with two uses: ComponentSearchInput and TimelineSearchInput.

Refactored Timeline Suspense to more closely match other, newer Suspense patterns (e.g. inspect component, named hooks) and colocated Susepnse code in timelineCache file.

Add search by component name functionality to the Timeline. For now, searching zooms in to the component measure and you can step through each time it rendered using the next/previous arrows.",Brian Vaughn,2021-12-03T21:23:48Z
4729ff6d1f191902897927ff4ecd3d1f390177fa,"Implement identifierPrefix option for useId (#22855)

When an `identifierPrefix` option is given, React will add it to the
beginning of ids generated by `useId`.

The main use case is to avoid conflicts when there are multiple React
roots on a single page.

The server API already supported an `identifierPrefix` option. It's not
only used by `useId`, but also for React-generated ids that are used to
stitch together chunks of HTML, among other things. I added a
corresponding option to the client.

You must pass the same prefix option to both the server and client.
Eventually we may make this automatic by sending the prefix from the
server as part of the HTML stream.",Andrew Clark,2021-12-03T01:49:43Z
71d16750c528ad902e73e2ecb9fc05a40314bb3f,"Replay capture phase for continuous events (#22856)

Co-authored-by: Dan Abramov <dan.abramov@me.com>

Co-authored-by: Marco Salazar <salazarm@fb.com>",Dan Abramov,2021-12-02T14:33:44Z
44f99d75fa4528b82810edd03eccf82f7ea21ea0,"Track currently replaying event (#22853)

* Track currently replaying event

Co-authored-by: Dan Abramov <dan.abramov@me.com>

* Add warnings

Co-authored-by: Marco Salazar <salazarm@fb.com>",Dan Abramov,2021-12-02T14:11:21Z
e737ea965573930eabc97bafea673b7f29b46e79,"Fork dispatch function based on the flag (#22852)

* Fork function based on a flag

* Prune false branches

Co-authored-by: Marco Salazar <salazarm@fb.com>",Dan Abramov,2021-12-02T14:02:49Z
ea5a413602e6a3beec9ba929930ebb73eeee8da0,"Decouple dispatching from attemptToDispatchEvent (#22851)

* Decoupled dispatching from attemptToDispatchEvent

* Remove unnecessary field

It is unnecessary because it's only true when retval is null.",Dan Abramov,2021-12-02T13:55:57Z
ed00d2c3d8e39c214bb749dc8a520a4a695c19fd,Remove unused flag (#22854),Dan Abramov,2021-12-02T02:25:32Z
a65ceef370f978e776c2f3356a8baae22369e698,DevTools: Log version in internal logger (#22825),jstejada,2021-11-30T15:48:46Z
0cc724c777930438d92727803826a44ec97bcc55,update ReactFlightWebpackPlugin to be compatiable with webpack v5 (#22739),Michelle Chen,2021-11-25T22:43:22Z
ca106a02d1648f4f0048b07c6b88f69aac175d3c,"Add `imageSizes` and `imageSrcSet` to know props (#22550)

* feat(react-dom): Add `imageSrcSet`

* feat(react-dom): Add `imageSizes`",Sebastian Silbermann,2021-11-25T01:49:52Z
cbc484b5ae8cb683aef5ee61fac468679e9bb2aa,"Update attribute-behavior fixture (#22522)

* Fix missing key warning

* Add build instructions

* Update interpretation now that React 17 is latest stable and 18 is next

* Ignore ReactDOM.render deprecation warning

* Ensure a server implementation with `renderToString` is used

* Update AttributeTableSnapshot

* Ensure Popover doesn't overflow",Sebastian Silbermann,2021-11-25T01:37:09Z
4e6eec69be632c0c0177c5b1c8a70397d92ee181,"fix: document can be `null`, not just `undefined` (#22695)",Simen Bekkhus,2021-11-24T20:51:15Z
c1220ebdde506de91c8b9693b5cb67ac710c8c89,treat empty string as null (#22807),salazarm,2021-11-23T23:40:10Z
09d9b17757d538c43fe872a5a0cb72a72c79c897,Update deprecated features in ESLint configuration files. (#22767),Esteban,2021-11-23T22:53:26Z
a04795c89cfca8b4d48b3b28be82d53c20d585eb,Ensure react-is version used for resolution for playwright is installed (#22813),jstejada,2021-11-23T18:29:47Z
149b420f63903bcfb99455337a376c75384f86af,"Ensure devtools e2e test use a compatible react-is version (#22790)

* Update lockfile by running `yarn install`

* Ensure devtools e2e test use a compatible react-is version",Sebastian Silbermann,2021-11-19T15:18:02Z
bddbfb86d858e50695f9f4c3e6f52c663a050069,"Revert ""Fix Node package.json ./ exports deprecation warning (#22783)"" (#22792)

This reverts commit 8edeb787b001f1b989c812aad6ac04f9d67a41dc.",Sebastian Silbermann,2021-11-19T15:04:13Z
b831aec48f2d54913b836d2288b62b7eee9fbca1,chore(fast-refresh): double check wasMounted (#22740),anc95,2021-11-18T21:15:07Z
b32b67706f1214b730e4203981e5aefe04d473e5,"Migrate from CLIEngine to the new ESLint class. (#22756)

* Migrate from CLIEngine to the new ESLint class.

* fix output property",Esteban,2021-11-18T21:12:18Z
8edeb787b001f1b989c812aad6ac04f9d67a41dc,Fix Node package.json ./ exports deprecation warning (#22783),Rin Arakaki,2021-11-18T21:11:30Z
fdc1d617a44cb9015c3bac3a6341b5af3311faf6,"Flag for client render fallback behavior on hydration mismatch (#22787)

* Add flag for new client-render fallback behavior on hydration mismatch

* gate test

* gate tests too

* fix test gating",salazarm,2021-11-18T13:16:09Z
f320ef88f51fbdc5aba38bdf07108678a84f7339,fix(typo): Esacpe -> Escape (#22780),hiro,2021-11-16T21:43:25Z
aa19d569b22ae447be18e768c97600656c080993,"Add test selectors to experimental build (#22760)

This change adds a new ""react-dom/unstable_testing"" entry point but I believe its contents will exactly match ""react-dom/index"" for the stable build. (The experimental build will have the added new selector APIs.)",Brian Vaughn,2021-11-16T21:27:10Z
520ffc77a399cc1fd785929b42a84f3d1c8bd106,Use globalThis if possible for native fetch in browser build (#22777),Jiachi Liu,2021-11-16T21:24:54Z
afbc2d08f4dabf00222e9561344b65e51d6ed190,Remove unused react-internal/invariant-args ESLint rule. (#22778),Esteban,2021-11-16T20:11:20Z
ca94e268025104e7844edc1fbe6e7b2b10d54e05,Remove 'packages/shared/invariant.js' (#22779),Esteban,2021-11-16T20:11:11Z
4ff5f5719b348d9d8db14aaa49a48532defb4ab7,"Move unstable_scheduleHydration to ReactDOMHydrationRoot (#22455)

* move unstable_scheduleHydration to ReactDOMHydrationRoot

* move definition of schedule hydration

* fix test?

* prototype

* fix test

* remove gating because unstable_scheduleHydration is no longer gated through index.stable.js because its exposed through ReactDOMHydrationRoot instead of the ReactDOM package

* remove another gating",salazarm,2021-11-15T22:15:01Z
ee8f146a61e628ba8da5bff414b0b1142b167426,Proof of Concept for E2E tests using playwright (#22754),Abhay Gupta,2021-11-15T21:44:45Z
96ca8d9155043e4636308edd6501fde67ce40aa5,Allow publishing with `beta` tag (#22768),Andrew Clark,2021-11-15T18:43:40Z
a52d76b877cbb7d62f914d32dfede1275da18337,Bump 18 from alpha to beta (#22766),Andrew Clark,2021-11-15T18:26:30Z
83564712b6e2907dcffdbf5f99b4713cf6c950de,"Move SuspenseList to experimental channel (#22765)

There's more work to be done to implement this correctly on the server,
so we're going to wait to release it until an 18.x minor.",Andrew Clark,2021-11-15T18:12:56Z
489b4bdcca00ddc808276a230f334c575bce9c84,"Fixed typos (#22763)

* Fixed typos

* Update ReactFiberWorkLoop.new.js

* Update ReactFiberWorkLoop.old.js",MalikIdreesHasanKhan,2021-11-15T17:31:35Z
d4144e6e54276362b05f4319bb38939aff37bdaa,"fix : grammatical typo for test description (#22764)

* fix : grammatical typo for test description

* fix linting issues",Brijesh Prasad,2021-11-15T16:44:48Z
200415c91c724e408c055445e8b99ac0f0c52dc4,fix typos (#22288),Mert Ciflikli,2021-11-15T15:59:35Z
0b329511b9aaff7e27990fc16354db8ea0a16de8,chore: fix comment typo (#22657),Han Han,2021-11-15T15:58:30Z
e6f60d2adda7d4ebf6631eb8166572c3706d52a3,fix typos (#22715),180909,2021-11-15T15:58:21Z
f86cd5408b3154b3aa55ca6d9d86aa3091b7b2e5,devtools: dont restore profiling data if we're profling (#22753),Sebastian Silbermann,2021-11-15T15:46:17Z
c0c71a868560b3042847722659579418bfe2d7e1,Re-enable useMutableSource in internal RN (#22750),Ricky,2021-11-12T21:54:59Z
cb11155c86e756838a97679fb04c3256de101943,Add runtime type checks around module boundary code (#22748),Brian Vaughn,2021-11-12T15:03:41Z
56efc65e5857abe22062c9506207abc35c9532d1,"DevTools should properly report re-renders due to (use)context changes (#22746)

Note that this only fixes things for newer versions of React (e.g. 18 alpha). Older versions will remain broken because there's not a good way to read the most recent context value for a location in the tree after render has completed. This is because React maintains a stack of context values during render, but by the time DevTools is called– render has finished and the stack is empty.",Brian Vaughn,2021-11-11T19:22:22Z
a44a7a2a3f8d7b24ddf5d0c6efeb6127e6b395c3,Filter empty commits (all Fibers bailed out) from Profiler (#22745),Brian Vaughn,2021-11-11T15:35:16Z
e0aa5e205feee53043ce1ae8726fe732866e6ea7,"Add Scheduling Profiler GK link to Timeline UI for FB build (#22730)

This is a constant source of confusion for FB engineers trying to figure out why Chrome profiling data does not have any React marks.",Brian Vaughn,2021-11-09T21:10:48Z
a04f13d299230d1d987548f07f4506038d7367b1,react-refresh@0.11.0,Dan Abramov,2021-11-09T20:23:32Z
ff9897d23ec713d4e0c802386dffe4024916749e,"[React Refresh] support typescript namespace syntax (#22621)

* [React Refresh] support typescript namespace syntax

* [React Refresh] handle nested namespace

Co-authored-by: Wang Yilin <wang_yil@worksap.co.jp>",irinakk,2021-11-09T20:22:19Z
0ddd69d1226c660ee4930b0dce7860b706e548bc,"Throw on hydration mismatch and force client rendering if boundary hasn't suspended within concurrent root (#22629)

* Throw on hydration mismatch

* remove debugger

* update error message

* update error message part2...

* fix test?

* test? :(

* tests 4real

* remove useRefAccessWarning gating

* split markSuspenseBoundary and getNearestBoundary

* also assert html is correct

* replace-fork

* also remove client render flag on suspend

* replace-fork

* fix mismerge????",salazarm,2021-11-09T18:40:50Z
c3f34e4beb67a4ddd85a9456ebc9013d123aa6ee,eslint-plugin-react-hooks@4.3.0,Dan Abramov,2021-11-09T13:58:55Z
827021c4e30d632f48cdaa41b2e6b2da8719eb8d,Changelog for eslint-plugin-react-hooks@4.3.0,Dan Abramov,2021-11-09T13:55:27Z
2b77ab26adc2601dc223ede75ff4d19bc19c8684,fix(devtools): accept json file in import fileinput (#22717),Yash Joshi,2021-11-08T21:35:35Z
2db6d6a5a7a2ecf74610d5a55732d6753b15b836,fix(devtools): expose css vars to reach-ui portal components (#22716),Yash Joshi,2021-11-08T20:17:22Z
99a73ac670ce8d71ae8a690e9795d35cbdfa20b6,Timeline: Improved snapshot view (#22706),Brian Vaughn,2021-11-08T17:28:33Z
327d5c48454aaee0d78fa69b7ef96a14605bf93b,Delete unused Circle CI scripts. (#22710),Esteban,2021-11-06T14:16:49Z
ee069065db449194a62a5c0dc2f8f6b61fa5e1b8,"devtools: Display root type for root updates in ""what caused this update?"" (#22599)",Sebastian Silbermann,2021-11-05T15:58:35Z
54f6ae9b1c0489784f6a95bbe26ffec31816d74a,Fix small typos (#22701),Konstantin Popov,2021-11-04T23:49:06Z
13455d26d1904519c53686d6f295d4eb50b6c2fc,"Cleaned up remaining ""scheduling profiler"" references in DevTools (#22696)",Brian Vaughn,2021-11-04T15:40:45Z
8ca3f567bc3ed56c2101e5c51f968a5339f63093,Fix module-boundary wrappers (#22688),Brian Vaughn,2021-11-04T14:40:35Z
1bf6deb865052111474f2988bb831de13d09c560,Renamed packages/react-devtools-scheduling-profiler to packages/react-devtools-timeline (#22691),Brian Vaughn,2021-11-04T14:02:06Z
51c558aeb6f5b0ae639d975fd4044007a73115c1,"Rename (some) ""scheduling profiler"" references to ""timeline"" (#22690)",Brian Vaughn,2021-11-03T19:10:29Z
255221c86930e31c144713eb466bf0a00ab8fd7e,"[DevTools] Add open in editor for fb (#22649)

Co-authored-by: Brian Vaughn <bvaughn@fb.com>",EzzAk,2021-11-03T15:27:30Z
00ced1e2b7610543a519329a76ad0bfd12cd1c32,"Fix useId in strict mode (#22681)

* Fix: useId in strict mode

In strict mode, `renderWithHooks` is called twice to flush out
side effects.

Modying the tree context (`pushTreeId` and `pushTreeFork`) is effectful,
so before this fix, the tree context was allocating two slots for a
materialized id instead of one.

To address, I lifted those calls outside of `renderWithHooks`. This
is how I had originally structured it, and it's how Fizz is structured,
too. The other solution would be to reset the stack in between the calls
but that's also a bit weird because we usually only ever reset the
stack during unwind or complete.

* Add test for render phase updates

Noticed this while fixing the previous bug",Andrew Clark,2021-11-03T00:59:17Z
9fb3442250cf198782a08024195fcc5402479160,Fix DevTools advanced tooltip display conditional check (#22669),Brian Vaughn,2021-11-02T15:02:45Z
3fcd81dd1c3cd1413b72ae2919bc8312787f8f58,Improved workers filenames in devtools-inline (#22676),Abhay Gupta,2021-11-02T14:30:37Z
5cccacd131242bdea2c2fe4b33fac50d2e3132b4,Upgrade useId to alpha channel (#22674),Andrew Clark,2021-11-01T22:26:42Z
75f3ddebfa0d9885ce8df42571cf0c09ad6c0a3b,"Remove experimental useOpaqueIdentifier API (#22672)

useId is the updated version of this API.",Andrew Clark,2021-11-01T22:02:39Z
8c4a05b8fb83624d5442f74138e7f263d666fd5d,Remove @flow pragma comment from module registration start/stop templates (#22670),Brian Vaughn,2021-11-01T21:46:09Z
ebf9ae8579230e7b1ed0b1d243e1cf802f56938b,"useId (#22644)

* Add useId to dispatcher

* Initial useId implementation

Ids are base 32 strings whose binary representation corresponds to the
position of a node in a tree.

Every time the tree forks into multiple children, we add additional bits
to the left of the sequence that represent the position of the child
within the current level of children.

    00101       00010001011010101
    ╰─┬─╯       ╰───────┬───────╯
  Fork 5 of 20       Parent id

The leading 0s are important. In the above example, you only need 3 bits
to represent slot 5. However, you need 5 bits to represent all the forks
at the current level, so we must account for the empty bits at the end.

For this same reason, slots are 1-indexed instead of 0-indexed.
Otherwise, the zeroth id at a level would be indistinguishable from
its parent.

If a node has only one child, and does not materialize an id (i.e. does
not contain a useId hook), then we don't need to allocate any space in
the sequence. It's treated as a transparent indirection. For example,
these two trees produce the same ids:

<>                          <>
  <Indirection>               <A />
    <A />                     <B />
  </Indirection>            </>
  <B />
</>

However, we cannot skip any materializes an id. Otherwise, a parent id
that does not fork would be indistinguishable from its child id. For
example, this tree does not fork, but the parent and child must have
different ids.

<Parent>
  <Child />
</Parent>

To handle this scenario, every time we materialize an id, we allocate a
new level with a single slot. You can think of this as a fork with only
one prong, or an array of children with length 1.

It's possible for the the size of the sequence to exceed 32 bits, the
max size for bitwise operations. When this happens, we make more room by
converting the right part of the id to a string and storing it in an
overflow variable. We use a base 32 string representation, because 32 is
the largest power of 2 that is supported by toString(). We want the base
to be large so that the resulting ids are compact, and we want the base
to be a power of 2 because every log2(base) bits corresponds to a single
character, i.e. every log2(32) = 5 bits. That means we can lop bits off
the end 5 at a time without affecting the final result.

* Incremental hydration

Stores the tree context on the dehydrated Suspense boundary's state
object so it resume where it left off.

* Add useId to react-debug-tools

* Add selective hydration test

Demonstrates that selective hydration works and ids are preserved even
after subsequent client updates.",Andrew Clark,2021-11-01T20:30:44Z
a0d991fe6587ad1cd1a97230f62f82c7cb6b9a40,"Re-land #22292 (remove uMS from open source build) (#22664)

I had to revert #22292 because there are some internal callers of
useMutableSource that we haven't migrated yet. This removes
useMutableSource from the open source build but keeps it in the
internal one.",Andrew Clark,2021-11-01T04:39:51Z
9db8713f9d08c1956939e33cc2da25c867748263,"Pin CI to Node 14 (#22665)

CI starting running Node 16, which breaks some of our tests because
the error message text for undefined property access has changed.

We should pin to Node 14 until we are able to update the messages.",Andrew Clark,2021-11-01T01:01:39Z
6c7ef3fce5547da5db3d400ccf95a5023f8891f4,React DevTools 4.20.2 -> 4.21.0 (#22661),Juan,2021-10-31T23:19:02Z
6bce0355c3e4bf23c16e82317094230908ee7560,"Upgrade useSyncExternalStore to alpha channel (#22662)

* Move useSyncExternalStore shim to a nested entrypoint

Also renames `useSyncExternalStoreExtra` to
`useSyncExternalStoreWithSelector`.

- 'use-sync-external-store/shim' -> A shim for `useSyncExternalStore`
  that works in React 16 and 17 (any release that supports hooks). The
  module will first check if the built-in React API exists, before
  falling back to the shim.
- 'use-sync-external-store/with-selector' -> An extended version of
  `useSyncExternalStore` that also supports `selector` and `isEqual`
  options. It does _not_ shim `use-sync-external-store`; it composes the
  built-in React API. **Use this if you only support 18+.**
- 'use-sync-external-store/shim/with-selector' -> Same API, but it
  composes `use-sync-external-store/shim` instead. **Use this for
  compatibility with 16 and 17.**
- 'use-sync-external-store' -> Re-exports React's built-in API. Not
  meant to be used. It will warn and direct users to either the shim or
  the built-in API.

* Upgrade useSyncExternalStore to alpha channel",Andrew Clark,2021-10-31T22:38:03Z
7034408ff762b52a39f3a3145a37f4526d0a95cf,"Follow-up improvements to error code extraction infra (#22516)

* Output FIXME during build for unminified errors

The invariant Babel transform used to output a FIXME comment if it
could not find a matching error code. This could happen if there were
a configuration mistake that caused an unminified message to
slip through.

Linting the compiled bundles is the most reliable way to do it because
there's not a one-to-one mapping between source modules and bundles. For
example, the same source module may appear in multiple bundles, some
which are minified and others which aren't.

This updates the transform to output the same messages for Error calls.

The source lint rule is still useful for catching mistakes during
development, to prompt you to update the error codes map before pushing
the PR to CI.

* Don't run error transform in development

We used to run the error transform in both production and development,
because in development it was used to convert `invariant` calls into
throw statements.

Now that don't use `invariant` anymore, we only have to run the
transform for production builds.

* Add ! to FIXME comment so Closure doesn't strip it

Don't love this solution because Closure could change this heuristic,
or we could switch to a differnt compiler that doesn't support it. But
it works.

Could add a bundle that contains an unminified error solely for the
purpose of testing it, but that seems like overkill.

* Alternate extract-errors that scrapes artifacts

The build script outputs a special FIXME comment when it fails to minify
an error message. CI will detect these comments and fail the workflow.

The comments also include the expected error message. So I added an
alternate extract-errors that scrapes unminified messages from the
build artifacts and updates `codes.json`.

This is nice because it works on partial builds. And you can also run it
after the fact, instead of needing build all over again.

* Disable error minification in more bundles

Not worth it because the number of errors does not outweight the size
of the formatProdErrorMessage runtime.

* Run extract-errors script in CI

The lint_build job already checks for unminified errors, but the output
isn't super helpful.

Instead I've added a new job that runs the extract-errors script and
fails the build if `codes.json` changes. It also outputs the expected
diff so you can easily see which messages were missing from the map.

* Replace old extract-errors script with new one

Deletes the old extract-errors in favor of extract-errors2",Andrew Clark,2021-10-31T22:37:32Z
9c8161ba81220143e7f87bd901697e46b14d8968,Reapply changes from #22631 (#22645),Juan,2021-10-28T15:04:27Z
c624dc3598c6dc95f9a827667bc4f8ecff41f0bd,DevTools supports ENV-injected version for better internal bug reports (#22635),Brian Vaughn,2021-10-27T21:18:48Z
26bc8ff9bfcdb67e255fea424b56909899ac208b,"Revert logic for checking for duplicate installations of DevTools (#22638)

* Revert ""Only show DevTools warning about unrecognized build in Chrome (#22571)""

This reverts commit b72dc8e9300f5ae997f7f5cfcd79b604cca3df0c.

* Revert ""Show warning in UI when duplicate installations of DevTools extension are detected (#22563)""

This reverts commit 930c9e7eeb4c9721e1b8dee074c2eef4d1eae5dc.

* Revert ""Prevent errors/crashing when multiple installs of DevTools are present (#22517)""

This reverts commit 545d4c2de7934a43b0c5d3ce050d77b4c3113bd3.

* Remove all references to passing extensionId in postMessage

* Keep build changes

* lint",Juan,2021-10-27T20:34:44Z
6c3dcc7a478f53aabd24b9712a7e506cf3702a64,Enable 'Reload and Start Profiling' for Microsoft Edge (#22631),Erik Andersson,2021-10-27T14:20:07Z
4298ddbc56a711cecfa672ec8ac60c94a02c9380,fix passing strings as chunks (#22617),Shu Ding,2021-10-24T03:21:55Z
90e5d3638844414e1b9df0fe66c3fc46b211d210,chore: fix comment typo (#22615),btea,2021-10-22T16:44:31Z
3c4c1c4703e8f7362370c44a48ac9348229e3791,"Remove warning for dangling passive effects (#22609)

In legacy mode, a test can get into a situation where passive effects are
""dangling"" — an update finished, and scheduled some passive effects,
but the effects don't flush.

This is why React warns if you don't wrap updates in act. The act API is
responsible for flushing passive effects. But there are some cases where
the act API (in legacy roots) intentionally doesn't warn, like updates
that originate from roots and classes. It's possible those updates will
render children that contain useEffect. Because of this, dangling
effects are still possible, and React doesn't warn about it.

So we implemented a second act warning for dangling effects.

However, in concurrent roots, we now enforce that all APIs that schedule
React work must be wrapped in act. There's no scenario where dangling
passive effects can happen that doesn't already trigger the warning for
updates. So the dangling effects warning is redundant.

The warning was never part of a public release. It was only enabled
in concurrent roots.

So we can delete it.",Andrew Clark,2021-10-21T22:39:59Z
d5b6b4b865ebf13a1eaf2342d623101056e5e197,"Expand act warning to cover all APIs that might schedule React work (#22607)

* Move isActEnvironment check to function that warns

I'm about to fork the behavior in legacy roots versus concurrent roots
even further, so I'm lifting this up so I only have to fork once.

* Lift `mode` check, too

Similar to previous commit. I only want to check this once. Not for
performance reasons, but so the logic is easier to follow.

* Expand act warning to include non-hook APIs

In a test environment, React warns if an update isn't wrapped with act
— but only if the update originates from a hook API, like useState.

We did it this way for backwards compatibility with tests that were
written before the act API was introduced. Those tests didn't require
act, anyway, because in a legacy root, all tasks are synchronous except
for `useEffect`.

However, in a concurrent root, nearly every task is asynchronous. Even
tasks that are synchronous may spawn additional asynchronous work. So
all updates need to be wrapped with act, regardless of whether they
originate from a hook, a class, a root, or any other type of component.

This commit expands the act warning to include any API that triggers
an update.

It does not currently account for renders that are caused by a Suspense
promise resolving; those are modelled slightly differently from updates.
I'll fix that in the next step.

I also removed the check for whether an update is batched. It shouldn't
matter, because even a batched update can spawn asynchronous work, which
needs to be flushed by act.

This change only affects concurrent roots. The behavior in legacy roots
is the same.

* Expand act warning to include Suspense resolutions

For the same reason we warn when an update is not wrapped with act,
we should warn if a Suspense promise resolution is not wrapped with act.
Both ""pings"" and ""retries"".

Legacy root behavior is unchanged.",Andrew Clark,2021-10-21T22:31:26Z
fa9bea0c41ccfef5b528ef9b5517607f9f94c52a,"Initial implementation of cache cleanup (#22510)

This is an initial, partial implementation of a cleanup mechanism for the experimental Cache API. The idea is that consumers of the Cache API can register to be informed when a given Cache instance is no longer needed so that they can perform associated cleanup tasks to free resources stored in the cache. A canonical example would be cancelling pending network requests.

An overview of the high-level changes:

* Changes the `Cache` type from a Map of cache instances to be an object with the original Map of instances, a reference count (to count roughly ""active references"" to the cache instances - more below), and an AbortController.
* Adds a new public API, `unstable_getCacheSignal(): AbortSignal`, which is callable during render. It returns an AbortSignal tied to the lifetime of the cache - developers can listen for the 'abort' event on the signal, which React now triggers when a given cache instance is no longer referenced. 
  * Note that `AbortSignal` is a web standard that is supported by other platform APIs; for example a signal can be passed to `fetch()` to trigger cancellation of an HTTP request.
* Implements the above - triggering the 'abort' event - by handling passive mount/unmount for HostRoot and CacheComponent fiber nodes.

Cases handled:
* Aborted transitions: we clean up a new cache created for an aborted transition
* Suspense: we retain a fresh cache instance until a suspended tree resolves

For follow-ups:
* When a subsequent cache refresh is issued before a previous refresh completes, the refreshes are queued. Fresh cache instances for previous refreshes in the queue should be cleared, retaining only the most recent cache. I plan to address this in a follow-up PR.
* If a refresh is cancelled, the fresh cache should be cleaned up.",Joseph Savona,2021-10-21T21:11:42Z
bfb40225b509dc65314f3fda95633090bf29ebf0,Scheduling Profiler does not warn about long transitions (#22614),Brian Vaughn,2021-10-21T19:16:26Z
0e8a5aff3ddf0f863839a924738f958fd940e3be,"Scheduling Profiler: Add marks for component effects (mount and unmount) (#22578)

DevTools (and its profilers) should not require users to be familiar with React internals. Although the scheduling profiler includes a CPU sample flame graph, it's there for advanced use cases and shouldn't be required to identify common performance issues.

This PR proposes adding new marks around component effects. This will enable users to identify components with slow effect create/destroy functions without requiring them to dig through the call stack. (Once #22529 lands, these new marks will also include component stacks, making them more useful still.)

For example, here's a profile with a long-running effect. Without this change, it's not clear why the effects phase takes so long. After this change, it's more clear why that the phase is longer because of a specific component.

We may consider adding similar marks around render phase hooks like useState, useReducer, useMemo. I avoided doing that in this PR because it would be a pretty pervasive change to the ReactFiberHooks file.

Note that this change should have no effect on production bundles since everything is guarded behind a profiling feature flag.

Going to tag more people than I normally would for this pR, since it touches both reconciler and DevTools packages. Feel free to ignore though if you don't have strong feelings.

Note that although this PR adds new marks to the scheduling profiler, it's done in a way that's backwards compatible for older profiles.",Brian Vaughn,2021-10-21T18:41:44Z
4ba20579daf119639567f69a0cb38128532754c6,"Scheduling Profiler: De-emphasize React internal frames (#22588)

This commit adds code to all React bundles to explicitly register the beginning and ending of the module. This is done by creating Error objects (which capture the file name, line number, and column number) and passing them explicitly to a DevTools hook (when present).

Next, as the Scheduling Profiler logs metadata to the User Timing API, it prints these module ranges along with other metadata (like Lane values and profiler version number).

Lastly, the Scheduling Profiler UI compares stack frames to these ranges when drawing the flame graph and dims or de-emphasizes frames that fall within an internal module.

The net effect of this is that user code (and 3rd party code) stands out clearly in the flame graph while React internal modules are dimmed.

Internal module ranges are completely optional. Older profiling samples, or ones recorded without the React DevTools extension installed, will simply not dim the internal frames.",Brian Vaughn,2021-10-21T18:40:41Z
f6abf4b400812c3207ca16aecb84fa3ce352e166,Fix typos (#22494),Konstantin Popov,2021-10-21T03:22:41Z
c213030b4966e935bb36c138e28761ea22dd837d,React DevTools 4.20.1 -> 4.20.2 (#22605),Juan,2021-10-20T20:00:13Z
5ca4b0433205d01294b6306a3a90af1103e37dc9,Dev Tools: Relax constraint on passing extensionId for backend init (#22597),Juan,2021-10-20T13:50:26Z
cdb8a1d19d0c0d43a72c3f0fe739b04da247c360,"[Fizz] Add option to inject bootstrapping script tags after the shell is injected (#22594)

* Add option to inject bootstrap scripts

These are emitted right after the shell as flushed.

* Update ssr fixtures to use bootstrapScripts instead of manual script tag

* Add option to FB renderer too",Sebastian Markbåge,2021-10-20T02:36:10Z
3677c019af7251207dee41df7689859ab991a665,Support nonce option to be passed to inline scripts (#22593),Sebastian Markbåge,2021-10-20T01:14:26Z
34e4c9756121ef89d4b31e75e590ebdd3f05587b,"Clear extra nodes if there's a hydration mismatch within a suspense boundary  (#22592)

* Clear extra nodes if there's a mismatch within a suspense boundary

This usually happens when we exit out a DOM node but a suspense boundary
is a virtual DOM node and we didn't do it in that case because we took a
short cut by calling resetHydrationState directly since we know we won't
need to pop.

* Tighten up the types of getFirstHydratableChild

We currently call getFirstHydratableChild to step into the children of
a suspense boundary. This can be a text node or a suspense boundary
which isn't compatible with getFirstHydratableChild, and we cheat the type.

This accidentally works because .firstChild always returns null on those
nodes in the DOM.

This just makes that explicit.",Sebastian Markbåge,2021-10-19T23:28:01Z
fe0356ce2baa0b6569de6cbae6d54166bebb1fdb,DevTools: Fix passing extensionId in evaled postMessage calls (#22590),Juan,2021-10-19T21:43:59Z
02f411578a8e58af8ec28e385f6b0dcb768cdc41,"Upgrade useInsertionEffect to stable (#22589)

@huozhi tried this out and says it's working as expected. I think we
can go ahead and move this into the stable channel, so that it is
available in the React 18 alpha releases.",Andrew Clark,2021-10-19T21:32:54Z
b81de8633218b0efde8e534374db08eea9116473,React DevTools 4.20.0 -> 4.20.1 (#22583),Juan,2021-10-19T14:55:39Z
5b9d000c8aff1e9f8368ec3e03b9568c8852fe5e,DevTools: Include Edge in browser name detection (#22584),Juan,2021-10-19T13:52:55Z
2af4a79333108f59600970ef23e2614c3a5324e4,"Hydrate using SuspenseComponent as the parent (#22582)

* Add a failing test for Suspense hydration

* Include salazarm's changes to the test

* The hydration parent of a suspense boundary should be the boundary itself

This eventually got set when we popped back out of its children but it
doesn't start out that way.

This fixes it so that the boundary parent is always the suspense boundary.

* We now need to log errors with a suspense boundary as a parent

For now, we just log this with commentNode.parentNode as the parent for
purposes of the error message.

* Make a special getFirstHydratableChildWithinSuspenseInstance

We currently call getNextHydratableSibling but conceptually it's the child
of the boundary. It just happens to be that when we use comment nodes, we
need to call nextSibling in the DOM.

This makes this separation a bit clearer.

* Sync old fork

Co-authored-by: Dan Abramov <dan.abramov@me.com>",Sebastian Markbåge,2021-10-19T00:44:34Z
b1acff0cc27a4c9844cb8049fae2ec6576a0f956,Enable cache in test renderer (#22580),Joseph Savona,2021-10-18T23:23:43Z
996da67b2991f480b6219471e38aeaa7280bd00c,"Replace global `jest` heuristic with `IS_REACT_ACT_ENVIRONMENT` (#22562)

* Remove `jest` global check in concurrent roots

In concurrent mode, instead of checking `jest`, we check the new
`IS_REACT_ACT_ENVIRONMENT` global. The default behavior is `false`.

Legacy mode behavior is unchanged.

React's own internal test suite use a custom version of `act` that works
by mocking the Scheduler — rather than the ""real"" act used publicly. So
we don't enable the flag in our repo.

* Warn if `act` is called in wrong environment

Adds a warning if `act` is called but `IS_REACT_ACT_ENVIRONMENT` is not
enabled. The goal is to prompt users to correctly configure their
testing environment, so that if they forget to use `act` in a different
test, we can detect and warn about.

It's expected that the environment flag will be configured by the
testing framework. For example, a Jest plugin. We will link to the
relevant documentation page, once it exists.

The warning only fires in concurrent mode. Legacy roots will keep the
existing behavior.",Andrew Clark,2021-10-18T15:59:18Z
163e81c1f88a47749e092f2d5b31b7c919f07de8,"Support disabling spurious act warnings with a global environment flag (#22561)

* Extract `act` environment check into function

`act` checks the environment to determine whether to fire a warning.
We're changing how this check works in React 18. As a first step, this
refactors the logic into a single function. No behavior changes yet.

* Use IS_REACT_ACT_ENVIRONMENT to disable warnings

If `IS_REACT_ACT_ENVIRONMENT` is set to `false`, we will suppress
any `act` warnings. Otherwise, the behavior of `act` is the same as in
React 17: if `jest` is defined, it warns.

In concurrent mode, the plan is to remove the `jest` check and only warn
if `IS_REACT_ACT_ENVIRONMENT` is true. I have not implemented that
part yet.",Andrew Clark,2021-10-18T15:27:26Z
b72dc8e9300f5ae997f7f5cfcd79b604cca3df0c,Only show DevTools warning about unrecognized build in Chrome (#22571),Juan,2021-10-15T21:18:20Z
e5f486b5a82c58001e526ade72525434dc1afca9,React DevTools 4.19.2 -> 4.20.2 (#22569),Juan,2021-10-15T16:50:17Z
1def0a4244fa0b221ba39e9bce9bc3b6d63220e3,DevTools prepare release script resets patch version when bumping minor (#22568),Juan,2021-10-15T16:50:00Z
930c9e7eeb4c9721e1b8dee074c2eef4d1eae5dc,Show warning in UI when duplicate installations of DevTools extension are detected (#22563),Juan,2021-10-15T15:27:13Z
9d3d03025cf2474286ee5d9ba642f3ea9377a435,Reattachment of the splash page event listeners (#22558) (#22560),Gabriel Trompiz,2021-10-15T13:16:43Z
23b7dfeff31abbf2ce69452e46075c5cb6da4a31,Enable scheduling profiler for RN FB profiling builds (#22566),Brian Vaughn,2021-10-15T12:03:18Z
545d4c2de7934a43b0c5d3ce050d77b4c3113bd3,"Prevent errors/crashing when multiple installs of DevTools are present (#22517)

## Summary

This commit is a proposal for handling duplicate installation of DevTools, in particular scoped to duplicates such as a dev build or the internal versions of DevTools installed alongside the Chrome Web Store extension.

Specifically, this commit makes it so when another instance of the DevTools extension is installed alongside the extension installed from the Chrome Web Store, we don't produce a stream of errors or crash Chrome, which is what would usually happen in this case. 


### Detecting Duplicate Installations

- First, we check what type of installation the extension is: from the Chrome Web Store, the internal build of the extension, or a local development build.
- If the extension is from the **Chrome Web Store**:
  - During initialization, we first check if the internal or local builds of the extension have already been installed and are enabled. To do this, we send a [cross-extension message](https://developer.chrome.com/docs/extensions/mv3/messaging/#external) to the internal and local builds of the extension using their extension IDs.  
    - We can do this because the extension ID for the internal build (and for the Chrome Web Store) is a stable ID.
    - For the local build, at build time we hardcode a [`key` in the `manifest.json`](https://developer.chrome.com/docs/extensions/mv2/manifest/key/) which allows us to have a stable ID even for local builds.
  - If we detect that the internal or local extensions are already installed, then we skip initializing the current extension altogether so as to not conflict with the other versions. This means we don't initialize the frontend or the backend at all.
- If the extension is the **Internal Build**:
  - During initialization, we first check if the local builds of the extension has already been installed and is enabled. To do this, we send a [cross-extension message](https://developer.chrome.com/docs/extensions/mv3/messaging/#external) to the local build of the extension using its extension ID.  
    - We can do this for the local build because at build time we hardcode a [`key` in the `manifest.json`](https://developer.chrome.com/docs/extensions/mv2/manifest/key/) which allows us to have a stable ID even for local builds.
  - If we detect that the local extension is already installed, then we skip initializing the current extension altogether so as to not conflict with the that  version. This means we don't initialize the frontend or the backend at all.
- If the extension is a **Local Dev Build**:
  - Since other extensions check for the existence of this extension and disable themselves if they detect it, we don't need any special handling during initialization and assume that there are no duplicate extensions. This means that we will generally prefer keeping this extension enabled.

This behavior means that the order of priority for keeping an extension enabled is the following:

1. Local build
2. Internal build
3. Public build


### Preventing duplicate backend initialization

Note that the backend is injected and initialized by the content script listening to a message posted to the inspected window (via `postMessage`). Since the content script will be injected twice, once each by each instance of the extension, even if we initialize the extension once, both content scripts would still receive the single message posted from the single frontend, and it would then still inject and initialize the backend twice. 

In order to prevent this, we also add the extension ID to the message for injecting the backend. That way each content script can check if the message comes from its own extension, and if not it can ignore the message and avoid double injecting the backend.
  
### Other approaches

- I considered using the [`chrome.management`](https://developer.chrome.com/docs/extensions/reference/management/) API generally to detect other installations, but that requires adding additional permissions to our production extension, which didn't seem ideal.
- I also considered a few options of writing a special flag to the inspected window and checking for it before initializing the extension. However, it's hard to avoid race conditions in that case, and it seemed more reliable to check specifically for the WebStore extension, which is realistically where we would encounter the overlap.
  
### Rollout

- This commit needs to be published and rolled out to the Chrome Web Store first.
- After this commit is published to the Chrome Web Store, any duplicate instances of the extension that are built and installed after this commit will no longer conflict with the Chrome Web Store version.
  
### Next Steps

- In a subsequent PR, I will extend this code to show a warning when duplicate extensions have been detected.

Part of #22486

## How did you test this change?

### Basic Testing

- yarn flow
- yarn test
- yarn test-build-devtools

### Double installation testing

Testing double-installed extensions for this commit is tricky because we are relying on the extension ID of the internal and Chrome Web Store extensions, but we obviously can't actually test the Web Store version (since we can't modify the already published version).

In order to simulate duplicate extensions installed, I did the following process:

- Built separate extensions where I hardcoded a constant for whether the extension is internal or public (e.g. `EXTENSION_INSTALLATION_TYPE = 'internal'`). Then I installed these built extensions corresponding to the ""internal"" and ""Web Store"" builds.
- Build and run the regular development extension (with `yarn build:chrome:dev && yarn test:chrome`), using the extension IDs of the previously built extensions as the ""internal"" and ""public"" extension IDs.

With this set up in place, I tested the following on pages both with and without React:

- When only the local extension enabled, DevTools works normally.
- When only the ""internal"" extension enabled, DevTools works normally.
- When only the ""public"" extension enabled, DevTools works normally.
- When ""internal"" and ""public"" extensions are installed, ""public"" extension is disabled and ""internal"" extension works normally.
- When the local extension runs alongside the other extensions, other extensions disable themselves and local build works normally.
- When we can't recognize what type of build the extension corresponds to, we show an error.
- When all 3 extensions are installed and enabled in all different combinations, DevTools no longer produces errors or crashes Chrome, and works normally.",Juan,2021-10-14T21:15:31Z
c3a19e5af0b12f3535ad6f8dee8643252f985e74,Improved Workers filenames in devtools-core (#22559),Abhay Gupta,2021-10-14T14:54:06Z
a45533cc2511cffa972bf58b68789c9b8aeea516,Allow to use the Profiler when no client is connected in standalone DevTools (#22551),Gabriel Trompiz,2021-10-14T12:31:45Z
61455a25b7d5783f398b0a463f45b9b8d14a6ed6,Enable experimental Cache API in www TestRenderer (#22554),Joseph Savona,2021-10-13T23:39:29Z
7142d110b00ecb5bb7566128c431fee02963e543,"Bugfix: Nested useOpaqueIdentifier references (#22553)

* Handle render phase updates explicitly

We fire a warning in development if a component is updated during
the render phase (with the exception of local hook updates, which have
their own defined behavior).

Because it's not a supported React pattern, we don't have that many
tests that trigger this path. But it is meant to have reasonable
semantics when it does happen, so that if it accidentally ships to
production, the app doesn't crash unnecessarily. The behavior is not
super well-defined, though.

There are also some _internal_ React implementation details that
intentionally to rely on this behavior. Most prominently, selective
hydration and useOpaqueIdentifier.

I need to tweak the behavior of render phase updates slightly as part
of a fix for useOpaqueIdentifier. This shouldn't cause a user-facing
change in behavior outside of useOpaqueIdentifier, but it does require
that we explicitly model render phase updates.

* Bugfix: Nested useOpaqueIdentifier calls

Fixes an issue where multiple useOpaqueIdentifier hooks are upgraded
to client ids within the same render.

The way the upgrade works is that useOpaqueIdentifier schedules a
render phase update then throws an error to trigger React's error
recovery mechanism.

The normal error recovery mechanism is designed for errors that occur
as a result of interleaved mutations, so we usually only retry a single
time, synchronously, before giving up.

useOpaqueIdentifier is different because the error its throws when
upgrading is not caused by an interleaved mutation. Rather, it happens
when an ID is referenced for the first time inside a client-rendered
tree (i.e. sommething that wasn't part of the initial server render).
The fact that it relies on the error recovery mechanism is an
implementation detail. And a single recovery attempt may be
insufficient. For example, if a parent and a child component may
reference different ids, and both are mounted as a result of the same
client update, that will trigger two separate error recovery attempts.

Because render phase updates are not allowed when triggered from
userspace — we log a warning in developement to prevent them —
we can assume that if something does update during the render phase, it
is one of our ""legit"" implementation details like useOpaqueIdentifier.
So we can keep retrying until we succeed — up to a limit, to protect
against inifite loops. I chose 50 since that's the limit we use for
commit phase updates.",Andrew Clark,2021-10-13T22:44:36Z
8ee4ff88361eff8e8a8aeec32ba3315ad2065131,Surface backend errors during inspection in the frontend UI (#22546),Brian Vaughn,2021-10-13T14:35:21Z
1e247ff892985488c6bcb87e924d7881f5c37261,Enabled scheduling profiler marks for React Native FB target (#22544),Brian Vaughn,2021-10-12T15:04:10Z
c16b005f2d71acde26658f035ff491a5e027da39,Update test and stack frame code to support newer V8 stack formats (#22477),Brian Vaughn,2021-10-11T22:40:42Z
55d75005bc26aa41cddc090273f82aa106729fb8,duplicate value in variable (#22390),BIKI DAS,2021-10-11T13:20:15Z
afcb9cdc9343ddc134b03dcf4d7fbc0810b6002b,"[DevTools] Update Fiber logic in backend renderer to match implementation in React (#22527)

* [DevTools] Update isMountedImpl to match implementation in React

* Also sync findCurrentFiberUsingSlowPathById",Juan,2021-10-08T20:19:54Z
20ca9b565a3649b57b28e2455801c218ec5e71c7,React DevTools 4.19.1 -> 4.19.2,Brian Vaughn,2021-10-08T17:51:25Z
5fa4d79b00988f354073bc27313363dd5cce9cd3,[DevTools] Register logger for standalone DevTools (#22524),Juan,2021-10-08T12:38:11Z
784a725fe139b88c37f8b16d1d2225e88caf2612,Added Devtools Extension link for Microsoft Edge (#22515),Abhay Gupta,2021-10-07T22:52:08Z
6ecad79ccf2c683cb21ac40dee5678358c7b6208,"Test that discrete events that aren't hydratable do not propagate (#22502)

* test that discrete events that arent hydratable do not propagate

* lint

* feedback

* feedback

* lint

* better test

* nits

* lint",salazarm,2021-10-06T12:31:21Z
579c008a752fae70f670047d0ab687552fd8d160,"[Fizz/Flight] pipeToNodeWritable(..., writable).startWriting() -> renderToPipeableStream(...).pipe(writable) (#22450)

* Rename pipeToNodeWritable to renderToNodePipe

* Add startWriting API to Flight

We don't really need it in this case because there's way less reason to
delay the stream in Flight.

* Pass the destination to startWriting instead of renderToNode

* Rename startWriting to pipe

This mirrors the ReadableStream API in Node

* Error codes

* Rename to renderToPipeableStream

This mimics the renderToReadableStream API for the browser.",Sebastian Markbåge,2021-10-06T04:31:06Z
6485ef747249295c7bfb8e599b9dde76df143cec,Remove duplicate error code (#22513),Sebastian Markbåge,2021-10-06T02:59:46Z
cadf94df1f77a75f3cc67f284fa951c6024e51d2,Add new Jest --compact-console flag for DevTools tests (#22495),Brian Vaughn,2021-10-05T15:58:54Z
f2c381131fb58c107e6153255bc8d1d6340db506,"fix: useSyncExternalStoreExtra (#22500)

* move setting memoizedSnapshot

* Revert ""move setting memoizedSnapshot""

This reverts commit f01320689cebfcbc4f3a53208f879ed4a8d6613d.

* add failed tests

* Revert ""Revert ""move setting memoizedSnapshot""""

This reverts commit cb43c4fdc6b0dcab3480f27d6fbbb3137dbc47bb.",Daishi Kato,2021-10-04T14:39:51Z
0ecbbe142201ef65830f0b7a19d52c1f77043e86,Sync hydrate discrete events in capture phase and dont replay discrete events (#22448),salazarm,2021-10-04T13:54:33Z
a4bc8ae4c1db471bb34d908dd890a09d4c774303,"Reopen #22481 Fixed modal closing issue (#22484)

Co-authored-by: Brian Vaughn <brian.david.vaughn@gmail.com>",BIKI DAS,2021-10-02T14:26:15Z
5f3b376c56c6c523e7018f5128a768cbd67a8a6f,Show different error boundary UI for timeouts than normal errors (#22483),Brian Vaughn,2021-10-01T19:03:36Z
bdd6d5064dd820705de4ce4b5a92f9d055550ced,React DevTools 4.19.0 -> 4.19.1 (#22480),Brian Vaughn,2021-10-01T15:50:05Z
2825a08dc0981b7e745b2742a84195f75e4d6f72,[DevTools] Log basic usage events (#22478),Juan,2021-09-30T21:19:07Z
a724a3b578dce77d427bef313102a4d0e978d9b4,"[RFC] Codemod invariant -> throw new Error (#22435)

* Hoist error codes import to module scope

When this code was written, the error codes map (`codes.json`) was
created on-the-fly, so we had to lazily require from inside the visitor.

Because `codes.json` is now checked into source, we can import it a
single time in module scope.

* Minify error constructors in production

We use a script to minify our error messages in production. Each message
is assigned an error code, defined in `scripts/error-codes/codes.json`.
Then our build script replaces the messages with a link to our
error decoder page, e.g. https://reactjs.org/docs/error-decoder.html/?invariant=92

This enables us to write helpful error messages without increasing the
bundle size.

Right now, the script only works for `invariant` calls. It does not work
if you throw an Error object. This is an old Facebookism that we don't
really need, other than the fact that our error minification script
relies on it.

So, I've updated the script to minify error constructors, too:

Input:
  Error(`A ${adj} message that contains ${noun}`);
Output:
  Error(formatProdErrorMessage(ERR_CODE, adj, noun));

It only works for constructors that are literally named Error, though we
could add support for other names, too.

As a next step, I will add a lint rule to enforce that errors written
this way must have a corresponding error code.

* Minify ""no fallback UI specified"" error in prod

This error message wasn't being minified because it doesn't use
invariant. The reason it didn't use invariant is because this particular
error is created without begin thrown — it doesn't need to be thrown
because it's located inside the error handling part of the runtime.

Now that the error minification script supports Error constructors, we
can minify it by assigning it a production error code in
`scripts/error-codes/codes.json`.

To support the use of Error constructors more generally, I will add a
lint rule that enforces each message has a corresponding error code.

* Lint rule to detect unminified errors

Adds a lint rule that detects when an Error constructor is used without
a corresponding production error code.

We already have this for `invariant`, but not for regular errors, i.e.
`throw new Error(msg)`. There's also nothing that enforces the use of
`invariant` besides convention.

There are some packages where we don't care to minify errors. These are
packages that run in environments where bundle size is not a concern,
like react-pg. I added an override in the ESLint config to ignore these.

* Temporarily add invariant codemod script

I'm adding this codemod to the repo temporarily, but I'll revert it
in the same PR. That way we don't have to check it in but it's still
accessible (via the PR) if we need it later.

* [Automated] Codemod invariant -> Error

This commit contains only automated changes:

npx jscodeshift -t scripts/codemod-invariant.js packages --ignore-pattern=""node_modules/**/*""
yarn linc --fix
yarn prettier

I will do any manual touch ups in separate commits so they're easier
to review.

* Remove temporary codemod script

This reverts the codemod script and ESLint config I added temporarily
in order to perform the invariant codemod.

* Manual touch ups

A few manual changes I made after the codemod ran.

* Enable error code transform per package

Currently we're not consistent about which packages should have their
errors minified in production and which ones should.

This adds a field to the bundle configuration to control whether to
apply the transform. We should decide what the criteria is going
forward. I think it's probably a good idea to minify any package that
gets sent over the network. So yes to modules that run in the browser,
and no to modules that run on the server and during development only.",Andrew Clark,2021-09-30T19:01:28Z
f5d946da6be8d0cefd66ab3d029a55ab54ebb460,[DevTools] Enable logger for internal build of DevTools extensions (#22476),Juan,2021-09-30T18:13:13Z
75b9869648a2043d8c42693f44db437f40ea7d38,[DevTools] Extension reports logged events when feature flag is enabled (#22475),Juan,2021-09-30T17:47:14Z
47177247f8c792fbb9a33328c913e246ff139a2d,DevTools: Fixed potential cache miss when insepcting elements (#22472),Brian Vaughn,2021-09-30T16:48:53Z
7d38e4fd896911f7204165853236e1b7f2786a60,"CodeSandbox CI: Fall back to local build (#22473)

The `download-experimental-build` script has been flaky on CodeSandbox
CI, I think because of GitHub rate limiting.

Until we figure out how to fix that, I've updated it to fall back to a
local build.",Andrew Clark,2021-09-30T15:12:25Z
ec4ac97500e850a90f837668a261533e780f40f4,Fixed Link on Documentation (#22465),Ay-Ay-Ron,2021-09-30T13:58:01Z
201af81b0168cabea3cc07cd8201378a4fec4aaf,Release pooled cache reference in complete/unwind (#22464),Joseph Savona,2021-09-29T22:49:52Z
95ecd4a2c360921f9db91bf8db5cad1aa5a34a5e,[DevTools] Commands for internal builds all follow :fb convention (#22463),Juan,2021-09-29T21:46:34Z
0883c4cd3a0bba4cc3eb2a1921cf21b1d78ddea2,React DevTools 4.18.0 -> 4.19.0 (#22461),Luna Ruan,2021-09-29T16:06:13Z
033efe7312cdf73118922b279d9b1ae29a2f693d,"Call get snapshot in useSyncExternalStore server shim (#22453)

* Call getSnapshot in shim

* just change useSyncExternalStoreServer

* remove builtInAPI Check in useSyncExternalStoreClient",salazarm,2021-09-29T01:32:57Z
7843b142ac804655990157a7be1e4641b4b6695f,"[Fizz/Flight] Pass in Destination lazily to startFlowing instead of in createRequest (#22449)

* Pass in Destination lazily in startFlowing instead of createRequest

* Delay fatal errors until we have a destination to forward them to

* Flow can now be inferred by whether there's a destination set

We can drop the destination when we're not flowing since there's nothing to
write to.

Fatal errors now close once flowing starts back up again.

* Defer fatal errors in Flight too",Sebastian Markbåge,2021-09-28T22:32:09Z
d9fb383d6f627bf3f6e53ec7b14ba4d1260959d5,"Extract queueing logic into shared functions (#22452)

As a follow up to #22445, this extracts the queueing logic that is
shared between `dispatchSetState` and `dispatchReducerAction` into
separate functions. It likely doesn't save any bytes since these will
get inlined, anyway, but it does make the flow a bit easier to follow.",Andrew Clark,2021-09-28T19:05:44Z
9175f4d15edfa091aa34b79dea21c3686f4fd8ed,Scheduling Profiler: Show Suspense resource .displayName (#22451),Brian Vaughn,2021-09-28T15:29:33Z
eba248c390a5e32488536a100e2f7c0e55d43da6,"[Fizz/Flight] Remove reentrancy hack (#22446)

* Remove reentrant check from Fizz/Flight

* Make startFlowing explicit in Flight

This is already an explicit call in Fizz. This moves flowing to be explicit.

That way we can avoid calling it in start() for web streams and therefore
avoid the reentrant call.

* Add regression test

This test doesn't actually error due to the streams polyfill not behaving
like Chrome but rather according to spec.

* Update the Web Streams polyfill

Not that we need this but just in case there are differences that are fixed.",Sebastian Markbåge,2021-09-28T00:47:56Z
66388150ef1dfef1388c634a2d2ce6760a92012f,"Remove usereducer eager bailout (#22445)

* Fork dispatchAction for useState/useReducer

* Remove eager bailout from forked dispatchReducerAction, update tests

* Update eager reducer/state logic to handle state case only

* sync reconciler fork

* rename test

* test cases from #15198

* comments on new test cases

* comments on new test cases

* test case from #21419

* minor tweak to test name to kick CI",Joseph Savona,2021-09-27T23:25:10Z
8131de13e29ba626dfd311c2b4e9bb42fa4d5d6c,prevent unused exec getCurrentValue after re-render (#22442),Behnam Mohammadi,2021-09-27T21:20:32Z
580e2f56d54b6f7868a98d6bd5ce07bfaa3cdbe2,Add isArray in devTools utils (#22438),Behnam Mohammadi,2021-09-27T21:17:30Z
d3e0869324267dc62b50ee02f747f5f0a5f5c656,"Make root.unmount() synchronous  (#22444)

* Move flushSync warning to React DOM

When you call in `flushSync` from an effect, React fires a warning. I've
moved the implementation of this warning out of the reconciler and into
React DOM.

`flushSync` is a renderer API, not an isomorphic API, because it has
behavior that was designed specifically for the constraints of React
DOM. The equivalent API in a different renderer may not be the same.
For example, React Native has a different threading model than the
browser, so it might not make sense to expose a `flushSync` API to the
JavaScript thread.

* Make root.unmount() synchronous

When you unmount a root, the internal state that React stores on the
DOM node is immediately cleared. So, we should also synchronously
delete the React tree. You should be able to create a new root using
the same container.",Andrew Clark,2021-09-27T21:04:39Z
2cc6d79c98bcd1b17b83c47de29895342db5caeb,Rename onReadyToStream to onCompleteShell (#22443),Sebastian Markbåge,2021-09-27T19:38:22Z
2e41568313620ab564425be7e5d777581e2db5d4,"DevTools encoding supports multibyte characters (e.g. ""🟩"") (#22424)

Changes our text encoding approach to properly support multibyte characters following this algorithm. Based on benchmarking, this new approach is roughly equivalent in terms of performance (sometimes slightly faster, sometimes slightly slower).

I also considered using TextEncoder/TextDecoder for this, but it was much slower (~85%).",Brian Vaughn,2021-09-27T17:34:39Z
c88fb49d37fd01024e0a254a37b7810d107bdd1d,"Improve DEV errors if string coercion throws (Temporal.*, Symbol, etc.) (#22064)

* Revise ESLint rules for string coercion

Currently, react uses `'' + value` to coerce mixed values to strings.
This code will throw for Temporal objects or symbols.

To make string-coercion safer and to improve user-facing error messages,
This commit adds a new ESLint rule called `safe-string-coercion`.

This rule has two modes: a production mode and a non-production mode.
* If the `isProductionUserAppCode` option is true, then `'' + value`
  coercions are allowed (because they're faster, although they may
  throw) and `String(value)` coercions are disallowed. Exception:
  when building error messages or running DEV-only code in prod
  files, `String()` should be used because it won't throw.
* If the `isProductionUserAppCode` option is false, then `'' + value`
  coercions are disallowed (because they may throw, and in non-prod
  code it's not worth the risk) and `String(value)` are allowed.

Production mode is used for all files which will be bundled with
developers' userland apps. Non-prod mode is used for all other React
code: tests, DEV blocks, devtools extension, etc.

In production mode, in addiiton to flagging `String(value)` calls,
the rule will also flag `'' + value` or `value + ''` coercions that may
throw. The rule is smart enough to silence itself in the following
""will never throw"" cases:
* When the coercion is wrapped in a `typeof` test that restricts to safe
  (non-symbol, non-object) types. Example:
    if (typeof value === 'string' || typeof value === 'number') {
      thisWontReport('' + value);
    }
* When what's being coerced is a unary function result, because unary
   functions never return an object or a symbol.
* When the coerced value is a commonly-used numeric identifier:
  `i`, `idx`, or `lineNumber`.
* When the statement immeidately before the coercion is a DEV-only
  call to a function from shared/CheckStringCoercion.js. This call is a
  no-op in production, but in DEV it will show a console error
  explaining the problem, then will throw right after a long explanatory
  code comment so that debugger users will have an idea what's going on.
  The check function call must be in the following format:
    if (__DEV__) {
      checkXxxxxStringCoercion(value);
    };

Manually disabling the rule is usually not necessary because almost all
prod use of the `'' + value` pattern falls into one of the categories
above. But in the rare cases where the rule isn't smart enough to detect
safe usage (e.g. when a coercion is inside a nested ternary operator),
manually disabling the rule will be needed.

The rule should also be manually disabled in prod error handling code
where `String(value)` should be used for coercions, because it'd be
bad to throw while building an error message or stack trace!

The prod and non-prod modes have differentiated error messages to
explain how to do a proper coercion in that mode.

If a production check call is needed but is missing or incorrect
(e.g. not in a DEV block or not immediately before the coercion), then
a context-sensitive error message will be reported so that developers
can figure out what's wrong and how to fix the problem.

Because string coercions are now handled by the `safe-string-coercion`
rule, the `no-primitive-constructor` rule no longer flags `String()`
usage. It still flags `new String(value)` because that usage is almost
always a bug.

* Add DEV-only string coercion check functions

This commit adds DEV-only functions to check whether coercing
values to strings using the `'' + value` pattern will throw. If it will
throw, these functions will:
1. Display a console error with a friendly error message describing
   the problem and the developer can fix it.
2. Perform the coercion, which will throw. Right before the line where
   the throwing happens, there's a long code comment that will help
   debugger users (or others looking at the exception call stack) figure
   out what happened and how to fix the problem.

One of these check functions should be called before all string coercion
of user-provided values, except when the the coercion is guaranteed not
to throw, e.g.
* if inside a typeof check like `if (typeof value === 'string')`
* if coercing the result of a unary function like `+value` or `value++`
* if coercing a variable named in a whitelist of numeric identifiers:
  `i`, `idx`, or `lineNumber`.

The new `safe-string-coercion` internal ESLint rule enforces that
these check functions are called when they are required.

Only use these check functions in production code that will be bundled
with user apps.  For non-prod code (and for production error-handling
code), use `String(value)` instead which may be a little slower but will
never throw.

* Add failing tests for string coercion

Added failing tests to verify:
* That input, select, and textarea elements with value and defaultValue
  set to Temporal-like objects which will throw when coerced to string
  using the `'' + value` pattern.
* That text elements will throw for Temporal-like objects
* That dangerouslySetInnerHTML will *not* throw for Temporal-like
  objects because this value is not cast to a string before passing to
  the DOM.
* That keys that are Temporal-like objects will throw

All tests above validate the friendly error messages thrown.

* Use `String(value)` for coercion in non-prod files

This commit switches non-production code from `'' + value` (which
throws for Temporal objects and symbols) to instead use `String(value)`
which won't throw for these or other future plus-phobic types.

""Non-produciton code"" includes anything not bundled into user apps:
* Tests and test utilities. Note that I didn't change legacy React
  test fixtures because I assumed it was good for those files to
  act just like old React, including coercion behavior.
* Build scripts
* Dev tools package - In addition to switching to `String`, I also
  removed special-case code for coercing symbols which is now
  unnecessary.

* Add DEV-only string coercion checks to prod files

This commit adds DEV-only function calls to to check if string coercion
using `'' + value` will throw, which it will if the value is a Temporal
object or a symbol because those types can't be added with `+`.

If it will throw, then in DEV these checks will show a console error
to help the user undertsand what went wrong and how to fix the
problem. After emitting the console error, the check functions will
retry the coercion which will throw with a call stack that's easy (or
at least easier!) to troubleshoot because the exception happens right
after a long comment explaining the issue. So whether the user is in
a debugger, looking at the browser console, or viewing the in-browser
DEV call stack, it should be easy to understand and fix the problem.

In most cases, the safe-string-coercion ESLint rule is smart enough to
detect when a coercion is safe. But in rare cases (e.g. when a coercion
is inside a ternary) this rule will have to be manually disabled.

This commit also switches error-handling code to use `String(value)`
for coercion, because it's bad to crash when you're trying to build
an error message or a call stack!  Because `String()` is usually
disallowed by the `safe-string-coercion` ESLint rule in production
code, the rule must be disabled when `String()` is used.",Justin Grant,2021-09-27T17:05:07Z
05726d72ccd3940a927462d520d0d2674012ad85,"[Fix] Errors should not ""unsuspend"" a transition (#22423)

If an error is thrown during a transition where we would have otherwise
suspended without showing a fallback (i.e. during a refresh), we should
still suspend.

The current behavior is that the error will force the fallback to
appear, even if it's completely unrelated to the component that errored,
which breaks the contract of `startTransition`.",Andrew Clark,2021-09-27T15:44:39Z
c9d64e5f4c2b7cc70a618eec78900dbfd6d201e8,add hasOwnProperty to devTools backend (#22437),Behnam Mohammadi,2021-09-27T12:56:56Z
3746eaf985dd92f8aa5f5658941d07b6b855e9d9,Packages/React/src/ReactLazy ---> changing -1 to unintialized (#22421),BIKI DAS,2021-09-24T17:52:21Z
04ccc01d967091f441f08177a5078cc6034c2a9e,"Hydration errors should force a client render (#22416)

* Refactor throwException control flow

I'm about to add more branches to the Suspense-related logic in
`throwException`, so before I do, I split some of the steps into
separate functions so that later I can use them in multiple places.

This commit does not change any program behavior, only the control flow
surrounding existing code.

* Hydration errors should force a client render

If something errors during hydration, we should try rendering again
without hydrating.

We'll find the nearest Suspense boundary and force it to client render,
discarding the server-rendered content.",Andrew Clark,2021-09-24T17:47:19Z
029fdcebbfec51a28af27cd390dff8668bf136cf,"root.hydrate -> root.isDehydrated (#22420)

I think this naming is a bit clearer. It means the root is currently
showing server rendered content that needs to be hydrated.

A dehydrated root is conceptually the same as what we call dehydrated
Suspense boundary, so this makes the naming of the root align with the
naming of subtrees.",Andrew Clark,2021-09-24T17:45:46Z
1c73ceed5f6248679d04c5e637290cfc6d3b5264,Scheduling Profiler marks should include thrown Errors (#22419),Brian Vaughn,2021-09-24T16:56:27Z
af87f5a83d49bde495eb7fe760b2052ba8a76caf,"Scheduling Profiler marks should include thrown Errors (#22417)

The scheduling profiler markComponentRenderStopped method is supposed to be called when rendering finishes or when a value is thrown (Suspense or Error). Previously we were calling this in a Suspense-only path of `throwException`.

This PR updates the code to handle errors (or non-Thenables) thrown as well.

It also moves the mark logic the work loop `handleError` method, with Suspense/Error agnostic cleanup.",Brian Vaughn,2021-09-24T16:32:37Z
b1a1cb11680cf4a03932e8955f64d5a7ba9c89f1,"DevTools: Lazily parse indexed map sections (#22415)

Indexed maps divide nested source maps into sections, annotated with a line and column offset. Since these sections are JSON and can be quickly parsed, we can easily separate them without doing the heavier base64 and VLQ decoding process. This PR updates our sourcemap parsing code to defer parsing of an indexed map section until we actually need to retrieve mappings from it.",Brian Vaughn,2021-09-24T15:09:42Z
a01cdbf8132e02773ddb376948e4c7ff7cbc72a0,Update Yarn build-for-devtools script to account for build/build2 changes (#22418),Brian Vaughn,2021-09-24T14:54:57Z
d47339ea3659133940f7699144cd30453fb6ed43,"[Fizz] Remove assignID mechanism (#22410)

* Remove pushEmpty

This is only used to support the assignID mechanism.

* Remove assignID mechanism

This effectively isn't used anyway because we always insert a dummy tag
into the fallback.

* Emit the template tag with an ID directly in pending boundaries

This ensures that assigning the ID is deterministic since it's done during
writing.

This also avoids emitting it for client rendered boundaries that start as
client rendered since we never need to refer to them.

* Move lazy ID initialization to the core implementation

We never need an ID before we write a pending boundary. This also ensures
that ID generation is deterministic by moving it to the write phase.

* Simplify the inserted scripts

We can assume that there are no text nodes before the template tag so this
simplifies the script that finds the comment node. It should be the direct
previous child.",Sebastian Markbåge,2021-09-24T14:22:02Z
1c58cfab959ae17565bc6802a3699d564f781c35,Update Node.js to latest v14.17.6 LTS (#22401),Damian Cyntler,2021-09-23T23:30:12Z
3a50d95573b7ebdf723e08f6f78c99faf811da0b,"Never attach ping listeners in legacy Suspense (#22407)

I noticed a weird branch where we attach a ping listener even in legacy
mode. It's weird because this shouldn't be necessary. Fallbacks always
synchronously commit in legacy mode, so pings never happen. (A ""ping"" is
when a suspended promise resolves before the fallback has committed.)

It took me a moment to remember why this case exists, but it's related
to React.lazy.

There's a special case where we suspend while reconciling the children
of a Suspense boundary's inner Offscreen wrapper fiber. This happens
when a React.lazy component is a direct child of a Suspense boundary.

Suspense boundaries are implemented as multiple fibers, but they are a
single conceptual unit. The legacy mode behavior where we pretend the
suspended fiber committed as `null` won't work, because in this case the
""suspended"" fiber is the inner Offscreen wrapper.

Because the contents of the boundary haven't started rendering yet (i.e.
nothing in the tree has partially rendered) we can switch to the
regular, concurrent mode behavior: mark the boundary with ShouldCapture
and enter the unwind phase.

However, even though we're switching to the concurrent mode behavior, we
don't need to attach a ping listener. So I refactored the logic so that
it doesn't escape back into the regular path.

It's not really a big deal that we attach an unncessary ping listener,
since this case is so unusual. The motivation is not performance related
— it's to make the logic clearer, because I'm about to add another case
where we trigger a Suspense boundary without attaching a ping listener.",Andrew Clark,2021-09-23T18:07:38Z
d174d063d13d428ad4002474cb560464a7f70f45,"DevTools: Hook names optimizations (#22403)

This commit dramatically improves the performance of the hook names feature by replacing the source-map-js integration with custom mapping code built on top of sourcemap-codec. Based on my own benchmarking, this makes parsing 3-4 times faster. (The bulk of these changes are in SourceMapConsumer.js.)

While implementing this code, I also uncovered a problem with the way we were caching source-map metadata that was causing us to potential parse the same source-map multiple times. (I addressed this in a separate commit for easier reviewing. The bulk of these changes are in parseSourceAndMetadata.js.)

Altogether these changes dramatically improve the performance of the hooks parsing code.

One additional thing we could look into if the source-map download still remains a large bottleneck would be to stream it and decode the mappings array while it streams in rather than in one synchronous chunk after the full source-map has been downloaded.",Brian Vaughn,2021-09-23T00:17:57Z
95502f7b2519d00ac71ca6a2869b3fcb76b3ab3f,"Update CodeSandbox to pull build artifacts from CI (#22400)

Instead of building them from source.

The `download-experimental-build` script polls CI until the build
has finished.",Andrew Clark,2021-09-22T18:35:56Z
51e017c523fe37489f8b5c9d75bb3a7a2dc7f2c8,"Revert ""[Old server renderer] Retry error on client (#22399)""

Going to revert this until we figure out error reporting. It looks like
our downstream infra already supports some type of error recovery so
we might not need it here.",Andrew Clark,2021-09-22T16:31:17Z
5a06072780e1323204cd7823665b3a95a0450747,"[Old server renderer] Retry error on client (#22399)

We're still in the process of migrating to the Fizz server renderer. In
the meantime, this makes the error semantics on the old server renderer
match the behavior of the new one: if an error is thrown, it triggers a
Suspense fallback, just as if it suspended (this part was already
implemented). Then the errored tree is retried on the client, where it
may recover and finish successfully.",Andrew Clark,2021-09-22T15:45:55Z
82c8fa90be86fc0afcbff2dc39486579cff1ac9a,"Add back useMutableSource temporarily (#22396)

Recoil uses useMutableSource behind a flag. I thought this was fine
because Recoil isn't used in any concurrent roots, so the behavior
would be the same, but it turns out that it is used by concurrent
roots in a few places.

I'm not expecting it to be hard to migrate to useSyncExternalStore, but
to de-risk the change I'm going to roll it out gradually with a flag. In
the meantime, I've added back the useMutableSource API.",Andrew Clark,2021-09-22T03:38:24Z
8fcfdfff7e61aeac82bd0482cff6af8e342ecadc,"Scrape warning messages in CI (#22393)

There's a downstream workflow that runs the `print-warnings` command. We
can make it faster by scraping the warnings in CI and storing the
result as a build artifact.",Andrew Clark,2021-09-22T02:03:01Z
ba07042c86b6e2e3dbbc930b2418d52c47ef7b47,Fix sizebot mistakenly detecting deleted files (#22394),Andrew Clark,2021-09-22T01:55:47Z
d56947eb2c2a0d1599975b90a353b06b58c0e00c,"Increase polling threshold for publish-prereleases (#22392)

The publish-preleases command prints the URL of the publish workflow
so that you can visit the page and follow along.

But it can take a few seconds before the workflow ID is available, after
you create the pipeline. So the script polls the workflow endpoint
until it's available.

The current polling limit is too low so I increased it.

I also updated the error message to provide more info.",Andrew Clark,2021-09-22T01:43:59Z
5b57bc6e31689ad715161cdcfa1b1d31eac2ba3b,"[Draft] don't patch console during first render (#22308)

Previously, DevTools always overrode the native console to dim or supress StrictMode double logging. It also overrode console.log (in addition to console.error and console.warn). However, this changes the location shown by the browser console, which causes a bad developer experience. There is currently a TC39 proposal that would allow us to extend console without breaking developer experience, but in the meantime this PR changes the StrictMode console override behavior so that we only patch the console during the StrictMode double render so that, during the first render, the location points to developer code rather than our DevTools console code.",Luna Ruan,2021-09-21T22:00:11Z
cf07c3df124fb43dfe14b3068c3a15e05bc4af1c,"Delete all but one `build2` reference (#22391)

This removes all the remaining references to the `build2` directory
except for the CI job that stores the artifacts. We'll keep the
`build2` artifact until downstream scripts are migrated to `build`.",Andrew Clark,2021-09-21T20:15:41Z
bb0d06935961732d37eb2d1ff706cdacea7003c9,"[build2 -> build] Local scripts

Update all our local scripts to use `build` instead of `build2`.

There are still downstream scripts that depend on `build2`, though, so
we can't remove it yet.",Andrew Clark,2021-09-21T19:12:52Z
162bb8c9780e20c988c42fe25e81da03c3fb9f6c,[build -> build2] Sizebot,Andrew Clark,2021-09-21T16:06:15Z
2375670a91c0925347ce285231828d4d0fa41c11,"Delete unused CI jobs

These were replaced by the `build_combined` job.",Andrew Clark,2021-09-21T17:49:25Z
f35287dda431fd48706b57f57df7dc4584e2ca30,[build2 -> build] -> download-build-artifacts,Andrew Clark,2021-09-21T16:13:32Z
e3c9cd9f412088f32b14b1224fa6768f419d5f45,Add COMMIT_SHA to build directory,Andrew Clark,2021-09-21T17:41:58Z
0c81d347b6856c0e0f1b1ca10654ce47f81f632e,"Write artifacts to `build` instead of `build2`

Now that all the CI jobs have been migrated to the new build script,
we can start renaming the `build2` directory to `build`.

Since there are lots of scripts that reference `build2`, including
downstream scripts that live outside this repo, I'm going to keep
the `build2` directory around as a copy of `build`.

Then once all the references are updated, I will delete the copy.",Andrew Clark,2021-09-21T16:02:14Z
baff3f2005f099f5d3c506d6d41ae977f41304f7,"Move build_devtools_and_process_artifacts (#22388)

This is the last CI job that needs to be migrated to the new workflow.",Andrew Clark,2021-09-21T15:51:51Z
7c6049695f384a8c0daa685649df32078e5926b8,"Move lint job to new, combined CI workflow (#22386)

* Move lint job to new, combined CI workflow

Moves the lint job our new, combined CI workflow.

After this, there is only one job remaining to be migrated. Then we
can delete the old workflow and build script.

* Remove ""stable"" CI workflow

This workflow is now empty so we can remove it",Andrew Clark,2021-09-21T15:16:26Z
4da03c9fbdaf955c637ea95679c32e9ac242992c,useSyncExternalStore React Native version (#22367),salazarm,2021-09-21T15:07:56Z
48d475c9ed20ab4344b3f1969716b76d8a476171,"correct typos (#22294)

Co-authored-by: Bowen Li <bowen31337@gmail.com>",Bowen,2021-09-21T15:05:41Z
fc574329668fed808759a797018752048d03ae89,"Move DOM fixtures test job to main CI workflow (#22385)

Moves the RELEASE_CHANNEL_stable_yarn_test_dom_fixtures job to our new,
combined CI workflow.

After this, there are only two jobs remaining to be migrated. Then we
can delete the old workflow and build script.",Andrew Clark,2021-09-21T15:00:28Z
cb6c619c07c2453692335a1c73109013e0c88769,Remove Fiber fields that were used for hydrating useMutableSource (#22368),Sebastian Silbermann,2021-09-20T20:12:30Z
64e70f82e99e5836307aeefbde6b58240531c1ab,[Fizz] add avoidThisFallback support (#22318),salazarm,2021-09-20T19:44:48Z
cbf6178ed3b450774a11bd2ca7735c2073cd1bc4,Fix links in packages/react-devtools/README.md (#22356),38elements,2021-09-20T19:10:29Z
acf8ada4c00105f933ea87ad425e83cdcd115ba0,"Fix typo in types.js (react-devtools-shared) (#22299)

Fix typo:

becuase -> because",Konstantin Popov,2021-09-20T19:09:59Z
c62d5831d3d66c19eb652f4f5d229acb1e85ff82,react-devtools\OVERVIEW.md --> fixed typos (#22372),BIKI DAS,2021-09-20T19:09:37Z
7e8fb98e140a520bbb723d5930cc657b5fb92488,Enabled enableProfilerChangedHookIndices feature flag for all builds (#22365),Brian Vaughn,2021-09-20T17:10:50Z
3ee7a004e59cc7d71e4d3fc698777b381f4ec719,devtools: Display actual ReactDOM API name in root type (#22363),Sebastian Silbermann,2021-09-20T15:44:21Z
79b8fc66704a9a24588bf41b25afbcd818358b80,"Implement getServerSnapshot in userspace shim (#22359)

* Convert useSES shim tests to use React DOM

Idea is that eventually we'll run these tests against an actual build of
React DOM 17 to test backwards compatibility.

* Implement getServerSnapshot in userspace shim

If the DOM is not present, we assume that we are running in a server
environment and return the result of `getServerSnapshot`.

This heuristic doesn't work in React Native, so we'll need to provide
a separate native build (using the `.native` extension). I've left this
for a follow-up.

We can't call `getServerSnapshot` on the client, because in versions of
React before 18, there's no built-in mechanism to detect whether we're
hydrating. To avoid a server mismatch warning, users must account for
this themselves and return the correct value inside `getSnapshot`.

Note that none of this is relevant to the built-in API that is being
added in 18. This only affects the userspace shim that is provided
for backwards compatibility with versions 16 and 17.",Andrew Clark,2021-09-20T15:32:13Z
86b3e2461da28d9c074b04f42e4ca69773902fec,"Implement useSyncExternalStore on server (#22347)

Adds a third argument called `getServerSnapshot`.

On the server, React calls this one instead of the normal `getSnapshot`.
We also call it during hydration.

So it represents the snapshot that is used to generate the initial,
server-rendered HTML. The purpose is to avoid server-client mismatches.
What we render during hydration needs to match up exactly with what we
render on the server.

The pattern is for the server to send down a serialized copy of the
store that was used to generate the initial HTML. On the client, React
will call either `getSnapshot` or `getServerSnapshot` on the client as
appropriate, depending on whether it's currently hydrating.

The argument is optional for fully client rendered use cases. If the
user does attempt to omit `getServerSnapshot`, and the hook is called
on the server, React will abort that subtree on the server and
revert to client rendering, up to the nearest Suspense boundary.

For the userspace shim, we will need to use a heuristic (canUseDOM)
to determine whether we are in a server environment. I'll do that in
a follow up.",Andrew Clark,2021-09-20T15:31:02Z
57e4d6872fe5786220d23aa4781ff33af65ffeaa,replace-fork: Cleanup after failure if no unstaged changes (#22364),Brian Vaughn,2021-09-20T15:10:17Z
293059e52b57f9debdb01a235e29c678cadfc476,"replace-fork should not clear uncommitted changes (#22348)

The replace-fork script depends on ESLint to fix the reconciler imports
— `.old` -> `.new` or vice versa. If ESLint crashes, it can leave the
imports in an incorrect state.

As a convenience, @bvaughn updated the script to automatically run
`git checkout -- .` if the ESLint command fails. An unintended
consequence of the strategy is that if the working directory is not
clean, then any uncommitted changes will be lost.

We need a better strategy for this that prevents the accidental loss of
work. One option is to exit early if the working directory is not clean
before you run the script, though that affects the usability of
the script.

An ideal solution would reset the working directory back to whatever
state it was in before the script ran, perhaps by stashing all the
changes and restoring them if the script aborts.

Until we think of something better, I've commmented out the branch.",Andrew Clark,2021-09-20T14:07:25Z
8209de269531767b33d8db26eda41db38bfb6a27,"Delete useMutableSource implementation (#22292)

This API was replaced by useSyncExternalStore",Andrew Clark,2021-09-20T04:11:50Z
f50ff357cf45d5cbda8d5a99c247e33b0477e936,DevTools: Fix memory leak via alternate Fiber pointer (#22346),Brian Vaughn,2021-09-17T16:53:07Z
bc9bb87c2b01bff8a15e02c8416addf6177e9055,Clear performance marks after measuring (#22345),Brian Vaughn,2021-09-17T14:46:42Z
1090ccd019fda0d039e2ded0089465c05a0a5dcd,[DevTools] Enable hook names in standalone app (#22320),Juan,2021-09-17T14:21:54Z
f2fd1b80d5501a0bce00641f383d18cbd24e3d32,Updated the utfDecodeString() method to avoid call stack exceeded error (#22330),Brian Vaughn,2021-09-17T13:52:52Z
b0803f255ba639aae5a6bd66d1234d12eb18d972,VerticalScrollView -> fixed  typos (#22341),BIKI DAS,2021-09-17T13:05:09Z
a7da457e6bdf474c0abc820c359f094475819cfd,Scheduling profiler: Fix typo in View.js (#22337),Ikko Ashimine,2021-09-17T13:04:51Z
a8cabb5648a14ef55cb96d679a526e3f731e9611,[DevTools] Fix runtime error when inspecting an element times out (#22329),Juan,2021-09-15T21:19:10Z
e8feb11b62e869804970258fa629922edbfc836b,"Fixed issue for better bundles,chunks and workers name in devtools-extensions. (#22322)",Abhay Gupta,2021-09-15T17:51:33Z
f4ac680c7a1db67cae2659f531bb5531833f5c2f,"Fixed broken build script --unsafe-partial flag (#22324)

This flag was broken due to a buggy race case in the ncp() command. The fix is amittedly a hack but improves on the existing behavior (of leaving the workspace in a broken state).",Brian Vaughn,2021-09-15T17:32:09Z
67222f044c582a1a10f3b9d15d9daf67d5dc5c4f,[Experiment] Warn if callback ref returns a function (#22313),Dan Abramov,2021-09-15T12:51:39Z
50263d3273b6fc983acc5b0fd52e670399b248b1,[DevTools] Add initial APIs for logging instrumentation events under feature flag (#22276),Juan,2021-09-14T15:10:24Z
263cfa6ecb9879ecb629d4e04a8c26422b4c4ff9,[Experimental] Add useInsertionEffect (#21913),Ricky,2021-09-14T14:27:09Z
806aaa2e21edf9e1b9317c4bf4157e422b693d14,"[useSES shim] Import prefixed native API (#22310)

Until useSyncExternalStore is finalized, the shim should import the
prefixed version (unstable_useSyncExternalStore), which is available
in the experimental builds. That way our early testers can start
using it.",Andrew Clark,2021-09-14T04:55:18Z
fd5e01c2e0dbbeaff954d13fc6bc11bfc65e7dcf,"[useSES/extra] Reuse old selection if possible (#22307)

When you pass an unmemoized selector to useSyncExternalStoreExtra, we
have to reevaluate it on every render because we don't know whether
it depends on new props.

However, after reevalutating it, we should still compare the result
to the previous selection with `isEqual` and reuse the old one if it
hasn't changed.

Originally I did not implement this, because if the selector changes due
to new props or state, the component is going to have to re-render
anyway. However, it's still useful to return a memoized selection
when possible, because it may be the input to a downstream memoization.

In the test I wrote, the example I chose is selecting a list of
items from the store, and passing the list as a prop to a memoized
component. If the list prop is memoized, we can bail out.",Andrew Clark,2021-09-13T21:26:41Z
33226fadaac7b23634852eee78c4f1c84c5b2bbb,"Check for store mutations before commit (#22290)

* [useSyncExternalStore] Remove extra hook object

Because we already track `getSnapshot` and `value` on the store
instance, we don't need to also track them as effect dependencies. And
because the effect doesn't require any clean-up, we don't need to track
a `destroy` function.

So, we don't need to store any additional state for this effect. We can
call `pushEffect` directly, and only during renders where something
has changed.

This saves some memory, but my main motivation is because I plan to use
this same logic to schedule a pre-commit consistency check. (See the
inline comments for more details.)

* Split shouldTimeSlice into two separate functions

Lanes that are blocking (SyncLane, and DefaultLane inside a blocking-
by-default root) are always blocking for a given root. Whereas expired
lanes can expire while the render phase is already in progress.

I want to check if a lane is blocking without checking whether it
expired, so I split `shouldTimeSlice` into two separate functions.

I'll use this in the next step.

* Check for store mutations before commit

When a store is read for the first time, or when `subscribe` or
`getSnapshot` changes, during a concurrent render, we have to check
at the end of the render phase whether the store was mutated by
an concurrent event.

In the userspace shim, we perform this check in a layout effect, and
patch up any inconsistencies by scheduling another render + commit.
However, even though we patch them up in the next render, the parent
layout effects that fire in the original render will still observe an
inconsistent tree.

In the native implementation, we can instead check for inconsistencies
right after the root is completed, before entering the commit phase. If
we do detect a mutaiton, we can discard the tree and re-render before
firing any effects. The re-render is synchronous to block further
concurrent mutations (which is also what we do to recover from tearing
bugs that result in an error). After the synchronous re-render, we can
assume the tree the tree is consistent and continue with the normal
algorithm for finishing a completed root (i.e. either suspend
or commit).

The result is that layout effects will always observe a consistent tree.",Andrew Clark,2021-09-13T15:07:46Z
86c7ca70a9965c18e504cafc24753c1edbe36749,"Fix link (#22296)

Fix link (branch master was renamed to main): 

master -> main",Konstantin Popov,2021-09-12T15:09:53Z
e73911e715866df69bc6a9ae8b372cccbe8dceb1,"Clean up my ""hard to read"" code (#22295)",Ricky,2021-09-11T19:05:54Z
d2f08dd40d87376d7d2200ab5463cb79e67f343d,DevTools: Add missing param to fetchFromPage() (#22291),Brian Vaughn,2021-09-10T20:26:46Z
81db4eb1d1178cb84b8b20df090a952f9dffac7d,"Replaced network.onRequestFinished() caching with network.getHAR() (#22285)

Replaced network.onRequestFinished() caching with network.getHAR() so that we can avoid redundantly (pre) caching JavaScript content. In the event that the HAR log doesn't contain a match, we'll fall back to fetching from the Network (and hoping for a cache hit from that layer).

I've tested both internally (internal Facebook DEV server) and externally (Code Sandbox) and it seems like this approach results in cache hits, so long as DevTools is opened when the page loads. (Otherwise it falls back to fetch().)",Brian Vaughn,2021-09-10T19:11:18Z
0fd195f2955478636ccab840676c19bb29874b96,"update error message to include useLayoutEffect or useEffect on bad e… (#22279)

* update error message to include useLayoutEffect or useEffect on bad effect return

* Update packages/react-reconciler/src/ReactFiberCommitWork.new.js

Co-authored-by: Ricky <rickhanlonii@gmail.com>

* use existing import

Co-authored-by: Ricky <rickhanlonii@gmail.com>",salazarm,2021-09-10T16:19:51Z
cb8a50619b11acbc821ee0ac901e245f35fad7c7,[DevTools] Add React Devtools Extension Startup and File Structure to OVERVIEW.md (#22283),Luna Ruan,2021-09-09T22:58:27Z
43cf06daf929272f32758dc73c9240887e908f87,[DevTools] Fix `react-devtools-extension` build error and `react-devtools-inline`'s `package.json` (#22281),Luna Ruan,2021-09-09T21:26:13Z
96814e71b2ec13af64cd2670c9e69ab982ab2951,"Revert Suspense cache Thenable.catch() change (#22280)

Reverts part of #22275 (adding .catch() to Thenables in Suspense caches) in response to #22275 (comment).

After taking another look with fresh eyes, I think I see the ""uncaught error"" issue I initially noticed was in checkForUpdate() (which did not pass an error handler to .then)",Brian Vaughn,2021-09-09T19:26:41Z
225740be4864ee8eeb349b38b329291450245578,"Add named hooks support to react-devtools-inline (#22263)

This commit builds on PR #22260 and makes the following changes:
* Adds a DevTools feature flag for named hooks support. (This allows us to disable it entirely for a build via feature flag.)
* Adds a new Suspense cache for dynamically imported modules. (This allows a component to suspend while importing an external code chunk– like the hook names parsing code).
* DevTools supports a hookNamesModuleLoaderFunction param to import the hook names module. I wish this could be handles as part of the react-devtools-shared package, but I'm not sure how to configure Webpack (4) to serve the chunk from react-devtools-inline. This seemed like a reasonable workaround.

The PR also contains an additional unrelated change:
* Removes pre-fetch optimization (added in DevTools: Improve named hooks network caching #22198). This optimization was mostly only important for cases where sources needed to be re-downloaded, something which we can now avoid in most cases¹ thanks to using cached responses already loaded by the page. (I tested this locally on Facebook and this change has no negative performance impact. There is still some overhead from serializing the JS through the Bridge but that's constant between the two approaches.)

¹ The case where we don't benefit from cached responses is when DevTools are opened after the page has already loaded certain scripts. This seems uncommon enough that I don't think it justified the added complexity of prefetching.",Brian Vaughn,2021-09-09T19:25:26Z
8f96c6b2ac3ff0e38f60c87b1f08deb9993526b5,"[Bugfix] Prevent infinite update loop caused by a synchronous update in a passive effect (#22277)

* Add test that triggers infinite update loop

In 18, passive effects are flushed synchronously if they are the
result of a synchronous update. We have a guard for infinite update
loops that occur in the layout phase, but it doesn't currently work for
synchronous updates from a passive effect.

The reason this probably hasn't come up yet is because synchronous
updates inside the passive effect phase are relatively rare: you either
have to imperatively dispatch a discrete event, like `el.focus`, or you
have to call `ReactDOM.flushSync`, which triggers a warning. (In
general, updates inside a passive effect are not encouraged.)

I discovered this because `useSyncExternalStore` does sometimes
trigger updates inside the passive effect phase.

This commit adds a failing test to prove the issue exists. I will fix
it in the next commit.

* Fix failing test added in previous commit

The way we detect a ""nested update"" is if there's synchronous work
remaining at the end of the commit phase.

Currently this check happens before we synchronously flush the passive
effects. I moved it to after the effects are fired, so that it detects
whether synchronous work was scheduled in that phase.",Andrew Clark,2021-09-09T15:14:30Z
24c2e27256b8f2051bde626598f2fba34efd109b,DevTools Suspense cache cleanup (#22275),Brian Vaughn,2021-09-09T13:28:17Z
4ce89a58dac5287a2c7fc454e86562297e97a6d9,"Test bad useEffect return value with noop-renderer (#22258)

* Test bad useEffect return value with noop-renderer

* Use previous ""root""-approach

Tests should now be invariant under variants

* Add same test for layout effects",Sebastian Silbermann,2021-09-08T22:58:53Z
a3fde2358896e32201f49bc81acd2f228951ca84,"Detect subscriptions wrapped in startTransition (#22271)

* Detect subscriptions wrapped in startTransition",salazarm,2021-09-08T21:01:09Z
95d762e406bd37c07693e3a5ddbd0f75289e8c3f,"Remove duplicate test

Accidentally committed two copies of this test during a rebase.",Andrew Clark,2021-09-08T15:49:30Z
d4d1dc085d1332fdd5025c292adcb5b39811e5b5,"Reorder VARIANT feature flags (#22266)

* Move variant tests up

* Add a comment",Dan Abramov,2021-09-07T22:28:38Z
fbce2d52749ff64a156c3f9cd6eb32715bb76e37,"Fix #21972: Add `onResize` event to video elements (#21973)

* Fix #21972: Add `onResize` event to video elements

This is a simple fix for #21972 that adds support for the `onResize` media event.

I created a separate `videoEventTypes` array since I doubt anyone will want to add `onResize` to an audio event. It would simplify the code a bit to just add `resize` to the `mediaEventTypes` array, if that’s preferred.

Pre-commit checklist ([source](https://reactjs.org/docs/how-to-contribute.html#sending-a-pull-request))

✅ Fork the repository and create your branch from `main`.
✅ Run `yarn` in the repository root.
✅ If you’ve fixed a bug or added code that should be tested, add tests!
✅ Ensure the test suite passes (`yarn test`). Tip: `yarn test --watch TestName` is helpful in development.
✅ Run `yarn test --prod` to test in the production environment.
✅ If you need a debugger, run `yarn debug-test --watch TestName`, open chrome://inspect, and press “Inspect”.
✅ Format your code with prettier (`yarn prettier`).
✅ Make sure your code lints (`yarn lint`). Tip: `yarn linc` to only check changed files.
✅ Run the Flow typechecks (`yarn flow`).
✅ If you haven’t already, complete the CLA.

* Consolidate `videoEventTypes` array into `mediaEventTypes`",Riley Shaw,2021-09-07T22:28:19Z
2f156eafb83d129a729947ac2bd7089d20b208ab,Adjust consoleManagedByDevToolsDuringStrictMode feature flag (#22253),Dan Abramov,2021-09-07T18:51:12Z
cfd81933286f3a63734ba0ac1650019487c402ff,"Add useSyncExternalStore to react-debug-tools (#22240)

Adds support for useSyncExternalStore to react-debug-tools, which in
turn adds support for React Devtools.

Test plan: I added a test to ReactHooksInspectionIntegration, based on
existing one for useMutableSource.",Andrew Clark,2021-09-07T17:58:20Z
8e80592a3ab2bdbd036f5af77c89fcf937b8f43b,"Remove state queue from useSyncExternalStore (#22265)

The userspace shim of useSyncExternalStore uses a useState hook because
it's the only way to trigger a re-render. We don't actually use the
queue to store anything, because we read the current value directly
from the store.

In the native implementation, we can schedule an update on the fiber
directly, without the overhead of a queue.",Andrew Clark,2021-09-07T17:27:01Z
06f98c168060ef0213526a1aee696a568cec7f54,"Implement useSyncExternalStore in Fiber (#22239)

This adds an initial implementation of useSyncExternalStore to the
fiber reconciler. It's mostly a copy-paste of the userspace
implementation, which is not ideal but is a good enough starting place.

The main change we'll want to make to this native implementation is to
move the tearing checks from the layout phase to an earlier, pre-commit
phase so that code that runs in the commit phase always observes a
consistent tree.

Follow-ups:

- Implement in Fizz
- Implement in old SSR renderer
- Implement in react-debug-hooks",Andrew Clark,2021-09-07T17:22:05Z
77912d9a05d7a90287fabdec76486f25869b2981,"Wire up the native API for useSyncExternalStore (#22237)

Adds useSyncExternalStore to the internal dispatcher, and exports
the native API from the React package without yet implementing it.",Andrew Clark,2021-09-07T17:20:24Z
031abd24b62b7b0db2e8658ffce7728eb8592d32,"Add warning and test for useSyncExternalStore when getSnapshot isn't cached (#22262)

* add warning and test

* Wrap console error in __DEV__ flag

* prettier",salazarm,2021-09-07T16:08:33Z
e07039bb61e3d006ad552ab7754acbc91f7b8619,Moved named hooks code (and tests) from react-devtools-extensions to react-devtools-shared (#22260),Brian Vaughn,2021-09-07T15:44:49Z
abbc79d6fdaf4802951f52270b757c068cebe826,[DevTools] Only call originalPositionFor once (#22181),Juan,2021-09-07T14:39:55Z
771da6e27ba196cd0c5f3472164a0221b4d8a690,Update PULL_REQUEST_TEMPLATE.md,Dan Abramov,2021-09-07T06:54:34Z
d1f51f34535d00b5985744b0acb45c7f35ab90c6,"[package:react-dom] updateREADME's Class Component to Function Component (#21829)

* [package:react-dom] updateREADME's Class Component to Function Component

* Update README.md

Co-authored-by: Dan Abramov <dan.abramov@gmail.com>",Ryota Murakami,2021-09-06T20:23:13Z
b8884de24e2ca7ff2c05d9c5e9d06470816b60c2,"break up import keyword to avoid being accidentally parsed as dynamic import statement in external code (#21918)

Co-authored-by: zhengjianhua <zhengjianhua.michael@bytedance.com>",Jianhua Zheng,2021-09-06T20:20:33Z
6d6bba5bfc4f62da38ae5ae2c24748cbaa10e6a9,"Fix typo in ReactUpdatePriority-test.js (#21958)

continous -> continuous",Ikko Ashimine,2021-09-06T20:16:05Z
37abc9941835e483e609366fe3dba1463eddd9d9,Build ReactDOMServer on CodeSandbox CI (#22255),Dan Abramov,2021-09-06T20:00:36Z
b394c38e880e1b3ee7ed03b26bc7c24f61827dbc,"feat(eslint-plugin-react-internal): support ESLint 8.x (#22249)

Co-authored-by: Dan Abramov <dan.abramov@gmail.com>",Michaël De Boey,2021-09-06T19:42:40Z
6f64eb5aa0cd8d56e71cb3338c9bc49c9d5f32d2,Update PULL_REQUEST_TEMPLATE.md,Dan Abramov,2021-09-06T19:36:46Z
cdb08ebe0ac18b5afe1b5b587e8d0968bb754a60,Update PULL_REQUEST_TEMPLATE.md,Dan Abramov,2021-09-06T19:36:24Z
0c0d1ddae4be922f800705ae686fbb887184b38b,feat(eslint-plugin-react-hooks): support ESLint 8.x (#22248),Michaël De Boey,2021-09-06T19:17:51Z
380284a2b4a1c431b197d7cac7bfaa7930ed102e,"Add aria-description to the list of known ARIA attributes (#22142)

* Update validAriaProperties.js

https://w3c.github.io/aria/#aria-description is a valid aria property.

* Sort alphabetically

Co-authored-by: Dan Abramov <dan.abramov@gmail.com>",Mahyar Ebadi,2021-09-06T19:12:51Z
c46c0733e2bebb298fc3294256c678b27d1cc640,Typo fixed (#22171),Kausik S S,2021-09-06T19:05:15Z
6a56ea89bcd72b3186553d48d7101b8d421fdfc6,"Bump tar from 5.0.5 to 5.0.11 (#22223)

Bumps [tar](https://github.com/npm/node-tar) from 5.0.5 to 5.0.11.
- [Release notes](https://github.com/npm/node-tar/releases)
- [Changelog](https://github.com/npm/node-tar/blob/main/CHANGELOG.md)
- [Commits](https://github.com/npm/node-tar/compare/v5.0.5...v5.0.11)

---
updated-dependencies:
- dependency-name: tar
  dependency-type: indirect
...

Signed-off-by: dependabot[bot] <support@github.com>

Co-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>",dependabot[bot],2021-09-06T19:03:12Z
99f9de9a6ae07fe4e34b96c1a931e8b403409bfd,"Fix typo in ReactDOMServerFormatConfig.js (#22203)

Fix typo:

TOOD -> TODO",Konstantin Popov,2021-09-06T18:58:46Z
1314299c7f70914d61d8e1cef56767f112110674,"Initial shim of useSyncExternalStore (#22211)

This sets up an initial shim implementation of useSyncExternalStore,
via the use-sync-external-store package. It's designed to mimic the
behavior of the built-in API, but is backwards compatible to any version
of React that supports hooks.

I have not yet implemented the built-in API, but once it exists, the
use-sync-external-store package will always prefer that one. Library
authors can depend on the shim and trust that their users get the
correct implementation.

See https://github.com/reactwg/react-18/discussions/86 for background
on the API.

The tests I've added here are designed to run against both the shim and
built-in implementation, using our variant test flag feature. Tests that
only apply to concurrent roots will live in a separate suite.",Andrew Clark,2021-09-02T00:52:38Z
3385b377f715af2a02ab00c0fa7dd3933d73a13a,React DevTools 4.17.0 -> 4.18.0 (#22234),Luna Ruan,2021-09-01T20:39:36Z
2b7214033e6ba15f2616012f39ae1f1ee0e573a3,[DevTools] Fix Issue in release script where commits for the last DevTools release are undefined #22233,Luna Ruan,2021-09-01T19:56:39Z
ac8fc34e61d797b0ff88765c05811fe2e21aad79,remove dist folder in release script for standalone and inline before building (#22232),Luna Ruan,2021-09-01T19:16:00Z
fc40f02adb2d11e4936cc31119c7a45acc471a7a,Add consoleManagedByDevToolsDuringStrictMode feature flag in React Reconciler (#22196),Luna Ruan,2021-09-01T18:56:52Z
9fc04eaf3fb701cdc14f57d5aed48f3126af6c94,"DevTools: Improve named hooks network caching (#22198)

While testing the recently-launched named hooks feature, I noticed that one of the two big performance bottlenecks is fetching the source file. This was unexpected since the source file has already been loaded by the page. (After all, DevTools is inspecting a component defined in that same file.)

To address this, I made the following changes:
- [x] Keep CPU bound work (parsing source map and AST) in a worker so it doesn't block the main thread but move I/O bound code (fetching files) to the main thread.
- [x] Inject a function into the page (as part of the content script) to fetch cached files for the extension. Communicate with this function using `eval()` (to send it messages) and `chrome.runtime.sendMessage()` to return its responses to the extension).

With the above changes in place, the extension gets cached responses from a lot of sites- but not Facebook. This seems to be due to the following:
* Facebook's response headers include [`vary: 'Origin'`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Vary).
* The `fetch` made from the content script does not include an `Origin` request header.

To reduce the impact of cases where we can't re-use the Network cache, this PR also makes additional changes:
- [x] Use `devtools.network.onRequestFinished` to (pre)cache resources as the page loads them. This allows us to avoid requesting a resource that's already been loaded in most cases.
- [x] In case DevTools was opened _after_ some requests were made, we also now pre-fetch (and cache in memory) source files when a component is selected (if it has hooks). If the component's hooks are later evaluated, the source map will be faster to access. (Note that in many cases, this prefetch is very fast since it is returned from the disk cache.)

With the above changes, we've reduced the time spent in `loadSourceFiles` to nearly nothing.",Brian Vaughn,2021-09-01T18:10:07Z
67f38366a570f292d51614ffa450af10628f6681,Add consoleManagedByDevToolsDuringStrictMode feature flag in DevTools #22215,Luna Ruan,2021-08-30T22:16:53Z
597ecd6a0ceebef63edc4c6bc501fe3695790fc6,[DevTools] Throw error in console without interfering with logs (#22175),Luna Ruan,2021-08-30T21:37:49Z
36f0005b994aa429d4d8f7ac6c1cab3cacf76385,"added react native feature flags (#22199)

lunaruan commented 3 days ago • 
This PR adds separate DevTools feature flag configurations for react-devtools-core. It also breaks the builds down into facebook specific and open source flags so we can experiment in React Native.

Tested yarn build:standalone, yarn build:backend, yarn build:standalone:fb, and yarn build:backend:fb and inspected the output to make sure each package used the correct feature flags (the first two use core-oss and the latter two use fb-oss.",Luna Ruan,2021-08-30T21:12:52Z
5037b4e2e6e3f9136cdc52581828f59e7dcd2043,devtools: Don't display hook index of useContext (#22200),Sebastian Silbermann,2021-08-30T19:44:12Z
46a0f050aacd8b2159b8db99b599a4b69e682189,"Set up use-sync-external-store package (#22202)

This package will be a shim for the built-in useSyncExternalStore API
(not yet implemented).",Andrew Clark,2021-08-28T20:57:47Z
8723e772b98d1a61aa0170981483c4da1e9237c5,Fix a string interpolation typo in ReactHooks test (#22174),Matt Hargett,2021-08-26T19:35:06Z
0ba0564aeea73b496264b6b2031b990a783cc142,[DevTools] Add utils for perfomance marks (#22180),Juan,2021-08-26T17:05:15Z
2bf2e76d366439766ab6b4acb851a65963490920,Add performance marksf or individual fetch() requests (#22176),Brian Vaughn,2021-08-26T13:19:00Z
60a30cf32e1f974b82f0c7da9d8a03822e5b5208,"Console Logging for StrictMode Double Rendering (#22030)

React currently suppress console logs in StrictMode during double rendering. However, this causes a lot of confusion. This PR moves the console suppression logic from React into React Devtools. Now by default, we no longer suppress console logs. Instead, we gray out the logs in console during double render. We also add a setting in React Devtools to allow developers to hide console logs during double render if they choose.",Luna Ruan,2021-08-25T22:35:38Z
8456457c8d7766984b1bc030b14efb890ef47be2,Added performance timings to DevTools named hooks parsing (#22173),Brian Vaughn,2021-08-25T19:39:15Z
b9964684bd8c909fc3d88f1cd47aa1f45ea7ba32,DevTools release script updates: (#22170),Brian Vaughn,2021-08-24T22:59:34Z
582858083ee5de37e32f5a6b72654415774ad162,React DevTools 4.16.0 -> 4.17.0,Brian Vaughn,2021-08-24T18:12:42Z
b5fbf5464b7af9c0ba5d7eb32a03f0a17e54a413,Automated DevTools release process (#22161),Brian Vaughn,2021-08-24T18:05:50Z
76bbad3e34bc3403ddbe59e12845e8643dbb8d9f,Add maxYieldMs feature flag in Scheduler (#22165),Ricky,2021-08-24T17:03:07Z
b0b53ae2c1f38a7bf82b537dafb5f60f1bf14d0d,Add feature flags for scheduler experiments (#22105),Ricky,2021-08-24T16:47:51Z
edfe50510b4129295cbe49f05d7b94bbfc48da5b,"DevTools: Replaced WeakMap with LRU for inspected element cache (#22160)

We use an LRU for this rather than a WeakMap because of how the ""no-change"" optimization works.

When the frontend polls the backend for an update on the element that's currently inspected, the backend will send a ""no-change"" message if the element hasn't updated (rendered) since the last time it was asked. In thid case, the frontend cache should reuse the previous (cached) value. Using a WeakMap keyed on Element generally works well for this, since Elements are mutable and stable in the Store. This doens't work properly though when component filters are changed, because this will cause the Store to dump all roots and re-initialize the tree (recreating the Element objects).

So instead we key on Element ID (which is stable in this case) and use an LRU for eviction.",Brian Vaughn,2021-08-23T23:22:31Z
bd5bf555e1167e7088a4391e5cd419dccb39714c,"add more detailed error handling if profiling data does not have any React marks (#22157)

Co-authored-by: Brian Vaughn <brian.david.vaughn@gmail.com>",Byron Luk,2021-08-23T15:01:00Z
0da5ad09db7ac8c0f86142f7e5ff1f72e6d33810,Renames master to main in fixtures/flight webpack config file (#21998),Junaid Farooq,2021-08-23T14:55:37Z
4df10c58716a0118d753ac314dcb88f06b6d5a3d,Yarn replace-fork should not silently error (#22156),Brian Vaughn,2021-08-22T20:53:07Z
fc3b6a4118de30ae76f67c2be3d463679c11f4b7,"Fix a few typos (#22154)

Co-authored-by: Bowen Li <bowen31337@gmail.com>",Bowen,2021-08-22T18:11:35Z
f5e529176eb676caa4ac0577f83efd5e464b3ccf,"Fix typo in preprocessData.js (#22150)

Fix typo:

SUSPEND_DURING_UPATE  ->  SUSPEND_DURING_UPDATE",Konstantin Popov,2021-08-22T17:37:36Z
9e8fe11e118c07713c7af4458b70aae57c889394,"[DevTools] Keep query params in extracted source map urls (#22148)

## Summary

Our current logic for extracting source map urls assumed that the url contained no query params (e.g. `?foo=bar`), and when extracting the url we would cut off the query params. I noticed this during internal testing, since removing the query params would cause loading source maps to fail.

This commit fixes that behavior by ensuring that our regex captures the full url, including query params.

## Test Plan

- yarn flow
- yarn test
- yarn test-build-devtools
- added new regression tests 
- named hooks still work on manual test of browser extension on a few different apps (code sandbox, create-react-app, internally).",Juan,2021-08-20T22:04:30Z
83205c0aea3226eac063910bab128f3258d7c7dc,[DevTools] Add options for disabling some features (#22136),Holger Benl,2021-08-20T16:55:50Z
75a3e9fa4074b4b18ee95398ceabc361a6c9f82e,DevTools: Reset cached indices in Store after elements reordered (#22147),Brian Vaughn,2021-08-20T16:53:28Z
b6ff9ad1630b4f1d7cb98e9b9ec46bca315bb302,DevTools: update error indices when elements are added/removed (#22144),Sebastian Silbermann,2021-08-20T15:55:42Z
986d0e61d7085d4b8eea0386235d1b5ca9f47349,"[Scheduler] Add tests for isInputPending (#22140)

This feature was already implemented but we didn't have any tests. So
I wrote some.",Andrew Clark,2021-08-20T13:57:29Z
d54be90be658afca13c3f882ff28de14e0bd35ad,"Set up test infra for dynamic Scheduler flags (#22139)

I copied the set up we use for React.

In the www-variant test job, the Scheduler `__VARIANT__` flags will be
`true`. When writing a test, we can read the value of the flag with the
`gate` pragma and method.

Note: Since these packages are currently released in lockstep, maybe we
should remove SchedulerFeatureFlags and use ReactFeatureFlags for both.",Andrew Clark,2021-08-20T13:56:20Z
64f83a6fd24ddfcc74607e0e55b3fc9fe0d3c9b3,"Replace ""source-map"" library with ""source-map-js"" (#22126)",Brian Vaughn,2021-08-19T15:25:38Z
aa25824f3ebbdbbea01be48417f2f99251be1a12,"Scheduling profiler: Fix tooltip wheel event regression (#22130)

Panning horizontally via mouse wheel used to allow you to scrub over snapshot images. This was accidentally broken by a recent change. The core of the fix for this was to update `useSmartTooltip()` to remove the dependencies array so that a newly rendered tooltip is positioned even if the mouseX/mouseY coordinates don't change (as they don't when panning via wheel).

I also cleaned a couple of unrelated things up while doing this:
* Consolidated hover reset logic formerly split between `CanvasPage` and `Surface` into the `Surface` `handleInteraction()` function.
* Cleaned up redundant ref setting code in EventTooltip.",Brian Vaughn,2021-08-18T23:51:34Z
42ef45b1294ec4f0ee0f5318dc24721ba226852e,"[DevTools] Using array destructuring without assigning first variable does not error (#22129)

## Summary

Before this commit, if a hook returned an array the was destructured, but without assigning a variable to the first element in the array, this would produce an error. This was detected via internal testing.

This commit fixes that and adds regression tests.


## Test Plan

- yarn flow
- yarn test
- yarn test-build-devtools
- added new regression tests 
- named hooks still work on manual test of browser extension on a few different apps (code sandbox, create-react-app, internally).",Juan,2021-08-18T22:26:57Z
f1db9c30cc42b4fa8df748a31180b2a68f563e0f,"[DevTools] Support object destructuring pattern without runtime errors (#22128)

## Summary

Before this commit, if a hook returned an object and we declared a variable using object destructuring on the returned value, we would produce a runtime error. This was detected via internal testing.

This commit fixes that and adds regression tests.


## Test Plan

- yarn flow
- yarn test
- yarn test-build-devtools
- added new regression tests 
- named hooks still work on manual test of browser extension on a few different apps (code sandbox, create-react-app, internally).",Juan,2021-08-18T22:17:29Z
7ed0706d7ec9907e8fd19c4cf0e8625733cf2a1c,"Remove the warning for setState on unmounted components (#22114)

* Remove warning for setState on unmounted components

* Trigger CI",Dan Abramov,2021-08-18T20:50:02Z
6abda7f4f24a955aa79a145f91dafae2805735ad,"[DevTools] Access metadata in source maps correctly accounting for different formats (#22096)

## Summary

Follow up from https://github.com/facebook/react/pull/22010.

The initial implementation of named hooks and for looking up hook name metadata in an extended source map both assumed that the source maps would always have a `sources` field available, and didn't account for the source maps in the [Index Map](https://sourcemaps.info/spec.html#h.535es3xeprgt) format, which contain a list of `sections` and don't have the `source` field available directly. 

In order to properly access metadata in extended source maps, this commit:

-  Adds a new `SourceMapMetadataConsumer` api, which is a fork / very similar in structure to the corresponding [consumer in Metro](https://github.com/facebook/metro/blob/2b44ec39b4bca93e3e1cf1f268b4be66f894924a/packages/metro-symbolicate/src/SourceMetadataMapConsumer.js#L56) (as specified by @motiz88 in https://github.com/facebook/react/issues/21782.
- Updates `parseHookNames` to use this new api

## Test Plan

- yarn flow
- yarn test
- yarn test-build-devtools
- added new regression tests covering the index map format
- named hooks still work on manual test of browser extension on a few different apps (code sandbox, create-react-app, internally).",Juan,2021-08-18T18:30:31Z
f51579fffeac46a783f765786f5287644b1fa7eb,Scheduling Profiler: Add network measures (#22112),Brian Vaughn,2021-08-18T16:17:59Z
9eb2aaaf8181743481bdce955ab3b5e9bbacac90,Fixed ReactSharedInternals export in UMD bundle (#22117),Brian Vaughn,2021-08-18T05:40:55Z
bd255700d73ed5fa88f9e32fa4b43623679adf0c,Show a soft error when a text string or number is supplied as a child to non text wrappers (#22109),Sota,2021-08-17T01:43:24Z
424fe587087d05302259d6d5ebb359675387f3b1,"Revert ""Show a soft error when a text string or number is supplied as a child to non text wrappers (#21953)"" (#22108)

This reverts commit e9b2028b3280c15138bd92b0d27ffa066de3d5ca.",Sota,2021-08-17T00:53:23Z
aebf3b456b320a931c7a292f9c5948ee57c8174f,"[Scheduler] Check for continuous input events (#22107)

* [Scheduler] Track start of current chunk

Currently in `shouldYield`, we compare the current time to a deadline
that is pre-computed at the beginning of the current chunk.

However, since we use different deadlines depending on whether an input
event is pending, it makes more sense to track the start of the current
chunk and check how much time has elapsed since then.

Doesn't change any behavior, just refactors the logic.

* [Scheduler] Check for continuous input events

`isInputPending` supports a `includeContinuous` option. When set to
`true`, the method will check for pending continuous inputs, like
`mousemove`, in addition to discrete ones, like `click`.

We will only check for pending continuous inputs if we've blocked the
main thread for a non-neglible amount of time. If we've only blocked
the main thread for, say, a few frames, then we'll only check for
discrete inputs.

I wrote a test for this but didn't include it because we haven't yet set
up the `gate` flag infra to work with Scheduler feature flags. For now,
I ran the test locally.

* Review nits",Andrew Clark,2021-08-16T22:48:50Z
152ecce117d29ee2b3823f6c46b890f2f06ee8cd,DevTools 4.15.0 -> 4.16.0 (#22104),Luna Ruan,2021-08-16T21:55:47Z
f6ec4661dbd76c53ab23f3b1565012b9df0a6ff0,make parseHookNames a separate bundle (#22102),Luna Ruan,2021-08-16T20:46:46Z
55d01aa0f391f62e697031c51d058405049eabc2,Scheduling profiler: Canvas views clip by default (#22100),Brian Vaughn,2021-08-16T17:20:07Z
bc4e75112195429b3d76c21caad86abc607cc8b8,Typo: 'occured' -> 'occurred' in comment (#22094),Tommy Groshong,2021-08-15T21:25:22Z
89910635f7832382a9431615855cedfd2ba70396,Scheduling Profiler: Inline snapshots (#22091),Brian Vaughn,2021-08-14T15:10:36Z
54e170c79493dea734b95b0fddbf8f0bfc99bff7,[DevTools] Add screenshots to Scheduling Profiler (#22088),Brian Vaughn,2021-08-13T21:14:29Z
e4e8226c625220944819c9237346569f09ad90a9,"Fixed Components tree indentation bug for Chrome extension (#22083)

By upgrading react-virtualized-auto-sizer to 1.0.6

See https://github.com/bvaughn/react-virtualized-auto-sizer/pull/39",Brian Vaughn,2021-08-13T00:41:56Z
82583617b7842008f537653ffb3fae4858213b00,"Updated DevTools CHANGELOG

Fixed header typo",Brian Vaughn,2021-08-12T15:03:33Z
c2bb97533716469c197353a2dbcb0ee5c54263be,Added Scheduling Profiler notes and videos to the DevTools CHANGELOG,Brian Vaughn,2021-08-12T15:02:30Z
07e58658c9bb182eab436c5fe9e1e66078ea0b19,Add script to generate DevTools changelog text (#22077),Brian Vaughn,2021-08-12T14:43:56Z
ef582fbea13052a1b667eab8c6d339c39f51c5e6,Added taneliang and kartikcho to scheduling profiler credits,Brian Vaughn,2021-08-11T21:48:37Z
c6f2188ed6e8d44c73e61aa1ebfd10c9e066d5b3,DevTools 4.14.0 -> 4.15.0,Juan,2021-08-11T20:47:20Z
531c97ef7a2167eac82c16bfd8cccb5eaba71f27,"[DevTools] Updated source map extension format + more precise types (#22073)

## Summary

Follow up from https://github.com/facebook/react/pull/22010.

As suggested by @motiz88, update the way the react sources metadata is stored within the fb sources metadata. Specifically,  instead of `x_facebook_sources` directly containing a hook map in the second position of the metadata tuple for a given source, it contains the react sources metadata itself, which is also a tuple of react sources metadata for a given source, and which contains the hook map in the first position. This way the react sources metadata tuple can be extended to contain more react-specific metadata without taking up more positions in the top-level facebook sources metadata.

As part of this change:
- Adds more precise Flow types, mostly borrowed from Metro
- Fixes the facebook sources field name (we were using `x_fb_sources` but it should be `x_facebook_sources`

## Test Plan

- yarn flow
- yarn test
- yarn test-build-devtools",Juan,2021-08-11T19:46:22Z
ad150533d6b114bb5dfc51d103b2c8044ce52790,Updated @reach packages to fix unmount bug (#22075),Brian Vaughn,2021-08-11T18:43:25Z
280e3f936f89583b44e10f29ed0ed0155b50ab8a,"DevTools: Scheduling profiler: Add vertical scroll bar (#22005)

Co-authored-by: E-Liang Tan <eliang@eliangtan.com>",Brian Vaughn,2021-08-11T18:19:45Z
88d121899aca8fec537003360010f077f0880541,"[DevTools] Support extended source maps with named hooks information (#22010)

## Summary

Adds support for statically extracting names for hook calls from source code, and extending source maps with that information so that DevTools does not have to directly parse source code at runtime, which will speed up the Named Hooks feature and allow it to be enabled by default.

Specifically, this PR includes the following parts:

- [x] Adding logic to statically extract relevant hook names from the parsed source code (i.e. the babel ast). Note that this logic differs slightly from the existing logic in that the existing logic also uses runtime information from DevTools (such as whether given hooks are a custom hook) to extract names for hooks, whereas this code is meant to run entirely at build time, so it does not rely on that information.
- [x] Generating an encoded ""hook map"", which encodes the information about a hooks *original* source location, and it's corresponding name. This ""hook map"" will be used to generate extended source maps, included tentatively under an extra `x_react_hook_map` field. The map itself is formatted and encoded in a very similar way as how the `names` and `mappings` fields of a standard source map are encoded ( = Base64 VLQ delta coding representing offsets into a string array), and how the ""function map"" in Metro is encoded, as suggested in #21782. Note that this initial version uses a very basic format, and we are not implementing our own custom encoding, but reusing the `encode` function from `sourcemap-codec`.
- [x] Updating the logic in `parseHookNames` to check if the source maps have been extended with the hook map information, and if so use that information to extract the hook names without loading the original source code. In this PR we are manually generating extended source maps in our tests in order to test that this functionality works as expected, even though we are not actually generating the extended source maps in production.

The second stage of this work, which will likely need to occur outside this repo, is to update bundlers such as Metro to use these new primitives to actually generate source maps that DevTools can use.

### Follow-ups

- Enable named hooks by default when extended source maps are present
- Support looking up hook names when column numbers are not present in source map.
- Measure performance improvement of using extended source maps (manual testing suggests ~4 to 5x faster)
- Update relevant bundlers to generate extended source maps.

## Test Plan

- yarn flow
- Tests still pass
  - yarn test
  - yarn test-build-devtools
- Named hooks still work on manual test of browser extension on a few different apps (code sandbox, create-react-app, facebook).
- For new functionality:
  - New tests for statically extracting hook names.
  - New tests for using extended source maps to look up hook names at runtime.",Juan,2021-08-11T14:46:19Z
e9b2028b3280c15138bd92b0d27ffa066de3d5ca,"Show a soft error when a text string or number is supplied as a child to non text wrappers (#21953)

* Show soft errors when a text string or number is supplied as a child instead of throwing an error

* bring __DEV__ check first so that things inside get removed in prod.

* fix lint",Sota,2021-08-10T20:14:11Z
da627ded867c882290776b4477250b6b312b77b4,Devtools/function context change (#22047),Byron Luk,2021-08-10T18:16:54Z
5634ed16aaba4a507844f0502953abcf40e3a165,Scheduling Profiler: Misc UX and performance improvements (#22043),Brian Vaughn,2021-08-09T21:11:33Z
ecd73e17bcdecc092cb56259999787d832d6510a,Enable enableSuspenseLayoutEffectSemantics flag statically for Facebook (#22050),Brian Vaughn,2021-08-09T19:45:12Z
64931821a9df262f2b6475404d025bcff97c3e0a,"Fix typo in parseHookNames.js (#22042)

representated -> represented",Konstantin Popov,2021-08-08T19:58:50Z
2edf449803378b5c58168727d4f123de3ba5d37f,Scheduling Profiler: Renamed a misnamed variable,Brian Vaughn,2021-08-06T19:03:35Z
5660c52b89ec19eec36a974e4ff16908b1dbba3c,"Scheduling Profiler: Improve warnings and add unit tests (#22038)

* Scheduling Profiler: Updated instructions to mentioned v18+ requirement

* Moved long-event warning to post processing

This lets us rule out non-React work or React work that started before the event and finished quickly during the event.

Also added unit tests for this warning and the various cases.

* Moved long-event warning to post processing

This lets us rule out non-React work or React work that started before the event and finished quickly during the event.

Also added unit tests for this warning and the various cases.

* Updated nested update warning text

* Udpate warning about suspending outside of a transition

Handle edge case where component suspends before the first commit (and label metadata) has been logged.

Add unit tests.

* Fixed logic error in getBatchRange() with minStartTime

* PR feedback: Combined a conditional statement",Brian Vaughn,2021-08-06T18:57:52Z
b9934d6db5d3f5ad94929f0d05b901c3999d34e3,"[DevTools] Hook names are correctly extracted when parsing nested hook calls (#22037)

## Summary

This commit fixes an issue where DevTools would currently not correctly extract the hook names for a hook call when the hook call was nested under *another* hook call, e.g.:

```javascript
function Component() {
  const InnerComponent = useMemo(() => () => {
    const [state, setState] = useState(0);

    return state;
  }); 
  return null;
};
```

Although it seems pretty rare to encounter this case in actual product code, DevTools wasn't handling it correctly:

**Expected Names:**
- `InnerComponent` for the `useMemo()` call.
- `state` for the `useState()` call.

**Actual**
- `InnerComponent` for the `useMemo()` call.
- `InnerComponent` for the `useState()` call.

The reason that we were extracting the name for the nested hook call incorrectly is that the `checkNodeLocation` function (which attempts to check if the location of the hook matches the location in the original source code), was too ""lenient"" and would return a match even if the start lines of the locations didn't match.

Specifically, for our example, it would consider that the location of the outer hook call ""matched"" the location of the inner hook call (even though they were on different lines), and would then return the wrong hook name.


### Fix

The fix in this commit is to update the `checkNodeLocation` function to more strictly check for matching start lines. The assumption here is that if 2 locations are on different starting lines, they can't possibly correspond to the same hook call.

## Test Plan

- yarn flow
- Tests still pass
  - yarn test
  - yarn test-build-devtools
- new regression tests added
- named hooks still work on manual test of browser extension on a few different apps (code sandbox, create-react-app, internally). 
![image](https://user-images.githubusercontent.com/1271509/128409571-d62e0a74-6b7b-4c3f-ad86-6799ecd71962.png)

![image](https://user-images.githubusercontent.com/1271509/128409943-f898f27b-67ab-4260-a931-40d9c1942395.png)

![image](https://user-images.githubusercontent.com/1271509/128410326-79a0f822-55b1-4b90-a9b9-78f13fa0b5c5.png)",Juan,2021-08-05T20:36:59Z
a8725a3e628e8e75d408101e5565b2d2af3902c3,Scheduling profiler: Added lane labels and durations to React measures (#22029),Brian Vaughn,2021-08-05T17:50:39Z
19092ac8c354b92c2e0e27b73f391571ad452505,"Re-add old Fabric Offscreen impl behind flag (#22018)

* Re-add old Fabric Offscreen impl behind flag

There's a chance that #21960 will affect layout in a way that we don't
expect, so I'm adding back the old implementation so we can toggle the
feature with a flag.

The flag should read from the ReactNativeFeatureFlags shim so that we
can change it at runtime. I'll do that separately.

* Import dynamic RN flags from external module

Internal feature flags that we wish to control with a GK can now be
imported from an external module, which I've called
""ReactNativeInternalFeatureFlags"".

We'll need to add this module to the downstream repo.

We can't yet use this in our tests, because we don't have a test
configuration that runs against the React Native feature flags fork. We
should set up that up the same way we did for www.",Andrew Clark,2021-08-04T02:30:20Z
215db465a228955cfbb9d51cc68ed9390bfc353a,"[Fabric] Add `flex: 1` to Offscreen view container (#22019)

Without this style property, the layout of the children is messed up.

The goal is for the container view to have no layout at all. It should
be a completely transparent wrapper, except for when we set `display:
none` to hide its contents. On the web, the equivalent (at least in the
spec) is `display: contents`.

After some initial testing, this seems to be close enough to the desired
behavior that we can ship it. We'll try rolling it out behind a flag.",Andrew Clark,2021-08-04T02:26:49Z
8a37b0ef3fee66504975777ca30d62b4121534b7,typos fixed (#21955),Sinan Sonmez (Chaush),2021-08-03T18:05:20Z
e3049bb850d8d6395f67d4171870a686e08c3dbd,DevTools scheduling profiler: Add React component measures (#22013),Brian Vaughn,2021-08-03T17:03:29Z
b54f36f2b6eba4ae722bea56d4081a920fc9ad74,[DevTools] Fix: highlight updates with memoized components (#22008),Vyacheslav 'SLEL' Solomin,2021-08-03T15:50:00Z
3a1dc3ec8543cbfaf57f5d46d1db070d0555015b,Switch on enableProfilerChangedHookIndices flag for OSS devtools builds (#22011),Kevin Chavez,2021-08-03T12:55:15Z
42251331d8f7a997a018d75370f5216bb7552819,DevTools: Scheduling profiler (#22006),Brian Vaughn,2021-08-02T18:30:43Z
e3b76a85c5233fad6f411c14e88ac4a61af800fb,"Devtools: Refactor imperative theme code (#21950)

Co-authored-by: Brian Vaughn <bvaughn@fb.com>",houssemchebeb,2021-08-02T15:20:04Z
d3f8747c8df098def311ee16d7b36aa1d0976f72,"[DevTools] Disable sizeBot on DevTools Rull Request (#21885)

* [DevTools] Disable sizeBot on DevTools Rull Request

Because DevTools code doesn't affect production bundle size.
Meaningless sizeBot comment give us frastration within Pull Request discussion.

* Revert ""[DevTools] Disable sizeBot on DevTools Rull Request""

This reverts commit a43aab9207d4abc85b60c22b21a374fc54b1c6ea.

* check whether devtools package file only committed",Ryota Murakami,2021-08-02T13:51:53Z
d1a58da55d42cb1455d4f0da50f2e223723d3b2c,Optimized DevTools extension images,Brian Vaughn,2021-08-02T13:32:46Z
dfd9d6263654faff364a8990a19f69548cf35e92,[DevTools] Optimize Images yarn command (part 2) (#21968),Ilham Syahid S,2021-08-02T13:32:17Z
27bf6f9a832e4ccc20cfb5a81850ae8d4cc2f92b,Scheduling profiler UX changes (#21990),Brian Vaughn,2021-08-02T13:23:48Z
b537247678ea44399573088b74f4cf11b8114743,"New devtools test for named hooks verifying case when hooks are used indirectly (#21996)

## Summary
Adds a new unit test to `parseHookNames-test` which verifies that we correctly give names to hooks when they are used indirectly: 

e.g.
```
  const countState = useState(0);
  const count = countState[0];
  const setCount = countState[1];
``` 

Should produce `count` as the name.

## Test plan

```
yarn test
yarn test-build-devtools
yarn test-build-devtools parseHookNames
```",Juan,2021-07-30T21:10:46Z
f0d354efc60633800aa30555ab5d890bcdfac0ae,"[Fabric] Fix reparenting bug in legacy Suspense mount (#21995)

* Add reparenting invariant to React Noop

Fabric does not allow nodes to be reparented, so I added the equivalent
invariant to React Noop's so we can catch regressions.

This causes some tests to fail, which I'll fix in the next step.

* Fix: Use getOffscreenContainerProps

The type of these props is different per renderer. An oversight
from #21960. Unfortunately wasn't caught by Flow because fiber props
are `any`-typed.

* [Fabric] Fix reparenting in legacy Suspense mount

Fixes a weird case during legacy Suspense mount where the offscreen host
container of a tree that suspends during initial mount is recreated
instead of cloned, since there's no current fiber to clone from.

Fabric considers this a reparent even though the parent from the first
pass never committed.

Instead we can override the props from the first pass before the
container completes. It's a bit of a hack, but no more so than the rest
of the legacy root Suspense implementation — the hacks are designed
to make it usable by non-strict mode-compliant trees.",Andrew Clark,2021-07-30T19:47:40Z
6f3fcbd6fac90d97f48a4c6e270b2124a333d714,"Some remaining instances of master to main (#21982)

Co-authored-by: Shubham Pandey <shubham.pandey@mfine.co>",Shubham Pandey,2021-07-30T12:56:55Z
34308b5adaffaf27501ba7a934b95478ba0aa327,"Tidy up early bailout logic at start of begin phase (#21852)

* Extract early bailout to separate function

This block is getting hard to read so I moved it to a separate function.
I'm about to refactor the logic that wraps around this path.

Ideally this early bailout path would happen before the begin phase
phase. Perhaps during reconcilation of the parent fiber's children.

* Extract state and context check to separate function

The only reason we pass `updateLanes` to some begin functions is to
check if we can perform an early bail out. But this is also available
as `current.lanes`, so we can read it from there instead.

I think the only reason we didn't do it this way originally is because
components that have two phases — error and Suspense boundaries —
use `workInProgress.lanes` to prevent a bail out, since during the
initial render there is no `current`. But we can check the `DidCapture`
flag instead, which we use elsewhere to detect the second phase.",Andrew Clark,2021-07-29T13:59:59Z
d9dd96530f366f0e9062095a513f1b04e71ffaf0,Added testing instructions to devtools contributing guide,Brian Vaughn,2021-07-28T23:05:01Z
9f88b5355ba21e06e0a3c4442c5199de354ed1cf,Devtools: Display as link if value is in specified protocols (#21964),Piotr Szulc,2021-07-28T13:29:13Z
321087d1343638e2d45e53971a7d8c384549940b,"[Fizz] Don't add aborted segments to the completedSegments list (#21976)

* Don't add aborted segments to the completedSegments list

* Update error message to include aborted status",Sebastian Markbåge,2021-07-28T01:53:37Z
cdccdbe1710dec6b954b2294d165da5671cf6443,Display warnings in tooltips for native events that render sync updates (#21975),Brian Vaughn,2021-07-27T21:22:44Z
d95434082f9fe0c612d20a6779e78b818154653b,Scheduling profiler: UX tweaks (#21971),Brian Vaughn,2021-07-27T18:34:05Z
87239321b0609f7bf1edaaba6aab6be24d6717b1,Sceduling profiler: Added custom view cursors (#21970),Brian Vaughn,2021-07-27T16:23:01Z
4cc8ec64c2c853146f35ee3c7d072fe23847a006,Separate unit tests for ReactFabricHostComponent (#21969),Timothy Yung,2021-07-27T06:45:26Z
d4d7864934025232e8bca5d2febec846ec1bd6e3,Fix `ReactFabricHostComponent` methods if detached (#21967),Timothy Yung,2021-07-27T04:02:06Z
c21e8fccadc0e0351bc45c2df729c92807a647ef,"Scheduling profiler: Improve native events UI (#21966)

Also highlight events that have synchronous updates inside of them. (We may want to relax this highlighting later to not warn about event handlers that are still fast enough.)",Brian Vaughn,2021-07-26T23:30:43Z
392253a774f33c0b8e2e25757ca6d6aa0ab48fce,"[Fabric] Use container node to toggle the visibility of Offscreen and Suspense trees (#21960)

* Fix type of Offscreen props argument

Fixes an oversight from a previous refactor. The fiber that wraps
a Suspense component's children used to be a Fragment but now it's on
Offscreen fiber, so its props type has changed. There's a special
hydration path where I forgot to update this. This isn't observable
because we don't ever end up rendering this particular fiber (because
the Suspense boundary is in its fallback state) but we should fix it
anyway to avoid a potential regression in the future.

* Extract createOffscreenFromFiber logic

...into a new method called `createWorkInProgressOffscreenFiber`. Just
for symmetry with `updateWorkInProgressOffscreenFiber`. Doesn't change
any behavior.

* [Fabric] Use container node to hide/show tree

This changes how we hide and show the contents of Offscreen boundaries
in the React Fabric renderer (persistent mode), and also Suspense
boundaries which use the same feature.=

The way it used to work was that when a boundary is hidden, in the
complete phase, instead of calling the normal `cloneInstance` method
inside `appendAllChildren`, we would call a forked method called
`cloneHiddenInstance` for each of the nearest host nodes within the
subtree. This design was largely based on how it works in React DOM
(mutation mode), where instead of cloning the nearest host nodes, we
mutate their `style.display` property.

The motivation for doing it this way in React DOM was because there's no
built-in browser API for hiding a collection of DOM nodes without
affecting their layout.

In Fabric, however, there is no such limitation, so we can instead wrap
in an extra host node and apply a hidden style.

The immediate motivation for this change is that Fabric on Android has a
view pooling mechanism for instances that relies on the assumption that
a current Fiber that is cloned and replaced by a new Fiber will never
appear in a future commit. When this assumption is broken, it may cause
crashes. In the current implementation, that can indeed happen when a
node that was previously hidden is toggled back to visible. Although
this change sidesteps the issue, we may introduce in other features in
the future that would benefit from being able to revert back to an older
node without cloning it again, such as animations.

The way I've implemented this is to insert an additional HostComponent
fiber as the child of each OffscreenComponent. The extra fiber is not
ideal — the way I'd prefer to do it is to attach the host instance to
the OffscreenComponent. However, the native Fabric implementation
currently expects a 1:1 correspondence between HostComponents and host
instances, so I've deferred that optimization to a future PR to derisk
fixing the Fabric pooling crash. I left a TODO in the host config with a
description of the remaining steps, but this alone should be sufficient
to unblock.",Andrew Clark,2021-07-26T20:17:08Z
419cc9c3799bc296c3c2a2c93880826aca680886,"Fix: Hide new/updated nodes in already hidden tree (#21929)

When a new node is added to an already hidden Offscreen tree, we need
to schedule a visibility effect to hide it. Previously we would only
hide when the boundary initially switches from visible to hidden, which
meant that newly inserted nodes would be visible.

We need to do the same thing for nodes that are updated, because the
update might affect the DOM node's `style.display` property.

The implementation is to check the `subtreeFlags` for an Insertion or
Update effect.

This only affects Offscreen, not Suspense, because Suspense boundaries
cannot be updated while in their fallback (hidden) state.

And it only affects mutation mode, because in persistent mode we
implement hiding by cloning the host tree during the complete phase,
which already happens on every update.",Andrew Clark,2021-07-26T15:18:55Z
b1811ebf01e174fb1e12c7f748bf1ed8aeedef0b,[DevTools] Add native events to the scheduling profiler (#21947),Brian Vaughn,2021-07-26T14:36:16Z
4758e4533e933d29b1c3a960794eef354800f786,"React Native: Export getInspectorDataForInstance API (#21572)

This PR exports a new top-level API, getInspectorDataForInstance, for React Native (both development and production). Although this change adds a new export to the DEV bundle, it only impacts the production bundle for internal builds (not what's published to NPM).",Brian Vaughn,2021-07-26T13:56:59Z
c76e4dbbc1f18f8ba2c8f02d34cae9ad0954a7f0,Removed an accidental console.log from DevTools source code,Brian Vaughn,2021-07-22T20:11:37Z
f4161c3ec7d2ab2993695a458f771bb331e256d5,[DRAFT] Import scheduling profiler into DevTools Profiler (#21897),Brian Vaughn,2021-07-22T17:58:57Z
ae5d26154b1e206774533a8313221d309f273090,"Fix: LegacyHidden should not toggle effects (#21928)

LegacyHidden is a transitional API that we added to replace the old
`<div hidden={true} />` API that we used to use for pre-rendering. The
plan is to replace this with the Offscreen component, once it's ready.

The idea is that LegacyHidden has identical behavior to Offscreen except
that it doesn't change the behavior of effects. (Which is basically how
`<div hidden={true} />` worked — it prerendered the hidden content in
the background, but nothing else.) That way, while we're rolling this
out, we could toggle the feature behind a feature flag either for
performance testing or as a kill switch.

It looks like we accidentally enabled the effects flag for both
Offscreen _and_ LegacyHidden. I suppose it's a good thing that nobody
has complained yet, since we eventually do want to ship this
behavior everywhere?

But I do think we should remove it from LegacyHidden, and roll it out by
gating the component type in the downstream repo. That way if there's an
issue related to the use of LegacyHidden, we can disable that without
disabling the behavior for Suspense boundaries.

In retrospect, I might have implemented this as an unstable prop on
Offscreen instead of a completely separate type — though at the time,
Offscreen didn't exist. I originally added LegacyHidden to unblock the
Lanes refactor, so I could move the deprioritization logic out of the
HostComponent implementation.

Not a big deal since we're going to remove this soon. The implementation
is almost the same regardless: before disconnecting or reconnecting
the effects, check the fiber tag. The rest of the logic is the same.",Andrew Clark,2021-07-21T17:34:08Z
25f09e3e4e900fc5d510243ce9ed3272d0af59e7,"DevTools: Parse named source AST in a worker (#21902)

Resolves #21855

Ended up using workerize in order to setup the worker once it allows easy imports (for babel's parse function) and exports.",Lucas Correia,2021-07-21T16:16:08Z
9ab90de602357407fb03a27715b61761a258a8c4,"Clean-up: Move Offscreen logic from Suspense fiber (#21925)

Much of the visibility-toggling logic is shared between the Suspense and
Offscreen types, but there is some duplicated code that exists in both.
Specifically, when a Suspense fiber's state switches from suspended to
resolved, we schedule an effect on the parent Suspense fiber, rather
than the inner Offscreen fiber. Then in the commit phase, the Suspense
fiber is responsible for committing the visibility effect on Offscreen.

There two main reasons we implemented it this way, neither of which
apply any more:

- The inner Offscreen fiber that wraps around the Suspense children used
  to be conditionally added only when the boundary was in its fallback
  state. So when toggling back to visible, there was no inner fiber to
  handle the visibility effect. This is no longer the case — the
  primary children are always wrapped in an Offscreen fiber.
- When the Suspense fiber is in its fallback state, the inner Offscreen
  fiber does not have a complete phase, because we bail out of
  rendering that tree. In the old effects list implementation, that
  meant the Offscreen fiber did not get added to the effect list, so
  it didn't have a commit phase. In the new recursive effects
  implementation, there's no list to maintain. Marking a flag on the
  inner fiber is sufficient to schedule a commit effect.

Given that these are no relevant, I was able to remove a lot of old
code and shift more of the logic out of the Suspense implementation
and into the Offscreen implementation so that it is shared by both.
(Being able to share the implementaiton like this was in fact one of
the reasons we stopped conditionally removing the inner
Offscreen fiber.)

As a bonus, this happens to fix a TODO in the Offscreen implementation
for persistent (Fabric) mode, where newly inserted nodes inside an
already hidden tree must also be hidden. Though we'll still need to
make this work in mutation (DOM) mode, too.",Andrew Clark,2021-07-20T23:05:16Z
5c6543771b7fe7ca37ab4b4419a7f873e0849cfb,"Fix global reference to Promise (#21926)

Referencing Promise without a type check will throw in environments
where Promise is not defined.

We will follow up with a lint rule that restricts access to all globals
except in dedicated module indirections.",Andrew Clark,2021-07-20T22:39:57Z
3f62dec84aba5d7ae6dfc73d68752254e8f06384,"Typo fix (#21729)

emitted instead of emmitted",Deniz Susman,2021-07-19T21:19:52Z
5579f1dc875c328e8155906aabe20902fc14c04a,Update test comments with explanations (#21857),Ricky,2021-07-19T19:07:38Z
9b76d2d7b3a86ffde945f88b758a0537aeca027a,react-devtools: set icon on macos (#21908),Christian Schulze,2021-07-19T14:26:41Z
262ff7ad2c4a018de9992731fcf8a8f9c91083d8,"Refactor ""disappear"" logic into its own traversal (#21901)

Similar to #21898, but for ""disappear"" logic. Previously this lived
inside `hideOrUnhideAllChildren`, the function that mutates the nearest
DOM nodes to override their `display` style.

This makes the feature work in persistent mode (Fabric); it didn't
before because `hideOrUnhideAllChildren` only runs in mutation mode.",Andrew Clark,2021-07-16T22:58:11Z
34600f4fadf526028a21c94030510fbed20e4665,"Refactor ""reappear"" logic into its own traversal (#21898)

When a Suspense boundary switches to its fallback state — or similarly,
when an Offscreen boundary switches from visible to hidden — we unmount
all its layout effects. When it resolves — or when Offscreen switches
back to visible — we mount them again. This ""reappearing"" logic
currently happens in the same commit phase traversal where we perform
normal layout effects.

I've changed it so that the ""reappear"" logic happens in its own
recurisve traversal that is separate from the commit phase one.

In the next step, I will do the same for the ""disappear"" logic that
currently lives in the `hideOrUnhideAllChildren` function.

There are a few reasons to model it this way, related to future
Offscreen features that we have planned. For example, we intend to
provide an imperative API to ""appear"" and ""reappear"" all the effects
within an Offscreen boundary. This API would be called from outside the
commit phase, during an arbitrary event. Which means it can't rely on
the regular commit phase — it's not part of a commit. This isn't the
only motivation but it illustrates why the separation makes sense.",Andrew Clark,2021-07-16T22:05:39Z
310187264d01a31bc3079358f13662d31a079d9e,Clean up flushSync flow types (#21887),Ricky,2021-07-16T14:37:57Z
d0ec283819113d27f7c5e5022de6ccc36d4e502d,DevTools 4.13.5 -> 4.14.0,Brian Vaughn,2021-07-16T04:25:01Z
6840c98c3246b749549beae2a62150f509ba4111,Remove named hooks feature flag (#21894),Brian Vaughn,2021-07-16T04:14:20Z
e26cb8f86db0936e14682c39e2d26373fa6f433d,Clear named hooks Suspense and AST cache after a Fast Refresh (#21891),Brian Vaughn,2021-07-16T03:39:30Z
682bbd0e7212df0bfe1d8017284e2822d281f7ea,Cache local reference to global Promise (#21886),Ricky,2021-07-15T16:39:56Z
d5de45820ae6beda46c34f8737f1861c85642a65,Fix typo (#21671),houssemchebeb,2021-07-15T00:42:54Z
232c67e911c61dbd15ceb8b1da4f3fa139ff617a,"Devtools Profiler: allow user to enter commit number (#19957)

Co-authored-by: Brian Vaughn <bvaughn@fb.com>",Steve Rubin,2021-07-15T00:37:02Z
87b3ada89dc83c88a89ff1b599b0f39e3c49cc32,"DevTools: Named hooks supports ""cheap-module-source-map"" (#21874)

""cheap-module-source-map"" is the default source-map generation mode used in created-react-dev mode because of speed. The major trade-off is that the source maps generated don't contain column numbers, so DevTools needs to be more lenient when matching AST nodes in this mode.

In this case, it can ignore column numbers and match nodes using line numbers only– so long as only a single node matches. If more than one match is found, treat it the same as if none were found, and fall back to no name.",Brian Vaughn,2021-07-14T18:37:27Z
a97b5ac078499e33bbcf937935ab7139a317bac4,"[Bugfix] Don't hide/unhide unless visibility changes (#21875)

* Use Visibility flag to schedule a hide/show effect

Instead of the Update flag, which is also used for other side-effects,
like refs.

I originally added the Visibility flag for this purpose in #20043 but
it got reverted last winter when we were bisecting the effects refactor.

* Added failing test case

Co-authored-by: Brian Vaughn <bvaughn@fb.com>",Andrew Clark,2021-07-14T17:37:10Z
f0efb7b70f9c1570b35e71a7fcc6690684fe9d08,"Add comment support to `@gate` pragma (#21881)

So you can more easily comment on why a test is gated.",Andrew Clark,2021-07-14T17:36:24Z
81346764bb62dc3fb04ccbf7f507cd390a249840,"Run persistent tests in more configurations in CI (#21880)

I noticed that `enableSuspenseLayoutEffectSemantics` is not fully
implemented in persistent mode. I believe this was an oversight
because we don't have a CI job that runs tests in persistent mode and
with experimental flags enabled.

This adds additional test configurations to the CI job so we don't miss
stuff like this again. It doesn't fix the failing tests — I'll address
that separately.",Andrew Clark,2021-07-14T15:40:20Z
9090257e6edec44a09a4cd5723d1d0f7ce2ab7c4,"fix: restore execution context after RetryAfterError completed (#21766)

* test: Add failing test due to executionContext not being restored

* fix: restore execution context after RetryAfterError completed

* Poke codesandbox/ci

* Completely restore executionContext

* expect a specific error",Sebastian Silbermann,2021-07-13T21:38:25Z
9fec3f2adde00614c562f23feb74948e47aaafb6,"DevTools: Ignore multiple sourceMappingUrls for external source maps (#21871)

Added an edge case regression test and bugfix.",Brian Vaughn,2021-07-13T20:39:29Z
14bac6193a334eda42e727336e8967419f08f5df,Allow components to render undefined (#21869),Ricky,2021-07-13T19:48:11Z
87b67d319fed725fafe06fb1bfd1b4a672e5a629,Enable scheduling profiler flag for react-dom profiling builds (#21867),Brian Vaughn,2021-07-13T17:41:19Z
64bbd7a7f1b7874ffcbfc69fa87be4f606e5adc5,"Adjust Error stack columns numbers by 1 (#21865)

To account for differences between error stacks (1-based) and ASTs (0-based). In practice this change should not make an observable difference.",Brian Vaughn,2021-07-13T17:28:01Z
464f275724ab11e3b55ea753bc4aee6700399332,"Update link to flow (#21862)

`main` branch does not exist in the `flow` project and it is `master`.

Co-authored-by: Ehsan Hosseini <53467610+dh-hosseini@users.noreply.github.com>",Ehsan Hosseini,2021-07-13T14:55:54Z
b03293faaa868f93b57c34aed64f48e4cfec1c24,"Fix link to fbjs (#21863)

`fbjs` doesn't have the `main` branch and it is `master`",Ehsan Hosseini,2021-07-13T14:55:33Z
9f5224a9c6f5287ddf7db724f5a79443d93fbd44,Restore DevTools console message (#21864),Dan Abramov,2021-07-13T14:41:51Z
a4ecd85e8628d1fdfe77c5615934de40af7d9537,"act: Batch updates, even in legacy roots (#21797)

In legacy roots, if an update originates outside of `batchedUpdates`,
check if it's inside an `act` scope; if so, treat it as if it were
batched. This is only necessary in legacy roots because in concurrent
roots, updates are batched by default.

With this change, the Test Utils and Test Renderer versions of `act` are
nothing more than aliases of the isomorphic API (still not exposed, but
will likely be the recommended API that replaces the others).",Andrew Clark,2021-07-13T00:15:20Z
c2c6ea1fdead7a33a33664675365b1575315276e,Capture suspense boundaries with undefined fallbacks (#21854),Ricky,2021-07-12T18:50:33Z
bfa50f827241300d6674eeb99b9efab1ac9a5c40,"Inline discreteUpdates (#21784)

This API is only used by the event system, to set the event priority for
the scope of a function. We don't need it anymore because we can modify
the priority directly, like we already do for continuous input events.",Andrew Clark,2021-07-12T14:55:09Z
0f09f14ae60cfca996c15fc50eeb59447c19a7be,"Check if already rendering before flushing

Forgot to stage this before committing 54e88ed12

I don't think is currently observable but should include the guard to
protect against regressions (though this whole block will be deleted
along with legacy mode, anyway).",Andrew Clark,2021-07-10T22:02:00Z
54e88ed12c931fa717738849ba5656cc1cf3527a,"Bugfix: Flush legacy sync passive effects at beginning of event (#21846)

* Re-land recent flushSync changes

Adds back #21776 and #21775, which were removed due to an internal
e2e test failure.

Will attempt to fix in subsequent commits.

* Failing test: Legacy mode sync passive effects

In concurrent roots, if a render is synchronous, we flush its passive
effects synchronously. In legacy roots, we don't do this because all
updates are synchronous — so we need to flush at the beginning of the
next event. This is how `discreteUpdates` worked.

* Flush legacy passive effects at beginning of event

Fixes test added in previous commit.",Andrew Clark,2021-07-10T18:15:11Z
cb8afda183e9c931978279d3a1706d1d9c905484,"Add test for #21837 (#21842)

Taken from https://github.com/facebook/react/pull/21837#issuecomment-876788973

Co-Authored-By: Timothy Yung <yungsters@fb.com>

Co-authored-by: Timothy Yung <yungsters@fb.com>",Andrew Clark,2021-07-09T03:01:29Z
f85f429d55f3f13bd741b4e4a06e3fcc54f2330c,"Use `act()` in ReactFabric tests (#21839) (#21841)

Co-authored-by: Timothy Yung <yungsters@fb.com>",Andrew Clark,2021-07-09T02:35:46Z
84639ab53fcb83c5d4806b5d791bb07992c40bf1,Guard against reused fibers in React Native commands (#21837),Timothy Yung,2021-07-08T23:01:51Z
c549bc491877b94a44ecc00daa9cf04026a77a6e,"Revert ""Use `act()` in ReactFabric tests (#21839)"" (#21840)

This reverts commit 59d3aca68638319c88d685ce22cac76a03cfe493.",Timothy Yung,2021-07-08T22:05:51Z
59d3aca68638319c88d685ce22cac76a03cfe493,Use `act()` in ReactFabric tests (#21839),Timothy Yung,2021-07-08T22:02:02Z
25984e523107b10bb2e3a02a8e39c4ead2162aa9,Update CONTRIBUTING.md,Brian Vaughn,2021-07-08T21:38:59Z
32d88d4332d6c2b32c9ea58a60e2a56d833fc1ad,"DevTools: Don't load source files contaning only unnamed hooks (#21835)

This wastes CPU cycles.",Brian Vaughn,2021-07-08T20:46:17Z
f52b73f9d0a9adbdb2815af440b2edd6b5627ff0,"DevTools: Update named hooks match to use column number also (#21833)

This prevents edge cases where AST nodes are incorrectly matched.",Brian Vaughn,2021-07-08T20:12:22Z
92af60afb2a229c0b70d360a80e24e4f7fd394aa,Update CONTRIBUTING.md,Brian Vaughn,2021-07-08T18:37:13Z
27423de39571b1f54a1a77f78d6ce2db96793d3a,Update CONTRIBUTING.md,Brian Vaughn,2021-07-08T18:28:53Z
8148fe5ff46ac738dec3cf4196dd82d2176c892f,Added DevTools CONTRIBUTING guide,Brian Vaughn,2021-07-08T18:11:30Z
92f3414d03d8744c420e15e55d7dc832deb2fa53,Reset inspected element cache in the event of an error (#21821),Brian Vaughn,2021-07-08T18:07:15Z
feb2f6892ab42a6efc1333bbf1544b7337e8f244,"DevTool: hook names cache no longer loses entries between selection (#21831)

Made several changes to the hooks name cache to avoid losing cached data between selected elements:
1. No longer use React-managed cache. This had the unfortunate side effect of the inspected element cache also clearing the hook names cache. For now, instead, a module-level WeakMap cache is used. This isn't great but we can revisit it later.
2. Hooks are no longer the cache keys (since hook objects get recreated between element inspections). Instead a hook key string made of fileName + line number + column number is used.
3. If hook names have already been loaded for a component, skip showing the load button and just show the hook names by default when selecting the component.",Brian Vaughn,2021-07-08T17:54:16Z
241485a2c4db75f42baf62c68f54e7cdef101c31,[SSR2 Fixture] Delete duplicate DOCTYPE (#21824),Shannon Feng,2021-07-08T02:11:42Z
8b34d5a905a17e95b5b9b515b60acbb2370f3603,DevTools show error icon when hook name parsing fails (#21820),Brian Vaughn,2021-07-07T20:27:39Z
9ccc25a0ea322b39ea04f8dfc03620ea90e0da94,Reverting recent flushSync changes (#21816),Brian Vaughn,2021-07-07T19:07:55Z
b6258b05f4ea16776557bc370ee0892604504d8f,"DevTools named hooks: Support FLow syntax (#21815)

Detect Flow pragma (@flow) and use Flow plug-in instead of TypeScript (default)",Brian Vaughn,2021-07-07T18:29:41Z
42b3c89c57a6b7027a6599785d63f47f809fda26,DevTooks: Don't dehydrate hook source fileNames (#21814),Brian Vaughn,2021-07-07T18:24:17Z
9c7f29ebe75a7546e59038123d3b0c3515bec916,"[WIP] DevTools: Support named hooks for >1 module in a bundle (#21790)

* Add named hooks test case built with Rollup

* Fix prepareStackTrace unpatching, remove sourceURL

* Prettier

* Resolve source map URL/path relative to the script

* Add failing tests for multi-module bundle

* Parse hook names from multiple modules in a bundle

* Create a HookSourceData per location key (file, line, column).
* Cache the source map per runtime URL ( = file part of location key).
* Don't store sourceMapContents - only store a consumer instance.
* Look up original source URLs in the source map correctly.
* Cache the code + AST per original URL.
* Fix off-by-one column number lookup.
* Some naming and typing tweaks related to the above.
* Stop storing the consumer outside the with() callback, which is a bug.

* Lint fix for 8d8dd25

* Added devDependencies to react-devtools-extensions package.json

* Added some debug logging and TODO comments

* Added additional DEBUG logging to hook names cache

Co-authored-by: Brian Vaughn <bvaughn@fb.com>",Moti Zilberman,2021-07-07T17:07:58Z
ed6c091fe961a3b95e956ebcefe8f152177b1fb7,"Replace unbatchedUpdates with flushSync (#21776)

There's a weird quirk leftover from the old Stack (pre-Fiber)
implementation where the initial mount of a leagcy (ReactDOM.render)
root is flushed synchronously even inside `batchedUpdates`.

The original workaround for this was an internal method called
`unbatchedUpdates`. We've since added another API that works almost the
same way, `flushSync`.

The only difference is that `unbatchedUpdates` would not cause other
pending updates to flush too, only the newly mounted root. `flushSync`
flushes all pending sync work across all roots. This was to preserve
the exact behavior of the Stack implementation.

But since it's close enough, let's just use `flushSync`. It's unlikely
anyone's app accidentally relies on this subtle difference, and the
legacy API is deprecated in 18, anyway.",Andrew Clark,2021-07-01T22:14:07Z
32eefcb3c5131f4d77a2195ff11a00a2513cf62f,"Replace flushDiscreteUpdates with flushSync (#21775)

* Replace flushDiscreteUpdates with flushSync

flushDiscreteUpdates is almost the same as flushSync. It forces passive
effects to fire, because of an outdated heuristic, which isn't ideal but
not that important.

Besides that, the only remaining difference between flushDiscreteUpdates
and flushSync is that flushDiscreteUpdates does not warn if you call it
from inside an effect/lifecycle. This is because it might get triggered
by a nested event dispatch, like `el.focus()`.

So I added a new method, flushSyncWithWarningIfAlreadyRendering, which
is used for the public flushSync API. It includes the warning. And I
removed the warning from flushSync, so the event system can call that
one. In production, flushSyncWithWarningIfAlreadyRendering gets inlined
to flushSync, so the behavior is identical.

Another way of thinking about this PR is that I renamed flushSync to
flushSyncWithWarningIfAlreadyRendering and flushDiscreteUpdates to
flushSync (and fixed the passive effects thing). The point is to prevent
these from subtly diverging in the future.

* Invert so the one with the warning is the default one

To make Seb happy",Andrew Clark,2021-07-01T22:13:00Z
c5cfa71948dbf4c2dd9ff64596ab663f8d559cd6,"DevTools: Show hook names based on variable usage (#21641)

Co-authored-by: Brian Vaughn <brian.david.vaughn@gmail.com>
Co-authored-by: Saphal Patro <saphal1998@gmail.com>
Co-authored-by: VibhorCodecianGupta <vibhordelgupta@gmail.com>",Brian Vaughn,2021-07-01T18:39:18Z
ab390c65eefb7f395468c18ee2b059bf35c7cd03,"ReactDebugHooks optionally includes fileName, and line/column numbers (#21781)",Brian Vaughn,2021-07-01T17:08:46Z
6bf111772afb73e2d91a563bf5e8e5e7e1f7d7a9,Install nested packages from Yarn cache before running build tests (#21779),Brian Vaughn,2021-07-01T15:37:56Z
c96761c7b217989a6c377c9b12249a78b0be91f9,"Delete batchedEventUpdates (#21774)

No longer used anywhere.",Andrew Clark,2021-06-30T22:09:14Z
ae5afb3b9d347636037b69222c0534d4187b05ab,"Simplify `discreteUpdates` (#21773)

Now that discrete updates are flushed synchronously in a microtask,
the `discreteUpdates` method used by our event system is only a
optimization to save us from having to check `window.event.type` on
every update. So we should be able to remove the extra logic.

Assuming this lands successfully, we can remove `batchedEventUpdates`
and probably inline `discreteUpdates` into the renderer, like we do
for continuous updates.",Andrew Clark,2021-06-30T18:29:31Z
3e8c86c1c84559f2552a493970c50143c8757043,fix: maxYieldInterval should not compare with currentTime directly in Scheduler-shouldYieldToHost,郭帅彬,2021-06-30T13:52:24Z
f6112ffe5af0aa4688e29bb0f1d58f6cf8fbe8e0,chore: Ignore build2/ when linting (#21204),Sebastian Silbermann,2021-06-30T13:27:32Z
2442d988eff0943b557bcc61cf4e0062146b6948,"Bump ws from 6.1.2 to 6.2.2 in /scripts/release (#21628)

Bumps [ws](https://github.com/websockets/ws) from 6.1.2 to 6.2.2.
- [Release notes](https://github.com/websockets/ws/releases)
- [Commits](https://github.com/websockets/ws/commits)

---
updated-dependencies:
- dependency-name: ws
  dependency-type: indirect
...

Signed-off-by: dependabot[bot] <support@github.com>

Co-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>",dependabot[bot],2021-06-29T20:53:39Z
83f38d07689b8b750b7d96e17647a8978b836154,"Bump ecstatic from 2.2.1 to 2.2.2 in /scripts/bench (#20468)

Bumps [ecstatic](https://github.com/jfhbrook/node-ecstatic) from 2.2.1 to 2.2.2.
- [Release notes](https://github.com/jfhbrook/node-ecstatic/releases)
- [Changelog](https://github.com/jfhbrook/node-ecstatic/blob/2.2.2/CHANGELOG.md)
- [Commits](https://github.com/jfhbrook/node-ecstatic/compare/2.2.1...2.2.2)

Signed-off-by: dependabot[bot] <support@github.com>

Co-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>",dependabot[bot],2021-06-29T20:53:31Z
d483463bc86555decb3e8caa18459d1d0f7c0148,"Updated scripts and config to replace ""master"" with ""main"" branch (#21768)",Brian Vaughn,2021-06-29T18:26:24Z
cae635054e17a6f107a39d328649137b83f25972,"`act`: Resolve to return value of scope function (#21759)

When migrating some internal tests I found it annoying that I couldn't
return anything from the `act` scope. You would have to declare the
variable on the outside then assign to it. But this doesn't play well
with type systems — when you use the variable, you have to check
the type.

Before:

```js
let renderer;
act(() => {
  renderer = ReactTestRenderer.create(<App />);
})

// Type system can't tell that renderer is never undefined
renderer?.root.findByType(Component);
```

After:

```js
const renderer = await act(() => {
  return ReactTestRenderer.create(<App />);
})
renderer.root.findByType(Component);
```",Andrew Clark,2021-06-26T18:51:23Z
e2453e2007083a67bf93f59c8ef2f39df2aaf636,"act: Add test for bypassing queueMicrotask (#21743)

Test for fix added in #21740",Andrew Clark,2021-06-25T19:39:46Z
73ffce1b6fb7eff13414e35e40efe4269664e5ea,"DevTools: Update tests to fix warnings/errors (#21748)

Some new ones had slipped in (e.g. deprecated ReactDOM.render message from 18)",Brian Vaughn,2021-06-25T02:42:44Z
534c9c52ec3e33ed241f7a20e264bb4571d452b3,"Move error logging to update callback (#21737)

* Move error logging to update callback

This prevents double logging for gDSFE boundaries with createRoot.

* Add an explanation for the rest of duplicates",Dan Abramov,2021-06-24T19:57:10Z
51b0becf3e8a8084d8a2ee85ce8b3a1d9ace6ecd,"Always keep disabled logs in the second pass (#21739)

* Add tests for disabled logs

* Always keep disabled logs in the second pass

* Jest nit

* Always use the second result",Dan Abramov,2021-06-24T18:50:07Z
386e8f2ea7209121b89159dbfbca53f70e87e1fb,DevTools: Fix Settings dialog scroll/size bug in Firefox (#21747),Brian Vaughn,2021-06-24T15:19:57Z
7fec38041faf7f4691f503feccbaf5af901367e2,"Log and show error overlay for commit phase errors (#21723)

* Enable skipped tests from #21723

* Report uncaught errors in DEV

* Clear caught error

This is not necessary (as proven by tests) because next invokeGuardedCallback clears it anyway. But I'll keep it for consistency with other calls.",Dan Abramov,2021-06-24T14:48:28Z
27c9c95e23ddedb9163373950e364dd62038f6c0,"act: Bypass microtask for ""default sync"" updates (#21740)

When wrapping an update in act, instead of scheduling a microtask,
we can add the task to our internal queue.

The benefit is that the user doesn't have to await the act call. We can
flush the work synchronously. This doesn't account for microtasks that
are scheduled in userspace, of course, but it at least covers
React's usage.",Andrew Clark,2021-06-24T00:32:44Z
8426bb6956fb12279c458e69fbfc62fbb04a621c,"Pass Jest useStderr flag when debugging (#21741)

This prevents it from buffering adn suppressing all console logs until a test has completed running (When debugging in Chrome).",Brian Vaughn,2021-06-23T20:58:46Z
e577bfb1cedc56f93d8e5967088932e7100d4829,"Add tests for invokeGuardedCallback (#21734)

* Add tests for invokeGuardedCallback

* Add skipped failing tests

* Check next render works

* Mirror tests for createRoot

* Move comments around",Dan Abramov,2021-06-23T20:47:47Z
355591add41c0f6dad738fdb1b6603e0786b7b4e,"Next/experimental release versions include commit date (#21700)

Change format of @next and @experimental release versions from <number>-<sha> to <number>-<sha>-<date> to make them more human readable. This format still preserves the ability for us to easily map a version number to the changes it contains, while also being able to more easily know at a glance how recent a release is.",Brian Vaughn,2021-06-23T17:50:09Z
d7dce572c7453737a685e791e7afcbc7e2b2fe16,"Remove internal `act` builds from public modules (#21721)

* Move internal version of act to shared module

No reason to have three different copies of this anymore.

I've left the the renderer-specific `act` entry points because legacy
mode tests need to also be wrapped in `batchedUpdates`. Next, I'll update
the tests to use `batchedUpdates` manually when needed.

* Migrates tests to use internal module directly

Instead of the `unstable_concurrentAct` exports. Now we can drop those
from the public builds.

I put it in the jest-react package since that's where we put our other
testing utilities (like `toFlushAndYield`). Not so much so it can be
consumed publicly (nobody uses that package except us), but so it works
with our build tests.

* Remove unused internal fields

These were used by the old act implementation. No longer needed.",Andrew Clark,2021-06-22T21:29:35Z
06f7b4f43a93eae9111cfbd972ab1ae1148f6afb,"`act` should work without mock Scheduler (#21714)

Currently, in a React 18 root, `act` only works if you mock the
Scheduler package. This was because we didn't want to add additional
checks at runtime.

But now that the `act` testing API is dev-only, we can simplify its
implementation.

Now when an update is wrapped with `act`, React will bypass Scheduler
entirely and push its tasks onto a special internal queue. Then, when
the outermost `act` scope exists, we'll flush that queue.

I also removed the ""wrong act"" warning, because the plan is to move
`act` to an isomorphic entry point, simlar to `startTransition`. That's
not directly related to this PR, but I didn't want to bother
re-implementing that warning only to immediately remove it.

I'll add the isomorphic API in a follow up.

Note that the internal version of `act` that we use in our own tests
still depends on mocking the Scheduler package, because it needs to work
in production. I'm planning to move that implementation to a shared
(internal) module, too.",Andrew Clark,2021-06-22T21:25:07Z
422e0bb3604dd7d3f6158df87b05932a43c89017,"Delete test-utils implementation of `act` (#21703)

* Delete test-utils implementation of `act`

Since it's dev-only now, we can use the one provided by the reconciler.

* Move act related stuff out of EventInternals",Andrew Clark,2021-06-22T21:21:22Z
568dc3532e25b30eee5072de08503b1bbc4f065d,"Remove unstable_createRoot from internal builds (#21698)

These callsites were already removed as far as I can tell.",Sebastian Markbåge,2021-06-17T18:29:30Z
43f4cc160811657135508cdefe6aed2b3522a905,Fix failing test (#21697),Dan Abramov,2021-06-17T12:56:18Z
d0f348dc1b1ab1c3f7377f918d8ffd3fa64c6918,"Fix for failed Suspense layout semantics (#21694)

Co-authored-by: Dan Abramov <dan.abramov@me.com>",Brian Vaughn,2021-06-16T23:44:44Z
bd0a963445715f2963d4a9e3a0485e56cbe60653,"Throw when `act` is used in production (#21686)

Upgrades the deprecation warning to a runtime error.

I did it this way instead of removing the export so the type is the same
in both builds. It will get dead code eliminated regardless.",Andrew Clark,2021-06-16T20:29:51Z
a0d2d1e1e1830e35bf12174f3cc273231aa03063,Fix fixture lockfile manually,Dan Abramov,2021-06-15T23:04:01Z
6cbf2a8b3b13e5510467158967b85b0013f6f849,Add missing package lock,Dan Abramov,2021-06-15T22:52:15Z
c0a77029c4acb60844108fbbd7f5e960b1d81b7c,Remove unused variable,Dan Abramov,2021-06-15T22:49:41Z
f283d7524ac5c30c5190e1bbe1b047dce4479a0c,Use npm lockfile for fixture,Dan Abramov,2021-06-15T22:49:04Z
03c5314b44dbf280f3008ce7f587e5055e76c6e2,[SSR2 Fixture] Update APIs (#21688),Dan Abramov,2021-06-15T22:20:51Z
7ec4c55971aad644616ca0b040f42410659fe802,"createRoot(..., {hydrate:true}) -> hydrateRoot(...) (#21687)

This adds a new top level API for hydrating a root. It takes the initial
children as part of its constructor. These are unlike other render calls
in that they have to represent what the server sent and they can't be
batched with other updates.

I also changed the options to move the hydrationOptions to the top level
since now these options are all hydration options.

I kept the createRoot one just temporarily to make it easier to codemod
internally but I'm doing a follow up to delete.

As part of this I un-dried a couple of paths. ReactDOMLegacy was intended
to be built on top of the new API but it didn't actually use those root
APIs because there are special paths. It also doesn't actually use most of
the commmon paths since all the options are ignored. It also made it hard
to add only warnings for legacy only or new only code paths.

I also forked the create/hydrate paths because they're subtly different
since now the options are different. The containers are also different
because I now error for comment nodes during hydration which just doesn't
work at all but eventually we'll error for all createRoot calls.

After some iteration it might make sense to break out some common paths but
for now it's easier to iterate on the duplicates.",Sebastian Markbåge,2021-06-15T20:37:53Z
9212d994ba939f20a04220a61e9776b488381596,Merge /unstable-fizz entry point into /server (#21684),Sebastian Markbåge,2021-06-15T01:37:44Z
9343f872038746b6bd0455d8d1098f31a1674b0b,"Use the server src files as entry points for the builds/tests (#21683)

* Use the server src files as entry points for the builds/tests

We need one top level entry point to target two builds so we can't have
the top level one be the entry point for the builds.

* Same thing but with the modern entry point",Sebastian Markbåge,2021-06-14T23:23:19Z
e601854f077e5df76c5ea6d90cdc9c6a5c0f245f,"Clean up partial renderer entry points (#21682)

* Clean up partial renderer entry points

I made a mistake by leaving server.browser.stable in which is the partial
renderer for the browser build of stable. That should use the legacy fizz
one.

Since the only usage of the partial renderer now is at FB and we don't use
it with Node, I removed the Node build of partial renderer too.

* Remove GC test

No code is running this path anymore. Ideally this should be ported to
a Fizz form.",Sebastian Markbåge,2021-06-14T22:44:46Z
502f8a2a07bb8e8923ead71166fbe599f94a42ae,"[Fizz/Flight] Don't use default args (#21681)

* Don't use default args

* Hoist out creation for better inlining

The closures prevent inlining otherwise.",Sebastian Markbåge,2021-06-14T22:28:20Z
bd45ad05dc4fe05f289d482bfd0111bee5d09ef4,"Add a DOCTYPE to the stream if the <html> tag is rendered (#21680)

This makes it a lot easier to render the whole document using React without
needing to patch into the stream.

We expect that currently people will still have to patch into the stream
to do advanced things but eventually the goal is that you shouldn't
need to.",Sebastian Markbåge,2021-06-14T20:57:17Z
a8f5e77b921c890c215fb1c7e24a06f38598deb1,"Remove invokeGuardedCallback from commit phase (#21666)

* Remove invokeGuardedCallback from commit phase

* Sync fork",Dan Abramov,2021-06-14T20:45:53Z
dbe3363ccd125f89c25fea234031410408f0df09,"[Fizz] Implement Legacy renderToString and renderToNodeStream on top of Fizz (#21276)

* Wire up DOM legacy build

* Hack to filter extra comments for testing purposes

* Use string concat in renderToString

I think this might be faster. We could probably use a combination of this
technique in the stream too to lower the overhead.

* Error if we can't complete the root synchronously

Maybe this should always error but in the async forms we can just delay
the stream until it resolves so it does have some useful semantics.

In the synchronous form it's never useful though. I'm mostly adding the
error because we're testing this behavior for renderToString specifically.

* Gate memory leak tests of internals

These tests don't translate as is to the new implementation and have been
ported to the Fizz tests separately.

* Enable Fizz legacy mode in stable

* Add wrapper around the ServerFormatConfig for legacy mode

This ensures that we can inject custom overrides without negatively
affecting the new implementation.

This adds another field for static mark up for example.

* Wrap pushTextInstance to avoid emitting comments for text in static markup

* Don't emit static mark up for completed suspense boundaries

Completed and client rendered boundaries are only marked for the client
to take over.

Pending boundaries are still supported in case you stream non-hydratable
mark up.

* Wire up generateStaticMarkup to static API entry points

* Mark as renderer for stable

This shouldn't affect the FB one ideally but it's done with the same build
so let's hope this works.",Sebastian Markbåge,2021-06-14T19:54:30Z
101ea9f55cb4d5c671102bc49a45535af73c02b0,Set deletedTreeCleanUpLevel to 3 (#21679),Dan Abramov,2021-06-14T19:10:24Z
1a106bdc2abc7af190b791d13b2ead0c2c556f7a,Wrap eventhandle-specific logic in a flag (#21657),Dan Abramov,2021-06-11T20:08:32Z
3ba2b67f213d4ec4c5239c9d97744e21a4763b9e,Update react_18.md,Brian Vaughn,2021-06-11T18:27:09Z
905f6f48d48b586de2a80cbf4c1febe4e29d996d,Update react_18.md,Brian Vaughn,2021-06-11T18:25:47Z
ca4e650ec1672c89618e75385f0b180957110dfb,Update react_18.md,Brian Vaughn,2021-06-11T18:24:09Z
42a89d5c61c5596e50f2d1ae378134da99674000,Update react_18.md,Brian Vaughn,2021-06-11T18:22:57Z
1e3ceadcc094ddc565c3f9e96b25629c1ae8a6d3,Added React 18 issue template,Brian Vaughn,2021-06-11T18:19:37Z
01be61c12f4361dc9e4c4f4157bffbeb0e57b064,DevTools can inspect Proxies that return broken iterator functions (#21660),Brian Vaughn,2021-06-11T14:15:48Z
cb30388d10240363615fef31eb16b9d4e2925bb9,Export React Native `AttributeType` Types (#21661),Timothy Yung,2021-06-11T07:45:49Z
c1536795cae5101041ef50a59ae29119aa1c2bf4,"Revert ""Make enableSuspenseLayoutEffectSemantics static for www (#21617)"" (#21656)

This reverts commit 39f00748922cf40e06cd08d0c81f8b28fc8503fa.",Sebastian Markbåge,2021-06-10T17:12:31Z
c96b78e0e7cd9e6ef7c0464748a50cf8510dde81,"Add concurrentRoot property to ReactNativeTypes (#21648)

* Add concurrentRoot property to ReactNativeTypes

* Add concurrentRoot to ReactNativeType

* Use ReactFabricType instead of ReactNativeType",Samuel Susla,2021-06-10T12:59:22Z
aecb3b6d114e8fafddf6982133737198e8ea7cb3,"Deprecate ReactDOM.render and ReactDOM.hydrate (#21652)

* Use existing test warning filter for server tests

We have a warning filter for our internal tests to ignore warnings
that are too noisy or that we haven't removed from our test suite yet:
shouldIgnoreConsoleError.

Many of our server rendering tests don't use this filter, though,
because it has its own special of asserting warnings.

So I added the warning filter to the server tests, too.

* Deprecate ReactDOM.render and ReactDOM.hydrate

These are no longer supported in React 18. They are replaced by the
`createRoot` API.

The warning includes a link to documentation of the new API. Currently
it redirects to the corresponding working group post. Here's the PR to
set up the redirect: https://github.com/reactjs/reactjs.org/pull/3730

Many of our tests still use ReactDOM.render. We will need to gradually
migrate them over to createRoot.

In the meantime, I added the warnings to our internal warning filter.",Andrew Clark,2021-06-09T20:46:55Z
1a3f1afbd3cf815d4e55628cd7d84ef20171bab8,"[React Native] Fabric get current event priority (#21553)

* Call into Fabric to get current event priority

Fix flow errors

* Prettier

* Better handle null and undefined cases

* Remove optional chaining and use ?? operator

* prettier-all

* Use conditional ternary operator

* prettier",Samuel Susla,2021-06-08T16:26:21Z
e6be2d531d82be6a601abbd392e4615f90e1f87a,Fix tag validation,Andrew Clark,2021-06-08T15:53:43Z
6bbe7c3446c6ab986be39a678a75f6e2c27a5b52,Remove space from tag arguments,Andrew Clark,2021-06-08T15:40:34Z
bc7d5ac99dcb36679c90b60731458063fb8c82f3,Allow alpha tags,Andrew Clark,2021-06-08T15:31:42Z
48a11a3efc1a3107b07d5f866a26f5abd440885f,"Update next React version (#21647)

This does not mean that a release of 18.0 is imminent, only that the
main branch includes breaking changes.

Also updates the versioning scheme of the `@next` channel to include
the upcoming semver number, as well as the word ""alpha"" to indicate the
stability of the release.

- Before:       0.0.0-e0d9b28999
- After:        18.0.0-alpha-e0d9b28999",Andrew Clark,2021-06-08T15:26:22Z
5aa0c5671fdddc46092d46420fff84a82df558ac,"Fix Issue with Undefined Lazy Imports By Refactoring Lazy Initialization Order (#21642)

* Add a DEV warning for common case

* Don't set Pending flag before we know it's a promise

* Move default exports extraction to render phase

This is really where most unwrapping happen. The resolved promise is the
module object and then we read things from it.

This way it lines up a bit closer with the Promise model too since the
promise resolving to React gets passed this same value.

If this throws, then it throws during render so it's caught properly and
you can break on it and even see it on the right stack.

* Check if the default is in the module object instead of if it's undefined

Normally we'd just check if something is undefined but in this case it's
valid to have an undefined value in the export but if you don't have a
property then you're probably importing the wrong kind of object.

* We need to check if it's uninitialized for sync resolution

Co-authored-by: Dan Abramov <dan.abramov@me.com>",Sebastian Markbåge,2021-06-07T21:47:18Z
0eea5772486318c5b2922c8b36680cf4744615d6,"Fix typo in comment (accumlated → accumulated) (#21637)

Co-authored-by: HuJiajie <hujj@firstgrid.cn>",ithinker5,2021-06-07T12:52:49Z
0706162ba7dff8aeb4bf824473f423946c0168c9,Fix typo in comment (environement → environment) (#21635),niexq,2021-06-07T12:52:42Z
9d17b562ba427adb1bced98f4231406ec573c422,Fix typo in comment (satsify → satisfy) (#21629),niexq,2021-06-05T18:02:15Z
b610fec00cef1fb0a33ea353ed81fd138b961785,fix comments: expiration time -> lanes (#21551),Shannon Feng,2021-06-05T14:19:40Z
23c80959ad79898877e76a61dffbe8c02ec3853e,Fix CSS,Dan Abramov,2021-06-04T22:12:01Z
2568fecc383955fbaf8e0501702c25a12e1a0320,Tweak fixture,Dan Abramov,2021-06-04T22:10:02Z
fccfc248939dcaadb55cfdb0d8f5118251c8ad80,[Fizz] Add another fixture (#21627),Dan Abramov,2021-06-04T22:04:06Z
cc4d24ab0b1b70c6d30e1131e496c59ff9f85d5f,[Fizz] Always call flush() if it exists (#21625),Dan Abramov,2021-06-04T19:17:57Z
46926993fc435e9ba7dd03f791ded05e32897b0d,Fix typo in bridge.js (#21621),Ikko Ashimine,2021-06-04T15:42:09Z
e0d9b289998c66d2e4fb75582b9e107054e4e0a4,[Fizz] Minor Fixes for Warning Parity (#21618),Sebastian Markbåge,2021-06-03T23:54:31Z
1b7b3592f4713b3a53709554aefd1d20e9a0a6a5,"[Fizz] Implement Component Stacks in DEV for warnings (#21610)

* Implement component stacks

This uses a reverse linked list in DEV-only to keep track of where we're
currently executing.

* Fix bug that wasn't picking up the right stack at suspended boundaries

This makes it more explicit which stack we pass in to be retained by the
task.",Sebastian Markbåge,2021-06-03T20:02:41Z
39f00748922cf40e06cd08d0c81f8b28fc8503fa,"Make enableSuspenseLayoutEffectSemantics static for www (#21617)

This has been ramped up to 80% GK so the next step is to just turn it on for 100%",Brian Vaughn,2021-06-03T19:40:59Z
7747a5684d0d4c482081cad4e8b715d35fb97dd2,"Support `@latest` in prepare-release-from-ci (#21616)

Since we track these versions in source, we can build `@latest`
releases in CI and store them as artifacts.

Then when it's time to release, and the build has been verified, we use
`prepare-release-from-ci` (the same script we use for `@next` and
`@experimental`) to fetch the already built and versioned packages.",Andrew Clark,2021-06-03T18:00:08Z
8f379427657ff1be5b25904864da54c7acfc8d64,"Prepare semver (`@latest`) releases in CI (#21615)

Now that we track package versions in source, `@latest` builds should
be fully reproducible for a given commit. We can prepare the packages in
CI and store them as artifacts, the same way we do for `@next` and
`@experimental`.

Eventually this can replace the interactive script that we currently
use to swap out the version numbers.

The other nice thing about this approach is that we can run tests in CI
to verify that the packages are releasable, instead of waiting until
right before publish.

I named the output directory `oss-stable-semver`, to distinguish from
the `@next` prereleases that are located at `oss-stable`. I don't love
this naming. I'd prefer to use the name of the corresponding npm dist
tag. I'll do that in a follow-up, though, since the `oss-stable` name is
referenced in a handful of places.

Current naming (after this PR):

- `oss-experimental` → `@experimental`
- `oss-stable` → `@next`
- `oss-stable-semver` → `@latest`

Proposed naming (not yet implemented, requires more work):

- `oss-experimental` → `@experimental`
- `oss-next` → `@next`
- `oss-latest` → `@latest`",Andrew Clark,2021-06-03T17:26:11Z
44cdfd6b7a0f5a4949866a24f65179760b3767d1,"Use ReactVersions module as package allowlist (#21613)

Instead of keeping a separate allowlist in sync, we use ReactVersions.js
as the source of truth for which packages get published.",Andrew Clark,2021-06-03T15:45:10Z
8b4201535c6068147d61d0ed3f02d21d6dcd6927,"Devtools: add feature to trigger an error boundary (#21583)

Co-authored-by: Brian Vaughn <bvaughn@fb.com>",Bao Pham,2021-06-03T15:21:44Z
2418f24b609029c3f3415b5954005d5aa4851f0b,Fix <select> check of defaultValue/value type (#21611),Sebastian Markbåge,2021-06-03T13:13:00Z
154a8cf32869cb9fabbb0ef2b68c77a5c17954e9,"Fix reference to wrong variable

Follow-up to #21608",Andrew Clark,2021-06-03T04:23:08Z
6736a38b9abdd19a015929c0279783c92b30d372,"Add single source of truth for package versions (#21608)

The versioning scheme for `@next` releases does not include semver
information. Like `@experimental`, the versions are based only on the
hash, i.e. `0.0.0-<commit_sha>`. The reason we do this is to prevent
the use of a tilde (~) or caret (^) to match a range of
prerelease versions.

For `@experimental`, I think this rationale still makes sense — those
releases are very unstable, with frequent breaking changes. But `@next`
is not as volatile. It represents the next stable release. So, I think
we can afford to include an actual verison number at the beginning of
the string instead of `0.0.0`.

We can also add a label that indicates readiness of the upcoming
release, like ""alpha"", ""beta"", ""rc"", etc.

To prepare for this the new versioning scheme, I updated the build
script. However, **this PR does not enable the new versioning scheme
yet**. I left a TODO above the line that we'll change once we're ready.

We need to specify the expected next version numbers for each package,
somewhere. These aren't encoded anywhere today — we don't specify
version numbers until right before publishing to `@latest`, using an
interactive script: `prepare-release-from-npm`.

Instead, what we can do is track these version numbers in a module. I
added `ReactVersions.js` that acts as the single source of truth for
every package's version. The build script uses this module to build the
`@next` packages.

In the future, I want to start building the `@latest` packages the same
way we do `@next` and `@experimental`. (What we do now is download a
`@next` release from npm and swap out its version numbers.) Then we
could run automated tests in CI to confirm the packages are releasable,
instead of waiting to verify that right before publish.",Andrew Clark,2021-06-03T03:54:26Z
86715efa23c02dd156e61a4476f28045bb5f4654,"Resolve the true entry point during tests (#21505)

* Resolve the entry point for tests the same way builds do

This way the source tests, test the same entry point configuration.

* Gate test selectors on www

These are currently only exposed in www builds

* Gate createEventHandle / useFocus on www

These are enabled in both www variants but not OSS experimental.

* Temporarily disable www-modern entry point

Use the main one that has all the exports until we fix more tests.

* Remove enableCache override that's no longer correct

* Open gates for www

These used to not be covered because they used Cache which wasn't exposed.",Sebastian Markbåge,2021-06-03T01:03:29Z
a8a4742f1c54493df00da648a3f9d26e3db9c8b5,"Convert ES6/TypeScript/CoffeeScript Tests to createRoot + act (#21598)

* Convert ES6/TypeScript CoffeeScript Tests to createRoot + act

* Change expectation for WWW+VARIANT because the deferRenderPhaseUpdateToNextBatch flag breaks this behavior",Sebastian Markbåge,2021-06-02T18:36:59Z
1d3558965f691ca8c01387e5b620fd7263fbcd19,"Disable deferRenderPhaseUpdateToNextBatch by default (#21605)

We're still experimenting with this and it causes a breaking behavior
for setState in componentWillMount/componentWillReceiveProps atm.",Sebastian Markbåge,2021-06-02T18:28:06Z
a8964649bb6332cf1f8d723f81ce97cc5a1886ff,Delete an unused field (#21415),okmttdhr,2021-06-02T15:24:40Z
76f85b3e50b64e3f64f19da09c1b5974aa900608,Expose Fizz in stable builds (#21602),Dan Abramov,2021-06-02T15:13:19Z
e16d61c3000e2de6217d06b9afad162e883f73c4,"[Offscreen] Mount/unmount layout effects (#21386)

* [Offscreen] Mount/unmount layout effects

Exposes the Offscreen component type and implements basic support for
mount/unmounting layout effects when the visibility is toggled.

Mostly it works the same way as hidden Suspense trees, which use the
same internal fiber type. I had to add an extra bailout, though, that
doesn't apply to the Suspense case but does apply to Offscreen
components: a hidden Offscreen tree will eventually render at low
priority, and when we it does, its `subtreeTag` will have effects
scheduled on it. So I added a check to the layout phase where, if the
subtree is hidden, we skip over the subtree entirely. An alternate
design would be to clear the subtree flags in the render phase, but I
prefer doing it this way since it's harder to mess up.

We also need an API to enable the same thing for passive effects. This
is not yet implemented.

* Add test starting from hidden

Co-authored-by: Rick Hanlon <rickhanlonii@gmail.com>",Andrew Clark,2021-06-01T19:46:08Z
63091939bdb82c75a5d935143705d09d51380430,"OSS feature flag updates (#21597)

Co-authored-by: Dan Abramov <dan.abramov@me.com>",Brian Vaughn,2021-06-01T17:44:10Z
efbd69b27e530cb26f0c055265a624242a32305b," Define global __WWW__ = true flag during www tests (#21504)

* Define global __WWW__ = true flag during www tests

We already do that for __PERSISTENT__.

* Use @gate www in ReactSuspenseCallback

This allows it to not be internal anymore. We test it against the www build.",Sebastian Markbåge,2021-06-01T17:16:06Z
8f6163cbed64d1eff23b91159d6eef34a2ee9c27,Fix Fizz exported types (#21596),Sebastian Markbåge,2021-06-01T17:02:04Z
28625c6f45423e6edc5ca0e2932281769c0d431e,Disable strict effects for legacy roots (again) (#21591),Brian Vaughn,2021-05-31T17:05:50Z
d75105fa92cfc77f41bcd56bf9eb127a132e44cb,"DevTools: Format error message (#21580)

To support GitHub API fuzzy issue search",Brian Vaughn,2021-05-27T19:44:14Z
3c2341416ab3631dffe7a6e525e3cd683c5fa82a,"Update jest to v26 (#21574)

* Install jest 26

* jsdom env now uses 16 by default

* require.requireActual -> jest.requireActual

* deduplicate added deps",Sebastian Silbermann,2021-05-27T15:33:57Z
5151466bab761cd6124d630a8a77d10b1cecbdc9,"Updated DevTools bug Workflow

Workflow now auto-assigns issues needing more information to the person who reported them",Brian Vaughn,2021-05-27T13:49:44Z
0d493dcda96fc86242cf9a05a44130978a56fbdd,"Removed _debugID field from Fiber - Issue #21558 (#21570)

* Removed _debugID field from Fiber
* Update ReactFunctionComponent-test.js

Co-authored-by: Brian Vaughn <brian.david.vaughn@gmail.com>",Pulkit Sharma,2021-05-26T20:53:18Z
bb1c8215569f59b70276e8939bd8a59aa7f28f53,"Fixed localhost URL check

Noticed that it missed 21568 because of a leading ""/""",Brian Vaughn,2021-05-26T14:43:51Z
7841d0695ae4bde9848cf8953baf34d312d0cced,Enable the updater-tracking feature flag in more builds (#21567),Brian Vaughn,2021-05-25T21:41:19Z
6405efc368a75b2b2f5eb80cdf0fda03ba644748,"Enabled Profiling feature flags for OSS release (#21565)

* Enabled Profiling feature flags for OSS release

`enableProfilerCommitHooks` and `enableProfilerNestedUpdatePhase`",Brian Vaughn,2021-05-25T21:32:14Z
0ae5290b5434dd7a14be02a5c3f62bd80ad75d6d,DevTools 4.13.4 -> 4.13.5,Brian Vaughn,2021-05-25T19:18:47Z
965fb8be6b9e59d6552231039f3d8c1ff20d2793,DevTools: Support an element mounting before its owner (#21562),Brian Vaughn,2021-05-25T18:49:05Z
2d8d133e1756ea50a48e615db0c22870e92f4af6,Turn on enableSyncDefaultUpdates everywhere (#21548),Ricky,2021-05-25T15:21:58Z
459c34fde6e22475b09e7215c8d35a513c4fa7b4,"Add flag concurrent root to Fabric render function (#21552)

* Add flag concurrent root to Fabric render function

* Lint",Samuel Susla,2021-05-24T14:56:47Z
a731a51696239a69a6cd89cdd34f23ce2fc39099,Add GitHub action to check for bug repro (#21542),Brian Vaughn,2021-05-21T19:48:12Z
51ebccc37482f84e41417ef2917b0e4e44cc7465,DevTools: Add 4.13.4 changelog,Brian Vaughn,2021-05-20T21:00:17Z
97c25b0e9cef6d4f7aca81f781571d2198d9b037,DevTools: Add 4.10.4 to CHANGELOG,Brian Vaughn,2021-05-20T20:31:18Z
45f1a4a33f8e8015a80aeb18a813ee98cd989c6c,"DevTools: Revert force deep re-mount when Fast Refresh detected (#21539)

This reverts the most expensive part of 1e3383a41 (which seems to no longer be necessary after subsequent changes).",Brian Vaughn,2021-05-20T19:28:59Z
e0bffeeb013f982cd3fd372452efb4f235af0072,Update devtools_bug_report.yml,Brian Vaughn,2021-05-20T18:52:08Z
549aaacbb0978e6570a4a85d9ba998fa091ec79b,Update devtools_bug_report.yml,Brian Vaughn,2021-05-20T18:51:35Z
132b72d7b668cbdabb06a44bd62979b212fc8b6d,DevTools 4.13.3 -> 4.13.4,Brian Vaughn,2021-05-20T15:24:30Z
b8bbb6a13d0d0fc93bd1bf51bd66d626aad84672,"Fix edge-case Fast Refresh bug that caused Fibers with warnings/errors to be untracked prematurely (#21536)

Refactor error/warning count tracking to avoid pre-allocating an ID for Fibers that aren't yet mounted. Instead, we store a temporary reference to the Fiber itself and later check to see if it successfully mounted before merging pending error/warning counts.

This avoids a problematic edge case where a force-remounted Fiber (from Fast Refresh) caused us to untrack a Fiber that was still mounted, resulting in a DevTools error if that Fiber was inspected in the Components tab.",Brian Vaughn,2021-05-20T15:24:08Z
ebcec3cc20417528ffe80f0b11701af42b399939,"Add key to inspected-element error boundary (#21535)

This way changing the selected element also recreates/resets the boundary automatically.",Brian Vaughn,2021-05-19T21:38:12Z
99995c1063d1a9d3bfbcdf41078cb1e685218d99,"Improve error boundary in inspected elements panel (#21531)

Show more info about the error as well as the option to report it to GitHub.",Brian Vaughn,2021-05-19T17:27:56Z
3f8f4675d499ebf8f20cf02ee34aa16045a648b6,Updated DevTools CHANGELOG for 4.13.3 release,Brian Vaughn,2021-05-19T14:59:32Z
d6604ac0318f2ee139492d8dce64d6427e921658,"Account for another DevTools + Fast Refresh edge case (#21523)

DevTools now 'untrack' Fibers (cleans up the ID-to-Fiber mapping) after a slight delay in order to support a Fast Refresh edge case:
1. Component type is updated and Fast Refresh schedules an update+remount.
2. flushPendingErrorsAndWarningsAfterDelay() runs, sees the old Fiber is no longer mounted (it's been disconnected by Fast Refresh), and calls untrackFiberID() to clear it from the Map.
3. React flushes pending passive effects before it runs the next render, which logs an error or warning, which causes a new ID to be generated for this Fiber.
4. DevTools now tries to unmount the old Component with the new ID.

The underlying problem here is the premature clearing of the Fiber ID, but DevTools has no way to detect that a given Fiber has been scheduled for Fast Refresh. (The '_debugNeedsRemount' flag won't necessarily be set.)

The best we can do is to delay untracking by a small amount, and give React time to process the Fast Refresh delay.",Brian Vaughn,2021-05-19T02:44:29Z
b15bf2b2f1effb6f760effac9f48c5901622f27b,DevTools bugfix for useState() with hasOwnProperty key (#21524),Brian Vaughn,2021-05-18T20:43:33Z
343776fc9071f9e8c8a1dee0166c033bf381f04d,Added React entry-points change to DevTools changelog,Brian Vaughn,2021-05-18T17:25:29Z
4d402cdda007f4c0f32336111f9debc8edc18eb2,Preparing DevTools 4.13.2 -> 4.13.3 for release,Brian Vaughn,2021-05-18T17:23:06Z
63927e08438e8a52b41840bd583a07b3ceb2956e,Fixed another Symbol concatenation issue with DevTools format() util (#21521),Brian Vaughn,2021-05-18T15:46:04Z
1e3383a41154cb32d8d6b78b2451ee4dabfcb973,"DevTools: Reload all roots after Fast Refresh force remount (#21516)

Works around the corrupted Store state by detecting a broken Fast Refresh remount and forcefully dropping the root and re-mounting the entire tree. This prevents Fibers from getting duplicated in the Store (and in the Components tree). The benefit of this approach is that it doesn't rely on an update or change in behavior to Fast Refresh. (This workaround is pretty dirty, but since it's a DEV-only code path, it's probably okay.)

Note that this change doesn't fix all of the reported issues (see #21442 (comment)) but it does fix some of them.

This commit also slightly refactors the way DevTools assigns and manages unique IDs for Fibers in the backend by removing the indirection of a ""primary Fiber"" and instead mapping both the primary and alternate.

It also removes the previous cache-on-read behavior of getFiberID and splits the method into three separate functions for different use cases:
* getOrGenerateFiberID – Like the previous function, this method returns an ID or generates and caches a new one if the Fiber hasn't been seen before.
* getFiberIDUnsafe – This function returns an ID if one has already been generated or null if not. (It can be used to e.g. log a message about a Fiber without potentially causing it to leak.)
* getFiberIDThrows – This function returns an ID if one has already been generated or it throws. (It can be used to guarantee expected behavior rather than to silently cause a leak.)",Brian Vaughn,2021-05-18T15:42:08Z
7bef382bf92e380f2b94e825cf35b8af58f8a2ec,Errors thrown by Store can be dismissed in boundary (#21520),Brian Vaughn,2021-05-18T14:36:31Z
316943091ed36b2807b70b765283c7647dd9ffda,Make StrictMode double rendering flag static for FB/www (#21517),Brian Vaughn,2021-05-18T14:07:58Z
e0f89aa056de95afc4c23909fce3d91fefb7dec7,"Clean up Scheduler forks (#20915)

* Clean up Scheduler forks

* Un-shadow variables

* Use timer globals directly, add a test for overrides

* Remove more window references

* Don't crash for undefined globals + tests

* Update lint config globals

* Fix test by using async act

* Add test fixture

* Delete test fixture",Ricky,2021-05-17T20:53:58Z
1a2d7925035531e5767ff31ff8d0d581b5f94d49,Tweaked DevTools error template title to match issue form template,Brian Vaughn,2021-05-14T14:19:58Z
9cf1069ffc5f3835506e314ef8c2e80bbfa8bdca,DevTools: Fixed version range NPM syntax,Brian Vaughn,2021-05-14T14:14:34Z
5890e0e692d1c39eddde0110bd0d123409f31dd3,"Remove data-reactroot from server rendering and hydration heuristic (#20996)

This was used to implicitly hydrate if you call ReactDOM.render.

We've had a warning to explicitly use ReactDOM.hydrate(...) instead of
ReactDOM.render(...). We can now remove this from the generated markup.
(And avoid adding it to Fizz.)

This is a little strange to do now since we're trying hard to make the
root API work the same.

But if we kept it, we'd need to keep it in the generated output which adds
unnecessary bytes. It also risks people relying on it, in the Fizz world
where as this is an opportunity to create that clean state.

We could possibly only keep it in the old server rendering APIs but then
that creates an implicit dependency between which server API and which
client API that you use. Currently you can really mix and match either way.",Sebastian Markbåge,2021-05-13T17:18:21Z
46491dce96e6a151706f51494edfd3cb7f09ed7f,"[Bugfix] Prevent already-committed setState callback from firing again during a rebase (#21498)

* Failing test: Class callback fired multiple times

Happens during a rebase (low priority update followed by high priority
update). The high priority callback gets fired twice.

* Prevent setState callback firing during rebase

Before enqueueing the effect, adds a guard to check if the update was
already committed.",Andrew Clark,2021-05-12T17:40:17Z
b770f750054f85874bc6d483cc1dc01b4f6f5595,"lint-build: Infer format from artifact filename (#21489)

Uses the layout of the build artifact directory to infer the format
of a given file, and which lint rules to apply.

This has the effect of decoupling the lint build job from the existing
Rollup script, so that if we ever add additional post-processing, or
if we replace Rollup, it will still work.

But the immediate motivation is to replace the separate ""stable"" and
""experimental"" lint-build jobs with a single combined job.",Andrew Clark,2021-05-12T17:14:45Z
2bf4805e4bd63dab45cd7f5e1ad32ef8fed3f6ab,"Update entry point exports (#21488)

The following APIs have been added to the `react` stable entry point:
* `SuspenseList`
* `startTransition`
* `unstable_createMutableSource`
* `unstable_useMutableSource`
* `useDeferredValue`
* `useTransition`

The following APIs have been added or removed from the `react-dom` stable entry point:
* `createRoot`
* `unstable_createPortal` (removed)

The following APIs have been added to the `react-is` stable entry point:
* `SuspenseList`
* `isSuspenseList`

The following feature flags have been changed from experimental to true:
* `enableLazyElements`
* `enableSelectiveHydration`
* `enableSuspenseServerRenderer`",Brian Vaughn,2021-05-12T15:28:14Z
b8fda6cabc7efc53356d87c6516d6a3d7eb1253c,[React Native] Set allowConcurrentByDefault = true (#21491),Ricky,2021-05-11T14:12:46Z
3890fb52fe3ca3c71f0422329248c36731ef9cbc,Update devtools_bug_report.yml,Brian Vaughn,2021-05-08T14:46:02Z
57768ef90bdb0110c7b9266185a8f6446934b331,"Update devtools_bug_report.yml

Tweaked label to include emoji characters.",Brian Vaughn,2021-05-07T13:10:50Z
e468072e17e3c2e70fa6eca46a074ff3f948c38a,Updated release scripts to work around GitHub / Circle CI integration problems (#21434),Brian Vaughn,2021-05-07T12:53:39Z
0a8fefca4ce34b9efa5043b875bbda371ca2bc96,DevTools 4.13.1 -> 4.13.2,Brian Vaughn,2021-05-07T12:52:02Z
6005a6ab2b097a7d17cbcd747469fd617165461c,Update devtools_bug_report.yml,Brian Vaughn,2021-05-07T12:48:34Z
85b543c6b477def6366e3442d2eb432f6510cdfa,"Added new GitHub issue form for React DevTools bug reports (#21450)

Added a new bug report template built with GitHub issue forms:
https://gh-community.github.io/issue-template-feedback/structured/

And updated DevTools bug report link to send information formatted for this new template.",Brian Vaughn,2021-05-07T12:46:58Z
1bb8987cc98e09af20a1f9d549433eb9960f669d,Renamed function in error log issue #21446 (#21449),faebzz,2021-05-07T01:03:21Z
bd070eb2c489a1f758e4a55b193820af7346fa15,"Enable setJSResponder/setIsJSResponder for React Native Fabric (#21439)

* Enable setJSResponder/setIsJSResponder for React Native

* yarn prettier

* add types to react-native-host-hooks

* yarn prettier

* mock setIsJSResponder",Joshua Gross,2021-05-06T04:09:04Z
46ef1ab32ad2119ce268b8e292bfa0da7705b852,Convert emulated-Fizz PartialHydration tests to Fizz tests (#21437),Sebastian Markbåge,2021-05-06T01:22:27Z
212d2909d3c66eb5950b915b1f079f261e3ccb7c,"[Fizz] Make some tests more resilient to implementation details (#21438)

* Make some tests resilient against changing the specifics of the HTML

This ensures that for example flipping order of attributes doesn't matter.

* Use getVisibleChildren approach for more resilient tests",Sebastian Markbåge,2021-05-05T23:13:45Z
12751d29914a75f335ce058bfe4e4a57e1304e33,fix: version in nvmrc (#21430),Gang Chen,2021-05-05T16:39:06Z
8ea11306ad473b26a2c899ef7a893d25413f3510,Allow complex objects as children of option only if value is provided (#21431),Sebastian Markbåge,2021-05-05T15:40:54Z
014edf19808d5f34c174fec99c1a7792c734ba7a,Prepare DevTools 4.13.1 release,Brian Vaughn,2021-05-05T02:35:30Z
67ebdf88bfebb728f48d9842c479b4fac545a43d,Fix DevTools bug with Suspense+LegacyHidden component (#21432),Brian Vaughn,2021-05-05T02:28:17Z
e9a4a44aae675e1b164cf2ae509e438c324d424a,"Add back root override for strict mode (#21428)

* Add back root override for strict mode

* Switch flag to boolean

* Fix flow",Ricky,2021-05-04T19:42:48Z
d1542de3a607024421e13db01a42d8ba5930c389,"Unify React.memo and React.forwardRef display name logic (#21392)

Co-authored-by: iChenLei <2470828450@qq.com>",Brian Vaughn,2021-05-04T15:40:16Z
d19257b8fabd883d1db91811d81e10651d059e71,"DevTools Store emits errors before throwing (#21426)

The Store should never throw an Error without also emitting an event. Otherwise Store errors will be invisible to users, but the downstream errors they cause will be reported as bugs. (For example, github.com/facebook/react/issues/21402)

Emitting an error event allows the ErrorBoundary to show the original error.

Throwing is still valuable for local development and for unit testing the Store itself.",Brian Vaughn,2021-05-04T14:46:26Z
442eb21e0e6541460157782d18edea1383ed62fd,Allow dangerouslySetInnerHTML in <option> (#21373),Sebastian Markbåge,2021-05-04T14:45:54Z
9a130e1dec268e02977bca46415dc28f332964b6,"StrictMode includes strict effects by default (#21418)

Removed ""unstable_level"" attribute support for the time being.",Brian Vaughn,2021-05-04T13:47:06Z
b522638b994abfea16b981efdf88e11d1078c982,"Add GitHub API query to bug report template (#21421)

This may help debug why sometimes the GitHub API search seems to not find a match when it should.",Brian Vaughn,2021-05-04T04:09:11Z
4ca62cac45c288878d2532e5056981d177f9fdac,Improve DevTools bug template text (#21413),Brian Vaughn,2021-05-03T20:57:17Z
15fb8c3045064e13e81706a36bf0e4e419803c97,createRoot API is no longer strict by default (#21417),Brian Vaughn,2021-05-03T20:57:03Z
aea7c2aab18f2c288a1fcab0cf7a14560b5db35e,"Re-land ""Support nesting of startTransition and flushSync (alt) (#21149)""

This re-lands commit faa1e127f1ba755da846bc6ce299cdefaf97721f.",Andrew Clark,2021-05-03T18:34:23Z
bacc87068a5818b597f5cd9938ce0ce205cab53b,"Re-land ""Flush discrete passive effects before paint (#21150)""

This re-lands commit 2e7aceeb5c8b6e5c61174c0e9731e263e956e445.",Andrew Clark,2021-05-03T18:34:22Z
098600c42addca272bcb833bf55f53a65126e8aa,"Re-land ""Fix: flushSync changes priority inside effect (#21122)""

This re-lands commit 0e3c7e1d62efb6238b69e5295d45b9bd2dcf9181.",Andrew Clark,2021-05-03T18:34:21Z
df420bc0a360ae443ec447ca87808d91975e6b82,"Re-land ""Delete LanePriority type (#21090)""

This re-lands commit 26ddc63f2dcc8e7dcbacf498237a2bb1e28a7d23.",Andrew Clark,2021-05-03T18:34:20Z
ab5b3792752385c7dcb5ad7ecd6bd9f0aa589f01,"Re-land ""Clean up host pointers in level 2 of clean-up flag (#21112)""

This re-lands commit 8ed0c85bf174ce6e501be62d9ccec1889bbdbce1.",Andrew Clark,2021-05-03T18:34:19Z
fd907c1f153958950ba48db758cbd826d1e1af53,"Re-land ""Use highest priority lane to detect interruptions (#21088)""""

This re-lands commit b4044f8a07323bcad7d55cbaedc35c35b4acf7e0.",Andrew Clark,2021-05-03T18:34:19Z
79740da4c6126abda1f9daf9f666cf200ea30fbb,Update time-slicing demo (#21401),Ricky,2021-05-01T00:50:59Z
b6644fabb9634216b3c422b52d29abcfb1ee2e77,Added test fixture for scheduling profiler (#21397),Brian Vaughn,2021-04-30T19:23:45Z
269dd6ec5da85fc5ca819cfa010ce60dd1c83ec6,"subtreeFlag warning: Fix legacy suspense false positive (#21388)

Legacy Suspense is weird. We intentionally commit a suspended fiber in
an inconsistent state. If the fiber suspended before it mounted any
effects, then the fiber won't have a PassiveStatic effect flag, which
will trigger the ""missing expected subtreeFlag"" warning.

To avoid the false positive, we'd need to mark fibers that commit in an
incomplete state, somehow. For now I'll disable the warning in legacy
mode, with the assumption that most of the bugs that would trigger it
are either exclusive to concurrent mode or exist in both.",Andrew Clark,2021-04-29T13:28:38Z
3c21aa855a13707a8abe5dc6eaf2d2a7429fa762,DevTools refactor Profiler commit tree reconstruction to be iterative (#21383),Brian Vaughn,2021-04-28T20:32:35Z
9e9dac650535406b25979758a630a78b7c68a22c,Add unstable_concurrentUpdatesByDefault (#21227),Ricky,2021-04-28T20:09:30Z
86f3385d9ae12fe7ff233fdb5a2b46f63095a75c,"Revert ""Use highest priority lane to detect interruptions (#21088)""

This reverts commit b4044f8a07323bcad7d55cbaedc35c35b4acf7e0.

Instead of LanePriority.

I'm removing all uses of LanePriority so I can delete it.",Andrew Clark,2021-04-23T16:55:11Z
c6702656ff312fda4da9f442c99fe3931745c80d,"Revert ""Clean up host pointers in level 2 of clean-up flag (#21112)""

This reverts commit 8ed0c85bf174ce6e501be62d9ccec1889bbdbce1.

The host tree is a cyclical structure. Leaking a single DOM node can
retain a large amount of memory. React-managed DOM nodes also point
back to a fiber tree.

Perf testing suggests that disconnecting these fields has a big memory
impact. That suggests leaks in non-React code but since it's hard to
completely eliminate those, it may still be worth the extra work to
clear these fields.

I'm moving this to level 2 to confirm whether this alone is responsible
for the memory savings, or if there are other fields that are retaining
large amounts of memory.

In our plan for removing the alternate model, DOM nodes would not be
connected to fibers, except at the root of the whole tree, which is
easy to disconnect on deletion. So in that world, we likely won't have
to do any additional work.",Andrew Clark,2021-04-23T16:53:36Z
1bd41c6645af83d537e5b9c2b50ec076c1c5b315,"Revert ""Delete LanePriority type (#21090)""

This reverts commit 26ddc63f2dcc8e7dcbacf498237a2bb1e28a7d23.

No longer using LanePriority anywhere, so this deletes the
remaining references.",Andrew Clark,2021-04-23T16:50:04Z
e7e0a90bd8558af16bb6aa278097536d9b69643c,"Revert ""Fix: flushSync changes priority inside effect (#21122)""

This reverts commit 0e3c7e1d62efb6238b69e5295d45b9bd2dcf9181.

When called from inside an effect, flushSync cannot synchronously flush
its updates because React is already working. So we fire a warning.

However, we should still change the priority of the updates to sync so
that they flush at the end of the current task.

This only affects useEffect because updates inside useLayoutEffect (and
the rest of the commit phase, like ref callbacks) are already sync.",Andrew Clark,2021-04-23T16:48:13Z
7bac7607a764074e66dd57c68c09ec5cc898f4a5,"Revert ""Flush discrete passive effects before paint (#21150)""

This reverts commit 2e7aceeb5c8b6e5c61174c0e9731e263e956e445.

If a discrete render results in passive effects, we should flush them
synchronously at the end of the current task so that the result is
immediately observable. For example, if a passive effect adds an event
listener, the listener will be added before the next input.

We don't need to do this for effects that don't have discrete/sync
priority, because we assume they are not order-dependent and do not
need to be observed by external systems.

For legacy mode, we will maintain the existing behavior, since it hasn't
been reported as an issue, and we'd have to do additional work to
distinguish ""legacy default sync"" from ""discrete sync"" to prevent all
passive effects from being treated this way.",Andrew Clark,2021-04-23T16:46:58Z
207d4c3a535d4624f17634baa6bfe613f5f3e4e6,"Revert ""Support nesting of startTransition and flushSync (alt) (#21149)""

This reverts commit faa1e127f1ba755da846bc6ce299cdefaf97721f.

* Support nesting of startTransition and flushSync

* Unset transition before entering any special execution contexts

Co-authored-by: Andrew Clark <git@andrewclark.io>",Andrew Clark,2021-04-23T16:44:57Z
2a7bb4154809f1f4e17ffbdde1342bd4ce91ea37,Preparing DevTools 4.12.4 -> 4.13.0 release (#21378),Brian Vaughn,2021-04-28T16:36:24Z
7edd6281344a35519ca36b8a8280e7ba37187004,Removed (deleted) tracing fixture test from relesae scripts,Brian Vaughn,2021-04-28T16:36:09Z
a0d6b155dc3a182162b9f91baac33df39d7919df,"DevTools should iterate over siblings during mount (#21377)

Previously, DevTools recursed over both children and siblings during mount. This caused potential stack overflows when there were a lot of children (e.g. a list containing many items).

Given the following example component tree:

       A
    B  C  D
    E     F
          G

A method that recurses for every child and sibling leads to a max depth of 6:

    A
    A -> B
    A -> B -> E
    A -> B -> C
    A -> B -> C -> D
    A -> B -> C -> D -> F
    A -> B -> C -> D -> F -> G

The stack gets deeper as the tree gets either deeper or wider.

A method that recurses for every child and iterates over siblings leads to a max depth of 4:

    A
    A -> B
    A -> B -> E
    A -> C
    A -> D
    A -> D -> F
    A -> D -> F -> G

The stack gets deeper as the tree gets deeper but is resilient to wide trees (e.g. lists containing many items).",Brian Vaughn,2021-04-28T14:29:22Z
a5267faad5849eb3d10ead6be911f661691e0345,Updated DevTools CHANGELOG for 4.10 releases,Brian Vaughn,2021-04-28T12:58:27Z
5196a95fd1266e4c8f86f42c49b14e9fcc19c6a7,Updated DevTools to replace fburl.com link with fb.me link,Brian Vaughn,2021-04-28T03:49:30Z
ecb599cd87b39c23b44c2cc7daad9df42f4c2385,DevTools supports multiple modal dialogs at once (#21370),Brian Vaughn,2021-04-28T00:33:11Z
8e2bb3e89c8c3c8b64b3aa94e0bb524775ef4522,"DevTools: Add Bridge protocol version backend/frontend (#21331)

Add an explicit Bridge protocol version to the frontend and backend components as well as a check during initialization to ensure that both are compatible. If not, the frontend will display either upgrade or downgrade instructions.

Note that only the `react-devtools-core` (React Native) and `react-devtools-inline` (Code Sandbox) packages implement this check. Browser extensions inject their own backend and so the check is unnecessary. (Arguably the `react-devtools-inline` check is also unlikely to be necessary _but_ has been added as an extra guard for use cases such as Replay.io.)",Brian Vaughn,2021-04-27T21:26:07Z
22ab39be681251f1c0f257af7e636cb8debf31c4,DevTools console patching should handle Symbols without erroring (#21368),Brian Vaughn,2021-04-27T20:36:20Z
2182563dc400b51fccea034dfcebe2aff9ee979e,"Let value override defaultValue if both are specified (#21369)

There's a DEV warning for this case but we still test for the production
behavior.",Sebastian Markbåge,2021-04-27T20:18:42Z
29faeb2df30347dc260fe4681d4526876c351db1,Remove unnecessary type cast (#21363),Sebastian Silbermann,2021-04-27T16:37:14Z
4edbcdc3274aa4cd4969d9c5ffe379b5dd3c18b5,Update supported devEngines (#21364),Sebastian Silbermann,2021-04-27T16:03:25Z
9a2591681e8da73da35c1116c0087d9c309afa2a,Fix export,Sebastian Markbage,2021-04-27T13:44:17Z
4a8deb08367d93d51912871b6d0e62852d0e981a,Switch the isPrimaryRender flag based on the stream config (#21357),Sebastian Markbåge,2021-04-27T02:37:05Z
bd4f056a3ef13ccf3eab4a154b5036a44e0d239d,"[Fizz] Implement lazy components and nodes (#21355)

* Implement lazy components

* Implement lazy elements / nodes

This is used by Flight to encode not yet resolved nodes of any kind.",Sebastian Markbåge,2021-04-27T01:46:46Z
a2ae42db90d626eda8f84f127068bd1f95fb5a6d,Escape style values (#21356),Sebastian Markbåge,2021-04-27T01:46:36Z
fc33f12bdee1d0ffbcc83d25199cdf4d47252736,Remove unstable scheduler/tracing API (#20037),Brian Vaughn,2021-04-26T23:16:18Z
72123839450ac3344e03fb7caf5d295188214241,Enable strict effects mode for React Native Facebook builds (#21354),Brian Vaughn,2021-04-26T20:32:05Z
84b9162cbe91a8c0169ec1171273be58f3a2398a,Use toMatchInlineSnapshot for dehydrated values (#20618),Sebastian Silbermann,2021-04-26T16:30:34Z
48740429b4a74e984193e4e2d364d461e4fdc3be,"Expiration: Do nothing except disable time slicing (#21345)

We have a feature called ""expiration"" whose purpose is to prevent
a concurrent update from being starved by higher priority events.
If a lane is CPU-bound for too long, we finish the rest of the work
synchronously without allowing further interruptions.

In the current implementation, we do this in sort of a roundabout way:
once a lane is determined to have expired, we entangle it with SyncLane
and switch to the synchronous work loop.

There are a few flaws with the approach. One is that SyncLane has a
particular semantic meaning besides its non-yieldiness. For example,
`flushSync` will force remaining Sync work to finish; currently, that
also includes expired work, which isn't an intended behavior, but rather
an artifact of the implementation.

An event worse example is that passive effects triggered by a Sync
update are flushed synchronously, before paint, so that its result
is guaranteed to be observed by the next discrete event. But expired
work has no such requirement: we're flushing expired effects before
paint unnecessarily.

Aside from the behaviorial implications, the current implementation has
proven to be fragile: more than once, we've accidentally regressed
performance due to a subtle change in how expiration is handled.

This PR aims to radically simplify how we model starvation protection by
scaling back the implementation as much as possible. In this new model,
if a lane is expired, we disable time slicing. That's it. We don't
entangle it with SyncLane. The only thing we do is skip the call to
`shouldYield` in between each time slice. This is identical to how we
model synchronous-by-default updates in React 18.",Andrew Clark,2021-04-24T23:32:48Z
0f5ebf366ea4eca2e6c6a652606af3218f12edd6,"Delete unreferenced type (#21343)

Had already deleted all the uses but didn't remove the type itself.",Andrew Clark,2021-04-23T22:41:53Z
9cd52b27fe7be3c320d1e94a016fc416e66569b1,"Restore context after an error happens (#21341)

Typically we don't need to restore the context here because we assume that
we'll terminate the rest of the subtree so we don't need the correct
context since we're not rendering any siblings.

However, after a nested suspense boundary we need to restore the context.
The boundary could do this but since we're already doing this in the
suspense branch of renderNode, we might as well do it in the error case
which isn't very perf sensitive anyway.",Sebastian Markbåge,2021-04-23T19:24:10Z
ad091759a949747f55e1bad498d19be884d4a654,"Revert ""Emit reactroot attribute on the first element we discover (#21154)"" (#21340)

This reverts commit 266c26ad45c977ecf67e9359809c37da1489ca63.",Sebastian Markbåge,2021-04-23T17:28:44Z
709f9484122f5913fcdf2520eab230dbb0ae6bd2,"[Fizz] Add FB specific streaming API and build (#21337)

Add FB specific streaming API and build",Sebastian Markbåge,2021-04-22T23:54:29Z
af5037a7a8ee983337a08eeff7477656bd80f5ec,"[Fizz] Wire up the Fixture (#21273)

* Wire up fizz to fixture

* Fixed typo conditional",Sebastian Markbåge,2021-04-22T22:00:35Z
e8cdce40d667fa6745c9412b764c65eb85435b97,"Don't flush sync at end of discreteUpdates (#21327)

All it should do is change the priority. The updates will be flushed
by the microtask.",Andrew Clark,2021-04-22T20:28:05Z
a1558600183b4321d4cdc117925980f1865641fa,"Fix: Don't flush discrete at end of batchedUpdates (#21229)

The outermost `batchedUpdates` call flushes pending sync updates at the
end. This was intended for legacy sync mode, but it also happens to
flush discrete updates in concurrent mode.

Instead, we should only flush sync updates at the end of
`batchedUpdates` for legacy roots. Discrete sync updates can wait to
flush in the microtask.

`discreteUpdates` has the same issue, which is how I originally noticed
this, but I'll change that one in a separate commit since it requires
updating a few (no longer relevant) internal tests.",Andrew Clark,2021-04-21T16:32:09Z
89847bf6e6c0b77ced5dfc7b794c730bb3deac36,"Continuous updates should interrupt transitions (#21323)

Even when updates are sync by default.

Discovered this quirk while working on #21322. Previously, when sync
default updates are enabled, continuous updates are treated like
default updates. We implemented this by assigning DefaultLane to
continous updates. However, an unintended consequence of that approach
is that continuous updates would no longer interrupt transitions,
because default updates are not supposed to interrupt transitions.

To fix this, I changed the implementation to always assign separate
lanes for default and continuous updates. Then I entangle the
lanes together.",Andrew Clark,2021-04-21T15:51:04Z
ef37d55b68ddc45d465b84ea2ce30e8328297b2d,"Use performConcurrentWorkOnRoot for ""sync default"" (#21322)

Instead of `performSyncWorkOnRoot`.

The conceptual model is that the only difference between sync default
updates (in React 18) and concurrent default updates (in a future major
release) is time slicing. All other behavior should be the same
(i.e. the stuff in `finishConcurrentRender`).

Given this, I think it makes more sense to model the implementation this
way, too. This exposed a quirk in the previous implementation where
non-sync work was sometimes mistaken for sync work and flushed too
early. In the new implementation, `performSyncWorkOnRoot` is only used
for truly synchronous renders (i.e. `SyncLane`), which should make these
mistakes less common.

Fixes most of the tests marked with TODOs from #21072.",Andrew Clark,2021-04-21T15:29:31Z
a632f7de3bd35eaf6d5082054af4da92dd37cf20,Flip tuple order of useTransition (#20976),Ricky,2021-04-20T16:21:44Z
bd7f4a013be3ef272a01874532bee71ad861e617,"Fix sloppy factoring in `performSyncWorkOnRoot` (#21246)

* Warn if `finishedLanes` is empty in commit phase

See #21233 for context.

* Fix sloppy factoring when assigning finishedLanes

`finishedLanes` is assigned in `performSyncWorkOnRoot` and
`performSyncWorkOnRoot`. It's meant to represent whichever lanes we
used to render, but because of some sloppy factoring, it can sometimes
equal `NoLanes`.

The fixes are:
- Always check if the lanes are not `NoLanes` before entering the work
loop. There was a branch where this wasn't always true.
- In `performSyncWorkOnRoot`, don't assume the next lanes are sync; the
priority may have changed, or they may have been flushed by a
previous task.
- Don't re-assign the `lanes` variable (the one that gets assigned to
`finishedLanes` until right before we enter the work loop, so that it
is always corresponds to the newest complete root.",Andrew Clark,2021-04-20T16:14:55Z
78120032d4ca7ee8611d630d7c67e7808885dfe9,"Remove `flushDiscreteUpdates` from end of event (#21223)

We don't need this anymore because we flush in a microtask.

This should allow us to remove the logic in the event system that
tracks nested event dispatches.

I added a test to confirm that nested event dispatches don't triggger
a synchronous flush, like they would if we wrapped them `flushSync`. It
already passed; I added it to prevent a regression.",Andrew Clark,2021-04-20T15:25:31Z
a3a7adb83ea28667714df91ef7e03dbe358330c3,Turn off enableSyncDefaultUpdates in test renderer (#21319),Ricky,2021-04-20T05:20:48Z
cdb6b4c554bb40654d6c3e72f06b29003bec8dc7,Only hide outermost host nodes when Offscreen is hidden (#21250),Brian Vaughn,2021-04-20T01:33:42Z
7becb2ff1befe8788f30268ebd8ad59aefcdb4f1,DevTools version bump 4.12.3 -> 4.12.4,Brian Vaughn,2021-04-20T01:23:01Z
83bdc565f9921c341d558e29401d20151166695b,Remove @octokit/rest dependency from DevTools (#21317),Brian Vaughn,2021-04-20T01:20:34Z
b9c6a2b30ea6852da993a20e54089eda9ed4ba9b,Remove LayoutStatic check from commit phase (#21249),Brian Vaughn,2021-04-19T19:16:24Z
8f202a7c8dc9b1a644f830bf3066b3bb7dfd915d,DevTools version bump 4.12.2 -> 4.12.3,Brian Vaughn,2021-04-19T17:09:07Z
4def1ceee2acc241f2434b2cfab6b8bc4c741cb3,Update DevTools Error strings to support GitHub fuzzy search (#21314),Brian Vaughn,2021-04-19T17:05:28Z
af1a4cbf7adf2acae6f869e397198752d150e29a,"Revert expiration for retry lanes (#21300)

Retries should be allowed to expire if they are CPU bound for too long,
but when I made this change it caused a spike in browser crashes. There
must be some other underlying bug; not super urgent but ideally should
figure out why and fix it. Unfortunately we don't have a repro for the
crashes, only detected via production metrics.",Andrew Clark,2021-04-16T21:45:09Z
c3cb2c2b30b2d5e767ab57a461441d157bbb5a1e,Fix DevTools test target (#21267),Brian Vaughn,2021-04-16T20:19:05Z
d14b6a4bddda99421df7ed53ae6a7c682c4b50a9,DevTools version bump 4.12.1 -> 4.12.2,Brian Vaughn,2021-04-16T16:35:29Z
5027eb4650730d2bc7f909f2567828ffdf938642,"DevTools fork console patching logic (#21301)

React has its own component stack generation code that DevTools embeds a fork of, but both of them use a shared helper for disabling console logs. This shared helper is DEV only though, because it was intended for use with React DEV-only warnings and we didn't want to unnecessarily add bytes to production builds.

But DevTools itself always ships as a production build– even when it's used to debug DEV bundles of product apps (with third party DEV-only warnings). That means this helper was always a noop.

The resolveCurrentDispatcher method was changed recently to replace the thrown error with a call to console.error. This newly logged error ended up slipping through and being user visible because of the above issue.

This PR updates DevTools to also fork the console patching logic (to remove the DEV-only guard).

Note that I didn't spot this earlier because my test harness (react-devtools-shell) always runs in DEV mode. 🤡",Brian Vaughn,2021-04-16T16:01:47Z
c1a53ad2b2f29f30412c682b42bdd6ac3227eafa,DevTools pre-filter GH issues by repo (#21292),Brian Vaughn,2021-04-15T23:56:41Z
cc4b431dab2a9ee296212d698a6034f5fe4ac8c8,Mark boundary as client rendered even if aborting fallback (#21294),Sebastian Markbåge,2021-04-15T23:16:40Z
f7cdc893618e9701a8e3403b2b63bfc8233c6771,Also turn off enableSyncDefaultUpdates in RN test renderer (#21293),Ricky,2021-04-15T20:31:46Z
4c9eb2af1e917529cbefa4b4e0c2923efd016ff5,"Add dynamic flags to React Native (#21291)

* Add dynamic flags to React Native

* Hardcode the setting to false instead",Ricky,2021-04-15T19:30:09Z
f3337aa544998be249c63ad3accc5008dbb938ed,DevTools error boundary: Search for pre-existing GH issues (#21279),Brian Vaughn,2021-04-15T17:34:54Z
9eddfbf5af13d95c703c10072c8c2f7c0ddf8071,"[Fizz] Two More Fixes (#21288)

* Emit value of option tags

* Mask the legacy context passed to classes",Sebastian Markbåge,2021-04-15T17:26:49Z
11b07597ee96305283449e9eae6d12fb6077a9c6,Fix classes (#21283),Sebastian Markbåge,2021-04-15T15:06:31Z
96d00b9bba82d9b9f94a4986e52c38b995ef9941,[Fizz] Random Fixes (#21277),Sebastian Markbåge,2021-04-15T03:29:30Z
0e100ed00fb52cfd107db1d1081ef18fe4b9167f,"Gate a test (#21275)

Rebase error",Sebastian Markbåge,2021-04-14T23:37:44Z
81ef5395358b6e0f44a02df618901eaef830fe78,Always insert a dummy node with an ID into fallbacks (#21272),Sebastian Markbåge,2021-04-14T22:39:51Z
266c26ad45c977ecf67e9359809c37da1489ca63,"Emit reactroot attribute on the first element we discover (#21154)

This may not be the first root element if the root is a fragment and the
second one unsuspends first. But this tag doesn't work well for root
fragments anyway.",Sebastian Markbåge,2021-04-14T22:09:22Z
a4a940d7a15814e50c977179f7d2be3c76611707,"[Fizz] Add unsupported Portal/Scope components (#21261)

* Update Portal error message

* Add Scope Component",Sebastian Markbåge,2021-04-14T21:35:36Z
f4d7a0f1ea0cd24e1979a9be6b2778b98cef414c,"Implement useOpaqueIdentifier (#21260)

The format of this ID is specific to the format.",Sebastian Markbåge,2021-04-14T21:25:42Z
dde875dfb1f84692ed02f82b0fc781bec9a864ef,"[Fizz] Implement Hooks (#21257)

* Implement Fizz Hooks

This is pretty much just a copy of the partial renderer Hooks.

* Implement forward ref and memo",Sebastian Markbåge,2021-04-14T21:16:41Z
a597c2f5dc5596bea331b455aca0548fb933038e,"[Fizz] Fix reentrancy bug (#21270)

* Fix reentrancy bug

* Fix another reentrancy bug

There's also an issue if we try to schedule something to be client
rendered if its fallback hasn't rendered yet. So we don't do it
in that case.",Sebastian Markbåge,2021-04-14T20:49:14Z
68097787f6e8f6d73af06e7c549a294df942b986,"DevTools should use reconciler version (rather than renderer version)

when available (#21269)",Brian Vaughn,2021-04-14T18:48:05Z
15e779d921e11f22a39e688a5de89c3777462114,Reconciler should inject its own version into DevTools hook (#21268),Brian Vaughn,2021-04-14T18:47:36Z
4f76a28c93c56e3f0c03150460fd4236880e0c94,"[Fizz] Implement New Context (#21255)

* Add NewContext module

This implements a reverse linked list tree containing the previous
contexts.

* Implement recursive algorithm

This algorithm pops the contexts back to a shared ancestor on the way down
the stack and then pushes new contexts in reverse order up the stack.

* Move isPrimaryRenderer to ServerFormatConfig

This is primarily intended to be used to support renderToString with a
separate build than the main one. This allows them to be nested.

* Wire up more element type matchers

* Wire up Context Provider type

* Wire up Context Consumer

* Test

* Implement reader in class

* Update error codez",Sebastian Markbåge,2021-04-14T18:45:42Z
6b3d86a2e92fdb79dedf05b759860bd7fd911222,Fixed bug in react-detools-inline frontend init method (#21265),Brian Vaughn,2021-04-14T17:27:21Z
82ef450e0e22ef3d5cff03d26aed7d708fa10537,remove obsolete SharedArrayBuffer ESLint config (#21259),Henry Q. Dineen,2021-04-14T16:55:23Z
ea155e2267b3e4fd958d174f8f0e2b09b1c8ecf2,"Update code of conduct (#21251)

We are updating our code of conduct to include activities outside the project.

https://developers.facebook.com/blog/post/2021/04/12/facebook-open-source-ally/",Paul O’Shannessy,2021-04-13T23:33:31Z
dbadfa2c36f77a8adf1bcae2c85e6f2e0e3d4137,"[Fizz] Classes Follow Up (#21253)

* Port Classes from Fiber to Fizz

* Test",Sebastian Markbåge,2021-04-13T20:57:36Z
84c06fef8168e779d15cc9450f67888445f7b4f4,Add createBridge and createStore exports to react-devtools-inline (for Replay integration) (#21032),Brian Vaughn,2021-04-12T21:07:14Z
686b635b7141511a7bbe751430f6680fc5cca2e2,"Prevent reading canonical property of null (#21242)

* Prevent reading canonical property of null

* prettier",Joshua Gross,2021-04-12T18:10:51Z
dd8552ae0d82afed66fec649ee5c044c69c65e92,"yarn test: Default to bleeding edge configuration (#21238)

My personal workflow is to develop against the www-modern release
channel, with the variant flags enabled, because it encompasses the
largest set of features. Then I rely on CI to run the tests against
all the other configurations.

So in practice, I almost always run

```
yarn test -r=www-modern --variant TEST_FILE
```

instead of

```
yarn test TEST_FILE
```

So, I've updated the `yarn test` command to use those options
by default.",Andrew Clark,2021-04-12T16:49:26Z
9d48779b362ef773da50fef95af6998b560c75c0,Fixed broken feature flag import for DT inline package (#21237),Brian Vaughn,2021-04-11T18:59:52Z
bb88ce95a87934a655ef842af776c164391131ac,"Bugfix: Don't rely on `finishedLanes` for passive effects (#21233)

I recently started using `pendingPassiveEffectsLanes` to check if there were any pending
passive effects (530027a). `pendingPassiveEffectsLanes` is the value of
`root.finishedLanes` at the beginning of the commit phase. When there
are pending passive effects, it should always be a non-zero value,
because it represents the lanes used to render the effects.

But it turns out that `root.finishedLanes` isn't always correct.
Sometimes it's `NoLanes` even when there's a new commit.

I found this while investigating an internal bug report. The only repro
I could get was via a headless e2e test runner; I couldn't get one in an
actual browser, or other interactive environment. I used the e2e test to
bisect and confirm the fix. But I don't know yet know how to write a
regression test for the precise underlying scenario. I can probably
reverse engineer one by studying the code; after a quick glance
at `performConcurrentWorkOnRoot` and `performSyncWorkOnRoot`, it's not
hard to see how this might happen.

In the meantime, I'll revert the recent change that exposed the bug.

I was surprised that this had never come up before, since the code that
assigns `root.finishedLanes` is in an extremely hot path, and it hasn't
changed in a while. The reason is that, before 530027a,
`root.finishedLanes` was only used by the DevTools profiler, which is
probably why we had never noticed any issues. In addition to fixing the
inconsistency, we might also consider making `finishedLanes` a
profiling-only field.",Andrew Clark,2021-04-11T09:09:41Z
343710c9230d643ec442acef4634e380c1f0bce9,[Fizz] Fragments and Iterable support (#21228),Sebastian Markbåge,2021-04-10T19:50:42Z
933880b4544a83ce54c8a47f348effe725a58843,"Make time-slicing opt-in (#21072)

* Add enableSyncDefaultUpdates feature flag

* Add enableSyncDefaultUpdates implementation

* Fix tests

* Switch feature flag to true by default

* Finish concurrent render whenever for non-sync lanes

* Also return DefaultLane with eventLane

* Gate interruption test

* Add continuout native event test

* Fix tests from rebasing main

* Hardcode lanes, remove added export

* Sync forks",Ricky,2021-04-09T23:50:09Z
b0407b55ff59c60530c85a1ed14b55950d94cb9a,"Support more empty types (#21225)

Undefined errors as a direct return value.

This changes semantics for ""true"" and functions to mirror the client.",Sebastian Markbåge,2021-04-09T23:23:37Z
39713716aa09c025bb4c3c8c0c9d7979946250c7,"Merge isObject branches (#21226)

We assume that isArray and getIteratorFn are only called on objects.

So we shouldn't have to check that again and again, and then check a flag.

We can just stay in this branch.

There is a slight semantic breakage here because you could have an
iterator on a function, such as if it's a generator function. But that's
not supported and that currently only works at the root. The inner slots
don't support this.

So this just makes it consistent.",Sebastian Markbåge,2021-04-09T23:19:13Z
d4cae99f2a59e0380871134960d29ec5ce2c4fd9,Prepare DevTools CHANGELOG and versions for 4.11.0 release (#21221),Brian Vaughn,2021-04-09T23:12:13Z
8a4a59c725a9cc2defafd7ea4d2ae46dadd1daec,Remove textarea special case from child fiber (#21222),Sebastian Markbåge,2021-04-09T21:02:13Z
bdc23c3dba86eaa03c7accecc16e8fd997e9185e,DevTools shows which fibers scheduled the current update (#21171),Brian Vaughn,2021-04-09T14:35:06Z
dc108b0f55387c811899aeb92e583294b0707b1c,"Track which fibers scheduled the current render work (#15658)

Tracked Fibers are called ""updaters"" and are exposed to DevTools via a 'memoizedUpdaters' property on the ReactFiberRoot. The implementation of this feature follows a vaguely similar approach as interaction tracing, but does not require reference counting since there is no subscriptions API.

This change is in support of a new DevTools Profiler feature that shows which Fiber(s) scheduled the selected commit in the Profiler.

All changes have been gated behind a new feature flag, 'enableUpdaterTracking', which is enabled for Profiling builds by default. We also only track updaters when DevTools has been detected, to avoid doing unnecessary work.",Brian Vaughn,2021-04-09T14:34:33Z
6ea749170b6d59b8dfb8bbbb8d05d986099e7830,Fix typo in comment (#21214),inokawa,2021-04-09T03:20:01Z
b38ac13f946ad305ead05a6a83511549db27322e,"DevTools: Add post-commit hook (#21183)

I recently added UI for the Profiler's commit and post-commit durations to the DevTools, but I made two pretty silly oversights:

    1. I used the commit hook (called after mutation+layout effects) to read both the layout and passive effect durations. This is silly because passive effects may not have flushed yet git at this point.
    2. I didn't reset the values on the HostRoot node, so they accumulated with each commit.

    This commitR addresses both issues:

    1. First it adds a new DevTools hook, onPostCommitRoot*, to be called after passive effects get flushed. This gives DevTools the opportunity to read passive effect durations (if the build of React being profiled supports it).
    2. Second the work loop resets these durations (on the HostRoot) after calling the post-commit hook so address the accumulation problem.
    I've also added a unit test to guard against this regressing in the future.

    * Doing this in flushPassiveEffectsImpl seemed simplest, since there are so many places we flush passive effects. Is there any potential problem with this though?",Brian Vaughn,2021-04-09T02:04:51Z
b943aeba88237265523ec8cdaf40d24a171681fc,"Fix: Passive effect updates are never sync (#21215)

I screwed this up in #21082. Got confused by the < versus > thing again.

The helper functions are annoying, too, because I always forget the
intended order of the arguments. But they're still helpful because when
we refactor the type we only have the change the logic in one place.

Added a regression test.",Andrew Clark,2021-04-09T01:45:35Z
d389c54d179f8228d11b058141be4ddd02608abe,Offscreen: Use JS stack to track hidden/unhidden subtree state (#21211),Brian Vaughn,2021-04-08T21:27:18Z
c486dc1a46c47ad276140a51b1155eb1f8900dd8,"Remove unnecessary processUpdateQueue (#21199)

We've just initialized the update queue above this and there's no user
code that executes between.

The general API that prevents this from mattering is that you can't
call setState in the constructor.",Sebastian Markbåge,2021-04-08T18:14:51Z
cf45a623a1787cf57094eb7d2f66903d358647fa,"[Fizz] Implement Classes (#21200)

* Legacy context

* Port Classes from Fiber to Fizz",Sebastian Markbåge,2021-04-08T17:42:37Z
75c616554d06bfd2c82108ad0c0196d674c72ba9,Include actual type of `Profiler#id` on type mismatch (#20306),Sebastian Silbermann,2021-04-08T17:36:42Z
1214b302e11b06f5fd11f2af20c20b2f26386827,"test: Fix ""couldn't locate all inline snapshots"" (#21205)",Sebastian Silbermann,2021-04-08T15:18:13Z
1a02d2792e470d28dfbd0ea0723ca439856ba197,style: delete unused isHost check (#21203),wangao,2021-04-08T12:58:24Z
782f689ca8380a715ab0c24e326fc293e5d25647,Don't double invoke getDerivedStateFromProps for module pattern (#21193),Sebastian Markbåge,2021-04-07T23:20:25Z
e90c76a651a9889830f32256e2c2e2a408b713c5,"Revert ""Offscreen: Use JS stack to track hidden/unhidden subtree state"" (#21194)

This reverts commit 1f8583de8c5e69f27a871a2069dcb5aecac02f40.",Brian Vaughn,2021-04-07T21:51:48Z
1f8583de8c5e69f27a871a2069dcb5aecac02f40,Offscreen: Use JS stack to track hidden/unhidden subtree state (#21192),Brian Vaughn,2021-04-07T21:45:19Z
ad6e6ec7bbf7c37c668db57570b296b2eff69d0a,"[Fizz] Prepare Recursive Loop for More Types (#21186)

* Split out into helper functions

This is similar to the structure of beginWork in Fiber.

* Split the rendering of a node from recursively rendering a node

This lets us reuse render node at the root which doesn't spawn new work.",Sebastian Markbåge,2021-04-07T18:29:06Z
172e89b4bf0ec5ee5738af0156d90b0deef4d494,"Reland Remove redundant initial of isArray (#21188)

* Remove redundant initial of isArray (#21163)

* Reapply prettier

* Type the isArray function with refinement support

This ensures that an argument gets refined just like it does if isArray is
used directly.

I'm not sure how to express with just a direct reference so I added a
function wrapper and confirmed that this does get inlined properly by
closure compiler.

* A few more

* Rename unit test to internal

This is not testing a bundle.

Co-authored-by: Behnam Mohammadi <itten@live.com>",Sebastian Markbåge,2021-04-07T14:57:43Z
ee6a05c2bff30e423a98bc083209a5dca6965ec5,"Bumped DevTools Chrome and Firefox versions in Babel config (#21185)

We have been building DevTools to target Chrome 49 and Firefox 54. These are super old browser versions and they did not have full ES6 support, so the generated build is more bloated than it needs to be.

DevTools uses most modern language features. Off the top of my head, we it uses basically everything but async and generator functions.

Based on CanIUse charts– I believe that in order to avoid unnecessary polyfill/wrapper code being generated, we'd need to target Chrome 60+ (released 2017-07-25) and Firefox 55+ (released 2017-04-18). This seems like a reasonable set of browsers to target.

Note that we can't remove the IE 11 target from the react-devtools-core backend yet due to Hermes (React Native) ES6 support but that should be doable by the end of the year given current engineering targets. But we could update the frontend target, as well as the targets for the extensions and the react-devtools-inline package.

This commit increases the browser targets then for Chrome (from 49 to 60) and Firefox (from 54 to 55)",Brian Vaughn,2021-04-06T15:18:46Z
d778518998b290abfd21647dbd027118a9b5b88e,Update build-for-devtools script to prepare unit tests too (#21182),Brian Vaughn,2021-04-06T13:24:33Z
7c1ba2b57d37df165da0f19c65ccc174866b5af7,"Proposed new Suspense layout effect semantics (#21079)

This commit contains a proposed change to layout effect semantics within Suspense subtrees: If a component mounts within a Suspense boundary and is later hidden (because of something else suspending) React will cleanup that component’s layout effects (including React-managed refs).

This change will hopefully fix existing bugs that occur because of things like reading layout in a hidden tree and will also enable a point at which to e.g. pause videos and hide user-managed portals. After the suspended boundary resolves, React will setup the component’s layout effects again (including React-managed refs).

The scenario described above is not common. The useTransition API should ensure that Suspense does not revert to its fallback state after being mounted.

Note that these changes are primarily written in terms of the (as of yet internal) Offscreen API as we intend to provide similar effects semantics within recently shown/hidden Offscreen trees in the future. (More to follow.)

(Note that all changes in this PR are behind a new feature flag, enableSuspenseLayoutEffectSemantics, which is disabled for now.)",Brian Vaughn,2021-04-06T13:21:02Z
316aa368654427270a53543cd3f4952746374596,"[Scheduler] Fix de-opt caused by out-of-bounds access (#21147)

Scheduler's heap implementation sometimes accesses indices that are out
of bounds (larger than the size of the array). This causes a VM de-opt.

This change fixes the de-opt by always checking the index before
accessing the array. In exchange, we can remove the typecheck on the
returned element.

Background: https://v8.dev/blog/elements-kinds#avoid-reading-beyond-the-length-of-the-array

Co-authored-by: Andrew Clark <git@andrewclark.io>",Andrey Marchenko,2021-04-06T04:05:02Z
a817840ea7d3818c0590cccb9159b13220f4fdb4,"DevTools: useModalDismissSignal bugfix (#21173)

* DevTools: useModalDismissSignal bugfix

Make useModalDismissSignal's manually added click/keyboard events more robust to sync flushed passive effects. (Don't let the same click event that shows a modal dialog also dismiss it.)

* Replaced event.timeStamp check with setTimeout",Brian Vaughn,2021-04-05T15:09:43Z
b4f119cdf1defe2437e00022f670c6ef818cd43f,"Revert ""Remove redundant initial of isArray (#21163)""

This reverts commit b130a0f5cd4f29a1c3147f66e10914c42847678a.",Sebastian Markbage,2021-04-01T19:19:00Z
c03197063d57c6b61d83d7fe9202f07f5c766fbd,"Revert ""apply prettier (#21165)""

This reverts commit 94fd1214d2054799485cdcca87a37d956a4240eb.",Sebastian Markbage,2021-04-01T19:18:56Z
94fd1214d2054799485cdcca87a37d956a4240eb,apply prettier (#21165),Behnam Mohammadi,2021-04-01T19:09:16Z
b130a0f5cd4f29a1c3147f66e10914c42847678a,Remove redundant initial of isArray (#21163),Behnam Mohammadi,2021-04-01T17:50:48Z
2c9fef32db5c9a342a1a60c34217ffc9ae087fbb,"Remove redundant initial of hasOwnProperty (#21134)

* remove redundant initial of hasOwnProperty

* remove redundant initial of hasOwnProperty part 2

* remove redundant initial of hasOwnProperty part 3",Behnam Mohammadi,2021-04-01T16:05:10Z
1cf9978d897334d09edac0782ebfb4eca4f3f406,"Don't pass internals to callbacks (#21161)

I noticed that I accidentally pass the request object to public API callbacks
as ""this"".",Sebastian Markbåge,2021-04-01T15:43:12Z
a423a01223785a8bc4dcd55f2a0288200b033eee,Ignore function and symbol values on custom-elements on the server (#21157),Sebastian Markbåge,2021-04-01T01:17:42Z
588db2e1fc1355cbd0c587a5c4ada331486fcd7a,"Don't warn for casing if it's a custom element (#21156)

This replicates what we do on the client.",Sebastian Markbåge,2021-04-01T01:10:27Z
9ed01679453c7cb3c65e57f78d32c63e30a984f7,Don't lower case HTML tags in comparison for built-ins (#21155),Sebastian Markbåge,2021-04-01T01:00:22Z
b9e4c10e99940ceaff77e1f6f4cb0c747e91acff,"[Fizz] Implement all the DOM attributes and special cases (#21153)

* Implement DOM format config structure

* Styles

* Input warnings

* Textarea special cases

* Select special cases

* Option special cases

We read the currently selected value from the FormatContext.

* Warning for non-lower case HTML

We don't change to lower case at runtime anymore but keep the warning.

* Pre tags innerHTML needs to be prefixed

This is because if you do the equivalent on the client using innerHTML,
this is the effect you'd get.

* Extract errors",Sebastian Markbåge,2021-04-01T00:39:38Z
0e96bdd4eefa0771fe1e7747bb79fd3c0e612b9c,Remove my deadname from AUTHORS (#21152),Lea Rosema,2021-03-31T22:13:13Z
f8ef4ff571db3de73b0bfab566c1ce9d69c6582f,"Flush discrete passive effects before paint (#21150)

If a discrete render results in passive effects, we should flush them
synchronously at the end of the current task so that the result is
immediately observable. For example, if a passive effect adds an event
listener, the listener will be added before the next input.

We don't need to do this for effects that don't have discrete/sync
priority, because we assume they are not order-dependent and do not
need to be observed by external systems.

For legacy mode, we will maintain the existing behavior, since it hasn't
been reported as an issue, and we'd have to do additional work to
distinguish ""legacy default sync"" from ""discrete sync"" to prevent all
passive effects from being treated this way.",Andrew Clark,2021-03-31T17:39:19Z
b48b38af68c27fd401fe4b923a8fa0b229693cd4,"Support nesting of startTransition and flushSync (alt) (#21149)

* Support nesting of startTransition and flushSync

* Unset transition before entering any special execution contexts

Co-authored-by: Andrew Clark <git@andrewclark.io>",Sebastian Markbåge,2021-03-31T15:22:49Z
c9aab1c9d00ce407b1c61c385b356d49cd147f60,react-refresh@0.10.0,Dan Abramov,2021-03-30T15:19:57Z
516b76b9ae177ecc38cc64ba33ddfc7cfe5f5a99,"[Fast Refresh] Support callthrough HOCs (#21104)

* [Fast Refresh] Support callthrough HOCs

* Add a newly failing testing to demonstrate the flaw

This shows why my initial approach doesn't make sense.

* Attach signatures at every nesting level

* Sign nested memo/forwardRef too

* Add an IIFE test

This is not a case that is important for Fast Refresh, but we shouldn't change the code semantics. This case shows the transform isn't quite correct. It's wrapping the call at the wrong place.

* Find HOCs above more precisely

This fixes a false positive that was causing an IIFE to be wrapped in the wrong place, which made the wrapping unsafe.

* Be defensive against non-components being passed to setSignature

* Fix lint",Dan Abramov,2021-03-30T15:08:50Z
0853aab74dc8285401e62d1e490551ba3c96fd64,Log all errors to console.error by default (#21130),Sebastian Markbåge,2021-03-30T02:39:55Z
d1294c9d404de748b49dd6543144367f90a5e6b0,"[Flight] Add global onError handler (#21129)

* Add onError option to Flight Server

The callback is called any time an error is generated in a server component.

This allows it to be logged on a server if needed. It'll still be rethrown
on the client so it can be logged there too but in case it never reaches
the client, here's a way to make sure it doesn't get lost.

* Add fatal error handling",Sebastian Markbåge,2021-03-30T02:36:16Z
e40f0b260303441710d762a83afc8c41aefe1daa,"Remove checkReact (#21132)

I don't know what this is useful for but I suspect it was only useful at
FB and is not applicable to ES modules at FB nor elsewhere.",Sebastian Markbåge,2021-03-30T02:35:58Z
cecfde51b63ff33afde0d63ed32de53782c6e14c,Don't import star from ReactDOM (#21133),Sebastian Markbåge,2021-03-30T02:35:47Z
8e76371241646038a4c98426d8da59fe263538d6,Move not shared to client (#21135),Sebastian Markbåge,2021-03-30T02:35:34Z
64983aab5d4dbd99ca06bb85e69bb193928ea0c7,"Remove redundant setUpdatePriority call (#21127)

See removed TODO comment. This call is no longer necessary because we
use the dispatcher to track whether we're inside a transition, not the
event priority.",Andrew Clark,2021-03-29T18:20:40Z
634cc52e6174b506dee79d908f50ce1ee19f4fbf,"Delete dead variable: currentEventWipLanes (#21123)

No longer used anywhere.",Andrew Clark,2021-03-28T23:51:11Z
1102224bbbfd587ec6088620c66f048d10856c59,"Fix: flushSync changes priority inside effect (#21122)

When called from inside an effect, flushSync cannot synchronously flush
its updates because React is already working. So we fire a warning.

However, we should still change the priority of the updates to sync so
that they flush at the end of the current task.

This only affects useEffect because updates inside useLayoutEffect (and
the rest of the commit phase, like ref callbacks) are already sync.",Andrew Clark,2021-03-28T23:50:30Z
dbe98a5aae79efce4de3eea95171d1ef70537fdb,"Move sync task queue to its own module (#21109)

The sync task queue is React-specific and doesn't really have anything
to do with Scheduler. We'd keep using it even once `postTask` exists.

By separating that part out, `SchedulerWithReactIntegration` is now
just a module that re-exports the Scheduler API. So I unforked it.
When we switch to ES Modules, we can remove this re-exporting module.",Andrew Clark,2021-03-28T21:15:53Z
3ba5c87377710e154351aebc818df3d33ee6a718,"Remove Scheduler indirection (#21107)

* Bump version number

* Remove Scheduler indirection

I originally kept the React PriorityLevel and Scheduler PriorityLevel
types separate in case there was a versioning mismatch between the two
modules. However, it looks like we're going to keep the Scheduler module
private in the short to medium term, and longer term the public
interface will match postTask. So, I've removed the extra indirection
(the switch statements that convert between the two types).",Andrew Clark,2021-03-28T21:13:38Z
46b68eaf626f924093952125bd75ba16df0fe204,"Delete LanePriority type (#21090)

No longer using LanePriority anywhere, so this deletes the
remaining references.",Andrew Clark,2021-03-28T21:07:32Z
dcd13045ef5d4e42bbda6ec2a493ac2ea507c018,"Use Lane to track root callback priority (#21089)

Instead of LanePriority.

I'm removing all uses of LanePriority so I can delete it.",Andrew Clark,2021-03-28T20:58:46Z
5f21a9fca455069bc1e986e1528963a5055a8f21,"Clean up host pointers in level 2 of clean-up flag (#21112)

The host tree is a cyclical structure. Leaking a single DOM node can
retain a large amount of memory. React-managed DOM nodes also point
back to a fiber tree.

Perf testing suggests that disconnecting these fields has a big memory
impact. That suggests leaks in non-React code but since it's hard to
completely eliminate those, it may still be worth the extra work to
clear these fields.

I'm moving this to level 2 to confirm whether this alone is responsible
for the memory savings, or if there are other fields that are retaining
large amounts of memory.

In our plan for removing the alternate model, DOM nodes would not be
connected to fibers, except at the root of the whole tree, which is
easy to disconnect on deletion. So in that world, we likely won't have
to do any additional work.",Andrew Clark,2021-03-27T20:26:17Z
32d6f39eddd6d6b32b6c68068e96c66109ae8425,"[Fizz] Support special HTML/SVG/MathML tags to suspend (#21113)

* Encode tables as a special insertion mode

The table modes are special in that its children can't be created outside
a table context so we need the segment container to be wrapped in a table.

* Move formatContext from Task to Segment

It works the same otherwise. It's just that this context needs to outlive
the task so that I can use it when writing the segment.

* Use template tag for placeholders and inserted dummy nodes with IDs

These can be used in any parent. At least outside IE11. Not sure yet what
happens in IE11 to these.

Not sure if these are bad for perf since they're special nodes.

* Add special wrappers around inserted segments depending on their insertion mode

* Allow the root namespace to be configured

This allows us to insert the correct wrappers when streaming into an
existing non-HTML tree.

* Add comment",Sebastian Markbåge,2021-03-27T17:50:38Z
a5aa9d525345ca3281e027a6f62f212f5feee0cd,Remove redundant if statement (#21101),Erik,2021-03-26T17:50:58Z
a77dd13ede337175e94a7a1d4198ff440a5cd87b,"Delete enableDiscreteEventFlushingChange (#21110)

This flag was meant to avoid flushing discrete updates unnecessarily,
if multiple discrete events were dispatched in response to the same
platform event.

But since we now flush all discrete events at the end of the task, in
a microtask, it no longer has any effect.",Andrew Clark,2021-03-26T05:05:59Z
048ee4c0cd3ee766d041c86029ca7cf2b874bfe0,"Use `act` in fuzz tester to flush expired work (#21108)

* Add failing hard-coded fuzz test

Caught in CI by the fuzz tester.

Related to expired updates.

* Use `act` in fuzz tester to flush expired work

Expired work gets scheduled in a microtask now, so we need to use `act`
to flush it.",Andrew Clark,2021-03-26T03:08:53Z
556644e2372bf275a498006fc17dff14d324d6be,Fix plurals (#21106),Sebastian Markbåge,2021-03-26T02:21:41Z
8b741437b12a3faad1b742274af8fcc456e71958,Rename SuspendedWork to Task (#21105),Sebastian Markbåge,2021-03-26T01:39:59Z
38a1aedb4987142ff2cfca57593b91571a39d394,"[Fizz] Add FormatContext and Refactor Work (#21103)

* Add format context

* Let the Work node hold all working state for the recursive loop

Stacks are nice and all but there's a cost to maintaining each frame
both in terms of stack size usage and writing to it.

* Move current format context into work

* Synchronously render children of a Suspense boundary

We don't have to spawn work and snapshot the context. Instead we can try
to render the boundary immediately in case it works.

* Lazily create the fallback work

Instead of eagerly create the fallback work and then immediately abort it.
We can just avoid creating it if we finish synchronously.",Sebastian Markbåge,2021-03-26T01:38:43Z
1b7e471b9131dc810f434a5e7201189d936da4fe,"React Fabric: Support passing nativeViewTag to getInspectorDataForViewAtPoint callback, for React DevTools compat (#21080)

React Fabric: Support passing nativeViewTag to getInspectorDataForViewAtPoint callback, for React DevTools compat",Joshua Gross,2021-03-25T23:23:39Z
a7c57268fb71163e4abb5e386c0d0e63290baaae,Add aspectRatio to the unitless list (#21100),Dan Abramov,2021-03-25T17:01:36Z
4a99c5c3a780d8178d9278c29d0b7f44be6a0dce,"Use highest priority lane to detect interruptions (#21088)

Instead of LanePriority.

I'm removing all uses of LanePriority so I can delete it.",Andrew Clark,2021-03-25T16:36:17Z
77be527297402a11523cb6321bcb2a0ae2b4be6c,"Remove LanePriority from computeExpirationTime (#21087)

I'm removing all uses of LanePriority so I can delete it.",Andrew Clark,2021-03-25T16:32:14Z
3221e8fba4cc96cf6c7723bab9485223a266d796,"Remove LanePriority from getBumpedLaneForHydration (#21086)

I'm removing all uses of LanePriority so I can delete it.",Andrew Clark,2021-03-25T16:27:36Z
05ec0d7646b463dcbd64f3a2575f4bb992f7e423,"Entangled expired lanes with SyncLane (#21083)

Makes the implementation simpler. Expiration is now a special case of
entanglement.

Also fixes an issue where expired lanes weren't batched with normal
sync updates. (See deleted TODO comment in test.)",Andrew Clark,2021-03-25T16:24:49Z
03ede83d2ea1878e5cb82c3c17844621989caf66,"Use EventPriority to track update priority (#21082)

Instead of LanePriority. Internally, EventPriority is just a lane, so
this skips an extra conversion. Since EventPriority is a ""public"" (to
the host config) type, I was also able to remove some deep imports
of the Lane module.

This gets us most of the way to deleting the LanePriority entirely.",Andrew Clark,2021-03-25T16:21:41Z
6a589ad711db330c68a371321450ee2f0087e22f,"Add separator comment between text nodes (#21099)

This is needed to avoid mutating the DOM during hydration. This *always*
adds it even when it's just text children.

We need to avoid this overhead but it's a somewhat tricky problem to solve
so we defer the optimization to later.",Sebastian Markbåge,2021-03-25T15:48:39Z
148f8e497c7d37a3c7ab99f01dec2692427272b1,Add pointerenter/leave priorities (#21077),Dan Abramov,2021-03-24T19:57:17Z
a63f0953be9550ab18bcd48725f77a073549ec69,"Delete SyncBatchedLane (#21061)

* Delete SyncBatchedLane

* Go back to 31 lanes",Ricky,2021-03-24T19:04:19Z
fb8c1917e9985f83032f642e5db8b9abf089653e,"Don't use nested objects to ""namespace"" namespace constants (#21073)",Sebastian Markbåge,2021-03-24T16:58:23Z
fa868d6be7d7c387887cb4f7c391fbe2d4f987ea,"Make opaque EventPriority type a Lane internally (#21065)

Instead of LanePriority, we can use a Lane and skip the extra
conversion. Eventually I want to get rid of LanePriority completely.",Andrew Clark,2021-03-24T16:55:24Z
eb58c3909aa19fb6ffbed27b9c9dba4aada3cb8e,react-hooks/exhaustive-deps: Handle optional chained methods as dependency (#20204) (#20247),Ari Perkkiö,2021-03-24T16:45:27Z
7b84dbd1697609d4df5931422c9591fe62022cb9,Fail build on deep requires in npm packages (#21063),Dan Abramov,2021-03-24T02:43:55Z
2c9d8efc8e8202929d3c737459050205f2848d79,"Add react-reconciler/constants entry point (#21062)

* Add react-reconciler/constants entry point

* Move root tags to /constants",Dan Abramov,2021-03-24T02:13:43Z
d0eaf782930b6e6c575f50bf688e667b9f6795b7,"Move priorities to separate import to break cycle (#21060)

The event priority constants exports by the reconciler package are
meant to be used by the reconciler (host config) itself. So it doesn't
make sense to export them from a module that requires them.

To break the cycle, we can move them to a separate module and import
that. This looks like a ""deep import"" of an internal module, which we
try to avoid, but conceptually these are part of the public interface
of the reconciler module. So, no different than importing from the main
`react-reconciler`.

We do need to be careful about not mixing these types of imports with
implementation details. Those are the ones to really avoid.

An unintended benefit of the reconciler fork infra is that it makes
deep imports harder. Any module that we treat as ""public"", like this
one, needs to account for the `enableNewReconciler` flag and forward
to the correct implementation.",Andrew Clark,2021-03-23T20:57:28Z
435cff9866d38d137aafe6396c776437710a8481,"[Fizz] Expose callbacks in options for when various stages of the content is done (#21056)

* Report errors to a global handler

This allows you to log errors or set things like status codes.

* Add complete callback

* onReadyToStream callback

This is typically not needed because if you want to stream when the
root is ready you can just start writing immediately.

* Rename onComplete -> onCompleteAll",Sebastian Markbåge,2021-03-23T18:39:38Z
25bfa287f6c49950d8ea16f542716835683442d6,"[Experiment] Add feature flag for more aggressive memory clean-up of deleted fiber trees (#21039)

* Add feature flag: enableStrongMemoryCleanup

Add a feature flag that will test doing a recursive clean of an unmount
node. This will disconnect the fiber graph making leaks less severe.

* Detach sibling pointers in old child list

When a fiber is deleted, it's still part of the previous (alternate)
parent fiber's list of children. Because children are a linked list, an
earlier sibling that's still alive will be connected to the deleted
fiber via its alternate:


  live fiber
  --alternate--> previous live fiber
  --sibling--> deleted fiber

We can't disconnect `alternate` on nodes that haven't been deleted
yet, but we can disconnect the `sibling` and `child` pointers.

Will use this feature flag to test the memory impact.

* Combine into single enum flag

I combined `enableStrongMemoryCleanup` and `enableDetachOldChildList`
into a single enum flag. The flag has three possible values. Each level
is a superset of the previous one and performs more aggressive clean up.

We will use this to compare the memory impact of each level.

* Add Flow type to new host config method

* Re-use existing recursive clean up path

We already have a recursive loop that visits every deleted fiber. We
can re-use that one for clean up instead of adding another one.

Co-authored-by: Andrew Clark <git@andrewclark.io>",Benoit Girard,2021-03-23T04:54:53Z
7c4e6aae3ef4e77596125f30b801c84800e949a9,"Oops, it's 2021 already",Dan Abramov,2021-03-22T22:50:37Z
8fe7810e70b00d6616c345954740045e4ad17cdd,Remove already completed comment (#21054),Sebastian Markbåge,2021-03-22T22:41:22Z
cc1a46dfd220edf2e5f001cbd5ba5fa049dc09b2,"React 17.0.2 Changelog (#21052)

## 17.0.2 (March 22, 2020)

### React DOM

* Remove an unused dependency to address the [`SharedArrayBuffer` cross-origin isolation warning](https://developer.chrome.com/blog/enabling-shared-array-buffer/). ([@koba04](https://github.com/koba04) and [@bvaughn](https://github.com/bvaughn) in [#20831](https://github.com/facebook/react/pull/20831), [#20832](https://github.com/facebook/react/pull/20832), and [#20840](https://github.com/facebook/react/pull/20840))",Dan Abramov,2021-03-22T21:57:59Z
a5c3baeecda9468ae7b6d4d32a541026c15bc6de,Fix a broken link,Dan Abramov,2021-03-22T21:04:13Z
6c3202b1e1a4382b91de4fdc3b9bc9ed7a77619b,"[Fizz] Use identifierPrefix to avoid conflicts within the same response (#21037)

* Use identifierPrefix to avoid conflicts within the same response

identifierPrefix as an option exists to avoid useOpaqueIdentifier conflicting
when different renders are used within one HTML response.

This lets this be configured for the DOM renderer specifically since it's DOM
specific whether they will conflict across trees or not.

* Add test for using multiple containers in one HTML document",Sebastian Markbåge,2021-03-22T20:10:57Z
dcdf8de7e1489fda5cee70acbd1310ee1bb0d312,"Remove discrete lanes and priorities (#21040)

We use SyncLane everywhere we used to use InputDiscreteLane or
InputDiscreteHydrationLane. So we can delete them now, along with their
associated lane priority levels.",Andrew Clark,2021-03-22T16:51:40Z
ca99ae97b485963249c81a933c08cb092d6ca14b,Replace some flushExpired callsites (#20975),Ricky,2021-03-22T16:44:19Z
1fafac002838ad2d75ee9eca527c356b040285ff,"Use SyncLane for discrete event hydration (#21038)

Discrete event hydration doesn't need to be interruptible, since
there's nothing higher priority than discrete events. So we can use
SyncLane instead of a special hydration lane.",Andrew Clark,2021-03-22T16:05:43Z
6d3ecb70dceb225af0cd990b46d6c44b852c1d82,"Remove unstable_changedBits (#20953)

We added this unstable feature a few years ago, as a way to opt out of
context updates, but it didn't prove useful in practice.

We have other proposals for how to address the same problem, like
context selectors.

Since it was prefixed with `unstable_`, we should be able to remove it
without consequence. The hook API already warned if you used it.

Even if someone is using it somewhere, it's meant to be an optimization
only, so if they are using the API properly, it should not have any
semantic impact.",Andrew Clark,2021-03-19T22:36:51Z
754e307284d5b4de32da1bd64c179885f6d9f253,"Delete immediateQueueCallbackNode (#20980)

We don't need this anymore. It only existed so we could cancel the
callback later. But canceling isn't necessary, was only an
""optimization"" for something that almost never happens in practice.",Andrew Clark,2021-03-19T22:36:23Z
be5a2e231ae27b2c64806c026a5b9921be5e7560,Land enableSyncMicrotasks (#20979),Andrew Clark,2021-03-19T22:28:41Z
f6bc9c8243a02fc7a3a399845dabac3dc15dd7e7,"[Fizz] Expose maxBoundarySize as an option (#21029)

* Expose maxBoundarySize as an option

* Adjust the heuristic

* Rename to progressiveChunkSize",Sebastian Markbåge,2021-03-19T16:41:25Z
7d06b80af64d0121d373d8c6e8750a952c3897be,Fixed primitive hook badge colors for light theme (#21034),Brian Vaughn,2021-03-19T13:52:59Z
154b85213a65377a67ac4f7a4a39116024bc3028,"[Fizz] Expose a method to explicitly start writing to a Node stream (#21028)

* Expose an explicit point when to start writing in the Node API

* Add a previously failing test",Sebastian Markbåge,2021-03-18T19:43:40Z
cf485e6f6b4d6a6e2ccfe7a12537941925316e86,"[Fizz] Expose a method to abort a pending request (#21027)

* Track all suspended work while it's still pending

This allows us to abort work and put everything into client rendered mode
if we don't want to wait for further I/O.

It also allows us to cancel fallbacks if we complete the main content
before the fallback.

* Expose abort API to the browser streams

Since this API already returns a value, we need to use destructuring to
expose more options.

* Add a test including the client actually client rendering it

* Use AbortSignal option for W3C streams instead of external control

* Clean up listener after it's used once",Sebastian Markbåge,2021-03-18T16:46:15Z
3fb11eed9a166ebab23b778662f54c449fcffad0,React Native: Touch Instrumentation Interface (#21024),Timothy Yung,2021-03-17T20:46:43Z
119736b1c2ea0d404ad466e39138462453392008,[FB-only] Show which hooks (indices) changed when profiling (#20998),Brian Vaughn,2021-03-17T16:28:21Z
bf11788bf0c2e861dc6378ac9ab59d37e7c3e812,DevTools Profiler: Add commit and post-commit durations to UI (#20984),Brian Vaughn,2021-03-17T16:27:37Z
825c3021f0477bf8bd4b57693f3303078e7c77db,"Don't delete trailing mismatches during hydration at the root (#21021)

* Don't delete any trailing nodes in the container during hydration error

* Warn when an error during hydration causes us to clear the container

* Encode unfortunate case in test

* Wrap the root for tests that are applicable to nested cases

* Now we can pipe Fizz into a container

* Grammatical fix",Sebastian Markbåge,2021-03-17T15:18:42Z
1d1e49cfa453b58769e87c3c8d321024d58c948f,"[Fizz] Assign an ID to the first DOM element in a fallback or insert a dummy (and testing infra) (#21020)

* Patches

* Add Fizz testing infra structure

* Assign an ID to the first DOM node in a fallback or insert a dummy

* unstable_createRoot",Sebastian Markbåge,2021-03-16T21:05:52Z
533aed8de6e6cac1fcadda15222cdcb195e9cc66,Speed up DevTools local build script (#21018),Brian Vaughn,2021-03-16T18:02:24Z
466b26c926a2de92231f7cc2e75745563a91003d,"Store commit durations on HostRoot for DevTools access (#20983)

Also add missing feature flag wrappers around effect duration attributes.",Brian Vaughn,2021-03-16T17:53:15Z
89acfa639bcecebdb18276ba2c0f4d5beee2de19,"Fix native event batching in concurrent mode (#21010)

* Fix native event batching in concurrent mode

* Wrap DevTools test updates with act

These tests expect the `scheduleUpdate` DevTools hook to trigger a
synchronous re-render with legacy semantics, but flushing in a microtask
is fine. Wrapping the updates with `act` fixes it.

* Testing nits

* Nit: Check executionContext === NoContext first

In the common case it will be false and the binary expression will
short circuit.

Co-authored-by: Andrew Clark <git@andrewclark.io>",Ricky,2021-03-16T17:15:00Z
0203b6567c6fd6274866c853ef938241d24551ec,chore: update react-reconciler README (#21016),susiwen8,2021-03-16T11:37:34Z
c9f6d0a3a8ef267fa3499782028fb1c74fae94e9,Sync `ReactNativeTypes` from React Native (#21015),Timothy Yung,2021-03-16T06:48:59Z
f8979e0e28398d98dab921f17d14a5a9b5fb1b71,Revert 'Fabric-compatible implementation of  feature' and have Fabric noop when setJSResponder is called for now (#21009),Joshua Gross,2021-03-15T19:22:26Z
b9c4a01f71f59dc1ddf5944b0b11ec86b8218c73,"Allow the streaming config to decide how to precompute or compute chunks (#21008)

Some legacy environments can not encode non-strings. Those would specify
both as strings. They'll throw for binary data.

Some environments have to encode strings (like web streams). Those would
encode both as uint8array.

Some environments (like Node) can do either. It can be beneficial to leave
things as strings in case the native stream can do something smart with it.",Sebastian Markbåge,2021-03-15T17:36:23Z
00d4f95c2ad000f40ea0c774cc1ced3a0ceb6f23,Document prerequisites for download-experimental-build (#21005),Sebastian Silbermann,2021-03-15T13:48:44Z
c06d245fc7325612347ed19232d92385cae2e0a7,"Update devtools-extensions build script to reflect changes in local b… (#21004)

Co-authored-by: Brian Vaughn <bvaughn@fb.com>",Hector Rincon,2021-03-15T13:46:46Z
f227e7f26b81cb1eba0c837ab2acd7fa7f91404f,Clean up unused functions from SSR (#20995),Sebastian Markbåge,2021-03-13T15:23:06Z
14e4fd1ff2462e8989cb64418be742d7dcfe1549,"[Fizz] Move DOM/Native format configs to their respective packages (#20994)

* Move DOM/Native format configs to their respective packages

The streaming configs (Node/Browser) are different because they operate at
another dimension that exists in each package.

* Use escapeTextForBrowser to encode dynamic strings

We can now use local dependencies",Sebastian Markbåge,2021-03-13T14:54:59Z
f2b6bf7c86f01ca194914e0e4305d8f430024a8c,"[Fizz] Destroy the stream with an error if the root throws (#20992)

* Destroy the stream with an error if the root throws

But not if the error happens inside a suspense boundary.

* Try rewriting the test to see if it works in other Node envs",Sebastian Markbåge,2021-03-12T23:21:02Z
10cc400184dfa3d5d3eb8b2e10903b87b9489cb8,"Basic Fizz Architecture (#20970)

* Copy some infra structure patterns from Flight

* Basic data structures

* Move structural nodes and instruction commands to host config

* Move instruction command to host config

In the DOM this is implemented as script tags. The first time it's emitted
it includes the function. Future calls invoke the same function.

The side of the complete boundary function in particular is unfortunately
large.

* Implement Fizz Noop host configs

This is implemented not as a serialized protocol but by-passing the
serialization when possible and instead it's like a live tree being
built.

* Implement React Native host config

This is not wired up. I just need something for the flow types since
Flight and Fizz are both handled by the isServerSupported flag.

Might as well add something though.

The principle of this format is the same structure as for HTML but a
simpler binary format.

Each entry is a tag followed by some data and terminated by null.

* Check in error codes

* Comment",Sebastian Markbåge,2021-03-11T20:01:41Z
bd245c1bab1a1f965cb51f5d01406a2770244930,"Ensure sync-xhr is allowed before reload and profile (#20879)

Co-authored-by: Brian Vaughn <brian.david.vaughn@gmail.com>",Chris Dobson,2021-03-11T15:31:57Z
b7e6310669ed7948d3d8729cc6c0d7904945f05b,"Stop tracking roots with pending discrete updates (#20978)

Now that discrete updates are flushed synchronously in a microtask,
there's no need to track them in their on queue. They're already in
the queue we use for all sync work. So we can call that directly.",Andrew Clark,2021-03-11T07:29:29Z
860f673a7a6bf826010d41de2f66de62171ab676,"Remove Blocking Mode (again) (#20974)

* Remove Blocking Mode (again)

* Rename batchingmode file and comment",Ricky,2021-03-10T23:34:35Z
acde654698659326af0ac4eded4a3ae7cb780a55,"Unify InputDiscreteLane with SyncLane (#20968)

* Unify sync priority and input discrete

* Fix lint

* Use update lane instead

* Update sync lane labels",Ricky,2021-03-10T22:36:13Z
6556e2a8748d87c210c4840c3abc7c2e50917514,Cleaned up unused PassiveUnmountPendingDev DEV flag (#20973),Brian Vaughn,2021-03-10T22:09:24Z
60182d64ca030ef28782c7e67be373eac81ae4c2,"Cleanup tests using runWithPriority. (#20958)

* Remove Scheduler.runWithPriority from some tests

* Mark experimental test experimental",Ricky,2021-03-10T17:44:25Z
ec372faefedd1932f45b2135122ad4bb306f2c7c,Remove DevTools dependency on Scheduler runWithPriority (#20967),Brian Vaughn,2021-03-10T13:52:19Z
e4d4b7074d89a9a94f352ef9336ba0fdc620d8b4,"Land enableNativeEventPriorityInference (#20955)

* Land enableNativeEventPriorityInference

* Move schedulerPriorityToLanePriority

* Remove obsolete comment",Ricky,2021-03-10T04:59:02Z
5d1d1679bf435bf222500f17f5c409daa3f3214a,Remove scheduler priority from hydration (#20957),Ricky,2021-03-09T22:25:23Z
73e900b0e78c752d1e045a42ddea8175679ea8f7,Land enableDiscreteEventMicroTasks (#20954),Ricky,2021-03-08T21:43:44Z
a3f30fed298b9ce1964c551dde9b1bcbd6fda08f,Trigger Build,Rick Hanlon,2021-03-08T21:28:58Z
41e62e77191e112a7be38448e53470a6b8220611,Remove runWithPriority internally,Rick Hanlon,2021-03-08T18:05:12Z
431e76e2db39e74e25965027d67d69debdb7384a,Switch callsites over to update lane priority,Rick Hanlon,2021-03-08T17:46:45Z
e89d74ee679bafe09213ef66394dd530d2168787,Remove decoupleUpdatePriorityFromScheduler,Rick Hanlon,2021-03-08T16:16:30Z
5fe091c778f61fd81d226e65c0bc094c6380c88a,Swap log with cbrt for commit bar height (#20952),Brian Vaughn,2021-03-08T19:02:09Z
ca15606d81374d85424e7dd4a48a8372d6c46701,"chore(build):  Ensure experimental builds exists on windows (#20933)

* chore(build): Throw if `rsync` fails

* did not get cwrsync to work",Sebastian Silbermann,2021-03-08T17:35:27Z
e7d2a558ad8e664df36a70b0a86a85f925d1418f,"DevTools flushes updated passive warning/error info after delay (#20931)

* DevTools flushes updated passive warning/error info after delay
Previously this information was not flushed until the next commit, but this provides a worse user experience if the next commit is really delayed. Instead, the backend now flushes only the warning/error counts after a delay. As a safety, if there are already any pending operations in the queue, we bail.

Co-authored-by: eps1lon <silbermann.sebastian@gmail.com>",Brian Vaughn,2021-03-08T16:33:14Z
cb8857222789136f99b56c8109863fdee7cab691,"Improve DevTools Profiler commit-selector UX (#20943)

* Improve DevTools Profiler commit-selector UX

1. Use natural log of durations (rather than linear) when calculating bar height. This reduces the impact of one (or few) outlier times on more common smaller durations. (Continue to use linear for bar color though.)
2. Decrease the minimum bar height to make the differences in height more noticeable.
3. Add a background hover highlight to increase contrast.
4. Add hover tooltip with commit duration and timestamp.",Brian Vaughn,2021-03-08T16:09:55Z
d74559746c03d9f620e4fd338c70ce319070e0be,Use update lane priority to set pending updates on roots (#20918),Ricky,2021-03-07T23:43:29Z
f04bcb8139cfa341640ea875c2eae15523ae9cd9,"[Bugfix] Reset `subtreeFlags` in `resetWorkInProgress` (#20948)

* Add failing regression test

Based on #20932

Co-Authored-By: Dan Abramov <dan.abramov@gmail.com>

* Reset `subtreeFlags` in `resetWorkInProgress`

Alternate fix to #20942

There was already a TODO to make this change, but at the time I left it,
I couldn't think of a way that it would actually cause a bug, and I was
hesistant to change something without fully understanding the
ramifications. This was during a time when we were hunting down a
different bug, so we were especially risk averse.

What I should have done in retrospect is put the change behind a flag
and tried rolling it out once the other bug had been flushed out.

OTOH, now we have a regression test, which wouldn't have otherwise, and
the bug it caused rarely fired in production.

Co-authored-by: Dan Abramov <dan.abramov@gmail.com>",Andrew Clark,2021-03-07T17:20:01Z
c7b4497988e81606f1c7686434f55a49342c9efc,"[Experiment] Lazily propagate context changes (#20890)

* Move context comparison to consumer

In the lazy context implementation, not all context changes are
propagated from the provider, so we can't rely on the propagation alone
to mark the consumer as dirty. The consumer needs to compare to the
previous value, like we do for state and context.

I added a `memoizedValue` field to the context dependency type. Then in
the consumer, we iterate over the current dependencies to see if
something changed. We only do this iteration after props and state has
already bailed out, so it's a relatively uncommon path, except at the
root of a changed subtree. Alternatively, we could move these
comparisons into `readContext`, but that's a much hotter path, so I
think this is an appropriate trade off.

* [Experiment] Lazily propagate context changes

When a context provider changes, we scan the tree for matching consumers
and mark them as dirty so that we know they have pending work. This
prevents us from bailing out if, say, an intermediate wrapper is
memoized.

Currently, we propagate these changes eagerly, at the provider.

However, in many cases, we would have ended up visiting the consumer
nodes anyway, as part of the normal render traversal, because there's no
memoized node in between that bails out.

We can save CPU cycles by propagating changes only when we hit a
memoized component — so, instead of propagating eagerly at the provider,
we propagate lazily if or when something bails out.

Most of our bailout logic is centralized in
`bailoutOnAlreadyFinishedWork`, so this ended up being not that
difficult to implement correctly.

There are some exceptions: Suspense and Offscreen. Those are special
because they sometimes defer the rendering of their children to a
completely separate render cycle. In those cases, we must take extra
care to propagate *all* the context changes, not just the first one.

I'm pleasantly surprised at how little I needed to change in this
initial implementation. I was worried I'd have to use the reconciler
fork, but I ended up being able to wrap all my changes in a regular
feature flag. So, we could run an experiment in parallel to our other
ones.

I do consider this a risky rollout overall because of the potential for
subtle semantic deviations. However, the model is simple enough that I
don't expect us to have trouble fixing regressions if or when they arise
during internal dogfooding.

---

This is largely based on [RFC#118](https://github.com/reactjs/rfcs/pull/118),
by @gnoff. I did deviate in some of the implementation details, though.

The main one is how I chose to track context changes. Instead of storing
a dirty flag on the stack, I added a `memoizedValue` field to the
context dependency object. Then, to check if something has changed, the
consumer compares the new context value to the old (memoized) one.

This is necessary because of Suspense and Offscreen — those components
defer work from one render into a later one. When the subtree continues
rendering, the stack from the previous render is no longer available.
But the memoized values on the dependencies list are. This requires a
bit more work when a consumer bails out, but nothing considerable, and
there are ways we could optimize it even further. Conceptually, this
model is really appealing, since it matches how our other features
""reactively"" detect changes — `useMemo`, `useEffect`,
`getDerivedStateFromProps`, the built-in cache, and so on.

I also intentionally dropped support for
`unstable_calculateChangedBits`. We're planning to remove this API
anyway before the next major release, in favor of context selectors.
It's an unstable feature that we never advertised; I don't think it's
seen much adoption.

Co-Authored-By: Josh Story <jcs.gnoff@gmail.com>

* Propagate all contexts in single pass

Instead of propagating the tree once per changed context, we can check
all the contexts in a single propagation. This inverts the two loops so
that the faster loop (O(numberOfContexts)) is inside the more expensive
loop (O(numberOfFibers * avgContextDepsPerFiber)).

This adds a bit of overhead to the case where only a single context
changes because you have to unwrap the context from the array. I'm also
unsure if this will hurt cache locality.

Co-Authored-By: Josh Story <jcs.gnoff@gmail.com>

* Stop propagating at nearest dependency match

Because we now propagate all context providers in a single traversal, we
can defer context propagation to a subtree without losing information
about which context providers we're deferring — it's all of them.

Theoretically, this is a big optimization because it means we'll never
propagate to any tree that has work scheduled on it, nor will we ever
propagate the same tree twice.

There's an awkward case related to bailing out of the siblings of a
context consumer. Because those siblings don't bail out until after
they've already entered the begin phase, we have to do extra work to
make sure they don't unecessarily propagate context again. We could
avoid this by adding an earlier bailout for sibling nodes, something
we've discussed in the past. We should consider this during the next
refactor of the fiber tree structure.

Co-Authored-By: Josh Story <jcs.gnoff@gmail.com>

* Mark trees that need propagation in readContext

Instead of storing matched context consumers in a Set, we can mark
when a consumer receives an update inside `readContext`.

I hesistated to put anything in this function because it's such a hot
path, but so are bail outs. Fortunately, we only need to set this flag
once, the first time a context is read. So I think it's a reasonable
trade off.

In exchange, propagation is faster because we no longer need to
accumulate a Set of matched consumers, and fiber bailouts are faster
because we don't need to consult that Set. And the code is simpler.

Co-authored-by: Josh Story <jcs.gnoff@gmail.com>",Andrew Clark,2021-03-07T06:56:53Z
258b375a419098a5b6c3568e8d35046d142ea912,"Move context comparison to consumer

In the lazy context implementation, not all context changes are
propagated from the provider, so we can't rely on the propagation alone
to mark the consumer as dirty. The consumer needs to compare to the
previous value, like we do for state and context.

I added a `memoizedValue` field to the context dependency type. Then in
the consumer, we iterate over the current dependencies to see if
something changed. We only do this iteration after props and state has
already bailed out, so it's a relatively uncommon path, except at the
root of a changed subtree. Alternatively, we could move these
comparisons into `readContext`, but that's a much hotter path, so I
think this is an appropriate trade off.",Andrew Clark,2021-02-25T22:42:11Z
7df65725ba7826508e0f3c0f1c6f088efdbecfca,"Split getComponentName into getComponentNameFromFiber and getComponentNameFromType (#20940)

Split getComponentName into getComponentNameFromFiber and getComponentNameFromType",Brian Vaughn,2021-03-05T21:02:02Z
ee432635724d5a50301448016caa137ac3c0a7a2,"Revert ""Remove blocking mode and blocking root (#20888)"" (#20916)

This reverts commit 553440bd1578ef71982c4a10e2cc8c462f33d9be.",Andrew Clark,2021-03-02T20:51:18Z
de0ee76dbde0a5ec507cf4a62c9690f67b56d7b6,"Add unstable_strictModeLevel to test renderer (#20914)

Matches what we do for React DOM",Andrew Clark,2021-03-02T18:41:57Z
d857f9e4d057a3e039c0804c6ae087d348f97a06,Land enableSetImmediate feature flag (#20906),Dan Abramov,2021-03-01T18:34:12Z
553440bd1578ef71982c4a10e2cc8c462f33d9be,"Remove blocking mode and blocking root (#20888)

* Remove blocking mode and blocking root

* Add back SuspenseList test

* Clean up ReactDOMLegacyRoot

* Remove dupe ConcurrentRoot

* Update comment",Ricky,2021-02-28T06:14:54Z
38f392ceda9a3eb0520261a595fd7009c98579c8,"typo fix for the word 'Psuedo' (#20894)

Co-authored-by: Bowen Li <bowen31337@gmail.com>",Bowen,2021-02-26T21:11:28Z
0cf9fc10ba9d47099f3507080dd736054d877a20,Fix React Native flow types (#20889),Ricky,2021-02-26T05:00:32Z
2e8bbcb54e04a5d57f61377a9de3946fabf2914e,Fix react-devtools-scheduling-profiler tests on main (#20885),Ricky,2021-02-26T00:10:25Z
c581cdd480f71af6ee87168c72ecabb87b6984c3,"Schedule sync updates in microtask (#20872)

* Schedule sync updates in microtask

* Updates from review

* Fix comment",Ricky,2021-02-25T22:25:25Z
90bde6505e43434596ff6398c2c8acb67ced815b,"Add SuspenseList to react-is (#20874)

This commit also adds explicit index.stable and index.experimental forks to the react-is package so that we can avoid exporting references to SuspenseList in a stable release.",Brian Vaughn,2021-02-25T21:22:33Z
8336f19aa80c6646d6969fa61e34420776d884be,Update React Native types (#20883),Rubén Norte,2021-02-25T21:10:17Z
9209c30ff98528cfbbe9df0774fda0b117975a25,"Add StrictMode level prop and createRoot unstable_strictModeLevel option (#20849)

* The exported '<React.StrictMode>' tag remains the same and opts legacy subtrees into strict mode level one ('mode == StrictModeL1'). This mode enables DEV-only double rendering, double component lifecycles, string ref warnings, legacy context warnings, etc. The primary purpose of this mode is to help detected render phase side effects. No new behavior. Roots created with experimental 'createRoot' and 'createBlockingRoot' APIs will also (for now) continue to default to strict mode level 1.

In a subsequent commit I will add support for a 'level' attribute on the '<React.StrictMode>' tag (as well as a new option supported by ). This will be the way to opt into strict mode level 2 ('mode == StrictModeL2'). This mode will enable DEV-only double invoking of effects on initial mount. This will simulate future Offscreen API semantics for trees being mounted, then hidden, and then shown again. The primary purpose of this mode is to enable applications to prepare for compatibility with the new Offscreen API (more information to follow shortly).

For now, this commit changes no public facing behavior. The only mechanism for opting into strict mode level 2 is the pre-existing 'enableDoubleInvokingEffects' feature flag (only enabled within Facebook for now).

* Renamed strict mode constants

StrictModeL1 -> StrictLegacyMode and StrictModeL2 -> StrictEffectsMode

* Renamed tests

* Split strict effects mode into two flags

One flag ('enableStrictEffects') enables strict mode level 2. It is similar to 'debugRenderPhaseSideEffectsForStrictMode' which enables srtict mode level 1.

The second flag ('createRootStrictEffectsByDefault') controls the default strict mode level for 'createRoot' trees. For now, all 'createRoot' trees remain level 1 by default. We will experiment with level 2 within Facebook.

This is a prerequisite for adding a configurable option to 'createRoot' that enables choosing a different StrictMode level than the default.

* Add StrictMode 'unstable_level' prop and createRoot 'unstable_strictModeLevel' option

New StrictMode 'unstable_level' prop allows specifying which level of strict mode to use. If no level attribute is specified, StrictLegacyMode will be used to maintain backwards compatibility. Otherwise the following is true:
* Level 0 does nothing
* Level 1 selects StrictLegacyMode
* Level 2 selects StrictEffectsMode (which includes StrictLegacyMode)

Levels can be increased with nesting (0 -> 1 -> 2) but not decreased.

This commit also adds a new 'unstable_strictModeLevel' option to the createRoot and createBatchedRoot APIs. This option can be used to override default behavior to increase or decrease the StrictMode level of the root.

A subsequent commit will add additional DEV warnings:
* If a nested StrictMode tag attempts to explicitly decrease the level
* If a level attribute changes in an update",Brian Vaughn,2021-02-24T21:14:14Z
4190a34588ec0b05aac6f050ec656ec4b3f005d7,"Update scheduling profiler Webpack config (#20867)

Use the pre-built scheduler (which includes a check for 'window' being defined in order to load the right scheduler implementation) rather than just directly importing a version of the scheduler that relies on window. Since the scheduling profiler's code runs partially in a web worker, it can't rely on window.",Brian Vaughn,2021-02-23T17:15:36Z
e5f6b91d294d0c1260ce5079ed0192b43ccd3e82,"Add Lane labels to scheduling profiler marks (#20808)

This commit changes scheduling profiler marks from a format like '--schedule-render-1' to '--schedule-render-1-Sync' (where 1 is the numeric value of the Sync lane). This will enable the profiler itself to show more meaningful labels for updates and render work.

The commit also refactors and adds additional tests for the scheduling profiler package.

It also updates the preprocessor to 'support' instant events. These are no-ops for us, but adding recognition of the event type will prevent profiles imported from e.g. Chrome Canary from throwing with an 'unrecognized event' error. (This will resolve issue #20767.)",Brian Vaughn,2021-02-23T16:31:29Z
c62986cfd8cbf994348407c8ece06b04ec1c86f4,"Add additional messaging for RulesOfHooks lint error (#20692)

* Add additional messaging for RulesOfHooks lint error

* Fix tests and spacing issue

* Prettify ESLintRulesOfHooks-test",Anthony Garritano,2021-02-23T00:17:13Z
78d2f2d3015e7b4b3f0f7d8ddd07204952c5f8a9,"Fabric-compatible implementation of `JSReponder` feature (#20768)

With this change, if a node is a Fabric node, we route the setJSResponder call to FabricUIManager. Native counterpart is already landed. Tested internally as D26241364.",Valentin Shergin,2021-02-22T21:50:03Z
cfd8c1bd43fc4fcf708a584924f27a6c79803eae,"DevTools: Restore inspect-element bridge optimizations (#20789)

* Restore inspect-element bridge optimizations

When the new Suspense cache was integrated (so that startTransition could be used) I removed a couple of optimizations between the backend and frontend that reduced bridge traffic when e.g. dehydrated paths were inspected for elements that had not rendered since previously inspected. This commit re-adds those optimizations as well as an additional test with a bug fix that I noticed while reading the backend code.

There are two remaining TODO items as of this commit:
- Make inspected element edits and deletes also use transition API
- Don't over-eagerly refresh the cache in our ping-for-updates handler

I will addres both in subsequent commits.

* Poll for update only refreshes cache when there's an update

* Added inline comment",Brian Vaughn,2021-02-22T19:04:20Z
4d28eca97e469ae6515fa369ed380e3c82fb7acc,Land enableNonInterruptingNormalPri (#20859),Ricky,2021-02-22T17:56:54Z
8af27aeedbc6b00bc2ef49729fc84f116c70a27c,"Remove scheduler sampling profiler shared array buffer (#20840)

No one has been using this data so there's no reason to collect it. Event log has been maintained and tests have been updated.",Brian Vaughn,2021-02-18T16:21:52Z
af3d52611da03ed0a99e4ed93d9e5dbfff7b9825,"Disable (unstable) scheduler sampling profiler for OSS builds (#20832)

* Disabled Scheduler sampling profiler for OSS builds
* Added missing conditional feature flag around profiling calls",Brian Vaughn,2021-02-18T16:06:53Z
8fa0ccca0090acbf2d4717a19bc37e9443ba0bf8,"fix: use SharedArrayBuffer only when cross-origin isolation is enabled (#20831)

* fix: check cross-origin isolation for SharedArrayBuffer

* chore: remove unused a $FlowFixMe comment

* prettier",Toru Kobayashi,2021-02-17T21:43:25Z
09916479219a61ae86d2ec8ce159a161337b9007,"Use setImmediate when available over MessageChannel (#20834)

* Move direct port access into a function

* Fork based on presence of setImmediate

* Copy SchedulerDOM-test into another file

* Change the new test to use shimmed setImmediate

* Clarify comment

* Fix test to work with existing feature detection

* Add flags

* Disable OSS flag and skip tests

* Use VARIANT to reenable tests

* lol",Dan Abramov,2021-02-17T21:00:42Z
e2fd460cca3b11fa0f5505f324043a9b2d9db894,"Bailout in sync task if work is not sync (#20813)

Because we don't cancel synchronous tasks, sometimes more than one
synchronous task ends up being scheduled. This is an artifact of the
fact that we have two different lanes that schedule sync tasks: discrete
and sync. So what can happen is that a discrete update gets scheduled,
then a sync update right after that. Because sync is encoded as higher
priority than discrete, we schedule a second sync task. And since we
don't cancel the first one, there are now two separate sync tasks.

As a next step, what we should do is merge InputDiscreteLane with
SyncLane, then (I believe) this extra bailout wouldn't be necessary,
because there's nothing higher priority than sync that would cause us to
cancel it. Though we may want to add logging to be sure.",Andrew Clark,2021-02-16T20:38:11Z
9e8f3c89555e4a2a1877c27d710b4d4c1e069014,"[CI] Use constant commit sha (#20828)

When running the publish workflow, either via the command line or
via the daily cron job, we should use a constant SHA instead of
whatever happens to be at the head of the main branch at the time the
workflow is run.

The difference is subtle: currently, the SHA is read at runtime,
each time the workflow is run. With this change, the SHA is read right
before the workflow is created and passed in as a constant parameter.

In practical terms, this means if a workflow is re-run via the CircleCI
web UI, it will always re-run using the same commit SHA as the original
workflow, instead of fetching the latest SHA from GitHub, which may
have changed.

Also avoids a race condition where the head SHA changes in between the
Next publish job and the Experimental publish job.",Andrew Clark,2021-02-16T16:31:24Z
6f8843837c4aec94d362560a021c3722d260f49f,"[CI] Publish to release channels sequentially (#20827)

npm will sometimes fail if you try to concurrently publish two different
versions of the same package, even if they use different dist tags.

So instead of publishing to the Next and Experimental channels
simultaneously, we'll do them one after the other.

If we did want to speed up these publish workflows, we could paralellize
by package instead of by release channel.",Andrew Clark,2021-02-16T06:04:13Z
1a7472624661270008011fd77f097d71e6249de9,"Add `supportsMicrotasks` to the host config (#20809)

* Add `supportsMicrotasks` to the host config

Only certain renderers support scheduling a microtask, so we need a
renderer specific flag that we can toggle. That way it's off for some
renderers and on for others.

I copied the approach we use for the other optional parts of the host
config, like persistent mode and test selectors.

Why isn't the feature flag sufficient?

The feature flag modules, confusingly, are not renderer-specific, at
least when running the our tests against the source files. They are
meant to correspond to a release channel, not a renderer, but we got
confused at some point and haven't cleaned it up.

For example, when we run `yarn test`, Jest loads the flags from the
default `ReactFeatureFlags.js` module, even when we import the React
Native renderer — but in the actual builds, we load a different feature
flag module, `ReactFeatureFlags.native-oss.js.` There's no way in our
current Jest load a different host config for each renderer, because
they all just import the same module. We should solve this by creating
separate Jest project for each renderer, so that the flags loaded when
running against source are the same ones that we use in the
compiled bundles.

The feature flag (`enableDiscreteMicrotasks`) still exists — it's used
to set the React DOM host config's `supportsMicrotasks` flag to `true`.
(Same for React Noop) The important part is that turning on the feature
flag does *not* affect the other renderers, like React Native.

The host config will likely outlive the feature flag, too, since the
feature flag only exists so we can gradually roll it out and measure the
impact in production; once we do, we'll remove it. Whereas the host
config flag may continue to be used to disable the discrete microtask
behavior for RN, because RN will likely use a native (non-JavaScript)
API to schedule its tasks.

* Add `supportsMicrotask` to react-reconciler README",Andrew Clark,2021-02-12T21:13:49Z
696e736be11b22e8d4fa40438d235b63db7fddde,"Warn if static flag is accidentally cleared (#20807)

* Warn if static flag is accidentally cleared

""Static"" fiber flags are flags that are meant to exist for the lifetime
of a component. It's really important not to accidentally reset these,
because we use them to decide whether or not to perform some operation
on a tree (which we can do because they get bubbled via `subtreeFlags)`.

We've had several bugs that were caused by this mistake, so we actually
don't rely on static flags anywhere, yet. But we'd like to.

So let's roll out this warning and see if it fires anywhere. Once we
can confirm that there are no warnings, we can assume that it's safe
to start using static flags.

I did not wrap it behind a feature flag, because it's dev-only, and we
can use our internal warning filter to hide this from the console.

* Intentionally clear static flag to test warning

* ...and fix it again",Andrew Clark,2021-02-11T22:20:46Z
483358c38f8623358dd44a3e57476bc02e6357bc,"Omit TransitionHydrationLane from TransitionLanes (#20802)

Follow up to #20793

I don't this makes any observable difference, but this is how it was
before so might as well be consistent just in case.",Andrew Clark,2021-02-11T06:07:19Z
78ec97d34aebce8a9970c5ee0df76cd3399d6e60,Fix typo (#20466),inokawa,2021-02-11T04:35:41Z
4c5275fec75a95e38a77f5fcfbca7c68043d178e,Fix typo in comment for react-devtools-shared (#20459),Matt Wood,2021-02-11T04:35:24Z
67e84198239c3734784c9604d23c93af37b3cb27,Request to update email (#20533),Max Donchenko,2021-02-11T04:34:07Z
6cdc35972d59d08451a529f1ee29787851f0e583,fix comments of markUpdateLaneFromFiberToRoot (#20546),neroneroffy,2021-02-11T04:26:26Z
47dd9f44133845febfcb4f04c76cf9961131b2d2,"Remove fakeCallbackNode (#20799)

Don't need this, because sync tasks are never cancelled. We can do the
same thing we do for microtask callbacks.",Andrew Clark,2021-02-11T04:03:50Z
114ab52953bea3d78785e25300e70cce56f307e9,"Make remaining empty lanes Transition lanes (#20793)

Doesn't really have any effect now because we batch everything together
anyway but will allow for more parallelism once we support that.",Andrew Clark,2021-02-11T00:25:33Z
d3d2451a08c9afcc561f66383211ce2274d864e6,"Use a single lane per priority level (#20791)

(Except transitions and retries.)

The idea is that the only priorities that benefit from multiple parallel
updates are the ones that might suspend: transitions and retries. All
other priorities, including the ones that are interruptible like
Continuous and Idle, don't need multiple lanes because it's better to
batch everything together.",Andrew Clark,2021-02-11T00:09:35Z
b593a6f778e3042e57d71f98d2e0dca716e8ebb2,"CI job to check that forks are in sync (#20795)

We don't always keep the reconciler forks in sync (otherwise it we
wouldn't have forked it) but during periods when they are meant to be in
sync, we use this job to confirm there are no differences.",Andrew Clark,2021-02-11T00:09:20Z
9e9be6c6b34452a327d5f34d3120f4c93edcfcd9,"Parallelize Flow in CI (#20794)

* Parallelize Flow in CI

We added more host configs recently, and we run all the checks in
sequence, so sometimes Flow ends up being the slowest CI job.

This splits the job across multiple processes.

* Fix environment variable typo

Co-authored-by: Ricky <rickhanlonii@gmail.com>

Co-authored-by: Ricky <rickhanlonii@gmail.com>",Andrew Clark,2021-02-10T23:54:58Z
eee874ce6efed53a02f875385b23a53e10dc2c4e,"Cross-fork lint: Support named export declaration (#20784)

Noticed this didn't work when I ran `replace-fork` and a named export
declaration in ReactFiberReconciler was not properly fixed.",Andrew Clark,2021-02-10T19:01:52Z
3b870b1e0912c076c450bee261d8dbb181de673c,Lane enableTransitionEntanglement flag (#20775),Andrew Clark,2021-02-10T08:25:39Z
d1845ad0ff6c69ea377d710d4053d9bd65e0d0ff,"Default updates should not interrupt transitions (#20771)

The only difference between default updates and transition updates is
that default updates do not support suspended refreshes — they will
instantly display a fallback.

Co-authored-by: Rick Hanlon <rickhanlonii@gmail.com>",Andrew Clark,2021-02-10T08:00:24Z
3499c343ab48968192aaefe295dcf4185b3a4f99,"Apply #20778 to new fork, too (#20782)

* Apply #20778 to new fork, too

* Fix tests that use runWithPriority

Where possible, I tried to rewrite in terms of an idiomatic API.

For DOM tests, we should be dispatching an event with the desired
priority level.

For Idle updates (very unstable feature), probably need an unstable
API like ReactDOM.unstable_IdleUpdates.

Some of these fixes are not great, but we can replace them once we've
landed the more of our planned changes to the layering between
Scheduler, the reconciler, and the renderer.",Andrew Clark,2021-02-10T07:21:46Z
3d10eca241be7b51cd4d74cf69eb1f429818b71a,"Move scheduler priority check into ReactDOM (#20778)

* Move scheduler priority check into ReactDOM

* TODO",Dan Abramov,2021-02-09T22:54:57Z
ad8211d96a7990a91d4f6c9915b8b30566c3c0af,"Add more non-React events to the priority list (#20774)

* Add a test for mouseover being continuous

* Add more non-React events to the priority list",Dan Abramov,2021-02-09T22:04:23Z
d919e2c41c71fc7bc4ae037b3a3c60a4600d0a54,"Add tests for non-React discrete events flushing in a microtask (#20772)

* Convert some old discrete tests to Hooks

I'm planning to copy paste so why not update them anyway.

* Copy paste discrete tests into another file

These are still using React events. I'll change that next.

* Convert the test to use native events",Dan Abramov,2021-02-09T19:56:15Z
97fce318a6618bc883a8578f58b9083484c9e6d7,"Experiment: Infer the current event priority from the native event (#20748)

* Add the feature flag

* Add a host config method

* Wire it up to the work loop

* Export constants for third-party renderers

* Document for third-party renderers",Dan Abramov,2021-02-09T18:32:20Z
6c526c5153bc350d2a62c7dcbc698be77d3f2439,"Don't shift interleaved updates to separate lane (#20681)

Now that interleaved updates are added to a special queue, we no longer
need to shift them into their own lane. We can add to a lane that's
already in the middle of rendering without risk of tearing.

See #20615 for more background.

I've only changed this in the new fork, and only behind the
enableTransitionEntanglements flag.

Most of this commit involves updating tests. The ""shift-to-a-new"" lane
trick was intentionally used in a handful of tests where two or more
updates need to be scheduled in different lanes. Most of these tests
were written before `startTransition` existed, and all of them were
written before transitions were assigned arbitrary lanes.

So I ported these tests to use `startTransition` instead, which is the
idiomatic way to mark an update as parallel.

I didn't change the old fork at all. Writing these tests in such a way
that they also pass in the old fork actually revealed a few flaws in the
current implementation regarding interrupting a suspended refresh
transition early, which is a good reminder that we should be writing our
tests using idiomatic patterns as much as we possibly can.",Andrew Clark,2021-02-09T08:03:07Z
35f7441d374bfa7be8e3e9576fd1388333df49cb,Use Lanes instead of priority event constants (#20762),Dan Abramov,2021-02-08T22:30:23Z
b4658f2daa4990ef8057335cd7202b479bd8d41a,"Reduce some constant duplication (#20761)

* Reduce some constant duplication

* Alphabetize",Dan Abramov,2021-02-08T22:30:12Z
a014c915c77f908ba3be3de9e6a06d05c71d5b62,"Parallel transitions: Assign different lanes to consecutive transitions (#20672)

* Land enableTransitionEntanglement changes

Leaving the flag though because I plan to reuse it for additional,
similar changes.

* Assign different lanes to consecutive transitions

Currently we always assign the same lane to all transitions. This means
if there are two pending transitions at the same time, neither
transition can finish until both can finish, even if they affect
completely separate parts of the UI.

The new approach is to assign a different lane to each consecutive
transition, by shifting the bit to the right each time. When we reach
the end of the bit range, we cycle back to the first bit. In practice,
this should mean that all transitions get their own dedicated lane,
unless we have more pending transitions than lanes, which should
be rare.

We retain our existing behavior of assigning the same lane to all
transitions within the same event. This is achieved by caching the first
lane assigned to a transition, then re-using that one until the next
React task, by which point the event must have finished. This preserves
the guarantee that all transition updates that result from a single
event will be consistent.",Andrew Clark,2021-02-08T21:26:48Z
77754ae6183197a63716202f71be5d396f0f2b9a,"Decouple event priority list from event name list (#20760)

* Remove some dead code

* Decouple event priority list from event name list

* Fix lint",Dan Abramov,2021-02-08T20:48:47Z
b5bac18219636112a450d392c02102ec56262c74,"Align event group constant naming with lane naming (#20744)

* Rename ContinuousEvent to DefaultEvent

* Rename UserBlockingEvent to ContinuousEvent",Dan Abramov,2021-02-08T17:48:31Z
bbb2ba8c8db747d70f5ef4114051e69aa5950b60,"sizebot: Combine stable and experimental results (#20753)

Because we have access to the artifacts in CI, we can read bundle sizes
directly from the filesystem, instead of the JSON files emitted by our
custom Rollup plugin.

This gives us some flexibility if we ever have artifacts that aren't
generated by Rollup, or if we rewrite our build script.

Personally, I also prefer to see the whole file path, instead of just
the name, because some of our names are repeated.

My immediate motivation, though, is because it gives us a way to merge
the separate ""experimental"" and ""stable"" size results. Instead
everything is reported in a single table and disambiguated by path.

I also added a section at the top that always displays the size impact
to certain critical bundles — right now, that's the React DOM production
bundles for each release channel. This section will also include any
size changes larger than 2%.

Below that is a section that is collapsed by default and includes all
size changes larger than 0.2%.",Andrew Clark,2021-02-06T20:57:11Z
903384ab0ccd57efd56225dbc82ba6ad56021380,"sizebot: Fix wrong order of base, head arguments (#20751)

The base and head arguments were flipped, so an n% decrease in bundle
size was instead reported as an n% increase.",Andrew Clark,2021-02-05T23:45:25Z
4ecf11977c46966d3deedcdc71f1280a34607d1d,Remove the Fundamental internals (#20745),Dan Abramov,2021-02-05T20:36:55Z
eeb1325b03388184f61796ccf57835d33739249a,Fix UMD bundles by removing usage of global (#20743),Dan Abramov,2021-02-05T17:13:42Z
4e08fb10c999c21d301d1cda3c3aefeab893d0e9,"Update release documentation (#20736)

Added information about automated prereleases",Andrew Clark,2021-02-04T21:20:49Z
b12d0078a4503a2e4397e65c9060df56193d7b27,Fix codesandbox build command (#20731),Ricky,2021-02-04T16:24:07Z
a703c3f7e85ea5d06c707f329872ed0b039f68f2,"Fix cron syntax

Let's try this again?",Andrew Clark,2021-02-04T16:07:39Z
365080f4f592c813f8ebd8bc4118802cd5d3b254,"Autopublish prereleases using head of main branch

Instead of using pipeline parameter. Fixes copypasta from the other
workflow, which accepts the SHA parameter via an API call.",Andrew Clark,2021-02-04T15:34:12Z
f58ad2ad8ed2c38a111e1ab89d9f74fc925640ca,"Auto-publish prereleases every weekday (#20733)

Sets up a cron trigger to publish prereleases at 16:00 UTC (11 am
Eastern, 8 am Pacific) on every weekday (Monday through Friday).",Andrew Clark,2021-02-04T05:08:34Z
c64d6d21be19e179bd6a2d659fa78180051b577f,"Implement CI job that publishes prereleases (#20732)

PR #20728 added a command to initiate a prerelease using CI, but it left
the publish job unimplemented. This fills in the publish job.

Uses an npm automation token for authorization, which bypasses the need
for a one-time password. The token is configured via CircleCI's
environment variable panel.

Currently, it will always publish the head of the main branch. If the
head has already been published, it will exit gracefully.

It does not yet support publishing arbitrary commits, though we could
easily add that. I don't know how important that use case is, because
for PR branches, you can use CodeSandbox CI instead. Or as a last
resort, run the publish script locally.

Always publishing from main is nice because it further incentivizes us
to keep main in a releasable state. It also takes the guesswork out of
publishing a prerelease that's in a broken state: as long as we don't
merge broken PRs, we're fine.",Andrew Clark,2021-02-04T04:57:31Z
4c019585e875b4197519052604764652a1ccb06a,"Empty commit to replace ""broken"" head of main

Head commit had a ""broken"" (but not really) CircleCI job and CircleCI
doesn't give me a way to clear/restart it. So I'm doing this.",Andrew Clark,2021-02-04T02:30:33Z
3b02ae5cc6192815b5936affa8ed68abd00866c7,Add silent to codesandbox config (#20730),Ricky,2021-02-03T23:53:07Z
c1cfa734fd4e72850a9d583d03d4244dabcee585,"Add command to publish preleases via CI (#20728)

```
yarn publish-prereleases
```

Script to trigger a CircleCI workflow that publishes preleases.

**The CI workflow doesn't actually publish yet; it just runs and logs
its inputs.**",Andrew Clark,2021-02-03T23:42:34Z
00e38c80b28fd9b5e99b890d85e080edc2fcc49f,"Fallback if GitHub status is stuck as ""pending"" (#20729)

GitHub's status API is super flaky. Sometimes it reports a job as
""pending"" even after it completes in CircleCI. If it's still pending
when we time out, return the build ID anyway. TODO: The location of the
retry loop is a bit weird. We should probably combine this function with
the one that downloads the artifacts, and wrap the retry loop around the
whole thing.",Andrew Clark,2021-02-03T23:33:46Z
3be750eee9cda6c20fc3e69eb454215125609d37,"Add --ci option to publish script (#20727)

When running in CI, the publish script will skip interactive prompts,
including the prompt for a one-time password.

Instead, CI will need to use an automation access token:
https://docs.npmjs.com/using-private-packages-in-a-ci-cd-workflow",Andrew Clark,2021-02-03T20:17:40Z
85f489a12963edf44a0892ad12cbf7fb4dfbe9ea,"Add publish workflow, triggerable via API request (#20726)

Adds a new CircleCI workflow, which I will use to publish prereleases
(`next` and `experimental`) for a given commit.

The CircleCI API doesn't yet support triggering a specific workflow, but
it does support triggering a pipeline. So as a workaround you can
triggger the entire pipeline and use parameters to disable everything
except the workflow you want. CircleCI recommends this workaround here:
https://support.circleci.com/hc/en-us/articles/360050351292-How-to-trigger-a-workflow-via-CircleCI-API-v2-

Eventually we can set this workflow to trigger on a cron schedule (once
per week, for example).",Andrew Clark,2021-02-03T20:17:29Z
0935a1db3d2c1b9c2b09ea348d0db929757f9de0,"Delete consolidateBundleSizes script (#20724)

This was ported to the new workflow by #20720",Andrew Clark,2021-02-03T16:45:29Z
b936ab660a82a936450f7742b2119cc30f54f97d,"Update sizebot to new workflow (#20719)

* build-combined: Fix bundle sizes path

* Output COMMIT_SHA in build directory

Alternative to parsing an arbitrary package's version number, or
its `build-info.json`.

* Remove CircleCI environment variable requirement

I think this only reason we needed this was to support passing any
job id to `--build`, instead of requiring the `process_artifacts` job.
And to do that you needed to use the workflows API endpoint, which
requires an API token.

But now that the `--commit` argument exists and automatically finds the
correct job id, we can just use that.

* Add CI job that gets base artifacts

Uses download-experimental script and places the base artifacts into
a top-level folder.

* Migrate sizebot to combined workflow

Replaces the two separate sizebot jobs (one for each channel, stable and
experimental) with a single combined job that outputs size information
for all bundles in a single GitHub comment.

I didn't attempt to simplify the output at all, but we should. I think
what I would do is remove our custom Rollup sizes plugin, and read the
sizes from the filesystem instead. We would lose some information about
the build configuration used to generate each artifact, but that can be
inferred from the filepath. For example, the filepath
`fb-www/ReactDOM-dev.classic.js` already tells us everything we need to
know about the artifact. Leaving this for a follow up.

* Move GitHub status check inside retry loop

The download script will poll the CircleCI endpoint until the build job
is complete; it should also poll the GitHub status endpoint if the
build job hasn't been spawned yet.

* Only run get_base_build on main branch",Andrew Clark,2021-02-03T16:29:51Z
2d025753e2bc490959188e72e3bf50008408430d,"Remove --build flag from release scripts (#20723)

Also update instructions to match recent script changes.

Also add reproducible commit SHA to post download instructions to support publishing the Firefox DevTools extension.",Brian Vaughn,2021-02-03T16:11:56Z
0e526bcec2a2940eb2cea6204efab76a2e4d7c0d,"Fix release script --commit param (#20720)

PR #20717 accidentally broke the `--commit` parameter because the
script errors if you provide both a `--build` and a `--commit`.

I solved by removing the validation error. When there's a conflict, it
will choose the --`build`.

(Although maybe we should `--build` entirely and always uses `--commit`.
I think `--commit` is a sufficient replacement.)",Andrew Clark,2021-02-03T03:30:37Z
7e36d8beba53102e11c523f317976b311666e449,"Some release script fixes (#20718)

* Retry loop should not start over from beginning

When the otp times out, we should not retry the packages that were
already successfully published. We should pick up where we left off.

* Don't crash if build-info.json doesn't exist

The ""print follow up instructions"" step crashes if build-info.json is
not found. The new build workflow doesn't include those yet (might not
need to) and since the instructions that depend on it only affect
semver (latest) releases, I've moved the code to that branch. Will
follow up with a proper fix, either by adding back a build-info.json
file or removing that dependency and reading the commit some other way.",Andrew Clark,2021-02-02T22:48:02Z
c47f3cfa1743ffb3b9c7f94ef94731e89a9d261a,Restore experimental build script's ability to auto download latest build (#20717),Brian Vaughn,2021-02-02T21:40:31Z
3e0bdbefa3cb78c5534b808772ed6afad7c34827,DevTools: Patch console methods even when only show-inline-warnings/errors enabled (#20688),Brian Vaughn,2021-02-02T15:19:53Z
7cb9fd7ef822436aef13c8cbf648af1e21a5309a,"Land interleaved updates change in main fork (#20710)

* Land #20615 in main fork

Includes change to interleaved updates.

```
yarn replace-fork
```

* Check deferRenderPhaseUpdateToNextBatch in test",Andrew Clark,2021-02-02T00:05:42Z
dc27b5aaae5e1a028dc77412d5396466aaa87268,"useMutableSource: Use StrictMode double render to detect render phase mutation (#20698)

* Concurrent Mode test for uMS render mutation

Same test as the one added in #20665, but for Concurrent Mode.

* Use double render to detect render phase mutation

PR #20665 added a mechanism to detect when a `useMutableSource` source
is mutated during the render phase. It relies on the fact that we double
invoke components that error during development using
`invokeGuardedCallback`. If the version in the double render doesn't
match the first, that indicates there must have been a mutation during
render.

At first I thought it worked by detecting inside the *other* double
render, the one we do for Strict Mode. It turns out that while it does
warn then, the warning is suppressed, because we suppress all console
methods that occur during the Strict Mode double render. So it's really
the `invokeGuardedCallback` one that makes it work.

Anyway, let's set that aside that issue for a second. I realized during
review that errors that occur during the Strict Mode double render
reveal a useful property: A pure component will never throw during the
double render, because if it were pure, it would have also thrown during
the first render... in which case it wouldn't have double rendered! This
is true of all such errors, not just the one thrown by
`useMutableSource`.

Given this, we can simplify the `useMutableSource` mutation detection
mechanism. Instead of tracking and comparing the source's version, we
can instead check if we're inside a double render when the error is
thrown.

To get around the console suppression issue, I changed the warning to an
error. It errors regardless, in both dev and prod, so it doesn't have
semantic implications.

However, because of the paradox I described above, we arguably
_shouldn't_ throw an error in development, since we know that error
won't happen in production, because prod doesn't double render. (It's
still a tearing bug, but that doesn't mean the component will actually
throw.) I considered that, but that requires a larger conversation about
how to handle errors that we know are only possible in development. I
think we should probably be suppressing *all* errors (with a warning)
that occur during a double render.",Andrew Clark,2021-02-01T20:11:51Z
f8545f6eb8b2041df5efffe8987a3fcb63321190,"Add automatic retry to download script (#20704)

If build job is still pending, the script will continously poll until
it reaches the retry limit.

I've set the limit at 10 minutes, since our CI pipeline almost always
finishes before that.",Andrew Clark,2021-02-01T16:30:50Z
f8b6969da65457cd18b434616cb01ac1c7b0afcc,"Add `--commit` param to release scripts (#20703)

Alternative to `--build`. Uses same logic as sizebot and www
sync script.

Immediate motivation is I want sizebot to use the
`download-experimental-build` command in CI. Will do that next.",Andrew Clark,2021-02-01T16:27:59Z
bb1b7951d182d36345c83154f9d9bab218011b46,"fix: don't run effects if a render phase update results in unchanged deps (#20676)

The memoized state of effect hooks is only invalidated when deps change. Deps are compared between the previous effect and the current effect. This can be problematic if one commit consists of an update that has changed deps followed by an update that has equal deps. That commit will lead to memoizedState containing the changed deps even though we committed with unchanged deps.

The n+1 update will therefore run an effect because we compare the updated deps with the deps with which we never actually committed.

To prevent this we now invalidate memoizedState on every updateEffectImpl call so that memoizedStat.deps always points to the latest deps.",Sebastian Silbermann,2021-01-29T15:51:11Z
766a7a28a9a233b236a97166411a9242376df7a6,"Improve React error message when mutable sources are mutated during render (#20665)

Changed previous error message from:
> Cannot read from mutable source during the current render without tearing. This is a bug in React. Please file an issue.

To:
> Cannot read from mutable source during the current render without tearing. This may be a bug in React. Please file an issue.

Also added a DEV only warning about the unsafe side effect:
> A mutable source was mutated while the %s component was rendering. This is not supported. Move any mutations into event handlers or effects.

I think this is the best we can do without adding production overhead that we'd probably prefer to avoid.",Brian Vaughn,2021-01-29T15:22:55Z
a922f1c710f60f64c9013fb567ce8b9c15f252eb,"Fix cache refresh bug that broke DevTools (#20687)

Will follow up with test",Andrew Clark,2021-01-28T21:07:00Z
e51bd6c1fa2731c4fcd39300144e917aedfc989b,"Queue discrete events in microtask (#20669)

* Queue discrete events in microtask

* Use callback priority to determine cancellation

* Add queueMicrotask to react-reconciler README

* Fix invatiant conditon for InputDiscrete

* Switch invariant null check

* Convert invariant to warning

* Remove warning from codes.json",Ricky,2021-01-27T23:24:58Z
aa736a0fa6e22f902bd7a98dcb9b24d8c4310e35,"Add queue microtask to host configs (#20668)

* Queue discrete events in microtask

* Fix flow types

* Add to createReactNoop

* More flow types

* Remove import

* Add to custom HostConfig as well",Ricky,2021-01-27T20:01:21Z
deeeaf1d222ba29bcce6eda0a1c4423ce10e727a,"Entangle overlapping transitions per queue (#20670)

When multiple transitions update the same queue, only the most recent
one should be allowed to finish. We shouldn't show intermediate states.

See #17418 for background on why this is important.

The way this currently works is that we always assign the same lane to
all transitions. It's impossible for one transition to finish without
also finishing all the others.

The downside of the current approach is that it's too aggressive. Not
all transitions are related to each other, so one should not block
the other.

The new approach is to only entangle transitions if they update one or
more of the same state hooks (or class components), because this
indicates that they are related. If they are unrelated, then they can
finish in any order, as long as they have different lanes.

However, this commit does not change anything about how the lanes are
assigned. All it does is add the mechanism to entangle per queue. So it
doesn't actually change any behavior, yet. But it's a requirement for my
next step, which is to assign different lanes to consecutive transitions
until we run out and cycle back to the beginning.",Andrew Clark,2021-01-27T19:55:27Z
e316f785526e503eceed1ae33b7a06440084b9c9,"RN: Implement `sendAccessibilityEvent` in RN Renderer that proxies between Fabric/non-Fabric (#20554)

* RN: Implement `sendAccessibilityEvent` on HostComponent

Implement `sendAccessibilityEvent` on HostComponent for Fabric and non-Fabric RN.

Currently the Fabric version is a noop and non-Fabric uses
AccessibilityInfo directly. The Fabric version will be updated once
native Fabric Android/iOS support this method in the native UIManager.

* Move methods out of HostComponent

* Properly type dispatchCommand and sendAccessibilityEvent handle arg

* Implement Fabric side of sendAccessibilityEvent

* Add tests: 1. Fabric->Fabric, 2. Paper->Fabric, 3. Fabric->Paper, 4. Paper->Paper

* Fix typo: ReactFaricEventTouch -> ReactFabricEventTouch

* fix flow types

* prettier",Joshua Gross,2021-01-27T04:02:40Z
9c32622cf04e70dd40463ece25e83b7cc311b0ed,Improve tests that use discrete events (#20667),Ricky,2021-01-27T00:15:06Z
d13f5b9538e48f74f7c571ef3cde652ca887cca0,"Experiment: Unsuspend all lanes on update (#20660)

Adds a feature flag to tweak the internal heuristic used to ""unsuspend""
lanes when a new update comes in.

A lane is ""suspended"" if we couldn't finish rendering it because it was
missing data, and we chose not to commit the fallback. (In this context,
""suspended"" does not include updates that finished with a fallback.)

When we receive new data in the form of an update, we need to retry
rendering the suspended lanes, since the new data may have unblocked the
previously suspended work. For example, the new update could navigate
back to an already loaded route.

It's impractical to retry every combination of suspended lanes, so we
need some heuristic that decides which lanes to retry and in
which order.

The existing heuristic roughly approximates the old Expiration Times
model. It unsuspends all lower priority lanes, but leaves higher
priority lanes suspended.

Then when we start rendering, we choose the lanes that have the highest
LanePriority and render those -- and then we add to that all the lanes
that are highher priority.

If this sounds terribly confusing, it's because it barely makes sense.
(It made more sense in the Expiration Times world, I promise, but it
was still confusing.) I don't think it's worth me trying to explain the
old behavior too much because the point here is that we can replace it
with something simpler.

The new heurstic is to unsuspend all suspended lanes whenever there's
an update.

This is effectively what we already do except in a few very specific
edge cases, ever since we removed the delayed suspense feature from
everything that's not a refresh transition.

We can optimize this in the future to only unsuspend lanes that are
either 1) in the `lanes` or `subtreeLanes` of the node that was updated,
or 2) in the `lanes` of the return path of the node that was updated.
This would exclude lanes that are only located in unrelated sibling
trees. But, this optimization wouldn't be useful currently because we
assign the same transition lane to all transitions. It will become
relevant again once we start assigning arbitrary lanes to transitions
-- but that in turn requires us to implement entanglement of overlapping
transitions, one of our planned projects.

So to sum up: the goal here is to remove the weird edge cases and switch
to a simpler model, on top of which we can make more substantial
improvements.

I put it behind a flag so I can run an A/B test and confirm it doesn't
cause a regression.",Andrew Clark,2021-01-26T20:23:34Z
db5945efee7cffae0a4d6c9fa4e08deec2f49e40,Set default release channel for download-experimental-build script (#20663),Brian Vaughn,2021-01-26T20:17:56Z
a511dc7090523ee49ce21a08e55c41917d8af311,Error for deferred value and transition in Server Components (#20657),Sebastian Markbåge,2021-01-25T21:58:47Z
fb3f63f1ab6e9ebf25ddce74a19d975ef410d4f6,"Remove lazy invokation of segments (#20656)

This is a remainder from Blocks when these were separate query functions.",Sebastian Markbåge,2021-01-25T21:04:36Z
6d94017c4287195d8d6c5173ea663285820e9f61,"DevTools: Make it easier to write tests for inspected elements (#20655)

And also add a few tests for  which also cover a recent bugfix that just landed",Brian Vaughn,2021-01-25T19:58:19Z
f0031dc6ed8801cc638c2f378911a93ceb8e2412,Devtool: `$r` should contain `hooks` property when it is forwardRef or memo component (#20626),Berton Zhu,2021-01-25T15:35:02Z
895ae67fd3cb16b23d66a8be2ad1c747188a811f,"Improve error boundary handling for unmounted subtrees (#20645)

A passive effect's cleanup function may throw after an unmount. Prior to this commit, such an error would be ignored. (React would not notify any error boundaries.)

After this commit, React will skip any unmounted boundaries and look for a still-mounted boundary. If one is found, it will call getDerivedStateFromError and/or componentDidCatch (depending on the type of boundary). Unmounted boundaries will be ignored, but as they have been unmounted– this seems appropriate.",Brian Vaughn,2021-01-25T13:54:20Z
f15f8f64bbc3e02911d1a112fa9bb8f7066a56ee,"Store interleaved updates on separate queue until end of render (#20615)

## Motivation

An *interleaved* update is one that is scheduled while a render is
already in progress, typically from a concurrent user input event.

We have to take care not to process these updates during the current
render, because a multiple interleaved updates may have been scheduled
across many components; to avoid tearing, we cannot render some of
those updates without rendering all of them.

## Old approach

What we currently do when we detect an interleaved update is assign a
lane that is not part of the current render.

This has some unfortunate drawbacks. For example, we will eventually run
out of lanes at a given priority level. When this happens, our last
resort is to interrupt the current render and start over from scratch.
If this happens enough, it can lead to starvation.

More concerning, there are a suprising number of places that must
separately account for this case, often in subtle ways. The maintenance
complexity has led to a number of tearing bugs.

## New approach

I added a new field to the update queue, `interleaved`. It's a linked
list, just like the `pending` field. When an interleaved update is
scheduled, we add it to the `interleaved` list instead of `pending`.

Then we push the entire queue object onto a global array. When the
current render exits, we iterate through the array of interleaved queues
and transfer the `interleaved` list to the `pending` list.

So, until the current render has exited (whether due to a commit or an
interruption), it's impossible to process an interleaved update, because
they have not yet been enqueued.

In this new approach, we don't need to resort to clever lanes tricks to
avoid inconsistencies. This should allow us to simplify a lot of the
logic that's currently in ReactFiberWorkLoop and ReactFiberLane,
especially `findUpdateLane` and `getNextLanes`. All the logic for
interleaved updates is isolated to one place.",Andrew Clark,2021-01-22T22:01:54Z
0fd6805c6d0477be917d31949a73b3bbdccfe71c,Land rest of effects refactor in main fork (#20644),Andrew Clark,2021-01-22T19:49:33Z
a6b5256a29b60620bdeb9266d4935cb59cc1258e,Refactored recursive strict effects method to be iterative (#20642),Brian Vaughn,2021-01-22T19:27:39Z
3957853ae5095a85bacf6d414ee200e8236e9ed4,"Re-add ""strict effects mode"" for legacy roots only (#20639)

This combines changes originally made in #19523, #20028, and #20415 but with slightly different semantics: ""strict effects"" mode is enabled only for the experimental root APIs (never for legacy render, regardless of <StrictMode> usage). These semantics may change slightly in the future.",Brian Vaughn,2021-01-22T13:58:11Z
d4c05a1eadb0f94c930f5263f819587d14ab3ac9,Flow ignore new build2 directory (#20635),Brian Vaughn,2021-01-21T15:43:52Z
fceb75e8995eaa6eb5c996111dc2bf7d8679cd99,"Delete remaining references to effect list (#20625)

I think that's it!",Andrew Clark,2021-01-20T18:24:01Z
741dcbdbec52b088e33538cd93c679c05c146aa1,"Schedule passive phase whenever there's a deletion (#20624)

We use the passive phase to detach the fibers.",Andrew Clark,2021-01-20T18:21:42Z
11a983fc76192037798d2f93dedf09af97f99884,"Remove references to Deletion flag (#20623)

We no longer use the Deletion flag anywhere in the new fork, so we can
stop marking it.",Andrew Clark,2021-01-20T18:18:19Z
2e948e0d91360e4763594854be84347737e4b1f6,Avoid .valueOf to close #20594 (#20617),Dima Tisnek,2021-01-20T01:59:31Z
2a646f73e4f64000fcd1a483cec1c08614f20e9c,Convert snapshot phase to depth-first traversal (#20622),Andrew Clark,2021-01-19T23:37:00Z
fb3e158a64dd9e0d777220ce0e4a3bdecff158dc,"Convert ReactSuspenseWithNoopRenderer tests to use built-in cache (#20601)

* Remove `ms` prop from SuspenseWithNoop tests

Use `resolveText` instead.

* Migrate SuspenseWithNoop tests to built-in cache",Andrew Clark,2021-01-19T22:38:54Z
e0fd9e67fce5748990ff4a4d0802878ded230771,Use update lane priority in work loop (#20621),Ricky,2021-01-19T22:34:08Z
58e8304483ebfadd02a295339b5e9a989ac98c6e,"Remove custom error message from hook access error (#20604)

It will still result in a null access error, so there's no change in
semantics. We will print a user-friendly error message in DEV.",Andrew Clark,2021-01-19T22:20:22Z
9043626f09c7d02a81b1ed89236e8f88d44fdc7e,"Cache tests: Make it easier to test many caches (#20600)

Some rearranging to make it easier to write tests that assert on the
output of multiple caches.",Andrew Clark,2021-01-19T21:54:45Z
af0bb68e87476c0d72ceb5ffed7263924ee18c10,Land #20595 and #20596 in main fork (#20602),Andrew Clark,2021-01-19T16:37:51Z
2b6985114f660f3d0ad4c3eb8efece2cbdb44eb8,build-combined: Fix failures  when renaming across devices (#20620),Sebastian Silbermann,2021-01-19T16:14:06Z
ba9582da27481677cdac2dd000a438147a5df88e,"[devtools] Fix can't expand prop value in some scenario (#20534)

Co-authored-by: Brian Vaughn <bvaughn@fb.com>",ChenLei,2021-01-19T15:26:52Z
af16f755dc7e0d6e2b4bf79b86c434f4ce0497fe,"Update DevTools to use getCacheForType API (#20548)

DevTools was built with a fork of an early idea for how Suspense cache might work. This idea is incompatible with newer APIs like `useTransition` which unfortunately prevented me from making certain UX improvements. This PR swaps out the primary usage of this cache (there are a few) in favor of the newer `unstable_getCacheForType` and `unstable_useCacheRefresh` APIs. We can go back and update the others in follow up PRs.

### Messaging changes

I've refactored the way the frontend loads component props/state/etc to hopefully make it better match the Suspense+cache model. Doing this gave up some of the small optimizations I'd added but hopefully the actual performance impact of that is minor and the overall ergonomic improvements of working with the cache API make this worth it.

The backend no longer remembers inspected paths. Instead, the frontend sends them every time and the backend sends a response with those paths. I've also added a new ""force"" parameter that the frontend can use to tell the backend to send a response even if the component hasn't rendered since the last time it asked. (This is used to get data for newly inspected paths.)

_Initial inspection..._
```
front |                                                      | back
      | -- ""inspect"" (id:1, paths:[], force:true) ---------> |
      | <------------------------ ""inspected"" (full-data) -- |
```
_1 second passes with no updates..._
```
      | -- ""inspect"" (id:1, paths:[], force:false) --------> |
      | <------------------------ ""inspected"" (no-change) -- |
```
_User clicks to expand a path, aka hydrate..._
```
      | -- ""inspect"" (id:1, paths:['foo'], force:true) ----> |
      | <------------------------ ""inspected"" (full-data) -- |
```
_1 second passes during which there is an update..._
```
      | -- ""inspect"" (id:1, paths:['foo'], force:false) ---> |
      | <----------------- ""inspectedElement"" (full-data) -- |
```

### Clear errors/warnings transition
Previously this meant there would be a delay after clicking the ""clear"" button. The UX after this change is much improved.

### Hydrating paths transition
I also added a transition to hydration (expanding ""dehyrated"" paths).

### Better error boundaries
I also added a lower-level error boundary in case the new suspense operation ever failed. It provides a better ""retry"" mechanism (select a new element) so DevTools doesn't become entirely useful. Here I'm intentionally causing an error every time I select an element.

### Improved snapshot tests
I also migrated several of the existing snapshot tests to use inline snapshots and added a new serializer for dehydrated props. Inline snapshots are easier to verify and maintain and the new serializer means dehydrated props will be formatted in a way that makes sense rather than being empty (in external snapshots) or super verbose (default inline snapshot format).",Brian Vaughn,2021-01-19T14:51:32Z
9a2150719b971adf078eca5cecbb18c146545cbd,Fix prod build in ci/codesandbox (#20606),Sebastian Silbermann,2021-01-18T19:56:17Z
95feb0e701a5ae20996e8cc6c4acd0f504d5985a,Convert mutation phase to depth-first traversal (#20596),Andrew Clark,2021-01-15T20:24:20Z
6132919bf2b8851382547b34a442e7e0c09c5697,Convert layout phase to depth-first traversal (#20595),Andrew Clark,2021-01-15T20:22:23Z
98313aaa7ea58d49eb30ecffc0f9eb6fc1ef467a,"Migrate prepare-release-from-ci to new workflow (#20581)

* Migrate prepare-release-from-ci to new workflow

I added a `--releaseChannel (-r)` argument to script. You must choose
either ""stable"" or ""experimental"", because every build job now includes
both channels.

The prepare-release-from-npm script is unchanged since those releases
are downloaded from npm, nt CI.

(As a side note, I think we should start preparing semver releases using
the prepare-release-from-ci script, too, and get rid of
prepare-release-from-npm. I think that was a neat idea originally but
because we already run `npm pack` before storing the artifacts in CI,
there's really not much additional safety; the only safeguard it adds is
the requirement that a ""next"" release must have already been published.)

* Move validation to parse-params module",Andrew Clark,2021-01-14T17:20:20Z
42e04b46d19648968537a404f15cebc42b6fab54,"Fix: Detach deleted fiber's alternate, too (#20587)

We need to call `detachFiberAfterEffects` on the fiber's alternate to
clean it up. We're currently not, because the `alternate` field is
cleared during `detachFiberMutation`. So I deferred detaching the
`alternate` until the passive phase. Only the `return` pointer needs to
be detached for semantic purposes.

I don't think there's any good way to test this without using
reflection. It's not even observable using out our ""supported""
reflection APIs (`findDOMNode`), or at least not that I can think of.
Which is a good thing, in a way.

It's not really a memory leak, either, because the only reference to the
alternate fiber is from the parent's alternate. Which will be
disconnected the next time the parent is updated or deleted.

It's really only observable if you mess around with internals in ways
you're not supposed to — I found it because a product test in www that
uses Enzyme was doing just that.

In lieu of a new unit test, I confirmed this patch fixes the broken
product test.",Andrew Clark,2021-01-14T16:18:55Z
a656ace8da6d005e49a750da3d9a3fd0fdcac76c,"Deletion effects should fire parent -> child (#20584)

* Test: Deletion effects should fire parent -> child

Regression in new effect implementation

* Fix passive deletion effect ordering",Andrew Clark,2021-01-14T00:18:55Z
fc07b070a09396e60126dd75641472f0c7504edf,"Retry with fresh otp if publish fails (#20582)

Currently, if publishing a package fails, the script crashes, and the
user must start it again from the beginning. Usually this happens
because the one-time password has timed out.

With this change, the user will be prompted for a fresh otp, and the
script will resume publishing.",Andrew Clark,2021-01-13T19:54:56Z
e6ed2bcf424d0a25a8f628f7bb9962a29ec7d88f,"Update package.json versions as part of build step (#20579)

Fixes issue in the new build workflow where the experimental packages do
not include ""experimental"" in the version string. This was because the
previous approach relied on the RELEASE_CHANNEL environment variable,
which we are no longer setting in the outer CI job, since we use the
same job to build both channels. To solve, I moved the version
post-processing into the build script itself.

Only affects the new build workflow. Old workflow is unchanged.

Longer term, I would like to remove version numbers from the source
entirely, including the package.jsons. We should use a placeholder
instead; that's mostly how it already works, since the release script
swaps out the versions before we publish to stable.",Andrew Clark,2021-01-13T17:54:03Z
b99ac3d6dffbe57f94d368cc4f4e0ddf089e4f53,Migrate remaining tests to combined workflow (#20577),Andrew Clark,2021-01-12T18:58:49Z
9a6a41d108e1bb7c4babebebad7e72daa22a2374,Migrate build tests to combined workflow (#20574),Andrew Clark,2021-01-12T17:50:38Z
eb0fb382308f18460844d646dada2e564f82353d,"Build stable and experimental with same command (#20573)

The goal is to simplify our CI pipeline so that all configurations
are built and tested in a single workflow.

As a first step, this adds a new build script entry point that builds
both the experimental and stable release channels into a single
artifacts directory.

The script works by wrapping the existing build script (which only
builds a single release channel at a time), then post-processing the
results to match the desired filesystem layout. A future version of the
build script would output the files directly without post-processing.

Because many parts of our infra depend on the existing layout of the
build artifacts directory, I have left the old workflows untouched.
We can incremental migrate to the new layout, then delete the old
workflows after we've finished.",Andrew Clark,2021-01-12T17:32:32Z
e8eff119e036485b74b2acb6f57045390703f6fb,"Fix ESLint crash on empty react effect hook (#20385)

* Fix ESLint crash on empty react effect hook

* Add layout effect to test

* Improve wording in comment

* Improve lint warning wording

* Reword missing effect callback message",Christian Ruigrok,2021-01-11T20:18:45Z
27659559ebfd6b7119bfc0ff02ecb851c135020c,Add useRefresh hook to react-debug-tools (#20460),Brian Vaughn,2021-01-04T15:46:20Z
beb38aba3e5617cb915a8e979245b2996e1764e8,[devtools] Bump electron version from 9.1.0 to 11.1.0 for darwin-arm64 builds (#20496),Jaiwanth,2021-01-04T15:38:11Z
6630c2de2a578aba0b61cb2e61e58a1466e80ca2,Add rudimentary support for Cache to DevTools (#20458),Brian Vaughn,2021-01-04T14:32:03Z
50393dc3a0c59cfefd349d31992256efd6f8c261,React Native fixes for new inline errors feature (#20502),Brian Vaughn,2020-12-22T18:58:47Z
09a2c363a5175291ecdcbf7f39b0d165bc7da8ec,"Expose DEV-mode warnings in devtools UI (#20463)

Co-authored-by: Brian Vaughn <bvaughn@fb.com>",Sebastian Silbermann,2020-12-22T16:09:29Z
6cbb9394d1474e3a728b49dc7f3a11d61a421ce3,devtools: Display shortcuts for prev/next search result (#20470),Sebastian Silbermann,2020-12-21T02:48:36Z
99554dc36fa9f5ef29b75dd59836dcc720d831b9,"Add Flight packages to experimental allowlist (#20486)

- react-fetch
- react-fs
- react-pg
- react-server-dom-webpack",Andrew Clark,2020-12-18T22:29:48Z
1bda600378f08861f40e2ce2f146e52354b8ef13,"Hardcoded allowlist for publishing packages (#20485)

With separate lists for stable and experimental.",Andrew Clark,2020-12-18T22:20:37Z
efc57e5cbbd618f3c98d941c48eec859026c2dcb,Add built-in Suspense cache with support for invalidation (refreshing) (#20456),Andrew Clark,2020-12-18T18:57:24Z
00a5b08e24eb7429678aaed88360ae485dc08e68,"Remove PassiveStatic optimization

Passive flags are a new concept that is tricky to get right. We've
already found two bugs related to PassiveStatic. Let's remove this
optimization for now, and add it back once the main part of the effects
refactor lands.",Andrew Clark,2020-12-11T21:45:08Z
a6329b10508e9b27222392dc03d7867d82b2e984,"Don't clear static flags in resetWorkInProgress

Fixes the regression test added in #20433",Andrew Clark,2020-12-11T21:37:43Z
1cf59f34b89728f8ef2bc17158c438ab17f063bd,Convert passive unmount phase to tree traversal,Andrew Clark,2020-12-08T00:01:47Z
ab29695a050b806492351250a24221d622d5e4cc,"Defer more field detachments to passive phase

This allows us to use those fields during passive unmount traversal.",Andrew Clark,2020-12-07T23:51:07Z
d37d7a4bb4d6b55e2f393827f65082c7ea529ab7,Convert passive mount phase to tree traversal,Andrew Clark,2020-12-07T22:15:00Z
19e15a39865e4f5b7c4419f8db7d9f122e27e9a4,"Add PassiveStatic to trees with passive effects

Indicates that a tree needs passive clean-up on deletion.",Andrew Clark,2020-12-07T22:07:55Z
ff17fc176f959bda67a6c1d8e7d294c4852f9546,"Don't clear other flags when adding Deletion

Same as #20398 but for Deletions. There's no new regression test, but in
the effects refactor, existing tests will fail without this.",Andrew Clark,2020-12-07T21:30:31Z
5687864eb77f2a43eefa1681f2d097490832f002,"Add back disableSchedulerTimeoutInWorkLoop flag (#20482)

* Add back enableSchedulerTimeoutInWorkLoop flag

* Nvm, keep it as disableSchedulerTimeoutInWorkLoop",Ricky,2020-12-17T22:17:23Z
9f338e5d7787cbef326082278ddfa06ca0d65393,"clone json obj in react native flight client host config parser (#20474)

As per Seb's comment in #20465, we need to do the same thing in React Native as we do in Relay.

When `parseModel` suspends because of missing dependencies, it will exit and retry to parse later. However, in the relay implementation, the model is an object that we modify in place when we parse it, so when we we retry, part of the model might be parsed already into React elements, which will error because the parsing code expect a Flight model. This diff clones instead of mutating the original model, which fixes this error.",Luna Ruan,2020-12-16T19:53:51Z
4e62fd2712fc279cc01a65a73ac7e7866489c654,"clone json obj in relay flight client host config parser (#20465)

When `parseModel` suspends because of missing dependencies, it will exit and retry to parse later. However, in the relay implementation, the model is an object that we modify in place when we parse it, so when we we retry, part of the model might be parsed already into React elements, which will error because the parsing code expect a Flight model. This diff clones instead of mutating the original model, which fixes this error.",Luna Ruan,2020-12-15T23:33:54Z
604bbcd87d6df2cf8554ae410776ff61b0795210,[devtools] Increase the clickable area of the prop value (#20428),Oliver Lassen,2020-12-14T21:23:26Z
070372cde2d8b344a96ec63c92b5dcbec863073f,[Flight] Fix webpack watch mode issue (#20457),Dan Abramov,2020-12-14T15:50:20Z
0f80dd1484ce546076c7936329610e7854ef6dff,"[Flight] Support concatenated modules in Webpack plugin (#20449)

* Extract recordModule

* Add support for concatenated modules",Dan Abramov,2020-12-13T17:44:59Z
daf38ecdfcda32a1050231fcc6dea364f8b102e3,[Flight] Use lazy reference for existing modules (#20445),Dan Abramov,2020-12-11T22:45:18Z
3f9205c3331b80f13a0376826d1ef859786c086b,"Regression test: SuspenseList causes lost unmount (#20433)

@sebmarkbage reminded me that the complete phase of SuspenseList
will sometimes enter the begin phase of the children without calling
`createWorkInProgress` again, instead calling `resetWorkInProgress`.

This was raised in the context of considering whether #20398 might
have accidentally caused a SuspenseList bug. (I did look at this code
at the time, but considering how complicated SuspenseList is it's not
hard to imagine that I made a mistake.)

Anyway, I think that PR is fine; however, reviewing it again did lead me
to find a different bug. This new bug is actually a variant of the bug
fixed by #20398.

`resetWorkInProgress` clears a fiber's static flags. That's wrong, since
static flags -- like PassiveStatic -- are meant to last the lifetime of
the component.

In more practical terms, what happens is that if a direct child of
SuspenseList contains a `useEffect`, then SuspenseList will cause the
child to ""forget"" that it contains passive effects. When the child
is deleted, its unmount effects are not fired :O

This is the second of this type of bug I've found, which indicates to me
that it's too easy to accidentally clear static flags.

Maybe we should only update the `flags` field using helper functions,
like we do with `lanes`.

Or perhaps we add an internal warning somewhere that detects when a
fiber has different static flags than its alternate.",Andrew Clark,2020-12-11T16:38:49Z
cdfde3ae110844baf068706e7ed3fe97ec15f1d7,"Always rethrow original error when we replay errors (#20425)

We replay errors so you can break on paused exceptions. This is done in
the second pass so that the first pass can ignore suspense.

Originally this threw the original error. For suppression purposes
we copied the flag onto the original error.

https://github.com/facebook/react/blob/f1dc626b29b8bf0f14c75a8525e8650b7ea94a47/packages/react-reconciler/src/ReactFiberScheduler.old.js#L367-L369

During this refactor it changed to just throw the retried error:

https://github.com/facebook/react/pull/15151

We're not sure exactly why but it was likely just an optimization or
clean up.

So we can go back to throwing the original error. That helps in the case
where a memoized function is naively not rethrowing each time such as
in Node's module system.

Unfortunately this doesn't fix the problem fully.
Because invokeGuardedCallback captures the error and logs it to the browser.
So you still end up seeing the wrong message in the logs.

This just fixes so that the error boundary sees the first one.",Sebastian Markbåge,2020-12-10T13:50:41Z
b15d6e93e70a50605f9a1187ea104d7e280447e4,"[Flight] Make PG and FS server-only (#20424)

* Make react-fs server-only

* Make react-pg server-only",Dan Abramov,2020-12-10T06:15:37Z
40ff2395e44d5f821ddcd4f56d5f9a53ee99ceb1,"[Flight] Prevent non-Server imports of aliased Server entrypoints (#20422)

* [Flight] Prevent non-Server imports of aliased Server entrypoints

* Fix Flow + await

* Tighten the types",Dan Abramov,2020-12-10T03:55:38Z
94aa365e3abfa3ae946875fe2e957ebdcf1d00bc,[Flight] Fix webpack plugin to use chunk groups (#20421),Dan Abramov,2020-12-10T03:03:53Z
842ee367e620d322e67262d67e892b17712998f8,"[Flight] Rename the shared entry point (#20420)

* [Flight] Rename the shared entry point

* Shared",Dan Abramov,2020-12-10T02:14:50Z
dbf40ef7599b824f9712074540fedfa15d3e948a,"Put .server.js at the end of bundle filenames (#20419)

* Put .server.js at the end of bundle filenames

* Client too",Dan Abramov,2020-12-09T22:47:17Z
03126dd087b285789447ab814ee7f3385e1c179d,"[Flight] Add read-only fs methods (#20412)

* Don't allocate the inner cache unnecessarily

We only need it when we're asking for text. I anticipate I'll want to avoid allocating it in other methods too when it's not strictly necessary.

* Add fs.access

* Add fs.lstat

* Add fs.stat

* Add fs.readdir

* Add fs.readlink

* Add fs.realpath

* Rename functions to disambiguate two caches",Dan Abramov,2020-12-09T21:46:50Z
b51a686a93b6670fc80ae21d1a649194b3b723b2,Turn on double effects for www test renderer (#20416),Brian Vaughn,2020-12-09T19:46:18Z
56a632adb657fe5b704125caabf29f0cc03b0b12,"Double Invoke Effects in __DEV__ (in old reconciler fork) (#20415)

We originally added a new DEV behavior of double-invoking effects during mount to our new reconciler fork in PRs #19523 and #19935 and later refined it to only affect modern roots in PR #20028. This PR adds that behavior to the old reconciler fork with a small twist– the behavior applies to StrictMode subtrees, regardless of the root type.

This commit also adds a few additional tests that weren't in the original commits.",Brian Vaughn,2020-12-09T19:18:26Z
1a242233758c32c771daaf3a09affa84b3cb5b51,fixed typo (#20351),togami2864,2020-12-09T14:26:12Z
a233c9e2aa121d6cb27f37115ace83fe81aaf349,Rename internal cache helpers (#20410),Dan Abramov,2020-12-09T02:57:14Z
6a4b12b81c4c855934985225f9f448f1b49a8a14,"[Flight] Add rudimentary FS binding (#20409)

* [Flight] Add rudimentary FS binding

* Throw for unsupported

* Don't mess with hidden class

* Use absolute path as the key

* Warn on relative and non-normalized paths",Dan Abramov,2020-12-09T02:37:29Z
7659949d6515e7895b8e67b2777bbfd2ef8d5163,"Clear `deletions` in `detachFiber` (#20401)

This was added in a later step of the refactor but since `deletions`
array already landed, clearing it should, too.

I think it's unlikely that this causes GC problems but worth
adding anyway.",Andrew Clark,2020-12-09T01:13:20Z
b9680aef7dfc180ab4d4a7957611ad024db7e8db,Cache react-fetch results in the Node version (#20407),Dan Abramov,2020-12-08T22:37:24Z
cdae31ab8ef1738d53cba20304311ad266d09445,Fix typo (#20279),inokawa,2020-12-08T15:40:35Z
51a7cfe210f2e2b3f7b9e06c7539bf46de5decb1,"Fix typo (#20300)

Signed-off-by: Hollow Man <hollowman@hollowman.ml>",Hollow Man,2020-12-08T15:40:23Z
373b297c5534f5ff741bb011baefec0f7e0d1cb5,"fix: Fix typo in react-reconciler docs (#20284)

peristent -> persistent",Sam Zhou,2020-12-08T15:40:05Z
1b5ca99063414146048886c632256cdd3002c5a0,Fix module ID deduplication (#20406),Dan Abramov,2020-12-08T13:19:59Z
5fd9db732dff1b99c096bffef9a565b594c788de,"[Flight] Rename react-transport-... packages to react-server-... (#20403)

* Move files

* Update paths

* Rename import variables

* Rename /server to /writer

This is mainly because ""React Server Server"" is weird so we need another
dimension.

* Use ""react-server"" convention to enforce that writer is only loaded in a server",Sebastian Markbåge,2020-12-08T13:08:57Z
ce40f1dc2f8e0869ae4b484e7248a449efba64c8,Use assets API + writeToDisk instead of directly writing to disk (#20402),Sebastian Markbåge,2020-12-08T01:54:28Z
0512cd6a261eb738059aac4769ea31e66aab2065,"Bump fixture dependency versions (#20397)

* Bump all versions

* Switch to CJS mode

* Revert ""Switch to CJS mode""

This reverts commit b3c4fd92dcef6ecb4116fc66f674ae88aad3c582.

* Fix ES mode

* Add nodemon to restart the server on edits

* Ignore /server/ from compilation",Dan Abramov,2020-12-08T01:23:49Z
b66ae09b6e9feba21aaea248da0e0c870193b597,"Track subtreeFlags et al with bubbleProperties

Original PR: #19836",Andrew Clark,2020-11-17T19:51:57Z
de75315d7ed388493f6d42fccd15ae3638adebe0,"Track deletions using an array on the parent

Adds back the `deletions` array and uses it in the commit phase.

We use a trick where the first time we hit a deletion effect, we commit
all the deletion effects that belong to that parent. This is an
incremental step away from using the effect list and toward a DFS +
subtreeFlags traversal.

This will help determine whether the regression is caused by, say,
pushing the same fiber into the deletions array multiple times.",Andrew Clark,2020-11-16T22:01:26Z
1377e465ddc492a1b4b33d75e652bce9b273cc85,"Add Placement bit without removing others (#20398)

When scheduling a Placement effect, we should add the Placement bit
without resetting the others.

In the old fork, there are no flags to reset, anyway, since by the
time we reach the child reconciler, the flags will have already been
reset.

However, in the effects refactor, ""static"" flags are not reset, so this
can actually manifest as a bug. See #20285 for a regression test.",Andrew Clark,2020-12-07T21:07:28Z
18d7574ae297a24d53fe418e9008e969c29ffba2,"Remove `catch` from Scheduler build (#20396)

Makes debugging errors harder.

In this case, we can use `finally` instead.",Andrew Clark,2020-12-07T19:10:53Z
30dfb860259dea126b3f43ab270ec51593824dd8,"[Flight] Basic scan of the file system to find Client modules (#20383)

* Basic scan of the file system to find Client modules

This does a rudimentary merge of the plugins. It still uses the global
scan and writes to file system.

Now the plugin accepts a search path or a list of referenced client files.
In prod, the best practice is to provide a list of files that are actually
referenced rather than including everything possibly reachable. Probably
in dev too since it's faster.

This is using the same convention as the upstream ContextModule - which
powers the require.context helpers.

* Add neo-async to dependencies",Sebastian Markbåge,2020-12-07T17:10:18Z
dd16b789907758fb3effb316361a63198ed8d49f,Tweaked DevTools build command slightly,Brian Vaughn,2020-12-07T15:10:43Z
4053c76b7d0fd230517ba26c71a9550ac3346c88,Add more DevTools tests for React.Lazy (#20380),Brian Vaughn,2020-12-06T14:10:15Z
0db61a08befe6406aa93568708224d1cca2aff7d,"Fix Flight Prod Fixture (#20382)

* Don't use async/await

Babel transpilation fails for some reason in prod.

* Set up production runner command

Uses python because meh. Just to show it's static.

* Use build folder in prod",Sebastian Markbåge,2020-12-05T02:00:57Z
3a8c04e3b234d8f54b35fa07796f4db8311bcbbd,React DevTools 4.10.0 -> 4.10.1,Brian Vaughn,2020-12-04T21:54:14Z
f160547f47cb271bff09c639a6dae8f1b169bc14,React DevTools 4.10.0 -> 4.10.1,Brian Vaughn,2020-12-04T21:43:13Z
9b8060041b4dec3388c448f909e3d6387edefa69,Error when the number of parameters to a query changes (#20379),Dan Abramov,2020-12-04T20:11:00Z
60e4a76fa872e429975e336827f8c0a51394110f,"[Flight] Add rudimentary PG binding (#20372)

* [Flight] Add rudimentary PG binding

* Use nested Maps for parameters

* Inline and fix Flow",Dan Abramov,2020-12-04T17:27:33Z
88ef95712d315705b2d6654f3c0d5c5ace4a6456,"Fork ReactFiberLane (#20371)

This wasn't forked previously because Lane and associated types are
opaque, and they leak into non-reconciler packages. So forking the type
would also require forking all those other packages.

But I really want to use the reconciler fork infra for lanes changes.
So I made them no longer opaque.

Another possible solution would be to add separate `new` and `old`
fields to the Fiber type, like I did when migrating from expiration
times. But that seems so excessive. This seems fine.

But we should still treat them like they're opaque and only do lanes
manipulation in the ReactFiberLane module. At least until the model
stabilizes more. We'll just need to enforce this with discipline
instead of with the type system.",Andrew Clark,2020-12-04T16:54:09Z
e9860d426f4036265f87eb5b1bd500df6b4e570f,fixed: typo in react-devtools/README.md Websocked -> Websocket (#20376),Arindam Pradhan,2020-12-04T14:59:17Z
41c5d00fc90734822e915a6a268a24c9726828a5,[Flight] Minimal webpack plugin (#20228),Dan Abramov,2020-12-03T21:21:19Z
e23673b511a2eab6ddcb848a4150105c954f289a,"[Flight] Add getCacheForType() to the dispatcher (#20315)

* Remove react/unstable_cache

We're probably going to make it available via the dispatcher. Let's remove this for now.

* Add readContext() to the dispatcher

On the server, it will be per-request.

On the client, there will be some way to shadow it.

For now, I provide it on the server, and throw on the client.

* Use readContext() from react-fetch

This makes it work on the server (but not on the client until we implement it there.)

Updated the test to use Server Components. Now it passes.

* Fixture: Add fetch from a Server Component

* readCache -> getCacheForType<T>

* Add React.unstable_getCacheForType

* Add a feature flag

* Fix Flow

* Add react-suspense-test-utils and port tests

* Remove extra Map lookup

* Unroll async/await because build system

* Add some error coverage and retry

* Add unstable_getCacheForType to Flight entry",Dan Abramov,2020-12-03T03:44:56Z
555eeae33de09a5cbbb0b71aba3c57d7bfac0513,"Add disableNativeComponentFrames flag (#20364)

## Summary

We're experiencing some issues internally where the component stack is
getting into our way of fixing them as it causes the page to become
unresponsive. This adds a flag so that we can disable this feature as a
temporary workaround.

More internal context: https://fburl.com/go9yoklm

## Test Plan

I tried to default this flag to `__VARIANT__` but the variant tests
(`yarn test-www --variant`) started to fail across the board since a lot
of tests depend on the component tree, things like this:

https://user-images.githubusercontent.com/458591/100771192-6a1e1c00-33fe-11eb-9ab0-8ff46ba378a2.png

So, it seems to work :-)

Given that it's unhandy to update the hundreds of tests that are failing
I decided to hard code this to `false` like we already do for some other
options.",Philipp Spiess,2020-12-02T15:25:55Z
148ffe3cfe7a2627bebfb1852f332a1d122b3103,Failing test for Client reconciliation (#20318),Dan Abramov,2020-12-01T16:40:12Z
ad6f3d5c55a79e8a44798aad36118e73de3a64f8,"Ignore node_modules when printing warnings (#20363)

This now finds acorn and fails to extract warnings from it. But also, this
seems slow.",Sebastian Markbåge,2020-12-01T16:01:16Z
a2a025537d5b4e1fd249c0a83217b04092527069,"Fixed invalid DevTools work tags (#20362)

* Fixed invalid DevTools work tags

Work tags changed recently (PR #13902) but we didn't bump React versions. This meant that DevTools has valid work tags only for master (and FB www sync) but invalid work tags for the latest open source releases. To fix this, I incremneted React's version in Git (without an actual release) and added a new fork to the work tags detection branch.

This commit also adds tags for the experimental Scope and Fundamental APIs to DevTools so component names will at least display correctly. Technically these new APIs were first introduced to experimental builds ~16.9 but I didn't add a new branch to the work tags fork because I don't they're used commonly. I've just added them to the 17+ branches.

* Removed FundamentalComponent from DevTools tag defs",Brian Vaughn,2020-12-01T15:33:32Z
5711811da17c62de7ba6c911dbc7f20f16bfc980,"Reconcile element types of lazy component yielding the same type (#20357)

* Reconcile element types of lazy component yielding the same type

* Add some legacy mode and suspense boundary flushing tests

* Fix infinite loop in legacy mode

In legacy mode we typically commit the suspending fiber and then rerender
the nearest boundary to render the fallback in a separate commit.

We can't do that when the boundary itself suspends because when we try to
do the second pass, it'll suspend again and infinite loop.

Interestingly the legacy semantics are not needed in this case because
they exist to let an existing partial render fully commit its partial state.

In this case there's no partial state, so we can just render the fallback
immediately instead.

* Check fast refresh compatibility first

resolveLazy can suspend and if it does, it can resuspend. Fast refresh
assumes that we don't resuspend. Instead it relies on updating the inner
component later.

* Use timers instead of act to force fallbacks to show",Sebastian Markbåge,2020-12-01T15:14:04Z
3f73dcee374732a331b7e72c88ff6dd3b7116a42,"Support named exports from client references (#20312)

* Rename ""name""->""filepath"" field on Webpack module references

This field name will get confused with the imported name or the module id.

* Switch back to transformSource instead of getSource

getSource would be more efficient in the cases where we don't need to read
the original file but we'll need to most of the time.

Even then, we can't return a JS file if we're trying to support non-JS
loader because it'll end up being transformed.

Similarly, we'll need to parse the file and we can't parse it before it's
transformed. So we need to chain with other loaders that know how.

* Add acorn dependency

This should be the version used by Webpack since we have a dependency on
Webpack anyway.

* Parse exported names of ESM modules

We need to statically resolve the names that a client component will
export so that we can export a module reference for each of the names.

For export * from, this gets tricky because we need to also load the
source of the next file to parse that. We don't know exactly how the
client is built so we guess it's somewhat default.

* Handle imported names one level deep in CommonJS using a Proxy

We use a proxy to see what property the server access and that will tell
us which property we'll want to import on the client.

* Add export name to module reference and Webpack map

To support named exports each name needs to be encoded as a separate
reference. It's possible with module splitting that different exports end
up in different chunks.

It's also possible that the export is renamed as part of minification.
So the map also includes a map from the original to the bundled name.

* Special case plain CJS requires and conditional imports using __esModule

This models if the server tries to import .default or a plain require.
We should replicate the same thing on the client when we load that
module reference.

* Dedupe acorn-related deps

Co-authored-by: Mateusz Burzyński <mateuszburzynski@gmail.com>",Sebastian Markbåge,2020-11-30T22:37:27Z
565148d7516f9f0c4d90a7f06ab479c79ad56c69,"Disallow *.server.js imports from any other files (#20309)

This convention ensures that you can declare that you intend for a file
to only be used on the server (even if it technically might resolve
on the client).",Sebastian Markbåge,2020-11-30T22:25:56Z
e6a0f276307fcb2f1c5bc41d630c5e4c9e95a037,"Profiler: Improve nested-update checks (#20299)

Previous checks were too naive when it comes to pending lower-pri work or batched updates. This commit adds two new (previously failing) tests and fixes.",Brian Vaughn,2020-11-20T19:46:45Z
2cf8f7f61c338928cdb1d4faebb5632da3a2b79d,"Speed up local ""build-for-detools"" target (#20307)",Brian Vaughn,2020-11-20T17:31:29Z
d93b58a5e38cf06998da628932029291cc605c2d,"Add flight specific entry point for react package (#20304)

This configures the Flight fixture to use the ""react-server"" environment.

This allows the package.json exports field to specify a different resolution
in this environment.

I use this in the ""react"" package to resolve to a new bundle that excludes
the Hooks that aren't relevant in this environment like useState and useEffect.

This allows us to error early if these names are imported. If we actually
published ESM, it would we a static error. Now it's a runtime error.

You can test this by importing useState in Container.js which is used
by the client and server.",Sebastian Markbåge,2020-11-20T16:47:13Z
89d4fe141a28b54807901126063249cab6483f89,Exclude fixtures from Flow config (#20302),Dan Abramov,2020-11-20T02:45:03Z
a81c02ac150233bdb5f31380d4135397fb8f4660,Profiler onNestedUpdateScheduled accepts id as first param (#20293),Brian Vaughn,2020-11-18T22:56:42Z
ac2cff4b10624b87b14333d9b7c5d41a51fac0ec,"Warn if commit phase error thrown in detached tree (#20286)

Until `skipUnmountedBoundaries` lands again, we need some way to detect
when errors are thrown inside a deleted tree. I've added a warning to
`captureCommitPhaseError` that fires when we reach the root of a subtree
without finding either a boundary or a HostRoot.

Even after `skipUnmountedBoundaries`  lands, this warning could be a
useful guard against internal bugs, like a bug in the
`skipUnmountedBoundaries` implementation itself.

In the meantime, do not add this warning to the allowlist; this is only
for our internal use. For this reason, I've also only added it to the
new fork, not the old one, to prevent this from accidentally leaking
into the open source build.",Andrew Clark,2020-11-18T17:23:39Z
0f83a64eda73e93135b2d30531b10427fccc4c05,"Regression test: Missing unmount after re-order (#20285)

Adds a regression test for a bug I found in the effects refactor.

The bug was that reordering a child that contains passive effects would
cause the child to ""forget"" that it contains passive effects. This is
because when a Placement effect is scheduled by the reconciler, it would
override all of the fiber's flags, including its ""static"" ones:

```
child.flags = Placement;
```

The problem is that we use a static flag to use a ""static"" flag to track
that a fiber contains passive effects.

So what happens is that when the tree is deleted, the unmount effect is
never fired.

In the new implementation, the fix is to add the Placement flag without
overriding the rest of the bitmask:

```
child.flags |= Placement;
```

(The old implementation doesn't need to be changed because it does not
use static flags for this purpose.)",Andrew Clark,2020-11-18T16:33:26Z
ebf158965f2b437515af0bed2b9e9af280e0ba3c,"Add best-effort documentation for third-party renderers (#20278)

* Add best-effort documentation for third-party renderers

* Update README.md

* Update README.md",Dan Abramov,2020-11-17T13:28:12Z
82e99e1b027636fd55937a3b5633064cbcb2ffe1,"Add Node ESM Loader and Register Entrypoints (#20274)

* Add Node ESM loader build

This adds a loader build as a first-class export. This will grow in
complexity so it deserves its own module.

* Add Node CommonJS regiter build

This adds a build as a first-class export for legacy CommonJS registration
in Node.js. This will grow in complexity so it deserves its own module.

* Simplify fixture a bit to easier show usage with or without esm

* Bump es version

We leave async function in here which are newer than ES2015.",Sebastian Markbåge,2020-11-17T04:46:27Z
bf7b7aeb1070f5184733ece11e67902d1ace85bd,"findDOMNode: Remove return pointer mutation (#20272)

The last step of the `findDOMNode` algorithm is a search of the
current tree.

When descending into a child node, it mutates `child.return` so that it
points to the current fiber pair, instead of a work-in-progress. This
can cause bugs if `findDOMNode` is called at the wrong time, like in
an interleaved event.

For this reason (among others), you're not suppposed to use
`findDOMNode` in Concurrent Mode. However, we still have some internal
uses that we haven't migrated.

To reduce the potential for bugs, I've removed the `.return` pointer
assignment in favor of recursion.",Andrew Clark,2020-11-16T23:09:53Z
369c3db6299506d9d1ab6628accc2c40827d1f1f,"Add separate ChildDeletion flag (#20264)

In the old, effect list implementation, the Deletion flag is is set on
each deleted fiber.

In the new, subtreeTag implementation, the Deletion flag is set on the
parent of each deleted fiber, and the deleted fibers themselves are
pushed to the `deletions` array.

To better distinguish between these two uses, I've added a separate
ChildDeletion flag. That way we can, if desired, maintain both
implementations simultaneously, as we bisect to find the performance
regression that we're currently investigating.",Andrew Clark,2020-11-16T15:13:39Z
765e89b908206fe62feb10240604db224f38de7d,"Reset new fork to old fork  (#20254)

* Fix typo

This typo was fixed in the new fork but not the old.

* Reset new fork to old fork

Something in the new fork is causing a topline metrics regression. We're
not sure what it is, so we're going to split it into steps and bisect.

As a first step, this resets the new fork back to the contents of the
old fork. We will land this to confirm that the fork infra itself is
not causing a regression.

* Fix tests: Add `dfsEffectsRefactor` flag

Some of the tests that gated on the effects refactor used the `new`
flag. In order to bisect, we'll need to decompose the new fork changes
into multiple steps.

So I added a hardcoded test flag called `dfsEffectsRefactor` and set it
to false. Will turn back on when we switch back to traversing the
finished tree using DFS and `subtreeTag`.",Andrew Clark,2020-11-13T19:54:33Z
7548dd573edae9444e2f3c8c15691c5caefdc3c1,"Properly reset Profiler nested-update flag (#20253)

Previously this flag was not being reset correctly if a concurrent update followed a nested (sync) update. This PR fixes the behavior and adds a regression test.",Brian Vaughn,2020-11-13T19:29:06Z
bd8bc5afce51a95b7223b5ae57960d2d001fbafa,"Add --reverse option to replace-fork script (#20249)

When enabled, replaces new fork with old fork.

I've done this several times by manually editing the script file, so
seems useful enough to add an option.",Andrew Clark,2020-11-13T19:09:02Z
453df3ff72dae3ebd1e1dcd6f965c4f251b0553c,"Autofix imports when running replace-fork (#20251)

* Pass extra CLI args through to ESLint

These now work:

```
yarn run lint --fix
yarn run linc --fix
```

* Autofix imports when running replace-fork

We have a custom ESLint rule that can autofix cross-fork imports.

Usually, after running the `replace-fork` script, you need to run
`yarn lint --fix` to fix the imports.

This combines the two steps into one.",Andrew Clark,2020-11-13T19:01:25Z
73bf2d68efc363810209bb3c35768793b1e40ecb,"Pass extra CLI args through to ESLint (#20250)

These now work:

```
yarn run lint --fix
yarn run linc --fix
```",Andrew Clark,2020-11-13T19:00:45Z
b44e4b13a99901281ee02f66930fbc24181993d2,"Check for deletions in `hadNoMutationsEffects` (#20252)

When detecting if a host tree was changed, we must check for deletions
in addition to mounts and updates.",Andrew Clark,2020-11-13T18:45:46Z
3ebf05183dfcb8eadfc41a9e19559d835fd9b77e,"Add new effect fields to old fork, and vice versa (#20246)

* Add new effect fields to old fork

So that when comparing relative performance, we don't penalize the new
fork for using more memory.

* Add firstEffect, et al fields to new fork

We need to bisect the changes to the recent commit phase refactor. To
do this, we'll need to add back the effect list temporarily.

This only adds them to the Fiber type so that the memory is the same
as the old fork.",Andrew Clark,2020-11-13T16:09:48Z
2fbcc98066667848a0eb103e7f0afa540cbb475b,"Remove cycle between ReactFiberHooks and ReactInternalTypes (#20242)

Co-authored-by: Paul Doyle <pauldoyle22@gmail.com>",Paul Doyle,2020-11-13T14:18:24Z
504222dcd21c7ac43eb78df11226bab47ec03bb0,"Add Node ESM build option (#20243)

This allows exporting ESM modules for the Webpack plugin. This is necessary
for making a resolver plugin. We could probably make the whole plugin
use ESM instead of CJS ES2015.",Sebastian Markbåge,2020-11-13T13:57:45Z
1b96ee444e544cc4797bbbd8dee249ff02d62279,"Remove noinline directives from new commit phase (#20241)

My theory for too much inlining contributing to overall stack size is
likely flawed, because Closure reuses variables within a function to
optimize registers.

Even if my theory were correct, the impact would be minimal anyway
because the recursive implementation of the commit phase traversals is
behind a disabled feature flag.

Going to revert this. We can maybe test the impact once we land the
commit phase changes. In the meantime, I'd prefer to eliminate this
delta from the new fork.",Andrew Clark,2020-11-12T18:21:56Z
e41fd1fc0605dde41cff53e01039633c8e852b6d,"Support ESM module loaders in Flight fixture (#20229)

This lets the Flight fixture run as ""type"": ""module"" or ""commonjs"".

Experimental loaders can be used similar to require.extensions to do the
transpilation and replacement of .client.js references.",Sebastian Markbåge,2020-11-12T16:11:05Z
760d9ab57a0fbffe8caf1d15c40efaa0a3592733,Scheduling profiler tweaks (#20215),Brian Vaughn,2020-11-12T14:47:04Z
9403c3b536f510fc54a16607bb211f630c71b55f,"Add Profiler callback when nested updates are scheduled (#20211)

This callback accepts the no parameters (except for the current interactions). Users of this hook can inspect the call stack to access and log the source location of the component.",Brian Vaughn,2020-11-12T14:31:27Z
11a2ae3a0d9ef5f6b54c1d2b8c2da52d2392ae01,DevTools 4.9.0 -> 4.10.0,Brian Vaughn,2020-11-12T14:07:10Z
62efd9618b5027816cf7f8b54f5fc80b3d7af8ec,use-subscription@1.5.1,Dan Abramov,2020-11-12T00:36:00Z
e7006d67dff2b9d3a9545204a469f32c70d52a8b,Widen peer dependency range of use-subscription (#20225),Billy Janitsch,2020-11-12T00:30:19Z
15df051c94533c70b065d51c41cf9b6b2f1dc6a6,"Add warning if return pointer is inconsistent (#20219)

Bugs caused by inconsistent return pointers are tricky to diagnose
because the source of the error is often in a different part of the
codebase from the actual mistake. For example, you might forget to set a
return pointer during the render phase, which later causes a crash in
the commit phase.

This adds a dev-only invariant to the commit phase to check for
inconsistencies. With this in place, we'll hopefully catch return
pointer errors quickly during local development, when we have the most
context for what might have caused it.",Andrew Clark,2020-11-11T15:06:37Z
9aca239f11f31109dc1a229aa1571c2bf02f5524,"Improved dev experience when DevTools hook is disabled (#20208)

Co-authored-by: Brian Vaughn <brian.david.vaughn@gmail.com>",Alphabet Codes,2020-11-11T14:36:51Z
12627f93b5357032881412abcc014da53a0b70f8,"Perform hasOwnProperty check in Relay Flight (#20220)

We simulate JSON.stringify in this loop so we should do a has own check.
Otherwise we'll include things like constructor properties.

This will actually make things throw less even when it should.",Sebastian Markbåge,2020-11-11T03:59:46Z
163199d8cc99309e765c85e93c6b9dd1f22c2974,Dedupe module id generation (#20172),Sebastian Markbåge,2020-11-11T03:58:58Z
76a6dbcb9ad93cf1e18606cb9280a1afc206b153,"[Flight] Encode Symbols as special rows that can be referenced by models … (#20171)

* Encode Symbols as special rows that can be referenced by models

If a symbol was extracted from Symbol.for(...) then we can reliably
recreate the same symbol on the client.

S123:""react.suspense""
M456:{mySymbol: '$123'}

This doesn't suffer from the XSS problem because you have to write actual
code to create one of these symbols. That problem is only a problem because
values pass through common other usages of JSON which are not secure.

Since React encodes its built-ins as symbols, we can now use them as long
as its props are serializable. Like Suspense.

* Refactor resolution to avoid memo hack

Going through createElement isn't quite equivalent for ref and key in props.

* Reuse symbol ids that have already been written earlier in the stream",Sebastian Markbåge,2020-11-11T03:56:50Z
35e53b4653fdfb9c1712ce4c07037f5f276b4e91,"[Flight] Simplify Relay row protocol (#20168)

* Simplify Relay protocol integration

* Encode Relay rows as tuples instead of objects

This is slightly more compact and more ressembles more closely the encoding
we use for the raw stream protocol.",Sebastian Markbåge,2020-11-11T03:54:42Z
16e6dadba67a49b4a12271a6c80fab48a4e1a2d4,"Encode throwing server components as lazy throwing references (#20217)

This ensures that if this server component was the child of a client
component that has an error boundary, it doesn't trigger the error until
this gets rendered so it happens as deep as possible.",Sebastian Markbåge,2020-11-11T00:35:27Z
e855f91e858d36758b8a67c8bd910c0971131451,"[Flight] Expand the fixture to use require.extensions (#20209)

* Expand fixture

Use .server convention. /server/index.js should really change too so it can be compiled but for now we treat it as bootstrapping code outside the compiled code.

Move App.server. It's part of the application code rather than the infra.

Add hybrid component used in both server/client and an extra component shared by multiple entry points.

* Use require.extensions to replace .client imports

The simplest server doesn't need AOT compilation. Instead we can just
configure require.extensions. This is probably not the best idea to use
in prod but is enough to show the set up.",Sebastian Markbåge,2020-11-10T20:48:51Z
c896cf9617626be54f4ef599578e6f8a3a874205,"Set return pointer when reusing current tree (#20212)

* Do not fix return pointers during commit phase

In the commit phase, we should be able to assume that the `return`
pointers in the just-completed tree are consistent. The render phase
should be responsible for ensuring these are always correct.

I've removed the `return` pointer assignments from the render phase
traversal logic. This isn't all of them, only the ones added recently
during the effects refactor. The other ones have been around longer so
I'll leave those for a later clean up.

This breaks a few SuspenseList tests; I'll fix in the next commit.

* Set return pointer when reusing current tree

We always set the return pointer on freshly cloned, work-in-progress
fibers. However, we were neglecting to set them on trees that are reused
from current.

I fixed this in the same path of the complete phase where we reset the
fiber flags.

This is a code smell because it assumes the commit phase is never
concurrent with the render phase. Our eventual goal is to make fibers a
lock free data structure.

Will address further during refactor to alternate model.",Andrew Clark,2020-11-10T19:20:04Z
08986601546f69ba2c3107b472862cf2cb30d2ce,"Add version of scheduler that only swaps MessageChannel for postTask (#20206)

* Fork SchedulerDOM to SchedulerPostTaskOnly

* Swap in postTask for MessageChannel

* Add SchedulerPostTaskOnly-test.js

* Update getCurrentTime

* Gate tests to source

* Prettier",Ricky,2020-11-10T17:11:46Z
393c452e39a72932af734c7c25998b48a20698f7,"Add ""nested-update"" phase to Profiler API (#20163)

Background:
State updates that are scheduled in a layout effect (useLayoutEffect or componentDidMount / componentDidUpdate) get processed synchronously by React before it yields to the browser to paint. This is done so that components can adjust their layout (e.g. position and size a tooltip) without any visible shifting being seen by users. This type of update is often called a ""nested update"" or a ""cascading update"".

Because they delay paint, nested updates are considered expensive and should be avoided when possible. For example, effects that do not impact layout (e.g. adding event handlers, logging impressions) can be safely deferred to the passive effect phase by using useEffect instead.

This PR updates the Profiler API to explicitly flag nested updates so they can be monitored for and avoided when possible.

Implementation:
I considered a few approaches for this.

Add a new callback (e.g. onNestedUpdateScheduled) to the Profiler that gets called when a nested updates gets scheduled.
Add an additional boolean parameter to the end of existing callbacks (e.g. wasNestedUpdate).
Update the phase param to add an additional variant: ""mount"", ""update"", or ""nested-update"" (new).
I think the third option makes for the best API so that's what I've implemented in this PR.

Because the Profiler API is stable, this change will need to remain behind a feature flag until v18. I've turned the feature flag on for Facebook builds though after confirming that Web Speed does not currently make use of the phase parameter.

Quirks:
One quirk about the implementation I've chosen is that errors thrown during the layout phase are also reported as nested updates. I believe this is appropriate since these errors get processed synchronously and block paint. Errors thrown during render or from within passive effects are not affected by this change.",Brian Vaughn,2020-11-10T14:40:30Z
93c3dc54b66166fd5df7d081a9b2c2ca76a2af00,react-devtools-inline: Remove css-sourcemap's when bundling for dist (#20170),Sean Keenan,2020-11-10T13:47:39Z
13a62feab8c39bc0292eb36d636af0bb4f3a78df,Fix path for SchedulerFeatureFlags (#20200),Ricky,2020-11-09T16:22:59Z
7a73d6a0f9ad43a6dce145e3cc47e88cc59fbbd7,"(Temporarily) revert unmounting error boundaries changes (#20147)

This reverts commits bcca5a6ca78b33504e0a328c411b043261e7e303 and ffb749c95e0361b3cfbbfc4e1a73bfa2fda0aa93, although neither revert cleanly since methods have been moved between the work-loop and commit-work files. This commit is a mostly manual effort of undoing the changes.",Brian Vaughn,2020-11-09T15:14:24Z
fc06cf8d3509329eba61a1f1f0b6f5c466f32bcc,Fix typo (#20188),inokawa,2020-11-09T14:17:40Z
c29710a570f01736a24d66af7b14edf3deef7f68,fix: useImperativeMethods to useImperativeHandle (#20194),Jack Works,2020-11-08T19:59:53Z
6b28eb6175e5251b31507749b79c55c0e389b6ef,"Add workspaces hash to yarn cache key (#20154)

* Add branch to yarn cache key

* Add checksum check for workspace info

* Fix yaml

* Try moving the command

* How about here

* Just inline it

* i hate it here

* try reverting back

* Add run

* idk

* try inlining the command everywhere

* Create workspace_info.txt when we create the cache

* Delete the timestamp",Ricky,2020-11-03T20:02:06Z
31d096605c31d58361cfe97bb02dac1a5a34959f,typo fix in comment (#20153),Deniz Susman,2020-11-03T14:57:56Z
2af07d3f4d3b5bf5d34b66d1bd64c9b521713125,[Flight Fixture] Server + Client Components (#20150),Dan Abramov,2020-11-03T03:00:23Z
c3e20f18fe37993ddcbf11dccb55663b4c0d02fd,"Add Relay specific React Native build of Flight (#20149)

This adds a new dimension similar to dom-relay. It's different from
""native"" which would be Flight for RN without Relay.

This has some copy-pasta that's the same between the two Relay builds but
the key difference will be Metro and we're not quite sure what other
differences there will be yet.",Sebastian Markbåge,2020-11-03T02:49:48Z
454c2211c09bfa2fd5475c25665f3bbeb6882841,"Refactor SchedulerHostConfigs (#20025)

* Remove SchedulerHostConfigs

* Fix builds

* Fix forks

* Move SchedulerNoDom check to npm/index.js

* Fix tests

* Add @gate source

* Gate build-only test to build test runs",Ricky,2020-11-02T17:46:58Z
56e9feead0f91075ba0a4f725c9e4e343bca1c67,"Remove Blocks (#20138)

* Remove Blocks

* Remove Flight Server Runtime

There's no need for this now that the JSResource is part of the bundler
protocol. Might need something for Webpack plugin specifically later.

* Devtools",Sebastian Markbåge,2020-10-31T06:03:45Z
3fbd47b86285b6b7bdeab66d29c85951a84d4525,"Serialize pending server components by reference (lazy component) (#20137)

This now means that if a server component suspends, its value becomes a
React.lazy object. I.e. the element that rendered the server component
gets replaced with a lazy node.

As of #19033 lazy objects can be rendered in the node position. This allows
us to suspend at the location of the server component while we're waiting
on its content.

Now server components has the same capabilities as Blocks to progressively
reveal its content.",Sebastian Markbåge,2020-10-31T00:19:46Z
930ce7c15a50a8d67f24a0bd85ec0937bc84afd6,"Allow values to be encoded by ""reference"" to a value rather than the value itself (#20136)

These references are currently transformed into React.lazy values. We can use these in
React positions like element type or node position.

This could be expanded to a more general concept like Suspensey Promises, asset references or JSResourceReferences.

For now it's only used in React Element type position.

The purpose of these is to let you suspend deeper in the tree.",Sebastian Markbåge,2020-10-30T20:02:03Z
39eb6d1765cad681dc78b8955c39ed819064e7b4,Rename (#20134),Sebastian Markbåge,2020-10-30T01:58:32Z
ffd84233568fd9d277eaba7c01d53d516f6f132f,"[Flight] Add support for Module References in transport protocol (#20121)

* Refactor Flight to require a module reference to be brand checked

This exposes a host environment (bundler) specific hook to check if an
object is a module reference. This will be used so that they can be passed
directly into Flight without needing additional wrapper objects.

* Emit module references as a special type of value

We already have JSON and errors as special types of ""rows"". This encodes
module references as a special type of row value. This was always the
intention because it allows those values to be emitted first in the stream
so that as a large models stream down, we can start preloading as early
as possible.

We preload the module when they resolve but we lazily require them as they
are referenced.

* Emit module references where ever they occur

This emits module references where ever they occur. In blocks or even
directly in elements.

* Don't special case the root row

I originally did this so that a simple stream is also just plain JSON.

However, since we might want to emit things like modules before the root
module in the stream, this gets unnecessarily complicated. We could add
this back as a special case if it's the first byte written but meh.

* Update the protocol

* Add test for using a module reference as a client component

* Relax element type check

Since Flight now accepts a module reference as returned by any bundler
system, depending on the renderer running. We need to drastically relax
the check to include all of them. We can add more as we discover them.

* Move flow annotation

Seems like our compiler is not happy with stripping this.

* Some bookkeeping bug

* Can't use the private field to check",Sebastian Markbåge,2020-10-30T00:57:31Z
343d7a4a7eb621a31ba946309b557e0988be3a63,"Fast Refresh: Don't block DevTools commit hook (#20129)

In some scenarios (either timing dependent, or pre-FR compatible React versions) FR blocked calling the React DevTools commit hook. This PR adds a test and a fix for that.",Brian Vaughn,2020-10-29T17:23:57Z
b6a750be3ca0fc4126ef018e205c951b890c1881,Make DevTools Websocket retry delay configurable (#20107),Brian Vaughn,2020-10-29T02:08:47Z
779a472b0901b2d28e382f3850b2ad09a555b014,"Prevent inlining into recursive commit functions (#20105)

Adds a bunch of no-inline directives to commit phase functions to
prevent them from being inlined into one of our recursive algorithms.

The motivation is to minimize the number of variables in the recursive
functions, since each one contributes to the size of the stack frame.

Theoretically, this could help the performance of both the recursive
and non-recursive (iterative) implementations of the commit phase,
since even the iterative implementation sometimes uses the JS stack.",Andrew Clark,2020-10-27T19:51:34Z
25b18d31c8b7ffd256416672dc21c50dd22ac3dc,"Traverse commit phase effects iteratively (#20094)

* Move traversal logic to ReactFiberCommitWork

The current traversal logic is spread between ReactFiberWorkLoop and
ReactFiberCommitWork, and it's a bit awkward, especially when
refactoring. Idk the ideal module structure, so for now I'd rather keep
it all in one file.

* Traverse commit phase effects iteratively

We suspect that using the JS stack to traverse through the tree in the
commit phase is slower than traversing iteratively.

I've kept the recursive implementation behind a flag, both so we have
the option to run an experiment comparing the two, and so we can revert
it easily later if needed.",Andrew Clark,2020-10-27T19:02:19Z
06a4615be28bc34f53ce1d9523995c83106b07e7,"Allow Node 15.x (#20108)

Co-authored-by: Justus Hämäläinen <me@justushamalainen.fi>",Justus Hämäläinen,2020-10-27T15:16:16Z
4e5d7faf54b38ebfc7a2dcadbd09a25d6f330ac0,Fix error loading source maps for devtools extension (#20079),Sy Tran Dung,2020-10-22T15:26:24Z
3314115cb484af42e7090180503ea9850aaa1e1a,"Overly eager update-notifier usage in react-devtools (#20078)

Co-authored-by: abhyuday <abhyuday@miqdigital.com>",Abhyuday Bharat,2020-10-22T12:52:14Z
eaaf4cbce76db03850401fa6a2dcb9cabbcdf3c3,17.0.1,Dan Abramov,2020-10-22T12:24:46Z
928a819a28b1c7867f891d20e4b4373ab39b8b74,"Use react-shallow-renderer@16.14.1 in yarn.lock (#20072)

This ensures that tests are run against the latest published version. This
merely updates the version in `yarn.lock` and not in `react-test-renderer`'s
`package.json` to avoid having to cut another release of `react-test-renderer`.",Minh Nguyen,2020-10-21T12:37:34Z
6f62abb58ae46d9c88525635f1790487285666e6,Remove usage of Array#fill (#20071),Dan Abramov,2020-10-21T12:17:44Z
40cfe1f486a6f3901f98e7856cb7974690f311e9,Update CHANGELOG.md,Dan Abramov,2020-10-21T00:15:28Z
a50f638b064f109c33d3189f9ed6419e700de0f8,Link to the blog post,Dan Abramov,2020-10-20T20:51:41Z
f021a983aa46ea56c5092a55f8002a96c239fc1b,Bump versions for 17 (#20062),Dan Abramov,2020-10-20T20:41:18Z
46ed2684718d160b06cf6e4f5f5ecf70c7b8974c,Add React 17 changelog,Dan Abramov,2020-10-20T20:22:00Z
d1bb4d851f4956cb64ad0ae1867153c23409f971,Profiler: Include ref callbacks in onCommit duration (#20060),Brian Vaughn,2020-10-20T18:35:57Z
c59c3dfe554dafb64864f3bbcfff6ffe51f32275,"useRef: Warn about reading or writing mutable values during render (#18545)

Reading or writing a ref value during render is only safe if you are implementing the lazy initialization pattern.

Other types of reading are unsafe as the ref is a mutable source.

Other types of writing are unsafe as they are effectively side effects.

This change also refactors useTransition to no longer use a ref hook, but instead manage its own (stable) hook state.",Brian Vaughn,2020-10-19T20:05:00Z
75726fadfd4ab063390805bf5baab966c8523d2c,DevTools fix props editing for host components (#20055),Brian Vaughn,2020-10-19T19:21:41Z
51a3aa6afbfd9f239f3a435ff12a2da5870ab925,DevTools 4.8.2 -> 4.9.0 bump,Brian Vaughn,2020-10-19T15:20:54Z
7b6cac95229be79f4f7504f2ccd87d2a0a0f87e2,"Improved Profiler commit hooks test (#20053)

Previously the tests didn't ensure that time spent during cascading render was not included in duration reported by commit hooks.",Brian Vaughn,2020-10-19T13:36:00Z
dfb6a403357d5ac2c0ea87aa6e5a4f947de342f8,[Fast Refresh] Fix crashes caused by rogue Proxies (#20030) (#20039),Kai Riemann,2020-10-17T16:47:52Z
37cb732c59863297e48f69ac1f6e2ba1aa1886f0,"Use bitwise OR to define flag masks (#20044)

Easier to read, harder to mess up. These expressions get simplified by
Closure, so there's no runtime impact.",Andrew Clark,2020-10-16T20:30:35Z
eb3181e7722905933da3b53ebff05339f12a3ba6,"Add Visibility flag for hiding/unhiding trees (#20043)

* Add Visibility flag for hiding/unhiding trees

There's `beforeblur` logic in the snapshot phase that needs to visit
every Suspense boundary whose visibility is toggled. Right now it does
that by visiting Placement and Deletion effects. That includes many
unrelated nodes.

By adding a new flag specifically for toggling Visibility, we will only
visit the relevant Suspense (and Offscreen) boundaries, instead of all
nodes that have a Placement.

Potential follow-ups (not urgent):

- The `beforeblur` logic also has a check to see whether the visibility
was toggled on or off. It only cares about things being hidden. As a
follow up, I can split the Visibility flag into separate Hide/Show
flags, and only visit Hide.
- Now that this is separate from Update, we can move the rest of the
Suspense's layout effects (like attaching retry listeners) to the
passive phase.

* Gate behind createEventHandle feature flag

Only need to visit deleted and hidden trees during the snapshot phase
if the experimental `createEventHandle` flag is enabled. Currently,
it's only used internally at Facebook, not open source.",Andrew Clark,2020-10-16T16:49:07Z
0dd809bdfad2c2d714e369bb7f0082ce3ac34f9c,"Remove last schedulePassiveEffectCallback call (#20042)

Now there's only a single place where the passive effect callback
is scheduled.",Andrew Clark,2020-10-16T16:06:55Z
e9f5ad2584ddb0d42a96045c9b23d0b4d9311331,"Remove Set bookkeeping for root events (#19990)

* Remove dead code branch

This function is only called when initializing roots/containers (where we skip non-delegated events) and in the createEventHandle path for non-DOM nodes (where we never hit this path because targetElement is null).

* Move related functions close to each other

* Fork listenToNativeEvent for createEventHandle

It doesn't need all of the logic that's needed for normal event path.

And the normal codepath doesn't use the last two arguments.

* Expand test coverage for non-delegated events

This changes a test to fail if we removed the event handler Sets. Previously, we didn't cover that.

* Add DEV-level check that top-level events and non-delegated events do not overlap

This makes us confident that they're mutually exclusive and there is no duplication between them.

* Add a test verifying selectionchange deduplication

This is why we still need the Set bookkeeping. Adding a test for it.

* Remove Set bookkeeping for root events

Root events don't intersect with non-delegated bubbled events (so no need to deduplicate there). They also don't intersect with createEventHandle non-managed events (because those don't go on the DOM elements). So we can remove the bookeeping because we already have code ensuring the eager subscriptions only run once per element.

I've moved the selectionchange special case outside, and added document-level deduplication for it alone.

Technically this might change the behavior of createEventHandle with selectionchange on the document, but we're not using that, and I'm not sure that behavior makes sense anyway.

* Flow",Dan Abramov,2020-10-16T15:49:41Z
b093528650db32b0112eb3adfcf9867e5f3b56d0,"test: Add regression test for hooks after error boundaries (#20002)

* test: Add regression test for hooks after error boundaries

* fix lint",Sebastian Silbermann,2020-10-16T15:07:27Z
f668b6c351c2654fef43e5f1ec24fd72a899d219,"Bump to latest eslint-config-fbjs (#20029)

* bump package to latest

* update files to respect lint

* disable object-type-delimiter rule to work with prettier

* disable rule to let flow check pass",oltrep,2020-10-16T15:06:08Z
8df7b7911aa7fc3a896fb29da29e09f574e931aa,"Remove Passive flag from ""before mutation"" phase (#20038)

We don't need to visit passive effect nodes during before mutation.

The only reason we were previously was to schedule the root-level
passive effect callback as early as possible, but now that
`subtreeFlags` exists, we can check that instead.

This should reduce the amount of traversal during the commit phase,
particularly when mounting or updating large trees that contain many
passive effects.",Andrew Clark,2020-10-16T13:21:58Z
2eb3181eb4247077eafc4df98d06d7a999ecf5d8,"fixed unfound node error when Suspense is filtered (#20019)

* fixed unfound node error when Suspense is filtered

* added a test for filtered Suspense node",IDrissAitHafid,2020-10-15T18:45:23Z
c57fe4a2c1402acdbf31ac48cfc6a6bf336c4067,"ReactIs.isValidElementType Unit Test extended with PureComponent case (#20033)

Co-authored-by: Adam Plocieniak <adam.plocieniak@allegro.pl>",adasq,2020-10-15T12:48:28Z
02da938fd51f6345ca185d571ea6628189ae81a7,"Don't double-invoke effects in legacy roots (#20028)

Large legacy applications are likely to be difficult to update to handle this feature, and it wouldn't add any value– since newer APIs that require this resilience are not legacy compatible.",Brian Vaughn,2020-10-15T12:40:12Z
d95c4938df670a8f0a13267bd89173737bb185e4,[EventSystem] Revise onBeforeBlur propagation mechanics (#20020),Dominic Gannaway,2020-10-14T22:38:57Z
b5eabd543f4a6c9d950f1bb5ec73da5a1c7c5caa,"Update changelog for 16.14, 15.7, 0.14.10 (#20027)",Dan Abramov,2020-10-14T19:52:37Z
020d3aa4e8df4455274b79b29e2452ae7f430ec0,"chore: downgrade source-map-support for stack ""fix"" (#20026)

* chore: downgrade source-map-support for stack ""fix""

* lint?",Simen Bekkhus,2020-10-14T19:45:54Z
4eb589169c83ba9d5cf4ecb2cf07c1f1576bba32,"DevTools: Handle restricted browser pages properly like new tab page, extensions page etc(only chrome and edge for now) (#20023)",Saikat Guha,2020-10-14T17:59:05Z
6d50a9d090a2a672fc3dea5ce77a3a05332a6caa,"Fixture: Legacy JSX Runtimes (#20012)

* Fixture: Legacy JSX Runtimes

* Add more comments",Dan Abramov,2020-10-14T17:28:03Z
f75f8b48a2ab14e31712389f91750c58de18c378,"DevTools always overrides the dispatcher when shallow rendering (#20011)

This is done so that any effects scheduled by the shallow render are thrown away.

Unlike the code this was forked from (in ReactComponentStackFrame) DevTools should override the dispatcher even when DevTools is compiled in production mode, because the app itself may be in development mode and log errors/warnings.",Brian Vaughn,2020-10-14T17:19:47Z
880587366d84f9d36dd606088bc7bad050ead77e,"Deprecate old test script commands (#19893)

* Deprecate old test script commands

* Update PR template test script

* Add test-stable and test-www-classic

* Update circle test names

* Rename test-www-classic to test-classic

* Missed some job renames

* Missed some more job renames",Ricky,2020-10-14T12:54:34Z
e614e6965749c096c9db0e6ad2844a2803ebdcb6,"handled a missing suspense fiber when suspense is filtered on the profiler (#19987)

Co-authored-by: Brian Vaughn <bvaughn@fb.com>",IDrissAitHafid,2020-10-13T17:38:58Z
7559722a865e89992f75ff38c1015a865660c3cd,Fix bad null check in DevTools highlight code (#20010),Brian Vaughn,2020-10-13T17:08:12Z
7e405d458d6481fb1c04dfca6afab0651e6f67cd,"[DevTools] Add DevTools forked Feature flags (#18994)

Also resolve an uncaught error in extension build (#18843).

Co-authored-by: Brian Vaughn <brian.david.vaughn@gmail.com>
Co-authored-by: Brian Vaughn <bvaughn@fb.com>",Nick Reiley,2020-10-12T17:07:10Z
48907797294340b6d5d8fecfbcf97edf0691888d,"Updated OVERVIEW.md to the new infos required when adding a new leaf node to the tree (#19981)

Co-authored-by: Idriss AITHAFID <Idriss.AITHAFID@um6p.ma>",IDrissAitHafid,2020-10-09T13:29:30Z
f46a80ae11ce606e5dc148f9399bef7c60a755a2,"Update outdated links and fix two broken links  (#19985)

* update all facebook.github.io links

* facebookincubator links : update some outdated links and fix two other broken links where they are actually the latest updated ones",Saikat Guha,2020-10-09T01:56:30Z
0a4c7c565146222a2b701455ba2d66540063b98d,"[Flight] Don't warn for key, but error for ref (#19986)

* Improve error message by expanding the object in question

* Don't warn for key/ref getters

* Error if refs are passed in server components or to client components",Sebastian Markbåge,2020-10-09T00:02:23Z
993ca533b42756811731f6b7791ae06a35ee6b4d,Enable eager listeners statically (#19983),Dan Abramov,2020-10-08T18:32:28Z
40c52de96043f56430d464a62635014f0e8dd900,"[Flight] Add Runtime Errors for Non-serializable Values (#19980)

* Error on encoding non-serializable props

* Add DEV time warnings to enforce that values are plain objects",Sebastian Markbåge,2020-10-08T18:11:15Z
6eca8eff08e293229c2ff957f175573faf994fc0,"updating the informations needed when adding a root node to a tree in react-devtools overview doc (#19979)

Co-authored-by: Idriss AITHAFID <Idriss.AITHAFID@um6p.ma>",IDrissAitHafid,2020-10-08T12:46:15Z
4ead6b53057ee6c6129a6d2f6e264232130b1fce,"Treat <time> tag as a normal HTML tag. (#19951)

<time> tag has been supported by Chrome since Chrome 62.0.
Remove workarounds which were in place to avoid friction with
versions before Chrome 62.

Signed-off-by: Shivam Sandbhor <shivam.sandbhor@gmail.com>",Shivam Sandbhor,2020-10-06T02:15:32Z
1992d973068d031083f507558d89ad91c0015709,"Revert ""Temporarily disable Profiler commit hooks flag (#19900)"" (#19960)",Brian Vaughn,2020-10-05T19:49:52Z
44d39c4d76c4ea4b26a2160ae6ba861babfb2b14,"Removed skip-error-boundaries modifications from old fork (#19961)

Technically this change is unnecessary, since the feature is controlled by a flag, but since we decided not to ship this in v17– I'm going to remove it for now entirely.",Brian Vaughn,2020-10-05T19:49:44Z
461cd84944c28a5715a16a19f2503c87068832d6,"Revert ""DevTools: Improve browser extension iframe support (#19854)"" (#19959)

This reverts commit a99bf5c5f4840c558f5e5923fcbe4ad6cb8ade98.",Brian Vaughn,2020-10-05T13:44:08Z
cc77be957e502ca6b855f1600d7fd11748dceb18,Remove unnecessary error overriding in (#19949),Paul Doyle,2020-10-02T21:10:46Z
97625272abe1fecc8ffba469795803ca8cfff9a7,Debug tracing tests for CPU bound suspense (#19943),Brian Vaughn,2020-10-01T16:02:26Z
43363e2795393a00fd77312a16d6b80e626c29de,Fix codestyle for typeof comparison (#19928),Eugene Maslovich,2020-10-01T15:26:49Z
8657ad4278334a072dc88ce8bb0ea4090fd944e2,"Fix(React DevTools) - prevent phishing attacks (#19934)

When a link opens a URL in a new tab with target=""_blank"", it is very simple for the opened page to change the location of the original page because the JavaScript variable window.opener is not null and thus ""window.opener.location can be set by the opened page. This exposes the user to very simple phishing attacks.",John Wilson,2020-10-01T15:25:38Z
91d2b6ef0189797dfc8f1dc6a89bc26fb2911b78,"DevTools: Remove ReactJS.org version check ""cheat"" (#19939)


Remove dead code as facebook.github.io/react always redirects to reactjs.org, which has prod version of react. so removing the ""cheat"" (#19939)",Saikat Guha,2020-10-01T14:16:50Z
5427b4657b3c23e2ab73b4ab906147c5c7927adf,"Temporarily disable Profiler commit hooks flag (#19900)


Temporarily disable Profiler commit hooks flag to verify it does not cause a regression.",Brian Vaughn,2020-09-30T19:58:20Z
1faf9e3dd5d6492f3607d5c721055819e4106bc6,"Suspense for CPU-bound trees (#19936)

Adds a new prop to the Suspense component type,
`unstable_expectedLoadTime`. The presence of this prop indicates that
the content is computationally expensive to render.

During the initial mount, React will skip over expensive trees by
rendering a placeholder — just like we do with trees that are waiting
for data to resolve. That will help unblock the initial skeleton for the
new screen. Then we will continue rendering in the next commit.

For now, while we experiment with the API internally, any number passed
to `unstable_expectedLoadTime` will be treated as ""computationally
expensive"", no matter how large or small. So it's basically a boolean.
The reason it's a number is that, in the future, we may try to be clever
with this additional information. For example, SuspenseList could use
it as part of its heuristic to determine whether to keep rendering
additional rows.

Background
----------

Much of our early messaging and research into Suspense focused on its
ability to throttle the appearance of placeholder UIs. Our theory was
that, on a fast network, if everything loads quickly, excessive
placeholders will contribute to a janky user experience. This was backed
up by user research and has held up in practice.

However, our original demos made an even stronger assertion: not only is
it preferable to throttle successive loading states, but up to a certain
threshold, it’s also preferable to remain on the previous screen; or in
other words, to delay the transition.

This strategy has produced mixed results. We’ve found it works well for
certain transitions, but not for all them. When performing a full page
transition, showing an initial skeleton as soon as possible is crucial
to making the transition feel snappy. You still want throttle the nested
loading states as they pop in, but you need to show something on the new
route. Remaining on the previous screen can make the app feel
unresponsive.

That’s not to say that delaying the previous screen always leads to a
bad user experience. Especially if you can guarantee that the delay is
small enough that the user won’t notice it. This threshold is a called a
Just Noticeable Difference (JND). If we can stay under the JND, then
it’s worth skipping the first placeholder to reduce overall thrash.

Delays that are larger than the JND have some use cases, too. The main
one we’ve found is to refresh existing data, where it’s often preferable
to keep stale content on screen while the new data loads in the
background. It’s also useful as a fallback strategy if something
suspends unexpectedly, to avoid hiding parts of the UI that are already
visible.

We’re still in the process of optimizing our heuristics for the most
common patterns. In general, though, we are trending toward being more
aggressive about prioritizing the initial skeleton.

For example, Suspense is usually thought of as a feature for displaying
placeholders when the UI is missing data — that is, when rendering is
bound by pending IO.

But it turns out that the same principles apply to CPU-bound
transitions, too. It’s worth deferring a tree that’s slow to render if
doing so unblocks the rest of the transition — regardless of whether
it’s slow because of missing data or because of expensive CPU work.

We already take advantage of this idea in a few places, such as
hydration. Instead of hydrating server-rendered UI in a single pass,
React splits it into chunks. It can do this because the initial HTML
acts as its own placeholder. React can defer hydrating a chunk of UI as
long as it wants until the user interacts it. The boundary we use to
split the UI into chunks is the same one we use for IO-bound subtrees:
the <Suspense /> component.

SuspenseList does something similar. When streaming in a list of items,
it will occasionally stop to commit whatever items have already
finished, before continuing where it left off. It does this by showing a
placeholder for the remaining items, again using the same <Suspense />
component API, even if the item is CPU-bound.

Unresolved questions
--------------------

There is a concern that showing a placeholder without also loading new
data could be disorienting. Users are trained to believe that a
placeholder signals fresh content. So there are still some questions
we’ll need to resolve.",Andrew Clark,2020-09-30T19:57:33Z
7f08e908b10a58cda902611378ec053003d371ed,Fix missing context to componentDidMount() when double-invoking lifecycles (#19935),Brian Vaughn,2020-09-30T19:56:19Z
9198a5cec0936a21a5ba194a22fcbac03eba5d1d,"Refactor layout effect methods (#19895)


Commit phase durations (layout and passive) are stored on the nearest (ancestor) Profiler and bubble up during the commit phase. This bubbling used to be implemented by traversing the return path each time we finished working on a Profiler to find the next nearest Profiler.

This commit removes that traversal. Instead, we maintain a stack of nearest Profiler ancestor while recursing the tree. This stack is maintained in the work loop (since that's where the recursive functions are) and so bubbling of durations has also been moved from commit-work to the work loop.

This PR also refactors the methods used to recurse and apply effects in preparation for the new Offscreen component type.",Brian Vaughn,2020-09-29T19:58:20Z
ba82eea3837e4aaeb5a30b7827b664a8c2128d2e,"Remove disableSchedulerTimeoutInWorkLoop flag (#19902)

We found and mitigated the root cause of the regression that led us to
temporarily revert this change. So now I'm un-reverting it.",Andrew Clark,2020-09-28T17:19:14Z
71bc8ac74c5c96279b8ca5aac6939ea1e4d81235,Improve wording for inline DevTools README.md (#19897),Dmitriy Kovalenko,2020-09-28T13:25:18Z
480626a9e920d5e04194c793a828318102ea4ff4,Create Synthetic Events Lazily (#19909),Dan Abramov,2020-09-25T12:33:28Z
0a008044945a9dcdc9543575a8ba90b1aaacf56c,"Remove Array.from() from hot path (#19908)

* Remove Array.from() from hot path

* Fix build

Don't declare block variables inside loops",Dan Abramov,2020-09-25T10:33:07Z
1890159a5d362e76ee949dfcace1ccb9677abc45,"Separate SyntheticEvent constructors to prevent deopts (#19907)

* Remove arguments from hot path

* Make SyntheticEvent subtypes monomorphic

* Maybe fix Flow?",Dan Abramov,2020-09-25T10:31:00Z
c63741fb3daef6c1e8746cbe7d7b07ecb281a9fd,"offscreen double invoke effects (#19523)

This PR double invokes effects in __DEV__ mode.

We are thinking about unmounting layout and/or passive effects for a hidden tree. To understand potential issues with this, we want to double invoke effects. This PR changes the behavior in DEV when an effect runs from create() to create() -> destroy() -> create(). The effect cleanup function will still be called before the effect runs in both dev and prod. (Note: This change is purely for research for now as it is likely to break real code.)

**Note: The change is fully behind a flag and does not affect any of the code on npm.**",Luna Ruan,2020-09-24T20:42:17Z
a99bf5c5f4840c558f5e5923fcbe4ad6cb8ade98,"DevTools: Improve browser extension iframe support (#19854)


Co-authored-by: Joel DSouza <joel.dsouza@kapturecrm.com>
Co-authored-by: Damien Maillard <damien.maillard@dailymotion.com>
Co-authored-by: Brian Vaughn <brian.david.vaughn@gmail.com>",6h057,2020-09-23T20:56:13Z
c6917346ff9f7ebdfbe11b73a72c82153ac704ec,Fixed broken Profiler test (#19894),Brian Vaughn,2020-09-23T19:33:25Z
87c023b1c1b00d6776b7031f6e105913ead355da,"Profiler onRender only called when we do work (#19885)

If we didn't perform any work in the subtree, skip calling onRender.",Brian Vaughn,2020-09-22T18:47:13Z
92c7e49895032885cffaad77a69d71268dda762e,"Don't consumer iterators while inspecting (#19831)


Co-authored-by: Brian Vaughn <bvaughn@fb.com>",Todor Totev,2020-09-22T18:23:20Z
81aaee56afba2bb3558f2aaa484b594f23b59d4c,"Don't call onCommit et al if there are no effects (#19863)

* Don't call onCommit et al if there are no effects

Checks `subtreeFlags` before scheduling an effect on the Profiler.

* Fix failing Profiler tests

The change to conditionally call Profiler commit hooks only if updates were scheduled broke a few of the Profiler tests. I've fixed the tests by either:
* Adding a no-op passive effect into the subtree or
* Converting onPostCommit to onCommit

When possible, I opted to add the no-op passive effect to the tests since that that hook is called later (during passive phase) so the test is a little broader. In a few cases, this required adding awkward act() wrappers so I opted to go with onCommit instead.

Co-authored-by: Brian Vaughn <bvaughn@fb.com>",Andrew Clark,2020-09-22T18:20:26Z
7355bf575ad0e5fa84061287df8d6330d0a4803f,"Consolidate commit phase hook functions (#19864)

There were a few pairs of commit phase functions that were almost
identical except for one detail. I've refactored them a bit to
consolidate their implementations:

- Lifted error handling logic when mounting a fiber's passive hook
effects to surround the entire list, instead of surrounding each effect.
- Lifted profiler duration tracking to surround the entire list.

In both cases, this matches the corresponding code for the layout phase.

The naming is still a bit of a mess but I'm not too concerned because
my next step is to refactor each commit sub-phase (layout, mutation)
so that we can store values on the JS stack. So the existing function
boundaries are about to change, anyway.",Andrew Clark,2020-09-22T18:16:27Z
c91c1c4ebeb8db2f9fe5574a83ce828f9032351e,Release script: allow preparing RC from npm,Dan Abramov,2020-09-22T13:27:50Z
04e21efd09ab35ed33ca5374ef13ccb9fe69455a,"Add scheduling profiler deployment CI job (#19874)


* Add vercel to scheduling profiler dev deps
* Add vercel.json
* Add CD job
* Add CD setup instructions",E-Liang Tan,2020-09-22T12:34:06Z
ded2a83ebfb7d0d755b0527bb221fa1a2b19b3b8,Improved DevTools context test harness (#19878),Brian Vaughn,2020-09-21T20:39:53Z
6d73063ddf51be3b7885d83a1a6171448492c895,"Enable building of DevTools and scheduling profiler in CI (#19691)


Re-enables building of main DevTools in CI and add new CI target for building the scheduling profiler.",E-Liang Tan,2020-09-21T15:49:07Z
a8de69f358acb6d0be5f1c2970592fb0b1b821a1,"DevTools: Drop IE 11 support (#19875)

DevTools shared Babel config previously supported IE 11 to target Hermes (for the standalone backend that gets embedded within React Native apps). This targeting resulted in less optimal code for other DevTools targets though which did not need to support IE 11. This PR updates the shared config to remove IE 11 support by default, and only enables it for the standalone backend target.",Brian Vaughn,2020-09-21T15:07:45Z
bc6b7b6b16f771bfc8048fe15e211ac777253b64,Don't trigger lazy in DEV during element creation (#19871),Dan Abramov,2020-09-21T15:04:49Z
a774502e0ff2a82e3c0a3102534dbc3f1406e5ea,Use single quotes in getComponentName return (#19873),Gustavo Saiani,2020-09-21T12:35:21Z
8b2d3783e58d1acea53428a10d2035a8399060fe,"Use Passive flag to schedule onPostCommit (#19862)

Instead of calling `onPostCommit` in a separate phase, we can fire
them during the same traversal as the rest of the passive effects.

This works because effects are executed depth-first. So by the time we
reach a Profiler node, we'll have already executed all the effects in
its subtree.",Andrew Clark,2020-09-18T20:02:26Z
50d9451f320a9aaf94304209193562cc385567d8,"Improve DevTools editing interface (#19774)

* Improve DevTools editing interface

This commit adds the ability to rename or delete keys in the props/state/hooks/context editor and adds tests to cover this functionality. DevTools will degrade gracefully for older versions of React that do not inject the new reconciler rename* or delete* methods.

Specifically, this commit includes the following changes:
* Adds unit tests (for modern and legacy renderers) to cover overriding props, renaming keys, and deleting keys.
* Refactor backend override methods to reduce redundant Bridge/Agent listeners and methods.
* Inject new (DEV-only) methods from reconciler into DevTools to rename and delete paths.
* Refactor 'inspected element' UI components to improve readability.
* Improve auto-size input to better mimic Chrome's Style editor panel. (See this Code Sandbox for a proof of concept.)

It also contains the following code cleanup:
* Additional unit tests have been added for modifying values as well as renaming or deleting paths.
* Four new DEV-only methods have been added to the reconciler to be injected into the DevTools hook: overrideHookStateDeletePath, overrideHookStateRenamePath, overridePropsDeletePath, and overridePropsRenamePath. (DevTools will degrade gracefully for older renderers without these methods.)
* I also took this as an opportunity to refactor some of the existing code in a few places:
  * Rather than the backend implementing separate methods for editing props, state, hooks, and context– there are now three methods: deletePath, renamePath, and overrideValueAtPath that accept a type argument to differentiate between props, state, context, or hooks.
  * The various UI components for the DevTools frontend have been refactored to remove some unnecessary repetition.

This commit also adds temporary support for override* commands with mismatched backend/frontend versions:
* Add message forwarding for older backend methods (overrideContext, overrideHookState, overrideProps, and overrideState) to the new overrideValueAtPath method. This was done in both the frontend Bridge (for newer frontends passing messages to older embedded backends) and in the backend Agent (for older frontends passing messages to newer backends). We do this because React Native embeds the React DevTools backend, but cannot control which version of the frontend users use.
* Additional unit tests have been added as well to cover the older frontend to newer backend case. Our DevTools test infra does not make it easy to write tests for the other way around.",Brian Vaughn,2020-09-18T15:07:18Z
b3b1bb9ce282c107fe898e53ef70485c530d8f3c,"Enable source maps for DevTools production builds (#19773)


Co-authored-by: Brian Vaughn <bvaughn@fb.com>",Johnny Pribyl,2020-09-18T14:07:22Z
26857ecfa924c05119773dae7e59577e730f8faf,"Revert ""DevTools: Improve browser extension iframe support (#19827)"" (#19852)

This reverts commit ec39a5e9017dfa2c3311bc2b74a4d535ea2630a2.",Brian Vaughn,2020-09-17T18:57:44Z
6fddca27e75950adda92ab4f4946442907dc3bb7,Remove passive intervention flag (#19849),Dan Abramov,2020-09-17T14:37:12Z
36df9185c53ce4e90dc1f7362f74533ecf0607db,chore(docs): Removed outdated comment about fb.me link  (#19830),Adnaan Bheda,2020-09-16T12:07:16Z
16fb2b6f9e8fb17e2c468384e870cab635e4b1bb,"Moved resetChildLanes into complete work (#19836)

This allows us to inline a few checks that are specific to a certain tag-type.",Brian Vaughn,2020-09-15T21:12:48Z
b93f3e7d2d595444c6ee2964d4cce2e17f4ffa28,"Fix `act` bundle size regression (#19832)

Adds back the `TestUtils.act` implementation that I had removed
in #19745. This version of `act` is implemented in ""userspace"" (i.e. not
the reconciler), so it doesn't add to the production bundle size.

I had removed this in #19745 in favor of the `act` exported by the
reconciler because I thought we would remove support for `act` in
production in the impending major release. (It currently warns.)

However, we've since decided to continue supporting `act` in prod for
now, so that it doesn't block people from upgrading to v17. We'll drop
support in a future major release.

So, to avoid bloating the production bundle size, we need to move the
public version of `act` back to ""userspace"", like it was before.

This doesn't negate the main goal of #19745, though, which was to
decouple the public version(s) of `act` from the internal one that we
use to test React itself.",Andrew Clark,2020-09-14T17:11:47Z
ec39a5e9017dfa2c3311bc2b74a4d535ea2630a2,"DevTools: Improve browser extension iframe support (#19827)


Co-authored-by: Joel DSouza <joel.dsouza@kapturecrm.com>
Co-authored-by: Damien Maillard <damien.maillard@dailymotion.com>
Co-authored-by: Brian Vaughn <brian.david.vaughn@gmail.com>",6h057,2020-09-14T14:04:46Z
917cb01a58f59725e3824f0b1912a23116c4cd7c,"React DevTools: Show symbols used as keys in state (#19786)


Co-authored-by: Brian Vaughn <bvaughn@fb.com>",6h057,2020-09-14T13:55:19Z
11ee82df4572fff2bbe82fef5fc98281d977b072,[Events] Make passiveness and priority non-configurable (#19807),Dan Abramov,2020-09-14T12:54:08Z
ebb2253428315bfa3237df403082b0d2ec2f9c5c,updates mailmap entries (#19824),Seth Webster,2020-09-12T17:05:52Z
cc581065df5e4bc986af3c38253b265be0dbaac4,eslint-plugin-react-hooks@4.1.2,Dan Abramov,2020-09-11T12:18:44Z
0044805c8885994a9869f6c752ef71e5ef9f297f,Update CHANGELOG.md,Dan Abramov,2020-09-11T12:17:55Z
0f70d4dd667d8c953aaf8b0d40f6a0439cd4ab27,"Consider components in jsx as missing dependencies in @typescript-eslint/parser@4.x (#19815)

* Run JS tests with TS esling parser

* Add failing test

* fix: Mark JSXIdentifier has missing dependency

* Safe isSameIdentifier",Sebastian Silbermann,2020-09-11T12:13:43Z
84558c61ba1e511768e4f775fcf9c7af3a339caf,"Don't visit passive effects during layout phase (#19809)

Removes the `Update` flag when scheduling a passive effect for
`useEffect`. The `Passive` flag alone is sufficient.

This doesn't affect any behavior, but does optimize the performance of
the commit phase.",Andrew Clark,2020-09-10T21:00:41Z
ad8a0a8cd0cc918c5aa7faca8d22413192f9e3d2,eslint-plugin-react-hooks@4.1.1,Dan Abramov,2020-09-10T18:54:42Z
77544a0d6fd4df55e4e971e481dd49d2b67a375c,Update CHANGELOG.md,Dan Abramov,2020-09-10T18:54:10Z
ed4fdfc737a34fbb9fcb189cd4c7abe831130b33,"test(eslint-plugin-react-hooks): Run with TS parsers >= 2.x (#19792)

* test(eslint-plugin-react-hooks): Run with TS parsers >= 2.x

* name test suites for each parser",Sebastian Silbermann,2020-09-10T18:08:47Z
cd75f93c03a15d00f0f82f52587f110d6fba7216,"eslint-plugin-react-hooks: fix compatibility with @typescript-eslint/parser@4.0.0+ (#19751)

In addition to `TSTypeQuery`, dependency nodes with a `TSTypeReference`
parent need to be ignored as well. Without this fix, generic type
variables will be listed as missing dependencies.

Example:

    export function useFoo<T>(): (foo: T) => boolean {
        return useCallback((foo: T) => false, []);
    }

This will report the following issue:

    React Hook useCallback has a missing dependency: 'T'. Either include
    it or remove the dependency array

Closes: #19742",Matthias Schiffer,2020-09-10T10:30:18Z
a08ae9f147a716520a089055e2dec8f5397a4b0f,Listen to onScroll during hydration (#19803),Dan Abramov,2020-09-10T10:00:02Z
781212aab344b1619806369d768fad0c1ac3e04a,Remove double space in test name (#19762),Gustavo Saiani,2020-09-09T22:26:44Z
e7b255341b059b4e2a109847395d0d0ba2633999,"Internal `act`: Flush timers at end of scope (#19788)

If there are any suspended fallbacks at the end of the `act` scope,
force them to display by running the pending timers (i.e. `setTimeout`).

The public implementation of `act` achieves the same behavior with an
extra check in the work loop (`shouldForceFlushFallbacks`). Since our
internal `act` needs to work in both development and production, without
additional runtime checks, we instead rely on Jest's mock timers.

This doesn't not affect refresh transitions, which are meant to delay
indefinitely, because in that case we exit the work loop without
posting a timer.",Andrew Clark,2020-09-09T04:55:23Z
d17086c7c813402a550d15a2f56dc43f1dbd1735,"Decouple public, internal act implementation (#19745)

In the next major release, we intend to drop support for using the `act`
testing helper in production. (It already fires a warning.) The
rationale is that, in order for `act` to work, you must either mock the
testing environment or add extra logic at runtime. Mocking the testing
environment isn't ideal because it requires extra set up for the user.
Extra logic at runtime is fine only in development mode — we don't want
to slow down the production builds.

Since most people only run their tests in development mode, dropping
support for production should be fine; if there's demand, we can add it
back later using a special testing build that is identical to the
production build except for the additional testing logic.

One blocker for removing production support is that we currently use
`act` to test React itself. We must test React in both development and
production modes.

So, the solution is to fork `act` into separate public and
internal implementations:

- *public implementation of `act`* – exposed to users, only works in
  development mode, uses special runtime logic, does not support partial
  rendering
- *internal implementation of `act`* – private, works in both
  development and productionm modes, only used by the React Core test
  suite, uses no special runtime logic, supports partial rendering (i.e.
  `toFlushAndYieldThrough`)

The internal implementation should mostly match the public
implementation's behavior, but since it's a private API, it doesn't have
to match exactly. It works by mocking the test environment: it uses a
mock build of Scheduler to flush rendering tasks, and Jest's mock timers
to flush Suspense placeholders.

---

In this first commit, I've added the internal forks of `act` and
migrated our tests to use them. The public `act` implementation is
unaffected for now; I will leave refactoring/clean-up for a later step.",Andrew Clark,2020-09-08T15:11:45Z
d38ec17b1d6ab75715c4ec06f2793c2986dcd549,[Flight] Set dispatcher for duration of performWork() (#19776),Joseph Savona,2020-09-07T23:41:22Z
4f3f7eeb7f467be7a8c5e7c2cdf64cb95a6099c3,"Bugfix: Effect clean up when deleting suspended tree (#19752)

* Bug: Effect clean up when deleting suspended tree

Adds a failing unit test.

* Re-use static flags from suspended primary tree

When switching to a Suspense boundary's fallback, we need to be sure
to preserve static subtree flags from the primary tree.",Andrew Clark,2020-09-04T22:46:44Z
7baf9d4128d41903de125527b50285ea9862cf9a,"Combine Flags and SubtreeFlags types (#19775)

Because the `subtreeFlags` is the union of all the flags present in
a subtree, we can use the same type as `flags`.

One practical benefit is that we can bubble up the flags from the
children with a single `|=` operator.

Structurally, everything else about the effect algorithm is unchanged.",Andrew Clark,2020-09-04T21:48:30Z
16654436039dd8f16a63928e71081c7745872e8f,"Rename effect fields (#19755)

- `effectTag` -> `flags`
- `subtreeTag` -> `subtreeFlags`",Andrew Clark,2020-09-04T21:34:07Z
708fa77a783bbe729cfcebdd513d23eafc455b8b,"Decrease expiration time of input updates (#19772)

Changes the expiration time of input updates from 1000ms to 250ms, to
match the corresponding constant in Scheduler.js.

When we made it larger, a product metric in www regressed, suggesting
there's a user interaction that's being starved by a series of
synchronous updates. If that theory is correct, the proper solution is
to fix the starvation. However, this scenario supports the idea that
expiration times are an important safeguard when starvation does happen.

Also note that, in the case of user input specifically, this will soon
no longer be an issue because we plan to make user input synchronous by
default (until you enter `startTransition`, of course.)

If weren't planning to make these updates synchronous soon anyway, I
would probably make this number a configurable parameter.",Andrew Clark,2020-09-04T17:42:09Z
36df483af4a626fd4021c060fcb0f62471e82af1,Add feature flag to disable scheduler timeout in work loop (#19771),Ricky,2020-09-04T14:58:17Z
eabd18c73f0df5e38431e47b0549566a6f41e15f,"Scheduling Profiler: Move preprocessing to web worker and add loading indicator (#19759)

* Move preprocessData into a web worker
* Add UI feedback for loading/import error states
* Terminate worker when done handling profile
* Add display density CSS variables",E-Liang Tan,2020-09-04T14:57:32Z
38a512acade57578738e2c5ebbb0709cd56a9bbd,"Scheduling Profiler: Redesign with DevTools styling (#19707)


Co-authored-by: Brian Vaughn <bvaughn@fb.com>",E-Liang Tan,2020-09-03T16:08:40Z
bcc0aa4633760352c6c56f559d1e2d374d302f5a,"Revert ""Revert ""Remove onScroll bubbling flag (#19535)"" (#19655)"" (#19761)

This reverts commit 64ddef44c69a18038b1683e04c4558a72af1b91a.",Dan Abramov,2020-09-03T16:06:20Z
e9454894ff1715d6d51558fb05c1344440901069,"Scheduling Profiler: Extract and test scroll state from horizontal pan and zoom view (#19682)

* Extract reusable scroll logic from HorizontalPanAndZoomView

* Change VerticalScrollView to use scrollState

* Clarify test name",E-Liang Tan,2020-09-03T14:27:35Z
93400833956d4aa5b3136fb5883142a70a4f54e6,Scheduling Profiler: Add Fast Refresh (#19757),E-Liang Tan,2020-09-03T13:17:57Z
835c11eba713ea836af6dae67b4d0e835c0eabdf,"Add checkbox toggle for boolean values (#19714)

* added a checkbox which appears to the right of a value when value is boolean
* checkbox with toggle capability created for boolean props

Co-authored-by: Brian Vaughn <brian.david.vaughn@gmail.com>",Meghnath Pillay,2020-09-03T12:57:12Z
99cae887f3a8bde760a111516d254c1225242edf,"Add failing test for passive effect cleanup functions and memoized components (#19750)

* Add failing tests for passive effects cleanup not being called for memoized components

* Bubble passive static subtreeTag even after bailout

This prevents subsequent unmounts from skipping over any pending passive effect destroy functions",Brian Vaughn,2020-09-02T17:01:52Z
2cfd73c4d02cfe4c745a1862ef4a9c44e8a41da4,Fix typo in comment (Noticable→Noticeable) (#19737),Ikko Ashimine,2020-09-02T00:19:10Z
98dba66ee1e5fcf3b88a0fe0331c8d84e9ddfbed,"Add ⎇ + arrow key navigation to DevTools (#19741)

⎇ + left/right navigates between owners (similar to owners tree) and ⎇ + up/down navigations between siblings.",Brian Vaughn,2020-09-02T00:03:44Z
53e622ca7f643cc9d18c9c4896b68ab14549e292,"Fix instances of function declaration after return (#19733)

* Add ESLint plugin to check for any function declare after return
* Refactor code to move function declarations before return and fix failing lint",Bhumij Gupta,2020-09-01T12:55:10Z
b7d18c4daf244b991858cc9b0706b64589f4fd60,"Support Babel's envName option in React Refresh plugin (#19009)

* Fix envName bug

* Replace getEnv with env",Kevin Weber,2020-09-01T12:50:54Z
1f38dcff67d12828be771403e183652f5e93909a,"Remove withSuspenseConfig (#19724)

Removes `withSuspenseConfig` and migrates relevant tests to
`startTransition` instead.

We only had one caller in www, which I've removed.",Andrew Clark,2020-08-31T16:16:49Z
1396e4a8f5646f35929883cbb449d2c83e7cbc79,"Fixes eslint warning when node type is ChainExpression (#19680)

* Add babel parser which supports ChainExpression

* Add and fix tests for new babel eslint parser

* extract function to mark node

* refactor for compatibility with eslint v7.7.0+

* Update eslint to v7.7.0
Update hook test since eslint now supports nullish coalescing",Pascal Fong Kye,2020-08-29T20:03:23Z
a8500be893acbaaecb44bced3fbdcd2d0c356ef7,"Add `startTransition` as a known stable method (#19720)

The `startTransition` method returned from `useTransition` is a stable
method, like `dispatch` or `setState`. You should not have to specify
it as a hook dependency.",Andrew Clark,2020-08-28T23:44:39Z
4f5fb56100fac50f2c8bb33f984301b550e71407,"Use gate pragma instead of if (__EXPERIMENTAL__) (#19722)

* Use gate pragma instead of if (__EXPERIMENTAL__)

* Fix stream error handling in tests

Added an error listener so that the tests fail within their Jest scope,
instead of crashing the whole process.",Andrew Clark,2020-08-28T21:21:01Z
380dc95de826508ef4c637f2a27f2501b8b8e693,"Revert ""Append text string to <Text> error message (#19581)"" (#19723)

This reverts commit 1a41a196bcb30d456d1692c4a40cb8273fa2cb92.",Timothy Yung,2020-08-28T20:46:59Z
ddd1faa1972b614dfbfae205f2aa4a6c0b39a759,"Remove config argument from useTransition (#19719)

And `useDeferredValue`.

The options were already disabled in previous commits, so this doesn't
change any behavior. I upated type signatures and cleaned up the hook
implementation a bit — no longer have to wrap the `start` method with
`useCallback`, because its only remaining dependency is a `setState`
method, which never changes. Instead, we can store the `start` method
on a ref.",Andrew Clark,2020-08-28T18:49:01Z
92fcd46cc79bbf45df4ce86b0678dcef3b91078d,"Replace SuspenseConfig object with an integer (#19706)

Now that the options in SuspenseConfig are no longer supported, the
only thing we use it for is to track whether an update is part of
a transition.

I've renamed `ReactCurrentBatchConfig.suspense` to
`ReactCurrentBatchConfig.transition`, and changed the type to a number.
The number is always either 0 or 1. I could have made it a boolean;
however, most likely this will eventually be either a Lane or an
incrementing identifier.

The `withSuspenseConfig` export still exists until we've removed
all the callers from www.",Andrew Clark,2020-08-28T17:52:56Z
b754caaaf23a070de281dcd0a9d32846470e1907,"Enable eager listeners in open source (#19716)

* Enable eager listeners in open source

* Fix tests

* Enable in all places",Dan Abramov,2020-08-28T11:23:28Z
c1ac052158ee9ec29d3e748420d9d577b8b7412d,"[Flight] Support more element types and Hooks for Server and Hybrid Components (#19711)

* Shim support for more element types

* Shim commonly used Hooks that are safe

* Flow

* Oopsie",Dan Abramov,2020-08-27T19:19:13Z
1eaafc9ade46ba708b2361b324dd907d019e3939,"Clean up timeoutMs-related implementation details (#19704)

* Disable busyDelayMs and busyMinDurationMs

Refer to explanation in previous commit.

* Remove unnecessary work loop variables

Since we no longer support SuspenseConfig options, we don't need to
track these values.

* Remove unnecessary Update fields",Andrew Clark,2020-08-27T16:47:58Z
8da0da0937af154b775b243c9d28b6aa50db696b,"Disable timeoutMs argument (#19703)

* Remove distinction between long, short transitions

We're removing the `timeoutMs` option, so there's no longer any
distinction between ""short"" and ""long"" transitions. They're all treated
the same.

This commit doesn't remove `timeoutMs` yet, only combines the internal
priority levels.

* Disable `timeoutMs` argument

tl;dr
-----

- We're removing the `timeoutMs` argument from `useTransition`.
- Transitions will either immediately switch to a skeleton/placeholder
  view (when loading new content) or wait indefinitely until the data
  resolves (when refreshing stale content).
- This commit disables the `timeoutMS` so that the API has the desired
  semantics. It doesn't yet update the types or migrate all the test
  callers. I'll do those steps in follow-up PRs.

Motivation
----------

Currently, transitions initiated by `startTransition` / `useTransition`
accept a `timeoutMs` option. You can use this to control the maximum
amount of time that a transition is allowed to delay before we give up
and show a placeholder.

What we've discovered is that, in practice, every transition falls into
one of two categories: a **load** or a **refresh**:

- **Loading a new screen**: show the next screen as soon as possible,
  even if the data hasn't finished loading. Use a skeleton/placeholder
  UI to show progress.
- **Refreshing a screen that's already visible**: keep showing the
  current screen indefinitely, for as long as it takes to load the fresh
  data, even if the current data is stale. Use a pending state (and
  maybe a busy indicator) to show progress.

In other words, transitions should either *delay indefinitely* (for a
refresh) or they should show a placeholder *instantly* (for a load).
There's not much use for transitions that are delayed for a
small-but-noticeable amount of time.

So, the plan is to remove the `timeoutMs` option. Instead, we'll assign
an effective timeout of `0` for loads, and `Infinity` for refreshes.

The mechanism for distinguishing a load from a refresh already exists in
the current model. If a component suspends, and the nearest Suspense
boundary hasn't already mounted, we treat that as a load, because
there's nothing on the screen. However, if the nearest boundary is
mounted, we treat that as a refresh, since it's already showing content.

If you need to fix a transition to be treated as a load instead of a
refresh, or vice versa, the solution will involve rearranging the
location of your Suspense boundaries. It may also involve adding a key.

We're still working on proper documentation for these patterns. In the
meantime, please reach out to us if you run into problems that you're
unsure how to fix.

We will remove `timeoutMs` from `useDeferredValue`, too, and apply the
same load versus refresh semantics to the update that spawns the
deferred value.

Note that there are other types of delays that are not related to
transitions; for example, we will still throttle the appearance of
nested placeholders (we refer to this as the placeholder ""train model""),
and we may still apply a Just Noticeable Difference heuristic (JND) in
some cases. These aren't going anywhere. (Well, the JND heuristic might
but for different reasons than those discussed above.)",Andrew Clark,2020-08-26T21:35:13Z
60ba723bf78b9a28f60dce854e88e206fab52301,"Add SuspenseList to devTools (#19684)

* ensure getDisplayName is only called on functions

* add SuspenseList to Dev tools element names

* Add SuspenseList and pass tests

* Import SuspenseList directly

* run prettier

* Refactor tests to use real components

* run linter",Ben Pernick,2020-08-26T17:04:43Z
5564f2c95bb61b446f93dc5c519740bdb39e1989,"Add React.startTransition (#19696)

* Add React.startTransition

* Export startTransition from index.js as well",Ricky,2020-08-26T15:34:17Z
c4e0768d7487a9359b74986e3b07841d2520f593,Remove unused argument from `finishConcurrentRender` (#19689),inottn,2020-08-25T12:49:57Z
af219cc6e6c514099a667ffab4e2d80c5c0c1bcc,"Lint rule to forbid access of cross-fork fields (#19679)

* Lint rule to forbid access of cross-fork fields

We use a shared Fiber type for both reconciler forks (old and new). It
is a superset of all the fields used by both forks. However, there are
some fields that should only be used in the new fork, and others that
should only be used in the old fork.

Ideally we would enforce this with separate Flow types for each fork.
The problem is that the Fiber type is accessed by some packages outside
the reconciler (like React DOM), and get passed into the reconciler as
arguments. So there's no way to fork the Fiber type without also forking
the packages where they are used. FiberRoot has the same issue.

Instead, I've added a lint rule that forbids cross-fork access of
fork-specific fields. Fields that end in `_old` or `_new` are forbidden
from being used inside the new or old fork respectively. Or you can
specific custom fields using the ESLint plugin options.

I used this plugin to find and remove references to the effect list
in d2e914a.

* Mark effect list fields as old

And `subtreeTag` as new.

I didn't mark `lastEffect` because that name is also used by the
Hook type. Not super important; could rename to `lastEffect_old` but
idk if it's worth the effort.",Andrew Clark,2020-08-24T17:07:11Z
848bb2426e44606e0a55dfe44c7b3ece33772485,"Attach Listeners Eagerly to Roots and Portal Containers (#19659)

* Failing test for #19608

* Attach Listeners Eagerly to Roots and Portal Containers

* Forbid createEventHandle with custom events

We can't support this without adding more complexity. It's not clear that this is even desirable, as none of our existing use cases need custom events. This API primarily exists as a deprecation strategy for Flare, so I don't think it is important to expand its support beyond what Flare replacement code currently needs. We can later revisit it with a better understanding of the eager/lazy tradeoff but for now let's remove the inconsistency.

* Reduce risk by changing condition only under the flag

Co-authored-by: koba04 <koba0004@gmail.com>",Dan Abramov,2020-08-24T15:50:20Z
8c9fc4e90f58fab25c2991ac60ddb6a6afe9271c,Remove usage of PossiblyWeakSet from createEventHandle (#19686),Dominic Gannaway,2020-08-24T15:10:23Z
2ada4bd0c2c8e2ccac0c3c952712d6e03c9a7362,Add a test for non-passive event handlers for events affected by the browsers' intervention (#19658),Toru Kobayashi,2020-08-24T13:30:17Z
d2e914ab4eb265bec82c01a083f608208f50d833,"Remove remaining references to effect list (#19673)

* Remove `firstEffect` null check

This is the last remaining place where the effect list has semantic
implications.

I've replaced it with a check of `effectTag` and `subtreeTag`, to see
if there are any effects in the whole tree. This matches the semantics
of the old check. However, I think only reason this optimization exists
is because it affects profiling. We should reconsider whether this
is necessary.

* Remove remaining references to effect list

We no longer use the effect list anywhere in our implementation. It's
been replaced by a recursive traversal in the commit phase.

This removes all references to the effect list in the new fork.",Andrew Clark,2020-08-22T01:42:32Z
0386bd0da22cce1608f42072e64b35443eae871b,"Tweaked landing page styles (#19665)

* Tweaked landing page styles

* Update GitHub link

Co-authored-by: E-Liang Tan <eliang@eliangtan.com>",Brian Vaughn,2020-08-21T18:06:01Z
90d212d326d8bb8f5ee414801db37e688d585712,"Fix movementX/Y polyfill with capture events (#19672)

* Fix movementX/Y polyfill with capture events

* Remove unnecesary call for better inlining",Dan Abramov,2020-08-21T15:55:41Z
49af88991c3a3e79e663e495458fad12d3162894,"Fix DevTools crash when inspecting document.all (#19619)

* Add html_all_collection type to correct typeof document.all

* process HTMLAllCollection like HTMLElement + fix flow issue

* fix lint

* move flow fix comment

* Make it work with iframes too

* optimize how we get html_all_collection type

* use once Object.prototype.toString.call",6h057,2020-08-21T13:31:16Z
d6e433899f387be42a3cec2115b4607f32910a3b,"Use Global Render Timeout for CPU Suspense (#19643)

* Use Retry lane for resuming CPU suspended work

* Use a global render timeout for CPU suspense heuristics

* Fix profiler test since we're now reading time more often

* Sync to new reconciler

* Test synchronously rerendering should not render more rows",Sebastian Markbåge,2020-08-20T21:39:29Z
f912186012f17858b9d25466c658a46e25093941,Fix: Unspecified error for IE11 (#19530) (#19664),Hemakshi Sachdev,2020-08-20T20:53:23Z
d5ed78764fcf406d32f02de248d4c7a22843732c,Visually distinguish user timing marks from React events (#19663),Brian Vaughn,2020-08-20T18:43:40Z
2bea3fb0b8f13db702da14b2b02e85127ed397a4,"Import React Concurrent Mode Profiler (#19634)


Co-authored-by: Brian Vaughn <bvaughn@fb.com>
Co-authored-by: Kartik Choudhary <kartikc.918@gmail.com>",E-Liang Tan,2020-08-20T18:06:28Z
c641b611c4d270660b0bb850759f5a324787a7b3,Upgrade all @babel/* packages to fix DevTools builds on newer Node versions (#19647),E-Liang Tan,2020-08-20T15:47:16Z
08e69f65b44f5e5501c796be6f7b272441ebd0e6,Fix incorrect copy-paste in test (#19657),Dan Abramov,2020-08-20T00:47:32Z
64ddef44c69a18038b1683e04c4558a72af1b91a,"Revert ""Remove onScroll bubbling flag (#19535)"" (#19655)

This reverts commit e9721e14e4b8776c107afa3cdd7c6d664fe20c24.",Dan Abramov,2020-08-19T19:54:54Z
dd651df05e5802a31484f269b689c17acf087299,"Keep onTouchStart, onTouchMove, and onWheel passive (#19654)

* Keep onTouchStart, onTouchMove, and onWheel passive

* Put it behind a feature flag on WWW",Dan Abramov,2020-08-19T17:42:33Z
87b3e2d257e49b6d2c8e662830fc8f3c7d62f85f,"Add flow to SyntheticEvent (#19564)

* Add flow to SyntheticEvent

* Minimal implementation of known and unknown synthetic events

* less casting

* Update EnterLeaveEventPlugin.js

Co-authored-by: Dan Abramov <dan.abramov@gmail.com>",Sebastian Silbermann,2020-08-19T13:16:48Z
b8fa09e9e2b52d46e47ad604ef7c8c3529471b71,provide profiling bundle for react-reconciler (#19559),Julien Gilli,2020-08-19T13:11:27Z
32ca31306006d54d4887549b10608dc691cab055,refactor: remove unnecessary return statements (#19625),Toru Kobayashi,2020-08-19T13:10:41Z
c45a195429b238587357f71a0e487dd80ed7c59f,fix: property list values should show whitespace (#19640),Sam Marks,2020-08-19T12:50:46Z
23595ff593b2e53ddfec2a08e848704d15d84b51,Add missing param to safelyCallDestroy() (#19638),Brian Vaughn,2020-08-18T16:02:04Z
24f1923b1b55f142c39364c88a57b2a1b90d3972,"fix: open two same tabs on firefox (#19632)

close #19629",ᴜɴвʏтᴇ,2020-08-18T14:17:00Z
ee409ea3b577f9ff37d36ccbfc642058ad783bb0,"change destroy to safelyCallDestroy (#19605)

We use safelyCallDestroy for commitUnmount and passive effects unmounts but we call destroy directly in commitHookEffectListUnmount (AKA layout effects unmounts because we don't use this anywhere else). This PR changes the direct destroy call to safelyCallDestroy for consistency",Luna Ruan,2020-08-18T00:32:50Z
bcca5a6ca78b33504e0a328c411b043261e7e303,"Always skip unmounted/unmounting error boundaries (#19627)

The behavior of error boundaries for passive effects that throw during cleanup was recently changed so that React ignores boundaries which are also unmounting in favor of still-mounted boundaries. This commit implements that same behavior for layout effects (useLayoutEffect, componentWillUnmount, and ref-detachment).

The new, skip-unmounting-boundaries behavior is behind a feature flag (`skipUnmountedBoundaries`).",Brian Vaughn,2020-08-17T19:01:06Z
1a41a196bcb30d456d1692c4a40cb8273fa2cb92,"Append text string to <Text> error message (#19581)

* Append text string to <Text> error message

* Truncate text in <Text> error message

* Regenerate `codes.json`",Timothy Yung,2020-08-17T17:47:49Z
1287670191e8e3bb193c83c18e587ccb8159a4ba,"Fix: React cannot render in ShadowRoot (#15894)

* fix: render in shadow root

* fix: flow typing

* Remove types and turn invariant into warning

Co-authored-by: Dan Abramov <dan.abramov@me.com>",Jack Works,2020-08-17T14:47:49Z
e4afb2fddf6d1c596c703c384303a35d4d0d830f,eslint-plugin-react-hooks@4.1.0,Dan Abramov,2020-08-17T12:31:20Z
ced05c46c114453ac4d8d469296f6ca3f96fe908,Update CHANGELOG.md,Dan Abramov,2020-08-17T12:30:16Z
702fad4b1b48ac8f626ed3f35e8f86f5ea728084,"refactor fb.me redirect link to reactjs.org/link (#19598)

* refactor fb.me url to reactjs.org/link

* Update ESLintRuleExhaustiveDeps-test.js

* Update ReactDOMServerIntegrationUntrustedURL-test.internal.js

* Update createReactClassIntegration-test.js

* Update ReactDOMServerIntegrationUntrustedURL-test.internal.js

Co-authored-by: Dan Abramov <dan.abramov@gmail.com>",CY Lim,2020-08-17T12:25:50Z
49cd77d24a5244d159be14671654da63932ea9be,fix: leak strict mode with UMD builds (#19614),Toru Kobayashi,2020-08-15T13:42:49Z
ffb749c95e0361b3cfbbfc4e1a73bfa2fda0aa93,"Improve error boundary handling for unmounted subtrees (#19542)

A passive effect's cleanup function may throw after an unmount. Prior to this commit, such an error would be ignored. (React would not notify any error boundaries.) After this commit, React's behavior varies depending on which reconciler fork is being used.

For the old reconciler, React will call componentDidCatch for the nearest unmounted error boundary (if there is one). If there are no unmounted error boundaries, React will still swallow the error because the return pointer has been disconnected, so the normal error handling logic does not know how to traverse the tree to find the nearest still-mounted ancestor.

For the new reconciler, React will skip any unmounted boundaries and look for a still-mounted boundary. If one is found, it will call getDerivedStateFromError and/or componentDidCatch (depending on the type of boundary).

Tests have been added for both reconciler variants for now.",Brian Vaughn,2020-08-14T20:46:46Z
9b35dd2fcc8b8dfbd1363cef9e5c59a0deab0dd3,"Permanently removed component stacks from scheduling profiler data (#19615)

These stacks improve the profiler data but they're expensive to generate and generating them can also cause runtime errors in larger applications (although an exact repro has been hard to nail down). Removing them for now. We can revisit adding them after this profiler has been integrated into the DevTools extension and we can generate them lazily.",Brian Vaughn,2020-08-14T19:21:13Z
3f8115cdd1e6ba237619cf8a7d433900dcf413c2,"Remove `didTimeout` check from work loop

No longer need this, since we have starvation protection in userspace.

This will also allow us to remove the concept from the Scheduler
package, which is nice because `postTask` doesn't currently support it.",Andrew Clark,2020-08-13T22:02:32Z
9abc2785cb070148d64fae81e523246b90b92016,"Remove wasteful checks from `shouldYield`

`shouldYield` will currently return `true` if there's a higher priority
task in the Scheduler queue.

Since we yield every 5ms anyway, this doesn't really have any practical
benefit. On the contrary, the extra checks on every `shouldYield` call
are wasteful.",Andrew Clark,2020-08-13T16:49:24Z
fe6d05229f29c59ea2bbbd616cdfa0c6e2ea03fc,"fix event.relatedTarget fallback logic for firefox (#19607)

* fix event.relatedTarget fallback logic for firefox

* check if relatedTarget is undefined for fallback",Clay Tercek,2020-08-14T12:05:53Z
1d5e10f7035f0d3bcbffcd057a15940b1a20b164,"[eslint-plugin-react-hooks] Report constant constructions (#19590)

* [eslint-plugin-react-cooks] Report constant constructions

The dependency array passed to a React hook can be thought of as a list of cache keys. On each render, if any dependency is not `===` its previous value, the hook will be rerun. Constructing a new object/array/function/etc directly within your render function means that the value will be referentially unique on each render. If you then use that value as a hook dependency, that hook will get a ""cache miss"" on every render, making the dependency array useless.

This can be especially dangerous since it can cascade. If a hook such as `useMemo` is rerun on each render, not only are we bypassing the option to avoid potentially expensive work, but the value _returned_ by `useMemo` may end up being referentially unique on each render causing other downstream hooks or memoized components to become deoptimized.

* Fix/remove existing tests

* Don't give an autofix of wrapping object declarations

It may not be safe to just wrap the declaration of an object, since the object may get mutated.

Only offer this autofix for functions which are unlikely to get mutated.

Also, update the message to clarify that the entire construction of the value should get wrapped.

* Handle the long tail of nodes that will be referentially unique

* Catch let/var constant constructions on initial assignment

* Trim trailing whitespace

* Address feedback from @gaearon

* Rename ""assignment"" to ""initialization""

* Add test for a constant construction used in multiple dependency arrays",Jordan Eldredge,2020-08-13T19:54:33Z
dab0854c5e66ca74ca0591fd312d6a654e5aaaf1,Move commit passive unmount/mount to CommitWork (#19599),Sebastian Markbåge,2020-08-13T16:17:33Z
c3ee973c5604078d5e9645a7e50db1842939d1e0,Fix emoji character displayed in Chrome extension (#19603),Brian Vaughn,2020-08-13T15:16:35Z
ccb6c39451b502c6b3ff3c014962827c54bae548,Remove unused argument (#19600),inottn,2020-08-13T14:11:01Z
629125555f381764c9f4943e877985274ebbc1b6,"[Scheduler] Re-throw unhandled errors (#19595)

Because `postTask` returns a promise, errors inside a `postTask`
callback result in the promise being rejected.

If we don't catch those errors, then the browser will report an
""Unhandled promise rejection"" error. This is a confusing message to see
in the console, because the fact that `postTask` is a promise-based API
is an implementation detail from the perspective of the developer.
""Promise rejection"" is a red herring.

On the other hand, if we do catch those errors, then we need to report
the error to the user in some other way.

What we really want is the default error reporting behavior that a
normal, non-Promise browser event gets.

So, we'll re-throw inside `setTimeout`.",Andrew Clark,2020-08-13T03:06:43Z
b6e1d086043a801682ff01b00c7a623d529b46c0,DevTools bug fix: Proxied methods should be safely dehydrated for display,Pascal Fong Kye,2020-08-12T16:15:53Z
b8ed6a1aa580e4de80f707293015d638d3252d63,"[Scheduler] Call postTask directly (#19551)

This updates the experimental Scheduler postTask build to call postTask
directly, instead of managing our own custom queue and work loop.

We still use a deadline 5ms mechanism to implement `shouldYield`.

The main thing that postTask is currently missing is the continuation
feature — when yielding to the main thread, the yielding task is sent
to the back of the queue, instead of maintaining its position.

While this would be nice to have, even without it, postTask may be good
enough to replace our userspace implementation.

We'll run some tests to see.",Andrew Clark,2020-08-12T13:39:47Z
c8d9b8878a3a50fe94db5407727a3d5cba13f971,Speed up yarn cache in circle (#19566),Ricky,2020-08-11T18:05:15Z
ce37bfad5f61dcca7c2d0c0787bc65e64614c912,Remove resolutions from test renderer package.json (#19577),Dan Abramov,2020-08-10T19:45:12Z
2704bb5374e52ed548db96df2d975dae42158dfb,"Add ReactVersion to SchedulingProfiler render scheduled marks (#19553)

* Add ReactVersion to SchedulingProfiler render scheduled marks

* Move ReactVersion to a new --react-init-* mark

Co-authored-by: E-Liang Tan <eliang@eliangtan.com>",Kartik Choudhary,2020-08-10T14:51:25Z
0c52e24cb65a8f1c370184f58ee2d5601a3acd7f,"Support inner component _debugOwner in memo (#19556)

* Support inner component _debugOwner in memo

* test with devtool context

* remove memo test

* Merged master; tweaked test and snapshot

* Pass owner to createFiber fn when creating a memo component.

Co-authored-by: Theodore Han <tqhan317@gmail.com>",Brian Vaughn,2020-08-10T14:49:10Z
94c0244bab7515c9b2c00b8e5312a9b6f31ef13a,"Fix double-firing mouseenter (#19571)

* test: Simulate mouseover in browser

* Fix duplicate onMouseEnter event when relatedTarget is a root

* Test leave as well

Co-authored-by: Sebastian Silbermann <silbermann.sebastian@gmail.com>",Dan Abramov,2020-08-10T14:08:22Z
aa99b0b08e355fbbff3aaf6568d89b7a9c0e9705,Rename test files,Dan Abramov,2020-08-10T11:58:42Z
7f696bd99c39348a631c20378d2a8704634bab04,"fix: onFocus/onBlur/onBeforeInput have a matching event type (#19561)

* test: Add current behavior for event types of onFocus/onBlur

* fix: onFocus/onBlur have a matching event type

* fix useFocus

* fix: don't compare native event types with react event types

* Add FocusIn/FocusOutEventInterface

* A simpler alternative fix

* Add regression tests

* Always pass React event type and fix beforeinput

Co-authored-by: Dan Abramov <dan.abramov@me.com>",Sebastian Silbermann,2020-08-10T11:54:10Z
7c30fb3b0b98d3e903e1dc60497f8e7ffb530153,Update outdated lockfile (#19568),Sebastian Silbermann,2020-08-10T10:59:37Z
0cd9a6de557f44dcfe79a4f287ca04b05d674bdc,"Parallelize Jest in CI (#19552)

Uses CircleCI's `parallelism` key to split our test jobs across multiple
processes, like we do for the build job.",Andrew Clark,2020-08-07T20:32:59Z
2d9ec9199ccdfa9872ccb0c86096547d63682cf4,Indent a command,Dan Abramov,2020-08-07T18:24:49Z
db2f22911083f5c8f5c637adf41bb7554928a339,Fix command,Dan Abramov,2020-08-07T18:23:43Z
336729856a1355ff264e3e5427c67bb23b708657,"Nesting Fixture (#19531)

* Nesting Fixture

* Add README to nesting fixture

* Apply suggestions from code review

Co-authored-by: Ricky <rickhanlonii@gmail.com>

* Fixes

* Add Redux

* Use different versions

* Use Consumer API

* Rename helper

* Write docs

* Update README.md

* Update README.md

Co-authored-by: Rick Hanlon <rickhanlonii@gmail.com>",Dan Abramov,2020-08-07T01:08:41Z
a63893ff320c39802e8c37fca84ea023f55230c9,Warn about undefined return value for memo and forwardRef (#19550),Brian Vaughn,2020-08-06T20:12:32Z
32ff4286872d1a6bb8ce71730064f60ebbdd1509,"Add feature flag for setting update lane priority (#19401)

* Add feature flag for setting update lane priority

* Remove second feature flag

* Refactor feature flag locations

* Add missing else",Ricky,2020-08-06T16:47:32Z
5bdd4c8c60ed6c12c5af7ffb73660c8f91bf955a,Remove unused argument from call to jest method (#19546),Gustavo Saiani,2020-08-06T15:55:01Z
a5fed98a96c41cb852355f208bc86a9120f3227e,Register more node types that are used later as JSXIdentifiers (#19514),Mateusz Burzyński,2020-08-06T15:37:32Z
50893dbcb7030499eeecfa4b44539b603b757afd,fix(react-dom): unnecesary path on DOMEventProperties (#19544),DaniAcu,2020-08-06T15:37:06Z
f77c7b9d76205d93908a06fb2d58ee8c31188d16,Re-add discrete flushing timeStamp heuristic (behind flag) (#19540),Dominic Gannaway,2020-08-06T12:21:05Z
e67a6b16030ebc30257a69a7fb36a9ed67f29b39,"Fix runtime error that happens if a passive destroy function throws within an unmounted tree (#19543)

A passive effect's cleanup function may throw after an unmount. In that event, React sometimes threw an uncaught runtime error trying to access a property on a null stateNode field. This commit fixes that (and adds a regression test).",Brian Vaughn,2020-08-05T22:22:18Z
5cff7755022220f24c1066643e0036b41806e8fa,"[Scheduler] Get current time from performance.now in non-DOM environments (#19532)

* Get current time from performance.now in non-DOM environments

* Use local references to native APIs for Date and Performance

* Refactored to read globals directly",Emilis Baliukonis,2020-08-05T16:29:06Z
e9721e14e4b8776c107afa3cdd7c6d664fe20c24,Remove onScroll bubbling flag (#19535),Dan Abramov,2020-08-05T15:07:58Z
b61174fb7b09580c1ec2a8f55e73204b706d2935,Remove the deprecated React Flare event system (#19520),Dominic Gannaway,2020-08-05T14:13:29Z
8d57ca519a3f8e7f76f81f404d048dfc35303d98,fix: typo in React Release Scripts (#19524),Halit Ogunc,2020-08-04T17:22:50Z
a437f3ff302dc92347d812d518c9a9659d9aa546,Use RN fork in default branch of feature flags (#19522),Ricky,2020-08-03T21:40:58Z
86314d5b458348c06df810a67605e8dad1133dd1,Turn off new component stacks for React Native (#19521),Ricky,2020-08-03T18:45:50Z
5f1890f12b4ea900a82853c528c0fe040760857c,"Bugfix: Don't unmount siblings of deleted node (#19516)

* Test: Don't unmount siblings of deleted node

Adds a failing regression test. Will fix in the next commit.

* Refactor to accept deleted fiber, not child list

A deleted fiber is passed to
flushPassiveUnmountEffectsInsideOfDeletedTree, but the code is written
as if it accepts the first node of a child list. This is likely because
the function was based on similar functions like
`flushPassiveUnmountEffects`, which do accept a child list.

Unfortunately, types don't help here because we use the first node
in the list to represent the whole list, so in both cases, the type
is Fiber.

Might be worth changing the other functions to also accept individual
fibers instead of a child list, to help avoid confusion.

* Add layout effect to regression test, just in case",Andrew Clark,2020-08-03T15:57:41Z
93a0c2830534cfbc4e6be3ecc9c9fc34dee3cfaa,"Add static version of Passive subtree tag (#19510)

Creates new subtree tag, PassiveStatic, that represents whether a
tree contains any passive effect hooks.

It corresponds to the PassiveStatic effect tag, which represents the
same concept for an individual fiber.

This allows us to remove the PassiveStatic effect tag from PassiveMask.
Its presence was causing us to schedule a passive effect phase callback
on every render, instead of only when something changed. That's now
fixed; this is reflected in the SchedulerProfiler tests.

(The naming is getting really confusing. Need to do some bikeshedding.)",Andrew Clark,2020-08-01T13:15:46Z
a1c0864d19b16a76a0727934e59406e2d77bd6ee,Support untagged releases (#19509),Dan Abramov,2020-07-31T19:47:28Z
5d271fc3b173e9b6d67d6c38af2048be0382408a,"Revert ""Support untagged releases (#19507)"" (#19508)

This reverts commit 58b3ee7a889b62fefb9cc64962819795bebce7b8.",Dan Abramov,2020-07-31T18:57:32Z
58b3ee7a889b62fefb9cc64962819795bebce7b8,"Support untagged releases (#19507)

* Support untagged releases

* Fix",Dan Abramov,2020-07-31T18:18:37Z
7543459a4819a443f4e3fd9fcf55d773721e0571,Allow publishing untagged releases (#19505),Dan Abramov,2020-07-31T15:10:01Z
3d0895557a8c06e8fcab3bebaee368d5bc582337,Disable onScroll bubbling statically except for WWW (#19503),Dan Abramov,2020-07-31T14:09:24Z
332ecefacec7a15d9088b37e2a158fe91641ed67,"Revert ""Statically enable enableFilterEmptyStringAttributesDOM (#19502)"" (#19504)

This reverts commit 815ee89bf55078f2447fe49a1c68336e70c1ce44.",Dan Abramov,2020-07-31T14:01:27Z
815ee89bf55078f2447fe49a1c68336e70c1ce44,Statically enable enableFilterEmptyStringAttributesDOM (#19502),Dan Abramov,2020-07-31T13:57:57Z
ede9170648d07a63cd282e6acb3ea1fe9e22ded9,"Move passive logic out of layout phase (#19500)

* setCurrentFiber per fiber, instead of per effect

* Re-use safelyCallDestroy

Part of the code in flushPassiveUnmountEffects is a duplicate of the
code used for unmounting layout effects. I did some minor refactoring to
so we could use the same function in both places.

Closure will inline anyway so it doesn't affect code size or
performance, just maintainability.

* Don't check HookHasEffect during deletion

We don't need to check HookHasEffect during a deletion; all effects are
unmounted.

So we also don't have to set HookHasEffect during a deletion, either.

This allows us to remove the last remaining passive effect logic from
the synchronous layout phase.",Andrew Clark,2020-07-31T04:43:03Z
22d16cc15df8e570b79c2825fb495c2b98b40bf5,"Remove event constants (#19276)

* Remove opaque event type

* Rename type and merge files

* Use literals where we have Flow coverage

* Flowify some plugins

* Remove constants except necessary ones",Dan Abramov,2020-07-30T20:52:37Z
6ef997b534bfbf10071401ea15b39a678d557135,"Check for passive effects on the root fiber (#19488)

The root fiber doesn't have a parent from which we can read the
`subtreeTag`, so we need to check its `effectTag` directly.

The root fiber previously did not have any pending passive effects,
but it does now that deleted fibers are cleaned up in the passive phase.

This allows us to remove a `schedulePassiveEffectCallback` call from the
synchronous unmount path.

Co-authored-by: Brian Vaughn <bvaughn@fb.com>",Andrew Clark,2020-07-30T13:17:22Z
e1f96b82b4aff1d5c50d02c76df9c60e32dba408,"Check PassiveStatic instead of Passive (#19489)

Saves us from having to set a flag on `current` during the layout phase.

Could result in some redundant traversal, since PassiveStatic includes
effects that don't need clean-up. But it's worth it to remove the work
from the layout phase.

While I was editing this, I also re-arranged it so that we check the
`effectTag` check before we check the `tag`, since the `effectTag` check
is the one that's more likely to fail.",Andrew Clark,2020-07-30T13:13:04Z
dff97a6915ef3a3897f85e3e47ffa55d4714ae72,Fix onGot/LostPointerCapture events (#19487),Dan Abramov,2020-07-29T20:54:48Z
eae90cdbe90ab6ad8c48cee6f5af10e767a3f9fc,"Effects list refactor continued: passive effects traversal (#19374)

* Adds new `Passive` subtree tag value.
* Adds recursive traversal for passive effects (mounts and unmounts).
* Removes `pendingPassiveHookEffectsMount` and `pendingPassiveHookEffectsUnmount` arrays from work loop.
* Re-adds sibling and child pointer detaching (temporarily removed in previous PR).
* Addresses some minor TODO comments left over from previous PRs.

---

Co-authored-by: Luna Ruan <luna@fb.com>",Brian Vaughn,2020-07-29T20:54:22Z
74cd7e5f17e801f89c88689ecd9560a342b95c2c,Use feature flags for React Native in the test renderer (#19486),Ricky,2020-07-29T20:31:05Z
291db05a756dd88d0f687b3083e85a22abbf5214,Add regression tests for all events (#19485),Dan Abramov,2020-07-29T20:13:56Z
7c8cc4358e79670d1e3be803a8c5267116e09bff,"Add postTask browser scheduler implementation  (#19479)

* Reduce code to necessities

* Switch to postTask API

* Add SchedulerPostTask tests

* Updates from review

* Fix typo from review

* Generate build of unstable_post_task",Ricky,2020-07-29T19:27:59Z
0eea16601cab75dbb698d67220bce5674a13e38a,Event propagation test suite (#19483),Dan Abramov,2020-07-29T14:34:57Z
5227a37868c4bf3133ba5f2b3b39cac9175d7ea9,"Add ""unstable_"" prefix to experimental mutable source APIs (#19472)

* Add ""unstbale_"" prefix to mutable source APIs

* DebugHooks no longer calls useMutableSource() on init

This was causing an observable behavioral difference between experimental DEV and PROD builds.

We don't initialize stack position for other composite hooks (e.g. useDeferredValue, useTransition, useOpaqueIdentifier). If we did, it would cause the same obesrvable behavioral difference.",Brian Vaughn,2020-07-28T16:38:13Z
52c51462744ac6a9437d64ae84fcd94eacbb8aa8,Add SchedulerHostConfig fork for post task (#19470),Ricky,2020-07-28T15:11:31Z
722bc046dcd748dde7109bc959318d3b14cf5196,"Don't rely on `didTimeout` for SyncBatched (#19469)

Tasks with SyncBatchedPriority — used by Blocking Mode — should always
be rendered by the `peformSyncWorkOnRoot` path, not
`performConcurrentWorkOnRoot`.

Currently, they go through the `performConcurrentWorkOnRoot` callback.
Then, we check `didTimeout` to see if the task expired. Since
SyncBatchedPriority translates to ImmediatePriority in the Scheduler,
`didTimeout` is always `true`, so we mark it as expired. Then it exits
and re-enters in the `performSyncWorkOnRoot` path.

Aside from being overly convoluted, we shouldn't rely on Scheduler to
tell us that SyncBatchedPriority work is synchronous. We should handle
that ourselves.

This will allow us to remove the `didTimeout` check. And it further
decouples us from the Scheduler priority, so we can eventually remove
that, too.",Andrew Clark,2020-07-27T21:42:44Z
feb134c30d20ef332771d71d8d1cb66d34311637,feat(react-dom): Add enterKeyHint (#18634),Sebastian Silbermann,2020-07-27T20:07:08Z
96ac799eace5d989de3b4f80e6414e94a08ff77a,"Remove `callbackId` field from FiberRoot (#19458)

The old expiration times implementation used this field to infer when
the priority of a task had changed at a more granular level than a
Scheduler priority level.

Now that we have the LanePriority type, which is React-specific, we no
longer need the `callbackId` field.",Andrew Clark,2020-07-27T17:39:07Z
c24b641b768dc6ea2e7303cf0f4436e55ea61964,"Remove `timeout` option from `scheduleCallback` (#19457)

Since the Lanes refactor landed, we no longer rely on this anywhere, so
we can remove it.

The `delay` option is still needed by our timer implementation
(setTimeout polyfill). We'll keep the feature, but we'll likely change
how it's exposed once we figure out the proper layering between the
various Scheduler APIs.",Andrew Clark,2020-07-27T16:56:25Z
144297165b5cad384485f4738ac6740e75bd5ae0,"Bail-out of attaching non-delegated listeners (#19466)

* Bail-out of attaching non-delegated listeners

Revise comment

* Fix tests/add tests

* Add onInvalid test",Dominic Gannaway,2020-07-27T16:47:14Z
06d104e8ec89df4bc5176e014c83e8b6393e555f,"Don't emulate bubbling of the scroll event (#19464)

* Don't emulate bubbling of the scroll event

* Put behind a flag",Dan Abramov,2020-07-27T16:33:54Z
217ecf581bb1e62dacafb3125b9d92b3346a3fa8,Re-added toggle event to non-delegated events (#19465),Dominic Gannaway,2020-07-27T15:58:38Z
6bb86fd1629896019dfaa9c6ea6e0680913820a7,Delegated all capture events (#19463),Dominic Gannaway,2020-07-27T14:36:43Z
05344faca42468ff7e9225fa26d79fb89377c0cb,Follow up fix to 19452 (#19454),Dominic Gannaway,2020-07-27T14:03:11Z
d29bf59a6e5bc79aa623538288f49cedee7cbb96,Update my mailmap entries (#19455),Ricky,2020-07-27T02:47:32Z
5530f1ccfba873e04b1580629b6659139435f9a8,"Upgrade art fixtures to babel 7 (#16235)

* chore: upgrade art fixtures to babel 7

* upgrade

* use yarn",Ashwin Ramaswami,2020-07-26T03:43:49Z
242a50a652f70df73a9ea4c696c2ed00e55e5bae,Fix issue with capture phase non-bubbling events (#19452),Dominic Gannaway,2020-07-25T11:32:21Z
ef22aecfc52cdf0d7cedc723c590719c009c2a64,"Add invalid/close events to <dialog> element (#19439)

Support dialog

Fix",Dominic Gannaway,2020-07-24T19:36:46Z
b55f75d0a5383a60085e051d19b62ae68d71e366,fix issue #19362 + test (#19412),Robert Ferentz,2020-07-24T18:34:16Z
d93c8faadac0a1cea4ba2a3c1333e78314a6e61a,"Move Persistent Mode Optimization away from firstEffect (#19381)

Persistent mode needs to clone a parent and add its children if a child has
changed.

We have an optimization in persistent mode where we don't do that if no
child could've changed. If there are no effects scheduled for any child
then there couldn't have been changes.

Instead of checking for this on firstEffect, we now check this on the
children's effectTag and subtreeTags.

This is quite unfortunate because if we could just do this check a little
bit later we would've already gotten it transferred to the completed work's
subtreeTag. Now we have to loop over all the children and if any of them
changed, we have to loop over them again. Doing at least two loops per
parent.",Sebastian Markbåge,2020-07-24T16:31:30Z
909b612e27d1a59aa601e2b8461a44661faaffa8,Sync React Native types (#19437),Ricky,2020-07-23T02:56:05Z
76ce685d0fc7821a6c8be486d7cbb2c3d22f6fb7,"Remove SyntheticEvent subtypes (#19436)

* Remove SyntheticEvent subtypes

* Code golf",Dan Abramov,2020-07-23T00:02:59Z
30e3cfe40679f2247179bfe54f4768f2cbbc8161,Fix scope issue (#19434),Dominic Gannaway,2020-07-22T22:05:50Z
125d1a19a211c51d5ee52ec0c1cc1f538eb44d5c,"Move event things around (#19433)

* Put all synthetic events in one file

* Inline other helpers

* Remove Modern from filenames",Dan Abramov,2020-07-22T21:12:15Z
1aae05c4364ca8553c62b46a8df70ebe8fa574f0,Revise comment + add non-bubbling event test (#19432),Dominic Gannaway,2020-07-22T20:41:40Z
356c17108f4e132371450338fa86e195f5e0acf4,"Remove capturePhaseEvents and separate events by bubbling (#19278)

* Remove capturePhaseEvents and separate events by bubbling

WIP

Refine all logic

Revise types

Fix

Fix conflicts

Fix flags

Fix

Fix

Fix test

Revise

Cleanup

Refine

Deal with replaying

Fix

* Add non delegated listeners unconditionally

* Add media events

* Fix a previously ignored test

* Address feedback

Co-authored-by: Dan Abramov <dan.abramov@me.com>",Dominic Gannaway,2020-07-21T21:40:50Z
1dcee8656523668038551b3d1b69f7d679e769f8,Regression test for media event bubbling (#19428),Dan Abramov,2020-07-21T21:26:09Z
c9749d38e3f6c4d9f6c6cbca900ec83cc6cd30ee,"Generate RN renderers for stable builds (#19421)

* Generate RN renderers for experimental builds

* Don't generate FB builds for experimental channels",Ricky,2020-07-20T21:15:06Z
ab1f51700056667e5a2b97d5df7f118fea9868ac,"isFBBundle should be true if it's FB for www or FB for RN (#19420)

This ensures that the .fb.js override files kick in for RN. Otherwise we
won't have FB specific exports in the isomorphic modules.",Sebastian Markbåge,2020-07-20T17:37:04Z
ecbdb74d7ce0f009cb735ddb83d4f760020b9f88,"Added the word ""events"" to clear ambiguousness. (#19409)",Haseeb Khan,2020-07-20T17:26:41Z
b23ea02be507cc08747d49c1994f283514c5aeea,"Track event times per lane on the root (#19387)

* Pass event time to markRootUpdated

Some minor rearranging so that eventTime gets threaded through. No
change in behavior.

* Track event times per lane on the root

Previous strategy was to store the event time on the update object
and accumulate the most recent one during the render phase.

Among other advantages, by tracking them on the root, we can read the
event time before the render phase has finished.

I haven't removed the `eventTime` field from the update object yet,
because it's still used to compute the timeout. Tracking the timeout
on the root is my next step.",Andrew Clark,2020-07-17T17:47:39Z
faa697f4f9afe9f1c98e315b2a9e70f5a74a7a74,"Set current update lane priority for user blocking events (#19342)

* Set current update lane priority for user blocking events

* Update to use LanePriority and not use runWithPriority

* Remove unused imports

* Fix tests, and I missed ReactDOMEventListener

* Fix more tests

* Add try/finally and hardcode lane priorities instead

* Also hard code InputContinuousLanePriority in tests

* Remove un-needed exports

* Comment rollbacks",Ricky,2020-07-17T16:58:44Z
4c8c98ab9b669faf0280922932c51680ce6491bb,Sync latest useFocus/useFocusWithin changes (#19397),Dominic Gannaway,2020-07-17T15:26:40Z
51267c4ac9de8bf190505fbb7670ed99aae325f7,"Sync scheduling profiler marks and debug tracing to new reconciler fork (#19375, #19376, #19396)

* Make enableSchedulingProfiler flag static

* Copied debug tracing and scheduler profiling to .new fork and updated feature flags

* Move profiler component stacks behind a feature flag",Brian Vaughn,2020-07-17T15:24:26Z
aec934af7f182e0bda910f64972722b147a68657,Remove form event delegation flag (#19395),Dan Abramov,2020-07-17T13:19:39Z
a59f899a1d021b231f8bd830436708294d9022c0,Modern Event System: use focusin/focusout for onFocus/onBlur (#19186),Dominic Gannaway,2020-07-16T17:12:03Z
9102719baacb64738e9235bc80d3d7d9918cc74c,Tidy up React Scope API (#19352),Dominic Gannaway,2020-07-16T15:21:21Z
bc4cd92cd542c56b82c72a2f9e8ef2a8e5cb14a6,"Use jest-environment-jsdom-sixteen (#19288)

* Use jest-environment-jsdom-sixteen

* Update yarn.lock

* Dedupe new jest packages in yarn.lock

* Pull upstream changes",Ricky,2020-07-16T14:17:31Z
e387c98ffabdf3808d34910b4493093dd975ec69,Fix bug with enableLegacyFBSupport click handlers (#19378),Dominic Gannaway,2020-07-16T13:56:31Z
a226b9b44591e2af85388fa88ddf76b3f3a9de6c,"Effects list refactor continued: did-bailout flag (#19322)

* Effects list rewrite

* Improved deletions approach

Process deletions as we traverse the tree during commit, before we process other effects. This has the result of better mimicking the previous sequencing.

* Made deletions field nullable

* Revert (no longer necessary) change to ReactNative test

* Eagerly set Deletions effect on Fiber when adding child to deletions array

* Initialize deletions array to null

* Null out deletions array instead of splicing 🤡

* Removed TODO comment

* Initial exploration on a did-bailout flag

* fixed the rest of the bugs

* Rolled temporary didBailout attribute into subtreeTag

* addressed comments

* Removed DidBailout subtree tag

* Removed stale comment

* use while loop instead of recursion for siblings

* move bailout flag from while loop

* Removed some unnecessary Deletion effectTags from children

* Move Deletion effect assignment to deletions array initialization

Co-authored-by: Luna <lunaris.ruan@gmail.com>",Brian Vaughn,2020-07-16T13:10:00Z
fed4ae0247883050aab6d77d9a83f9b6399d9a45,DevTools 4.8.1 -> 4.8.2 (and CHANGELOG),Brian Vaughn,2020-07-15T16:37:08Z
a89854bc936668d325cac9a22e2ebfa128c7addf,"Fix Suspense-wrapping heuristic (and bump version numbers) (#19373)

* Fixed suspense wrapping heuristic

* Bump package numbers 16.13.1 -> 17.0.0-alpha.0 to fix DevTools Suspense heuristic",Brian Vaughn,2020-07-15T16:25:27Z
4961833dbf3ac885668020e329236ea6b2b09f9a,Don't build shallow renderer UMD bundles,Dan Abramov,2020-07-15T15:26:18Z
a9ba5283d9ad1b1a1fa7ae1eaa217ea8cf0c1c4c,"Disable DevTools minification (#19369)

DevTools isn't being downloaded like typical JavaScript, so bundle size concerns don't apply. Parsing is still a consideration (so I'm open for discussion here) but I think this change would provide a couple of benefits:
* People are more likely to *actually read* non-minified source code when e.g. a breakpoint is hit (as with the recent debugger statement)
* Component stacks will be easier to parse on bug reports",Brian Vaughn,2020-07-15T14:38:30Z
45eef8b6b5df27c661b3e33e579abc11b563c65b,Devtools: improve getID guard (#19364),Dominic Gannaway,2020-07-15T13:17:48Z
392277f0abc2251ea93b7debad4ae86cd0f1bdff,"Revert ""Scheduling profiler updates (#19334)"" (#19366)

This reverts commit 6d7555b014513125b0c229b9c6e45c903d974ff7.",Dominic Gannaway,2020-07-15T11:36:40Z
c604b69973c40410384fe2ca70b34325c67cd22d,"Revert ""Revert ""Fix createEventHandle bug with comment containers (#19348)"" (#19354)"" (#19365)

This reverts commit 566f613763d180a9bed110513c9fc453f2eca252.",Dominic Gannaway,2020-07-15T11:35:46Z
566f613763d180a9bed110513c9fc453f2eca252,"Revert ""Fix createEventHandle bug with comment containers (#19348)"" (#19354)

This reverts commit 147179ae82039f38fa1a9a72402f578af8fb3ea3.",Dominic Gannaway,2020-07-15T11:27:22Z
147179ae82039f38fa1a9a72402f578af8fb3ea3,Fix createEventHandle bug with comment containers (#19348),Dominic Gannaway,2020-07-14T12:09:39Z
6d7555b014513125b0c229b9c6e45c903d974ff7,"Scheduling profiler updates (#19334)

* Make enableSchedulingProfiler static for profiling+experimental builds

* Copied debug tracing and scheduler profiling to .new fork

* Updated test @gate conditions",Brian Vaughn,2020-07-14T02:20:53Z
9ea0f6752da28a91bdb56382367e2a07390cb733,"fix mistake in React devtools (#19336)

Co-authored-by: Пономаренко Богдан <b.ponomarenko@tinkoff.ru>",Bogdan Ponomarenko,2020-07-13T20:49:52Z
fbc63863692d291b50e55400673845f7c81aff61,Fix DevTools handling of empty Suspense tag for legacy renderer versions (#19337),Brian Vaughn,2020-07-13T20:21:56Z
d1f2143aa6f2bba622b244e296ccb89e1c6a7495,"Use RetryLanes instead of event time (follow up) (#19335)

Same logic as #19307. Uses RetryLanes instead of event time to
determine if a render includes new updates.",Andrew Clark,2020-07-13T17:37:33Z
fe19b4247b97c20b4c6af92c022fcfccb45e3148,eslint-plugin-react-hooks@4.0.8,Dan Abramov,2020-07-13T16:58:49Z
84479046f789be7ae19b410df4c6041e25a31a55,"reference not add to dependencies if only its type is used as typeof arg (#19316)

* reference not add to dependencies if only its type is used as typeof arg

* Add a few more tests",Bianca Del Carretto,2020-07-13T16:57:00Z
26472c88979bb60746a47a660415df80775d25f9,Bubble onSubmit/onReset behind a feature flag (#19333),Dan Abramov,2020-07-13T16:17:28Z
e2d73e91cce37d66f7b5ef7512b3c735dcef2256,chore: Build react-dom/test-utils in codesandbox deploy (#19321),Sebastian Silbermann,2020-07-13T15:15:37Z
61dd00db24bec6305bd72908d3617b9f2a5183da,Extract some of the tidy up changes from 19278 (#19315),Dominic Gannaway,2020-07-10T21:33:42Z
a2b4db05bc8ac1ff92ed914008260875e4c11284,eslint-plugin-react-hooks@4.0.7,Dan Abramov,2020-07-10T18:08:05Z
47915fd6e1858e8d3434caff9588237448a00b3f,"[ESLint] Fix a bug causing a too coarse dependency suggestion (#19313)

* Add regression test for ESLint rule

* Fix the issue",Dan Abramov,2020-07-10T18:02:08Z
d5d659062d156de67a62ed3fd11ad9c08034bfdc,Updated DevTools test snapshots,Brian Vaughn,2020-07-10T17:06:50Z
2562e758eaa023f7fbf849bc9eb295b1966b0154,Revise useFocus/useFocusWithin (#19310),Dominic Gannaway,2020-07-10T16:23:00Z
17efbf7d63f3e4abb75b65b9baecdfe1b84fb4d5,"[DevTools] Show HOC names in profiler (#19283)

* show hoc names in profiler

* Added hocDisplayNames.length check

Co-authored-by: Brian Vaughn <brian.david.vaughn@gmail.com>",Nick Reiley,2020-07-10T15:21:19Z
970fa122d8188bafa600e9b5214833487fbf1092,"Use lanes to check if a render is a Suspense retry (#19307)

Now that Suspense retries have their own dedicated set of lanes
(#19287), we can determine if a render includes only retries by checking
if its lanes are a subset of the retry lanes.

Previously we inferred this by checking
`workInProgressRootLatestProcessedEventTime`. If it's not set, that
implies that no updates were processed in the current render, which
implies it must be a Suspense retry. The eventual plan is to get rid of
`workInProgressRootLatestProcessedEventTime` and instead track event
times on the root; this change is one the steps toward that goal.

The relevant tests were originally added in #15769.",Andrew Clark,2020-07-10T13:58:05Z
2663a12eb3d47d172eb7b3f5137dfc39babed199,Tweak wording,Dan Abramov,2020-07-10T13:56:28Z
d4eadea6c7e72ce2a4891dd3f1589786c4d5142e,React DevTools 4.8.1,Dan Abramov,2020-07-10T12:20:53Z
8eaf05e0e835427c9231a6dd570c2819547959ac,DevTools: Make break-on-warn off by default (#19309),Dan Abramov,2020-07-10T13:11:32Z
14084be286d09df49d5410c751bc28f0180a54b2,"Refactor algorithm for next Lanes to work on (#19302)

Some clean up to make the Lanes type easier to maintain.

I removed the ""start"" and ""end"" range markers; they don't provide any
information that isn't already encoded in the bitmask for each range,
and there's no computation saved compared to the
`pickArbitraryLane` function.

The overall algorithm is largely the same but I did tweak some of the
details. For example, if the lanes for a given priority are already
being worked on, the previous algorithm would assign to the next
available lane, including the dedicated hydration lanes that exist
in between each priority.

The updated algorithm skips over the hydration lanes and goes to the
next priority level. In the rare instance when all the non-Idle update
lanes are occupied, it will pick an abitrary default lane. This will
have the effect of invalidating the current work-in-progress, and
indicates a starvation scenario.

Eventually, if there are too many interruptions, the expiration time
mechanism will kick in and force the update to synchronously finish.",Andrew Clark,2020-07-09T23:53:54Z
08b8e6e1dc41fec1ce315c9e5fe4b340af96cd66,DevTools 4.7.0 -> 4.8.0 (#19297),Brian Vaughn,2020-07-09T14:49:44Z
e760d1fb0fc38d9075131c384fb6eebe5cb43d8c,Fixed test script for DevTools build config (#19295),Brian Vaughn,2020-07-09T14:49:33Z
a5b4492950130f13733cc0bfa0888970d93e5588,Updates Electron version for react-devtools (#19280),Gianmarco,2020-07-09T14:13:26Z
6508ab3be8a4a79d18e46fac7318454307a51170,Fix typo in Overview doc for react-devtools (#19289),Rimil Dey,2020-07-09T13:13:15Z
965d08cfff50609eed5d3f2317145f7be762423d,"Add dedicated LanePriority for Suspense retries (#19287)

A ""retry"" is a special type of update that attempts to flip a Suspense
boundary from its placeholder state back to its primary/resolved state.

Currently, retries are given default priority, using the same algorithm
as normal updates and occupying range of lanes.

This adds a new range of lanes dedicated specifically to retries, and
gives them lower priority than normal updates.

A couple of existing tests were affected because retries are no longer
batched with normal updates; they commit in separate batches.

Not totally satisfied with this design, but I think things will snap more
into place once the rest of the Lanes changes (like how we handle
parallel Suspense transitions) have settled.",Andrew Clark,2020-07-09T04:09:22Z
766af5968a77c33cc1af0432247d678680bb7b19,"Move Scope API ref resolution to mutation phase (#19264)

* Move Scope API ref resolution to mutation phase",Dominic Gannaway,2020-07-08T22:41:39Z
c7805b8d57d2d2c41772bdfe66140bfe70529b8c,Use a custom jsdom fork (#19284),Dan Abramov,2020-07-08T20:26:54Z
e0e6b9c036abde428d3130738604fd5abb67aa8f,Add regression test for #19269 (#19282),Dan Abramov,2020-07-08T19:48:43Z
77e872217c7f4044ae4f96dd99bf999efb601040,"Improve readability of isValidElementType (#19251)

* improve readability

* replace condition by switch/case

* replace condition by switch/case

* remove unnecessary braces

* replace switch/case to ifs

* replace switch/case to ifs

* fix by multiline if statements

* fix multiple if statements",Behnam Mohammadi,2020-07-08T18:25:24Z
7b0ef42bccb58c78237702149707557554988a05,Update README.md,Dan Abramov,2020-07-08T17:30:18Z
d87220f217f17fda40f3a0b7eaf85bb0989372e4,"Add console group methods to dev disabled groups (#19069)

Co-authored-by: Dan Abramov <dan.abramov@gmail.com>",Giovanni Fumagalli,2020-07-08T16:28:49Z
f5ea39c18269921107ea70353d86958064889bea,Modern Event System: make on*Capture events use capture phase (#19221),Dominic Gannaway,2020-07-08T16:10:06Z
e18fb91852cc9386abc234c660f4c03903a4d663,"Text improvement (#19167)

text improvement in README.md",falguniraina,2020-07-08T16:07:27Z
40cddfeeb167d4964d82220142deb00f57fe197d,"Add user timing marks for scheduling profiler tool (#19223)

High level breakdown of this commit:

* Add a enableSchedulingProfiling feature flag.
* Add functions that call User Timing APIs to a new SchedulingProfiler file. The file follows DebugTracing's structure.
* Add user timing marks to places where DebugTracing logs.
* Add user timing marks to most other places where @bvaughn's original draft DebugTracing branch marks.
* Tests added
* More context (and discussions with @bvaughn) available at our internal PR MLH-Fellowship#11 and issue MLH-Fellowship#5.

Similar to DebugTracing, we've only added scheduling profiling calls to the old reconciler fork.

Co-authored-by: Kartik Choudhary <kartik.c918@gmail.com>
Co-authored-by: Kartik Choudhary <kartikc.918@gmail.com>
Co-authored-by: Brian Vaughn <brian.david.vaughn@gmail.com>",E-Liang Tan,2020-07-08T14:36:02Z
b85b47630be57c7031b0a9ab741cf858dc0ca215,"Fix state leaking when a function component throws on server render (#19212)

* add unit test asserting internal hooks state is reset

* Reset internal hooks state before rendering

* reset hooks state on error

* Use expect...toThrow instead of try/catch in test

* reset dev-only hooks state inside resetHooksState

* reset currentlyRenderingComponent to null",Phil MacCart,2020-07-08T02:10:23Z
6fd43211350fe018dbe4b0871eaec6a5beb52b33,eslint-plugin-react-hooks@4.0.6,Dan Abramov,2020-07-07T21:39:40Z
7c35cb20efb63c7c0bdd06e00259200a49c2343e,"[ESLint] Handle optional member chains (#19275)

* Rename internal variables

This disambiguates ""optional""/""required"" because that terminology is taken by optional chaining.

* Handle optional member chains

* Update comment

Co-authored-by: Ricky <rickhanlonii@gmail.com>

Co-authored-by: Ricky <rickhanlonii@gmail.com>",Dan Abramov,2020-07-07T20:34:16Z
dccf541ec534035a1ee768e3e493893e01e05e4d,Allow decoupleUpdatePriorityFromScheduler to be set (#19272),Ricky,2020-07-07T16:58:10Z
7ca1d861e85868dfb4e5c1fc9db4db3d94cdefc1,"[ESLint] Consistently treat optional chaining as regular chaining (#19273)

* Revert ""Fix ExhaustiveDeps ESLint rule throwing with optional chaining (#19260)""

This reverts commit 0f84b0f02b5579d780a9f54497007c4c84aaebb7.

* Re-add a test from #19260

* Remove all code for optional chaining support

* Consistently treat optional chaining as regular chaining

This is not ideal because our suggestions use normal chaining. But it gets rid of all current edge cases.

* Add more tests

* More consistency in treating normal and optional expressions

* Add regression tests for every occurrence of Optional*",Dan Abramov,2020-07-07T16:38:44Z
98390f11f65ea32bb0f187ef420dfbfd2c9fa3bc,Update useEvent implementation (#19271),Dominic Gannaway,2020-07-07T13:44:56Z
4eb9b1d2b4439853016a28091737cfdaa581b5db,Refactor createEventHandle signature (#19174),Dominic Gannaway,2020-07-07T12:05:06Z
97b96da2954ac58f06d237592b5e5243edde480f,Fix event replaying logic (#19269),Dominic Gannaway,2020-07-07T01:28:55Z
91a2e8173f1fadd2dfd4b12753ebcdc60986d42d,"Decouple update priority tracking from Scheduler package (#19121)

* Initial currentLanePriority implementation

* Minor updates from review

* Fix typos and enable flag

* Fix feature flags and lint

* Fix simple event tests by switching to withSuspenseConfig

* Don't lower the priority of setPending in startTransition below InputContinuous

* Move currentUpdateLanePriority in commit root into the first effect block

* Refactor requestUpdateLane to log for priority mismatches

Also verifies that the update lane priority matches the scheduler lane priority before using it

* Fix four tests by adding ReactDOM.unstable_runWithPriority

* Fix partial hydration when using update lane priority

* Fix partial hydration when using update lane priority

* Rename feature flag and only log for now

* Move unstable_runWithPriority to ReactFiberReconciler

* Add unstable_runWithPriority to ReactNoopPersistent too

* Bug fixes and performance improvements

* Initial currentLanePriority implementation

* Minor updates from review

* Fix typos and enable flag

* Remove higherLanePriority from ReactDOMEventReplaying.js

* Change warning implementation and startTransition update lane priority

* Inject reconciler functions to avoid importing src/

* Fix feature flags and lint

* Fix simple event tests by switching to withSuspenseConfig

* Don't lower the priority of setPending in startTransition below InputContinuous

* Move currentUpdateLanePriority in commit root into the first effect block

* Refactor requestUpdateLane to log for priority mismatches

Also verifies that the update lane priority matches the scheduler lane priority before using it

* Fix four tests by adding ReactDOM.unstable_runWithPriority

* Fix partial hydration when using update lane priority

* Fix partial hydration when using update lane priority

* Rename feature flag and only log for now

* Move unstable_runWithPriority to ReactFiberReconciler

* Bug fixes and performance improvements

* Remove higherLanePriority from ReactDOMEventReplaying.js

* Change warning implementation and startTransition update lane priority

* Inject reconciler functions to avoid importing src/

* Fixes from bad rebase",Ricky,2020-07-06T22:53:42Z
c3e42a962b2ea3b245e43f542bda7ea33a9715be,Fix master tests (#19267),Dominic Gannaway,2020-07-06T21:36:19Z
0c0aaeb6bcac90e27cf76e4b8365bb103ab05d21,Handle test-cli failure case for CI (#19265),Dominic Gannaway,2020-07-06T21:05:51Z
0f84b0f02b5579d780a9f54497007c4c84aaebb7,"Fix ExhaustiveDeps ESLint rule throwing with optional chaining (#19260)

Certain code patterns using optional chaining syntax causes
eslint-plugin-react-hooks to throw an error.

We can avoid the throw by adding some guards. I didn't read through the
code to understand how it works, I just added a guard to every place
where it threw, so maybe there is a better fix closer to the root cause
than what I have here.

In my test case, I noticed that the optional chaining that was used in
the code was not included in the suggestions description or output,
but it seems like it should be. This might make a nice future
improvement on top of this fix, so I left a TODO comment to that effect.

Fixes #19243",Joe Lencioni,2020-07-06T19:52:14Z
670c0376ea29b0217b8cba5db5a07e238b461fbd,Enable createEventHandle API for wWW test builds (#19262),Brian Vaughn,2020-07-06T19:19:50Z
26071abbe1eda6fb88dfaef9e7bce43f3a774818,"Refine event registration + event signatures (#19244)

* Refine event registration + event signatures

* Address feedback",Dominic Gannaway,2020-07-06T16:42:01Z
1cbaf48889c6362232d907e57ce6c132744445d0,"Add SSL support to React devtools standalone (#19191)


Co-authored-by: Brian Vaughn <brian.david.vaughn@gmail.com>",Ittai Baratz,2020-07-06T14:09:41Z
65c137768abf696ee1c79a026d6df3a166dd8553,Fix Flow from #19239 (#19242),Dominic Gannaway,2020-07-02T15:37:10Z
cd9046f81588c88b5f89b591a4a66b13e6f49075,Add some type detection (#19239),Son Ki-Kyun,2020-07-02T14:54:36Z
b6df4417c79c11cfb44f965fab55b573882b1d54,Remove event config (#19237),Dan Abramov,2020-07-01T23:26:29Z
991c3b8193bd6bcc53c23c79eddc659eb41a4c3a,"Make event config an implementation detail of each plugin (#19236)

* Merge two variables with same purpose

* Replace dispatchConfig with _reactName on event object",Dan Abramov,2020-07-01T23:03:17Z
b683c07ccce340b9d687683d5dd7347a4c866787,Remove TestUtils dependency on event registry (#19235),Dan Abramov,2020-07-01T21:54:28Z
9e7f5c02ca6a2ace31366b46e57087a343031f00,"Make event plugin injection statically resolvable (#19234)

* Make plugins ESM

* Resolve extractEvents statically

* Resolve eventTypes statically

* Fix flow types and inconsistent naming

* Move injection into the plugin system itself

* Fix Flow",Dan Abramov,2020-07-01T21:11:05Z
67eb6ff4a84204271232506aea77155507a32b17,Add Flow to ModernChangeEventPlugin (#19232),Dominic Gannaway,2020-07-01T20:49:03Z
75b6921d6429cc2d7456bd66684263ae63dc6abb,"Remove dead code from modern event system (#19233)

* Remove dead code from modern event system

* Remove SSR dependency on EventPluginRegistry",Dan Abramov,2020-07-01T20:04:14Z
9fba65efa50fe5f38e5664729d4aa6f85cf7be92,Enable modern event system and delete dead code (#19230),Dan Abramov,2020-07-01T16:43:34Z
e3f4eb7272d4ca0ee49f27577156b57eeb07cf73,Fork legacy-events folder into react-dom and react-native (#19228),Dan Abramov,2020-07-01T15:37:13Z
cd0275dcb2daf93c1de6deb199e711171eaa8a96,Fix responder logic in ReactDOMServerSelectiveHydration-test (#19227),Dominic Gannaway,2020-07-01T15:28:49Z
b231445f969709fe2da1e66cbc2630c314a16807,Move responder tests and remove dead code (#19226),Dan Abramov,2020-07-01T15:20:49Z
5707eeb2d2f13983b12cf56a0cdf242a21972dfe,"Run ReactBrowserEventEmitter test on bundles (#19225)

* Run ReactBrowserEventEmitter test on bundles

* Rm bad tests",Dan Abramov,2020-07-01T15:01:46Z
b2bac7311a5279f2e64fd5c38d6e78d2bf90e893,Remove React Flare Keyboard responder (#19222),Dominic Gannaway,2020-07-01T14:43:16Z
f918b0eb41e0eabb8e4dc2bcd20fb8a25654d68f,"Fix development mode hang when iframe is removed (#19220)

* Fix development mode hang when iframe is removed

* Also fix #16734",Dan Abramov,2020-07-01T14:33:29Z
8bff8987e513486bb96018b80d7edb02d095ed06,"Don't bailout after Suspending in Legacy Mode (#19216)

* Add a failing test for legacy Suspense blocking context updates in memo

* Add more test case coverage for variations of #17356

* Don't bailout after Suspending in Legacy Mode

Co-authored-by: Tharuka Devendra <tsdevendra1@gmail.com>",Dan Abramov,2020-06-30T21:06:46Z
f4097c1aef173ea0cb873bc18b47d1ef12bab4b3,"Added warning to <Context.Provider> in case no value prop is provided (#19054)

* added warning to context.provider in case no value prop

* update message

* updated message and pass undefined",Shailendra Gupta,2020-06-30T18:50:55Z
47ff31a77add22bef54aaed9d4fb62d5aa693afd,"Revert ""Add regression test for #18497 (#18538)"" (#19215)

This reverts commit e9c1445ba09ac0ae73465f28514f9aa45074b7c7.",Dan Abramov,2020-06-30T12:38:31Z
b621dab5d4a334386a751eec4ed67502492f6776,make link https (#19147),Vetrivel Chinnasamy,2020-06-30T11:43:52Z
fa32cf299f514a0daa5ccd16fd8595b5cc6bc18b,"Add regression tests where sync render causes later concurrent render to expire soon (#18608)

* Add a failing test for #17911

* Add more test cases where sync render causes later concurrent render to expire soon",jddxf,2020-06-30T11:42:59Z
1887c5d9466094595ba535b99471c3dae04310d9,eslint-plugin-react-hooks@4.0.5,Dan Abramov,2020-06-30T11:16:49Z
b0533fe33cbbd2c07f11bf3a1e97494a73698016,"fix(eslint-plugin-react-hooks): Support optional chaining when accessing prototype method inside useCallback and useMemo #19061 (#19062)

* fix(eslint-plugin-react-hooks): Support optional chaining when accessing prototype method #19061

* run prettier

* Add fix for #19043",Fred Vollmer,2020-06-30T11:14:00Z
e9c1445ba09ac0ae73465f28514f9aa45074b7c7,Add regression test for #18497 (#18538),Sophie Alpert,2020-06-30T11:09:05Z
9d9cf383c9c7114d5feb51f8092eb76a2c09d9b0,Fixed test script handling of unknown/additional args (#19209),Brian Vaughn,2020-06-29T19:36:45Z
3c1a7ac87c5b4903aa0de02d11bd9ec2590ad598,Move TOP_BEFORE_BLUR to bubble phase (#19197),Dominic Gannaway,2020-06-26T19:35:21Z
72bbcad160e9c2d27143f8bd617138a2790de3e9,"Add new test cli (#19184)

* Add new test cli

* Remove --variant accidentally added to test-persist

* s/test/tests

* Updates from review

* Update package.json tests

* Missed a release channel in circle.yaml

* Update config.yml to use just run: with test commands

* Update release-channel options and add build dir checks

* Update test args to use the new release-channel options

* Fix error in circle config.yml

* Fix a wrong condition for the --variant check

* Fix a wrong condition for the --persistent check

* Prettier

* Require build check for devtool tests as well",Ricky,2020-06-26T00:39:50Z
7d0e4150aa939ea843ab22bece1a415cbf2416cf,"Fix react-runtime `main` field (#19193)

The ""main"" field in this package points to a non-existent file. This fixes it.",Christoph Nakazawa,2020-06-25T16:17:42Z
ed94600fc6bbe0d6ea34a581672190e369b3d805,Remove unnecessary tag end from CommitRanked view (#19195),finico,2020-06-25T16:10:47Z
ffe516f3bf57a13e123411a9ca76b48915a00acb,use NoTimestamp instead of -1 (#19182),Chen Gang,2020-06-23T20:28:24Z
1425fcbb86285a665bb8f42866e8e61efe512923,"Re-enabled DebugTracing feature for old reconciler fork (#19161)

* Re-enabled DebugTracing feature for old reconciler fork

It was temporarily removed by @sebmarkbage via PR #18697. Newly re-added tracing is simplified, since the lane(s) data type does not require the (lossy) conversion between priority and expiration time values.

@sebmarkbage mentioned that he removed this because it might get in the way of his planned discrete/sync refactor. I'm not sure if that concern still applies, but just in case- I have only re-added it to the old reconciler fork for now.

* Force Code Sandbox CI to re-run",Brian Vaughn,2020-06-23T16:16:23Z
0836f62a5bd305d8f901e3b4645613e990f09d6e,Updates the DevTools test script to make it easier to test other URLs. (#19179),Brian Vaughn,2020-06-23T15:48:35Z
1cfd332fd7d6e26af259d14a992ecf9bfb216d9f,Shutdown DevTools Bridge synchronously when unmounting (#19180),Brian Vaughn,2020-06-23T15:48:04Z
5b98656909d46fff6da135a8e60ffdc529e432f5,"fix: use define property to overwrite console, close #19099 (#19123)

* fix: use define property to overwrite console, close #19099

* fix: lint error",Jack Works,2020-06-23T14:34:53Z
6ba25b96df5d4179bf8aba3c3fe1ace3dce28234,"Bugfix: Legacy Mode + DevTools ""force fallback"" (#19164)

DevTools has a feature to force a Suspense boundary to show a fallback.
This feature causes us to skip the first render pass (where we render
the primary children) and go straight to rendering the fallback.

There's a Legacy Mode-only codepath that failed to take this scenario
into account, instead assuming that whenever a fallback is being
rendered, it was preceded by an attempt to render the primary children.

SuspenseList can also cause us to skip the first pass, but the relevant
branch is Legacy Mode-only, and SuspenseList is not supported in
Legacy Mode.

Fixes a test that I had temporarily disabled when upstreaming the Lanes
implementation in #19108.",Andrew Clark,2020-06-19T18:06:42Z
d1d9054e097f788eb0e5ebc45c11a2fb4603f1b6,"Revert ""Re-enabled DebugTracing feature for old reconciler fork (#19142)"" (#19159)

This reverts commit cc7c1aece46a6b69b41958d731e0fd27c94bfc6c.",Luna Ruan,2020-06-19T01:18:56Z
090c6ed7515b63c9aa7c42659973bfc179691006,[eslint-plugin-react-hooks]: handling sparse array when no-inline callback (#19145),YeonJuan,2020-06-17T16:29:02Z
cc7c1aece46a6b69b41958d731e0fd27c94bfc6c,"Re-enabled DebugTracing feature for old reconciler fork (#19142)

It was temporarily removed by @sebmarkbage via PR #18697. Newly re-added tracing is simplified, since the lane(s) data type does not require the (lossy) conversion between priority and expiration time values.

@sebmarkbage mentioned that he removed this because it might get in the way of his planned discrete/sync refactor. I'm not sure if that concern still applies, but just in case- I have only re-added it to the old reconciler fork for now.",Brian Vaughn,2020-06-16T19:16:15Z
d4fc2c1457bdee52367df3ec2dc9348a12ab85b3,Fix spelling (#19084),阿林,2020-06-16T00:56:56Z
30b47103d4354d9187dc0f1fb804855a5208ca9f,Fix spelling errors and typos (#19138),Ricky,2020-06-15T23:59:44Z
655affa302437208e6f03c9ca6d170ea1707ace3,"Clarifications

Co-authored-by: shengxinjing <316783812@qq.com>",Rick Hanlon,2020-06-13T01:02:51Z
103ed08c46198d01119ef35c37d78c6bc89705db,"Remove shouldDeprioritizeSubtree from host config (#19124)

No longer being used.",Andrew Clark,2020-06-12T19:57:20Z
8f05f2bd6d131a39835d468622e248b231ccbf8e,"Land Lanes implementation in old fork (#19108)

* Add autofix to cross-fork lint rule

* replace-fork: Replaces old fork contents with new

For each file in the new fork, copies the contents into the
corresponding file of the old fork, replacing what was already there.

In contrast to merge-fork, which performs a three-way merge.

* Replace old fork contents with new fork

First I ran  `yarn replace-fork`.

Then I ran `yarn lint` with autofix enabled. There's currently no way to
do that from the command line (we should fix that), so I had to edit the
lint script file.

* Manual fix-ups

Removes dead branches, removes prefixes from internal fields.  Stuff
like that.

* Fix DevTools tests

DevTools tests only run against the old fork, which is why I didn't
catch these earlier.

There is one test that is still failing. I'm fairly certain it's related
to the layout of the Suspense fiber: we no longer conditionally wrap the
primary children. They are always wrapped in an extra fiber.

Since this has been running in www for weeks without major issues, I'll
defer fixing the remaining test to a follow up.",Andrew Clark,2020-06-12T03:05:15Z
7f28234f8468d23dac7980be55e1a20f86a7b915,"Enable component stacks everywhere except RN (#19120)

This would still affect test renderer and isomorphic in RN.",Sebastian Markbåge,2020-06-12T02:13:13Z
e3ccdf1544478e27ce2970562139d726c5ec992b,"Remove synamic modern event system flag for FB (#19059)

* Remove synamic modern event system flag for FB",Dominic Gannaway,2020-06-11T18:49:45Z
4c7036e807fa18a3e21a5182983c7c0f05c5936e,"Bugfix: Infinite loop in beforeblur event (#19053)

* Failing test: Infinite loop in beforeblur event

If the focused node is hidden by a Suspense boundary, we fire the
beforeblur event. Our check for whether a tree is being hidden isn't
specific enough. It should only fire when the tree is initially hidden,
but it's being fired for updates, too.

* Only fire beforeblur on visible -> hidden

Should only beforeblur fire if the node was previously visible. Not
during updates to an already hidden tree.

To optimize this, we should use a dedicated effect tag and mark it in
the render phase. I've left this for a follow-up, though. Maybe can
revisit after the planned refactor of the commit phase.

* Move logic to commit phase

isFiberSuspenseAndTimedOut is used elsewhere, so I inlined the commit
logic into the commit phase itself.",Andrew Clark,2020-06-01T16:01:21Z
1d85bb3ce13401644a5e345f8bc84522c59a951c,"Build FB specific Isomorphic Bundles (#19049)

We need this so we can version them separately and use different
feature flags than we use for OSS RN.

I put them in a separate facebook-react-native folder which won't go
into the RN GH repo. I plan on moving the renderers there too but not yet.",Sebastian Markbåge,2020-05-29T22:32:38Z
2efe63d99cdeb338077bf148babffd7bb599d182,"DevTools: Add break-on-warn feature (#19048)

This commit adds a new tab to the Settings modal: Debugging

This new tab has the append component stacks feature and a new one: break on warn

This new feature adds a debugger statement into the console override",Brian Vaughn,2020-05-29T21:34:43Z
89edb0eae34be30954bcbdbca69467c5b0fbcb20,Enable component stack locations in www (#19047),Sebastian Markbåge,2020-05-29T20:26:38Z
cb141681750c8221ac799074df09df2bb448c7a4,"Remove unnecessary throw catch (#19044)

This was originally added so you could use ""break on caught exceptions""
but that feature is pretty useless these days since it's used for feature
detection and Suspense.

The better pattern is to use the stack trace, jump to source and set a
break point here.

Since DevTools injects its own console.error, we could inject a ""debugger""
statement in there. Conditionally. E.g. React DevTools could have a flag
to toggle ""break on warnings"".",Sebastian Markbåge,2020-05-29T18:25:48Z
c03b8661a990401bf663d2175597ef8bb6947921,"Upgrade Closure Compiler (#19041)

The Symbol bug has now been fixed so we can remove the hack that renames
the global variable.",Sebastian Markbåge,2020-05-29T16:17:14Z
6d375f3078b6b58afb9c07dce3c5144344d8d3de,"Revert autofix lint (#19040)

I accidentally committed this since I had it on locally so I didn't have
to manually convert things to const.

However, this causes things to always pass lint since CI also runs this.",Sebastian Markbåge,2020-05-29T03:32:34Z
8f511754dbe3651e2e93b6264e2e0e230b936a38,Prettier wants me to change this (#19039),Sebastian Markbåge,2020-05-29T03:13:56Z
2e7cc949ae7c7ed5a583d15b4ea32c68c7730dab,"Remove www builds of fetch (#19038)

I don't think we'll ever use this just because we have such a unique set up
for network delivery so we'll use something custom for this case.

Also, we don't need a profiling build for this since it doesn't have an
entry point.",Sebastian Markbåge,2020-05-28T23:12:37Z
76f157e3dd18d0501b4ed083e54b444ce11d232f,"Add simple Node build (#19022)

The webpack plugin doesn't really need a separate prod and dev build.
It also needs to be ES2015 otherwise we can't extend native classes.",Sebastian Markbåge,2020-05-28T22:56:34Z
60afa3c11761e62d98c90b036890372c61bcc4c9,"Lint bundles using the bundle config instead of scanning for files (#19025)

* Lint bundles using the bundle config instead of scanning for files

This ensures that we look for all the files that we expect to see there.
If something doesn't get built we wouldn't detect it.

However, this doesn't find files that aren't part of our builds such as
indirection files in the root. This will need to change with ESM anyway
since indirection files doesn't work. Everything should be built anyway.

This ensures that we can use the bundles.js config to determine special
cases instead of relying on file system conventions.

* Run lint with flag",Sebastian Markbåge,2020-05-28T22:04:25Z
518ce9c25f18075214cb572e7dc240598090e648,"Add Lazy Elements Behind a Flag (#19033)

We really needed this for Flight before as well but we got away with it
because Blocks were lazy but with the removal of Blocks, we'll need this
to ensure that we can lazily stream in part of the content.

Luckily LazyComponent isn't really just a Component. It's just a generic
type that can resolve into anything kind of like a Promise.

So we can use that to resolve elements just like we can components.

This allows keys and props to become lazy as well.

To accomplish this, we suspend during reconciliation. This causes us to
not be able to render siblings because we don't know if the keys will
reconcile. For initial render we could probably special case this and
just render a lazy component fiber.

Throwing in reconciliation didn't work correctly with direct nested
siblings of a Suspense boundary before but it does now so it depends
on new reconciler.",Sebastian Markbåge,2020-05-28T21:16:35Z
4985bb0a80f5cbeaa61d21a7daf7da5ecff2d892,"Rename 17 to 18 in warnings (#19031)

We're not really supposed to refer to future versions by numbers.

These will all slip so these numbers don't make sense anymore.",Sebastian Markbåge,2020-05-28T17:25:39Z
86b4070ddb6bd2fcf22c904cfff07a04696b9495,Cleaned up passive effects experimental flags (#19021),Brian Vaughn,2020-05-28T15:32:37Z
607148673b3156d051d1fed17cd49e83698dce54,"Remove ReactComponentTreeHook from internals (#19032)

We don't really support mixing minor versions anymore anyway. But seems
safe to remove in 17.",Sebastian Markbåge,2020-05-28T03:41:13Z
43e59f29d6edbd5b968a895e1a8bef8af1479a77,"Delete Entries without Build Output from package.json and the build directory (#19029)

* Gate test

* Delete entrypoints without Build Outputs from package.json and build output

If an entry point exists in bundles.js but doesn't have any bundleTypes,
I delete that entry point file from the build directory. I also remove it
from the files field in package.json if it exists.

This allows us to remove bundles from being built in the stable release
channel.",Sebastian Markbåge,2020-05-28T02:43:08Z
e668f1b54f123c1a927d1bd80270db48c4842ee9,"Remove unstable-fire from package.json (#19026)

This hasn't existed for a while now.",Sebastian Markbåge,2020-05-28T00:07:25Z
0219925e022a43e141be05699500d8bca8d94d92,"Remove regenerator from noop (#19024)

This isn't used and it wouldn't work anyway.",Sebastian Markbåge,2020-05-27T23:14:46Z
c66ac10f4d6fdfb6e197b14f6828a3b2b36be49b,Lint classic www build (#19023),Sebastian Markbåge,2020-05-27T21:13:54Z
b41beb1a358c0db21e9a72725da19729f73c8310,"Revert ""Fix mistyped script arbitrary code execution vulnerability (#18660)"" (#19018)

This reverts commit e5cc1462b3e7be78306a1f6961ce82d942eb36d2.",Dan Abramov,2020-05-27T16:37:27Z
55cb0b7eeb0e539d89858b8ed69beabf7fe2fb46,"Only prepare extra stack frames if needed (#19014)

We currently prepare an extra stack frame before they're needed.
Particularly for propTypes. This causes problems as they can have
side-effects with the new component stacks and it's slow.

This moves it to be lazy.",Sebastian Markbåge,2020-05-27T15:43:50Z
9752d31f127037e8126177b0456ab1b0547eb2db,"Document `additionalHooks` option (#19005)

* Document `additionalHooks` option

* Update README.md

Co-authored-by: Aaron Pettengill <aaron.pettengill@echoman.com>
Co-authored-by: Dan Abramov <dan.abramov@gmail.com>",Aaron Pettengill,2020-05-27T14:27:43Z
b7ff888190578a415e5628ea760b5c419bd56da2,eslint-plugin-react-hooks@4.0.4,Dan Abramov,2020-05-27T00:23:00Z
18de3b6e7c8a93289d9df67339d876bba6ff3e0c,"Bug: Spawning hydration in response to Idle update (#19011)

* Bug: Spawning hydration in response to Idle update

Adds a test that fails in the new fork.

* Fix typos related to Idle priority

These are just silly mistakes that weren't caught by any of our tests.

There's a lot of duplication in the Lanes module right now. It's also
not super stable as we continue to refine our heuristics. Hopefully the
final state is simpler and less prone to these types of mistakes.",Andrew Clark,2020-05-27T01:53:50Z
9273e6585fba9d66901c29b2c4eaed1b5af52f2c,Disable DevTools build job to unblock master (#19012),Andrew Clark,2020-05-27T01:52:58Z
fb735423bb10ae7d23ae42470620e963b8110163,"Fix rollup validate script (#18900)

* Revert ""Revert ""deps: update ESLint version to v7 (#18897)"" (#18899)""

This reverts commit 84fd4b853fd64651abf0b84f4ca879a9e43a106a.

* fix rollup validate script",Toru Kobayashi,2020-05-27T00:19:32Z
8abc202c7fc73fdfcd9443b00d09d06da4b5cbb1,"[eslint-plugin-react-hooks] Prefer recommended eslint configuration (#18951)

* [eslint-plugin-react-hooks] Prefer recommended eslint configuration

* Update README.md

Co-authored-by: Dan Abramov <dan.abramov@gmail.com>",Julien Deniau,2020-05-27T00:08:41Z
4821d609e99f6bd6454279ee2a82448703d2f616,"fix(eslint-plugin-react-hooks): Added matching for nullish coalescing and optional chaining of dependencies, relates to #18985 (#19008)",Yann アウネ Eves,2020-05-27T00:07:10Z
a012858ba9e35f2eacbd0a63cdc157989d1fb884,Move isCustomComponent() function call outside of loop (#19007),Brian Vaughn,2020-05-26T20:41:27Z
67e130fc686f3e5d9e0404fddc6861333d81dc23,eslint-plugin-react-hooks@4.0.3,Dan Abramov,2020-05-26T15:11:08Z
bb2239dc90015ced86177adc522de568198e2edc,"Revert ""Feature: Add support to `exhaustive-deps` rule for any hook ending with `Effect` (#18580)"" (#19004)

This reverts commit 5ac9ca72dfb73a06157bb177cd695f6b77fc900e.",Dan Abramov,2020-05-26T15:08:50Z
03e6b8ba2fb1c2820d2a5286701ff2b40590b438,"Make LegacyHidden match semantics of old fork (#18998)

Facebook currently relies on being able to hydrate hidden HTML. So
skipping those trees is a regression.

We don't have a proper solution for this in the new API yet. So I'm
reverting it to match the old behavior.

Now the server renderer will treat LegacyHidden the same as a fragment,
with no other special behavior. We can only get away with this because
we assume that every instance of LegacyHidden is accompanied by a host
component wrapper. In the hidden mode, the host component is given a
`hidden` attribute, which ensures that the initial HTML is not visible.
To support the use of LegacyHidden as a true fragment, without an extra
DOM node, we will have to hide the initial HTML in some other way.",Andrew Clark,2020-05-26T01:16:53Z
3ca1904b37ad1f527ff5e31b51373caea67478c5,react-refresh@0.8.3,Dan Abramov,2020-05-23T13:26:26Z
0aa4cc544c2ef93f53eea9373a35228a99f71784,"Resolve an edge case where ref.node can be falsy (#18984)

Co-authored-by: Jimmy Cann <jimmy.cann@ironstar.io>",yjimk,2020-05-23T13:25:24Z
8f4dc3e5d005459058ed7ffc26c2fb76b845ce62,"Warn if MutableSource snapshot is a function (#18933)

* Warn if MutableSource snapshot is a function

useMutableSource does not properly support snapshots that are functions. In part this is because of how it is implemented internally (the function gets mistaken for a state updater function). To fix this we could just wrap another function around the returned snapshot, but this pattern seems problematic to begin with- because the function that gets returned might itself close over mutable values, which would defeat the purpose of using the hook in the first place.

This PR proposes adding a new DEV warning if the snapshot returned is a function. It does not change the behavior (meaning that a function could still work in some cases- but at least the current behavior prevents passing around a closure that may later become stale unless you're really intentional about it e.g. () => () => {...}).

* Replaced .warn with .error",Brian Vaughn,2020-05-21T23:14:29Z
142d4f1c00c66f3d728177082dbc027fd6335115,"useMutableSource hydration support (#18771)

* useMutableSource hydration support

* Remove unnecessary ReactMutableSource fork

* Replaced root.registerMutableSourceForHydration() with mutableSources option

* Response to PR feedback:

1. Moved mutableSources root option to hydrationOptions object
2. Only initialize root mutableSourceEagerHydrationData if supportsHydration config is true
3. Lazily initialize mutableSourceEagerHydrationData on root object",Brian Vaughn,2020-05-21T23:00:46Z
aefb97e6bb2874e48a08cb87366bc4ca3aa99a7d,"DevTools: Add root and renderer version to inspected props panel (#18963)

* DevTools: Add root and renderer version to inspected props panel
* Removed redundant .length check",Brian Vaughn,2020-05-21T21:40:49Z
74394aa8cbb7a1c18c34018b099a9b5ab10ef11c,"Add unstable_isNewReconciler to dispatcher (#18975)

This is a bit gross but I need to be able to access it without importing
the renderer.

There might be a better way but I need this to unblock internal bugfix.",Andrew Clark,2020-05-21T18:56:00Z
099f73710e5aec28b9d86bc3a8fdb1cad5a9f490,"DevTools: Improve error boundary (#18956)

1. Add support for dark mode
2. Add retry option for case where Profiler data is corrupted",Brian Vaughn,2020-05-21T18:21:22Z
730ae7afa2a2f620a77490ad4e2fbcc98f326da2,"Clear fiber.sibling field when clearing nextEffect (#18970)

* Clear fiber.sibling field when clearing nextEffect",Dominic Gannaway,2020-05-21T17:53:56Z
c93a6cb4d5d3d6a635680bc71e324417f3c5b65a,DevTools: Fix highlight updates Canvas side problem (#18973),Brian Vaughn,2020-05-21T17:04:37Z
f9bf828701e7ba430da45d86f11fde2f93cbc491,"Add `unstable_isNewReconciler export to FB builds (#18974)

Should check this at runtime instead of the GK",Andrew Clark,2020-05-21T17:03:59Z
4a3f779d67d7d7f69cb2340c788826b86b34ce05,Remove event pooling in the modern system (#18969),Dominic Gannaway,2020-05-21T12:54:05Z
22f7663f14f12ebd6174292931e94d2b352cf666,Profiler: Don't count timed out (hidden) subtrees in base duration (#18966),Brian Vaughn,2020-05-21T01:36:57Z
64f50c667a778c85dc8f1d56e26d881fada4c85a,"Remove disableHiddenPropDeprioritization flag (#18964)

This is rolled out to 100% public, so we can remove it.",Andrew Clark,2020-05-20T22:29:34Z
a30a1c6ef3a621a57e9372c8249439dbfd9a7375,Transfer actualDuration only once for SuspenseList (#18959),Sebastian Markbåge,2020-05-20T22:12:38Z
8b3b5c35245b3aa0b2802b51856fe9dad5bcb671,"Bugfix: Missing mode check in resetChildLanes (#18961)

Deferring a hidden tree is only supported in Concurrent Mode.

The missing check leads to an infinite loop when an update is scheduled
inside a hidden tree, because the pending work never gets reset.

This ""accidentally"" worked in the old reconciler because the heurstic
we used to detect offscreen trees was if `childExpirationTime`
was `Never`.

In the new reconciler, we check the tag instead. Which means we also
need to check the mode, like we do in the begin phase.

We should move this check out of the hot path. It shouldn't have been
in the hot path of the old reconciler, either.

Probably by moving `resetChildLanes` into the switch statement
in ReactFiberCompleteWork.",Andrew Clark,2020-05-20T06:10:49Z
95ea8ed47c8a92dd72d43349cdd2f12e6b48292a,"LegacyHidden: mode that defers without hiding (#18958)

Need this to unblock www. Not sure yet how we'll support this properly
long term.

While adding this, I noticed that the normal ""hidden"" mode of
LegacyHidden doesn't work properly because it doesn't toggle the
visibility of newly inserted nodes. This is fine for now since we only
use it via a userspace abstraction that wraps the children in an
additional node. But implementing this correctly is required for us
to start using it like a fragment, without the wrapper node.",Andrew Clark,2020-05-19T22:58:02Z
5aa967b69b255ede89c03dda8cd617b61c492cdb,"DevTools editable props tweaks (#18954)

1. Made non-editable prop text higher contrast (easier to read)
2. Also makes it stand out as different from dimmer placeholder text for ""new prop""",Brian Vaughn,2020-05-19T16:42:00Z
dbf2bba632a693df5a6c6becf1640c360bfb96c7,remove an unused ISSUE_TEMPLATE.md (#18953),Toru Kobayashi,2020-05-19T15:44:01Z
23309eb386777ee229cfb6f9b70fcb7c7123388b,DevTools 4.6.0 -> 4.7.0,Brian Vaughn,2020-05-18T21:16:04Z
d897c35ecfb7471b55e41933fd4d993b98dbf600,"[DevTools] Add Component Highlighting to Profiler (#18745)

Co-authored-by: Moji Izadmehr <m.eezadmehr@gmail.com>
Co-authored-by: Brian Vaughn <bvaughn@fb.com>",Nick Reiley,2020-05-18T18:13:16Z
081b565cd7397290a1418a0765004bf83e9a23f8,"[DevTools] enable Electron interactions on Linux & auto copy script tags (#18772)


Co-authored-by: Brian Vaughn <brian.david.vaughn@gmail.com>",Nick Reiley,2020-05-18T17:27:40Z
c390ab3643612dc08ca4bebadc5b0377e9e7eb79,"Add test for displayName on React.memo components (#18925)

* Add test for displayName on React.memo components

* Added extra memo displayName test

Co-authored-by: Brian Vaughn <brian.david.vaughn@gmail.com>",Sebastian Silbermann,2020-05-15T22:56:50Z
6ed5c2243f8a1d5983373d2865bd0b935f026f9e,"Add MIT license to use-subscription package (#18927)

This package is missing the license attribute (or a license file).

Being a sub-package of React, it should get the same license, however, none was specified.
A scan with `license_checker` would recognize this as `UNKNOWN`.",Gabriele Prestifilippo,2020-05-15T22:36:48Z
8dba6691d047c6b420b6b73bec6251914cd9fbba,Updated DevTools CHANGELOG for upcoming changes,Brian Vaughn,2020-05-15T17:50:39Z
dd2e36df33194ddd37844507dc6a88e0906df516,"Profiler: Skip reading element for imported data (#18913)

* skip reading element for imported data

* rename nodes & enable store lookup for components tab

* replace names

* Added some more test coverage; reverted rename

Co-authored-by: Brian Vaughn <bvaughn@fb.com>",Nick Reiley,2020-05-15T17:38:01Z
7c080902ef4ad7b061c0377ee72d0a343cf42ea5,"[DevTools] Improve HOC search UX (#18802)

Co-authored-by: Brian Vaughn <brian.david.vaughn@gmail.com>",Nick Reiley,2020-05-15T17:37:34Z
121af3143c7164a196420b080cb31d0ef07d5dff,"Update inaccurate mapChildren comment (#18931)

The function you provide will only be passed a child and an index. It will not be passed a key. This is confirmed in the source, the Flow types, and the jsdoc comments.",Ricky Vetter,2020-05-15T17:05:08Z
21dc41c3205b4f721ba97d2e54f1d3b5c38cb79a,"Simplify logic for mutable workInProgressSources (#18920)

isPrimaryRenderer is always constant for a given React build, so these two arrays do nothing.",Sophie Alpert,2020-05-14T21:30:44Z
0fb747f368635933f27d296be96c8edcf99cbdbc,"Add LegacyHidden to server renderer (#18919)

* Add LegacyHidden to server renderer

When the tree is hidden, the server renderer renders nothing. The
contents will be completely client rendered.

When the tree is visible it acts like a fragment.

The future streaming server renderer may want to pre-render these trees
and send them down in chunks, as with Suspense boundaries.

* Force client render, even at Offscreen pri",Andrew Clark,2020-05-14T18:28:11Z
b4a1a4980c98c6d8a7ced428a1adc9e278fec430,"Disable <div hidden /> API in old fork, too (#18917)

The motivation for doing this is to make it impossible for additional
uses of pre-rendering to sneak into www without going through the
LegacyHidden abstraction. Since this feature was already disabled in
the new fork, this brings the two closer to parity.

The LegacyHidden abstraction itself still needs to opt into
pre-rendering somehow, so rather than totally disabling the feature, I
updated the `hidden` prop check to be obnoxiously specific. Before, you
could set it to any truthy value; now, you must set it to the string
""unstable-do-not-use-legacy-hidden"".

The node will still be hidden in the DOM, since any truthy value will
cause the browser to apply a style of `display: none`.

I will have to update the LegacyHidden component in www to use the
obnoxious string prop. This doesn't block merge, though, since the
behavior is gated by a dynamic flag. I will update the component before
I enable the flag.",Andrew Clark,2020-05-14T03:01:10Z
9e5b2c94e63fdd007afcc21535f07b4f61b05ddc,"Add expando prop to disabledLog function (#18914)

This will enable it to be identified by Facebook infra even if the function name is mangled during DevTools build process.",Brian Vaughn,2020-05-14T00:03:50Z
fdb641629e82df6588c16e158978ac57d9aff9ba,"Fix useMutableSource tearing bug (#18912)

* Failing useMutableSource test

If a source is mutated after initial read but before subscription is set
up, it should still entangle all pending mutations even if snapshot of
new subscription happens to match.

Test case illustrates how not doing this can lead to tearing.

* Fix useMutableSource tearing bug

Fix is to move the entanglement call outside of the block that checks
if the snapshot has changed.",Andrew Clark,2020-05-13T21:28:17Z
33589f7423fa498c97001898af730c461a1fdc7d,"useMutableSource: ""Entangle"" instead of expiring (#18889)

* useMutableSource: ""Entangle"" instead of expiring

A lane is said to be entangled with another when it's not allowed to
render in a batch that does not also include the other lane.

This commit implements entanglement for `useMutableSource`. If a source
is mutated in between when it's read in the render phase, but before
it's subscribed to in the commit phase, we must account for whether the
same source has pending mutations elsewhere. The old subscriptions must
not be allowed to re-render without also including the new subscription
(and vice versa), to prevent tearing.

In the old reconciler, we did this by synchronously flushing all the
pending subscription updates. This works, but isn't ideal. The new
reconciler can entangle the updates without de-opting to sync.

In the future, we plan to use this same mechanism for other features,
like skipping over intermediate useTransition states.

* Use clz instead of ctrz to pick an arbitrary lane

Should be slightly faster since most engines have built-in support.",Andrew Clark,2020-05-13T18:33:32Z
43063fd8442c5dfa927b4cc423bae1bdbeac7132,eslint-plugin-react-hooks@4.0.2,Dan Abramov,2020-05-13T15:46:15Z
f6ff4c43dde9f208dcd3d8d7115cfedb4f3b8aa5,Update changelog,Dan Abramov,2020-05-13T15:45:50Z
487c693846dbe58a68a410c658699d27386323b3,"[eslint-plugin-react-hooks] useWithoutEffectSuffix fix (#18902) (#18907)

* [eslint-plugin-react-hooks] reproduce bug with a test and fix it (#18902)

Since we only reserve `-Effect` suffix, react-hooks/exhaustive-deps is
expected to succeed without warning on a custom hook which contains -Effect- in
the middle of it's name (but does NOT contain it as a suffix).

* [eslint-plugin-react-hooks] reproduced bug with a test and fix it

Since we only reserve `-Effect` suffix, react-hooks/exhaustive-deps is expected
to succeed without warning on a render helper which contains -use- in the middle
of it's name (but does NOT contain it as a prefix, since that would violate hook
naming convetion).

Co-authored-by: Boris Sergeyev <boris.sergeyev@quolab.com>",Boris Sergeev,2020-05-13T15:44:05Z
6514e4a179d7f7759f5aca348477c1299a4235ad,React Flare: fix PressLegacy preventDefault issue (#18904),Dominic Gannaway,2020-05-13T12:59:32Z
a3fccd2567bfa154a4b2154ef14203999804e39b,Fix Profiler root change error (#18880),Nick Reiley,2020-05-12T22:47:23Z
61f2a560e0c5a0a7d218c52a1b74b3f3592acb9b,Add experimental ReactDOM.createEventHandle (#18756),Dominic Gannaway,2020-05-12T19:24:25Z
84fd4b853fd64651abf0b84f4ca879a9e43a106a,"Revert ""deps: update ESLint version to v7 (#18897)"" (#18899)

This reverts commit 039ad34a059981b1ba972e205cea8347462cf492.",Dan Abramov,2020-05-12T19:06:14Z
14e554b3103cc009c86f48ed927f2552649600a6,Add missing changelog item,Dan Abramov,2020-05-12T18:18:26Z
80c4dea0d1da0012977c6c4b2ac7a8bd37154d50,Modern Event System: Add scaffolding for createEventHandle (#18898),Dominic Gannaway,2020-05-12T18:01:12Z
039ad34a059981b1ba972e205cea8347462cf492,deps: update ESLint version to v7 (#18897),Toru Kobayashi,2020-05-12T17:41:37Z
9f396bdd5d64be4ba02f0e74e12b686b626c3f1d,eslint-plugin-react-hooks@4.0.1,Dan Abramov,2020-05-12T16:21:53Z
c512aa008175f43315ad16cd9da86dc0c512c069,"[Blocks] Scaffolding react-fetch + first pass at node implementation (#18863)

* First pass at scaffolding out the Node implementation of react-data.

While incomplete, this patch contains some changes to the react-data
package in order to start adding support for Node.

The first part of this change accounts for splitting react-data/fetch
into two discrete entries, adding (and defaulting to) the Node
implementation.

The second part is sketching out a rough approximation of `fetch` for
Node. This implementation is not complete by any means, but provides a
starting point.

* Remove NodeFetch module and put it directly into ReactDataFetchNode.

* Replaced react-data with react-fetch.

This patch shuffles around some of the scaffolding that was in
react-data in favor of react-fetch. It also removes the additional
""fetch"" package in favor of something flatter.

* Tweak package organization

* Simplify and add a test

Co-authored-by: Dan Abramov <dan.abramov@me.com>",Richard Maisano,2020-05-12T16:21:45Z
e936034eecf3d882cb133a11a1b4afd98d0195c5,Add item to ESLint Hooks plugin changelog,Dan Abramov,2020-05-12T16:02:37Z
c3ff21e01bdf6269da222a3203392190d04de8d3,feat(eslint-plugin-react-hooks): Support ESLint 7.x (#18878),Michaël De Boey,2020-05-12T16:01:28Z
8b9c4d1688333865e702fcd65ad2ab7d83b3c33c,"Expose LegacyHidden type and disable <div hidden /> API in new fork (#18891)

* Expose LegacyHidden type

I will use this internally at Facebook to migrate away from
<div hidden />. The end goal is to migrate to the Offscreen type, but
that has different semantics. This is an incremental step.

* Disable <div hidden /> API in new fork

Migrates to the unstable_LegacyHidden type instead. The old fork does
not support the new component type, so I updated the tests to use an
indirection that picks the correct API. I will remove this once the
LegacyHidden (and/or Offscreen) type has landed in both implementations.

* Add gated warning for `<div hidden />` API

Only exists so we can detect callers in www and migrate them to the new
API. Should not visible to anyone outside React Core team.",Andrew Clark,2020-05-12T03:02:08Z
ef0bf8e31cda331cbee4d3acf74e76795e311391,"Revert ""Hard code enableComponentStacks in www (#18869)"" (#18890)

This reverts commit fd696df4729fb68cf5c3f1a8125524299a5892fc.",Dominic Gannaway,2020-05-11T22:29:24Z
e16703e6c7776ff39e30c448df075f48bdbe08ea,Modern Event System: revise ancestor logic (#18886),Dominic Gannaway,2020-05-11T21:09:52Z
2b9d7cf65fb5423a972b5dc920a3341b865085bf,"Devtools: Show inspectedElement `key` in right pane (#18737)

* Start MVP for showing inspected element key

* Add key in other places

* Add key from backend

* Remove unnecessary hydrateHelper call

* Hide copy button when no label

* Move above props

* Revert changes to InspectedElementTree.js

* Move key to left of component name

* Updated CSS

Co-authored-by: Brian Vaughn <brian.david.vaughn@gmail.com>",Karl Horky,2020-05-11T20:17:13Z
ddcc69c83b59ef0f895aa5020196e2ae9de36133,Added clear message for functional component starting with lowercase (#18881),Rohith Srivathsav,2020-05-10T00:52:11Z
539527b642101fbfc0b4ba614d7e253905f46b08,Don't cut off effects at end of list if hydrating (#18872),Sebastian Markbåge,2020-05-09T04:26:51Z
fd696df4729fb68cf5c3f1a8125524299a5892fc,"Hard code enableComponentStacks in www (#18869)

This is now fully rolled out.",Sebastian Markbåge,2020-05-09T01:14:54Z
6edaf6f764f23043f0cd1c2da355b42f641afd8b,"Detect and prevent render starvation, per lane (#18864)

* Detect and prevent render starvation, per lane

If an update is CPU-bound for longer than expected according to its
priority, we assume it's being starved by other work on the main thread.

To detect this, we keep track of the elapsed time using a fixed-size
array where each slot corresponds to a lane. What we actually store is
the event time when the lane first became CPU-bound.

Then, when receiving a new update or yielding to the main thread, we
check how long each lane has been pending. If the time exceeds a
threshold constant corresponding to its priority, we mark it as expired
to force it to synchronously finish.

We don't want to mistake time elapsed while an update is IO-bound
(waiting for data to resolve) for time when it is CPU-bound. So when a
lane suspends, we clear its associated event time from the array. When
it receives a signal to try again, either a ping or an update, we assign
a new event time to restart the clock.

* Store as expiration time, not start time

I originally stored the start time because I thought I could use this
in the future to also measure Suspense timeouts. (Event times are
currently stored on each update object for this purpose.) But that
won't work because in the case of expiration times, we reset the clock
whenever the update becomes IO-bound. So to replace the per-update
field, I'm going to have to track those on the room separately from
expiration times.",Andrew Clark,2020-05-08T19:47:51Z
62077431686a5c276a37f185fc5ebd1e128a7601,"[DevTools] Allow to continue dragging when leaving profiler picker (#18852)

Co-authored-by: Brian Vaughn <brian.david.vaughn@gmail.com>",Nick Reiley,2020-05-08T18:19:57Z
df14b5bcc163516fc0f1ad35e9b93732c66c1085,"add new IDs for each each server renderer instance and prefixes to distinguish between each server render (#18576)

There is a worry that `useOpaqueIdentifier` might run out of unique IDs if running for long enough. This PR moves the unique ID counter so it's generated per server renderer object instead. For people who render different subtrees, this PR adds a prefix option to `renderToString`, `renderToStaticMarkup`, `renderToNodeStream`, and `renderToStaticNodeStream` so identifiers can be differentiated for each individual subtree.",Luna Ruan,2020-05-08T03:46:27Z
69e732ac9d32ecb7251834af4209d46fff5d5102,"Disable Profiler commit filtering (#18862)

* Disable Profiler commit filtering

We used to filter ""empty"" DevTools commits, but it was error prone (see #18798). A commit may appear to be empty (no actual durations) because of component filters, but filtering these empty commits causes interaction commit indices to be off by N. This not only corrupts the resulting data, but also potentially causes runtime errors.

For that matter, hiding ""empty"" commits might cause confusion too. A commit *did happen* even if none of the components the Profiler is showing were involved.

* Restart flaky CI",Brian Vaughn,2020-05-08T00:07:20Z
fb3f0acad9ac0b5756724d53eddaa444767dca07,"Disable Webpack setImmediate polyfill for DevTools (#18860)

* Upgrade Webpack deps to latet

* Disable Webpack setImmediate polyfill",Brian Vaughn,2020-05-07T20:13:47Z
edf6eac8a181860fd8a2d076a43806f1237495a1,Don't cut off the tail of a SuspenseList if hydrating (#18854),Sebastian Markbåge,2020-05-07T06:51:46Z
55f5cdee01ed25548ab55f2902a295df4324260d,"Disable setState before mount in legacy mode (#18851)

We kind of ""support"" this pattern in legacy mode. It's only deprecated in
Concurrent Mode.",Sebastian Markbåge,2020-05-07T03:30:59Z
47ebc90b08be7a2e6955dd3cfd468318e0b8fdfd,"Put render phase update change behind a flag (#18850)

In the new reconciler, I made a change to how render phase updates
work. (By render phase updates, I mean when a component updates
another component during its render phase. Or when a class component
updates itself during the render phase. It does not include when
a hook updates its own component during the render phase. Those have
their own semantics. So really I mean anything triggers the ""`setState`
in render"" warning.)

The old behavior is to give the update the same ""thread"" (expiration
time) as whatever is currently rendering. So if you call `setState` on a
component that happens later in the same render, it will flush during
that render. Ideally, we want to remove the special case and treat them
as if they came from an interleaved event.

Regardless, this pattern is not officially supported. This behavior is
only a fallback. The flag only exists until we can roll out the
`setState` warnning, since existing code might accidentally rely on the
current behavior.",Andrew Clark,2020-05-07T02:19:14Z
6778c53c16a6cdbda04d22628a95f2e1627f3ef4,Modern Event System: fix bug in EnterLeave (#18849),Dominic Gannaway,2020-05-06T23:13:13Z
7eaa1d7e33e630274f9a6843cfe1d45f6ab7b4bd,Updated DevTools unstable_ API references (#18847),Brian Vaughn,2020-05-06T18:14:30Z
a71aa803a127fca462e56dcf0777a27fd8d36c3f,"[Release] Follow redirect when downloading tarball (#18845)

Adds -L option to `curl` command.

See: https://curl.haxx.se/docs/manpage.html#-L",Andrew Clark,2020-05-06T17:28:49Z
96f3b7d1c3e1d492d8ff645a586c18215abe2a50,"Warn if calling setState outside of render but before commit (#18838)

* Don't attempt to render the children of a dehydrated Suspense boundary

The DehydratedFragment tag doesn't exist so doing so throws.

This can happen if we schedule childExpirationTime on the boundary and
bail out.

* Warn if scheduling work on a component before it is committed",Sebastian Markbåge,2020-05-06T16:45:35Z
33c3af284cbbb228199f1e2bd369c6e8efd9763d,[Blocks Fixture] Remove remaining Blocks (#18840),Dan Abramov,2020-05-06T14:53:51Z
595d27bd73f0242052a8e0cb3ac7400e0ec58d12,"[Blocks Fixture] Drop the Blocks (#18837)

* [Blocks Fixture] Add a tiny router

* Add a way to load nested entrypoint

* Only expose URL params to nested routers

* Add keys to route definitions

* [Blocks Fixture] Drop the Blocks",Dan Abramov,2020-05-06T04:17:44Z
823dc581fea8814a904579e85a62da6d18258830,Modern Event System: fix EnterLeave plugin logic (#18830),Dominic Gannaway,2020-05-05T21:10:07Z
40e6029462b23ce80c4c5fbd4aa422de20b7545e,wrap SuspenseInstanceRetry callback so scheduler waits for it (#18805),Fernando Lores,2020-05-05T19:47:49Z
3cde22a84e246fc5361f038bf0c23405b2572c22,"Experimental test selector API (#18607)

Adds several new experimental APIs to aid with automated testing.

Each of the methods below accepts an array of ""selectors"" that identifies a path (or paths) through a React tree. There are four basic selector types:

* Component: Matches Fibers with the specified React component type
* Role: Matches Host Instances matching the (explicit or implicit) accessibility role.
* Test name: Matches Host Instances with a data-testname attribute.
* Text: Matches Host Instances that directly contain the specified text.
* There is also a special lookahead selector type that enables further matching within a path (without actually including the path in the result). This selector type was inspired by the :has() CSS pseudo-class. It enables e.g. matching a <section> that contained a specific header text, then finding a like button within that <section>.

API
* findAllNodes(): Finds all Host Instances (e.g. HTMLElement) within a host subtree that match the specified selector criteria.
* getFindAllNodesFailureDescription(): Returns an error string describing the matched and unmatched portions of the selector query.
* findBoundingRects(): For all React components within a host subtree that match the specified selector criteria, return a set of bounding boxes that covers the bounds of the nearest (shallowed) Host Instances within those trees.
* observeVisibleRects(): For all React components within a host subtree that match the specified selector criteria, observe if it’s bounding rect is visible in the viewport and is not occluded.
* focusWithin(): For all React components within a host subtree that match the specified selector criteria, set focus within the first focusable Host Instance (as if you started before this component in the tree and moved focus forwards one step).",Brian Vaughn,2020-05-05T17:37:46Z
c13a59c7d6f448a97e7f5a8ea4730fec93f9c445,Fix Blocks fixture,Dan Abramov,2020-05-05T17:14:06Z
7992ca10df497002e0e91bb5bfbc9661c9c85b88,"eslint-plugin-react-hooks: allow OptionalMemberExpression in deps (#18819) (#18820)

* eslint-plugin-react-hooks: allow OptionalMemberExpression in deps (#18819)

* add test case for #18819

* fix test

* run prettier",Kevin Lewis,2020-05-05T12:53:42Z
e028ce2ab7fbecb30d23cd34e91553ccbeb7bb8e,Modern Event System: ensure target ancestors are only host nodes (#18827),Dominic Gannaway,2020-05-05T12:10:05Z
4d124a4f67d9db6c6e97beab0dd8d7ae8a9177dd,"[Blocks Fixture] Misc updates (#18811)

* [Blocks Fixture] Update navigation buttons immediately

* Add more profile links

* Minor refactor

* Add subroutes to Profile",Dan Abramov,2020-05-05T10:53:02Z
fe7163e73dadceda2655736d97cdd745d7abc8ea,"Add unstable prefix to experimental APIs (#18825)

We've been shipping unprefixed experimental APIs (like `createRoot` and
`useTransition`) to the Experimental release channel, with the rationale
that because these APIs do not appear in any stable release, we're free
to change or remove them later without breaking any downstream projects.

What we didn't consider is that downstream projects might be tempted to
use feature detection:

```js
const useTransition = React.useTransition || fallbackUseTransition;
```

This pattern assumes that the version of `useTransition` that exists in
the Experimental channel today has the same API contract as the final
`useTransition` API that we'll eventually ship to stable.

To discourage feature detection, I've added an `unstable_` prefix to
all of our unstable APIs.

The Facebook builds still have the unprefixed APIs, though. We will
continue to support those; if we make any breaking changes, we'll
migrate the internal callers like we usually do. To make testing easier,
I added the `unstable_`-prefixed APIs to the www builds, too. That way
our tests can always use the prefixed ones without gating on the
release channel.",Andrew Clark,2020-05-05T05:25:41Z
cd4a96035fc262334e96e7ca2547b086d8a00dab,Remove old CM exports (#18710),Sebastian Markbåge,2020-05-05T04:39:57Z
9751935abfa5585623f3ee85bb3c4eff4154e376,Modern Event System: improve dispatching queue (#18799),Dominic Gannaway,2020-05-04T15:55:45Z
3e13d70984a0ff091e71c20e1b29209bd83342d4,[RN] Remove debugging invariant (#18813),Dan Abramov,2020-05-04T14:48:35Z
f6fcae58e9ea651da600b83278608da704e0b774,"[Blocks] Add Shell to Fixture (#18803)

* [Blocks] Add Feed page to fixture

* Add minimal routing

* Always show post with comments",Dan Abramov,2020-05-04T00:59:55Z
d830cd998490c12164da6a9e1ddff56daff80030,"[Blocks] Fix stale data on updates (#18810)

* [Blocks] Failing test for nested load

* Simplify the test

* Add a similar test that fails in PROD

* Copy .type when cloning work in progress",Dan Abramov,2020-05-04T00:43:51Z
64d4b8420495ed6685b9a48ce0295fa63c592bb9,"Rename Flight to Transport (#18808)

* Rename Flight to Transport

Flight is still the codename for the implementation details (like Fiber).

However, now the public package is react-transport-... which is only
intended to be used directly by integrators.

* Rename names",Sebastian Markbåge,2020-05-03T18:33:48Z
93e078ddf274636b0a40bd5501ce3549aec700fa,"Initial Lanes implementation (#18796)

See PR #18796 for more information.

All of the changes I've made in this commit are behind the
`enableNewReconciler` flag. Merging this to master will not affect the
open source builds or the build that we ship to Facebook.

The only build that is affected is the `ReactDOMForked` build, which is
deployed to Facebook **behind an experimental flag (currently disabled
for all users)**. We will use this flag to gradually roll out the new
reconciler, and quickly roll it back if we find any problems.

Because we have those protections in place, what I'm aiming for with
this initial PR is the **smallest possible atomic change that lands
cleanly and doesn't rely on too many hacks**. The goal has not been to
get every single test or feature passing, and it definitely is not to
implement all the features that we intend to build on top of the new
model. When possible, I have chosen to preserve existing semantics and
defer changes to follow-up steps. (Listed in the section below.)

(I did not end up having to disable any tests, although if I had, that
should not have necessarily been a merge blocker.)

For example, even though one of the primary goals of this project is to
improve our model for parallel Suspense transitions, in this initial
implementation, I have chosen to keep the same core heuristics for
sequencing and flushing that existed in the ExpirationTimes model: low
priority updates cannot finish without also finishing high priority
ones.

Despite all these precautions, **because the scope of this refactor is
inherently large, I do expect we will find regressions.** The flip side
is that I also expect the new model to improve the stability of the
codebase and make it easier to fix bugs when they arise.",Andrew Clark,2020-05-03T00:09:31Z
3c7d52c3d6d316d09d5c2479c6851acecccc6325,"Give unresolved lazy() a name in component stack (#16104)

* Give unresolved lazy() a name in component stack

* Normalize stack in tests

Co-authored-by: Sebastian Markbage <sema@fb.com>",Moti Zilberman,2020-05-01T23:41:39Z
333deb707d35e7d441dd2e4cc51c17b459860adf,"Remove hint to post feedback about exhaustive-deps rule (#18712)

The thread is closed and locked.",Benedikt Franke,2020-05-01T18:13:59Z
aa88589d0b56521512e864243744513ee1f93a81,"Refine experimental Scopes API (#18778)

* Refine experimental Scopes API",Dominic Gannaway,2020-05-01T18:01:43Z
d804f99b9e4409a1d11212fb889450ab75243d5b,eslint-plugin-react-hooks@4.0.0,Dan Abramov,2020-05-01T16:13:56Z
4e93b9364c978fd0c1224f8008dd19f88a82a048,Add changelog for eslint-plugin-react-hooks (#18801),Dan Abramov,2020-05-01T16:12:32Z
5ac9ca72dfb73a06157bb177cd695f6b77fc900e,"Feature: Add support to `exhaustive-deps` rule for any hook ending with `Effect` (#18580)

* Add test cases for support exhaustive deps ending in Effect

* Apply the exhaustive deps lint rule to any hook ending with Effect

* Add another test for supporting linting useXEffect hooks

Co-authored-by: Aaron Pettengill <aaron.pettengill@echoman.com>",Aaron Pettengill,2020-05-01T15:57:25Z
eab94403d772798dd45a47ec607f069215b2c8ad,Build Flight runtime for WWW (revert part of earlier change),Dan Abramov,2020-05-01T15:44:25Z
17dcc29cd1b53fe15b370631e1b781c070c01c7a,"Don't ""schedule"" discrete work if we're scheduling sync work (#18797)",Sebastian Markbåge,2020-05-01T15:43:15Z
9491f394723e140259d65f4d2b8a4d869fa4ba62,react-refresh@0.8.2,Dan Abramov,2020-05-01T15:18:13Z
43a1c727510b5f95c594ef88cfe431e9ad5c53c7,Don't build react-data for WWW,Dan Abramov,2020-05-01T15:11:40Z
01914a767317e72ebb24c12bc83630a85f2163c4,"Update bundle configs to not build some packages (#18800)

* Stop building old ReactCache for FB

* Update other bundle configs",Dan Abramov,2020-05-01T15:07:36Z
21670cf4be2da872bf0403aba060208b5ec357df,"[react-refresh/babel] Always insert registrations after var (#18794)

Previously, we transformed

```
let Foo = styled.div``;
```

to

```
let Foo = _c1 = styled.div``;
```

and then babel-plugin-styled-components would infer `_c1` as the display name. Widen the existing case that applies to function expressions to apply to any type of variable declaration.",Sophie Alpert,2020-05-01T15:01:11Z
914b57be27a8697d8ed83266466b30378af379f0,"Move legacy hidden API to new internal Fiber type (#18782)

* Unhide Suspense trees without entanglement

When a Suspense boundary is in its fallback state, you cannot switch
back to the main content without also finishing any updates inside the
tree that might have been skipped. That would be a form of tearing.

Before we fixed this in #18411, the way this bug manifested was that a
boundary was suspended by an update that originated from a child
component (as opposed to props from a parent). While the fallback was
showing, it received another update, this time at high priority. React
would render the high priority update without also including the
original update. That would cause the fallback to switch back to the
main content, since the update that caused the tree to suspend was no
longer part of the render. But then, React would immediately try to
render the original update, which would again suspend and show the
fallback, leading to a momentary flicker in the UI.

The approach added in #18411 is, when receiving a high priority update
to a Suspense tree that's in its fallback state is to bail out, keep
showing the fallback and finish the update in the rest of the tree.
After that commits, render again at the original priority. Because low
priority expiration times are inclusive of higher priority expiration
times, this ensures that all the updates are committed together.

The new approach in this commit is to turn `renderExpirationTime` into a
context-like value that lives on the stack. Then, when unhiding the
Suspense boundary, we can push a new `renderExpirationTime` that is
inclusive of both the high pri update and the original update that
suspended. Then the boundary can be unblocked in a single render pass.

An advantage of the old approach is that by deferring the work of
unhiding, there's less work to do in the high priority update.

The key advantage of the new approach is that it solves the consistency
problem without having to entangle the entire root.

* Create internal LegacyHidden type

This only exists so we can clean up the internal implementation of
`<div hidden={isHidden} />`, which is not a stable feature. The goal
is to move everything to the new Offscreen type instead. However,
Offscreen has different semantics, so before we can remove the legacy
API, we have to migrate our internal usage at Facebook. So we'll need
to maintain both temporarily.

In this initial commit, I've only added the type. It's not used
anywhere. The next step is to use it to implement `hidden`.

* Use LegacyHidden to implement old hidden API

If a host component receives a `hidden` prop, we wrap its children in
an Offscreen fiber. This is similar to what we do for Suspense children.

The LegacyHidden type happens to share the same implementation as the
new Offscreen type, for now, but using separate types allows us to fork
the behavior later when we implement our planned changes to the
Offscreen API.

There are two subtle semantic changes here. One is that the children of
the host component will have their visibility toggled using the same
mechanism we use for Offscreen and Suspense: find the nearest host node
children and give them a style of `display: none`. We didn't used to do
this in the old API, because the `hidden` DOM attribute on the parent
already hides them. So with this change, we're actually ""overhiding"" the
children. I considered addressing this, but I figure I'll leave it as-is
in case we want to expose the LegacyHidden component type temporarily
to ease migration of Facebook's internal callers to the Offscreen type.

The other subtle semantic change is that, because of the extra fiber
that wraps around the children, this pattern will cause the children
to lose state:

```js
return isHidden ? <div hidden={true} /> : <div />;
```

The reason is that I didn't want to wrap every single host component
in an extra fiber. So I only wrap them if a `hidden` prop exists. In
the above example, that means the children are conditionally wrapped
in an extra fiber, so they don't line up during reconciliation, so
they get remounted every time `isHidden` changes.

The fix is to rewrite to:

```js
return <div hidden={isHidden} />;
```

I don't anticipate this will be a problem at Facebook, especially since
we're only supposed to use `hidden` via a userspace wrapper component.
(And since the bad pattern isn't very React-y, anyway.)

Again, the eventual goal is to delete this completely and replace it
with Offscreen.",Andrew Clark,2020-05-01T02:37:27Z
ac533fde3dff81023809a92d3f5432df7fc2c418,"Prevent stale legacy root from clearing a container (DRAFT) (#18792)

* Don't clear a container because of a stale legacy root

* Added test repro for FB error",Brian Vaughn,2020-04-30T22:56:21Z
5b89d353e27a7ef07b40929f7343ebcc43bdaa58,Update react-refresh README,Dan Abramov,2020-04-30T14:43:21Z
3a9c373521eae259acbfcf98f0f9a543a6934c10,[Blocks] Add preload to fetch (#18785),Dan Abramov,2020-04-30T01:23:18Z
dd7f0deb947f836170cd1019dbbc2e44d30a21ce,"[Blocks] Use native fetch (#18784)

* [Blocks] Use native fetch

* Use the prototype

* Support arrayBuffer() and blob()

* ctor

* Simplify

* Use an expando

* Keep a map of formats

* Unused

* Remove unnecessary second property read

* Keep it simple

* Store the original thenable",Dan Abramov,2020-04-30T00:24:04Z
e71f5df9c32b3b486bf4efce861834389c395d47,Consistent useCallback implementation in ReactDOMServer (#18783),Alex Taylor,2020-04-29T23:22:10Z
515326753b15eb247493b1b5c657eee1bc515337,"[Blocks] Initial implementation of cache and data/fetch (#18774)

* Rename ReactCache -> ReactCacheOld

We still use it in some tests so I'm going to leave it for now. I'll start making the new one in parallel in the react package.

* Add react/unstable-cache entry point

* Add react-data entry point

* Initial implementation of cache and data/fetch

* Address review",Dan Abramov,2020-04-29T18:14:15Z
53d68b33ff6ff6acd04b5a077fdc86627d319e08,"[Blocks] Add Client Fixture (#18773)

* [Blocks] Add Client Fixture

* Add more TODOs",Dan Abramov,2020-04-29T01:23:09Z
88d0be6da5f0e3b57b010f852f90e603b38192da,Refactor ElementListenerMap (#18766),Dominic Gannaway,2020-04-28T20:53:51Z
ea2af878cc3fb139b0e08cf9bc4b2f4178429d69,"Root API should clear non-empty roots before mounting (#18730)

* Root API should clear non-empty roots before mounting

Legacy render-into-subtree API removes children from a container before rendering into it. The root API did not do this previously, but just left the children around in the document.

This commit adds a new FiberRoot flag to clear a container's contents before mounting. This is done during the commit phase, to avoid multiple, observable mutations.",Brian Vaughn,2020-04-28T20:07:42Z
d2ef120089b46a92702cedfd06139f92ce2ca1bf,Allow Node 14.x (#18755),Nick Reiley,2020-04-28T14:57:45Z
53ce0c34524349501cdadf4fea187671aba6a38d,Allow flushSync to noop in life cycles but with a warning (#18759),Sebastian Markbåge,2020-04-28T03:07:39Z
f342a2399fe121d84cf488adc8f22805b2278370,"SuspenseList: Reschedule at same priority (#18738)

SuspenseList progressively renders items even if the list is CPU bound,
i.e. it isn't waiting for missing data. It does this by showing a
fallback for the remaining items, committing the items in that have
already finished, then starting a new render to continue working on
the rest.

When it schedules that subsequent render, it uses a slightly lower
priority than the current render: `renderExpirationTime - 1`.

This commit changes it to reschedule at `renderExpirationTime` instead.

I don't know what the original motivation was for bumping the expiration
time slightly lower. The comment says that the priorities of the two
renders are the same (which makes sense to me) so I imagine it was
motivated by some implementation detail. I don't think it's necessary
anymore, though perhaps it was when it was originally written. If it is
still necessary, we should write a test case that illustrates why.",Andrew Clark,2020-04-26T03:27:35Z
cb7075399376f4b913500c4e377d790138b31c74,"Move hide/unhide logic to Offscreen component

The Offscreen component is not a public type, yet, but once it is, it
will share the same hide/unhide logic as Suspense children.",Andrew Clark,2020-04-23T23:38:15Z
cb48f974c9b2f8b51d78679eb137faef525bc590,"Wrap primary tree in Offscreen fiber type

Still just acts like a fragment. Next step is to move the hide/unhide
logic to the Offscreen implementation.",Andrew Clark,2020-04-23T20:48:09Z
ed01fdacceba20ffd004f0eae05ee07a6bb6a690,"Add Offscreen component type

Doesn't do anything special in this initial commit. Just acts like a
fragment.",Luna Ruan,2020-04-23T19:53:46Z
1df756ba2cfe60405d1f711d552484ee4bd77fb5,"Always wrap Suspense children in fragment (#18711)

Changes the internal fiber structure of the Suspense component. When a
Suspense boundary can't finish rendering and switches to a fallback, we
wrap the ""primary"" tree in a Fragment fiber and hide all its DOM nodes.
Then we mount the fallback tree into a separate Fragment fiber. Both
trees will render into the same parent DOM node (since React fragments
aren't part of the host tree), but the wrappers ensure that the children
in each tree are reconciled separately.

The old implementation would try to be clever and only add the fragment
wrapper when the fallback was in place, to save memory. This ""worked""
but was prone to regressions, since this is the only such place in the
codebase where we wrap existing nodes in a new node. (In other words,
it's a form of reparenting, which we don't implement elsewhere).

Since the original implementation, we've also added lots of additional
requirements to the Suspense component that have led to an explosion in
complexity, like limited support in Legacy Mode (with very different
semantics) and progressive hydration.

We're planning to add even more features to the Suspense boundary, so
we're going to sacrifice a bit more memory for a simpler implementation
that is less prone to regressions.

This ended up removing a lot of weird hacks and edge cases, but there
are still plenty left over. Most of the remaining complexity is related
to Legacy mode. That's the next thing we should aim to drop support for.

Because this is a risky change, I've only changed this in the new
reconciler. It blocks some other features, but as of now we're not
planning to implement those in the old reconciler. If that changes, this
should cherry-pick to the other implementation without much effort.",Andrew Clark,2020-04-25T07:09:19Z
db6513914f99c260090f26f0a547ee1432c934e6,"Make ExpirationTime an opaque type (#18732)

* Add LanePriority type

React's internal scheduler has more priority levels than the external
Scheduler package. Let's use React as the source of truth for tracking
the priority of updates so we have more control. We'll still fall back
to Scheduler in the default case. In the future, we should consider
removing `runWithPriority` from Scheduler and replacing the valid use
cases with React-specific APIs.

This commit adds a new type, called a LanePriority to disambiguate from
the Scheduler one.

(""Lane"" refers to another type that I'm planning. It roughly translates
to ""thread."" Each lane will have a priority associated with it.)

I'm not actually using the lane anywhere, yet. Only setting stuff up.

* Remove expiration times train model

In the old reconciler, expiration times are computed by applying an
offset to the current system time. This has the effect of increasing
the priority of updates as time progresses. Because we also use
expiration times as a kind of ""thread"" identifier, it turns out this
is quite limiting because we can only flush work sequentially along
the timeline.

The new model will use a bitmask to represent parallel threads that
can be worked on in any combination and in any order.

In this commit, expiration times and the linear timeline are still in
place, but they are no longer based on a timestamp. Effectively, they
are constants based on their priority level.

* Stop using ExpirationTime to represent timestamps

Follow up to the previous commit. This converts the remaining places
where we were using the ExpirationTime type to represent a timestamp,
like Suspense timeouts.

* Fork Dependencies and PendingInteractionMap types

These contain expiration times

* Make ExpirationTime an opaque type

ExpirationTime is currently just an alias for the `number` type, for a
few reasons. One is that it predates Flow's opaque type feature. Another
is that making it opaque means we have to move all our comparisons and
number math to the ExpirationTime module, and use utility functions
everywhere else.

However, this is actually what we want in the new system, because the
Lanes type that will replace ExpirationTime is a bitmask with a
particular layout, and performing operations on it will involve more
than just number comparisions and artihmetic. I don't want this logic to
spread ad hoc around the whole codebase.

The utility functions get inlined by Closure so it doesn't matter
performance-wise.

I automated most of the changes with JSCodeshift, with only a few manual
tweaks to stuff like imports. My goal was to port the logic exactly to
prevent subtle mistakes, without trying to simplify anything in the
process. I'll likely need to audit many of these sites again when I
replace them with the new type, though, especially the ones
in ReactFiberRoot.

I added the codemods I used to the `scripts` directory. I won't merge
these to master. I'll remove them in a subsequent commit. I'm only
committing them here so they show up in the PR for future reference.

I had a lot of trouble getting Flow to pass. Somehow it was not
inferring the correct type of the constants exported from the
ExpirationTime module, despite being annotated correctly.

I tried converting them them to constructor functions — `NoWork`
becomes `NoWork()` — and that made it work. I used that to unblock me,
and fixed all the other type errors. Once there were no more type
errors, I tried converting the constructors back to constants. Started
getting errors again.

Then I added a type constraint everywhere a constant was referenced.
That fixed it. I also figured out that you only have to add a constraint
when the constant is passed to another function, even if the function is
annotated. So this indicates to me that it's probably a Flow bug. I'll
file an issue with Flow.

* Delete temporary codemods used in previous commit

I only added these to the previous commit so that I can easily run it
again when rebasing. When the stack is squashed, it will be as if they
never existed.",Andrew Clark,2020-04-25T06:26:04Z
4b02b6611141255a8e8b6d8a997e87c865f06626,"[ESLint] Extend isHook to recognize those under PascalCase's namespace (#18722)

* Extend Namespace to PascalCase

* Add valid case for jest.useFakeTimer

* format

* format :(

* fix nits",Chang Yan,2020-04-24T01:50:52Z
30cee2f4c7eb9e4097f4dc55555f4682f79f2f1d,Modern Event System: register onMouseEnter for portals (#18720),Dominic Gannaway,2020-04-23T19:57:52Z
4e3545fd6fc62842d7dbf772923214474f59871a,ReactDOMEventListener: clean up module (#18713),Dominic Gannaway,2020-04-23T19:19:28Z
b58dec979a19d75d8f62fa5e8570ce33fbe50310,Remove unnecessary stack (#18707),Sebastian Markbåge,2020-04-23T16:44:37Z
a2fb84bebdc282e026d2b16ed2825c6f564095a7,"Disable prepareStackTrace while we're generating stacks (#18708)

This could be used to do custom formatting of the stack trace in a way
that isn't compatible with how we use it. So we disable it while we use
it.

In theory we could call this ourselves with the result of our stack.
It would be a lot of extra production code though. My personal opinion
is that this should always be done server side instead of on the client.

We could expose a custom parser that converts it and passes it through
prepareStackTrace as structured data. That way it's external and doesn't
have to be built-in to React.",Sebastian Markbåge,2020-04-23T16:16:58Z
b9fc3d8d59b0de5e4cec1619a3645494af169bae,DevTools temporarily disable prepareStackTrace before creating custom component stacks (#18717),Brian Vaughn,2020-04-23T16:02:42Z
b0cb137bcbd3a11d8eff3c2229cd6b8379d29785,"Don't dedupe using the stack (#18693)

We currently use the stack to dedupe warnings in a couple of places.
This is a very heavy weight way of computing that a warning doesn't need
to be fired.

This uses parent component name as a heuristic for deduping. It's not
perfect but as soon as you fix one you'll uncover the next. It might be a
little annoying but having many logs is also annoying.

We now have no special cases for stacks. The only thing that uses stacks in
dev is the console.error and dev tools. This means that we could
externalize this completely to an console.error patching module and drop
it from being built-in to react.

The only prod/dev behavior is the one we pass to error boundaries or the
error we throw if you don't have an error boundary.",Sebastian Markbåge,2020-04-23T02:02:11Z
571f5ad2d695e6373ffbd8e86b27c11dad3d22cf,"Temporarily Remove DebugTracing from the New Reconciler (#18697)

* Remove priority field from tracing

* Remove DebugTracing mode from new reconciler (temporarily)

* Run DebugTracing tests in the *other* variant so it's no on for new reconciler",Sebastian Markbåge,2020-04-22T03:14:40Z
2325375f4faaa77db6671e914da5220a879a1da8,Nit: add suffix _TIMEOUT consistently in scheduler (#18696),Sebastian Markbåge,2020-04-22T02:44:42Z
e5cc1462b3e7be78306a1f6961ce82d942eb36d2,"Fix mistyped script arbitrary code execution vulnerability (#18660)

* add test to trustedTypes-test.internal.js

* fix mistyped script arbitrary code execution

* Removed redundant .toLowerCase() call

Co-authored-by: Brian Vaughn <brian.david.vaughn@gmail.com>",Nick Reiley,2020-04-21T19:10:25Z
9025949d840c89619bed9bf06f5c14c25c141c5a,"Pin RNW to canary (#18692)

This unbreaks DevTools shell with the latest ReactDOM in master.",Brian Vaughn,2020-04-21T18:46:29Z
36cab2720ae2dbcaa63a90562ddb042101944f86,"DevTools: Improved ""native"" component stacks (#18656)

* DevTools console override handles new component stack format

DevTools does not attempt to mimic the default browser console format for its component stacks but it does properly detect the new format for Chrome, Firefox, and Safari.",Brian Vaughn,2020-04-21T18:46:11Z
940f48b999a3131e77b2545bd7ae252ef27ae6d1,"Avoid passing custom stacks to console.error (#18685)

* Detect double stacks in the new format in tests

* Remove unnecessary uses of getStackByFiberInDevAndProd

These all execute in the right execution context already.

* Set the debug fiber around the cases that don't have an execution context

* Remove stack detection in our console log overrides

We never pass custom stacks as part of the args anymore.

* Bonus: Don't append getStackAddendum to invariants

We print component stacks for every error anyway so this is just duplicate
information.",Sebastian Markbåge,2020-04-21T16:22:46Z
ff431b7fc43ee9022db094a673afbac7088bcfa2,Remove ReactDOM.useEvent and associated types+tests (#18689),Dominic Gannaway,2020-04-21T15:40:44Z
7b3934b34fe51ceb115ed9bb7836386bd8a7abc2,"Revert ""Pressable click fix (#18625)"" (#18688)

This reverts commit 5f7b175b35fa6faccb0da14e897dcda9c13d6031.",Dominic Gannaway,2020-04-21T10:08:30Z
80d39d8b5733d4ab22033aaf8b805de723e28fd1,Remove null sibling (#18687),Dominic Gannaway,2020-04-21T09:43:50Z
0960b7ba580b620202f7d245bb696aca71c63e37,"Upgrade fbjs-scripts (#18684)

* Upgrade fbjs-scripts

This script takes into account the NODE_ENV as part of jest cache keys.
This avoids flaky tests since we depend on different transforms in prod
and dev.

* Upgrade Fresh test to Babel 7 transform",Sebastian Markbåge,2020-04-21T01:20:03Z
5f7b175b35fa6faccb0da14e897dcda9c13d6031,"Pressable click fix (#18625)

* Update press-legacy to use native click events

* update tests for pressable change

* fix formatting issue

* Address comments. Bring back some tests, remove others. Cleanup

* Fix flow and lint errors

* formatting fix missed by yarn lint",Naman Goel,2020-04-20T22:13:17Z
4f59a149b8dd99e0e3f2b515e15b069c276c085b,Modern event system: fix selectionchange bug (#18680),Dominic Gannaway,2020-04-20T18:54:12Z
a152827ef697c55f89926f9b6b7aa436f1c0504e,"Refine the heuristics around beforeblur/afterblur (#18668)

* Refine the heuristics around beforeblur/afterblur",Dominic Gannaway,2020-04-20T18:32:22Z
707478e68a65734501b7f9189e89ff0fca1642d5,chore: Build react-dom/server in codesandbox CI (#18679),Sebastian Silbermann,2020-04-20T17:48:07Z
ffb6c6c07b1a6dcabd04b22a6a5afeab96d53ae2,"fix: skip dangerouslySetInnerHtml hydration warning if it's undefined (#18676)

* test: Add failing case for dangerouslySetInnerHtml=undefined

* fix: skip dangerouslySetInnerHtml warning if it's undefined

* test: add similar test that should trigger the warning

* chore: Remove redundant nullish check

* Poke yarn_test_www_variant which timed out

* test: Add smaller test for innerHTML=string to innerHTML=undefined",Sebastian Silbermann,2020-04-20T17:46:55Z
1078029af6ecf9f85c5235e4323b853b78d86da0,"Revert ""Revert focus event PRs (#18655)"" (#18671)

This reverts commit 58c895e59cd2822a9a7a67606d5fe7da5e09ba2a.",Dominic Gannaway,2020-04-20T15:00:33Z
96203240d3de3c290f3d6013a8cbcc7b38dc1740,"ReactDOM: remove unstable-native-dependencies bundle (#18483)

This is only used by react-native-web and will be replaced by a user-space
implementation. See: https://github.com/necolas/react-native-web/issues/1568",Nicolas Gallagher,2020-04-18T22:40:13Z
263bc5d54b6c9bde51328aa8c7ddd985f97db72d,"Fix incorrect unmounted state update warning (#18617)

* Fix incorrect unmounted state update warning

We detach fibers (which nulls the  field) when we commit a deletion, so any state updates scheduled between that point and when we eventually flush passive effect destroys won't have a way to check if there is a pending passive unmount effect scheduled for its alternate unless we also explicitly track this for both the current and the alternate.

This commit adds a new DEV-only effect type, `PendingPassiveUnmountDev`, to handle this case.",Brian Vaughn,2020-04-18T19:18:19Z
52a0d6b5ab73251ba646e16b08d49d5e870e494e,"Make Flow work with your editor (#18664)

We typecheck the reconciler against each one of our host configs.
`yarn flow dom` checks it against the DOM renderer, `yarn flow native`
checks it against the native renderer, and so on.

To do this, we generate separate flowconfig files.

Currently, there is no root-level host config, so running Flow
directly via `flow` CLI doesn't work. You have to use the `yarn flow`
command and pick a specific renderer.

A drawback of this design, though, is that our Flow setup doesn't work
with other tooling. Namely, editor integrations.

I think the intent of this was maybe so you don't run Flow against a
renderer than you intended, see it pass, and wrongly think you fixed
all the errors. However, since they all run in CI, I don't think this
is a big deal. In practice, I nearly always run Flow against the same
renderer (DOM), and I'm guessing that's the most common workflow for
others, too.

So what I've done in this commit is modify the `yarn flow` command to
copy the generated `.flowconfig` file into the root directory. The
editor integration will pick this up and show Flow information for
whatever was the last renderer you checked.

Everything else about the setup is the same, and all the renderers will
continue to be checked by CI.",Andrew Clark,2020-04-18T17:24:46Z
cfefc81ab2f5103bedc9e45701e8c00c0689f499,"Fix for #18657 (#18663)

* Failing test for #18657

* Remove incorrect priority check

I think this was just poor factoring on my part in #18411. Honestly it
doesn't make much sense to me, but my best guess is that I must have
thought that when `baseTime > currentChildExpirationTime`, the function
would fall through to the
`currentChildExpirationTime < renderExpirationTime` branch below.

Really I think just made an oopsie.

Regardless, this logic is galaxy brainéd. A goal of the Lanes refactor
I'm working on is to make these types of checks -- is there remaining
work in this tree? -- a lot easier to think about. Hopefully.",Andrew Clark,2020-04-17T23:32:55Z
e7163a9c2fd64e67f8caadd58033b109ce06d748,Revise isFiberInsideHiddenOrRemovedTree (#18662),Dominic Gannaway,2020-04-17T22:58:40Z
a4b1e65afc747b3559acbf684a6eec6dd2de65dc,"Remove redundant expiration time comparisons (#18620)

I'm going through all the expiration times comparisons as part of my
refactor and I noticed this one has a redundancy.",Andrew Clark,2020-04-17T18:48:05Z
58c895e59cd2822a9a7a67606d5fe7da5e09ba2a,"Revert focus event PRs (#18655)

* Revert ""Further cleanup to before/after blur (#18649)""

This reverts commit e2ccbf0358fafc8eb4470a45f5bca1cb97a4bba2.

* Revert ""Unify Flare FocusWithin responder with useFocusWithin (#18636)""

This reverts commit f24a9e70980c2b1d0eb8309eb751315ff39f96bd.",Dominic Gannaway,2020-04-17T15:27:19Z
e2ccbf0358fafc8eb4470a45f5bca1cb97a4bba2,Further cleanup to before/after blur (#18649),Dominic Gannaway,2020-04-17T10:52:29Z
c5c25d35a3d98daedd0b3907dd1d32d512a6798a,Fixed DevTools extension build:dev command (#18648),Brian Vaughn,2020-04-17T00:39:16Z
f8b084276dc2595b19d021c73664d9aab3fc9f7e,"Bump https-proxy-agent from 2.2.1 to 2.2.4 in /scripts/release (#18642)

Bumps [https-proxy-agent](https://github.com/TooTallNate/node-https-proxy-agent) from 2.2.1 to 2.2.4.
- [Release notes](https://github.com/TooTallNate/node-https-proxy-agent/releases)
- [Commits](https://github.com/TooTallNate/node-https-proxy-agent/compare/2.2.1...2.2.4)

Signed-off-by: dependabot[bot] <support@github.com>

Co-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>",dependabot[bot],2020-04-16T23:06:13Z
0f9b30f7b5cde7da32c9732e1ce3f156cd019b84,"Bump https-proxy-agent from 2.2.2 to 2.2.4 (#18643)

Bumps [https-proxy-agent](https://github.com/TooTallNate/node-https-proxy-agent) from 2.2.2 to 2.2.4.
- [Release notes](https://github.com/TooTallNate/node-https-proxy-agent/releases)
- [Commits](https://github.com/TooTallNate/node-https-proxy-agent/compare/2.2.2...2.2.4)

Signed-off-by: dependabot[bot] <support@github.com>

Co-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>",dependabot[bot],2020-04-16T23:06:06Z
32bb44c80ac64b3c96fa9e03b6ecb6dce6a0de6e,Clean up modern plugins to remove dead code (#18639),Dominic Gannaway,2020-04-16T19:10:23Z
0301f3e24ff98d50c6625ce394bc3a54d4b39c7b,Statically disable factory components for WWW (#18641),Dan Abramov,2020-04-16T18:42:30Z
f24a9e70980c2b1d0eb8309eb751315ff39f96bd,Unify Flare FocusWithin responder with useFocusWithin (#18636),Dominic Gannaway,2020-04-16T18:35:41Z
b1a083183c2f834e8550b4d7437bb0db1a51fdfb,Revert legacy plugin modules (#18638),Dominic Gannaway,2020-04-16T17:46:24Z
31977d1bb3eb1b144a45cafa133cfd17341490ab,Create copy of Legacy event plugins for Modern system (#18637),Dominic Gannaway,2020-04-16T15:09:05Z
c12c2c4c8c24e7b7456628e327c5d80ca4ec5377,"Run error replay test again new reconciler (#18628)

This is one of our few tests of an internal function. Need to import
the module that corresponds to the reconciler that's being tested.",Andrew Clark,2020-04-16T15:08:22Z
7b4403cecde88b5cfd35606772babaf27bb2b69e,"Fix requiring timers module with non standard require (#18632)

fixes #18589",Boris Serdiuk,2020-04-16T11:36:09Z
5f6b75dd265cd831d2c4e407c4580b9cd7d996f5,"ADD: disableRemotePlayback attribute for HTML5 videos (#18619)

* Add support for disableremoteplayback

* Order attributes alphabetically

Co-authored-by: Tom Brown <Thomas.Brown-CIC-UK@ibm.com>",Thomas Brown,2020-04-16T09:23:48Z
71964c03465730d38e4378e1e29fb26758201bad,Fix CI (#18626),Brian Vaughn,2020-04-16T05:27:24Z
50b9f154c130ab5489e206d68150cfaa18c867d6,Fix wrong command in config.yml (#18624),Andrew Clark,2020-04-16T04:44:38Z
22dc2e42bdc00d87fc19c5e75fc7c0b3fdcdc572,Add experimental DebugTracing logger for internal use (#18531),Brian Vaughn,2020-04-16T02:10:15Z
dbd262685551b81f47036333a43bd7e364d697d6,Update nvmrc to the same one used in CI (#18623),Andrew Clark,2020-04-15T23:03:02Z
b680174841bf13b233fef74cd600cf76ba5faf99,Delete mutableSourceFirstPendingUpdateTime (#18613),Andrew Clark,2020-04-15T14:47:37Z
cbafbf4f323ebbc13e9e24214978594d87e9b094,"Fix typo in TestFlags

Copypasta when setting up `old` and `new` aliases. `old` should mean
that `enableNewReconciler` is off.",Andrew Clark,2020-04-15T06:31:50Z
d53988a9d108b9480ff161a6e85ca26760ada615,ReactDOM.useEvent: add useEvent interaction hook (#18604),Dominic Gannaway,2020-04-14T21:06:46Z
bf55ea743496f4fb71df982af0324e322f25046c,Move beforeblur phase to prepareForCommit (#18609),Dominic Gannaway,2020-04-14T20:30:54Z
843b50cbe154bd6559236c3575ae707404292c23,Remove `.internal` from more test suites (#18597),Andrew Clark,2020-04-14T14:43:00Z
1d7bd52688aba5edd27d7019bce15180bb0f78aa,"remove unnecessary variable comparation (#18598)

Since it will continue when the props are equal in line 767, there is no need to compare whether they are not equal.",BetaSu,2020-04-14T13:53:47Z
b928fc030ad296eadab4a29b13e1af49a6286e60,"Delete flushSuspenseFallbacksInTests flag (#18596)

* Move renderer `act` to work loop

* Delete `flushSuspenseFallbacksInTests`

This was meant to be a temporary hack to unblock the `act` work, but it
quickly spread throughout our tests.

What it's meant to do is force fallbacks to flush inside `act` even in
Concurrent Mode. It does this by wrapping the `setTimeout` call in a
check to see if it's in an `act` context. If so, it skips the delay and
immediately commits the fallback.

Really this is only meant for our internal React tests that need to
incrementally render. Nobody outside our team (and Relay) needs to do
that, yet. Even if/when we do support that, it may or may not be with
the same `flushAndYield` pattern we use internally.

However, even for our internal purposes, the behavior isn't right
because a really common reason we flush work incrementally is to make
assertions on the ""suspended"" state, before the fallback has committed.
There's no way to do that from inside `act` with the behavior of this
flag, because it causes the fallback to immediately commit. This has led
us to *not* use `act` in a lot of our tests, or to write code that
doesn't match what would actually happen in a real environment.

What we really want is for the fallbacks to be flushed at the *end` of
the `act` scope. Not within it.

This only affects the noop and test renderer versions of `act`, which
are implemented inside the reconciler. Whereas `ReactTestUtils.act` is
implemented in ""userspace"" for backwards compatibility. This is fine
because we didn't have any DOM Suspense tests that relied on this flag;
they all use test renderer or noop.

In the future, we'll probably want to move always use the reconciler
implementation of `act`. It will not affect the prod bundle, because we
currently only plan to support `act` in dev. Though we still haven't
completely figured that out. However, regardless of whether we support a
production `act` for users, we'll still need to write internal React
tests in production mode. For that use case, we'll likely add our own
internal version of `act` that assumes a mock Scheduler and might rely
on hacks that don't 100% align up with the public one.",Andrew Clark,2020-04-14T03:02:18Z
f3f3d77c206b8d0d56216de06aec53d48d53cd6e,"Fix www tests not running in prod (#18593)

I made a mistake when setting these up a while ago. Setting the NODE_ENV
in the CircleCI config doesn't work because it's also set in the node
script command.

The number of test commands is getting out of control. Might need to fix
it at some point. Not today for me.",Andrew Clark,2020-04-13T22:53:13Z
bec7599067dddb41aa7c475e5bfa0a36ddf404a8,"Migrate conditional tests to gate pragma (#18585)

* Migrate conditional tests to gate pragma

I searched through the codebase for this pattern:

```js
describe('test suite', () => {
  if (!__EXPERIMENTAL__) { // or some other condition
    test(""empty test so Jest doesn't complain"", () => {});
    return;
  }

  // Unless we're in experimental mode, none of the tests in this block
  // will run.
})
```

and converted them to the `@gate` pragma instead.

The reason this pattern isn't preferred is because you end up disabling
more tests than you need to.

* Add flag for www release channels

Using a heuristic where I check a flag that is known to only be enabled
in www. I left a TODO to instead set the release channel explicitly in
each test config.",Andrew Clark,2020-04-13T21:45:52Z
6c43a62c0ff942329431cee709114b56bcda995f,"DevTools: Switch between ""Rendered At"" renders using keyboard arrow keys (#18586)

* Add keyboard navigation to fibre info sidebar

Co-authored-by: Brian Vaughn <brian.david.vaughn@gmail.com>",Chris Dobson,2020-04-13T20:00:13Z
0c3c27a718579066e08e1b2f5529deb67999e114,"Fix ""missing flag"" error for non-boolean types (#18592)

Not all test flags are booleans, e.g. the build type",Andrew Clark,2020-04-13T19:57:31Z
65237a237e15af3b3c983d46b401c6af988c5f74,"Codemod it.experimental to gate pragma (#18582)

* Codemod it.experimental to gate pragma

Find-and-replace followed by Prettier

* Delete it.experimental

Removes the API from our test setup script",Andrew Clark,2020-04-13T17:28:59Z
42d7c2e8f7cef5c7c874e0d9b148a284b7307d23,"Add pragma for feature testing: @gate (#18581)

* Add pragma for feature testing: @gate

The `@gate` pragma declares under which conditions a test is expected to
pass.

If the gate condition passes, then the test runs normally (same as if
there were no pragma).

If the conditional fails, then the test runs and is *expected to fail*.

An alternative to `it.experimental` and similar proposals.

Examples
--------

Basic:

```js
// @gate enableBlocksAPI
test('passes only if Blocks API is available', () => {/*...*/})
```

Negation:

```js
// @gate !disableLegacyContext
test('depends on a deprecated feature', () => {/*...*/})
```

Multiple flags:

```js
// @gate enableNewReconciler
// @gate experimental
test('needs both useEvent and Blocks', () => {/*...*/})
```

Logical operators (yes, I'm sorry):

```js
// @gate experimental && (enableNewReconciler || disableSchedulerTimeoutBasedOnReactExpirationTime)
test('concurrent mode, doesn\'t work in old fork unless Scheduler timeout flag is disabled', () => {/*...*/})
```

Strings, and comparion operators

No use case yet but I figure eventually we'd use this to gate on
different release channels:

```js
// @gate channel ===  ""experimental"" || channel === ""modern""
test('works in OSS experimental or www modern', () => {/*...*/})
```

How does it work?

I'm guessing those last two examples might be controversial. Supporting
those cases did require implementing a mini-parser.

The output of the transform is very straightforward, though.

Input:
```js
// @gate a && (b || c)
test('some test', () => {/*...*/})
```

Output:

```js
_test_gate(ctx => ctx.a && (ctx.b || ctx.c, 'some test'), () => {/*...*/});
```

It also works  with `it`, `it.only`, and `fit`. It leaves `it.skip` and
`xit` alone because those tests are disabled anyway.

`_test_gate` is a global method that I set up in our Jest config. It
works about the same as the existing `it.experimental` helper.

The context (`ctx`) argument is whatever we want it to be. I set it up
so that it throws if you try to access a flag that doesn't exist. I also
added some shortcuts for common gating conditions, like `old`
and `new`:

```js
// @gate experimental
test('experimental feature', () => {/*...*/})

// @gate new
test('only passes in new reconciler', () => {/*...*/})
```

Why implement this as a pragma instead of a runtime API?

- Doesn't require monkey patching built-in Jest methods. Instead it
  compiles to a runtime function that composes Jest's API.
- Will be easy to upgrade if Jest ever overhauls their API or we switch
  to a different testing framework (unlikely but who knows).
- It feels lightweight so hopefully people won't feel gross using it.
  For example, adding or removing a gate pragma will never affect the
  indentation of the test, unlike if you wrapped the test in a
  conditional block.

* Compatibility with console error/warning tracking

We patch console.error and console.warning to track unexpected calls
in our tests. If there's an unexpected call, we usually throw inside
an `afterEach` hook. However, that's too late for tests that we
expect to fail, because our `_test_gate` runtime can't capture the
error. So I also check for unexpected calls inside `_test_gate`.

* Move test flags to dedicated file

Added some instructions for how the flags are set up and how to
use them.

* Add dynamic version of gate API

Receives same flags as the pragma.

If we ever decide to revert the pragma, we can codemod them to use
this instead.",Andrew Clark,2020-04-13T17:14:34Z
72d00ab623502983ebd7ac0756cf2787df109811,"Fix Component Stacks for IE and Native Classes in Safari (#18575)

* Add more edge cases to fixture

Also adjust some expectations. I think the column should ideally be 1 but varies.
The Example row is one line off because it throws on the hook but should ideally be the component.
Similarly class components with constructors may have the line in the constructor.

* Account for the construct call taking a stack frame

We do this by first searching for the first different frame, then find
the same frames and then find the first different frame again.

* Throw controls

Otherwise they don't get a stack frame associated with them in IE.

* Protect against generating stacks failing

Errors while generating stacks will bubble to the root. Since this technique
is a bit sketchy, we should probably protect against it.

* Don't construct the thing that throws

Instead, we pass the prototype as the ""this"". It's new every time anyway.",Sebastian Markbåge,2020-04-11T02:39:02Z
98d410f5005988644d01c9ec79b7181c3dd6c847,"Build Component Stacks from Native Stack Frames (#18561)

* Implement component stack extraction hack

* Normalize errors in tests

This drops the requirement to include owner to pass the test.

* Special case tests

* Add destructuring to force toObject which throws before the side-effects

This ensures that we don't double call yieldValue or advanceTime in tests.

Ideally we could use empty destructuring but ES lint doesn't like it.

* Cache the result in DEV

In DEV it's somewhat likely that we'll see many logs that add component
stacks. This could be slow so we cache the results of previous components.

* Fixture

* Add Reflect to lint

* Log if out of range.

* Fix special case when the function call throws in V8

In V8 we need to ignore the first line. Normally we would never get there
because the stacks would differ before that, but the stacks are the same if
we end up throwing at the same place as the control.",Sebastian Markbåge,2020-04-10T20:32:12Z
8e13f099ab0c820c6f97547ad08244340e074266,"Overhauled release scripts and docs (#18569)

* Overhauled release scripts and docs",Brian Vaughn,2020-04-10T19:28:40Z
af1b039bdd5a8b5def5d51acad00b79e9b7b377c,"ESLint rule to forbid cross fork imports (#18568)

Modules that belong to one fork should not import modules that belong to
the other fork.

Helps make sure you correctly update imports when syncing changes across
implementations.

Also could help protect against code size regressions that might happen
if one of the forks accidentally depends on two copies of the same
module.",Andrew Clark,2020-04-10T01:11:34Z
50bdd75a601d8adaf5caf34712164d8884eeb68a,"Bubble errors if processing the error itself errors (#18567)

If we've tried completing an incomplete boundary once and failed, we don't
need to try again.",Sebastian Markbåge,2020-04-10T00:40:11Z
348ed0e93f1c9402538fa1cde980b3cce4ec69c4,"Don't return from perform/completeUnitOfWork  (#18566)

* Remove unnecessary workInProgress line

* Mutate workInProgress instead of returning

We were ambivalent about this before.

* Make handleError a void method too",Sebastian Markbåge,2020-04-10T00:12:04Z
b04c7fa28cadaa76fd8390963fe2b8d2a7962c50,"Decouple expiration times and transition timeouts (#17920)

We currently use the expiration time to represent the timeout of a
transition. Since we intend to stop treating work priority as a
timeline, we can no longer use this trick.

In this commit, I've changed it to store the event time on the update
object instead. Long term, we will store event time on the root as a map
of transition -> event time. I'm only storing it on the update object
as a temporary workaround to unblock the rest of the changes.",Andrew Clark,2020-04-08T22:25:53Z
dc630d3374e8b3d01cdf9e12a81eab9322ac6832,"Fork ReactFiberExpirationTime

I had thought I wouldn't fork this one because the new ""lanes"" module
will be pretty different, but I need it to make some
incremental changes.",Andrew Clark,2020-04-09T19:51:02Z
e5d06e34b6ef28fc4e7e92c054ab625898f7159f,"Revert ""Clear more Fiber fields in detachFiber (#18556)"" (#18562)

This reverts commit d48dbb824985166ecb7b2959db03090a8593dce0.",Dan Abramov,2020-04-09T19:45:02Z
cbab25bb5159e82f0d74b0d2ad84d7ad7dd3613a,"Exclude forwardRef and memo from stack frames (#18559)

We can't patch the row. We could give these their own ""built-in"" stack
frame since they're conceptually HoCs. However, from a debugging
perspective this is not very useful meta data and quite noisy. So I'm
just going to exclude them.",Sebastian Markbåge,2020-04-09T18:42:22Z
26fc16484e0586b65c7f549934354ef08f8d403e,"Script for syncing changes between forks (#18550)

Adds command `yarn merge-fork`.

```sh
yarn merge-fork --base-dir=packages/react-reconciler/src ReactFiberWorkLoop
```

This will take all the changes in `ReactFiberWorkLoop.new.js` and apply
them to `ReactFiberWorkLoop.old.js`.

You can merge multiple modules at a time:

```sh
yarn merge-fork \
  --base-dir=packages/react-reconciler/src \
  ReactFiberWorkLoop \
  ReactFiberBeginWork \
  ReactFiberCompleteWork \
  ReactFiberCommitWork
```

You can provide explicit ""old"" and ""new"" file names. This only works
for one module at a time:

```sh
yarn merge-fork \
  --base-dir=packages/react-reconciler/src \
  --old=ReactFiberExpirationTime.js \
  --new=ReactFiberLane.js
```

The default is to merge changes from the new module to the old one. To
merge changes in the opposite direction, use `--reverse`.

```sh
yarn merge-fork \
  --reverse \
  --base-dir=packages/react-reconciler/src \
  ReactFiberWorkLoop
```

By default, the changes are compared to HEAD. You can use `--base-ref`
to compare to any rev. For example, while working on a PR, you might
make multiple commits to the new fork before you're ready to backport
them to the old one. In that case, you want to compare to the merge
base of your PR branch:

```sh
yarn merge-fork \
  --base-ref=$(git merge-base HEAD origin/master)
  --base-dir=packages/react-reconciler/src \
  ReactFiberWorkLoop
```",Andrew Clark,2020-04-09T18:37:13Z
11ac10b44e9371b258bbf13faffd0dde5a7c0d0e,Port error boundaries test to yieldValue (#18558),Sebastian Markbåge,2020-04-09T18:13:01Z
d48dbb824985166ecb7b2959db03090a8593dce0,Clear more Fiber fields in detachFiber (#18556),Dominic Gannaway,2020-04-09T17:31:34Z
0566b706eefc41b1e5f479e0f745c229b8958ca2,Fix fiber memory leak with runAllPassiveEffectDestroysBeforeCreates (#18554),Dominic Gannaway,2020-04-09T14:35:07Z
ca1a703d216cc70e40ebb45533b44773ae7a32d8,Make enableLegacyFBSupport flag dynamic for www (#18551),Dominic Gannaway,2020-04-09T14:31:36Z
8cbce05be11f2375ca27bcd77b58253d29c84cad,Move plugins into their own directory (#18553),Dominic Gannaway,2020-04-09T13:18:33Z
c74f0b06467ca38cf8ab7bc77e896fc5f120612c,Update stale.yml,Dan Abramov,2020-04-09T12:36:11Z
4c6470cb3b821f3664955290cd4c4c7ac0de733a,"Point ReactDOMForked to the new implementation

Updates Rollup, Jest, and Flow configuration to point to the new
entry points.",Andrew Clark,2020-04-09T06:13:04Z
17f582e0453b808860be59ed3437c6a426ae52de,"Add forked copies of reconciler modules

All changes in this commit were generated by the following commands.

Copy each module that ends with `.old` to a new file that ends
with `.new`:

```sh
for f in packages/react-reconciler/src/*.old.js; do cp ""$f"" ""$(echo ""$f"" | sed s/\.old/\.new/)""; done
```

Then transform the internal imports:

```sh
grep -rl --include=""*.new.js"" '.old' packages/react-reconciler/src/| xargs sed -i '' ""s/\.old\'/\.new\'/g""
```",Andrew Clark,2020-04-09T06:11:23Z
376d5c1b5aa17724c5fea9412f8fcde14a7b23f1,"Split cross-package types from implementation

Some of our internal reconciler types have leaked into other packages.
Usually, these types are treated as opaque; we don't read and write
to its fields. This is good.

However, the type is often passed back to a reconciler method. For
example, React DOM creates a FiberRoot with `createContainer`, then
passes that root to `updateContainer`. It doesn't do anything with the
root except pass it through, but because `updateContainer` expects a
full FiberRoot, React DOM is still coupled to all its fields.

I don't know if there's an idiomatic way to handle this in Flow. Opaque
types are simlar, but those only work within a single file. AFAIK,
there's no way to use a package as the boundary for opaqueness.

The immediate problem this presents is that the reconciler refactor will
involve changes to our internal data structures. I don't want to have to
fork every single package that happens to pass through a Fiber or
FiberRoot, or access any one of its fields. So my current plan is to
share the same Flow type across both forks. The shared type will be a
superset of each implementation's type, e.g. Fiber will have both an
`expirationTime` field and a `lanes` field. The implementations will
diverge, but not the types.

To do this, I lifted the type definitions into a separate module.",Andrew Clark,2020-04-09T06:48:24Z
d686f3f16a796025ce32cfb431b70eef6de1934e,Add `.old` prefix to reconciler modules,Andrew Clark,2020-04-09T02:44:52Z
147bdef11bbeb8f4aef18c56d53ec1591fce8653,"Port more tests to the Scheduler.unstable_yieldValue pattern and drop internal.js (#18549)

* Drop the .internal.js suffix on some files that don't need it anymore

* Port some ops patterns to scheduler yield

* Fix triangle test to avoid side-effects in constructor

* Move replaying of setState updaters until after the effect

Otherwise any warnings get silenced if they're deduped.

* Drop .internal.js in more files

* Don't check propTypes on a simple memo component unless it's lazy

Comparing the elementType doesn't work for this because it will never be
the same for a simple element.

This caused us to double validate these. This was covered up because in
internal tests this was deduped since they shared the prop types cache
but since we now inline it, it doesn't get deduped.",Sebastian Markbåge,2020-04-09T03:54:54Z
b014e2d5e377a94bbf8d94d9a2602ce05c184e38,"Don't use closures in DevTools injection (#18278)

* Don't use closures in DevTools injection

Nested closures are tricky. They're not super efficient and when they share
scope between multiple closures they're hard for a compiler to optimize.
It's also unclear how many versions will be created.

By hoisting things out an just make it simple calls the compiler can do
a much better job.

* Store injected hook to work around fast refresh",Sebastian Markbåge,2020-04-09T00:57:17Z
5474a83e258b497584bed9df95de1d554bc53f89,"Disable console.logs in the second render pass of DEV mode double render (#18547)

* Disable console log during the second rerender

* Use the disabled log to avoid double yielding values in scheduler mock

* Reenable debugRenderPhaseSideEffectsForStrictMode in tests that can",Sebastian Markbåge,2020-04-08T23:43:51Z
b225d4f2614844a939482ef33baa84aa76bcf402,"Revert ""Revert ""Refactor commitPlacement to recursively insert nodes (#17996)"" (#18517)"" (#18540)

This reverts commit e69ca310ea56b6f2f510dd463902405285953432.",Dan Abramov,2020-04-08T10:22:02Z
241103a6fb8544077579c4c1458f367510d92934,"Fix bailout broken in lazy components due to default props resolving (#18539)

* Add failing tests for lazy components

* Fix bailout broken in lazy components due to default props resolving

We should never compare unresolved props with resolved props. Since comparing
resolved props by reference doesn't make sense, we use unresolved props in that
case. Otherwise, resolved props are used.

* Avoid reassigning props warning when we bailout",jddxf,2020-04-08T09:58:57Z
2dddd1e00cdadad1783aa55ac65a28634590e9c1,"Bugfix: Render phase update causes remaining updates in same component to be dropped (#18537)

* Bugfix: Render phase update leads to dropped work

Render phase updates should not affect the `fiber.expirationTime` field.
We don't have to set anything on the fiber because we're going to
process the render phase update immediately.

We also shouldn't reset the `expirationTime` field in between render
passes because it represents the remaining work left in the update
queues. During the re-render, the updates that were skipped in the
original pass are not processed again.

I think my original motivation for using this field for render phase
updates was so I didn't have to add another module level variable.

* Add repro case for #18486

Co-authored-by: Dan Abramov <dan.abramov@me.com>",Andrew Clark,2020-04-08T02:17:01Z
2def7b3caf4b15ade69eb16b5ec87afa0dcd7992,"More robust fix for #18515 (#18535)

* Add another test for #18515 using pings

Adds a regression test for the same underlying bug as #18515 but using
pings.

Test already passes, but I confirmed it fails if you revert the fix
in #18515.

* Set nextPendingLevel after commit, too",Andrew Clark,2020-04-08T01:52:31Z
948fad357b41002f7e9139211464470b3c0462e8,Improve detachFiber (#18536),Dominic Gannaway,2020-04-08T00:45:23Z
03de849af03996b7477420c97de7741ce1214149,"Make uncontrolled -> controlled warning clearer (#17070)

* Make uncontrolled -> controlled warning clearer

* Update phrasing, mirror for opposite direction

* Remove unused substitution

* Update warning tests

* Literally got these backwards, womp womp

* Rerere-fix tests",Carl Vitullo,2020-04-07T22:19:56Z
ddc4b65cfe17b3f08ff9f18f8804ff5b663788c8,"Clear finished discrete updates during commit phase (#18515)

* Reproduce a bug where `flushDiscreteUpdates` causes fallback never to be committed

* Ping suspended level when canceling its timer

Make sure the suspended level is marked as pinged so that we return back
to it later, in case the render we're about to start gets aborted.
Generally we only reach this path via a ping, but we shouldn't assume
that will always be the case.

* Clear finished discrete updates during commit phase

If a root is finished at a priority lower than that of the latest pending discrete
updates on it, these updates must have been finished so we can clear them now.
Otherwise, a later call of `flushDiscreteUpdates` would start a new empty render
pass which may cause a scheduled timeout to be cancelled.

* Add TODO

Happened to find this while writing a test. A JSX element comparison
failed because one of them elements had a functional component as an
owner, which should ever happen.

I'll add a regression test later.

Co-authored-by: Andrew Clark <git@andrewclark.io>",jddxf,2020-04-07T20:34:41Z
d53a4dbbc2514f5986630844f315a8faac7e024d,Export unstable_useEvent for www FB ReactDOM builds (#18532),Dominic Gannaway,2020-04-07T20:32:38Z
8edcd03b6450ef1d6b78fdb14b8f75682ae0589e,"DevTools Profiler: Fix ""cannot read property 'memoizedState' of null"" (#18522)",Brian Vaughn,2020-04-07T17:30:25Z
e8ac48f90b057cfb50d17138ca4b98c51d25bb42,Fix whitespace problem wiht DevTools Components search (#18527),Brian Vaughn,2020-04-07T17:28:21Z
dc49ea108c3a33fcc717ef346847dd1ad4d14f66,"Filter certain DOM attributes (e.g. src) if value is empty string (#18513)

* Filter certain DOM attributes (e.g. src, href) if their values are empty strings

This prevents e.g. <img src=""""> from making an unnecessar HTTP request for certain browsers.

* Expanded warning recommendation

* Improved error message

* Further refined error message",Brian Vaughn,2020-04-07T16:52:36Z
bce982b7993dfad7019c0240f1a8435454dd8cb3,Change stalebot messages (#18524),Dan Abramov,2020-04-07T16:30:45Z
32621a354ffe1385c65630f16c93956569823678,Improved Profiler tooltip confusing/misleading wording (#18523),Brian Vaughn,2020-04-07T16:26:50Z
e69ca310ea56b6f2f510dd463902405285953432,"Revert ""Refactor commitPlacement to recursively insert nodes (#17996)"" (#18517)

This reverts commit df5faddcc2ad27be5700823d4f5367e5e9ae4620.",Dan Abramov,2020-04-07T12:41:51Z
3278d242184a13add3f25f683b77ef9a6a2305f3,"Add useOpaqueIdentifier Hook (#17322)

* Add useOpaqueIdentifier Hook

We currently use unique IDs in a lot of places. Examples are:
  * `<label for=""ID"">`
  * `aria-labelledby`

This can cause some issues:
  1. If we server side render and then hydrate, this could cause an
     hydration ID mismatch
  2. If we server side render one part of the page and client side
     render another part of the page, the ID for one part could be
     different than the ID for another part even though they are
     supposed to be the same
  3. If we conditionally render something with an ID ,  this might also
     cause an ID mismatch because the ID will be different on other
     parts of the page

This PR creates a new hook `useUniqueId` that generates a different
unique ID based on whether the hook was called on the server or client.
If the hook is called during hydration, it generates an opaque object
that will rerender the hook so that the IDs match.

Co-authored-by: Andrew Clark <git@andrewclark.io>",Luna Ruan,2020-04-07T00:17:27Z
41694201988c5e651f0c3bc69921d5c9717be88b,"Refactor Component Stack Traces (#18495)

* Add feature flag

* Split stack from current fiber

You can get stack from any fiber, not just current.

* Refactor description of component frames

These should use fiber tags for switching. This also puts the relevant code
behind DEV flags.

* We no longer expose StrictMode in component stacks

They're not super useful and will go away later anyway.

* Update tests

Context is no longer part of SSR stacks. This was already the case on the
client.

forwardRef no longer is wrapped on the stack. It's still in getComponentName
but it's probably just noise in stacks. Eventually we'll remove the wrapper
so it'll go away anyway. If we use native stack frames they won't have this
extra wrapper.

It also doesn't pick up displayName from the outer wrapper. We could maybe
transfer it but this will also be fixed by removing the wrapper.

* Forward displayName onto the inner function for forwardRef and memo in DEV

This allows them to show up in stack traces.

I'm not doing this for lazy because lazy is supposed to be called on the
consuming side so you shouldn't assign it a name on that end. Especially
not one that mutates the inner.

* Use multiple instances of the fake component

We mutate the inner component for its name so we need multiple copies.",Sebastian Markbåge,2020-04-06T22:43:39Z
a3875663f6e5bb8bdc28c9cf71cf1312615c9c84,React Event System: cleanup plugins + break out update batching logic (#18503),Dominic Gannaway,2020-04-06T21:01:20Z
717a33abb9e5d59d0c17e9a23af7c9a266cbba57,"Bump minimist from 1.2.0 to 1.2.3 in /scripts/bench (#18500)

Bumps [minimist](https://github.com/substack/minimist) from 1.2.0 to 1.2.3.
- [Release notes](https://github.com/substack/minimist/releases)
- [Commits](https://github.com/substack/minimist/compare/1.2.0...1.2.3)

Signed-off-by: dependabot[bot] <support@github.com>

Co-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>",dependabot[bot],2020-04-06T18:29:11Z
8c974a70c9365565e6aa2e1cffe28cbbe17ea066,"Bump minimist from 1.2.0 to 1.2.3 (#18501)

Bumps [minimist](https://github.com/substack/minimist) from 1.2.0 to 1.2.3.
- [Release notes](https://github.com/substack/minimist/releases)
- [Commits](https://github.com/substack/minimist/compare/1.2.0...1.2.3)

Signed-off-by: dependabot[bot] <support@github.com>

Co-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>",dependabot[bot],2020-04-06T18:28:56Z
3498f1366987977659b37e099aef79f05170fed0,Profiler tooltip shows self duration (#18510),Brian Vaughn,2020-04-06T16:47:15Z
c781156163f014d15eeb464296a17aba4406d2ec,"Fix performance issue in react-devtools when highlight enabled (#18498)

* Fix performance issue in react-devtools when highlight enabled

* getting minimum expiration time (fix)",Faelivrinx,2020-04-06T15:17:45Z
fe2cb525542443aaf1447c4069354c12659fd186,"[eslint] Consider `useRef() as ...` as constant (#18496)

Sometimes you need to use casts, eg: https://github.com/DefinitelyTyped/DefinitelyTyped/issues/28884#issuecomment-471341041. This change ignores them and allows you to still omit the ref object from the deps list.

Test Plan: unit tests",Sophie Alpert,2020-04-05T21:13:34Z
1fd45437d781b1b905be2308447aa7793bbcb571,"Don't use checkPropTypes for internals (#18488)

We use console.error for internal warnings.",Sebastian Markbåge,2020-04-04T22:10:46Z
2ff27ec1128fca8defb71d912e501647cf58f6f8,"[eslint] strip tailing property in assignments (#16784)

* [eslint] strip tailing property in assignments

* inline `stripTailingPropInAssignment`",Zen,2020-04-04T13:26:39Z
f625fce8578cc77113d9da8ffd02032a60477e6a,"Add KeyboardEvent.code to synthetic event (#18287)

* Add KeyboardEvent.code to synthetic event

* remove null to 0 transformation

* make onKeyPress work",Nick Reiley,2020-04-04T13:24:46Z
5022fdfd5f9b3639c9c8bb2df31100586d1cfd01,"Refactor Error Dialog Logging (#18487)

* Remove unnecessary CapturedError fields.

componentName is not necessary and is misleading when the error is caused
elsewhere in the stack. The stack is sufficient.

The many error boundary fields are unnecessary because they can be inferred
by the boundary itself.

* Don't attempt to build a stack twice

If it was possible, it would've been done in createCapturedValue.

* Push the work needed by the works into the forks

This avoids needing this in the npm published case.",Sebastian Markbåge,2020-04-04T02:01:40Z
e2dd30898e180148ce480cb7311c34fe2ba16484,"[Flight] Lazily parse models and allow any value to suspend (#18476)

* Lazily initialize models as they're read intead of eagerly when received

This ensures that we don't spend CPU cycles processing models that we're
not going to end up rendering.

This model will also allow us to suspend during this initialization if
data is not yet available to satisfy the model.

* Refactoring carefully to ensure bundles still compile to something optimal

* Remove generic from Response

The root model needs to be cast at one point or another same as othe
chunks. So we can parameterize the read instead of the whole Response.

* Read roots from the 0 key of the map

The special case to read the root isn't worth the field and code.

* Store response on each Chunk

Instead of storing it on the data tuple which is kind of dynamic, we store
it on each Chunk. This uses more memory. Especially compared to just making
initializeBlock a closure, but overall is simpler.

* Rename private fields to underscores

Response objects are exposed.

* Encode server components as delayed references

This allows us to stream in server components one after another over the
wire. It also allows parallelizing their fetches and resuming only the
server component instead of the whole parent block.

This doesn't yet allow us to suspend deeper while waiting on this content
because we don't have ""lazy elements"".",Sebastian Markbåge,2020-04-03T21:58:02Z
59fd09cb67c92a89aebc4c0e962f43c0bc0ec6ad,"[Flight] Add webpack plugin build (#18485)

* Eject CRA from Flight

We need to eject because we're going to add a custom Webpack Plugin.

We can undo this once the plugin has upstreamed into CRA.

* Add Webpack plugin build

I call this entry point ""webpack-plugin"" instead of ""plugin"" even though
this is a webpack specific package. That's because there will also be a
Node.js plugin to do the server transform.

* Add Flight Webpack plugin to fixture

* Rm UMD builds

* Transform classes

* Rename webpack-plugin to plugin

This avoids the double webpack name. We're going to reuse this for both
server and client.",Sebastian Markbåge,2020-04-03T21:04:56Z
a876808f0a70e37a1a1f78d1e52404adc6cc3895,"remove jsx plugin from react (#18484)

Now that the React JSX Babel Plugin is in Babel, remove this code from react",Luna Ruan,2020-04-03T20:00:50Z
7785a5263e0bbbdcb997a84a840c9c039fcf6e5d,"[DevTools] - Highlight rendered by elements on hover. (#18479)

* [DevTools] - Highlight rendered by elements on hover.

* Fixed formatting issue.

* DevTools - Extracted highlight logic to custom hook. Added highlight support for rendered by elements.

* Removed unnecessary padding style

* Removed unnecessary wrapper function.

Co-authored-by: Brian Vaughn <brian.david.vaughn@gmail.com>",Hristo Kanchev,2020-04-03T17:49:49Z
f312a3fc36ef8b45e68a279f4c8113e14f0b0dd6,useMutableSource: bugfix for new getSnapshot with mutation (#18297),Brian Vaughn,2020-04-03T17:20:17Z
a8f2165e83ad09513b0eae239099e6e1f6d149cc,"Update to Jest 25 (#18480)

* Revert ""Revert ""Upgrade to jest 25 (#17896)"" (#18376)""

This reverts commit fc7835c65763a626e3999b2ae57e15616e61f342.

* Other fixes

* Fix a broken test",Dan Abramov,2020-04-03T15:37:36Z
c083a643b1539b4d874895fabc19a34ecd2831ed,"Add <progress> to DOM fixtures (#18293)

* Add <progress> to DOM fixtures

* Remove uncontrolled",Nick Reiley,2020-04-03T13:39:59Z
3c16baf848e7d3b5bab96ab34cc9097ddfea76de,"Remove /dist/ UMD builds (#18473)

* Remove /dist/ UMD builds

We publish UMDs to npm (and we're considering stopping even that).

This means we'll stop publishing to http://react.zpao.com/builds/master/latest/

* Update fixture paths",Sebastian Markbåge,2020-04-03T00:52:32Z
91c9d69f9aff710ba2b113834386b0bf01aea742,Modern Event System: Remove TestUtils.SimulateNative support (#18471),Dominic Gannaway,2020-04-02T23:12:47Z
e55855e7aee04b8e47edc319fc828b6cff43beed,Deprecate TestUtils.SimulateNative (#13407),Dan Abramov,2020-04-02T22:48:03Z
4123d729e53d11f8a29c7665ce0f52308cca3bd4,"Revert ""Revert: Enable new passive effect behavior for FB builds (#18467)"" (#18468)

This reverts commit 3966081cf2ffb75cde8239399176f98338511a35.",Brian Vaughn,2020-04-02T22:24:36Z
8815e4cc7277012c196d4a89db4e2b6c80065e33,Cleanup getListener and EventSystemFlags (#18469),Dominic Gannaway,2020-04-02T22:17:10Z
5e464546af4a32c5ae5e704f68bcf4b98a4c440a,ReactDOM.useEvent: fix scope propagation issue (#18464),Dominic Gannaway,2020-04-02T17:26:56Z
d5e4b3ae1d5f7d76bb3894e8d814fd4ba19dcfd5,Modern Event System: refine flags and handling of enableLegacyFBSupport (#18466),Dominic Gannaway,2020-04-02T17:26:34Z
3966081cf2ffb75cde8239399176f98338511a35,Revert: Enable new passive effect behavior for FB builds (#18467),Dominic Gannaway,2020-04-02T15:25:35Z
7dfdff42af8e128326672608c9cf8980e289c423,"Run more flags in VARIANT tests (#18461)

* Run more flags in VARIANT tests

* Revert enabling modern system

* Fix",Dan Abramov,2020-04-02T15:19:09Z
31734540dc1b507982cae839536f757de964dcd5,Remove a flag for style collision warning (#18462),Dan Abramov,2020-04-02T10:55:17Z
663c13d71d902aa38bb93b14ef93ffa803d1913c,"Refactor Enter/Leave listener accumulation (#18405)

* Refactor Enter/Leave listener accumulation",Dominic Gannaway,2020-04-02T10:07:20Z
c80cd8ee27d24bb5b9a6136ede6875d13b9f1ba4,"Revert ""Fix email cursor jump (#18379)"" (#18459)

* Revert ""Fix email cursor jump (#18379)""

This reverts commit 9b88b78b3d61e8fe81968d59b74592d5a53540b7.

* Leave fixtures be",Dan Abramov,2020-04-01T21:44:59Z
58afba06636300fd652924e3033916fc96142e13,"Fix: Don't read primaryChild.childExpirationTime (#18457)

This is a variant of the fix in 5a0f1d. We can't rely on the primary
fiber's `childExpirationTime` field to be correct.

In this case, we can read from the Suspense boundary fiber instead.
This will include updates that exist in the fallback fiber, but that's
not a big deal; the important thing is that we don't drop updates.",Andrew Clark,2020-04-01T21:36:42Z
2ea7c6079470b7bf29b9a04f192fe8a9815f589c,Fixed race condition in release script (#18456),Brian Vaughn,2020-04-01T21:17:55Z
99d779f629492ddb7a90ea54c4c071b69d775716,"Don't close ""Needs Investigation"" issues (#18458)",Dan Abramov,2020-04-01T21:08:09Z
3f468448993fed1676eb251f94f1830adbc850e8,"[eslint-plugin-react-hooks] Added meta property (including docs) (#16607)

* [eslint-plugin-react-hooks] Added meta property (including docs)

* [eslint-plugin-react-hooks] Fixed typo (`RuleOfHooks` -> `RulesOfHooks`)

Co-authored-by: Dan Abramov <dan.abramov@gmail.com>",Gabriel McAdams,2020-04-01T20:13:10Z
2bf60d9f9ccf64625caf298450b92ec283a9020d,Fix ESLint rule crash (#18455),Dan Abramov,2020-04-01T19:54:42Z
3e94bce765d355d74f6a60feb4addb6d196e3482,"Enable prefer-const lint rules (#18451)

* Enable prefer-const rule

Stylistically I don't like this but Closure Compiler takes advantage of
this information.

* Auto-fix lints

* Manually fix the remaining callsites",Sebastian Markbåge,2020-04-01T19:35:52Z
e6ea3d387335a37c23a4e5e2a84d726b78a3c9c0,"Use Closure Compiler to compile to ES5 instead of Babel (#18449)

* Upgrade Closure

There are newer versions but they don't yet have corresponding releases
of google-closure-compiler-osx.

* Configure build

* Refactor ReactSymbols a bit

Provides a little better output.",Sebastian Markbåge,2020-04-01T19:08:37Z
5200547100cb8505eb293f84da53762b7c482fc2,"Do not warn when a controlled input has `onInput` handler. (#18189)

`onInput` behaves the same as `onChange` for controlled inputs as far as I
know, so React should not print the following warning when `onInput` is
present.

> Failed prop type: You provided a `value` prop to a form field without an `onChange` handler. This will render a read-only field. If the field should be mutable use `defaultValue`. Otherwise, set either `onChange` or `readOnly`.",Utkarsh Kukreti,2020-04-01T18:58:07Z
7516bdfce3f0f8c675494b5c5d0e7ae441bef1d9,feat(createContext): Include displayName in warning (#18386),Sebastian Silbermann,2020-04-01T18:42:38Z
9b88b78b3d61e8fe81968d59b74592d5a53540b7,"Fix email cursor jump (#18379)

* add email input fixture to show cursor jump

* fix cursor jump in email input

Co-authored-by: Peter Potapov <dr.potapoff-peter@yandex.ru>

* add regression tests to ensure attributes are working

Co-authored-by: Peter Potapov <dr.potapoff-peter@yandex.ru>",Nick Reiley,2020-04-01T18:30:26Z
5ee0efe832769b845c98a41df8736e09a4f1061f,Remove state update warning for passive effect cleanup functions (#18453),Brian Vaughn,2020-04-01T17:49:24Z
d8d2b6e89cdff27a1ac246c6e9e030c2cc8760e3,"Disable module components dynamically for WWW (#18446)

* Make disableModulePatternComponents dynamic for WWW

* Run both flags and tests and respect the flag in SSR",Dan Abramov,2020-04-01T17:31:59Z
e2c6702fcaaee35ca08957be7645820192d0daf3,"Remove ConcurrentMode and AsyncMode symbols (#18450)

This API was never released.",Sebastian Markbåge,2020-04-01T17:18:52Z
d6d5f5aabef12386e45acfd13bbd0e8a1043bd4c,Move accumulateEventTargetListeners to its own module/function (#18407),Dominic Gannaway,2020-04-01T13:19:21Z
dc3c6c9565ba1710c89c2072b6d809cee8abd40c,ReactDOM.useEvent: revert and add guard for null stateNode (#18441),Dominic Gannaway,2020-04-01T11:45:26Z
0f334553c9558a56037b481fedc9b9fcad3643e7,"Reset stateNode in resetWorkInProgress (#18448)

* test(SuspenseList): Add failing test for class component

* Reset stateNode when resetWorkInProgress

This is supposed to put the Fiber into the same state as if it was just
created by child fiber reconciliation. For newly created fibers, that means
that stateNode is null.

Co-authored-by: Sebastian Silbermann <silbermann.sebastian@gmail.com>",Sebastian Markbåge,2020-04-01T04:14:59Z
153b5c305da2e042a886e0c15798bc01f45993c7,Cleanup previous shims directories before re-copying (#18447),Brian Vaughn,2020-03-31T19:22:02Z
4de3a603256ab36fc58026ce2d75b4ad9e3556bc,"Remove disableMapsAsChildren flag (#18445)

Change warning to say the case is unsupported (not ""will be deprecated"")",Brian Vaughn,2020-03-31T18:00:51Z
f4cc970276ee7d66db54191b626b19c721ebaa91,"Enable new passive effect behavior for FB builds (#18444)

* Enable new passive effect behavior for FB builds

Previously this behavior was controlled by GKs. This PR updates the flags to be enabled statically. It also enables the flags in the test builds.",Brian Vaughn,2020-03-31T17:05:15Z
9065e02d66a86466d687a888c78710728cff652b,Fix a warning typo (#18443),Dan Abramov,2020-03-31T14:55:30Z
1960131f11196325ff47458355d25071049aaa7a,Add opt-in support for dangerous autofix (#18437),Dan Abramov,2020-03-31T10:43:01Z
90e90ac8e0d16113b9566ef5feea3da11e5f4458,"Revert useEvent PRs (#18438)

* Revert ""ReactDOM.useEvent: enable on internal www and add inspection test (#18395)""

This reverts commit e0ab1a429d178d86e13f073f8451d24033bc1838.

* Revert ""ReactDOM.useEvent: Add support for experimental scopes API (#18375)""

This reverts commit a16b34974508cd23ce0844ad09a0e37a879d5591.

* ReactDOM.useEvent: Add support for experimental scopes API",Andrew Clark,2020-03-31T02:16:28Z
da54641a1022edc789c0290e6aa6421d6b9543c0,"[ESLint] Check deps when callback body is outside the Hook call, too (#18435)

* Refactor: visit CallExpression

Instead of visiting the functions and looking up to see if they're in a Hook call, visit Hook calls and look down to see if there's a callback inside. I will need this refactor so I can visit functions declared outside the call.

* Check deps when callback body is outside the Hook call

* Handle the unknown case",Dan Abramov,2020-03-31T01:09:32Z
bf30e370a503cc5787a0b20e9d50ece6a148d6c9,Remove User Timings (#18417),Dan Abramov,2020-03-30T23:29:53Z
dd7e5e4f5ac2ffac3171ef61daee2cb1edc69635,"Add getInspectorDataForViewAtPoint (take two) (#18388)

* Add getInspectorDataForViewAtPoint (take two)

* Updates from review

* Add DEV to dev-only variable

* Missed this rename",Ricky,2020-03-30T19:42:41Z
d7382b6c43b63ce15ce091cf13db8cd1f3c4b7ae,"Bugfix: Do not unhide a suspended tree without finishing the suspended update (#18411)

* Bugfix: Suspended update must finish to unhide

When we commit a fallback, we cannot unhide the content without including
the level that originally suspended. That's because the work at level
outside the boundary (i.e. everything that wasn't hidden during that
render) already committed.

* Test unblocking with a high-pri update",Andrew Clark,2020-03-30T18:25:04Z
1f8c40451ae15107abcdecb1ee67b2ed8f9d008e,Make interaction tracing on by default in all WWW builds (#18419),Dan Abramov,2020-03-30T15:07:58Z
ba31ad40a9c6495e0d42def270178a7a74990c27,"feat(StrictMode): Double-invoke render for every component (#18430)

* feat(StrictMode): Double-invoke render for every component

* fix: Mark ReactTestRendererAsync as internal",Sebastian Silbermann,2020-03-29T22:13:46Z
689d27586e30f94be1b7a7bb634b82633c2baf42,"Reset lastEffect when resuming SuspenseList (#18412)

We store an effect pointer so we can backtrack in the effect list in some
cases. This is a stateful variable. If we interrupt a render we need to
reset it.

This field was added after the optimization was added and I didn't remember
to reset it here.

Otherwise we end up not resetting the firstEffect so it points to a stale
list. As a result children don't end up inserted like we think they were.
Then we try to remove them it errors.

It would be nicer to just get rid of the effect list and use the tree for
effects instead. Maybe we still need something for deletions tho.",Sebastian Markbåge,2020-03-29T17:13:17Z
1af2a10891cad4d6bd1f9489dc52f83b16099041,https link to editorconfig.org (#18421),Rodrigo Graça,2020-03-29T14:18:52Z
d7918f4a9b74a44aa9d665b5860db76914615f89,chore: npm link more directly (#18428),zefeng,2020-03-29T14:18:15Z
be4c8b19c16a7558e2939a6665399f6f3202668e,"Don't show destroy function state update warning when updating ancestors (#18409)

React can't directly detect a memory leak, but there are some clues that warn about one. One of these clues is when an unmounted React component tries to update its state. For example, if a component forgets to remove an event listener when unmounting, that listener may be called later and try to update state, at which point React would warn about the potential leak.

Warning signals like this are more useful if they're strong. For this reason, it's good to always avoid updating state from inside of an effect's cleanup function. Even when you know there is no potential leak, React has no way to know and so it will warn anyway.

In most cases we suggest moving state updates to the useEffect() body instead (to avoid triggering the warning). This works so long as the component is updating its own state (or the state of a descendant). However this will not work when a component updates its parent state in a cleanup function. If such a component is unmounted but its parent remains mounted, the state will be incorrect. For this reason, we now avoid showing the warning if a component is updating an ancestor.",Brian Vaughn,2020-03-28T17:18:14Z
35a2f7497475d7221cb847e624db542cad6bb8ab,"Delete leftover assignment from #18384

This assignment should have been deleted in #18384. It was deleted in
the other branches, but I missed this one. About to open a PR that
includes a test that covers this branch.",Andrew Clark,2020-03-27T22:17:30Z
9d67847f7b41e408016cfa16450323b3fee8bc56,"[Bugfix] Dropped updates inside a suspended tree (#18384)

* Minor test refactor: `resolveText`

Adds a `resolveText` method as an alternative to using timers. Also
removes dependency on react-cache (for just this one test file; can do
the others later).

Timer option is still there if you provide a `ms` prop.

* Bugfix: Dropped updates in suspended tree

When there are multiple updates at different priority levels inside
a suspended subtree, all but the highest priority one is dropped after
the highest one suspends.

We do have tests that cover this for updates that originate outside of
the Suspense boundary, but not for updates that originate inside.

I'm surprised it's taken us this long to find this issue, but it makes
sense in that transition updates usually originate outside the boundary
or ""seam"" of the part of the UI that is transitioning.

* Bugfix: Suspense fragment skipped by setState

Fixes a bug where updates inside a suspended tree are dropped because
the fragment fiber we insert to wrap the hidden children is not part of
the return path, so it doesn't get marked during setState.

As a workaround, I recompute `childExpirationTime` right before deciding
to bail out by bubbling it up from the next level of children.

This is something we should consider addressing when we refactor the
Fiber data structure.

* Add back `lastPendingTime` field

This reverts commit 9a541139dfe36e8b9b02b1c6585889e2abf97389.

I want to use this so we can check if there might be any lower priority
updates in a suspended tree.

We can remove it again during the expiration times refactor.

* Use `lastPendingTime` instead of Idle

We don't currently have an mechanism to check if there are lower
priority updates in a subtree, but we can check if there are any in the
whole root. This still isn't perfect but it's better than using Idle,
which frequently leads to redundant re-renders.

When we refactor `expirationTime` to be a bitmask, this will no longer
be necessary because we'll know exactly which ""task bits"" remain.

* Add a test for updating the fallback",Andrew Clark,2020-03-26T18:31:40Z
5bd1bc29b3e930614e41c32c03c00925cd3e8d6c,eslint-plugin-react-hooks@3.0.0,Dan Abramov,2020-03-26T17:59:25Z
e0ab1a429d178d86e13f073f8451d24033bc1838,ReactDOM.useEvent: enable on internal www and add inspection test (#18395),Dominic Gannaway,2020-03-26T17:13:05Z
6cceaeb67a1b769cec4455263710617d9a10f934,DevTools v4.5.0 -> 4.6.0,Brian Vaughn,2020-03-26T17:00:37Z
d92631eab16ceb1b08727dd24b78432e504e41e4,"Remove ""es6-symbol"" package from DevTools (#18397)",Brian Vaughn,2020-03-26T16:31:36Z
a16b34974508cd23ce0844ad09a0e37a879d5591,"ReactDOM.useEvent: Add support for experimental scopes API (#18375)

* ReactDOM.useEvent: Add support for experimental scopes API",Dominic Gannaway,2020-03-26T13:29:54Z
dbb060d561b83ad901af3e1f60541e6c313cca4f,"Pass BundlerConfig through to Relay Integration (#18393)

I wasn't sure we needed this but looks like it'll come in handy.",Sebastian Markbåge,2020-03-26T03:25:54Z
ce6fe50b0195449a65e1edc26724eaad9fa08e51,"Add server-runtime to create Server Blocks (#18392)

This is equivalent to the jsx-runtime in that this is what the compiled
output on the server is supposed to target.

It's really just the same code for all the different Flights, but they
have different types in their arguments so each one gets their own entry
point. We might use this to add runtime warnings per entry point.

Unlike the client-side React.block call this doesn't provide the factory
function that curries the load function. The compiler is expected to wrap
this call in the currying factory.",Sebastian Markbåge,2020-03-26T02:03:31Z
64ed221c3dd44601d043236479150ac6ccf2a858,"Formalize the Wakeable and Thenable types (#18391)

* Formalize the Wakeable and Thenable types

We use two subsets of Promises throughout React APIs. This introduces
the smallest subset - Wakeable. It's the thing that you can throw to
suspend. It's something that can ping.

I also use a shared type for Thenable in the cases where we expect a value
so we can be a bit more rigid with our us of them.

* Make Chunks into Wakeables instead of using native Promises

This value is just going from here to React so we can keep it a lighter
abstraction throughout.

* Renamed thenable to wakeable in variable names",Sebastian Markbåge,2020-03-25T23:49:37Z
a6924d77b10dcf4108f5ffdfd37078b0864c57d5,"Change .model getter to .readRoot method (#18382)

Originally the idea was to hide all suspending behind getters or proxies.
However, this has some issues with perf on hot code like React elements.

It also makes it too easy to accidentally access it the first time in an
effect or callback where things aren't allowed to suspend. Making it
an explicit method call avoids this issue.

All other suspending has moved to explicit lazy blocks (and soon elements).
The only thing remaining is the root. We could require the root to be an
element or block but that creates an unfortunate indirection unnecessarily.

Instead, I expose a readRoot method on the response. Typically we try to
avoid virtual dispatch but in this case, it's meant that you build
abstractions on top of a Flight response so passing it a round is useful.",Sebastian Markbåge,2020-03-25T18:47:55Z
bd5781962a930cb7d046148b9d8ee9ccd3e9247f,"Inlined DevTools event emitter impl (#18378)

DevTools previously used the NPM events package for dispatching events. This package has an unfortunate flaw though- if a listener throws during event dispatch, no subsequent listeners are called. I've replaced that event dispatcher with my own implementation that ensures all listeners are called before it re-throws an error.

This commit replaces that event emitter with a custom implementation that calls all listeners before re-throwing an error.",Brian Vaughn,2020-03-25T17:26:40Z
6498f62edcdf0bcc02ed96efdad92b7e89330d8a,"Fix a mistake in ReactChildren refactor (#18380)

* Regression test for map() returning an array

* Add forgotten argument

This fixes the bug.

* Remove unused arg and retval

These aren't directly observable. The arg wasn't used, it's accidental and I forgot to remove. The retval was triggering a codepath that was unnecessary (pushing to array) so I removed that too.

* Flowify ReactChildren

* Tighten up types

* Rename getComponentKey to getElementKey",Dan Abramov,2020-03-25T09:20:46Z
2ba43edc2675380a0f2222f351475bf9d750c6a9,Rename internal fields (#18377),Dan Abramov,2020-03-24T18:19:20Z
a317bd033fbb5980f5aa4c6be91fb0040dd37523,"Flip the arguments of Blocks and make the query optional (#18374)

* Flip the arguments of Blocks and make the query optional

* Rename Query to Load",Sebastian Markbåge,2020-03-24T17:58:23Z
fc7835c65763a626e3999b2ae57e15616e61f342,"Revert ""Upgrade to jest 25 (#17896)"" (#18376)

This reverts commit cf0081263ced42ddebe0a0d868701890448bfd4b.

The changes to the test code relate to changes in JSDOM that come with Jest 25:

* Several JSDOM workarounds are no longer needed.
* Several tests made assertions to match incorrect JSDOM behavior (e.g. setAttribute calls) that JSDOM has now patched to match browsers.
  * https://codesandbox.io/s/resets-value-of-datetime-input-to-fix-bugs-in-ios-safari-1ppwh
* JSDOM no longer triggers default actions when dispatching click events.
  * https://codesandbox.io/s/beautiful-cdn-ugn8f
* JSDOM fixed (jsdom/jsdom#2700) a bug so that calling focus() on an already focused element does not dispatch a FocusEvent.
* JSDOM now supports passive events.
* JSDOM has improved support for custom CSS properties.
  * But requires jsdom/cssstyle#112 to land to support webkit prefixed properties.",Andrew Clark,2020-03-24T17:51:48Z
0140118e8e2766abaac2c833775434f83df81d56,"ReactDOM.useEvent: add support for beforeblur/afterblur (#18370)

* ReactDOM.useEvent: add support for beforeblur/afterblur",Dominic Gannaway,2020-03-24T16:14:55Z
a56309fb883fcb04d7c3d1e4bc40987175c473f0,"[Flight] Integrate Blocks into Flight (#18371)

* Resolve Server-side Blocks instead of Components

React elements should no longer be used to extract arbitrary data but only
for prerendering trees.

Blocks are used to create asynchronous behavior.

* Resolve Blocks in the Client

* Tests

* Bug fix relay JSON traversal

It's supposed to pass the original object and not the new one.

* Lint

* Move Noop Module Test Helpers to top level entry points

This module has shared state. It needs to be external from builds.

This lets us test the built versions of the Noop renderer.",Sebastian Markbåge,2020-03-24T00:53:45Z
fc96a52be36fc3ac7dd839df3f54e1df7baf7f06,"Refactor React.Children to reduce indirection (#18332)

* Don't pool traversal context

* Remove traverseAllChildrenImpl indirection

All usages are internal so we can simply use the inner function directly.

* Implement forEach through map

* Remove second usage of traverseAllChildren

This isn't useful by itself but makes the layering easier to follow. traverseAllChildren is only used at the lowest layer now.

* Reimplement count() and toArray() in terms of map()

* Inline the only use of mapSingleChildIntoContext

* Move forEach down in the file

* Use the language

Get rid of the traversal context. Use closures.

* Make mapIntoArray take an already escaped prefix

* Move count state out of mapIntoArray

* Inline traverseAllChildren into mapIntoArray

* Inline handleChild into mapIntoArray",Dan Abramov,2020-03-23T22:56:00Z
fd61f7ea53989a59bc427603798bb111c852816a,"Refactor Lazy Components to use teh Suspense (and wrap Blocks in Lazy) (#18362)

* Refactor Lazy Components

* Switch Blocks to using a Lazy component wrapper

Then resolve to a true Block inside.

* Test component names of lazy Blocks",Sebastian Markbåge,2020-03-23T04:53:05Z
31a9e391f757d374ce0065da6735f08137151507,Remove unnecessary lines for `hasBadMapPolyfill` issue for rollup (#16231),Mohammad Aziz,2020-03-22T14:52:59Z
c0cd1be908c9e2123fa41fb784780dde9babb002,"[Flight] Move bundler configs to use Suspense instead of returning thenable (#18367)

* Move bundler configs to use suspense instead of returning thenable

* Fix some Flow types",Sebastian Markbåge,2020-03-22T05:28:36Z
4b7f8496a8fe4d1dabf69acebc0bed13c520917c,"Rename CI jobs after the command line equivalent (#18364)

This makes it easier to know what to write on your command line to replicate
a failure locally.",Sebastian Markbåge,2020-03-21T23:02:01Z
b779dd51e87b92e13001b5deac4887bb4984ecf2,"Stop syncing ReactTypes to RN (#18366)

This is a really old one and all callers have since been codemodded away
anyway because of problems.

This file is not really as rigorously maintained as the official Flow types
but has a few more specifics. However, the inconsistency causes problems
when you try to pass files typed using the built-in Flow typing for React
and mix it with these.

We just happen to get away with it because we compile out the types. If we
didn't we would hit those problems by even using these in our renderers.",Sebastian Markbåge,2020-03-21T22:22:40Z
c5d2fc7127654e43de59fff865b74765a103c4a5,"Move some files out of /shared and rename to upper case (#18363)

* Rename lower case isomorphic default exports modules to upper case named exports

We're somewhat inconsistent here between e.g. ReactLazy and memo.

Let's pick one.

This also moves the responder, fundamental, scope creators from shared
since they're isomorphic and same as the other creators.

* Move some files that are specific to the react-reconciler from shared

Individual renderers are allowed to deep require into the reconciler.

* Move files specific to react-dom from shared

react-interactions is right now dom specific (it wasn't before) so we can
type check it together with other dom stuff. Avoids the need for
a shared ReactDOMTypes to be checked by RN for example.

* Move ReactWorkTags to the reconciler

* Move createPortal to export from reconciler

Otherwise Noop can't access it since it's not allowed deep requires.",Sebastian Markbåge,2020-03-21T22:22:01Z
a600408b284e92ed3d801d7f4e37d10b5da06b10,"ReactDOM.useEvent: add `EventTarget` support (#18355)

* ReactDOM.useEvent: add support for all EventTarget types",Dominic Gannaway,2020-03-20T18:31:47Z
dbd85a08d9274689973aa24e4c4e4d7ee669c913,"ReactDOM.useEvent: support custom types (#18351)

* ReactDOM.useEvent: support custom types",Dominic Gannaway,2020-03-20T14:45:33Z
7c1478680f94eda01517469d1fcfa70e14bfcb05,"fix string ref cannot be auto converted warning for React.jsxDEV (#18354)

The string ref cannot be auto converted warning was using the wrong _self. This diff fixes this so it is now using the correct __self",Luna Ruan,2020-03-20T06:47:53Z
f198872716e9dee2986198447604b3f945d13cbb,"Empty commit to fix master.

I accidentally did that thing again where I updated a PR branch to
be the same as the tip of master, which confused GitHub and caused it
to run PR checks against master.",Andrew Clark,2020-03-20T00:53:09Z
fc91508c1ffd7a00c261a567536b169989e5fab4,"Follow ups to bundler configs (#18352)

Follow ups from https://github.com/facebook/react/pull/18334

I also introduced the concept of a module reference on the client too.
We don't need this for webpack so that gets compiled out but we need it
for www. Similarly I also need a difference between preload and load.",Sebastian Markbåge,2020-03-20T00:49:40Z
31e6756b8c6b91630e6f32dff78e8e85039befb0,"Remove error code step from publish script (#18350)

Error codes don't need to be pulled from CI anymore because the ones
in source are already expected to match the build output.

I noticed this when running the 16.13.1 release. Patch releases are cut
with the commit used to build the previous release as a base. So the
publish script accidentally reverted the changes that had landed to
the error codes file since then.",Andrew Clark,2020-03-19T21:45:07Z
9e7f334c7159b10900a8d197c3df226d32efdc96,"ModernEventSystem: fix event replaying (#18346)

* ModernEventSystem: fix event replaying",Dominic Gannaway,2020-03-19T20:44:38Z
ffefb4e77f39c38a6fabb8677a585b2aa3991cd3,ModernEventSystem: refine Flow types (#18349),Dominic Gannaway,2020-03-19T20:25:52Z
6818a2aa0137ab0a3b802c193cc6bd2959c89256,"Revert accidental changes to package.json (#18348)

The publish script was written before we switched to running patch
releases out-of-band, so when updating the local package.json version
numbers, it accidentally reverted other changes that have landed to
master since 16.13 was released.",Andrew Clark,2020-03-19T20:16:37Z
ad445b127e7cad6162f0b6a0e6c22012eed200b3,Update package.jsons for 16.13.1 patch relase,Andrew Clark,2020-03-19T19:57:47Z
8b48d52fb4f6305709a361c4dcbf22a7e22ea17b,Changelog for 16.13.1,Andrew Clark,2020-03-19T19:36:34Z
8311cb5d24fd1648ddffb659bf9b3317f5f885d0,Modern Event System: refactor legacy FB support logic (#18336),Dominic Gannaway,2020-03-19T13:22:36Z
1cf4a170ac3da487d8fe2514848c7ca2a315df54,Stop exposing ReactDOMComponentTree from FB builds (#18338),Dan Abramov,2020-03-18T20:35:58Z
d3368beeecb2b51f51814f95f977e8c11900f54e,"[eslint-plugin-react-hooks] Disallow hooks in class components (#18341)

Per discussion at Facebook, we think hooks have reached a tipping point where it is more valuable to lint against potential hooks in classes than to worry about false positives.

Test plan:
```
# run from repo root
yarn test --watch RuleOfHooks
```",Ian Obermiller,2020-03-18T19:55:13Z
8206b4b864645881974d219ffb0233128748ba94,"Wire up bundler configs (#18334)

This allows different flight server and clients to have different configs
depending on bundler to serialize and resolve modules.",Sebastian Markbåge,2020-03-18T19:18:34Z
6b7281ec14397d6908fb4ae3292243ab6b2c4ef8,"[DevTools] Add shortcut keys for tab switching (#18248)

* [DevTools] Add shortcut keys for tab switching
* Use LocalStorage to remember most recently selected tab

Resolves #18227 and #18226

Co-authored-by: Brian Vaughn <brian.david.vaughn@gmail.com>",Kerollos Magdy,2020-03-18T18:05:41Z
5152c4a9fd97e70fe77a8ade69af66445e39efe1,"Fixed inconcistency with surrounding punctuation (#18339)

There was an inconsistency present on line 99 regarding the punctuation of the comment, all other comments found end in a period and this line had it's period omitted.",ItsByteMe,2020-03-18T17:10:32Z
94505b961332d9295c3f6da33d51219d126bf04f,"Don't use EventListener Fork in Modern WWW Builds (#18333)

* Move unsubscribe fork to EventListener

That way we can statically compile out more of these indirections.

* Don't use the EventListener fork for Modern WWW builds",Sebastian Markbåge,2020-03-18T13:13:50Z
aae83a4b9a0cfd75f5d5e7ee776c5e92e55cc2c3,"Fix UMD Builds (ReactSharedInternals)

ReactCurrentBatchConfig.suspense does not exist in ReactSharedInternals.umd. This PR adds it.",Luna Ruan,2020-03-18T00:56:14Z
7d466bcc25876998d325dd506a81ab54846ddd11,React Event System: Refactor ElementListenerMap for upgrading (#18308),Dominic Gannaway,2020-03-18T00:15:50Z
fe1f79b95b5987b7179d1eaf5ff5bb9a7bc4b7b5,"Don't fire the render phase update warning for class lifecycles (#18330)

* Change the warning to not say ""function body""

This warning is more generic and may happen with class components too.

* Dedupe by the rendering component

* Don't warn outside of render",Dan Abramov,2020-03-18T00:07:14Z
22cab1cbd6ad52925828643c8c6d0d4fd7890c54,"test(getComponentName): Increase test coverage (#18149)

Co-authored-by: Brian Vaughn <brian.david.vaughn@gmail.com>",Sebastian Silbermann,2020-03-17T21:47:24Z
756e1ea5d4f258f917b2c50a66bb5b07900d37a1,"fix(react-devtools-shared): useDebugValue with complex types (#18070)

Co-authored-by: Brian Vaughn <brian.david.vaughn@gmail.com>",Sebastian Silbermann,2020-03-17T20:57:01Z
90f8fe6f5509cab7d6d280b4ed17181697f394e9,"add jsx-runtime and jsx-dev-runtime (#18299)

This PR adds the jsx-runtime and jsx-dev-runtime modules for the JSX Babel Plugin. WWW still relies on jsx/jsxs/jsxDEV from the ""react"" module, so once we refactor the code to point to the runtime modules we will remove jsx/jsxs/jsxDEV from the ""react"" module.",Luna Ruan,2020-03-17T20:22:19Z
26666427d6ed5cbc581e65e43608fa1acec3bcf8,"Don't support older isomorphic React with newer renderers (#18329)

* Don't support older isomorphic React with newer renderers

* Remove the lazy hack",Dan Abramov,2020-03-17T19:30:10Z
3a0076e0e8ee0e30f90b11a280539c8b1999fe5b,useEvent: Small tweaks and changes (#18328),Dominic Gannaway,2020-03-17T15:32:26Z
9240918536f38ae50dfd86cae4e60bfc590d04ea,Bump react-shallow-renderer to 16.13.1 (#18187),Minh Nguyen,2020-03-17T00:35:28Z
c804f9aebb3c951ec6148bd7004e6a6683d53b09,ReactDOM.useEvent: wire to event system to the hook (#18304),Dominic Gannaway,2020-03-16T21:46:17Z
297f7588c46dc50f7439cf197d28d7686bd8d45d,Moved passive effects flag to be beside execution context (#18322),Brian Vaughn,2020-03-16T17:27:42Z
95df39b6b1703c1ca13e79f65de747a2b434e9ab,"improve error message for cross-functional component updates (#18316)

* improve error message for cross-functional component updates

* correctly use %s by quoting it

* use workInProgress and lint

* add test assertion

* fix test

* Improve the error message

Co-authored-by: Dan Abramov <dan.abramov@me.com>",Jovi De Croock,2020-03-16T17:05:30Z
c0ed0a2468d8f4fdecc42e5fe36ef5a4d1dcb68b,Replace passive effect context with boolean (#18309),Brian Vaughn,2020-03-16T16:56:43Z
730389b9d3865cb6d5c85e94b9b66f96e391718e,"Warn against state updates from useEffect destroy functions (#18307)

Don't warn about unmounted state updates from within passive destroy function

* Fixed test conditional. (It broke after recent variant refactor.)
* Changed warning wording for setState from within useEffect destroy callback",Brian Vaughn,2020-03-13T22:33:50Z
0705b7282f9c52ce85b6125ebbe32f6a6abf01a4,Refine event system types + pass through priority (#18305),Dominic Gannaway,2020-03-13T17:57:17Z
45d26f6edb9564cb3fe88241b02fb0128850e9f4,Remove un-used function arg (#18303),Dominic Gannaway,2020-03-13T14:16:12Z
73ff8b9094f9061c097d7f58fb4b02a90fa6f107,"Run ReactElementJSX-test against bundles (#18301)

* Run ReactElementJSX-test against bundles

* Try the new thing",Dan Abramov,2020-03-13T12:07:22Z
8c015e0e1432f9bc76eb280140a9eaed99bf7631,"Revert ""Move MS Windows build to CircleCI (#17984)"" (#18302)

This reverts commit 885ed469096d4da7ca038564b323e9b706f5a6d0.",Andrew Clark,2020-03-13T03:57:13Z
885ed469096d4da7ca038564b323e9b706f5a6d0,"Move MS Windows build to CircleCI (#17984)

* Move MS Windows build to CircleCI

* Update to latest NodeJS

Co-authored-by: Chris Lüer <lueer@fb.com>",wittgenst,2020-03-13T00:15:30Z
2a7cd589567b6a6fdb38664565bfad7ba3f14b6b,ReactDOM.useEvent: Add DOM host event listener logic (#18292),Dominic Gannaway,2020-03-12T22:41:33Z
d3ec42020d220777bf589bec36c9cd8300ec9742,Address feedback for accumulateTwoPhaseListeners (#18289),Dominic Gannaway,2020-03-12T21:48:29Z
cd48a06547390ae426a70d555ec9fd5349c85d08,"Set up infra for react-reconciler fork (#18285)

* ReactFiberReconciler -> ReactFiberReconciler.old

* Set up infra for react-reconciler fork

We're planning to land some significant refactors of the reconciler.
We want to be able to gradually roll out the new implementation side-by-
side with the existing one. So we'll create a short lived fork of the
react-reconciler package. Once the new implementation has stabilized,
we'll delete the old implementation and promote the new one.

This means, for as long as the fork exists, we'll need to maintain two
separate implementations. This sounds painful, but since the forks will
still be largely the same, most changes will not require two separate
implementations. In practice, you'll implement the change in the old
fork and then copy paste it to the new one.

This commit only sets up the build and testing infrastructure. It does
not actually fork any modules. I'll do that in subsequent PRs.

The forked version of the reconciler will be used to build a special
version of React DOM. I've called this build ReactDOMForked. It's only
built for www; there's no open source version.

The new reconciler is disabled by default. It's enabled in the
`yarn test-www-variant` command. The reconciler fork isn't really
related to the ""variant"" feature of the www builds, but I'm piggy
backing on that concept to avoid having to add yet another
testing dimension.",Andrew Clark,2020-03-12T18:38:32Z
615df434bbecc357d47ce26e3d6362edec477050,"Remove manual feature flag overrides (#18291)

Tests now run against both versions of these flags, using the
test-www-variant command. So we can remove the manual overrides.",Andrew Clark,2020-03-12T17:17:02Z
99d271228dc0831c9d613bab20032081a286e1c0,ReactDOM.useEvent: more scaffolding changes (#18282),Dominic Gannaway,2020-03-12T09:12:06Z
97a8c72bf8fee0a1382497776663b58fb7129a80,"Wrap Components and Profiler tabs with box-size style too (#18286)

For the browser extension, these views get rendered into portals and so they don't inherit the box-sizing style from the .DevTools wrapper element. This causes views like the Profiler commit selector to subtly break.",Brian Vaughn,2020-03-12T02:12:57Z
5374919033fd6bc52ed7522b2ba34cdc80b4f570,"Empty commit to fix CI on master

Weird GitHub bug caused CI jobs to run against master as if it was
a PR. Now it looks like master is failing, even though it isn't.

Bloop.",Andrew Clark,2020-03-12T01:29:46Z
8b155d261368afb1fe93219278b581a1032ea1d7,Flow type ReactDOMComponentTree (#18280),Dominic Gannaway,2020-03-11T19:38:23Z
322cdcd3abfaca985a001a12247f02c5d31d311e,"useMutableSource hook (#18000)

useMutableSource hook

useMutableSource() enables React components to safely and efficiently read from a mutable external source in Concurrent Mode. The API will detect mutations that occur during a render to avoid tearing and it will automatically schedule updates when the source is mutated.

RFC: reactjs/rfcs#147",Brian Vaughn,2020-03-11T19:34:39Z
30a998debf79f8c8efb3fa9b6ff5458fb319d7a1,ModernEventSystem: refactor accumulateTwoPhaseListeners (#18274),Dominic Gannaway,2020-03-11T18:55:01Z
8fe066fdacff554d1c623c71472cf6ecc1cd8e08,"Bugfix: ""Captured"" updates on legacy queue (#18265)

* Bugfix: ""Captured"" updates on legacy queue

This fixes a bug with error boundaries. Error boundaries have a notion
of ""captured"" updates that represent errors that are thrown in its
subtree during the render phase. These updates are meant to be dropped
if the render is aborted.

The bug happens when there's a concurrent update (an update from an
interleaved event) in between when the error is thrown and when the
error boundary does its second pass. The concurrent update is
transferred from the pending queue onto the base queue. Usually, at this
point the base queue is the same as the current queue. So when we
append the pending updates to the work-in-progress queue, it also
appends to the current queue.

However, in the case of an error boundary's second pass, the base queue
has already forked from the current queue; it includes both the
""captured"" updates and any concurrent updates. In that case, what we
need to do is append separately to both queues. Which we weren't doing.

That isn't the full story, though. You would expect that this mistake
would manifest as dropping the interleaved updates. But instead what
was happening is that the ""captured"" updates, the ones that are meant
to be dropped if the render is aborted, were being added to the
current queue.

The reason is that the `baseQueue` structure is a circular linked list.
The motivation for this was to save memory; instead of separate `first`
and `last` pointers, you only need to point to `last`.

But this approach does not work with structural sharing. So what was
happening is that the captured updates were accidentally being added
to the current queue because of the circular link.

To fix this, I changed the `baseQueue` from a circular linked list to a
singly-linked list so that we can take advantage of structural sharing.

The ""pending"" queue, however, remains a circular list because it doesn't
need to be persistent.

This bug also affects the root fiber, which uses the same update queue
implementation and also acts like an error boundary.

It does not affect the hook update queue because they do not have any
notion of ""captured"" updates. So I've left it alone for now. However,
when we implement resuming, we will have to account for the same issue.

* Ensure base queue is a clone

When an error boundary captures an error, we append the error update
to the work-in-progress queue only so that if the render is aborted,
the error update is dropped.

Before appending to the queue, we need to make sure the queue is a
work-in-progress copy. Usually we clone the queue during
`processUpdateQueue`; however, if the base queue has lower priority
than the current render, we may have bailed out on the boundary fiber
without ever entering `processUpdateQueue`. So we need to lazily clone
the queue.

* Add warning to protect against refactor hazard

The hook queue does not have resuming or ""captured"" updates, but if
we ever add them in the future, we'll need to make sure we check if the
queue is forked before transfering the pending updates to them.",Andrew Clark,2020-03-11T18:53:45Z
b5c6dd2de557428974855b5aa88bf9c6595beb2b,Don't use Spread in DevTools Injection (#18277),Sebastian Markbåge,2020-03-11T17:58:25Z
a463fef31b2849b5fac652f4fb7d311dec9a4d4b,"Revert ""[React Native] Add getInspectorDataForViewAtPoint (#18233)""

This reverts commit bf351089a0ee27405b3d5c0f474941a4946f2f37.",Sebastian Markbage,2020-03-11T17:05:26Z
dc7eedae3c67f1b48db0bb1874633edf4268ac4e,"Encode server rendered host components as array tuples (#18273)

This replaces the HTML renderer with instead resolving host elements into
arrays tagged with the react.element symbol. These turn into proper
React Elements on the client.

The symbol is encoded as the magical value ""$"". This has security implications
so this special value needs to remain escaped for other strings.

We could just encode the element as {$$typeof: ""$"", key: key props: props}
but that's a lot more bytes. So instead I encode it as:
[""$"", key, props] and then convert it back.

It would be nicer if React's reconciler could just accept these tuples.",Sebastian Markbåge,2020-03-11T16:48:02Z
bf351089a0ee27405b3d5c0f474941a4946f2f37,[React Native] Add getInspectorDataForViewAtPoint (#18233),Ricky,2020-03-11T16:12:41Z
99d73718636d7930a2abf0030c51c1d7710b13d8,"[Flight] Split Streaming from Relay Implemenation (#18260)

* Add ReactFlightServerConfig intermediate

This just forwards to the stream version of Flight which is itself forked
between Node and W3C streams.

The dom-relay goes directly to the Relay config though which allows it to
avoid the stream part of Flight.

* Separate streaming protocol into the Stream config

* Split streaming parts into the ReactFlightServerConfigStream

This decouples it so that the Relay implementation doesn't have to encode
the JSON to strings. Instead it can be fed the values as JSON objects and
do its own encoding.

* Split FlightClient into a basic part and a stream part

Same split as the server.

* Expose lower level async hooks to Relay

This requires an external helper file that we'll wire up internally.",Sebastian Markbåge,2020-03-10T21:55:04Z
160505b0ca143fa458926b623a05cf2645ba799a,ReactDOM.useEvent: Add more scaffolding for useEvent hook (#18271),Dominic Gannaway,2020-03-10T20:31:12Z
a3bf6688121e69cfb377c25f362000b33d7984cd,Flare: Fix listener upgrade bug (#18270),Dominic Gannaway,2020-03-10T17:59:03Z
526c12f49ee6a0e371d73ecd638596777feac536,Enable enableProfilerCommitHooks flag for FB (#18230),Brian Vaughn,2020-03-10T17:40:45Z
9e5626cdde7d1d698458729197707c992726c6e5,"Fix yarn warning on running 'yarn build-for-devtools' (#18232)

fixes #18231",Kerollos Magdy,2020-03-10T15:37:02Z
29534252add3b90f7984a0f1c89937ed32d36ceb,ReactDOM.useEvent add flag and entry point (#18267),Dominic Gannaway,2020-03-10T12:18:49Z
704c8b01186128ea544b017f8e0ed48ba0295701,Fix Flow type for AnyNativeEvent (#18266),Dominic Gannaway,2020-03-10T10:46:12Z
bdc5cc4635f13e5ca43883a9f9587fc9a868c528,"Add Relay Flight Build (#18242)

* Rename to clarify that it's client-only

* Rename FizzStreamer to FizzServer for consistency

* Rename react-flight to react-client/flight

For consistency with react-server. Currently this just includes flight
but it could be expanded to include the whole reconciler.

* Add Relay Flight Build

* Rename ReactServerHostConfig to ReactServerStreamConfig

This will be the config specifically for streaming purposes.
There will be other configs for other purposes.",Sebastian Markbåge,2020-03-07T19:23:30Z
7a1691cdff209249b49a4472ba87b542980a5f71,"Refactor Host Config Infra (getting rid of .inline*.js) (#18240)

* Require deep for reconcilers

* Delete inline* files

* Delete react-reconciler/persistent

This no longer makes any sense because it react-reconciler takes
supportsMutation or supportsPersistence as options. It's no longer based
on feature flags.

* Fix jest mocking

* Fix Flow strategy

We now explicitly list which paths we want to be checked by a renderer.
For every other renderer config we ignore those paths.

Nothing is ""any"" typed. So if some transitive dependency isn't reachable
it won't be accidentally ""any"" that leaks.",Sebastian Markbåge,2020-03-07T00:20:42Z
238b57f0f712aeddc89604b0dc9c1b13ffb0129a,"[Blocks] Make it possible to have lazy initialized and lazy loaded Blocks (#18220)

* Lazify Blocks

Blocks now initialize lazily.

* Initialize Blocks eagerly in ChildFiber

This is for the case when it's a new Block that hasn't yet initialized.
We need to first initialize it to see what ""render function"" it resolves
to so that we can use that in our comparison.

* Remove extra import type line",Sebastian Markbåge,2020-03-06T23:14:46Z
235a6c4af67e3e1fbfab7088c857265e0c95b81f,"Bugfix: Dropped effects in Legacy Mode Suspense (#18238)

* Failing: Dropped effects in Legacy Mode Suspense

* Transfer mounted effects on suspend in legacy mode

In legacy mode, a component that suspends bails out and commit in
its previous state. If the component previously had mounted effects,
we must transfer those to the work-in-progress so they don't
get dropped.",Andrew Clark,2020-03-06T19:10:01Z
5fbb165602457173fc54d2a08ad7c616c55476b4,"Hard-code disableModulePatternComponents (#18239)

Hard-coding this until tests are fixed, to unblock master.",Andrew Clark,2020-03-06T19:09:36Z
cccba39f5bbbb095701133d32c213a80fda5bd32,Fixed broken anchor tag for patch release,Brian Vaughn,2020-03-06T19:05:01Z
562cf013dbd80cade517e25192ee19e958aef55b,Add a flag to disable module pattern components (#18133),Dan Abramov,2020-03-06T18:46:32Z
115cd12d9bbb2bff303e52feb1394e3a2cef20ca,"Add test run that uses www feature flags (#18234)

In CI, we run our test suite against multiple build configurations. For
example, we run our tests in both dev and prod, and in both the
experimental and stable release channels. This is to prevent accidental
deviations in behavior between the different builds. If there's an
intentional deviation in behavior, the test author must account
for them.

However, we currently don't run tests against the www builds. That's
a problem, because it's common for features to land in www before they
land anywhere else, including the experimental release channel.
Typically we do this so we can gradually roll out the feature behind
a flag before deciding to enable it.

The way we test those features today is by mutating the
`shared/ReactFeatureFlags` module. There are a few downsides to this
approach, though. The flag is only overridden for the specific tests or
test suites where you apply the override. But usually what you want is
to run *all* tests with the flag enabled, to protect against unexpected
regressions.

Also, mutating the feature flags module only works when running the
tests against source, not against the final build artifacts, because the
ReactFeatureFlags module is inlined by the build script.

Instead, we should run the test suite against the www configuration,
just like we do for prod, experimental, and so on. I've added a new
command, `yarn test-www`. It automatically runs in CI.

Some of the www feature flags are dynamic; that is, they depend on
a runtime condition (i.e. a GK). These flags are imported from an
external module that lives in www. Those flags will be enabled for some
clients and disabled for others, so we should run the tests against
*both* modes.

So I've added a new global `__VARIANT__`, and a new test command `yarn
test-www-variant`. `__VARIANT__` is set to false by default; when
running `test-www-variant`, it's set to true.

If we were going for *really* comprehensive coverage, we would run the
tests against every possible configuration of feature flags: 2 ^
numberOfFlags total combinations. That's not practical, though, so
instead we only run against two combinations: once with `__VARIANT__`
set to `true`, and once with it set to `false`. We generally assume that
flags can be toggled independently, so in practice this should
be enough.

You can also refer to `__VARIANT__` in tests to detect which mode you're
running in. Or, you can import `shared/ReactFeatureFlags` and read the
specific flag you can about. However, we should stop mutating that
module going forward. Treat it as read-only.

In this commit, I have only setup the www tests to run against source.
I'll leave running against build for a follow up.

Many of our tests currently assume they run only in the default
configuration, and break when certain flags are toggled. Rather than fix
these all up front, I've hard-coded the relevant flags to the default
values. We can incrementally migrate those tests later.",Andrew Clark,2020-03-06T17:29:05Z
4027f2a3b82ecc325224f7827fc2c8e71a284279,Break up require/import statements in strings (#18222),Christoph Nakazawa,2020-03-05T22:27:55Z
024a764310e64ef38963df16970364b9942a60cd,"Implemented Profiler onCommit() and onPostCommit() hooks (#17910)

* Implemented Profiler onCommit() and onPostCommit() hooks
* Added enableProfilerCommitHooks feature flag for commit hooks
* Moved onCommit and onPassiveCommit behind separate feature flag",Brian Vaughn,2020-03-05T19:02:00Z
d35f8a58184d1495ff54f4ad80c702e9468c89ee,"feat: honor displayName of context types (#18224)

* Revert ""Revert ""feat: honor displayName of context types (#18035)"" (#18223)""

This reverts commit 3ee812e6b67d52a6f262144e78721f9340c36a04.

* Add warning of displayName is set on the consumer

* dedupe warning",Brian Vaughn,2020-03-05T18:13:52Z
3ee812e6b67d52a6f262144e78721f9340c36a04,"Revert ""feat: honor displayName of context types (#18035)"" (#18223)

This reverts commit 45c172d948eee1a8533908267ec8be70bbb00c55.",Dominic Gannaway,2020-03-05T15:58:04Z
6a0efddd892d4bf931c089f1ac772a5736dc7edd,Modern Event System: export internal FB flag for testing (#18221),Dominic Gannaway,2020-03-05T14:05:00Z
21b713b9fd50edb331af55eac38e9d2a58972869,Updated React Native home URL (#18218),Sunil Pai,2020-03-05T13:15:46Z
60b11f6c1be111c14c3607809ccad2b8ea680152,Modern Event System: Support nested portal/root boundaries (#18201),Dominic Gannaway,2020-03-05T09:00:13Z
fa03206ee4352431198b678c00dca83027e7052d,"Remove _ctor field from Lazy components (#18217)

* This type is all wrong and nothing cares because it's all any

* Refine Flow types of Lazy Components

We can type each condition.

* Remove _ctor field from Lazy components

This field is not needed because it's only used before we've initialized,
and we don't have anything else to store before we've initialized.

* Check for _ctor in case it's an older isomorphic that created it

We try not to break across minors but it's no guarantee.

* Move types and constants from shared to isomorphic

The ""react"" package owns the data structure of the Lazy component. It
creates it and decides how any downstream renderer may use it.

* Move constants to shared

Apparently we can't depend on react/src/ because the whole package is
considered ""external"" as far as rollup is concerned.",Sebastian Markbåge,2020-03-05T04:52:48Z
2fe0fbb05ef2c56db760122e995b923528e6ce8f,Use accumulateTwoPhaseDispatchesSingle directly (#18203),Dominic Gannaway,2020-03-05T00:04:27Z
503fd82b423bbce20cb366afcf670ae5329f3995,Modern Event System: Add support for internal FB Primer (#18210),Dominic Gannaway,2020-03-04T23:41:59Z
45c172d948eee1a8533908267ec8be70bbb00c55,"feat: honor displayName of context types (#18035)

* test: Add test for current behavior of displayName
* feat: consider displayName of context types",Brian Vaughn,2020-03-04T22:54:16Z
83c3ed290cb9994d89e430fd565d108365b42ac7,Fix instanceContainsElem bug from typo (#18213),Dominic Gannaway,2020-03-04T19:53:16Z
7e94d89f3e78df89d9d133ca8dbef295f1b90e46,Updated React Native Website URL (#18207),Vishal Jagtap,2020-03-04T12:10:48Z
355970aa4b7f96ec487e29083ee8fbc87bc99fdc,DevTools 4.4.0 -> 4.5.0,Brian Vaughn,2020-03-03T23:04:07Z
ec652f4daf7245e9ff4ca9b57b020c4026164eba,"Bugfix: Expired partial tree infinite loops (#17949)

* Bugfix: Expiring a partially completed tree (#17926)

* Failing test: Expiring a partially completed tree

We should not throw out a partially completed tree if it expires in the
middle of rendering. We should finish the rest of the tree without
yielding, then finish any remaining expired levels in a single batch.

* Check if there's a partial tree before restarting

If a partial render expires, we should stay in the concurrent path
(performConcurrentWorkOnRoot); we'll stop yielding, but the rest of the
behavior remains the same.

We will only revert to the sync path (performSyncWorkOnRoot) when
starting on a new level.

This approach prevents partially completed concurrent work from
being discarded.

* New test: retry after error during expired render

* Regression: Expired partial tree infinite loops

Adds regression tests that reproduce a scenario where a partially
completed tree expired then fell into an infinite loop.

The code change that exposed this bug made the assumption that if you
call Scheduler's `shouldYield` from inside an expired task, Scheduler
will always return `false`. But in fact, Scheduler sometimes returns
`true` in that scenario, which is a bug.

The reason it worked before is that once a task timed out, React would
always switch to a synchronous work loop without checking `shouldYield`.

My rationale for relying on `shouldYield` was to unify the code paths
between a partially concurrent render (i.e. expires midway through) and
a fully concurrent render, as opposed to a render that was synchronous
the whole time. However, this bug indicates that we need a stronger
guarantee within React for when tasks expire, given that the failure
case is so catastrophic. Instead of relying on the result of a dynamic
method call, we should use control flow to guarantee that the work is
synchronously executed.

(We should also fix the Scheduler bug so that `shouldYield` always
returns false inside an expired task, but I'll address that separately.)

* Always switch to sync work loop when task expires

Refactors the `didTimeout` check so that it always switches to the
synchronous work loop, like it did before the regression.

This breaks the error handling behavior that I added in 5f7361f (an
error during a partially concurrent render should retry once,
synchronously). I'll fix this next. I need to change that behavior,
anyway, to support retries that occur as a result of `flushSync`.

* Retry once after error even for sync renders

Except in legacy mode.

This is to support the `useOpaqueReference` hook, which uses an error
to trigger a retry at lower priority.

* Move partial tree check to performSyncWorkOnRoot

* Factor out render phase

Splits the work loop and its surrounding enter/exit code into their own
functions. Now we can do perform multiple render phase passes within a
single call to performConcurrentWorkOnRoot or performSyncWorkOnRoot.
This lets us get rid of the `didError` field.",Andrew Clark,2020-03-03T21:42:18Z
d2158d6ccbcbd998d1cd1c06ac6c6682cbeafd04,"Fix flow types (#18204)

* Added missing @flow pragma to React.js

* Fixed useContext() return type definition

* Fixed previously masked Flow errors in DevTools and react-interactions packages

* Added displayName to internal Context Flow type

* Removed Flow generic annotations for createResponder

This seems to cause a parsing error. (Not sure why.) The API is deprecated anyway so I'm being lazy for now and just adding a .",Brian Vaughn,2020-03-03T20:46:24Z
8e6a08ea4f3beb2127ec3d1595cf5f83df5816b6,Modern Event System: add plugin handling and forked paths (#18195),Dominic Gannaway,2020-03-03T14:37:06Z
7e83af17cea784aee93ba555317d871e7c989dca,"Put React.jsx and React.jsxDEV behind experimental build (#18023)

This PR puts the React.jsx and React.jsxDEV (enableJSXTransformAPI feature flag) in the experimental build so that we can use it to test React Native.",Luna Ruan,2020-03-03T02:08:40Z
8cb2fb21eb4e931b80d8b0502059061891ac4563,Refine isFiberSuspenseAndTimedOut (#18184),Dominic Gannaway,2020-03-02T14:15:42Z
dbc7b9f50c9f4ff005c8ba6431adea9bec3d318a,Fix bug with PressLegacy blur (#18194),Dominic Gannaway,2020-03-02T13:42:46Z
62861bbcc752c63728592fdc45078854f9aae161,More event system cleanup and scaffolding (#18179),Dominic Gannaway,2020-03-02T10:59:07Z
8ccfce460f141299d61290f877745407e05e531e,"Only use Rollup's CommonJS plugin for ""react-art"" (#18186)

* Only use Rollup's CommonJS plugin for ""react-art""

We still need it for the ""art"" UMD builds but nothing else should have
CommonJS dependencies anymore.

* react-debug-tools and jest-react should leave object-assign as an external dep

This avoids it being compiled into the output.",Sebastian Markbåge,2020-02-29T00:46:17Z
c26506a7d20a6eafb84ed43b137ebe3c68df6bcd,Update react-shallow-renderer from 16.12.0 to 16.13.0 (#18185),Minh Nguyen,2020-02-29T00:35:52Z
26aa1987ce823f54ebc90b2538184fefbc16b99a,[Native] Enable and remove targetAsInstance feature flag. (#18182),Eli White,2020-02-28T21:45:42Z
4469700bb60ffd62caf112e47bcfa51afdd40e47,Change ReactVersion from CJS to ES module (#18181),Sebastian Markbåge,2020-02-28T21:09:02Z
58eedbb024d188081e20bee1514d794d731873ad,"Check in a forked version of object-assign only for UMD builds (#18180)

* Check in a forked version of object-assign

This one uses ES modules so that we can inline it into UMD builds.

We could wait for object-assign to make an ESM export but we're going to
remove this dependency and assume global polyfills in the next version
anyway. However, we'd have to figure out how to keep the copyright header
and it'll get counted in terms of byte size (even if other tooling removes
it).

A lot of headache when we have our own implementation anyway. So I'll just
use that.

Ours is not resilient to checking certain browser bugs but those browsers
are mostly unused anyway. (Even FB breaks on them presumably.)

We also don't need to be resilient to Symbols since the way React uses it
we shouldn't need to copy symbols

* Don't transpile Object.assign to object-assign in object-assign

The polyfill needs to be able to feature detect Object.assign.",Sebastian Markbåge,2020-02-28T19:14:09Z
053347e6bc69de79dfa46bb422868b023851c315,"react-test-renderer: improve findByType() error message (#17439)

* improve findByType error message

* fix flow typing

* Adding a test for the ""Unknown"" branch when `getComponentName()` returns a falsy value. The error message in this case not the most descriptive but seems consistent with the `getComponentName(type) || 'Unknown'` pattern seen in multiple places in this code base.",Henry Q. Dineen,2020-02-28T17:55:33Z
4ee592e95a5f78daed575a047d47f74f046940f3,Add an early invariant to debug a mystery crash (#18159),Dan Abramov,2020-02-28T11:56:36Z
7ea4e4111f0615d465d2750b4fefd8b98b22ef1d,"Fix typo in warning text (#18103)

Mentioned in #18090.",Sophie Alpert,2020-02-28T11:53:20Z
79a25125b19c2d6deaf03d4ab0dfdd6082377d97,"feat: add recommended config eslint rule (#14762)

* feat: add recommended config eslint rule

* add exhaustive-deps to recommended as well",Simen Bekkhus,2020-02-28T02:01:17Z
ae60caacfd7a6fd9f4ada943c7d04a782f1e9505,"[Fabric] Fix targetAsInstance dispatchEvent ""cannot read property of null"" (#18156)

* Fix Fabric targetAsInstance dispatchEvent: targetFiber stateNode is null in some cases

Co-authored-by: Dan Abramov <dan.abramov@gmail.com>",Joshua Gross,2020-02-28T01:23:25Z
d72700ff5a212262068df8ffa6bd2d68b04f9f54,"Remove runtime dependency on prop-types (#18127)

* Remove runtime dep on prop-types

* Fix test",Dan Abramov,2020-02-28T01:21:54Z
549e41883046def7033a6939ecc9817a22847a61,"Move remaining things to named exports (#18165)

* Move remaining things to named exports

The interesting case here is the noop renderers. The wrappers around the
reconciler now changed to use a local export that gets mutated.

ReactNoop and ReactNoopPersistent now have to destructure the object to
list out the names it's going to export. We should probably refactor
ReactNoop away from createReactNoop. Especially since it's also not Flow
typed.

* Switch interactions to star exports

This will have esModule compatibility flag on them. They should ideally
export default instead.",Sebastian Markbåge,2020-02-28T01:18:55Z
739f20beda56a28a9212e3478571c866babee118,"Remove Node shallow builds (#18157)

This is just a forwarding module. We can hardcode it.",Sebastian Markbåge,2020-02-27T22:11:40Z
3e809bf5d46dbabdc2ccbec41e030c5cb1efeac4,"Convert React Native builds to named exports (#18136)

These don't need any forks because we always export the same things atm.",Sebastian Markbåge,2020-02-27T19:33:44Z
869dbda7224aaf1f182c946b3f5876e8ca688105,Don't build shallow renderer for FB (#18153),Dan Abramov,2020-02-27T18:17:58Z
293878e079b170670b08449bfdcd7aebaa6afbc2,"Replace ReactShallowRenderer with a dependency (#18144)

Closes #17321.",Minh Nguyen,2020-02-27T18:10:25Z
abcca4595146aea4259e42f253bed722c843a574,Run test-prod job for experimental builds (#18152),Dan Abramov,2020-02-27T16:21:36Z
1ad21790027d5fe60367f3175647a7b77a8f9c1a,Bust Circle caches,Dan Abramov,2020-02-27T15:33:10Z
b4e314891826da7e65ce600cdcf320041dafc0d2,Remove unused flag (#18132),Dan Abramov,2020-02-27T12:58:15Z
849e8328b596ce67720f33d73a1d57108e6de504,Remove unnecessary warnings (#18135),Dan Abramov,2020-02-27T02:14:30Z
f9c0a454415172433b8b94eec94fc36b2461065c,"Convert the rest of react-dom and react-test-renderer to Named Exports (#18145)

Nothing interesting here except that ReactShallowRenderer currently exports
a class with a static method instead of an object.

I think the public API is probably just meant to be createRenderer but
currently the whole class is exposed. So this means that we have to keep
it as default export. We could potentially also expose a named export for
createRenderer but that's going to cause compatibility issues.

So I'm just going to make that export default.

Unfortunately Rollup and Babel (which powers Jest) disagree on how to
import this. So to make it work I had to move the jest tests to imports.

This doesn't work with module resetting. Some tests weren't doing that
anyway and the rest is just testing ReactShallowRenderer so meh.",Sebastian Markbåge,2020-02-27T02:04:32Z
2738b6d022c09aaca05f77cf0b6848d223986ca7,Updated CHANGELOG to remove passive effects change from 16.13 release. (It wasn't part of that release.),Brian Vaughn,2020-02-26T21:06:02Z
69c769ae049aa72a434a34ad7f559b801270725a,Fix changelog link,Dan Abramov,2020-02-26T21:04:36Z
efaffc4797014d3b468e8f3c64c326f078a22c5d,Prettier,Dan,2020-02-26T21:02:20Z
c1c5499cc3fd179004911b3391a55de1af4de037,"update version numbers for 16.13 (#18143)

also includes a bugfix when downloading error codes from circleci.",Sunil Pai,2020-02-26T20:33:29Z
169b1f79beefe6000008ddd9f006f3d3c21ad5c6,"Changelog for 16.13.0 (#18124)

* Changelog for 16.13.0

* Update CHANGELOG.md",Sunil Pai,2020-02-26T20:15:01Z
71418fda3b449d36b81ec8f12e076b81cd816534,Rearranged some DevTools Components code,Brian Vaughn,2020-02-26T19:33:52Z
d166319e864c0097c9e763180df4add375f2f1cd,"[DevTools] Added resize support for Components panel. (#18046)

* feat: DevTools - Added Resize Support.

* feat: Prettier.

* feat: DevTools - Added debug comments.

* feat: DevTools - Removed Use Memo.

* feat: DevTools - Added types.

* feat: DevTools - Extracted values to constants.

* feat: DevTools - Removed useCallback.

* feat: DevTools - Finished refactoring.

* feat: DevTools - Merging fixup.

* feat: DevTools - Prettier fix.

* feat: DevTools - Extracted code from Components fil.

* feat: DevTools - Fixed orientation change issue.

* feat: DevTools - Added flow types for reducer and refs.

* feat: DevTools - Fixed orientation change on initial load.

* Update packages/react-devtools-shared/src/devtools/views/Components/ComponentsResizer.js

* Removed unused `orientationRef`

* Fix Flow ref issue

Co-authored-by: Brian Vaughn <brian.david.vaughn@gmail.com>",Hristo Kanchev,2020-02-26T19:30:42Z
e1c7e651feb7d8f0339db5720cfb61b036ee7290,"Update ReactDebugHooks to handle composite hooks (#18130)

The useState hook has always composed the useReducer hook. 1:1 composition like this is fine.

But some more recent hooks (e.g. useTransition, useDeferredValue) compose multiple hooks internally. This breaks react-debug-tools because it causes off-by-N errors when the debug tools re-renders the function.

For example, if a component were to use the useTransition and useMemo hooks, the normal hooks dispatcher would create a list of first state, then callback, then memo hooks, but the debug tools package would expect a list of transition then memo. This can break user code and cause runtime errors in both the react-debug-tools package and in product code.

This PR fixes the currently broken hooks by updating debug tools to be aware of the composite hooks (how many times it should call nextHook essentially) and adds tests to make sure they don't get out of sync again. We'll need to add similar tests for future composite hooks (like useMutableSource #18000).",Brian Vaughn,2020-02-26T17:28:35Z
d28bd2994b749c70233334f4105574b692e74980,"remove OSS testing builds (#18138)

The testing build versions of react-dom are included in the builds right now, but we're not ready to share them yet. This PR removes them for now (back soon for the next release)",Sunil Pai,2020-02-26T13:12:55Z
8e13e770e39a6fc634a87b5d5144ec1e54000a0c,"Remove /testing entry point from 'react' package (#18137)

We're not actually building this entry point. I can't think of a reason
we'd need to fork the isomorphic one. We don't really fork it for
anything since it's so generic to work with all renderers.

Since /profiling doesn't have this, it might confuse the story if we made
people alias two things for testing but not profiling.",Sebastian Markbåge,2020-02-26T10:48:34Z
f3ecd56beacd4a2849a1bac4faab5d41b7ad758b,Fixed a spelling mistake in a comment. (#18119),Steve Harrison,2020-02-26T05:01:08Z
60016c448bb7d19fc989acd05dda5aca2e124381,"Export React as Named Exports instead of CommonJS (#18106)

* Add options for forked entry points

We currently fork .fb.js entry points. This adds a few more options.

.modern.fb.js - experimental FB builds
.classic.fb.js - stable FB builds
.fb.js - if no other FB build, use this for FB builds
.experimental.js - experimental builds
.stable.js - stable builds
.js - used if no other override exists

This will be used to have different ES exports for different builds.

* Switch React to named exports

* Export named exports from the export point itself

We need to re-export the Flow exported types so we can use them in our code.

We don't want to use the Flow types from upstream since it doesn't have the non-public APIs that we have.

This should be able to use export * but I don't know why it doesn't work.

This actually enables Flow typing of React which was just ""any"" before.
This exposed some Flow errors that needs fixing.

* Create forks for the react entrypoint

None of our builds expose all exports and they all differ in at least one
way, so we need four forks.

* Set esModule flag to false

We don't want to emit the esModule compatibility flag on our CommonJS
output. For now we treat our named exports as if they're CommonJS.

This is a potentially breaking change for scheduler (but all those apis
are unstable), react-is and use-subscription. However, it seems unlikely
that anyone would rely on this since these only have named exports.

* Remove unused Feature Flags

* Let jest observe the stable fork for stable tests

This lets it do the negative test by ensuring that the right tests fail.

However, this in turn will make other tests that are not behind
__EXPERIMENTAL__ fail. So I need to do that next.

* Put all tests that depend on exports behind __EXPERIMENTAL__

Since there's no way to override the exports using feature flags
in .intern.js anymore we can't use these APIs in stable.

The tradeoff here is that we can either enable the negative tests on
""stable"" that means experimental are expected to fail, or we can disable
tests on stable. This is unfortunate since some of these APIs now run on
a ""stable"" config at FB instead of the experimental.

* Switch ReactDOM to named exports

Same strategy as React.

I moved the ReactDOMFB runtime injection to classic.fb.js

Since we only fork the entrypoint, the `/testing` entrypoint needs to
be forked too to re-export the same things plus `act`. This is a bit
unfortunate. If it becomes a pattern we can consider forking in the
module resolution deeply.

fix flow

* Fix ReactDOM Flow Types

Now that ReactDOM is Flow type checked we need to fix up its types.

* Configure jest to use stable entry for ReactDOM in non-experimental

* Remove additional FeatureFlags that are no longer needed

These are only flagging the exports and no implementation details so we
can control them fully through the export overrides.",Sebastian Markbåge,2020-02-25T21:54:27Z
8d7535e540c036a40754acb53d51f1fdcc8dc6d8,Add @nolint to FB bundle headers (#18126),Dominic Gannaway,2020-02-25T14:45:31Z
a29a273c17d069f3bc89c8a71dc90da4dafe544e,[react-interactions] Ensure blur to window disengages press (#18125),Dominic Gannaway,2020-02-25T14:14:19Z
bf13d3e3c6632acad4e7fce1bc93df336cb57acc,"[eslint-plugin-react-hooks] Fix cyclic caching for loops containing a… (#16853)

* [eslint-plugin-react-hooks] Fix cyclic caching for loops containing a condition

* [eslint-plugin-react-hooks] prettier write

* [eslint-plugin-react-hooks] Fix set for tests

* Update packages/eslint-plugin-react-hooks/src/RulesOfHooks.js

Co-Authored-By: Luke Kang <kidkkr@icloud.com>

Co-authored-by: Luke Kang <kidkkr@icloud.com>",Moji Izadmehr,2020-02-25T11:38:23Z
0e49074f7a5ba3981ffd28387c8b7f891c7bad24,"Cross platform support to run yarn test:edge for Microsoft Edge dev tools extension (#18108)

* Test automation for edge dev tools extension

* Linter changes

* Load extension automatically.

* Fixed path in `test` command

Co-authored-by: Brian Vaughn <brian.david.vaughn@gmail.com>",Haseeb Furkhan Mohammed,2020-02-25T02:17:01Z
ccab49473897aacae43bb4d55c1061065892403c,"Move type DOMContainer to HostConfig (#18112)

Exports from ReactDOM represents React's public API. This include types
exported by React. At some point we'll start building Flow types from
these files.

The duplicate name between DOMContainer and Container seems confusing too
since it was used in the same files even though they're the same.",Sebastian Markbåge,2020-02-24T16:57:49Z
501a78881e356bae2bc66be3d25966e87f5aa757,runAllPassiveEffectDestroysBeforeCreates's feature flag description typo fixed (#18115),adasq,2020-02-24T14:49:13Z
be76966f6b23e158f3c163061dcc266a294fddc1,Code mod import * as React from 'react' in react-window (#18105),Sebastian Markbåge,2020-02-22T07:20:17Z
09348798a912c8682e57c35842aa7a007e13fdb9,"Codemod to import * as React from ""react""; (#18102)

* import * as React from ""react"";

This is the correct way to import React from an ES module since the ES
module will not have a default export. Only named exports.

* import * as ReactDOM from ""react-dom""",Sebastian Markbåge,2020-02-22T03:45:20Z
78e816032c8af962343abbf384e06f3e9bae9269,"Don't warn about unmounted updates if pending passive unmount (#18096)

I recently landed a change to the timing of passive effect cleanup functions during unmount (see #17925). This change defers flushing of passive effects for unmounted components until later (whenever we next flush pending passive effects).

Since this change increases the likelihood of a (not actionable) state update warning for unmounted components, I've suppressed that warning for Fibers that have scheduled passive effect unmounts pending.",Brian Vaughn,2020-02-21T21:11:53Z
2c4221ce8bc5765bfddc4b32af4af602077a4a3e,"Change string refs in function component message (#18031)

This should refer to string refs specifically. The forwardRef part doesn't
make any sense in this case. I think this was just an oversight.",Sebastian Markbåge,2020-02-21T18:12:34Z
65bbda7f169394005252b46a5992ece5a2ffadad,"Rename Chunks API to Blocks (#18086)

Sounds like this is the name we're going with. This also helps us
distinguish it from other ""chunking"" implementation details.",Sebastian Markbåge,2020-02-21T07:56:40Z
8b596e00a4fffd6bb5e6990f4dd59e40e80a5ea0,Remove unused arguments in the reconciler (#18092),Dan Abramov,2020-02-21T02:26:19Z
5de5b61507d44c158fc0223728c5834fbd224ec5,"Bugfix: `memo` drops lower pri updates on bail out (#18091)

Fixes a bug where lower priority updates on a components wrapped with
`memo` are sometimes left dangling in the queue without ever being
processed, if they are preceded by a higher priority bailout.

Cause
-----

The pending update priority field is cleared at the beginning of
`beginWork`. If there is remaining work at a lower priority level, it's
expected that it will be accumulated on the work-in-progress fiber
during the begin phase.

There's an exception where this assumption doesn't hold:
SimpleMemoComponent contains a bailout that occurs *before* the
component is evaluated and the update queues are processed, which means
we don't accumulate the next priority level. When we complete the fiber,
the work loop is left to believe that there's no remaining work.

Mitigation
----------

Since this only happens in a single case, a late bailout in
SimpleMemoComponent, I've mitigated the bug in that code path by
restoring the original update priority from the current fiber.

This same case does not apply to MemoComponent, because MemoComponent
fibers do not contain hooks or update queues; rather, they wrap around
an inner fiber that may contain those. However, I've added a test case
for MemoComponent to protect against a possible future regression.

Possible next steps
-------------------

We should consider moving the update priority assignment in `beginWork`
out of the common path and into each branch, to avoid similar bugs in
the future.",Andrew Clark,2020-02-21T00:21:31Z
abfbae02a4dcb56ef0040401e7822007a9d61d5b,"Update Rollup version to 1.19.4 and fix breaking changes (#15037)

* update rollup versioni

* ignore Rollup warnings for known warning codes

* add lecacy support from elas7

* rollup 1.5

* upd to ver 1.6.0

* don't throw error

* use return instead of throw error

* upd code in comment

* fix getters test

* rollup 1.7

* rollup 1.7.3

* remove comments

* use rollup 1.7.4

* update yarn.lock for new rollup version

* rollup version 1.9.0

* rollback to version 1.7.4

* add globalThis to eslintrc.umd

* rollup 1.9.0

* upd rollup plugin versions to satisfied latest versions

* add result.json update

* rollup 1.9.3

* rollup 1.10.0

* ver 1.10.1

* rollup 1.11.3

* rollup ver 1.12.3

* rollup 1.13.1

* rollup 1.14.6

* rollup 1.15.6

* rollup 1.16.2

* upd tests

* prettier

* Rollup 1.16.3

* upd

* should throw when finding getters with a different syntax from the ones generated by Rollup

* add more one test

* rollup-plugin-prettier updated changed stuff, revert them

* don't upd all the Rollup plugins

* rollup-plugin-babel 3.0.7

* upd rollup plugin versions

* upd rollup-plugin-commonjs

* bracket spacing

* rollup 1.16.6

* rollup 1.16.7

* rename test description

* rollup 1.18.0

* use externalLiveBindings: false

* rollup 1.19.3

* remove remove-getters

* simplify CIRCULAR_DEPENDENCY warning

* simplify if logic in sizes-plugin

* rollup 1.19.4

* update output for small optimizations

* remove globalThis

* remove results.json file

* re-add globalThis",Kunuk Nykjær,2020-02-20T22:09:30Z
b789060dca314f052d856cab509569cf41020cd5,"Feature Flag for React.jsx` ""spreading a key to jsx"" warning (#18074)

Adds a feature flag for when React.jsx warns you about spreading a key into jsx. It's false for all builds, except as a dynamic flag for fb/www.

I also included the component name in the warning.",Sunil Pai,2020-02-20T11:30:04Z
3f85d53ca6f2af8a711daae6322e6bdda862f660,Further pre-requisite changes to plugin event system (#18083),Dominic Gannaway,2020-02-20T00:46:03Z
ea6ed3dbbd32515e2d4d9783c358beceeadd4b1d,"Warn for update on different component in render (#17099)

This warning already exists for class components, but not for functions.

It does not apply to render phase updates to the same component, which
have special semantics that we do support.",Andrew Clark,2020-02-19T20:43:14Z
085d02133e9e3b24ae548d89e4003899bf85022c,[Native] Migrate focus/blur to call TextInputState with the host component (#18068),Eli White,2020-02-19T19:33:40Z
7e770dae93e1a934b905d8678c7ce368ed86ef0b,"Profiler tooltip tweaks (#18082)

* Moved Profiler views into Profiler folder

* Tweaked Profiler tooltip CSS styles

* Tweaked Tooltip positioning code",Brian Vaughn,2020-02-19T18:58:45Z
b6c94d636cb33a265671b864b97870da38d97207,Add guard around FocusWithin responder root events (#18080),Dominic Gannaway,2020-02-19T18:32:18Z
1000f6135efba4f8d8ebffedeb7b472f532a8475,Add container to event listener signature (#18075),Dominic Gannaway,2020-02-19T18:00:57Z
a12dd52a4a5f19d990694810db86cc30e98308ae,Don't build some packages for WWW (#18078),Dan Abramov,2020-02-19T17:59:42Z
44e5f5e6451cf192af5dee3aa1f3a87119fc231e,"Add fiber summary tooltip to devtools profiling (#18048)

* Add tooltip component

* Separate logic of ProfilerWhatChanged to a component

* Add hovered Fiber info tooltip component

* Add flame graph chart tooltip

* Add commit ranked list tooltip

* Fix flow issues

* Minor improvement in filter

* Fix flickering issue

* Resolved issues on useCallbacks and mouse event listeners

* Fix lints

* Remove unnecessary useCallback",Moji Izadmehr,2020-02-19T17:44:31Z
2512c309e34f0207d29c19392d144edab719f347,Remove Flare bundles from build (#18077),Dominic Gannaway,2020-02-19T17:25:41Z
a8643e905e39f041cda80b498dc06018b27f6554,"add no-restricted-globals to eslint config (#18076)

Our current lint config assumes a browser environment, which means it won't warn you if you use a variable like `name` without declaring it earlier. This imports the same list as the one used by create-react-app, and enables it against our codebase.",Sunil Pai,2020-02-19T17:14:53Z
4912ba31e3dcc8d08f5b16ae38b38d74da85ea21,Add modern event system flag + rename legacy plugin module (#18073),Dominic Gannaway,2020-02-19T14:36:39Z
4d9f8500651c5d1e19d8ec9a2359d5476a53814b,"Re-throw errors thrown by the renderer at the root in the complete phase (#18029)

* Re-throw errors thrown by the renderer at the root

React treats errors thrown at the root as a fatal because there's no
parent component that can capture it. (This is distinct from an
""uncaught error"" that isn't wrapped in an error boundary, because in
that case we can fall back to deleting the whole tree -- not great, but
at least the error is contained to a single root, and React is left in a
consistent state.)

It turns out we didn't have a test case for this path. The only way it
can happen is if the renderer's host config throws. We had similar test
cases for host components, but none for the host root.

This adds a new test case and fixes a bug where React would keep
retrying the root because the `workInProgress` pointer was not advanced
to the next fiber. (Which in this case is `null`, since it's the root.)

We could consider in the future trying to gracefully exit from certain
types of root errors without leaving React in an inconsistent state. For
example, we should be able to gracefully exit from errors thrown in the
begin phase. For now, I'm treating it like an internal invariant and
immediately exiting.

* Add comment",Andrew Clark,2020-02-18T23:55:38Z
14afeb1033e25942e63787750388972916f20a39,Added missing feature flag,Brian Vaughn,2020-02-18T22:49:57Z
691096c95d1019f57e0da2c9a060c5e094b7c586,"Split recent passive effects changes into 2 flags (#18030)

* Split recent passive effects changes into 2 flags

Separate flags can now be used to opt passive effects into:
1) Deferring destroy functions on unmount to subsequent passive effects flush
2) Running all destroy functions (for all fibers) before create functions

This allows us to test the less risky feature (2) separately from the more risky one.

* deferPassiveEffectCleanupDuringUnmount is ignored unless runAllPassiveEffectDestroysBeforeCreates is true",Brian Vaughn,2020-02-18T22:19:43Z
56d8a73affad624ee4d48f1685e0a92adce0bd9c,"[www] Disable Scheduler `timeout` w/ dynamic flag (#18069)

Before attempting to land an expiration times refactor, I want to see
if this particular change will impact performance (either positively
or negatively). I will test this with a GK.",Andrew Clark,2020-02-18T21:43:16Z
1a6d8179b6dd427fdf7ee50d5ac45ae5a40979eb,[react-interactions] Ensure onBeforeBlur fires for hideInstance (#18064),Dominic Gannaway,2020-02-18T18:50:38Z
48c4867d745bbf91ae73892545960c0979c2dbf7,"Update issue templates to directly link to relevant sources (#18039)

GitHub supports linking to off-site sources for certain types of issue.",Ryota Murakami,2020-02-18T18:30:00Z
90be006da8e231279151e7b1518bb64c62e26851,Updated Yarn lockfile,Brian Vaughn,2020-02-18T17:40:59Z
d5ddc16a3398c33d70489cee87f5176c85f3c9f5,"React developer tools extension for Microsoft Edge  (#18041)

* Port Chrome extension to Microsoft Edge",Haseeb Furkhan Mohammed,2020-02-18T17:40:30Z
f48a5e64e8fd903293f5b854beb795dcc6bae86d,Further cleanup of plugin event system (#18056),Dominic Gannaway,2020-02-18T13:31:59Z
d533229fba8f7e7e576436bf52bbcae56c862906,Fix Prettier,Dan Abramov,2020-02-17T20:36:16Z
56a8c353219ac93ab358eb28009de881ae48251e,eslint-plugin-react-hooks@2.4.0,Dan Abramov,2020-02-17T20:26:56Z
93a229bab59f94e214256582c55d3b6c1fc2b958,"Update eslint rule exhaustive deps to use new suggestions feature (#17385)

This closes #16313",Will Douglas,2020-02-17T20:24:27Z
9def56ec0e1e71928ee999f48c00b1803ed8772a,Refactor DOM plugin system to single module (#18025),Dominic Gannaway,2020-02-14T08:10:42Z
2d6be757df86177ca8590bf7c361d6c910640895,"[Native] Delete NativeComponent and NativeMethodsMixin (#18036)

* [Native] Delete NativeComponent and NativeMethodsMixin

* Remove more files",Eli White,2020-02-13T23:09:25Z
d4f2b0379c8ecf8266497f863ee5a2aa612ff4ba,"Add Auto Import to Babel Plugin  (#16626)

This babel transform is a fork of the @babel/plugin-transform-react-jsx transform and is for experimentation purposes only. We don't plan to own this code in the future, and we will upstream this to Babel at some point once we've proven out the concept.

As per the RFC to simplify element creation, we want to add the ability to auto import ""react' directly from the babel plugin. This commit updates the babel plugin with two options:

1.) importSource: The React module to import from. Defaults to react.
2.) autoImport: The type of import. Defaults to none.
- none: Does not import React. JSX compiles to React.jsx etc.
- namespace: import * as _react from ""react"";. JSX compiles to _react.jsx etc.
- default: import _default from ""react""; JSX compiles to _default.jsx etc.
- namedExports: import {jsx as _jsx} from ""react""; JSX compiles to _jsx etc.
- require: var _react = _interopRequireWildcard(require(""react""));. jSX compiles to _react.jsx etc.

namespace, default, and namedExports can only be used when sourceType: module and require can only be used when sourceType: script.

It also adds two pragmas (jsxAutoImport and jsxImportSource) that allow users to specify autoImport and importSource in the docblock.",Luna Ruan,2020-02-13T20:36:19Z
8777b44e982e7ddedda62aee02f1fd370795db44,"Add Modern WWW build (#18028)

* Build both stable and experimental WWW builds

* Flip already experimental WWW flags to true

* Remove FB-specific internals from modern FB builds

We think we're not going to need these.

* Disable classic features in modern WWW builds

* Disable legacy ReactDOM API for modern WWW build

* Don’t include user timing in prod

* Fix bad copy paste and add missing flags to test renderer

* Add testing WWW feature flag file

We need it because WWW has a different meaning of experimental now.",Dan Abramov,2020-02-13T20:33:53Z
58b8797b7372c9296e65e08ce8297e4a394b7972,"remove ""Unreleased"" section from CHANGELOG (#18027)

This section is empty, and imo isn't really helpful in React's changelog. I'm honestly not sure why this is even here? Figured I'd start a discussion with a PR, or we can remove it right now.",Sunil Pai,2020-02-12T17:17:49Z
a607ea4c424356707302da998bf13e9bf1b55007,Remove getIsHydrating (#18019),Dan Abramov,2020-02-12T01:01:29Z
988f4b14eee482e6f73e897cd5329318023e5696,"Do not export passiveBrowserEventsSupported from Focus responder (#18022)

Remove code",Dominic Gannaway,2020-02-11T23:57:37Z
f7278034de5a289571f26666e6717c4df9f519ad,"Flush all passive destroy fns before calling create fns (#17947)

* Flush all passive destroy fns before calling create fns

Previously we only flushed destroy functions for a single fiber.

The reason this is important is that interleaving destroy/create effects between sibling components might cause components to interfere with each other (e.g. a destroy function in one component may unintentionally override a ref value set by a create function in another component).

This PR builds on top of the recently added deferPassiveEffectCleanupDuringUnmount kill switch to separate passive effects flushing into two separate phases (similar to layout effects).

* Change passive effect flushing to use arrays instead of lists

This change offers a small advantage over the way we did things previous: it continues invoking destroy functions even after a previous one errored.",Brian Vaughn,2020-02-11T17:52:54Z
529e58ab0a62ed22be9b40bbe44a6ac1b2c89cfe,Remove legacy www config from Rollup build (#18016),Dominic Gannaway,2020-02-11T13:42:19Z
42918f40aabd41a324b5dd10652e078dd2c411e6,Change build from babylon to babel (#18015),Dominic Gannaway,2020-02-11T11:56:26Z
df5faddcc2ad27be5700823d4f5367e5e9ae4620,Refactor commitPlacement to recursively insert nodes (#17996),Dominic Gannaway,2020-02-10T23:38:24Z
ab7b83a924bc7c9f43d37beb601d42215916c891,Stop exposing some internals on FB build (#18011),Dan Abramov,2020-02-10T19:52:27Z
517de74b0c33aa800dbf1f5ce48dc7e336c93cfb,"Tweak comment wording (#18007)

* Revert ""Update ReactFiberExpirationTime.js (#17825)""

This reverts commit b63cb6f6cf18bbe28eb0a443c64fd9b87d79616d.

* Reword",Dan Abramov,2020-02-10T16:15:10Z
b63cb6f6cf18bbe28eb0a443c64fd9b87d79616d,"Update ReactFiberExpirationTime.js (#17825)

replaced 'add' with 'subtract'",haseeb,2020-02-10T12:37:49Z
89c6042df373f422bce5744f28597390b6c01ecb,fix: typo in test (#18005),Jesse Katsumata,2020-02-10T12:34:10Z
4f71f25a34db0caa1c9c0b75f1f453f948272e65,"Re-enable shorthand CSS property collision warning (#18002)

Originally added in https://github.com/facebook/react/pull/14181; disabled in https://github.com/facebook/react/pull/14245. Intention was to enable it in React 16.7 but we forgot.",Sophie Alpert,2020-02-10T11:42:11Z
e05dedc415171aad65e4263ef861b21e867325f7,Added $FlowFixMe to DevTools shell for module we Flow-ignore (#18001),Brian Vaughn,2020-02-07T22:36:51Z
d1bfdfb861dfcb5e9697686bfa37c5b734c0250e,Ignore react-native-web in Flow checks (#17999),Dan Abramov,2020-02-07T16:24:25Z
c55c34e46a6d8148afb78594d14f4675f9346900,Move React Map child check to behind flags or __DEV__ (#17995),Dominic Gannaway,2020-02-07T12:21:50Z
901d76bc5c8dcd0fa15bb32d1dfe05709aa5d273,"dataForRoots.set duplicate removal (#17993)

dataForRoots.set duplicate removal",cutjavascript,2020-02-06T19:48:02Z
3f814e75823dcef29a2f4ee5b22c94830a85a0e2,Fix Flow type for React Native (#17992),Dan Abramov,2020-02-06T18:31:13Z
256d78d11f1c7da749914a8b2d35b2974a54b0f2,Add feature flag for removing children Map support (#17990),Dominic Gannaway,2020-02-06T13:19:35Z
df134d31cb107d0dbcdf036d3502a23a81b2c029,Use babel parser rather than Babylon in extract errors (#17988),Dominic Gannaway,2020-02-06T12:46:32Z
9e158c091bb2bd795b734437bf5cead514039531,"Updated release script documentation and command names (#17929)

* Updated release script documentation and command names

* Update scripts/release/README.md

Co-Authored-By: Sunil Pai <threepointone@oculus.com>

* Updated README

Co-authored-by: Sunil Pai <threepointone@oculus.com>",Brian Vaughn,2020-02-05T16:52:31Z
d84c539b31bc703fe6271965ce85344f50c8c207,"fix sizebot - point correctly to circleci artifact (#17975)

similar to #17972, this should fix sizebot not reporting stats right now",Sunil Pai,2020-02-04T22:03:13Z
613cbd3acef902c9737a8934f0950bf934c5f30e,Formatting fix (Prettier) to build script,Brian Vaughn,2020-02-04T19:37:38Z
562d2fbc497d5e8e6ae5934ae9f68b28cd613fab,"Fix release scripts (#17972)

Circle CI seems to have changed the reported artifact path which broke our scripts.",Brian Vaughn,2020-02-04T19:36:49Z
9dba218d933d66fba9a8ba23b90dbb852514da8b,"[Mock Scheduler] Mimic browser's advanceTime (#17967)

The mock Scheduler that we use in our tests has its own fake timer
implementation. The `unstable_advanceTime` method advances the timeline.

Currently, a call to `unstable_advanceTime` will also flush any pending
expired work. But that's not how it works in the browser: when a timer
fires, the corresponding task is added to the Scheduler queue. However,
we will still wait until the next message event before flushing it.

This commit changes `unstable_advanceTime` to more closely resemble the
browser behavior, by removing the automatic flushing of expired work.

```js
// Before this commit
Scheduler.unstable_advanceTime(ms);

// Equivalent behavior after this commit
Scheduler.unstable_advanceTime(ms);
Scheduler.unstable_flushExpired();
```

The general principle is to prefer separate APIs for scheduling tasks
and flushing them.

This change does not affect any public APIs. `unstable_advanceTime` is
only used by our own test suite. It is not used by `act`.

However, we may need to update tests in www, like Relay's.",Andrew Clark,2020-02-04T19:35:21Z
cddde45806a8e37f534742a280fa18be79871d18,"apply changes on editablevalue on blur feature implemented (#17062)

* apply changes on editablevalue on blur feature implemented

* Removed ""Undo"" button and unnecessary event.preventDefault()

Co-authored-by: Brian Vaughn <brian.david.vaughn@gmail.com>",Murat ÇATAL,2020-02-04T19:05:01Z
d6e08fe0a806703241311b5331c21f29fdf4a139,"Remove Suspense priority warning (#17971)

* Remove Suspense priority warning

* Fix tests",Dan Abramov,2020-02-04T18:05:15Z
812277dab6b449596288825d59184dfc1acdf370,Fix onMouseEnter is fired on disabled buttons (#17675),Alfredo Granja,2020-02-04T14:56:55Z
2078aa9a401aa91e97b42cdd36a6310888128ab2,Add dom fixture for autofilled form state (#17951),Hassan Alam,2020-02-04T14:53:35Z
3e9251d605692e6db6103e4fca9771ac30a62247,"make testing builds for React/ReactDOM (#17915)

This PR introduces adds `react/testing` and `react-dom/testing`.
- changes infra to generate these builds
- exports act on ReactDOM in these testing builds
- uses the new test builds in fixtures/dom

In the next PR -

- I'll use the new builds for all our own tests
- I'll replace usages of TestUtils.act with ReactDOM.act.",Sunil Pai,2020-02-03T23:31:31Z
ace9e8134c3080d86f20097d5ba3369e15a97a83,"Simplify Continuous Hydration Targets (#17952)

* Simplify Continuous Hydration Targets

Let's use a constant priority for this. This helps us avoid restarting
a render when switching targets and simplifies the model.

The downside is that now we're not down-prioritizing the previous hover
target. However, we think that's ok because it'll only do one level too
much and then stop.

* Add test meant to show why it's tricky to merge both hydration levels

Having both levels co-exist works. However, if we deprioritize hydration
using a single level, we might deprioritize the wrong thing.

This adds a test that catches it if we ever try a naive deprioritization
in the future.

It also tests that we don't down-prioritize if we're changing the hover
in the middle of doing continuous priority work.",Sebastian Markbåge,2020-02-03T20:47:14Z
7df32c4c8c53d971e894c5e8d62a3cc908489b05,"Flush `useEffect` clean up functions in the passive effects phase (#17925)

* Flush useEffect clean up functions in the passive effects phase

This is a change in behavior that may cause broken product code, so it has been added behind a killswitch (deferPassiveEffectCleanupDuringUnmount)

* Avoid scheduling unnecessary callbacks for cleanup effects

Updated enqueuePendingPassiveEffectDestroyFn() to check rootDoesHavePassiveEffects before scheduling a new callback. This way we'll only schedule (at most) one.

* Updated newly added test for added clarity.

* Cleaned up hooks effect tags

We previously used separate Mount* and Unmount* tags to track hooks work for each phase (snapshot, mutation, layout, and passive). This was somewhat complicated to trace through and there were man tag types we never even used (e.g. UnmountLayout, MountMutation, UnmountSnapshot). In addition to this, it left passive and layout hooks looking the same after renders without changed dependencies, which meant we were unable to reliably defer passive effect destroy functions until after the commit phase.

This commit reduces the effect tag types to only include Layout and Passive and differentiates between work and no-work with an HasEffect flag.

* Disabled deferred passive effects flushing in OSS builds for now

* Split up unmount and mount effects list traversal",Brian Vaughn,2020-02-03T20:30:01Z
9944bf27fb75b330202f51f58a2ce5c0ea778bef,Add version property to ReactDOM (#15780),Evyatar,2020-02-03T19:19:04Z
434770c3b4b94315c789234c27ed9dc2ec8a78ad,Add beforeRemoveInstance method to ReactNoop (#17959),Dominic Gannaway,2020-02-03T11:31:51Z
08c1f79e1e13719ae2b79240bbd8f97178ddd791,"Fix Cannot read property 'sub' of undefined when navigating to plain-text pages (#17848)

Update various parts of DevTools to account for the fact that the global ""hook"" might be undefined if DevTools didn't inject it (due to the page's `contentType`) it (due to the page's `contentType`)",Mark Huang,2020-02-02T20:04:48Z
9ad35905fae96036a130d9dec24b47132dfe4076,Add DevTools tests for copying complex values (#17948),Brian Vaughn,2020-01-31T23:17:57Z
00745b053fa00424d0963a0b9d64e3fcb3f90298,Typo fix (#17946),Deniz Susman,2020-01-31T22:51:43Z
d9a5170594486deeb767c243cc4b381e9e085c79,fix: check bigint in serializeToString and change it to string (#17931),Farhad Yasir,2020-01-31T22:36:00Z
38cd75861f44a40e686a39403bff39bf16fd796d,Update google-closure-compiler (#17902),Nicolas Gallagher,2020-01-31T01:34:03Z
6ae2c33a759e8f44622795603c84da9a2ebddf43,StrictMode should call sCU twice in DEV (#17942),Brian Vaughn,2020-01-30T21:03:44Z
9dbe1c54dff3b6a7f89bae9b19b4698e0bfbcb9a,"Revert ""Bugfix: Expiring a partially completed tree (#17926)"" (#17941)

This reverts commit 01974a867c543fca6ebe9f4e612dcc3bb8f80528.

* Failing test: Expiring a partially completed tree

We should not throw out a partially completed tree if it expires in the
middle of rendering. We should finish the rest of the tree without
yielding, then finish any remaining expired levels in a single batch.

* Check if there's a partial tree before restarting

If a partial render expires, we should stay in the concurrent path
(performConcurrentWorkOnRoot); we'll stop yielding, but the rest of the
behavior remains the same.

We will only revert to the sync path (performSyncWorkOnRoot) when
starting on a new level.

This approach prevents partially completed concurrent work from
being discarded.

* New test: retry after error during expired render",Andrew Clark,2020-01-30T19:14:57Z
d2ae77d0e41fc6cee22bf3f0c9bd9c3d8bcec58c,Remove root.unmount() callback from DevTools code (#17939),Brian Vaughn,2020-01-30T17:36:43Z
e98797f7b98c827fb691e519bc2c445977a0546c,"Fix Event Replaying in Flare by Eagerly Adding Active Listeners  (#17933)

* Add test of Event Replaying using Flare

* Fix Event Replaying in Flare by Eagerly Adding Active Listeners

This effectively reverts part of https://github.com/facebook/react/pull/17513",Sebastian Markbåge,2020-01-30T17:32:41Z
1662035852519983955c8c3bdab72a0c60b1264b,Ensure createRoot warning parity with ReactDOM.render (#17937),Dominic Gannaway,2020-01-30T17:17:42Z
b2382a71503595288a63050d1c71ff0be6650d6f,Add ReactDOM.unstable_renderSubtreeIntoContainer warning flag (#17936),Dominic Gannaway,2020-01-30T11:56:04Z
01974a867c543fca6ebe9f4e612dcc3bb8f80528,"Bugfix: Expiring a partially completed tree (#17926)

* Failing test: Expiring a partially completed tree

We should not throw out a partially completed tree if it expires in the
middle of rendering. We should finish the rest of the tree without
yielding, then finish any remaining expired levels in a single batch.

* Check if there's a partial tree before restarting

If a partial render expires, we should stay in the concurrent path
(performConcurrentWorkOnRoot); we'll stop yielding, but the rest of the
behavior remains the same.

We will only revert to the sync path (performSyncWorkOnRoot) when
starting on a new level.

This approach prevents partially completed concurrent work from
being discarded.

* New test: retry after error during expired render",Andrew Clark,2020-01-29T20:40:18Z
241c4467eef7c2a8858c96d5dfe4e8ef84c47bad,Add a note about expiring OTP codes,Dan Abramov,2020-01-29T16:31:51Z
faabe22b4f5b5812dc756b437465a3c519f6d872,Use next tag for canary releases in the doc (#17923),Dan Abramov,2020-01-29T16:09:05Z
57333ca33a0619ff2334e4eb19139b4c7e9830f7,"Show first component stack in context warning (#17922)

* Update tests

* Show first component stack in context warning

Co-authored-by: Dominic Gannaway <trueadm@users.noreply.github.com>",Dan Abramov,2020-01-29T14:57:52Z
a8fce06d3efd52834de0e63c72ee77c2b267b48c,Fix Jest diff call (#17921),Dan Abramov,2020-01-29T14:38:22Z
29a1559619a4f7b63cc2a824482e86e6e9886938,Add semver dependency explicitly to DevTools (#17919),Dan Abramov,2020-01-29T14:20:56Z
b7f217d40c6c8c973c86fabceeda238b38662171,[Concurrent Mode] Add missing event plugin priorities (#17914),Dominic Gannaway,2020-01-28T13:20:26Z
e26682a9f3889439765942f1510f280466c3433a,Removed Root API callback params and added warnings (#17916),Brian Vaughn,2020-01-27T20:35:08Z
cf0081263ced42ddebe0a0d868701890448bfd4b,"Upgrade to jest 25 (#17896)

The changes to the test code relate to changes in JSDOM that come with Jest 25:

* Several JSDOM workarounds are no longer needed.
* Several tests made assertions to match incorrect JSDOM behavior (e.g. setAttribute calls) that JSDOM has now patched to match browsers.
  * https://codesandbox.io/s/resets-value-of-datetime-input-to-fix-bugs-in-ios-safari-1ppwh
* JSDOM no longer triggers default actions when dispatching click events.
  * https://codesandbox.io/s/beautiful-cdn-ugn8f
* JSDOM fixed (jsdom/jsdom#2700) a bug so that calling focus() on an already focused element does not dispatch a FocusEvent.
* JSDOM now supports passive events.
* JSDOM has improved support for custom CSS properties.
  * But requires jsdom/cssstyle#112 to land to support webkit prefixed properties.",Simen Bekkhus,2020-01-25T16:43:02Z
6faf6f5eb1705eef39a1d762d6ee381930f36775,Update to flow 0.97 (#17892),Nicolas Gallagher,2020-01-24T18:52:38Z
81e30c7ff67d4c5d6e9b9f2bb3d9af44bd40c621,Remove unused modules from legacy event responders (#17907),Nicolas Gallagher,2020-01-24T18:50:27Z
9d09052d2f14a238285352f3156bbe034451bc7b,Update various monorepo dependencies (#17901),Nicolas Gallagher,2020-01-24T18:28:50Z
3c713d513195a53788b3f8bb4b70279d68b15bcc,chore: update to latest release of babel (#17897),Simen Bekkhus,2020-01-24T17:49:24Z
3b3decf87121dcc20bfc0820b7b35d2b028adaf2,"add warning when owner and self are different for string refs (#17864)

When owner and self are different for string refs, we can't easily convert them to callback refs. This PR adds a warning for string refs when owner and self are different to tell users to manually update these refs.",Luna Ruan,2020-01-22T20:32:51Z
6c00c5bba4d2272de6975c124ab6dc29abb629c8,Update to flow-bin@0.89 (#17842),Nicolas Gallagher,2020-01-22T18:02:30Z
cf7a0c24d4640f07d465c5a67aab2639ddd5d0a9,"Remove dynamic GKs for selective/train (#17888)

There are shipped/shipping.",Sebastian Markbåge,2020-01-22T03:43:35Z
c322f5913f5ec4f0f8d7926ba7401e94c0aaa772,Add unstable_renderSubtreeIntoContainer and unstable_createPortal feature flags (#17880),Dominic Gannaway,2020-01-21T21:17:42Z
f2fd484afdee1e4e25ee453bb7a544fa0558d172,Add React.createFactory() deprecation warning (#17878),Dominic Gannaway,2020-01-21T15:51:39Z
0c04acaf8955d3f754ec894abfc7586cbf3220dc,"Remove FB specific build (#17875)

I moved unstable_SuspenseList internally. We don't need the FB build.
I plan on also removing the ReactDOM fb specific entry. We shouldn't add
any more FB specific internals nor APIs. If they're experimental they
should go onto the experimental builds to avoid too many permutations.",Sebastian Markbåge,2020-01-21T00:06:01Z
9fd760ce75fd76716888997852ca85394eeab49a,Add disable <textarea/> children flag (#17874),Dominic Gannaway,2020-01-20T15:12:30Z
a209a97ed742ced488d7edf4fc2dcbf316ba13cb,Add feature flag around React.createFactory (#17873),Dominic Gannaway,2020-01-20T15:00:18Z
95bd7aad7daa80c381faa3215c80b0906ab5ead5,"Remove renderPhaseUpdates Map (#17625)

* Remove renderPhaseUpdates Map

Follow up to #17484, which was reverted due to a bug found in www.

* Failing test: Dropped updates

When resetting render phase updates after a throw, we should only clear
the pending queue of hooks that were already processed.

* Fix non-render-phase updates being dropped

Detects if a queue has been processed by whether the hook was cloned.
If we change the implementation to an array instead of a list, we'll
need some other mechanism to determine whether the hook was processed.

* Regression test: startTransition in render phase

useTransition uses the state hook as part of its implementation, so we
need to fork it in the dispatcher used for re-renders, too.",Andrew Clark,2020-01-17T21:00:35Z
29b4d0721ce288ccbd3691e2dd768058255992b4,"Allow debug-test commands to run on Windows (#17122)

Fix #17121",Bogdan,2020-01-17T18:20:09Z
b43b36dd91dcd09282a334b61e79dd89e2a08dcf,Remove ReactInstanceMap_DO_NOT_USE shim (#17861),Dominic Gannaway,2020-01-17T12:37:55Z
9e075d16b250de8f65680c45c3686eb3faec8153,[react-interactions] Remove deprecated Scope APIs + update Focus components/docs (#17859),Dominic Gannaway,2020-01-17T12:16:39Z
bc1f3e1a691be8926b48859fc96ef7ca76590d1e,Fix DevTools Flow error for key-sort function (#17849),Brian Vaughn,2020-01-15T17:45:16Z
b6173e643a4311b9b1cf039824b2f3d7b974b8cf,[react-interactions] Add DO_NOT_USE to Scope methods (#17835),Dominic Gannaway,2020-01-15T09:50:09Z
8aefb1995cc6d46cc29778b0c54bd989478973c0,Removed 'reactInternal' reference in DevTools overlay highlighter (#17841),Brian Vaughn,2020-01-14T23:38:09Z
643dcb5526f05957ffaf1c8ba991563f988d655b,Add support for Node v13 for development (#17837),Jason Williams,2020-01-14T23:20:42Z
1e1a98942225771f86d8a81b5ac561a9fbff9263,Re-enabled DevTools context menu option in Firefox to inspect function prop source (#17838),Brian Vaughn,2020-01-14T22:00:28Z
3bd6adceda6335adc5f5bbae148dd2ff290eeea6,Update typescript package and jest preprocessor (#17839),Nicolas Gallagher,2020-01-14T21:52:52Z
50eafef07e10874cc11dd2a79065ca28dabb0e46,Update babel-eslint and eslint packages (#17829),Nicolas Gallagher,2020-01-14T17:26:44Z
4f480d064531fa51d9a3bdd0b7a1b0367c2ee209,Fix typo in TestCase description (#17077),André,2020-01-12T19:54:12Z
f4ca909e0e001b2318cac4ed61773a24f4244b0c,react-refresh@0.7.2,Dan,2020-01-12T17:54:30Z
255d9ac5f58e85903e27128cf263dd6d2f9e7133,[Fresh] Fix edge case with early function call (#17824),Dan Abramov,2020-01-12T17:53:50Z
64aae7b06fa47e126b0ba9c0ba9896caa803528e,Fix issue template for questions (#17817),Nicolas Gallagher,2020-01-10T18:57:34Z
d8570ec6eaa4133037e1f350c8e8ed570c8b1b71,Create ReactFabric.stopSurface and use that for bridgeless mode binding (#16164),Emily,2020-01-10T18:21:32Z
05e487a12ffee59b75db82995f3f826254444741,Add GitHub issue templates (#17815),Nicolas Gallagher,2020-01-10T00:16:37Z
5d6129b5d1eb53bdfec8c2b44ec3c9cc3a4a1770,"Update ReactSuspenseList-test.internal.js (#17034)

Typo",Ganapati V S,2020-01-09T22:14:00Z
ff900095b98621848caf6ed1483dce0e347d3aa4,Fix message typo in printOperationsArray function (#17039),Dawid Loranc,2020-01-09T22:13:03Z
1b6e269751c28030429503a60590114e252fc86c,"Create SECURITY.md (#15784)

Adds SECURITY.md as mentioned in #15722.",Alican Çubukçuoğlu,2020-01-09T22:07:41Z
3ac81a57fbb7bd272f62444820c0451e0b344408,"Update create-react-app note for eslint-plugin-react-hooks (#16982)

eslint-plugin-react-hooks was added in react-scripts 3.0.0",Tao,2020-01-09T21:47:05Z
435259f189526fa32b8c9cdab7d7b2c1dc260bc8,Add better test coverage for hooks in DevTools Profiler's change-detection (#17816),Brian Vaughn,2020-01-09T21:15:19Z
2e4948a34d4504eb852f7473d3c0315037f75d22,"Add configuration for the ""Stale"" GitHub App (#17806)

Configuration for the bot that marks and closes stale issues and pull requests.
https://probot.github.io/apps/stale/",Nicolas Gallagher,2020-01-09T19:13:41Z
e706721490e50d0bd6af2cd933dbf857fd8b61ed,"Update Flow to 0.84 (#17805)

* Update Flow to 0.84

* Fix violations

* Use inexact object syntax in files from fbsource

* Fix warning extraction to use a modern parser

* Codemod inexact objects to new syntax

* Tighten types that can be exact

* Revert unintentional formatting changes from codemod",Dan Abramov,2020-01-09T14:50:44Z
b979db4e7215957f03c4221622f0b115a868439a,"Bump Prettier (#17811)

* Bump Prettier

* Reformat

* Use non-deprecated option",Dan Abramov,2020-01-09T13:54:11Z
18875b240131273c8e3dd213341edc159150d80e,"Remove special casing of toString values when enableTrustedTypesIntegration (#17774)

* Remove toString of dangerouslySetInnerHTML

As far as I can tell, the toString call was added here:

https://github.com/facebook/react/commit/caae627cd557812d28d11237b34bff6c661ea8bc#diff-5574f655d491348f422bca600ff6711dR887

It was never really needed. Subsequently when we added Trusted Types,
this needed to be changed to a special call but we really should just
always let it pass through.

* Remove special casing of toString values when enableTrustedTypesIntegration

As far as I can tell, we only toString in user space because of IE8/9.

We don't really support IE8/9 anymore and by the time this flag is on,
we should be able to deprecate it.

Unless this is also an issue in IE11. I haven't tested yet.",Sebastian Markbåge,2020-01-08T22:40:07Z
19f6fe170ce920d7183a5620f4e218334c8bac62,"Revert ""Revert ""Dispatch commands to both UIManagers from both renderers (#17211)"" (#17232)"" (#17799)

* Revert ""Revert ""Dispatch commands to both UIManagers from both renderers (#17211)"" (#17232)""

This reverts commit d0fc0ba0a688950b8ab24a89f14888a19efa2444.

* Clean up another __DEV__ warning check",Eli White,2020-01-08T00:47:19Z
6250462bed19c9f18a8cf3c2b5fcaf9aba1df72b,"Renamed ""ReactDOM-fb"" imports to ""ReactDOM"" in www shims (#17797)

* Renamed ""ReactDOM-fb"" imports to ""ReactDOM"" in www shims

* Removed ReactDOMComponentTree_DO_NOT_USE.js",Brian Vaughn,2020-01-07T21:05:36Z
5e21157d86a4f589891e90f4103b3a411af889a3,[react-interactions] Fix Hover issues with portals (#17765),Dominic Gannaway,2020-01-07T19:45:26Z
40568e9773276d94e6aa5b70fed4355a7291827f,Updated DevTools CHANGELOG to add pending release details,Brian Vaughn,2020-01-06T18:37:20Z
5586b3022c667bec0d797a36691365b787437ce2,Merge branch 'GasimGasimzada-scope-devtools-styles',Brian Vaughn,2020-01-06T18:36:13Z
7580d6717c11fb745b89e8e1aecded7c6d025192,Fixed padding problem in standalone shell,Brian Vaughn,2020-01-06T18:35:36Z
80e32487b989bb948293876583b9ced90022d9b1,Fixed box-sizing problem in test shell,Brian Vaughn,2020-01-06T18:23:55Z
c1b573bf2fcd7a550d4d8c052b155562290e8fc5,Merge branch 'scope-devtools-styles' of https://github.com/GasimGasimzada/react into GasimGasimzada-scope-devtools-styles,Brian Vaughn,2020-01-06T18:13:35Z
fc921a1693aaeb9eb7fc2745a3ff5a9d33aefeee,Updated DevTools CHANGELOG to add pending release details,Brian Vaughn,2020-01-06T18:12:26Z
1c63b2e416b5ab4efe91fd73b055092001583b73,"Renamed ""backend.js"" to ""react_devtools_backend.js"" (#17790)",Brian Vaughn,2020-01-06T17:29:20Z
2bb227ef801c3a876d8064bc75903c29c94bc71d,DevTools: Improve function props display for inspected elements (#17789),Brian Vaughn,2020-01-06T17:19:59Z
24f824250fde6418569222f6e33b35ba9c1f1f46,"DevTools Profiler: Improve how empty commits are filtered (#17771)

Previously, DevTools filtered empty commits on the backend, while profiling, through the use of a bailout heuristic that React currently happens to use. This approach was brittle and may have exacerbated the long-standing Profiler bug #16446.

This PR removes that heuristic and adds as a post-processing filtering pass instead. This removes the coupling between DevTools and a React internal implementation detail that may change.

I believe DevTools has two choices of criteria for this filtering:
* Filter commits that have no actual duration metadata.
* Filter commits that have no recorded operations (no mutations to the tree, no changed tree base durations).

I chose the first option, filtering by commits that have no reported metadata. It will miss an edge case, e.g. , but we would have nothing meaningful to show in the Profiler for those cases anyway. (This particular edge case is why one of the snapshots changed with this commit.)

The second option, filtering by recorded operations, could potentially miss a more important edge case: where a component *did* render, but its  didn't change. (In that event, there would be no operations to send.)",Brian Vaughn,2020-01-05T00:50:39Z
edeea0720791f998b505f2ecdcf866c7e539e7a2,"Remove toString of dangerouslySetInnerHTML (#17773)

As far as I can tell, the toString call was added here:

https://github.com/facebook/react/commit/caae627cd557812d28d11237b34bff6c661ea8bc#diff-5574f655d491348f422bca600ff6711dR887

It was never really needed. Subsequently when we added Trusted Types,
this needed to be changed to a special call but we really should just
always let it pass through.",Sebastian Markbåge,2020-01-04T13:47:23Z
9cc094a19a9e43d33ba5ac713935e657ea4e3cdd,Scope dev tools wildcard styles within DevTools CSS class,Gasim Gasimzada,2020-01-04T10:04:15Z
f749045a5b4f6b9599cf54ea654b60b3a6155f0d,DevTools 4.3.0 -> 4.4.0,Brian Vaughn,2020-01-03T18:02:50Z
59f21f1b2444aabe9133c358eaa0ed2c7b953ea7,"HostText needs to copy over from current if it is unchanged in persistent  mode (#17538)

stateNode is not one of the fields that gets copied over by createWorkInProgress.

This is bad for persistent mode since it's not the same instance.

In HostComponent we happened to always end up transferring the current stateNode when we bail.
However, we didn't do this for HostText.",Sebastian Markbåge,2020-01-03T17:35:17Z
7e2ab87a613b11250fe9678cc111fc8485c8a683,"DevTools: Replaced unsafe hasOwnProperty() calls (#17768)

DevTools previously called  in several places with user-defined values. This could lead to runtime errors if those values had an overriden  attribute. This commit replaces those callse with  instead.

New test cases have been added.",Brian Vaughn,2020-01-03T17:34:12Z
5d3d71b1ddbbf5743108c998904f7bb575f4330e,"Partial fix DevTools Profiler ''Could not find node…'' error (#17759)

The Profiler stores:

1. A snapshot of the React tree when profiling started
2. The operations array for each commit
3. Profiling metadata (e.g. durations, what changed, etc) for each commit

It uses this information (snapshot + operations diff) to reconstruct the state of the application for a given commit as it's viewed in the Profiler UI. Because of this, it's very important that the operations and metadata arrays align. If they don't align, the profiler will be unable to correctly reconstruct the tree, and it will likely throw errors (like 'Could not find node…')

#16446 tracks a long-standing bug where these two arrays get misaligned. I am still not entirely sure what causes this bug, but with PR #17253, I exacerbated things by introducing another potential way for it to happen. This PR addresses the regression at least (and adds test coverage for it).

I will follow up this afternoon on the original #16446 issue. I think I may have a lead on what's happening at least, if not exactly an idea of how to reproduce it.",Brian Vaughn,2020-01-03T17:28:31Z
cca994c6a1f13dd0b64ad0a909b5209b10cc8609,"DevTools Profiler commit selector wraps around (#17760)

I used to disable the <- and -> buttons when you reached the beginning or end of the profiler data. This can be kind of annoying though when you just want to get to the last commit, and I don't think there's a good reason to enforce it anyway, so I backed that change out. The buttons now wrap around at the beginning or end of the list.",Brian Vaughn,2020-01-02T22:44:07Z
b05cd611ba2e47dbc991abf9128d1fab6c237fd5,Fixed CircleCI DevTools build artifact tar internal structure (#17758),Brian Vaughn,2020-01-02T17:28:20Z
195b3db61885552b84eacb2ab51502b342d0fa8a,"Added missing guard to DevTools for Objects with null proto (#17757)

This prevents a runtime error from occurring when these objects are inspected.",Brian Vaughn,2020-01-02T16:27:29Z
2c1e5d2b223a267179954cfe54592a7ba102de10,Build and store DevTools artifacts in Circle CI (#17746),Brian Vaughn,2020-01-01T15:58:47Z
