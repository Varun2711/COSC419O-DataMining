SHA,Message,Author,Date
86883d7aace02b4a3d7c3b86d52cbc4e2003a0f7,Updated DevTools pending CHANGELOG,Brian Vaughn,2019-12-30T17:12:49Z
b4e2fac09dbfc616860f8aefeacf25076809ed92,"Bump handlebars from 4.0.11 to 4.5.3 in /fixtures/expiration (#17729)

Bumps [handlebars](https://github.com/wycats/handlebars.js) from 4.0.11 to 4.5.3.
- [Release notes](https://github.com/wycats/handlebars.js/releases)
- [Changelog](https://github.com/wycats/handlebars.js/blob/master/release-notes.md)
- [Commits](https://github.com/wycats/handlebars.js/compare/v4.0.11...v4.5.3)

Signed-off-by: dependabot[bot] <support@github.com>",dependabot[bot],2019-12-30T16:57:08Z
e6226e6493a7edec779841e8b85111bc8be88ca7,"Bump handlebars from 4.0.6 to 4.5.3 in /fixtures/dom (#17730)

Bumps [handlebars](https://github.com/wycats/handlebars.js) from 4.0.6 to 4.5.3.
- [Release notes](https://github.com/wycats/handlebars.js/releases)
- [Changelog](https://github.com/wycats/handlebars.js/blob/master/release-notes.md)
- [Commits](https://github.com/wycats/handlebars.js/compare/v4.0.6...v4.5.3)

Signed-off-by: dependabot[bot] <support@github.com>",dependabot[bot],2019-12-30T16:56:44Z
3bec713b850abf49e4d6a917fc05be0e5698d45b,"Bump handlebars from 4.0.10 to 4.5.3 in /fixtures/attribute-behavior (#17728)

Bumps [handlebars](https://github.com/wycats/handlebars.js) from 4.0.10 to 4.5.3.
- [Release notes](https://github.com/wycats/handlebars.js/releases)
- [Changelog](https://github.com/wycats/handlebars.js/blob/master/release-notes.md)
- [Commits](https://github.com/wycats/handlebars.js/compare/v4.0.10...v4.5.3)

Signed-off-by: dependabot[bot] <support@github.com>",dependabot[bot],2019-12-30T16:56:11Z
ee38c00bd5be550b0eb27b22689220f87c3b369f,"Bump handlebars from 4.0.6 to 4.5.3 in /fixtures/fiber-debugger (#17727)

Bumps [handlebars](https://github.com/wycats/handlebars.js) from 4.0.6 to 4.5.3.
- [Release notes](https://github.com/wycats/handlebars.js/releases)
- [Changelog](https://github.com/wycats/handlebars.js/blob/master/release-notes.md)
- [Commits](https://github.com/wycats/handlebars.js/compare/v4.0.6...v4.5.3)

Signed-off-by: dependabot[bot] <support@github.com>",dependabot[bot],2019-12-30T16:56:05Z
4d463fce4e50b8c8d097d0c961afa60231e4631b,"Bump handlebars from 4.1.2 to 4.5.3 (#17732)

Bumps [handlebars](https://github.com/wycats/handlebars.js) from 4.1.2 to 4.5.3.
- [Release notes](https://github.com/wycats/handlebars.js/releases)
- [Changelog](https://github.com/wycats/handlebars.js/blob/master/release-notes.md)
- [Commits](https://github.com/wycats/handlebars.js/compare/v4.1.2...v4.5.3)

Signed-off-by: dependabot[bot] <support@github.com>",dependabot[bot],2019-12-30T16:46:41Z
d259f458133865757c0d18895d537f14908f0a5b,Fix various typos (#17724),Karan Sharma,2019-12-29T21:47:51Z
9357a483e9d9581bf65e7e82541cfb6bde84fdb0,Fix for the standalone devtools not responding to clicks. (#17584),Chris Watson,2019-12-29T21:46:27Z
22ef96ae63f40b1b9367bc2d8bdb3db33e6943b0,"Devtools renable copy attr context menu for firefox (#17740)

* Use exportFunction() to share clipboard copy with JS running in document/page context.

* Remove no-longer-used option to disable copy operation.",Brian Vaughn,2019-12-29T21:27:44Z
2b903da355fa53b3ac5a7f340134575119de2f40,"Make DevTools check document.contentType before injecting (#17739)

It should only inject the global hook into HTML documents. This will avoid breaking syntax highlighting for e.g. XML documents.",Brian Vaughn,2019-12-29T21:02:50Z
0eac01abcd44579db03821347f103c816cd55372,"Added missing Flow type coverage to DevTools context menu (#17733)

The  param should probably be a generic type, but I'm not sure how to satisfy Flow with the current top-level  Map. At least this adds basic coverage (which was missing before, oops).",Brian Vaughn,2019-12-29T16:44:24Z
f887d1aa27336baa0bc292158793a5a244c712b6,"[DevTools] Display RegExp values in props/state (#17690)

Previously, when props/state contained a regexp, it was shown as an
empty object. This commit adds regexps as values in need of special
rehydration (like Symbols or TypedArrays), and display them as a user
might expect.

Co-authored-by: Zirak <zirakertan@gmail.com>",Brian Vaughn,2019-12-22T19:49:28Z
1959671d45bc3b5214b3e124549f4e068455d0e5,Add tooltip to interaction name in DevTools Profiler sidebar (#17689),Brian Vaughn,2019-12-22T16:52:53Z
ccc6100d7f587551e46c91cce4a0db2c1b72604d,"Fix comments typos (#17550)

* Fix comments typos

* Fix comments typos

* Fix more typos

Co-authored-by: Brian Vaughn <brian.david.vaughn@gmail.com>",Nick S. Plekhanov,2019-12-22T16:44:34Z
6215e1c2db7e55a364a1156be38b4e3d7490d551,Add Shift+Enter to go to previous search result (#17005),Maxime Bouveron,2019-12-22T16:38:14Z
85d9655d6f72fc34b71b6b25b1f76a307db81c96,[react-dom] Refactor event priority handling to its own module (#17678),Dominic Gannaway,2019-12-20T23:15:36Z
3e09677836df6272472e3049b04a94b55fb6577b,DevTools v4.2.1 -> 4.3.0,Brian Vaughn,2019-12-20T17:11:37Z
31350237fab02cad8c2610ff72196e807d12618f,"Add unit tests to dom-event-testing-library (#17680)

Unit tests for the simple event mocks",Nicolas Gallagher,2019-12-20T16:35:02Z
79734771cd78f0b0ee02abbbe386f4a40ccca1ab,"Disable ""copy to clipboard"" and ""go to definition"" context menu options for Firefox addon (#17668)",Brian Vaughn,2019-12-20T16:31:38Z
dbc46ac63e4d88af8b70a75838f63a8a11a5d171,[react-interactions] Rename test + fix master (#17679),Dominic Gannaway,2019-12-20T16:00:39Z
1b9328cd9b516fb3d1bd125a6cbd1e9e8333ac5c,Null stateNode after unmount (#17666),Brian Vaughn,2019-12-19T21:32:14Z
897976600c2277e70601d771992f26ba5c1a14f0,[ESLint] Allow partial matches for custom Effect Hooks (#17663),Dan Abramov,2019-12-19T17:04:17Z
72592310a84ac2cfb132569de52b4c598494b203,"Create packages/dom-event-testing-library (#17660)

Moves the unit testing library for events into the `packages` directory so it can more easily be used in tests for other react packages, and mirrored internally to help with testing of event hooks we prototype in www.",Nicolas Gallagher,2019-12-19T16:51:25Z
e7494c86c501f53a1068953aa0f4efe4bb0c8655,[react-interactions] Remove batchedUpdates from responder lifecycles (#17659),Dominic Gannaway,2019-12-19T13:07:00Z
a5e951d4cc75583084c91d7eb0332831e15bfbc0,"[react-interactions] Event testing library improvements (#17614)

Introduces a state machine around pointer events to produce more accurate mock
touch events. This allows multi-touch unit tests to be written entirely in
terms of mock pointer interactions, while producing the expected
'changedTouches', 'targetTouches', and 'touches' fields for mock touch events.",Nicolas Gallagher,2019-12-18T23:32:48Z
95056b68365f1f3a646d1d6c65c9e3d2a50122ca,"DevTools build script enhancements (#17653)

* Updated DevTools local development instructions to mention experimental build step

* Added a command to download latest experimental release (for DevTools)

* Updated build instructions for clarity

* Added build-for-devtools package alias",Brian Vaughn,2019-12-18T22:34:40Z
fd2a3ae57fa15487619385de5d27afde6f78509b,Updated DevTools changelog,Brian Vaughn,2019-12-18T20:51:18Z
933f6a07cac6beb5a5540b1942e84064f1c8dd36,"DevTools context menu (#17608)

* Added rudimentary context menu hook and menu UI

* Added backend support for copying a value at a specific path for the inspected element

* Added backend support for storing a value (at a specified path) as a global variable

* Added special casing to enable copying undefined/unserializable values to the clipboard

* Added copy and store-as-global context menu options to selected element props panel

* Store global variables separately, with auto-incremented name (like browsers do)

* Added tests for new copy and store-as-global backend functions

* Fixed some ownerDocument/contentWindow edge cases

* Refactored context menu to support dynamic options

Used this mechanism to add a conditional menu option for inspecting the current value (if it's a function)

* Renamed ""safeSerialize"" to ""serializeToString"" and added inline comment",Brian Vaughn,2019-12-18T20:12:34Z
7dc9745427046d462506e9788878ba389e176b8a,"[Flight] Chunks API (#17398)

* Add feature flags

* Add Chunk type and constructor

* Wire up Chunk support in the reconciler

* Update reconciler to reconcile Chunks against the render method

This allows the query and args to be updated.

* Drop the ref. Chunks cannot have refs anyway.

* Add Chunk checks in more missing cases

* Rename secondArg

* Add test and fix lazy chunks

Not really a supported use case but for consistency I guess.

* Fix fragment test",Sebastian Markbåge,2019-12-18T18:25:43Z
9354dd2752239b72b3c183c75256a7830d2938c0,Make HostComponent inexact (#17412),Eli White,2019-12-18T18:21:42Z
4c270375e931b133261495e3aa3f34407c5f79d8,"Favor fallthrough switch instead of case statements for work tags (#17648)

* Favor fallthrough switch instead of case statements for work tags

Currently we're inconsistently handling tags that are only relevant
for certain flags. We should throw if the tag is not part of the built
feature flags. This should also mean that the case statements can be
eliminated.

We can achieve this effect by putting the invariant outside of the switch
and always early return in the switch. We already do this in beginWork.
This PR makes this consistent in other places.

* Fail if fundamental/scope tags are discovered without the flag on",Sebastian Markbåge,2019-12-18T15:53:27Z
6fef7c47a984cf0d07776c017e58b45f5af8276e,"Add a regression test for switching from Fragment to a component (#17647)

* Add a regression test for switching from Fragment to a component

* Add a few more tests",Dan Abramov,2019-12-18T15:21:42Z
9fe1031244903e442de179821f1d383a9f2a59f2,[react-interactions] Rename Flare APIs to deprecated and remove from RN (#17644),Dominic Gannaway,2019-12-18T10:24:46Z
e84327ba0c547431e3c67b30c5fb5453fcb11573,Added more forwardRef test cases for DevTools (#17642),Brian Vaughn,2019-12-17T20:45:10Z
4b0cdf29a89d5199690a6aa64b362670d9bf9669,Build FB RN targets only in experimental mode (#17641),Dan Abramov,2019-12-17T20:22:49Z
24dbe851e8a3a3a5233654183fd80b0d64b99295,"fix(dev-tools): fix show correct displayName with forwardRef in Dev Tools (#17613)

* fix(dev-tools): fix show correct displayName with forwardRef in Dev Tools

allow set `displayName` after `React.forwardRef()`,
makesure Dev Tools show displayName as same as `getWrappedName` in `shared/getComponentName.js`

* Removed a little unnecessary/redundant code.

* Fixed lint error (removed unused var)",zthxxx,2019-12-17T19:29:16Z
bb75a4fa897576a9d386e30efb451bfbc98619a8,"Improved selection and toggling for props/hooks/state (#17588)

1. Enable nested values to be expanded/collapsed by clicking on values as well as keys.
2. Enable keys and values to be selectable (for copy-pasting purposes)",Brian Vaughn,2019-12-17T19:28:37Z
7309c5f93469266729578f1d0e0d273604b45da4,"Use zero-fill right shift instead of Math.floor (#17616)

For positive numbers, binary displacement is better.",伊撒尔,2019-12-17T19:16:04Z
9bb3fbe893619a26f48e8a08fcc04763ef1d4b12,Move DevTools CI job to experimental workflow (#17640),Dan Abramov,2019-12-17T18:21:38Z
3c54df0914f02fed146faa519a5a899d0e3af32e,Fix missing stacks in WWW warnings (#17638),Dan Abramov,2019-12-17T15:21:18Z
b66e86d9578b031a23385dfc21b0eca4e0cf4456,react-refresh@0.7.1,Dan Abramov,2019-12-17T13:50:57Z
c2d1561c60507189b43ae96c6b89580874367e36,[Fast Refresh] Support injecting runtime after renderer executes (#17633),Dan Abramov,2019-12-17T13:49:39Z
0253ee9a2e94d43e220a997eeedfcc6847c4542b,Additional test infra changes for toErrorDev rename (#17632),Dan Abramov,2019-12-17T13:31:47Z
36a6e29bb3eead85e3500ba7269cbcd55516a8fb,"Fix test_build_devtools CI job to run test-build-devtools (#17631)

* Skip abandoned project folders in Jest config

This fixes a problem that occurs after renaming a package.

* Fix test_build_devtools to run test-build-devtools

* Exclude console.error plugin for DevTools packages

* Use correct release channel for DevTools tests

This should fix the createRoot error.

* Fix TZ dependent test

* Change DT job dependencies",Dan Abramov,2019-12-17T00:03:12Z
7c21bf72ace77094fd1910cc350a548287ef8350,Fix release script to ignore empty package folders,Dan Abramov,2019-12-16T19:16:55Z
f42431abe1a31a3798989a6477422c492cf8dac1,"Revert ""Remove renderPhaseUpdates Map (#17484)"" (#17623)

This reverts commit 8a347ed024159a5307172ea633a4561160f4a6b9.",Dan Abramov,2019-12-16T19:03:00Z
0b5a26a4895261894f04e50d5a700e83b9c0dcf6,"Rename toWarnDev -> toErrorDev, toLowPriorityWarnDev -> toWarnDev (#17605)

* Rename toWarnDev -> toErrorDev in tests

* Rename toWarnDev matcher implementation to toErrorDev

* Rename toLowPriorityWarnDev -> toWarnDev in tests and implementation",Dan Abramov,2019-12-16T12:48:16Z
0cf22a56a18790ef34c71bef14f64695c0498619,"Use console directly instead of warning() modules (#17599)

* Replace all warning/lowPriWarning with console calls

* Replace console.warn/error with a custom wrapper at build time

* Fail the build for console.error/warn() where we can't read the stack",Dan Abramov,2019-12-14T18:09:25Z
b6c423daadaa35da3f34048628df9635505eecb1,Use matching test command for equivalence tests (#17604),Dan Abramov,2019-12-14T17:52:29Z
8a347ed024159a5307172ea633a4561160f4a6b9,"Remove renderPhaseUpdates Map (#17484)

* Render phase updates can now be extracted from the pending queue

* Use a custom dispatcher for the second render pass

* Discard render phase updates if component throws

When aborting a render, we also need to throw out render phase updates.
Remove the updates from the queues so they do not persist to the next
render. We already did a single pass through the whole list of hooks, so
we know that any pending updates must have been dispatched during the
render phase. The ones that were dispatched before we started rendering
were already transferred to the current hook's queue.",Sebastian Markbåge,2019-12-14T00:45:09Z
be603f5a51be33027193d9e5ae35a0e572d8ad5d,[react-events] Remove lastNativeEvent in favor of SystemFlags (#17585),Dominic Gannaway,2019-12-13T17:03:35Z
b15bf36750ca4c4a5a09f2de76c5315ded1258d0,Add component stacks to (almost) all warnings (#17586),Dan Abramov,2019-12-12T23:47:55Z
612a76812fce2354aa37e8cbcc1b39bba3e9a97b,"[react-interactions] Mock touchend events should use empty array for 'touches' (#17589)

The 'touches' value should be an empty array rather than 'null'",Nicolas Gallagher,2019-12-12T22:21:30Z
12c000412d05c4a6079b4f57f721a40b8cea374d,"Improved inspected element props with inline previews (#17579)

* Improved inspected element props with inline previews

This mimics the inline preview shown by the brower console and dramatically improves the UX when inspecting deep values. I also updated tests to add more coverage for this new functionality.

* Cleaned up the DataView vs typed array check

* Added early bailouts to DevTools when generating preview strings for iterables/objects/arrays, to avoid doing unnecessary work",Brian Vaughn,2019-12-12T01:52:17Z
2afeebdcc4ed8a78ab5b36792f768078d70e1ffd,[react-interactions] Remove responder root event types + revert commit phase change (#17577),Dominic Gannaway,2019-12-11T16:48:46Z
9ac42dd074c42b66ecc0334b75200b1d2989f892,"Remove the condition argument from warning() (#17568)

* prep for codemod

* prep warnings

* rename lint rules

* codemod for ifs

* shim www functions

* Handle more cases in the transform

* Thanks De Morgan

* Run the codemod

* Delete the transform

* Fix up confusing conditions manually

* Fix up www shims to match expected API

* Also check for low-pri warning in the lint rule",Laura buns,2019-12-11T03:28:14Z
7bf40e1cfdb780788700a41bf30163fdb8d105a3,"Initialize update queue object on mount (#17560)

* Refactor Update Queues to Fix Rebasing Bug

Fixes a bug related to rebasing updates. Once an update has committed,
it should never un-commit, even if interrupted by a higher priority
update. The fix includes a refactor of how update queues work.

This commit is a combination of two PRs:

- #17483 by @sebmarkbage refactors the hook update queue
- #17510 by @acdlite refactors the class and root update queue

Landing one without the other would cause state updates to sometimes be
inconsistent across components, so I've combined them into a single
commit in case they need to be reverted.

Co-authored-by: Sebastian Markbåge <sema@fb.com>
Co-authored-by: Andrew Clark <git@andrewclark.io>

* Initialize update queue object on mount

Instead of lazily initializing update queue objects on the first update,
class and host root queues are created on mount. This simplifies the
logic for appending new updates and matches what we do for hooks.",Andrew Clark,2019-12-11T00:42:42Z
031a5aaffbc06f0ac115f1d814e43e4d63ae15d2,"Show component location for selected element in bottom/right of props panel (#17567)

* Show component location info for selected element in bottom/right of props panel

* Moved RegExp declaration into function basedon PR feedback",Brian Vaughn,2019-12-10T17:24:34Z
e039e690b5c45c458dd4026f3db16bac18ed0e47,"Revert Update Queue Refactor

Reverts b617db3d966f678eb0b4aac6d96f7967b37a9e91.

Found some bugs when attempting to land in www. Reverting to fix master.
I'll land again *after* the change successfully land downstream.",Andrew Clark,2019-12-09T21:19:12Z
b617db3d966f678eb0b4aac6d96f7967b37a9e91,"Refactor Update Queues to Fix Rebasing Bug

Fixes a bug related to rebasing updates. Once an update has committed,
it should never un-commit, even if interrupted by a higher priority
update. The fix includes a refactor of how update queues work.

This commit is a combination of two PRs:

- #17483 by @sebmarkbage refactors the hook update queue
- #17510 by @acdlite refactors the class and root update queue

Landing one without the other would cause state updates to sometimes be
inconsistent across components, so I've combined them into a single
commit in case they need to be reverted.

Co-authored-by: Sebastian Markbåge <sema@fb.com>
Co-authored-by: Andrew Clark <git@andrewclark.io>",Andrew Clark,2019-12-09T21:19:12Z
3c1efa0d771d3dfb2666b7f4a4392cc851146d44,[react-interactions] Remove Focus/FocusWithin root event types (#17555),Dominic Gannaway,2019-12-09T14:27:45Z
9e937e7e86be4af829bd7be2045bf3601928c9b5,"[react-interactions] fix Press/Tap behavior for virtual middle clicks (#17554)

Tools like BetterTouchTool for macOS trigger middle-clicks with a 'buttons'
value that doesn't correspond to the middle-mouse button. To account for this
we also inspect the value of 'button'.

Close #17367",Nicolas Gallagher,2019-12-09T13:04:24Z
b43eec7eaad14747d24ef24a06b27cb2a5653bbc,"Replace `wrap-warning-with-env-check` with an eslint plugin (#17540)

* Replace Babel plugin with an ESLint plugin

* Fix ESLint rule violations

* Move shared conditions higher

* Test formatting nits

* Tweak ESLint rule

* Bugfix: inside else branch, 'if' tests are not satisfactory

* Use a stricter check for exactly if (__DEV__)

This makes it easier to see what's going on and matches dominant style in the codebase.

* Fix remaining files after stricter check",Laura buns,2019-12-06T18:25:54Z
acfe4b21b2621da3618f9096c8be06b32d6247ec,[react-interactions] Upgrade passive event listeners to active listeners (#17513),Dominic Gannaway,2019-12-04T19:30:50Z
5235d193d70d2623c98788ccb8dffc1d5abd688d,"fix: make serializable data  in react-devtools (#17233)

* fix: make serializable data for bridge in react-devtools

* fix: add bigint data type in hydration

* refactor: remove console.log

* test: update unit tests for bigint in react-devtools",Farhad Yasir,2019-12-04T15:53:00Z
5064c7f6aa2b46469ac601cc851640e91ec340a9,"Revert Rerender Error Check (#17519)

* Add failing test

* Revert ""Move rerender error check to avoid global state""

This reverts commit 3e77742d8c4e64b89f816c0b1ce0bc156f8c5f61.",Sebastian Markbåge,2019-12-04T07:10:36Z
6d105ad3f6814e6d44e8141d9524097f166b5ae9,[react-interactions] Move Flare event registration to commit phase (#17518),Dominic Gannaway,2019-12-04T02:08:20Z
dc18b8b8d24d188517caeff624e999f197f3b9b6,"Don't group Idle/Offscreen work with other work (#17456)

When we suspend we always try a lower level but we shouldn't try offscreen.",Sebastian Markbåge,2019-12-03T21:38:02Z
f523b2e0d369e3f42938b56784f9ce1990838753,"Use fewer global variables in Hooks (#17480)

* We don't need the global state for this

* Move componentUpdateQueue and sideEffectTag out of global state

* Move firstWorkInProgressHook off global state

* Move remainingExpirationTime off global state

* Reset fiber to its current state if it throws

* Move rerender error check to avoid global state

This means that it's harder to find it since it's not in the dispatch
function's stack but we can add a DEV only one for that if we really
need it. Alternatively, we can check it in against the renderUpdates queue.

* Move next___Hook out of global state

* Assert that currentlyRenderingFiber is always set

When accessed, this should always be set. This could enforced by storing
this on the dispatcher for example.

* Add another test just to be safe",Sebastian Markbåge,2019-12-03T20:51:36Z
d75323f65d0f263dd4b0c15cebe987cccf822783,"Remove case that only exists for createBatch (#17506)

The comment says this is only needed for createBatch().commit() which
doesn't exist anymore.",Sebastian Markbåge,2019-12-03T18:35:17Z
79572e34d18c67768c93b1a4d60703a5929363a3,"Adjust SuspenseList CPU bound heuristic (#17455)

* Adjust SuspenseList CPU bound heuristic

In SuspenseList we switch to rendering fallbacks (or stop rendering further
rows in the case of tail=""collapsed/hidden"") if it takes more than 500ms
to render the list. The limit of 500ms is similar to the train model and
designed to be short enough to be in the not noticeable range.

This works well if each row is small because we time the 500ms range well.
However, if we have a few large rows then we're likely to exceed the limit
by a lot. E.g. two 480ms rows hits almost a second instead of 500ms.

This PR adjusts the heuristic to instead compute whether something has
expired based on the render time of the last row. I.e. if we think rendering
one more row would exceed the timeout, then we don't attempt.

This still works well for small rows and bails earlier for large rows.

The expiration is still based on the start of the list rather than the
start of the render. It should probably be based on the start of the render
but that's a bigger change and needs some thought.

* Comment",Sebastian Markbåge,2019-12-03T01:53:08Z
b64938e1234b77c50d9b2680dd836cd27ce5ad91,Fixed changelog formatting #17481 (#17487),Sung M. Kim,2019-11-29T13:57:38Z
969f4b5bb8302afb3eb1656784130651047c3718,Change DevTools hook warning message (#17478),Dan Abramov,2019-11-28T00:47:13Z
3816ae7c3860f3efd013d95259b5a93ae27f8f39,DevTools version bump 4.2.0 -> 4.2.1,Brian Vaughn,2019-11-27T15:49:49Z
5fc97420b95d36e50a064ec351d2fedca22e9464,"Remove dependency on local git checkout from build process (#17475)

* Remove dependency on local git checkout from build process

* Updated Webpack dependencies to account for recent changes to deps for Flight",Brian Vaughn,2019-11-27T15:48:09Z
6470e0f169b4cf0416132aa66221bf20e264c618,"[Fresh] Make all errors recoverable (#17438)

* [Fresh] Detect root updates more reliably

* [Fresh] Use WeakMap for root elements

* [Fresh] Make initial failures recoverable too

* Fix DevTools check

* Fix wrong flow type",Dan Abramov,2019-11-25T17:25:34Z
54f66731c84e3f141a1c0bc5d32be7cc5d4b9bbf,"Update release script URL (#17428)

CircleCI API endpoint changed",Andrew Clark,2019-11-21T21:19:03Z
237a966da058fa063abd2e1365e90f2a26aa4e51,"[Fresh] Fix an infinite loop in an edge case (#17414)

* [Fresh] Fix an infinite loop in an edge case

* Make it work in IE11",Dan Abramov,2019-11-21T14:10:26Z
007a276b6541f98318adf5d37668fceb5ef37223,[react-interactions] Fix memory leak in event responder system (#17421),Dominic Gannaway,2019-11-21T13:15:37Z
3fdfa231ad4bbe81516866dc9cd7ed5d18acf223,[react-interactions] Refine virtual click detection for FF+JAWS/NVDA (#17422),Dominic Gannaway,2019-11-21T13:09:30Z
a7d07ff24d8d3d925ab45f5eb9be42a62a345dad,[react-interactions] Rename Flare listeners prop to DEPRECATED_flareListeners (#17394),Dominic Gannaway,2019-11-18T13:32:50Z
3ad076472ce9108b9b8a6a6fe039244b74a34392,"Update Fixtures to use new APIs (#17380)

Also renamed unstable-async to concurrent",Sebastian Markbåge,2019-11-17T22:42:47Z
1f2da0babd723f1b479f84cef5a0ea4fedac3959,Forgot to mark test as experimental (#17391),Andrew Clark,2019-11-17T21:59:25Z
a807c307c496d96e8ff79f53cf2d6203c45cf0c6,"[eslint] Check forwardRef callbacks (#17255)

* [eslint] Check forwardRef callbacks (#17220)

* [eslint] Make tests more realistic (#17220)

* [eslint] Check anonymous callback of React.memo for rules-of-hooks (#17220)

* [eslint] Add tests for callbacks not known to be components (#17220)

* [eslint] Correct comments and add another test (#17220)",David Garner,2019-11-17T13:39:08Z
2586303662736d72e79046b51c8df993b21e6093,"[Bugfix] Pending state is always user-blocking (#17382)

Fixes a bug where `isPending` is only set to `true` if `startTransition`
is called from inside an input event. That's usually the case, but
not always.

Now it works regardless of where you call it.",Andrew Clark,2019-11-15T23:46:09Z
8e74a31b2d0017061e265ae1a3fbfbacb7af5614,"Add Webpack as devDependency (#17379)

This is now used by the Flight package so it needs to be installed as a
peer.",Sebastian Markbåge,2019-11-15T22:02:59Z
39dbb14da321cabafe3ab67de41150672aa301fc,"[Flight] Move Flight DOM to a Webpack Specific Package (#17372)

* Move Flight DOM to Webpack Specific Packagee

We'll have Webpack specific coupling so we need to ensure that it can be
versioned separately from various Webpack versions. We'll also have builds
for other bundlers in the future.

* Move to peerDep

* Move DOM Flight Tests

* Merge ReactFlightIntegration into ReactFlightDOM

This was an integration test. We can add to it.

* Fix fixture paths",Sebastian Markbåge,2019-11-15T19:46:07Z
532810a370cdb89eb12749f6e1cd59dd73acbeb4,[react-interactions] FocusWithin beforeblur propagation fix (#17375),Dominic Gannaway,2019-11-15T12:05:00Z
f30ccb9ed9248cb59cdd68dde66e3971afaaa594,[react-interactions] Fix unatached fiber bug (#17371),Dominic Gannaway,2019-11-15T00:47:33Z
1832f832c51dc58b57cb012767fae5814f31b016,Changelog for 16.12,Luna Ruan,2019-11-15T00:06:10Z
9a5f28dbedc2b2edd01d216e347ab24b8efa73fc,update version numbers for 16.12,Luna Ruan,2019-11-15T00:02:18Z
769dd522a2f6843f7e22d903fce296cb9faab88b,[Fast Refresh] Fix for intentional unmounts after an error (#17368),Ricky,2019-11-14T18:40:25Z
df8db4e005573d3cd793f9a6406e97e6014d5545,[react-interactions] Enable event system before dispatching blur (#17365),Dominic Gannaway,2019-11-14T13:47:39Z
fc43644eba08256464edb125adce2027cdbdca30,[react-interactions] Follow up active element blur logic (#17364),Dominic Gannaway,2019-11-14T11:55:50Z
a61886b16b5183d63b85dbd92e5808f82be93208,[react-interactions] Refine custom active element blur logic (#17354),Dominic Gannaway,2019-11-13T20:46:00Z
b53ea6ca05d2ccb9950b40b33f74dfee0421d872,"[Bugfix] Passive effects triggered by synchronous renders in a multi-root app (#17347)

* Regression test: Effects dropped across roots

See #17066

* [Bugfix] Passive effects loop

The bug
-------

In a multi-root app, certain passive effects (`useEffect`) are never
fired. See #17066.

The underlying problem
----------------------

The implicit contract of `flushPassiveEffects` is that, right after
calling it, there should be no pending passive effects. In the normal
case, in concurrent mode, this is true. But the current implementation
fails to account for the case where a passive effect schedules
synchronous work, which in turn schedules additional passive effects.

This led to `rootWithPendingPassiveEffects` being overwritten in the
commit phase, because an assignment that assumed it was replacing null
was actually replacing a reference to another root, which has the
consequence of dropping passive effects on that root.

The fix
-------

The fix I've chosen here is, at the beginning of the commit phase, keep
flushing passive effects in a loop until there are no more.

This doesn't not change the ""public"" implementation of
`flushPassiveEffects`, though it arguably should work this way, too. I
say ""public"" because it's only used by implementation layers on top of
React which we control: mainly, the legacy version of `act` that does
not use the mock Scheduler build. So there's probably still a bug
in that `act` implementation.

I will address `act` in a follow-up. The ideal solution is to replace
the legacy `act` with one implemented directly in the renderer, using a
special testing-only build of React DOM. Since that requires a breaking
change, we'll need an interim solution. We could make the ""public"" `act`
recursively flush effects in a loop, as I've done for the commit phase.
However, I think a better solution is to stop automatically flushing the
synchronous update queue at the end of `flushPassiveEffects`, and
instead require the caller to explicitly call `flushSyncUpdateQueue` (or
the equivalent) if needed. This follows the same pattern we use
internally in the work loop, which is designed to avoid factoring
hazards like the one that resulted in this bug.",Andrew Clark,2019-11-12T18:41:07Z
f4cc45ce962adc9f307690e1d5cfa28a288418eb,[Fresh] Add options to configure RefreshSig and RefreshReg identifiers (#17340),Vasilii Cuhar,2019-11-12T14:16:23Z
ade764157ff7ff27ab11ed8b61791a7edef8e683,[Native] If statement cleanup for null targets (#17346),Eli White,2019-11-11T20:58:30Z
3dcec3a9258e644f5409405ed22103fa1a90b10d,"[Native] Add FeatureFlag to dispatch events with instance currentTarget (#17345)

* [Native] Add FeatureFlag to dispatch events with instance targets

* Prettier

* [Native] Change currentTarget to be an instance behind a flag 2/2",Eli White,2019-11-11T20:42:06Z
2c6ea0b3ffffd1a110845327262ecea59ee48dab,"[Native] Add FeatureFlag to dispatch events with instance targets (#17323)

* [Native] Add FeatureFlag to dispatch events with instance targets

* Prettier",Eli White,2019-11-11T19:35:29Z
01bce8c24843b02a0082edb55d3cd4763e7a956d,Change legacy-events plugin nativeEventTarget to allow null (#17344),Eli White,2019-11-11T19:22:41Z
6cff70a740d1e6ad10070ebf88514bd3a49d0f0d,[react-interactions] Expost host instance to Scope Query function (#17341),Dominic Gannaway,2019-11-11T13:51:46Z
b8f8258775211d2d3b1b144cc6c75148ecd4b8d8,"Split ReactDOM entry point (#17331)

* Split ReactDOM entry point

* BatchedRoot -> BlockingRoot",Dan Abramov,2019-11-10T13:43:29Z
a7b4d51a20a00f0f60b113c3a02326ccf69aef82,"Warn when doing createRoot twice on the same node (another approach) (#17329)

* Unify fields used for createRoot warning and event system

* Warn when doing createRoot twice on the same node

* Stricter check for modern roots

* Unmark asynchronously

* Fix Flow",Dan Abramov,2019-11-10T00:54:13Z
be3bfa6fabccd2e76d3bb3841a67f6d8ede7892c,"[Flight] Basic Integration Test (#17307)

* [Flight] Basic Integration Test

* Just act()

* Lint

* Remove unnecessary acts

* Use Concurrent Mode

* it.experimental

* Fix prod test by advancing time

* Don't observe initial state",Dan Abramov,2019-11-09T02:56:03Z
182f64f938d456b011e0139c07f35275e5d89c53,[Flight] End-to-End Fixture (#17319),Dan Abramov,2019-11-09T02:44:27Z
6cb6b1d6682077852b48b7eae597df58e871ed23,"Add yarn build --unsafe-partial (#17316)

* Add yarn build --partial

* unsafe-partial",Dan Abramov,2019-11-08T19:41:40Z
38dd17ab98ce288fd0d0b68682a6df0f0a49e158,[RN] Hoist static deepDiffer options object (#17303),Moti Zilberman,2019-11-07T16:03:55Z
61d3dd0e08a53eebeaf06537b84b78dedbc92168,"Update deepDiffer usage in React Native renderer (#17282)

* Add RN prop diffing test with function values

* Update RN deepDiffer mock

* Explicitly ignore functions in RN prop differ",Moti Zilberman,2019-11-07T12:00:20Z
e701632ad4112038c4dd8e7302b90c0bb3fc4f2b,[react-interactions] Change unmount blur logic to a dedicated event (#17291),Dominic Gannaway,2019-11-07T10:27:02Z
ce4b3e998191445b2934f6846ee7661578ef6444,[react-interactions] Add optional searchNodes to Scope.queryAllNodes (#17293),Dominic Gannaway,2019-11-06T22:52:59Z
dee03049f5690e23787f3ba1afd3150fb3540624,"[Flight] Basic Streaming Suspense Support (#17285)

* Return whether to keep flowing in Host config

* Emit basic chunk based streaming in the Flight server

When something suspends a new chunk is created.

* Add reentrancy check

The WHATWG API is designed to be pulled recursively.

We should refactor to favor that approach.

* Basic streaming Suspense support on the client

* Add basic suspense in example

* Add comment describing the protocol that the server generates",Sebastian Markbåge,2019-11-06T17:48:34Z
f50f39b55fb09fc78c8fc2bd63d286c147fd30f2,[Flight] Better compat with http.createServer (#17289),Dan Abramov,2019-11-06T17:10:26Z
34527063083195558f98108cde10b5d6ad0d6865,"DevTools cleanup (#17283)

1. Add a Store test for memo, lazy, and forwardRef components
2. Remove dead code for React.lazy
3. Update DT tests to include HOC badge names in the serialized store",Brian Vaughn,2019-11-06T06:19:10Z
cd1bdcd0672d87f275a6394b055dea1016a7f29d,"[react-interactions] Prevent duplicate onPress firing for keyboard Enter (#17266)

* [react-interactions] Prevent duplicate onPress firing for keyboard Enter

* address feedback",Dominic Gannaway,2019-11-05T23:28:26Z
4f02c93c7cb213355b3c7d2011e531431d1c6dd8,"Fix devtools displaying Anonymous for memo of ref-forwarding components (#17274)

* [react-is] return correct typeOf value of forwardRef

* [react-devtools-shared] use correct displayName of memo(forwardRef(Component))

* [react-devtools-shared] add resolveFiberType and resolve fiber type of memo recursively

Resolving the fiber type of memo recursively before passing it to getDisplayName
will prevent it from displaying ""Anonymous"" as displayName for components
wrapped with both memo and forwardRef: memo(forwardRef(Component))

* rework resolveFiberType",Waseem Dahman,2019-11-05T22:08:01Z
053cf0fedc91a1507080afe43d3be354ec346e9e,Fix react-is memo and lazy type checks (#17278),Brian Vaughn,2019-11-05T18:37:12Z
0f3838a01b0fda0ac5fd054c6be13166697a113c,"Remove `debugRenderPhaseSideEffects` flag (#17270)

There are two similar flags, `debugRenderPhaseSideEffects` and
`debugRenderPhaseSideEffectsForStrictMode`. The strict mode one is the
only one that is actually used. I think originally the theory is that
we would one day turn it on for all components, even outside strict
mode. But what we'll do instead is migrate everyone to strict mode.

The only place `debugRenderPhaseSideEffects` was being used was in
an internal test file. I rewrote those tests to use public APIs.",Andrew Clark,2019-11-04T22:07:05Z
cb09dbe0ab0f42185c4892c045b0c32e04f6b9cb,"[react-interactions] Add handleSimulateChildBlur upon DOM node removal (#17225)

* [react-interactions] Add handleSimulateChildBlur upon DOM node removal",Dominic Gannaway,2019-11-04T20:02:45Z
6095993d461a58da14dae9866486359497af339e,"Types: findHostInstance_DEPRECATED returns React.ElementRef<HostComponent<mixed>> (#17265)

* Types: findHostInstance_DEPRECATED returns React.ElementRef<HostComponent<mixed>>

* Prettier",Eli White,2019-11-04T18:14:01Z
62ef25077ed440947c19386f33c28db44e10de92,Avoid bundling in ponyfill for Object.assign in use-subscription package (#17259),Mateusz Burzyński,2019-11-04T15:33:10Z
f4148b2561d468c292f184fb35b186efbc5dd758,"[Flight] Move around the Server side a bit (#17251)

* Rename ReactFlightStreamer -> ReactFlightServer

* Unify Browser/Node stream tests into one file and use the client reader

* Defer to the actual ReactDOM for HTML rendering for now

This will need to use a variant of Fizz to do inline SSR in Flight.
However, I don't want to build the whole impl right now but also don't
want to exclude the use case yet. So I outsource it to the existing
renderer. Ofc, this doesn't work with Suspense atm.",Sebastian Markbåge,2019-11-02T00:39:24Z
fadc97167f8d2387dfc2c7b2493ba9ffbbb35fcf,"[Flight] Add Client Infrastructure (#17234)

* Change demo to server

* Expose client in package.json

* Reorganize tests

We don't want unit tests but instead test how both server and clients work
together. So this merges server/client test files.

* Fill in the client implementation a bit

* Use new client in fixture

* Add Promise/Uint8Array to lint rule

I'll probably end up deleting these deps later but they're here for now.",Sebastian Markbåge,2019-11-01T23:05:07Z
36fd29f09fae82766207899ac31e462d8ee284e5,Don't show empty (no work) commits in Profiler (#17253),Brian Vaughn,2019-11-01T22:51:39Z
a2e05b6c148b25590884e8911d4d4acfcb76a487,"[Scheduler] Delete old rAF implementation (#17252)

We've been using the message loop version for a while. Time to delete.",Andrew Clark,2019-11-01T20:32:22Z
6dc2734b41aef944e457eaa23ae218952fce0a54,"Codemod tests to `it.experimental` (#17243)

`it.experimental` marks that a test only works in Experimental builds.

It also asserts that a test does *not* work in the stable builds. The
main benefit is that we're less likely to accidentally expose an
experimental API before we intend. It also forces us to un- mark an
experimental test once it become stable.",Andrew Clark,2019-11-01T17:20:08Z
a1ff9fd7bb919cfe8d18ce9c8b9315d74d0e3405,"Add CodeSandbox CI Config (#17175)

* Add CodeSandbox CI Config

* Add default sandbox to build

* Make build more efficient and add scheduler

* Force build

* Add scheduler image

* Add scheduler/tracing to the build

* Force another build",Ives van Hoorne,2019-10-31T17:44:48Z
273679a78ca0e3561ad3eaac1349187aff8548ab,"DevTools standalone shell changes: (#17213)

* DevTools standalone shell changes:

1. Update React Native connection wording
2. Tweak styles slightly

* Tweaked standalone DevTools error warning text",Brian Vaughn,2019-10-31T16:22:08Z
d0fc0ba0a688950b8ab24a89f14888a19efa2444,"Revert ""Dispatch commands to both UIManagers from both renderers (#17211)"" (#17232)

This reverts commit 8eee0eb01ce3ead0f51ade75fdcf062a748d57a7.",Eli White,2019-10-31T01:03:37Z
bdcdb69a24612a4a6d88c39937968c32066ed5a6,Rename findHostInstance_deprecated to findHostInstance_DEPRECATED (#17228),Eli White,2019-10-30T20:10:16Z
515746c217ef97a1a5745f15bf9f1cae3c84d2c6,Add findHostInstance_deprecated to the React Native Renderer (#17224),Eli White,2019-10-30T18:42:37Z
9a35adc96d6ff99de779aee52bb78d3c24f86c1d,Only call Profiler onRender when a descendant had work (#17223),Brian Vaughn,2019-10-30T18:08:42Z
8eee0eb01ce3ead0f51ade75fdcf062a748d57a7,"Dispatch commands to both UIManagers from both renderers (#17211)

* Dispatch commands to both UIManagers from both renderers

* Merge test files",Eli White,2019-10-30T01:16:23Z
f4e974d26e273c4eb58c0ffa9b479435bf598ea1,"Add Experimental Flight Infrastructure (#16398)

* Add Flight Build and Unify HostFormat Config between Flight and Fizz

* Add basic resolution of models

* Add basic Flight fixture

Demonstrates the streaming protocol.

* Rename to flight-server to distinguish from the client parts

* Add Flight Client package and entry point

* Fix fixture",Sebastian Markbåge,2019-10-29T21:45:47Z
6cd365cac69682f778e00238d8aa5c69730c13af,"Don't treat the last row in hidden as deleted if already mounted (#17206)

Already mounted rows that resuspend may be considered as part of a tail
if they're at the end. However, for purposes of the tail=""..."" option
they don't get deleted. We deal with that in cutOffTailIfNeeded.

However, if they're also the first to suspend in the ""hidden"" case, we have
a special case that deletes the actual rendered row. This needs to consider
if that row was already mounted or things go wrong.",Sebastian Markbåge,2019-10-29T20:38:25Z
048879edadfc43de699765688e9ebfcdf4a681b7,[react-interactions] Ensure props on scope query function is always object (#17212),Dominic Gannaway,2019-10-29T20:26:46Z
3497ccc14929f6d69d8d48ef41d0b34d1751ce9d,Add guard to handle modified React elements with non-string keys (#17164),Brian Vaughn,2019-10-29T15:41:48Z
0f64703edf5970b12a878ea3b5e1e30ef1d71c74,Update .mailmap (#17177),Lea Rosema,2019-10-28T16:48:54Z
3f9c03675894e77e134cce971ae75926441adbce,Typo fix in comment (#17111),Deniz Susman,2019-10-26T15:33:05Z
f6b8d31a76cbbcbbeb2f1d59074dfe72e0c82806,"Rename createSyncRoot to createBlockingRoot (#17165)

* Rename createSyncRoot to createBlockingRoot

* Fix up",Dan Abramov,2019-10-23T22:04:39Z
9c02d26549054090042403c2284f30bd916df30d,docs: Fixed a typo in readme.md (#17119),Wilco Fiers,2019-10-23T17:52:14Z
57b2fbb7417a88ab4c99cbe1e0b9def62e5cefd1,Changelog for 16.11.0,Andrew Clark,2019-10-22T21:15:21Z
8075c8505b20b2b4418a64ad2fa626231d6d1ebf,Update local package versions for 16.10 release,Andrew Clark,2019-10-22T21:30:06Z
5faf377df5267c4248599e14311a75c2f46050c0,Fixed a style bug in props editor (#17162),Brian Vaughn,2019-10-21T22:08:55Z
f7ec65eeba6ca9194a09d317fbeb46fd79530b09,[react-interactions] Make events non-passive to allow preventDefault (#17136),Dominic Gannaway,2019-10-21T20:37:27Z
1022ee0ec140b8fce47c43ec57ee4a9f80f42eca,"Read current time without marking event start time (#17160)

* Failing test: DevTools hook freezes timeline

The DevTools hook calls `requestCurrentTime` after the commit phase has
ended, which has the accidnental consequence of freezing the start
time for subsequent updates. If enough time goes by, the next update
will instantly expire.

I'll push a fix in the next commit.

* Read current time without marking event start time

`requestCurrentTime` is only meant to be used for updates, because
subsequent calls within the same event will receive the same time.
Messing this up has bad consequences.

I renamed it to `requestCurrentTimeForUpdate` and created a new
function that returns the current time without the batching heuristic,
called `getCurrentTime`.

Swapping `requestCurrentTime` for `getCurrentTime` in the DevTools
hook fixes the regression test added in the previous commit.",Andrew Clark,2019-10-21T20:15:37Z
349cf5acc3cda0010fa464a3c959c83a78a24bd7,"Experimental test helper: `it.experimental` (#17149)

Special version of Jest's `it` for experimental tests. Tests marked as
experimental will run **both** stable and experimental modes. In
experimental mode, they work the same as the normal Jest methods. In
stable mode, they are **expected to fail**. This means we can detect
when a test previously marked as experimental can be un-marked when the
feature becomes stable. It also reduces the chances that we accidentally
add experimental APIs to the stable builds before we intend.

I added corresponding methods for the focus and skip APIs:

- `fit` -> `fit.experimental`
- `it.only` -> `it.only.experimental` or `it.experimental.only`
- `xit` -> `xit.experimental`
- `it.skip` -> `it.skip.experimental` or `it.experimental.skip`

Since `it` is an alias of `test`, `test.experimental` works, too.",Andrew Clark,2019-10-19T23:08:08Z
edc234c730731436fdc4d51bb6cef9de3561facc,"Build script should default to experimental (#17144)

`yarn build` defaults to building in experimental mode. To opt-out, set
the `RELEASE_CHANNEL` environment variable to `stable`. This is the same
as what we do when running tests via `yarn test`, to make local
development easier.",Andrew Clark,2019-10-19T02:35:33Z
3cc564547c81b6e9a3bd6a04aa0725e668ca6559,"SuspenseList support in DevTools (#17145)

* SuspenseList support in DevTools

This adds SuspenseList tags to DevTools so that the name properly shows
up.

It also switches to use the tag instead of Symbol type for Suspense
components. We shouldn't rely on the type for any built-ins since that
field will disappear from the fibers. How the Fibers get created is an
implementation detail that can change e.g. with a compiler or if we
use instanceof checks that are faster than symbol comparisons.

* Add SuspenseList test to shell app",Sebastian Markbåge,2019-10-19T00:18:36Z
68fb58029d818979804677a4d1063eb71f2934f4,"Remove unstable_ prefix in various internal uses (#17146)

* Rename unstable_createRoot in DevTools

* Rename createSyncRoot in warning",Sebastian Markbåge,2019-10-19T00:18:10Z
3059ab3523d2462635afe4e53629b640b8ef9560,Add experimental instructions to release README (#17143),Andrew Clark,2019-10-18T23:26:06Z
093de5fb43b32c2f587460341d7d35b8947c8fb4,"Lint experimental build artifacts (#17141)

Adds `lint_build` job to the experimental workflow",Andrew Clark,2019-10-18T23:03:08Z
7082d5a2db5c1e5f49a62aecd90b6858f957da5e,"Don't build non-experimental www bundles (#17139)

Reduces the likelihood we'll accidentally sync the wrong ones.",Andrew Clark,2019-10-18T21:36:59Z
c47f59331ee94b1d04f974f075373d368a8c8ab3,"Move SuspenseList to experimental package (#17130)

Also moves `withSuspenseConfig`",Andrew Clark,2019-10-18T21:24:13Z
685ed561f22ea062281a4c570c7067e6020457c4,"Migrate useDeferredValue and useTransition (#17058)

Migrated useDeferredValue and useTransition from Facebook's www repo into ReactFiberHooks.",Luna Ruan,2019-10-18T19:48:43Z
0b61e26983c20b0a4facb50857133cde4a28555f,Update RN typings for a shim (#17138),Dan Abramov,2019-10-18T17:05:09Z
4eeee358e12c1408a4b40830bb7bb6956cf26b47,"[SuspenseList] Store lastEffect before rendering (#17131)

* Add a failing test for SuspenseList bug

* Store lastEffect before rendering

We can't reset the effect list to null because we don't rereconcile the
children so we drop deletion effects if we do that.

Instead we store the last effect as it was before we started rendering
so we can go back to where it was when we reset it.

We actually already do something like this when we delete the last row
for the tail=""hidden"" mode so we had a field available for it already.",Sebastian Markbåge,2019-10-17T22:57:07Z
4fb5bf61dd52473330fb5b3fdf0ffc091054a28c,"[react-interactions] Fix focus-visible heuristic (#17124)

Respond to all keys not just `Tab`",Nicolas Gallagher,2019-10-17T16:24:31Z
8facc0537390bbdd52359f693ecf445e6f787174,"[react-interactions] Allow event.preventDefault on LegacyPress responder (#17113)

[react-interactions] Allow event.preventDefault on LegacyPress responder",Dominic Gannaway,2019-10-17T08:21:02Z
7cec15155ac2bb9d8c61dc8ab1951c6226c5cd3b,"Remove prefixed concurrent APIs from www build (#17108)

The downstream callers have been updated, so we can remove these.",Andrew Clark,2019-10-17T01:58:33Z
ed5f010ae51db1544ce92e1a5105e870b5a5098e,"Client render Suspense content if there's no boundary match (#16945)

Without the enableSuspenseServerRenderer flag there will never be a boundary match. Also when it is enabled, there might not be a boundary match if something was conditionally rendered by mistake.

With this PR it will now client render the content of a Suspense boundary in that case and issue a DEV only hydration warning. This is the only sound semantics for this case.

Unfortunately, landing this will once again break #16938. It will be less bad though because at least it'll just work by client rendering the content instead of hydrating and issue a DEV only warning.

However, we must land this before enabling the enableSuspenseServerRenderer flag since it does this anyway.

I did notice that we special case fallback={undefined} due to our unfortunate semantics for that. So technically a workaround that works is actually setting the fallback to undefined on the server and during hydration. Then flip it on only after hydration. That could be a workaround if you want to be able to have a Suspense boundary work only after hydration for some reason.

It's kind of unfortunate but at least those semantics are internally consistent. So I added a test for that.",Sebastian Markbåge,2019-10-16T23:23:12Z
916937563b4a71f2a61a75699f06122a544f4542,[react-interactions] Add onFocusWithin event to FocusWithin responder (#17115),Dominic Gannaway,2019-10-16T20:57:08Z
d7feeb25ac8cc23133c294fa01932658023130c0,"unstable_createRoot -> createRoot in test (#17107)

Fixes test added in #17105, which was based on an earler commit than the
one that removed the `unstable_` prefix from `createRoot`.",Andrew Clark,2019-10-16T04:37:54Z
6ff23f2a5da0e60fa008cef97529469945618d06,"Change retry priority to ""Never"" for dehydrated boundaries (#17105)

This changes the ""default"" retryTime to NoWork which schedules at Normal
pri.

Dehydrated bouundaries normally hydrate at Never priority except when they
retry where we accidentally increased them to Normal because Never was used
as the default value. This changes it so NoWork is the default.

Dehydrated boundaries however get initialized to Never as the default.

Therefore they now hydrate as Never pri unless their priority gets
increased by a forced rerender or selective hydration.

This revealed that erroring at this Never priority can cause an infinite
rerender. So I fixed that too.",Sebastian Markbåge,2019-10-16T02:53:20Z
2c832b4dcfa5406be1b16c03c78198e84380fc2e,"Separate sizebot for experimental builds (#17100)

Configures the sizebot to leave a second comment that tracks the
experimental build artifacts.",Andrew Clark,2019-10-16T01:43:06Z
3ac0eb075d82b19a912c6665eb4f6adb9245cbcb,"Modify Babel React JSX Duplicate Children Fix (#17101)

If a JSX element has both a children prop and children (ie. <div children={childOne}>{childTwo}</div>), IE throws an Multiple definitions of a property not allowed in strict mode. This modifies the previous fix (which used an Object.assign) by making the duplicate children a sequence expression on the next prop/child instead so that ordering is preserved. For example:

```
<Component children={useA()} foo={useB()} children={useC()}>{useD()}</Component>
```
should compile to
```
React.jsx(Component, {foo: (useA(), useB()), children: (useC(), useD)})
```",Luna Ruan,2019-10-16T00:13:21Z
43562455c992cfc614f4301473443e1360baf7b5,"Temporary patch www fork with prefixed APIs (#17103)

I'm doing this here instead of in the downstream repo so that if the
sync diff gets reverted, it doesn't revert this, too.

Once the sync has landed, and the callers are updated in www, I will
remove this.",Andrew Clark,2019-10-15T23:44:33Z
9123c479f4f3a21f897a923aeb33bf0499f4891f,"Enable concurrent APIs in all experimental forks (#17102)

Forgot to update the flags in the forked modules.",Andrew Clark,2019-10-15T23:19:45Z
30c5daf943bd3bed38e464ac79e38f0e8a27426b,"Remove concurrent apis from stable (#17088)

* Tests run in experimental mode by default

For local development, you usually want experiments enabled. Unless
the release channel is set with an environment variable, tests will
run with __EXPERIMENTAL__ set to `true`.

* Remove concurrent APIs from stable builds

Those who want to try concurrent mode should use the experimental
builds instead.

I've left the `unstable_` prefixed APIs in the Facebook build so we
can continue experimenting with them internally without blessing them
for widespread use.

* Turn on SSR flags in experimental build

* Remove prefixed concurrent APIs from www build

Instead we'll use the experimental builds when syncing to www.

* Remove ""canary"" from internal React version string",Andrew Clark,2019-10-15T22:09:19Z
4cb399a433771c84e861d5ca3d38a24733d23ad8,[react-interactions] Modify Scope query mechanism (#17095),Dominic Gannaway,2019-10-15T13:57:02Z
e7704e22a146c2d5b00f8c6bfa6255153272f053,"[babel-plugin-react-jsx] Avoid duplicate ""children"" key in props object (#17094)

* [babel-plugin-react-jsx] Avoid duplicate ""children"" key in props object

* Use Object.assign approach",Dominic Gannaway,2019-10-15T13:41:09Z
fdba0e5ce75f1cf1f82f2937f351bbfdcaadbcc5,"Fixed a bug with illegal invocation for Trusted Types (#17083)

* Fixed a bug with illegal invocation.

* Fixed the test.",Krzysztof Kotowicz,2019-10-15T10:41:42Z
a8c6a1b34e93f88f285a1a042bf473f39a30c886,"Update release scripts to support experimental releases (#17086)

* Download correct artifacts for release channel

Experimental builds should pull artifacts from the
`process_artifacts_experimental` job.

I think instead of two separate CI workflows, a better approach might
be to build stable artifacts to the `build` directory and the
experimental artifacts to a `build_experimental` directory, and
generate both within the same workflow. This would take some work since
lots of things assume the output directory is `build`, but something
to consider in the future.

* Prevent experimental promotion to stable

Adds a check to the `prepare-stable` script to prevent experimental
builds from being published using stable semver versions.",Andrew Clark,2019-10-14T21:15:23Z
d364d8555f0c2c44e8fb624068b9fff30d5908ae,"Set up experimental builds (#17071)

* Don't bother including `unstable_` in error

The method names don't get stripped out of the production bundles
because they are passed as arguments to the error decoder.

Let's just always use the unprefixed APIs in the messages.

* Set up experimental builds

The experimental builds are packaged exactly like builds in the stable
release channel: same file structure, entry points, and npm package
names. The goal is to match what will eventually be released in stable
as closely as possible, but with additional features turned on.

Versioning and Releasing
------------------------

The experimental builds will be published to the same registry and
package names as the stable ones. However, they will be versioned using
a separate scheme. Instead of semver versions, experimental releases
will receive arbitrary version strings based on their content hashes.
The motivation is to thwart attempts to use a version range to match
against future experimental releases. The only way to install or depend
on an experimental release is to refer to the specific version number.

Building
--------

I did not use the existing feature flag infra to configure the
experimental builds. The reason is because feature flags are designed
to configure a single package. They're not designed to generate multiple
forks of the same package; for each set of feature flags, you must
create a separate package configuration.

Instead, I've added a new build dimension called the **release
channel**. By default, builds use the **stable** channel. There's
also an **experimental** release channel. We have the option to add more
in the future.

There are now two dimensions per artifact: build type (production,
development, or profiling), and release channel (stable or
experimental). These are separate dimensions because they are
combinatorial: there are stable and experimental production builds,
stable and experimental developmenet builds, and so on.

You can add something to an experimental build by gating on
`__EXPERIMENTAL__`, similar to how we use `__DEV__`. Anything inside
these branches will be excluded from the stable builds.
This gives us a low effort way to add experimental behavior in any
package without setting up feature flags or configuring a new package.",Andrew Clark,2019-10-14T17:46:42Z
d5b54d0c35fa7c1b1e5989239478b365493965df,"[SuspenseList] Fix bugs with dropped Promises (#17082)

* Transfer any pending promises from inner boundary to list

For non-hidden modes, this boundary should commit so this shouldn't be
needed but the nested boundary can make a second pass which forces these
to be recreated without resuspending. In this case, the outer list assumes
that it can collect the inner promises to still rerender if needed.

* Propagate suspense ""context"" change to nested SuspenseLists

This means that we always rerender any nested SuspenseLists together.

This bug looks similar to the previous one but is not based on the lack of
retry but that the retry only happens on the outer boundary but the inner
doesn't get a retry ping since it didn't know about its own promise after
the second pass.",Sebastian Markbåge,2019-10-14T16:42:10Z
75955bf1d7ff6c2c1f4052f4a84dd2ce6944c62e,"Pass prod error messages directly to constructor (#17063)

* Remove ""Invariant Violation"" from dev errors

When I made the change to compile `invariant` to throw expressions, I
left a small runtime to set the error's `name` property to ""Invariant
Violation"" to maintain the existing behavior.

I think we can remove it. The argument for keeping it is to preserve
continuity in error logs, but this only affects development errors,
anyway: production error messages are replaced with error codes.

* Pass prod error messages directly to constructor

Updates the `invariant` transform to pass an error message string
directly to the Error constructor, instead of mutating the
message property.

Turns this code:

```js
invariant(condition, 'A %s message that contains %s', adj, noun);
```

into this:

```js
if (!condition) {
  throw Error(
    __DEV__
      ? `A ${adj} message that contains ${noun}`
      : formatProdErrorMessage(ERR_CODE, adj, noun)
  );
}
```",Andrew Clark,2019-10-11T16:10:40Z
0ac8e563d0bdbbbfe12d718710b3959e78d507dd,"[react-interactions] Add getInstanceFromNode support to TestHostRenderer (#17065)

Fix bad WeakMap key case

Fix bad WeakMap key case",Dominic Gannaway,2019-10-11T14:58:27Z
22b2642a565cf9160bbf660ab030d07d8273879e,"DevTools test shell tweaks (#17054)

* Updated DevTools shell ignore warning message to account for recent changes in warning text

* Update DevTools console patching to patch the parent window's console rather than the iframe, to more accurately simulate real usage environment",Brian Vaughn,2019-10-09T19:37:25Z
4be45be5ff4b26892bab83b5f9022afac1a664fb,"Stop warning about setNativeProps being deprecated (#17045)

* Stop warning about setNativeProps being deprecated

* Remove ReactNative.setNativeProps

* Remove more Fabric tests",Eli White,2019-10-08T18:21:20Z
b71ab61c8f06b7d1c415a0354db607bf2772473e,[react-interactions] Adds more experimental Scope API methods (#17042),Dominic Gannaway,2019-10-08T17:32:53Z
5a71cbe7a9e192c23b847be6e0c575b6705f6939,"Remove unused export

Meant to do this in e4b21be but neglected to `git add` the changes.",Andrew Clark,2019-10-07T21:06:19Z
71d012ecd07baef6f53d02bebd720794f75266ca,"Remove dormant createBatch experiment (#17035)

* Remove dormant createBatch experiment

In a hybrid React app with multiple roots, `createBatch` is used to
coordinate an update to a root with its imperative container.

We've pivoted away from multi-root, hybrid React apps for now to focus
on single root apps.

This PR removes the API from the codebase. It's possible we'll add back
some version of this feature in the future.

* Remove unused export",Andrew Clark,2019-10-07T21:15:15Z
cd1b167ad40c5c62cf2a0b32451fe2aebb669d08,"[Scheduler Profiler] Use microsecond precision (#17010)

The `performance.now` returns a timestamp in milliseconds as a float.
The browser has the option to adjust the precision of the float, but
it's usually more precise than a millisecond. However, this precision
is lost when the timestamp is logged by the Scheduler profiler, because
we store the numbers in an Int32Array.

This change multiplies the millisecond float value by 1000, giving us
three more degrees of precision.",Andrew Clark,2019-10-07T16:16:18Z
55731fd8ce7d36a482a50a120cd4da0584ce49de,[react-interactions] Refine a11y component flow types (#17032),Dominic Gannaway,2019-10-07T14:36:16Z
a011aacafa7623bf14654713b130542b4bd2aedb,[react-interactions] Remove FB builds of a11y components (#17030),Dominic Gannaway,2019-10-07T10:45:49Z
fff5b1ca773c36d0aa221689d31fee79b0498495,[react-interactions] Add FocusTable colSpan support (#17019),Dominic Gannaway,2019-10-07T10:04:41Z
4bc52ef0dfbb0389cc20b65cef0645afb7b85445,"Revert ""update hideOrUnhideAllChildren to hide portals that aren't wrapped in a host component (#16992)"" (#17011)

This reverts commit de2edc268db827f5110fc56cba240b7eb7301787.",Luna Ruan,2019-10-04T00:22:22Z
3a2b5f148d450c69aab67f055fc441d294c23518,"[Selective Hydration] ReactDOM.unstable_scheduleHydration(domNode) (#17004)

Adds an API to explicitly prioritize hydrating the path to a particular DOM node without relying on events to do it.

The API uses the current scheduler priority to schedule it. For the same priority, the last one wins. This allows a similar effect as continuous events. This is useful for example to hydrate based on scroll position, or prioritize components that will upgrade to client-rendered-only content.

I considered having an API that explicitly overrides the current target(s). However that makes it difficult to coordinate across components in an app.

This just hydrates one target at a time but if it is blocked on I/O we could consider increasing priority of later targets too.",Sebastian Markbåge,2019-10-03T21:48:28Z
26ba38ae4b65375b97b561ec2d6a58ef597647ed,[EnterLeaveEventPlugin] Fix bug when dealing with unhandled DOM nodes (#17006),Dominic Gannaway,2019-10-03T21:35:09Z
abedf17597bd4e4c4d922a9b083bbaabb6e62a86,Changelog for v16.10.2,Andrew Clark,2019-10-03T21:16:13Z
d256f88ac64606be7cf6182c55bfe75af7d03bc8,Update local version numbers for 16.10.2 release,Andrew Clark,2019-10-03T21:14:10Z
a8b8ffb894b19b5a4bc174f8ee59487ed1fe98ff,DevTools v4.1.3 -> v4.2.0,Brian Vaughn,2019-10-03T19:34:35Z
0545f366d4d6b5959f4bb172e810c745f74b9513,"Added trace updates feature (DOM only) (#16989)

* Added trace updates feature (DOM only)
* Updated DevTools CHANGELOG",Brian Vaughn,2019-10-03T18:07:18Z
e09097a75da040f428ca335e9d181186a61247d1,"chore: upgrade to jest 24 (#15778)

* chore: upgrade to jest 24

* download react-is from npm manually",Simen Bekkhus,2019-10-03T17:14:18Z
5943b1da6cb49476ee79dd3c06b10d0bd299bfe0,"Fixing grammatical errors in error message (#16973)

* Fixing grammatical errors in error message

* Fixing grammar error in test file",Rane Wallin,2019-10-03T12:44:48Z
4c5698400f04bbc6d0b4bd766b0993d0bcb37609,[react-interactions] Remove context.setTimeout & context.clearTimeout (#17000),Dominic Gannaway,2019-10-03T11:37:37Z
b33633d932d070c1665f2c8700b025e7da6fbd5d,[react-interactions] Repurpose React a11y modules (#16997),Dominic Gannaway,2019-10-03T09:19:24Z
de2edc268db827f5110fc56cba240b7eb7301787,"update hideOrUnhideAllChildren to hide portals that aren't wrapped in a host component (#16992)

Currently, when a node suspends, if its subtree contains a portal, the portal is not hidden. This hides portals in the subtree when it's not wrapped in a host component .",Luna Ruan,2019-10-02T22:30:55Z
bb680a09052b5af6543daf28bfcc3283bbc35cf9,"[Selective Hydration] Prioritize the last continuous target (#16937)

* Prioritize the last continuous target

This ensures that the current focus target is always hydrated first.

Slightly higher than the usual Never expiration time used for hydration.
The priority increases with each new queued item so that the last always
wins.

* Don't export the moving target

It's not useful for comparison purposes anyway.",Sebastian Markbåge,2019-10-02T21:52:23Z
10277cc5ba3fa1dfca8aac02c375d79f3cabd337,Remove unused canonical check in fiber host component (#16914),Eli White,2019-10-02T18:07:20Z
ab1a4f249e61045d523ddbbfb840e868afbbf785,"Move eventSystemFlags to last argument in event plugin extractors (#16978)

Fix for necolas/react-native-web#1443",Nicolas Gallagher,2019-10-02T17:31:15Z
f6efb224b091a741fad1bc7916b5936ff91f85fe,"[react-interactions] Tap cancels on second pointerdown (#16936)

This patch causes onTapCancel to be called whenever a second pointer interacts
with the responder target.",Nicolas Gallagher,2019-10-01T22:13:31Z
34457729a6b78bd319a8082cff032dd55e47c2e8,[react-interactions] Add allowModifiers flag to FocusList + FocusTable (#16971),Dominic Gannaway,2019-10-01T15:59:52Z
b34f042e5b6fa30c645b71d38a0b1ecf785af2cc,Fix mouseenter handlers fired twice (#16928),Rango Yuan,2019-10-01T12:03:14Z
05dc814cf061796c54e3aab7dd18a1b54615fc6b,"Remove IIFE wrappers from dev invariant checks (#16963)

The error transform works by replacing calls to `invariant` with
an `if` statement.

Since we're replacing a call expression with a statement, Babel wraps
the new statement in an immediately-invoked function expression (IIFE).
This wrapper is unnecessary in practice because our `invariant` calls
are always part of their own expression statement.

In the production bundle, the function wrappers are removed by Closure.
But they remain in the development bundles.

This commit updates the transform to confirm that an `invariant` call
expression's parent node is an expression statement. (If not, it throws
a transform error.)

Then, it replaces the expression statement instead of the expression
itself, effectively removing the extraneous IIFE wrapper.",Andrew Clark,2019-09-30T18:14:51Z
2c8832075b05009bd261df02171bf9888ac76350,React DevTools v4.1.2 -> v.4.1.3,Brian Vaughn,2019-09-30T16:33:23Z
6c73a1e7764dc453e8503c10181fd38eac597451,Updated DevTools CHANGELOG,Brian Vaughn,2019-09-30T15:31:47Z
6a3de7a414b25ef3933a6f418a442ab720b8dcd5,[DevTools] postMessage target origin needs to be '*' for local files (#16953),David Huang,2019-09-30T15:29:18Z
ac8e8b3278c69ddb6267ca0658c49af34cc4e785,[react-interactions] Add tab handling to FocusList (#16958),Dominic Gannaway,2019-09-30T15:13:35Z
10c7dfe3b4acef516b657188e7e1fca72ed91922,[react-interactins] FocusTable tabScope handling+tabIndex control (#16922),Dominic Gannaway,2019-09-30T09:41:20Z
d3622d0f977def825123f1d5f4cef19888b1eaf1,chore: updated comment message (#16949),Kirankumar Ambati,2019-09-29T22:00:49Z
2a264a9dbe654f9ec29c601097913a9afc76d361,Update local version numbers for 16.10.1 release,Andrew Clark,2019-09-29T04:39:28Z
22019ef5a2a87ea459bb513634534315f3a2cfa0,Changelog for v16.10.1,Andrew Clark,2019-09-28T18:24:08Z
d8a76ad5804197108f18b988f6d13c767ab41387,"Allow Suspense Mismatch on the Client to Silently Proceed (#16943)

* Regression test: Suspense + hydration + legacy

* Allow Suspense Mismatch on the Client to Silently Proceed

This fixes but isn't actually the semantics that we want this case to have.",Sebastian Markbåge,2019-09-28T17:43:53Z
9d637844e9761a29a49bc53a9b41244d683f89e3,"Remove enableUserBlockingEvents flag (#16882)

Seems like this worked out. We can clean up the flag now.",Sebastian Markbåge,2019-09-28T02:46:56Z
fe31cc710ec0a768bbeb9f382ec3055a09c97149,"[Selective Hydration] Increase priority for non-synchronous discrete events and retries (#16935)

* Increase retryTime for increased priority dehydrated boundaries

* Increaese the priority to user blocking for every next discrete boundary",Sebastian Markbåge,2019-09-28T00:27:17Z
b550679617f9fbc92ed853abe3ee94d7aa538425,Fixed typo in DevTools CHANGELOG,Brian Vaughn,2019-09-28T00:10:27Z
5184346daf5f33fbd3eed388c57e72c638df614a,DevTools v4.1.1 -> v4.1.2,Brian Vaughn,2019-09-28T00:03:17Z
d4278663c681ab4b3c3ebb36a19532b43a7c2813,Replaced === check with Object.is() to support values like NaN (#16934),Brian Vaughn,2019-09-27T23:54:53Z
d1121c0174f541435b0619794410e0fb11774bd4,[react-interactions] Fix virtual click heuristic (#16915),Nicolas Gallagher,2019-09-27T22:38:47Z
f553515d1ec7049ac85de3a75bc2850a9d4ab70d,Fix heading level in changelog,Andrew Clark,2019-09-27T20:37:36Z
7dc83a61005319f8e473c00046bfe0f1c7b53eb9,Changelog for 16.10,Andrew Clark,2019-09-27T20:20:20Z
93f5f11b79312cc09cdb4cbd8834330a6eebb3c1,Update local version numbers for 16.10 release,Andrew Clark,2019-09-27T20:31:35Z
c8dc7a926e9e5ec0dcf779e91a3730d4069a22a1,"expose isHydrating (#16909)

expose isHydrating for FB",Luna Ruan,2019-09-26T21:47:01Z
db8afe4f6318dba422177a2054204ef089570ad8,"Add HostComponent type to ReactNative (#16898)

* Add HostComponent type to ReactNative

* Use type alias imports instead of wildcard

* Fix forgotten Object in measureLayout type",Eli White,2019-09-26T21:42:18Z
fad5102101e4b34bbd004a9044ae5e46581231ed,"[bugfix] Fix false positive render phase update (#16907)

Need to reset the current ""debug phase"" inside the catch block.
Otherwise React thinks we're still in the render phase during the
subsequent event.",Andrew Clark,2019-09-26T19:47:48Z
a9cd9a765b64fe0048d4f4ce16a535c299240479,DevTools v4.1.0 -> v4.1.1,Brian Vaughn,2019-09-26T17:22:59Z
b6606ecba80b591ea66db1e2ee1fed72befb4c32,"DevTools shows unsupported renderer version dialog (#16897)

* DevTools shows unsupported renderer version dialog

* Optimistic CHANGELOG udpate",Brian Vaughn,2019-09-26T15:41:46Z
84e83db1ee6303bc31120af59e20750a0fa299bc,Updated DevTools CHANGELOG,Brian Vaughn,2019-09-26T15:26:18Z
b9811ed5bc710f6318eed6292ad76e4874ac7f99,[react-interactions] Add wrapping support to FocusList/FocusTable (#16903),Dominic Gannaway,2019-09-26T13:15:48Z
49b0cb6db8e4a32b6523d5e538578d9d9c6db592,Moving backend injection to the content script (#16900),David Huang,2019-09-26T13:03:07Z
3694a3b5e9a5a3c80d47f9889a17d8337573d513,"Selective Hydration (#16880)

* Add Feature Flag for Selective Hydration

* Enable Synchronous Hydration of Discrete Events

* Resolve cyclic dependency",Sebastian Markbåge,2019-09-25T22:26:27Z
4bb0e96b4b0dd5db4bb349cd27425e5594970eb3,[react-interactions] FocusTable key press bound propgataion (#16895),Dominic Gannaway,2019-09-25T19:12:39Z
fa1a3262271be165820fa51daeb036ba260205a3,"Update useEditableValue hook to sync external value changes (#16878)

* Update useEditableValue to mirror value cahnges

Previously, the hook initialized local state (in useState) to mirror the prop/state value. Updates to the value were ignored though. (Once the state was initialized, it was never updated.) The new hook updates the local/editable state to mirror the external value unless there are already pending, local edits being made.

* Optimistic CHANGELOG update

* Added additional useEditableValue() unit test cases",Brian Vaughn,2019-09-25T17:46:27Z
57bf275fbd89afc9afb84cefb950eb74c3573ea7,[devtools] Add support for React Scope symbol/number (#16893),Dominic Gannaway,2019-09-25T17:03:37Z
7c3bd08b3767ed69ddf398176de58214561194a0,[react-interactions] Add more documentation for a11y components (#16894),Dominic Gannaway,2019-09-25T17:01:15Z
a06d181af081a17bea466eef2bae1bdaaf8a4b5e,Include tag in begin/complete invariant (#16881),Sebastian Markbåge,2019-09-25T15:10:35Z
0d8c0cd0968150e187ed7132315521d78a5abf61,"These flags are hard coded in our internal config (#16883)

By hard coding them here they can get properly DCE and don't have to be
sent to users. The internal config should only have dynamic flags.",Sebastian Markbåge,2019-09-25T15:00:29Z
d6d83d7060388c6b1b3bc0a28708995de6240ce3,[react-interactions] Add Portal propagation configuration (#16889),Dominic Gannaway,2019-09-25T14:56:51Z
d0ebde77f6d1232cefc0da184d731943d78e86f2,[react-interactions] Add initial docs explaining React Scopes (#16892),Dominic Gannaway,2019-09-25T12:57:47Z
32e5c97d11e390e6a3d3ce6a2ab7443daed09747,"[React Native] Improve errors for invalid ViewConfig getter functions (#16879)

* [React Native] Improve logging for missing view configs and invalid view config getter functions

* [React Native] Improve logging for missing view configs and invalid view config getter functions",Joshua Gross,2019-09-25T00:46:21Z
ebc299fc2f21a74fffa3f8aa2209259d98702156,[react-interactions] TabFocus -> FocusManager (#16874),Dominic Gannaway,2019-09-24T21:26:20Z
793f176dad4544363149098cc56eb2abff687fe2,[react-interactions] Make FocusList bundle (#16876),Dominic Gannaway,2019-09-24T16:02:13Z
68a87eee544b2bcdff66c751e07cb55939b9d8ca,[react-interactions] Add FocusList component (#16875),Dominic Gannaway,2019-09-24T15:14:29Z
18d2e0c03e4496a824fdb7f89ea2a3d60c30d49a,"Warning system refactoring (part 1) (#16799)

* Rename lowPriorityWarning to lowPriorityWarningWithoutStack

This maintains parity with the other warning-like functions.

* Duplicate the toWarnDev tests to test toLowPriorityWarnDev

* Make a lowPriorityWarning version of warning.js

* Extract both variants in print-warning

Avoids parsing lowPriorityWarning.js itself as the way it forwards the
call to lowPriorityWarningWithoutStack is not analyzable.",Jessica Franco,2019-09-24T12:45:38Z
8b580a89d6dbbde8a3ed69475899addef1751116,"Idle updates should not be blocked by hidden work (#16871)

* Idle updates should not be blocked by hidden work

Use the special `Idle` expiration time for updates that are triggered at
Scheduler's `IdlePriority`, instead of `Never`.

The key difference between Idle and Never¹ is that Never work can be
committed in an inconsistent state without tearing the UI. The main
example is offscreen content, like a hidden subtree.

¹ ""Never"" isn't the best name. I originally called it that because it
""never"" expires, but neither does Idle. Since it's mostly used for
offscreen subtrees, we could call it ""Offscreen."" However, it's also
used for dehydrated Suspense boundaries, which are inconsistent in the
sense that they haven't finished yet, but aren't visibly inconsistent
because the server rendered HTML matches what the hydrated tree would
look like.

* Reset as early as possible using local variable

* Updates in a hidden effect should be Idle

I had made them Never to avoid an extra render when a hidden effect
updates the hidden component -- if they are Idle, we have to render once
at Idle, which bails out on the hidden subtree, then again at Never to
actually process the update -- but the problem of needing an extra
render pass to bail out hidden updates already exists and we should fix
that properly instead of adding yet another special case.",Andrew Clark,2019-09-24T03:52:48Z
c5e7190ed4af266bbc636bda08e766fce9ee68a7,"[react-interactions] Press with useRef instead of useState (#16870)

We only need to read and modify the value for the lifetime of the hook",Nicolas Gallagher,2019-09-23T23:25:13Z
911104a129d48fb58c5ef4f80339f2e58539186a,DevTools CHANGELOG update,Brian Vaughn,2019-09-23T19:58:58Z
bce2ac63a93fd77e352286a0074ffe471301ab8a,"Revert change to backend injection method from PR #16752 (#16864)

PR #16752 changed how we were injecting the backend script to be done by the content script in order to work around Trusted Type limitations with our previous approach. This may have caused a regression (see #16840) so I'm backing it out to verify.",Brian Vaughn,2019-09-23T19:56:36Z
9b3cde9b627e91f9d4a81093384d579928474c37,"Fix DevTools v4.1 editable hook regression (#16867)

* Fixed a regression in hooks editor from a recent EditableValue change

* Fixed a reset/state bug in useEditableValue() hook and removed unnecessary useMemo()",Brian Vaughn,2019-09-23T19:56:01Z
1a6294d3e2254f03267da3412becbe51188e830f,[react-interaction] Refactor a11y components more (#16866),Dominic Gannaway,2019-09-23T19:30:49Z
1758b3f7bafdb9197cf9464182f02da355f4c540,"[react-interactions] Add no-op stopPropagation + preventDefault to Press (#16868)

Fix",Dominic Gannaway,2019-09-23T19:18:40Z
013b7ad117834cbb99b4fc0a3d08fdb8622597c9,"[suspense][error handling] Inline renderRoot and fix error handling bug (#16801)

* Outline push/pop logic in `renderRoot`

I want to get rid of the the `isSync` argument to `renderRoot`, and
instead use separate functions for concurrent and synchronous render.

As a first step, this extracts the push/pop logic that happens before
and after the render phase into helper functions.

* Extract `catch` block into helper function

Similar to previous commit. Extract error handling logic into
a separate function so it can be reused.

* Fork `renderRoot` for sync and concurrent

Removes `isSync` argument in favor of separate functions.

* Extra ""root completion"" logic to separate function

Moving this out to avoid an accidental early return, which would
bypass the call to `ensureRootIsScheduled` and freeze the UI.

* Inline `renderRoot`

Inlines `renderRoot` into `performConcurrentWorkOnRoot` and
`performSyncWorkOnRoot`. This lets me remove the `isSync` argument
and also get rid of a redundant try-catch wrapper.

* [suspense][error handling] Add failing unit test

Covers an edge case where an error is thrown inside the complete phase
of a component that is in the return path of a component that suspends.
The second error should also be handled (i.e. able to be captured by
an error boundary.

The test is currently failing because there's a call to
`completeUnitOfWork` inside the main render phase `catch` block. That
call is not itself wrapped in try-catch, so anything that throws is
treated as a fatal/unhandled error.

I believe this bug is only observable if something in the host config
throws; and, only in legacy mode, because in concurrent/batched mode,
`completeUnitOfWork` on fiber that throws follows the ""unwind"" path
only, not the ""complete"" path, and the ""unwind"" path does not call
any host config methods.

* [scheduler][profiler] Start time of delayed tasks

Fixes a bug in the Scheduler profiler where the start time of a delayed
tasks is always 0.

* Remove ad hoc `throw`

Fatal errors (errors that are not captured by an error boundary) are
currently rethrown from directly inside the render phase's `catch`
block. This is a refactor hazard because the code in this branch has
to mirror the code that happens at the end of the function, when exiting
the render phase in the normal case.

This commit moves the throw to the end, using a new root exit status.

* Handle errors that occur on unwind",Andrew Clark,2019-09-23T18:23:28Z
0a527707cd8befd21a741ca9646a8551842190b0,"Event Replaying (#16725)

* Add Event Replaying Infra

* Wire up Roots and Suspense boundaries, to retry events, after they commit

* Replay discrete events in order in a separate scheduler callback

* Add continuous events

These events only replay their last target if the target is not yet
hydrated. That way we don't have to wait for a previously hovered
boundary before invoking the current target.

* Enable tests from before

These tests were written with replaying in mind and now we can properly
enable them.

* Unify replaying and dispatching

* Mark system flags as a replay and pass to legacy events

That way we can check if this is a replay and therefore needs a special
case. One such special case is ""mouseover"" where we check the
relatedTarget.

* Eagerly listen to all replayable events

To minimize breakages in a minor, I only do this for the new root APIs
since replaying only matters there anyway. Only if hydrating.

For Flare, I have to attach all active listeners since the current
system has one DOM listener for each. In a follow up I plan on optimizing
that by only attaching one if there's at least one active listener
which would allow us to start with only passive and then upgrade.

* Desperate attempt to save bytese

* Add test for mouseover replaying

We need to check if the ""relatedTarget"" is mounted due to how the old
event system dispatches from the ""out"" event.

* Fix for nested boundaries and suspense in root container

This is a follow up to #16673 which didn't have a test because it wasn't
observable yet. This shows that it had a bug.

* Rename RESPONDER_EVENT_SYSTEM to PLUGIN_EVENT_SYSTEM",Sebastian Markbåge,2019-09-23T18:21:10Z
a87d245fc2d0b5eedd5463e6f21bf12443489b15,"[work loop] Prevent work loop from being inlined (#16865)

Uses Closure Compiler's `@noinline` directive.

See https://github.com/google/closure-compiler/wiki/Annotating-JavaScript-for-the-Closure-Compiler#noinline",Andrew Clark,2019-09-23T18:12:47Z
312b462d5444c231d5acf656efea6780ad9ba89d,"[react-interactions] Improve consistency of Tap responder (#16837)

Makes sure that touch events with modifier keys behave the same way as other
pointer types (i.e., does not call `onTapStart` if the gesture begins with a
modifier key held down)",Nicolas Gallagher,2019-09-23T17:48:11Z
70754f10d4119a999ac9a46b6ea8c11a12a1a72d,[react-interaction] Tweak Focus Table component (#16862),Dominic Gannaway,2019-09-23T14:39:43Z
d7f6dd5a80827aea76fc42f07c77d05abb7180b2,[react-interactions] Fix typo in FocusTable (#16860),Dominic Gannaway,2019-09-23T12:20:43Z
cef47cbc01b3c41ef4bfe3cdf7abd09c34e4a9c2,Rename experimental react-ui => react-interactions (#16842),Dan Abramov,2019-09-20T10:51:03Z
57a5805a9f07cbda3fea99b7cca59bd3b2bb8476,[react-ui] Add preventDefault+stopPropagation to Keyboard + update Focus components (#16833),Dominic Gannaway,2019-09-20T09:21:38Z
08b51aa384125c2169fa5e0371bfdf4e292737a9,Added React DevTools v4.1.0 release date to CHANGELOG,Brian Vaughn,2019-09-19T22:22:22Z
b5cebedfbe0c05c530ead002b123448b6b71e052,React DevTools version bump 4.0.6 -> 4.1.0,Brian Vaughn,2019-09-19T22:11:48Z
35bf9d27a3f9fdf60cea060d20b5c178e437520d,"Exclude react-dom when flow checking other builds (#16737)

This is because the HostConfig can't be guaranteed to be consistent with
other code such as code that touches the DOM directly.

Ideally we'd have a more systemic solution to this since it will pop
up for other packages later too.",Sebastian Markbåge,2019-09-19T19:41:51Z
fd870e6b6a9c35cf4bb77d83dbfe61e07327368f,"[react-ui/events] Tap responder API changes (#16827)

This patch limits the `onTap*` callbacks to the primary pointer button.
Auxiliary button and modified primary button interactions call
`onAuxiliaryTap`, cancel any active tap, and preserve the native behavior.",Nicolas Gallagher,2019-09-19T16:36:29Z
4ddcb8e1344630a63c10790d8e24e1194a1abdce,[DevTools] Remove Welcome dialog (#16834),Dan Abramov,2019-09-19T15:41:18Z
924a305780eb71866eb0932027048237b6f5c3cd,[react-ui] Remove event object warnings (#16822),Dominic Gannaway,2019-09-19T10:46:17Z
a5df18a9e5d7cc70c30ce144dcc291e9f64cb451,"prevent firefox marking required textareas invalid (#16578)

* prevent firefox marking required textareas invalid

Bug was caused by an IE10/IE11 bugfix dealing with the placeholder attribute and textContent. Solved by avoiding the IE bugfix when textContent was empty.

Closes #16402

* more explicit conditional check for textContent

re: @philipp-spiess code review

* clarify textarea test fixture's expected result

better describe the behavior we are testing for
re: @philipp-spiess code review",halvves,2019-09-18T21:38:02Z
f818af9b03700f681bad0de6041e404cd681319d,[Fresh] Always remount classes (#16823),Dan Abramov,2019-09-18T15:32:11Z
6ecfa90eb0d9bc369d0e6930bc02d59dfba770d1,[React Native] Fix for view config registrations (#16821),Ricky,2019-09-18T14:31:00Z
18cb59050b4958b5600b8baf5cf03bdaba3b6c88,[react-core] Do not null fiber.sibling in detachFiber (#16820),Dominic Gannaway,2019-09-18T12:18:32Z
d862f0ea566be38d0c6a67447cb3a4bcf256cd55,Optimize objectIs (#16212),Kuba Juszczyk,2019-09-17T21:55:43Z
d1c25558614164936bb90b6c6dc590106381c446,"[react-devtools-shared] Added string type check for object name prop in getDisplayName function (#16798)

* [react-devtools-shared] Added string type check for object name prop in getDisplayName function from utils.js file; tests included;

* Re-added empty string check to getDisplayName()

* Tweaked tests to use real functions

This more closely simulates how the utility is being used in production, and would catch cases like anonymous functions (with empty string names).",Pavlo Tymchuk,2019-09-17T20:17:04Z
70dcdd265d0d930c0d0e3666ca973dc455100f6b,Updated pending CHANGELOG for DevTools,Brian Vaughn,2019-09-17T20:15:53Z
e8c7ddeef2919560da9ffa7e1043a4c6418c8701,Release script filters DevTools NPM pakcages (#16810),Brian Vaughn,2019-09-17T19:46:13Z
8f1533f4d84bfc8c2bebfac13d7a3dbf2dea7ead,[react-ui] Fix bundle name [hotfix] (#16811),Dominic Gannaway,2019-09-17T19:10:51Z
7c802de797262dba582c8bf99e3793be75b5b73b,[react-a11y] Add react-ui/accessibility to bundle build (#16804),Dominic Gannaway,2019-09-17T18:22:09Z
901139c2910d0dc33f07f85c748c64371f8664f4,"[scheduler][profiler] Start time of delayed tasks (#16809)

Fixes a bug in the Scheduler profiler where the start time of a delayed
tasks is always 0.",Andrew Clark,2019-09-17T17:24:48Z
f40ceb0010eaddab8cad94c67189837c495a5b57,[react-ui] FocusGrid -> ReactFocusTable + tweaks and fixes (#16806),Dominic Gannaway,2019-09-17T17:22:10Z
2f1e8c5f784e288beef9ac5b9365304f841e611f,[react-core] Clear more properties in detachFiber (#16807),Dominic Gannaway,2019-09-17T15:30:22Z
8e0c574122b3d3eadcffaec1223e95d479b01c6e,"Follow-up to initial Trusted Types support (#16795)

* Follow-up to initial Trusted Types support

* Fast-path both strings and numbers

* Move shared objects out of every test",Dan Abramov,2019-09-17T15:06:26Z
3af05de1aaed309f8146bc53f9a4b4d785abdd3f,"[react-ui] usePress from useKeyboard and useTap (#16772)

This implements 'usePress' in user-space as a combination of 'useKeyboard' and 'useTap'.  The existing 'usePress' API is preserved for now. The previous 'usePress' implementation is moved to 'PressLegacy'.",Nicolas Gallagher,2019-09-16T21:36:27Z
494300b366ef446ccee8811f518ba224c923909e,[react-ui] Move experimental event+a11y work to react-ui package (#16794),Dominic Gannaway,2019-09-16T18:05:50Z
9691eb273a8e8b2f36b2d8d89506d002be3a8d1c,"[react-events] Keyboard support for virtual clicks (#16780)

This accounts for all clicks that are natively dispatched following relevant
keyboard interactions (e.g., key is ""Enter""), as well as programmatic clicks,
and screen-reader virtual clicks.",Nicolas Gallagher,2019-09-16T17:40:05Z
b8d079b41372290aa1846e3a780d85d05ab8ffc1,"Add trusted types to react on client side (#16157)

* Add trusted types to react on client side

* Implement changes according to review

* Remove support for trusted URLs, change TrustedTypes to trustedTypes

* Add support for deprecated trusted URLs

* Apply PR suggesstions

* Warn only once, remove forgotten check, put it behind a flag

* Move comment

* Fix PR comments

* Fix html toString concatenation

* Fix forgotten else branch

* Fix PR comments",Emanuel Tesař,2019-09-16T12:43:22Z
cdbfa5044b596ba5feb6d96408ada3eb8907e53c,"fix typo inteval -> interval & continutation -> continuation (#16760)

* fix typo alterate -> alternate

* fix typo interal -> interval & continutation -> continuation",Heaven,2019-09-14T19:51:20Z
45b6443c90d1db08a2ff223ec3fa0b2eafddcb67,Spelling is fundamental (#16782),Andrew Clark,2019-09-13T23:27:18Z
45898d0be0517b0851beaf2e7df0db3a054a437d,"[Scheduler] Prevent event log from growing unbounded (#16781)

If a Scheduler profile runs without stopping, the event log will grow
unbounded. Eventually it will run out of memory and the VM will throw
an error.

To prevent this from happening, let's automatically stop the profiler
once the log exceeds a certain limit. We'll also print a warning with
advice to call `stopLoggingProfilingEvents` explicitly.",Andrew Clark,2019-09-13T22:50:25Z
87eaa90ef8dabd3d557085586d524016cd946d30,"[react-events] Keyboard calls preventDefault on 'click' events (#16779)

Make sure to call preventDefault for any 'click' events that follow a 'keydown'
event that matches 'preventKeys'",Nicolas Gallagher,2019-09-13T20:19:18Z
0c0b30b8c742d891ad29da0db8bd4ba21021c640,Remove unnecessary interaction tracing ping wrapper (#16777),Brian Vaughn,2019-09-13T18:04:36Z
137ea783b1073f7b94a0bf252b6344174c65754b,"Re-enable risky work loop changes (#16771)

The stack of PRs in #16743 was reverted. This adds them back.",Andrew Clark,2019-09-13T16:33:46Z
d6f6b951e12e25b67f681094714a337356d2a310,"Support disabling interaction tracing for suspense promises (#16776)

* Support disabling interaction tracing for suspense promises

If a thrown Promise has the __reactDoNotTraceInteractions attribute, React will not wrapped its callbacks to continue tracing any current interaction(s).

* Added optional '__reactDoNotTraceInteractions' attribute to Flow Thenable type",Brian Vaughn,2019-09-13T15:59:57Z
b4b8a349a3aa62e693e73cc16a231c3cc59b96de,[react-interactions] Add experimental FocusGrid API (#16766),Dominic Gannaway,2019-09-13T10:29:39Z
a7dabcb60afa1ec4de29501f0b298565af47f9e3,"Revert ""Re-arrange slightly to prevent refactor hazard (#16743)"" (#16769)

This reverts commit ab4951fc03750a726e412b90126e0737fbd04014.

* Track ""pending"" and ""suspended"" ranges

A FiberRoot can have pending work at many distinct priorities. (Note: we
refer to these levels as ""expiration times"" to distinguish the concept
from Scheduler's notion of priority levels, which represent broad
categories of work. React expiration times are more granualar. They're
more like a concurrent thread ID, which also happens to correspond to a
moment on a timeline. It's an overloaded concept and I'm handwaving over
some of the details.)

Given a root, there's no convenient way to read all the pending levels
in the entire tree, i.e. there's no single queue-like structure that
tracks all the levels, because that granularity of information is not
needed by our algorithms. Instead we track the subset of information
that we actually need — most importantly, the highest priority level
that exists in the entire tree.

Aside from that, the other information we track includes the range of
pending levels that are known to be suspended, and therefore should not
be worked on.

This is a refactor of how that information is tracked, and what each
field represents:

- A *pending* level is work that is unfinished, or not yet committed.
  This includes work that is suspended from committing.
  `firstPendingTime` and `lastPendingTime` represent the range of
  pending work. (Previously, ""pending"" was the same as ""not suspended."")
- A *suspended* level is work that did not complete because data was
  missing. `firstSuspendedTime` and `lastSuspendedTime` represent the
  range of suspended work. It is a subset of the pending range. (These
  fields are new to this commit.)
- `nextAfterSuspendedTime` represents the next known level that comes
  after the suspended range.

This commit doesn't change much in terms of observable behavior. The one
change is that, when a level is suspended, React will continue working
on the next known level instead of jumping straight to the last pending
level. Subsequent commits will use this new structure for a more
substantial refactor for how tasks are scheduled per root.

* Get next expiration time from FiberRoot

Given a FiberRoot, we should be able to determine the next expiration
time that needs to be worked on, taking into account the levels that
are pending, suspended, pinged, and so on.

This removes the `expirationTime` argument from
`scheduleCallbackForRoot`, and renames it to `ensureRootIsScheduled` to
reflect the new signature. The expiration time is instead read from the
root using a new function, `getNextExpirationTimeToWorkOn`.

The next step will be to remove the `expirationTime` argument from
`renderRoot`, too.

* Don't bind expiration time to render callback

This is a fragile pattern because there's only meant to be a single
task per root, running at a single expiration time. Instead of binding
the expiration time to the render task, or closing over it, we should
determine the correct expiration time to work on using fields we
store on the root object itself.

This removes the ""return a continuation"" pattern from the
`renderRoot` function. Continuation handling is now handled by
the wrapper function, which I've renamed from `runRootCallback` to
`performWorkOnRoot`. That function is merely an entry point to
`renderRoot`, so I've also removed the callback argument.

So to sum up, at at the beginning of each task, `performWorkOnRoot`
determines which expiration time to work on, then calls `renderRoot`.
And before exiting, it checks if it needs to schedule another task.

* Update error recovery test to match new semantics

* Remove `lastPendingTime` field

It's no longer used anywhere

* Restart on update to already suspended root

If the work-in-progress root already suspended with a delay, then the
current render definitely won't finish. We should interrupt the render
and switch to the incoming update.

* Restart on suspend if return path has an update

Similar to the previous commit, if we suspend with a delay, and
something in the return path has a pending update, we should abort
the current render and switch to the update instead.

* Track the next unprocessed level globally

Instead of backtracking the return path. The main advantage over the
backtracking approach is that we don't have to backtrack from the source
fiber. (The main disadvantages are that it requires another module-level
variable, and that it could include updates from unrelated
sibling paths.)

* Re-arrange slightly to prevent refactor hazard

It should not be possible to perform any work on a root without
calling `ensureRootIsScheduled` before exiting. Otherwise, we could
fail to schedule a callback for pending work and the app could freeze.

To help prevent a future refactor from introducing such a bug, this
change makes it so that `renderRoot` is always wrapped in try-finally,
and the `finally` block calls `ensureRootIsScheduled`.

* Remove recursive calls to `renderRoot`.

There are a few leftover cases where `renderRoot` is called recursively.
All of them are related to synchronously flushing work before its
expiration time.

We can remove these calls by tracking the last expired level on the
root, similar to what we do for other types of pending work, like pings.

* Remove argument from performSyncWorkOnRoot

Read the expiration time from the root, like we do
in performConcurrentWorkOnRoot.",Andrew Clark,2019-09-12T21:21:57Z
4b0b556dcf6f84c3e4a4e2a9dd0426c3430d1c86,[react-interactions] Refactor TabFocusController (#16768),Dominic Gannaway,2019-09-12T20:28:07Z
fb39f62925b26bd3d1d0469a7ba698f2818eb14c,Added upcoming changes to DevTools CHANGELOG,Brian Vaughn,2019-09-12T15:34:28Z
ba932a5ad953d7cb36bca273cfeab7eac5700f82,"fix: inspect ClassComponent.render instead of constructor, fixes #16749 (#16759)",Anton Korzunov,2019-09-12T15:32:42Z
35a202d0e7d7c4ef3c0768cb85ac5e17b6eb03b3,[react-events] Ensure we restore currentInstance + currentTimers (#16758),Dominic Gannaway,2019-09-12T10:44:05Z
3717c25a7e392fa7a9fceb1890ed354c94e05e70,[react-interactions] More Tab Focus control handling (#16751),Dominic Gannaway,2019-09-11T20:35:33Z
0a2215cc0e3067087ff29644f4c50ee1fc69984b,"[Scheduler][www] Put profiling feature behind flag (#16757)

Our infra currently doesn't support loading a separate profiling
build of Scheduler. Until that's fixed, the recommendation is to load
a single build and gate the profiling feature behind a flag.

Alternative to #16659",Andrew Clark,2019-09-11T20:28:03Z
8f03109cd269d23999f63644ab50b612de66560e,"Moved backend injection to the content script (#16752)

* Moved backend injection logic to content script

* Moved backend injection logic to content script

* Moved injection logic to content script

* Formatting changes

* remove ability to inject arbitrary scripts

* Removed done(), added some comments explaining the change

* Lint fixes

* Moved inline comment.

* Deleted inject() script since it was no longer being used",Brian Vaughn,2019-09-11T16:51:32Z
efa780d0abfd2d247a863ade0bd41f31ba2c6c9f,Removed DT inject() script since it's no longer being used,Brian Vaughn,2019-09-11T16:51:24Z
4290967d4c012fcbab4bf73102340fc3a4bbe3f2,Merge branch 'tt-compat' of https://github.com/onionymous/react into onionymous-tt-compat,Brian Vaughn,2019-09-11T16:34:31Z
f09854a9e85cb612f26172f6ea1dea0b3de45aec,Moved inline comment.,Brian Vaughn,2019-09-11T16:30:57Z
776d1c69b91aafe59027fbf51b8a07d8c7596e78,Lint fixes,Stephanie Ding,2019-09-11T15:11:14Z
3a49dff386ad99ccea320334ba631899bab25e62,[react-events] Use context.objectAssign in Tap responder (#16748),Dominic Gannaway,2019-09-11T15:06:40Z
2e75000f404ec7810fac03420b2e2cf215baa69d,"Removed done(), added some comments explaining the change",Stephanie Ding,2019-09-11T15:05:27Z
56114a4b22fee198e9a8a114b8f3c7790acdb541,Change `trackedTouchCount` console.error to warn (#16750),Matt Kane,2019-09-11T12:10:26Z
ae724be7becd26f924b3888959b3e84b78a7e34d,[react-interactions] Add TabFocusContainer and TabbableScope UI components (#16732),Dominic Gannaway,2019-09-11T10:46:41Z
ab4951fc03750a726e412b90126e0737fbd04014,"Re-arrange slightly to prevent refactor hazard (#16743)

* Track ""pending"" and ""suspended"" ranges

A FiberRoot can have pending work at many distinct priorities. (Note: we
refer to these levels as ""expiration times"" to distinguish the concept
from Scheduler's notion of priority levels, which represent broad
categories of work. React expiration times are more granualar. They're
more like a concurrent thread ID, which also happens to correspond to a
moment on a timeline. It's an overloaded concept and I'm handwaving over
some of the details.)

Given a root, there's no convenient way to read all the pending levels
in the entire tree, i.e. there's no single queue-like structure that
tracks all the levels, because that granularity of information is not
needed by our algorithms. Instead we track the subset of information
that we actually need — most importantly, the highest priority level
that exists in the entire tree.

Aside from that, the other information we track includes the range of
pending levels that are known to be suspended, and therefore should not
be worked on.

This is a refactor of how that information is tracked, and what each
field represents:

- A *pending* level is work that is unfinished, or not yet committed.
  This includes work that is suspended from committing.
  `firstPendingTime` and `lastPendingTime` represent the range of
  pending work. (Previously, ""pending"" was the same as ""not suspended."")
- A *suspended* level is work that did not complete because data was
  missing. `firstSuspendedTime` and `lastSuspendedTime` represent the
  range of suspended work. It is a subset of the pending range. (These
  fields are new to this commit.)
- `nextAfterSuspendedTime` represents the next known level that comes
  after the suspended range.

This commit doesn't change much in terms of observable behavior. The one
change is that, when a level is suspended, React will continue working
on the next known level instead of jumping straight to the last pending
level. Subsequent commits will use this new structure for a more
substantial refactor for how tasks are scheduled per root.

* Get next expiration time from FiberRoot

Given a FiberRoot, we should be able to determine the next expiration
time that needs to be worked on, taking into account the levels that
are pending, suspended, pinged, and so on.

This removes the `expirationTime` argument from
`scheduleCallbackForRoot`, and renames it to `ensureRootIsScheduled` to
reflect the new signature. The expiration time is instead read from the
root using a new function, `getNextExpirationTimeToWorkOn`.

The next step will be to remove the `expirationTime` argument from
`renderRoot`, too.

* Don't bind expiration time to render callback

This is a fragile pattern because there's only meant to be a single
task per root, running at a single expiration time. Instead of binding
the expiration time to the render task, or closing over it, we should
determine the correct expiration time to work on using fields we
store on the root object itself.

This removes the ""return a continuation"" pattern from the
`renderRoot` function. Continuation handling is now handled by
the wrapper function, which I've renamed from `runRootCallback` to
`performWorkOnRoot`. That function is merely an entry point to
`renderRoot`, so I've also removed the callback argument.

So to sum up, at at the beginning of each task, `performWorkOnRoot`
determines which expiration time to work on, then calls `renderRoot`.
And before exiting, it checks if it needs to schedule another task.

* Update error recovery test to match new semantics

* Remove `lastPendingTime` field

It's no longer used anywhere

* Restart on update to already suspended root

If the work-in-progress root already suspended with a delay, then the
current render definitely won't finish. We should interrupt the render
and switch to the incoming update.

* Restart on suspend if return path has an update

Similar to the previous commit, if we suspend with a delay, and
something in the return path has a pending update, we should abort
the current render and switch to the update instead.

* Track the next unprocessed level globally

Instead of backtracking the return path. The main advantage over the
backtracking approach is that we don't have to backtrack from the source
fiber. (The main disadvantages are that it requires another module-level
variable, and that it could include updates from unrelated
sibling paths.)

* Re-arrange slightly to prevent refactor hazard

It should not be possible to perform any work on a root without
calling `ensureRootIsScheduled` before exiting. Otherwise, we could
fail to schedule a callback for pending work and the app could freeze.

To help prevent a future refactor from introducing such a bug, this
change makes it so that `renderRoot` is always wrapped in try-finally,
and the `finally` block calls `ensureRootIsScheduled`.

* Remove recursive calls to `renderRoot`.

There are a few leftover cases where `renderRoot` is called recursively.
All of them are related to synchronously flushing work before its
expiration time.

We can remove these calls by tracking the last expired level on the
root, similar to what we do for other types of pending work, like pings.

* Remove argument from performSyncWorkOnRoot

Read the expiration time from the root, like we do
in performConcurrentWorkOnRoot.",Andrew Clark,2019-09-11T03:07:12Z
b0a8a3e04139eecf3ad46266abdab65e5abe60c7,"Mark root as already hydrated after committing (#16739)

* Mark root as already hydrated after committing

* Remove current/child check for hydration and rely on the root flag instead",Sebastian Markbåge,2019-09-11T03:02:02Z
e04f4259c4c2063038c47e0364f4d7ac71236bc0,"Handle SuspenseListComponent getting retried (#16745)

This happens for example when a deleted boundary transfers its pending
promises to the list so that the list can be retried.

This wasn't caught by unit tests because this flag wasn't on in those
tests.",Sebastian Markbåge,2019-09-11T02:38:44Z
8a6cd3cd12932e5c6dfea9529c8cbafb9be46445,remove ability to inject arbitrary scripts,Stephanie Ding,2019-09-11T01:06:23Z
d51f062d039b9c3d37ff936574096e456e1cc7ef,Formatting changes,Stephanie Ding,2019-09-11T00:46:29Z
85c7211014a1364fef8d0c3da512ddf63fb408e8,Moved injection logic to content script,Stephanie Ding,2019-09-11T00:45:27Z
788036c7ed51fa2a7fc021bbe3807762072dee33,Moved backend injection logic to content script,Stephanie Ding,2019-09-11T00:34:12Z
c93038fabe08f7dc26b1a301ed4518a3bc64102f,Moved backend injection logic to content script,Stephanie Ding,2019-09-11T00:22:04Z
2c98af77c3633e10ce38f4592718eb08096ceecf,"DevTools: Props editing interface tweaks (#16740)

* Fix DevTools new prop input size
* Don't allow adding new values unless an overridePropsFn function has been provided.
* Do not show empty 'none' label ablve a new prop input",Brian Vaughn,2019-09-10T21:57:33Z
2ce5801c25235b198d99393c193a721547eaefac,Added upcoming changes to DevTools CHANGELOG,Brian Vaughn,2019-09-10T20:32:53Z
709baf1fecdbc8982aa70957a7bd620a929cea68,"[DevTools] Support for adding props | Improved state/props value editing  (#16700)

* Extracted sanitizeForParse

* Added canAddEntries flag to InspectedElementTree

* Added EditableKey component.

* Added support to add an additional entry.

* Added support to add more complex data structures in the EditableValue component. Added support to change the dataType of the value that is being changed.

* Fixed flow error.

* Removed unneeded fragment.

* Renamed EditableKey -> EditableName

* Removed unneeded dependency

* Removed problematic props to state hook.

* Prettified changes.

* Removed unused import.

* Fixed shouldStringify check.

* Removed testing props from EditableProps.

* Made some inline tweaks",Hristo Kanchev,2019-09-10T20:30:43Z
4ef6387d6e79e87c3ebc11a53847fd26ad5e71d9,"[DevTools] [Context] Legacy Context (#16617)

* Added hasLegacyContext check.

* Passed hasLegacyContext as prop to SelectedElement

* Changing context labels based on hasLegacyContext

* Fixed flow types.

* Fixed typos.

* Added tests for hasLegacyContext.

* Renamed test.

* Removed test imports.",Hristo Kanchev,2019-09-10T20:30:20Z
c317fc273b6fbe03e30971f7dd5690e540f6a029,"Correct link for troubleshooting react-dev-tools (#16690) (#16708)

* Correct link for troubleshooting react-dev-tools (#16690)

As pointed out in #16690 - the link for 'React Tab Doesn't Show Up' points to the empty README.MD.
This points it to that section in the v3 version README.MD - until an updated section will be added to the new dev-tools.

* Add a ""The React Tab Doesn't Show Up"" section

Add the troubleshooting section to the react dev tools readme

* point to the correct section in react-dev-tools readme

After adding the troubleshooting section to the readme - this will point to the correct place

* Moved README file to GitHub

* Update new issue link to include DevTools label",Liad Yosef,2019-09-10T20:14:19Z
41a78cd85c461d2f029c1863614c73a28faabade,"[react-events] Tap: add maximumDistance prop (#16689)

A prop for configuring the maximum distance that the active pointer can move before the tap is cancelled.",Nicolas Gallagher,2019-09-10T19:52:43Z
240040078885767544ddb650ab06d24756e5ee1e,react-refresh@0.4.2,Dan Abramov,2019-09-10T19:46:34Z
ba6bb0fccf21d6b2c6eeb7a6e1036b0071711c2c,[Fresh] Hash signatures (#16738),Dan Abramov,2019-09-10T19:28:13Z
fd3e8cb0aea97d7945350b434af3e79f4493c98e,[react-events] Remove stopPropagation (Press) + use document for delegation (#16730),Dominic Gannaway,2019-09-10T18:31:24Z
38c03ce00643c02f61bee69fec16459cea01af04,Fix typo in commet (#16727),Heaven,2019-09-10T17:27:38Z
4905590e1e9f9798804d71da14a45084880edbb4,Fixed font family issue in FF. (#16701),Hristo Kanchev,2019-09-09T23:21:04Z
35f447ddbf652091ce98f102bedc71a054a638f6,Remove console.log from copyWithSet (#16716),Daniel Lo Nigro,2019-09-09T23:18:09Z
440cbf2ee57420bd36ef90aaae19e6542614677a,"Let's schedule the passive effects even earlier (#16714)

It turns out I needed to schedule mine in the mutation phase and there
are also clean up life-cycles there.",Sebastian Markbåge,2019-09-09T22:06:03Z
cc2492ccf14ebc20b2a05ff6806a42b6107e2154,Schedule passive callbacks before layout effects are invoked (#16713),Sebastian Markbåge,2019-09-09T20:34:57Z
031eba789f0548838cf876b7c497f88aecec86f7,"[react-events] Tap: change order of events (#16694)

Before:

start -> change -> update -> end (cancel) -> change

Now:

start -> change -> update -> change -> end (cancel)",Nicolas Gallagher,2019-09-09T16:08:17Z
f26fe8c0a7950ebee023e30745203a33ef27deb8,[react-events] Keyboard: fix callback return types (#16693),Nicolas Gallagher,2019-09-09T16:07:42Z
9444c876d5731e55d9b9931cb239a5b7170162d3,Remove wrong copy-paste code in test (#16695),Heaven,2019-09-09T10:34:08Z
b260bef398c4da465a41f6b95bc0cf64deafdfd7,[Fresh] Add skipEnvCheck option to Babel plugin (#16688),Dan Abramov,2019-09-06T19:30:16Z
2f15881859475cee7945eafbc7252244ce240100,react-refresh@0.4.1,Dan Abramov,2019-09-06T19:02:43Z
9044bb0fa3c60ffe723034486b02168bdf63f786,[Fresh] Fix a crash with implicit arrow return (#16687),Dan Abramov,2019-09-06T18:58:07Z
21d79ce04066ade1098a7ae8990e596e01332a65,"Add FreshRuntime WWW bundle, remove ESLint (#16684)",Dan Abramov,2019-09-06T15:48:07Z
206d61f72214e8ae5b935f0bf8628491cb7f0797,fix typos on react-devtools comments (#16681),Alex Rohleder,2019-09-06T14:47:44Z
61836fba2a5446c25aa223d2a8b3939cc90c6d03,Fix typo: wnless -> unless (#16680),Heaven,2019-09-06T14:47:35Z
e11bf42ceac5bb5ef0d7c98d0d075048c94352dd,"Check for Suspense boundary in a root Container (#16673)

If we find a Container that might mean that we're on a node that is inside
a Suspense boundary that is directly inside the Container root.

Imagine the div is a Container and the span is a dehydrated instance:

```
<div>
  <!--$-->
  <span />
  <!--/$-->
</div>
```

There's no way to tests this yet since I'm not actually utilizing
the return value yet.

The solution is to just use the same path to check for a Suspense boundary
as if we find a parent instance.",Sebastian Markbåge,2019-09-05T23:06:05Z
962dfc2c33710b880d90ba8db4f531040077d48e,Remove experimental scheduler flags (#16672),Dan Abramov,2019-09-05T19:08:06Z
ff006451ad792ed26793691402bf7b5f813205f7,"[react-events] Fix isTargetWithinNode type (#16671)

isTargetWithinNode passes the childTarget to getClosestInstanceFromNode which
does not account for a null value of 'node'.",Nicolas Gallagher,2019-09-05T18:36:31Z
040ca0fad7296fcc1fb9a01ebdb169fb32e1bc32,Enable MessageLoop implementation by default (#16408),Dan Abramov,2019-09-05T18:25:51Z
d96f478f8a79da3125f6842c16efbc2ae8bcd3bf,"use-subscription tearing fix (#16623)

* Add (failing) subscription tearing test and bugfix
* Added more inline comments to test
* Simplified tearing test case slightly",Brian Vaughn,2019-09-05T18:12:46Z
79e46b67784623f42186f69baa233e5854a8408f,updated flags from false to dicated on www (#16647),Luna Ruan,2019-09-05T16:51:44Z
8d7c733f1fdad55d0f10947931b378edc5e039ad,"[Partial Hydration] Don't invoke listeners on parent of dehydrated event target (#16591)

* Don't invoke listeners on parent of dehydrated event target

* Move Suspense boundary check to getClosestInstanceFromNode

Now getClosestInstanceFromNode can return either a host component,
host text component or suspense component when the suspense
component is dehydrated.

We then use that to ignore events on a suspense component.

* Attach the HostRoot fiber to the DOM container

This lets us detect if an event happens on this root's subtree before it
has rendered something.

* Add todo

The approach of checking isFiberMounted answers if we might be in an
in-progress hydration but it doesn't answer which root or boundary
might be in-progress so we don't know what to wait for.

This needs some refactoring.

* Refactor isFiberMountedImpl to getNearestMountedFiber

We'll need the nearest boundary for event replaying so this prepares for
that.

This surfaced an issue that we attach Hydrating tag on the root but normally
this (and Placement) is attached on the child. This surfaced an issue
that this can lead to both Placement and Hydrating effects which is not
supported so we need to ensure that we only ever use one or the other.

* Add todo for bug I spotted

* Cache tags

* Check the ContainerInstanceKey before the InstanceKey

The container is inside the instance, so we must find it before the
instance, since otherwise we'll miss it.",Sebastian Markbåge,2019-09-05T15:51:31Z
9ce8711d5a7c84e71587c75d2935966023ee6dbb,"[react-events] Tap responder (#16628)

This is a partial replacement for the 'Press' responder:

1. `useTap` is scoped to pointers (no keyboard support). Our current thinking is
that ""responders"" should be limited to working with pointers, and that they can
be combined with 'useKeyboard' in user-space. For example, we might create a
'usePress' hook in user-space that combines 'useTap' with 'useKeyboard' to react
to both pointers and keyboard interactions.

2. `useTap` cancels the gesture once the pointer moves over an element that is
not within the responder target's subtree. This differs from `usePress` (and
React Native), where the gesture remains active after the pointer exits the
target's subtree and is restarted once the pointer reenters. One of the
drawbacks with the `usePress` behavior is that it requires repeatedly measuring
DOM elements (which can cause jank) to perform hit region tests. `useTap` avoids
doing this and relies on `document.elementFromPoint` only to support the
TouchEvent fallbacks.

3. `useTap` calls `onTapUpdate` when the active gesture's state changes,
`onTapEnd` when the gesture successfully completes. and `onTapCancel` when it
fails. There is no `onTap` callback. `usePress` did not explicitly report back
when the gesture failed, and product developers were confused about the
difference between `onPress` and `onPressEnd`.

4. `useTap` explicitly separates the PointerEvent implementation from the
MouseEvent/TouchEvent fallback.

5. `useTap` has better unit test coverage . All pointer types and the fallback
environment are tested. The shape of the gesture state object is also defined
and tested.",Nicolas Gallagher,2019-09-05T00:09:33Z
e86146e714bb98e973404350069915bf2760a1bd,[react-events] Refine executeUserEventHandler (#16662),Dominic Gannaway,2019-09-04T23:36:29Z
c66edb9f8b6baba71df4c21908829f805e57c0b1,[react-events] Refactor getCurrentTarget to getResponderNode (#16660),Dominic Gannaway,2019-09-04T19:04:35Z
9ff60ff16b289a9efce46e21fe223aec1638b5d6,[react-events] Fix Scope listener issue (#16658),Dominic Gannaway,2019-09-04T17:57:39Z
7126a37bf4284a30377e08b2ef84f61b64fdb8cd,[react-events] Keyboard responder propagation handling (#16657),Dominic Gannaway,2019-09-04T17:25:05Z
539640d89f327743f2872098ec8aad08ab3a4dfd,[react-events] Various core tweaks for event responder system (#16654),Dominic Gannaway,2019-09-04T17:05:56Z
af032764a9f244633eb7ff1a3205d2ec6073b501,[react-events] Adds preventKeys support to Keyboard responder (#16642),Dominic Gannaway,2019-09-04T00:38:36Z
f705e2bac7582b2114f381f14546ff6ca02436b9,Updated pending CHANGELOG for DevTools,Brian Vaughn,2019-09-03T15:37:12Z
77bb1023986225a12aaa1b45b85703df5deaf95a,"[DevTools] [Profiler]: Save profile now working in Firefox (#16612)

* Added anchor dom element in order to successfully download profiling data.
* Reworked downloadFile to accept a DOMElement in order for FF to successfully download profiling data.
* Prettify downloadFile changes.",Hristo Kanchev,2019-09-03T15:35:12Z
92f094d86d22afa77407a693681d7725e2540225,fix typo: oncurrent - concurrent (#16633),Heaven,2019-09-02T10:21:48Z
46f912fd57604bd3c3949b5e8d6cc30a843ab1b9,[react-core] Add more support for experimental React Scope API (#16621),Dominic Gannaway,2019-08-30T17:27:14Z
2c1e6bf619e404fd1ac464eb35eff4c09b3861b3,"Adopt Contributor Covenant (#16613)

In order to foster healthy open source communities, we're adopting the
[Contributor Covenant](https://www.contributor-covenant.org/). It has been
built by open source community members and represents a shared understanding of
what is expected from a healthy community.",Paul O’Shannessy,2019-08-29T23:04:47Z
f962feb882cfbd2ebe69d472fcaa391bdfd2b110,Updated extensions build-from-source instructions in README,Brian Vaughn,2019-08-29T15:49:08Z
ac6193687fa09d9139dfebf75a77f2c02e7ebf2b,add integrity field in yarn.lock (#16601),Simen Bekkhus,2019-08-29T15:36:02Z
16329bd9543d894b7d1595df23351fbfa7022b25,chore: Update nvmrc with latest lts (#16610),Sebastian Silbermann,2019-08-29T15:30:35Z
4e544cffee19e9403753bdafa35e70db06d4190a,[react-events] Split out mixed event responder tests (#16608),Dominic Gannaway,2019-08-29T15:13:37Z
f61138e0681f729c43cf755f48f060e6262a09eb,Use renderToStaticMarkup for tests (#16516),Gerald Monaco,2019-08-29T15:08:38Z
980112b146a4d4bd8178ef559baa12f8abc73027,rephrase comment (#16559),James George,2019-08-29T13:51:07Z
8a7c2e50f1885d514686071f52ec98b68473cf8b,Remove duplicate character in regex group (#16572),Bas Peeters,2019-08-29T13:49:27Z
557d472fe3d48f3c5e92116e614e83a415e21f18,"add <thead>, <tfoot> to table > tr warning (#16535)",Tom Quirk,2019-08-29T13:46:27Z
37fcd04681c687bea7f37b0fed673b0802a0e612,chore: upgrade to danger 9 (#16602),Simen Bekkhus,2019-08-29T12:46:53Z
bd79be9b687156067416ffe5219e49a11bd0f1e7,[react-core] Add experimental React Scope component API (#16587),Dominic Gannaway,2019-08-29T11:06:51Z
996acf9036b8fcf39cca8dc63102d677d529afe2,Updated DevTools extension build script to work when run remotely (#16603),Brian Vaughn,2019-08-29T00:01:26Z
34aaec6f908e85d56cbc510677bc1c85d87aa57b,[react-events] Ensure screen reader virtual clicks support preventDefault (#16600),Dominic Gannaway,2019-08-28T16:39:07Z
01fb68b9bf680ab8bbf96e86501e0fc540b3cc97,Don't ignore dependencies for render phase update (#16574),Dan Abramov,2019-08-28T15:55:56Z
1b585f630b613a5819a2c5e2256e8b575259ca21,Fix link on error-codes/README.md (#16595),LEE SUK JAE,2019-08-28T14:49:45Z
0f3e82f3c4911335f326ff45091eef76f9bb9297,Merge branch 'devtools-v4-merge',Brian Vaughn,2019-08-28T14:39:49Z
b8390310b14cce89fd26df83f969505b5f129f10,"Revert ""Import React DevTools v4""

This reverts commit b438699d3620bff236282b049204e1221b3689e9.",Brian Vaughn,2019-08-28T14:39:32Z
b438699d3620bff236282b049204e1221b3689e9,"Import React DevTools v4

Imports the entire React DevTools v4 git repository (with history).",Brian Vaughn,2019-08-28T14:35:53Z
ada599142291432adcce16416e6f230680049167,Removed an unnecessary/unused DT Flow type,Brian Vaughn,2019-08-28T14:28:06Z
08ce280cbcfa8553c1bd80eeb942027b37f0b7c6,Updated DT regression fixture path,Brian Vaughn,2019-08-28T14:25:52Z
b034ac6d382c301a9d47992e6ad04065a9217d03,Merge branch 'master' into devtools-v4-merge,Brian Vaughn,2019-08-28T14:13:49Z
f5125377543749a4cee6ac887a006b6567767862,"Babel Transform JSX to React.jsx/React.jsxDEV Plugin (#16432)

This babel transform is a fork of the @babel/plugin-transform-react-jsx transform and is for experimentation purposes only. We don't plan to own this code in the future, and we will upstream this to Babel at some point once we've proven out the concept.

As per the RFC to simplify element creation, we want to change the JSX transform from targeting React.createElement(type, props, children) to React.jsx(type, props, key). This modifies the existing @babel/plugin-transform-react-jsx (and helper) babel plugin to support React.jsx and React.jsxDEV.

The main differences between React.jsx/React.jsxDEV and React.createElement are:
1.) key is now passed as an explicit argument rather than through props
3.) children are now passed through props rather than as an explicit argument
4.) props must always be an object
5.) __source and and __self are now passed as separate arguments into React.jsxDEV rather than through props

Part of the rationale for this change is that we want to deprecate key spread through props because this is an expensive dynamic comparison operation. We want users instead always explicitly pass key as a prop. However, in the interim, we need a way to distinguish between <div {...props} key={foo} /> and <div key={foo} {...props} />. Therefore, until we completely deprecate key spreading, we will use React.createElement to transform <div {...props} key=""Hi"" /> and React.jsx to transform everything else.",Luna Ruan,2019-08-27T23:00:20Z
cb15f18dc1a3a28e67c8fe1101e55b5033d12e96,"[react-events] Improve mock event object accuracy (#16590)

* Better simulation for pointercancel
* Fix pressure values for different pointers
* Add describe/test helpers for pointer events",Nicolas Gallagher,2019-08-27T22:45:54Z
bc8b15332b5f10a96135a5e3527833fb7cc8efeb,"Updated README docs, example screenshots, etc",Brian Vaughn,2019-08-27T22:20:34Z
7153dd516f080a62d3f20024c252869b52678c36,Fixed a StyleEditor variable resolution regression,Brian Vaughn,2019-08-27T19:53:38Z
33d439f8fd7c899ac315edc18fe316de84806778,Merge branch 'master' into devtools-v4-merge,Brian Vaughn,2019-08-27T18:00:41Z
fb316787cbefff7a864beb8268dc395fec535ebb,Removed unused Chrome Flow types,Brian Vaughn,2019-08-27T17:54:21Z
8e1434e80e203ebd2cd066772d68f121808c83aa,Added FB copyright header,Brian Vaughn,2019-08-27T17:54:01Z
49b0f87d10a2fab056c29f24228acf3ce2bcc26b,Suppress act/renderer warning for DevTools tests,Brian Vaughn,2019-08-27T17:46:27Z
8c684bf7e19d6942eb9adb9d16aefe5dc8491bfa,Removed forked DevTools Flow types,Brian Vaughn,2019-08-27T17:42:02Z
9a016c0c2b8e21b43085bf8c282d1a7ec3ee8778,Removed outdated snapshot,Brian Vaughn,2019-08-27T17:31:36Z
f55b4f8e28053eacde8e11325d99779783abec1c,CI runs DevTools tests against built source,Brian Vaughn,2019-08-27T17:28:58Z
4ef269606c691f9b8c833f18d75342b34ef021db,[react-events] Support screen reader virtual clicks (#16584),Dominic Gannaway,2019-08-27T16:32:50Z
892ca8137eea69198c3f5b75cfeb375a4aebce53,Disabled DevTools tests from yarn-build target,Brian Vaughn,2019-08-27T16:08:49Z
896c993ada2875997a0f090e76992eb3c550d973,Fixed remaining DevTools broken tests by fixing a hydration/spread bug,Brian Vaughn,2019-08-27T15:50:36Z
e3cc42be97d65abeb3f5907320c88f457265f459,Fix Console patching test by resetting modules,Brian Vaughn,2019-08-26T20:53:29Z
177f357d9da5b21050ddd92084a6f0ce67c09e03,Updated DevTools test setup to no longer mock test renerer,Brian Vaughn,2019-08-26T20:46:00Z
a48593a8d36f5e1c26d0d98b6ceae77642aed5cb,Iterating on DevTools tests: Trying to run tests against pre-build react-dom and react-test-renderers,Brian Vaughn,2019-08-26T20:43:09Z
ee4806f47ae594ea20b5296dd913ed67d7809b86,Fixed flushing problem with tests,Brian Vaughn,2019-08-26T20:08:35Z
9d4fd7a24991598aa2fcaec203dbba5c04d253d1,Merged changes from 4.0.5 -> 4.0.6 from DevTools fork,Brian Vaughn,2019-08-26T17:12:18Z
4c1514495bf77acad2677b9944726e512691150e,Merge branch 'source' of github.com:bvaughn/react-devtools-experimental,Brian Vaughn,2019-08-26T17:06:00Z
13a93e7b82119d60532e3d7c8273c90764ec4bae,Configured CI to run DevTools tests. Updated other test configs not to include DevTools tests.,Brian Vaughn,2019-08-26T16:58:28Z
c00a920640d5855888c4aec645e7e58de82cb65c,Merge branch 'master' into devtools-v4-merge,Brian Vaughn,2019-08-26T16:42:25Z
0da7bd0604a5be7f96572b9f75d16fef5674bc5d,React DevTools CHANGELOG entry for 4.0.6,Brian Vaughn,2019-08-26T16:34:06Z
a39d9c3dff451c5280dded9418a627f37871b94b,4.0.5 -> 4.0.6,Brian Vaughn,2019-08-26T15:42:38Z
1e3b0b520e1d77ed3926ac9e41bea3a5c7309cad,Added a null check around memoizedProps,Brian Vaughn,2019-08-24T16:04:26Z
84b492f344b16ad37ada3c480c61ceb4b49ae0ff,Polyfill Symbol usage,Brian Vaughn,2019-08-23T23:38:45Z
fc807720780962729df2ad1b0f53258603c020c7,[react-events] Ensure updateEventListeners updates in commit phase (#16540),Dominic Gannaway,2019-08-22T22:58:16Z
0f6e3cd61cf4a5a1491bb3c92780936aebc2a146,"[Scheduler] Profiler Features (second try) (#16542)

* Revert ""Revert ""[Scheduler] Profiling features (#16145)"" (#16392)""

This reverts commit 4ba1412305be3c77b625a70e3c0b9a8638626bd0.

* Fix copy paste mistake

* Remove init path dependency on ArrayBuffer

* Add a regression test for cancelling multiple tasks

* Prevent deopt from adding isQueued later

* Remove pop() calls that were added for profiling

* Verify that Suspend/Unsuspend events match up in tests

This currently breaks tests.

* Treat Suspend and Resume as exiting and entering work loop

Their definitions used to be more fuzzy. For example, Suspend didn't always fire on exit, and sometimes fired when we did _not_ exit (such as at task enqueue).

I chatted to Boone, and he's saying treating Suspend and Resume as strictly exiting and entering the loop is fine for their use case.

* Revert ""Prevent deopt from adding isQueued later""

This reverts commit 9c30b0b695d81e9c43b296ab93d895e4416ef713.

Unnecessary because GCC

* Start counter with 1

* Group exports into unstable_Profiling namespace

* No catch in PROD codepath

* No label TODO

* No null checks",Dan Abramov,2019-08-22T20:58:12Z
474b650cac72c9a251fa4a9f8d8d121dff067970,"[react-events] Rename hook exports (#16533)

For example, 'useHoverResponder' becomes 'useHover'",Nicolas Gallagher,2019-08-22T20:30:35Z
2f03aa6eed14ae30e586b77e40b2da9ea5e6facc,"[react-events] Fix middle-click for Press (#16546)

Browsers always report 'buttons' as 0 when a pointer is released.",Nicolas Gallagher,2019-08-22T17:22:14Z
16c34086380fc4e4ff20fca1ed27e9e35bd98299,Only warn in case the fourth argument is a function (#16543),Bruno Scopelliti,2019-08-22T16:31:27Z
05f5192e8106d006cc3189ae68c523ca123ae297,"[Partial Hydration] Dispatching events should not work until hydration commits (#16532)

* Refactor a bit to use less property access

* Add test for invoking an event before mount

* Add Hydration effect tag

This is equivalent to a ""Placement"" effect in that it's a new insertion
to the tree but it doesn't need an actual mutation.

It is only used to determine if a subtree has actually mounted yet.

* Use the Hydration flag for Roots

Previous roots had a Placement flag on them as a hack for this case but
since we have a special flag for it now, we can just use that.

* Add Flare test",Sebastian Markbåge,2019-08-22T15:46:20Z
bf9415834f0bf1809cae5d59e2195e2cc1dfdccf,Fixed outdated extension popup wording,Brian Vaughn,2019-08-21T21:28:57Z
6dda81610276b50dcd626e5a9090fe596c8f595c,"Remove emoji prefix from Firefox extension tab labels

Firefox adds these already for React, so the extra emoji character was confusing. For now, we still prepend it for Chrome",Brian Vaughn,2019-08-21T21:23:51Z
79bda69d88ebff9dfc9eeb4640531b8a42842eef,Renamed DevTools Jest config to be more concistent with others,Brian Vaughn,2019-08-21T20:40:24Z
8a01b50fc316761ebc3250d7b3c46c01482ef06c,eslint-plugin-react-hooks@2.0.1,Dan Abramov,2019-08-21T19:48:15Z
3ed289b3b1286007e3f594b0b767b3b64bf3f86c,Clear canceled task node early (#16403),Dan Abramov,2019-08-21T18:49:22Z
06728290533bce24b0893461c3f4ddc1547f85b4,Bump ESLint plugin to 2.0 (#16528),Dan Abramov,2019-08-21T18:14:34Z
2559111c21a4bb18ab6ade5e464cb42863e9e8b3,"[react-events] Rely on 'buttons' rather than 'button' (#16479)

The semantics of 'button' on events differs between PointerEvent and
MouseEvent, whereas they are the same for 'buttons'. Furthermore, 'buttons'
allows developers to determine when multiple buttons are pressed as the same
time.

https://w3c.github.io/pointerevents/#the-button-property",Nicolas Gallagher,2019-08-21T17:07:15Z
c433fbb593c7f42263c0209d3ff421aea59fca4c,"Revert ""Revert ""[ESLint] Forbid top-level use*() calls (#16455)"""" (#16525)

* Revert ""Revert ""[ESLint] Forbid top-level use*() calls (#16455)"" (#16522)""

This reverts commit 507f0fb372705c4c6ac5288db3651019b1d0927b.

* Update RulesOfHooks.js",Dan Abramov,2019-08-21T14:43:31Z
507f0fb372705c4c6ac5288db3651019b1d0927b,"Revert ""[ESLint] Forbid top-level use*() calls (#16455)"" (#16522)

This reverts commit 96eb703bbff49b7d52ad7d41ea18074dc8e7857a.",Sunil Pai,2019-08-21T09:20:34Z
66c9fedc34614bd95cba342e07b7ff6cddf2e5e6,Flow fixes,Brian Vaughn,2019-08-20T20:33:33Z
fe943c339d13cb0cd279a5dc907707c96fa3a74c,Add custom DevTools Flow definitions to shared flowconfig,Brian Vaughn,2019-08-20T18:37:45Z
2e549efae586c1c4426b1c43cc917c6f1c733205,Moved DevTools custom Flow definitions,Brian Vaughn,2019-08-20T18:37:31Z
4da836af71f035a25c26814e7f6aa04e0535f4af,Merged changes from 4.0.0 -> 4.0.5 from DevTools fork,Brian Vaughn,2019-08-20T18:34:51Z
3ad50710a769838c9ae9c2d1669c5981e7639092,Merge branch 'source' of github.com:bvaughn/react-devtools-experimental,Brian Vaughn,2019-08-20T18:00:02Z
833f20634868961f4786879ee18d94b06971f05f,Merge branch 'master' into devtools-v4-merge,Brian Vaughn,2019-08-20T17:41:38Z
efa5dbe7a57c2e761bae90e07391f43ce7c01132,"Update CHANGELOG.md (#16439)

* Update CHANGELOG.md

Fixed typo",bbolek,2019-08-20T16:51:01Z
da0a47bec3c13bd93793811155de00730d2e27ae,fix typo in CHNAGELOG.md (#16447),Heaven,2019-08-20T16:48:03Z
69aafbf4dfaab408cd862b10dcea29e6ef0b7bd9,Fix spelling in react-devtools CHANGELOG.md (#16448),Morgan McCauley,2019-08-20T16:47:18Z
2843a1556e778c363757653ad74390d0660b9aba,Fixed invalid object-assign version (4.0.4 -> 4.0.1),Brian Vaughn,2019-08-20T16:45:09Z
aa56fe34ac40694f422ac8bc42e4d3c5b7efd813,Improved GitHub issue repro instructions prompt,Brian Vaughn,2019-08-20T16:44:41Z
c80678c7606b1895573c23182bfb9a418e2ad31e,"Add ""hydrationOptions"" behind the enableSuspenseCallback flag (#16434)

This gets invoked when a boundary is either hydrated or if it is deleted
because it updated or got deleted before it mounted.",Sebastian Markbåge,2019-08-19T20:26:39Z
2d68bd09603fc54d927240003810db9aa6f2e3e5,"Fix message loop behavior when host callback is cancelled (#16407)

* Add a regression test for cancelCallback with message loop

* If there's nothing scheduled, we're not running

* Add more tests from #16271",Dan Abramov,2019-08-19T20:20:21Z
96eb703bbff49b7d52ad7d41ea18074dc8e7857a,"[ESLint] Forbid top-level use*() calls (#16455)

* Add a way to skip/only tests to RulesOfHooks test

* [ESLint] Forbid top-level use*() calls

* Add a regression test for logical expressions

This is not a change. Just adding more coverage.",Dan Abramov,2019-08-19T18:54:06Z
56f93a7f38f25284261ee5d287aa32dcb1caf327,"Throw on unhandled SSR suspending (#16460)

* Throw on unhandled SSR suspending

* Add a nicer message when the flag is off

* Tweak internal refinement error message",Dan Abramov,2019-08-19T18:53:02Z
dce430ad92d7ed6be5b934f4263d4a39e068ee29,[Flare] Rework the responder dispatching/batching mechanism (#16334),Dominic Gannaway,2019-08-19T18:22:46Z
6ae6a7c020d9cdee6f881e50304696d817d2c27e,Updated React DevTools changelog for 4.0.5,Brian Vaughn,2019-08-19T16:28:10Z
5441b094a4afe09e48b71ff2e2256b2119aef14b,4.0.4 -> 4.0.5,Brian Vaughn,2019-08-19T16:26:55Z
56d1b0fb5991e954c21609dce80d9849eda115fe,"[react-events] DOM event testing library (#16433)

This patch formalizes the mock native events and event sequences used in unit tests.

The `createEventTarget` function returns an object that can be used to dispatch native event sequences on the target without having to manually do so across all the scenarios we need to account for. Unit tests can be written as if we were only working with PointerEvent, but they will dispatch realistic native event sequences based on the execution environment (e.g., is PointerEvent supported?) and pointer type.

```
describe.each(environments)('Suite', (hasPointerEvents) => {
  beforeEach(() => {
    // setup
  });

  test.each(pointerTypes)('Test', (pointerType) => {
    const target = createEventTarget(node);
    target.pointerdown({pointerType});
    expect(callback).toBeCalled();
  });
});
```

Every native event that is dispatched now includes a complete object by default. The properties of the events can be customized. Properties that shouldn't be relied on in responder implementations are excluded from the mock native events to ensure tests will fail. Equivalent properties are normalized across different event types, e.g., 'pointerId' is converted to 'identifier' before a TouchEvent is dispatched.",Nicolas Gallagher,2019-08-19T16:21:55Z
01b1e7e2cf5cd1fb84318b32a6cb236e6d9b35ef,Alpha-sort props/state/context keys,Brian Vaughn,2019-08-19T16:17:52Z
d2456c75720463eccbf714380adfd050cf804241,Fixed standalone target not properly serving backend over localhost:8097,Brian Vaughn,2019-08-19T14:36:41Z
14c2eab7c3cc086459099f4b7b1cdb971b1d1ee2,Resolved Yarn conflict for object-assign,Brian Vaughn,2019-08-19T14:04:47Z
e89c19d16c5da3f6d57b762f1d5ca88c831fccaf,Added DevTools 4.0.4 CHANGELOG entry,Brian Vaughn,2019-08-18T15:55:49Z
3c6a21946686d4dddd0cacd40334533be87bd403,4.0.3 -> 4.0.4,Brian Vaughn,2019-08-18T15:45:52Z
4697f5b37967b85b2c844044aeebb5b1a740875d,Profiler bugfix for filtering out all commits after selecting a fiber,Brian Vaughn,2019-08-18T15:34:40Z
d97af798d2a295a9e38abfe4a5d6b897adabd39e,Updated DevTools CHANLOGE to add an unreleased change,Brian Vaughn,2019-08-18T04:19:00Z
95ca079556b6aa86b15c3ba98e5b9a302e5fb646,Fixed standalone bug that prevented backend from being served over localhost:8097,Brian Vaughn,2019-08-18T04:11:10Z
21e793fb4fce16b938e549de9277a7fdddff40e8,"Added 4.0.1, 4.0.2, and 4.0.3 changelog entries (#16438)

* Added 4.0.1, 4.0.2, and 4.0.3 changelog entries
* Added entry about Map/Set/Immutable",Brian Vaughn,2019-08-17T18:47:38Z
95ffd3ccf8c0091e5e573a4b94004636275ea265,4.0.2 -> 4.0.3,Brian Vaughn,2019-08-17T18:31:31Z
2935d6a18d0c10343919891e4245ccec126155e1,Unserializable data type fix for standalone shell,Brian Vaughn,2019-08-17T18:31:20Z
ce65df7092ed69b45aa5787b708c1516b2c07427,"Added support for unserializable types (e.g. Set/Map, Immutable)",Brian Vaughn,2019-08-17T17:20:26Z
f66a20f4392b4c861d30b4db080337de470cf57e,Caps lock bug template request for repro steps :),Brian Vaughn,2019-08-16T21:47:55Z
69b2ecc531f24f6e0e0dbbb26844b060d581926b,Added explicit (empty) label next to empty arrays and objects,Brian Vaughn,2019-08-16T20:47:09Z
024bac4263f401f63a92070164ae6a257c7ff890,Support single-quote strings in style editor,Brian Vaughn,2019-08-16T20:35:30Z
74f4a3f97297d121255045c5551ab025fdd441e2,Improved editing props demo experience for TODO list,Brian Vaughn,2019-08-16T20:15:16Z
f61661305964956c29d8ef147e5d1b33b7b701ec,Display hook values for components that only use context,Brian Vaughn,2019-08-16T18:33:28Z
454157dd660f7ed70684a459fff0482bee1d87d1,"Multi-renderer profiling improvements

Add support for mixed v15/v16 renderers that previously caused profiling to fail with 'profiling not supported by this renderer' type errors",Brian Vaughn,2019-08-16T18:25:44Z
49399aa3e770a174cef9dad7690508c5949c52a7,Prettier,Brian Vaughn,2019-08-16T16:05:26Z
5e043adba7ead591959904ade16100c146309396,"Added Set+Map to dev shell, even though we don't support deep inspecting them yet",Brian Vaughn,2019-08-16T16:05:21Z
c1d3f7f1a97adad9441287a92dcd4ac5d2478c38,[DevTools Changelog] Add a note on 4.0.2,Dan Abramov,2019-08-16T15:15:19Z
2bcc6c6d04e302f9c1cd2f724ee2033a999b36b8,4.0.1 -> 4.0.2,Brian Vaughn,2019-08-16T00:35:30Z
527fc4a63f497db1f370a8312807c2a68147edec,Refactored to remove need for new webNavigation permission,Brian Vaughn,2019-08-16T00:34:34Z
c100cc7b31d73d6d5bea3a60d34385fd1d0f31c2,4.0.0 -> 4.0.1,Brian Vaughn,2019-08-15T23:29:13Z
545de6f02e7d8905ba4e1cd358e68bb640a31a0a,Removed some unnecessary manifest permissions,Brian Vaughn,2019-08-15T23:28:10Z
6f86294e686e172fb8da32880f70fa038d644c74,"[DevTools Changelog] Add a note about restoring selection (#16409)

Also a tiny nit, ""inline"" spelling seems more common in this context. My eyes stumbled at it on every read.",Dan Abramov,2019-08-15T22:11:37Z
d0dcbe5594d73b4fc0bf863bb1069d8afad325ec,Changed version name string to show version and date. Moved commit number into description string.,Brian Vaughn,2019-08-15T21:38:16Z
0763c48ed878fde9cd6163f32f9084ead0c93c85,Bumped all versions to 4.0.0,Brian Vaughn,2019-08-15T21:28:09Z
732f3a6ef162b68e298f2949f006ec9506125d67,4.0.0-alpha.9 -> 4.0.0-alpha.10,Brian Vaughn,2019-08-15T18:26:04Z
600c57a9b9f36c8de1d3544bdbadd3babba1bcc7,Added OVERVIEW.md and updated CHANGELOG to point to it (#16405),Brian Vaughn,2019-08-15T18:22:11Z
db9e5c971507e40bdaa41468dde490949c84611f,Updated all GitHub links to point to React repo,Brian Vaughn,2019-08-15T18:17:59Z
9b5985b3c11929f8fc3bf5092d6c94838c7fe3dc,Added release date to DevTools CHANGELOG,Brian Vaughn,2019-08-15T17:40:59Z
ebd1f5ddb0da7e3626b56614e2b5723debadd839,"[react-events] Press: improve test coverage (#16397)

1. Run the tests in both an environment without PointerEvent and one with PointerEvent.
2. Improve test coverage to include both mouse and touch pointers.
3. Change 'Press' so that it only listens to either pointer events or fallbacks events.",Nicolas Gallagher,2019-08-15T17:28:00Z
85fbe3be3fa645734c68992bb0aa9bc756dab9ad,Merge branch 'master' into devtools-v4-merge,Brian Vaughn,2019-08-15T17:14:34Z
a9304e79d467bf9058f4352ddb5450f8a43d4f46,Add DevTools package placeholder package.json,Brian Vaughn,2019-08-15T17:12:27Z
6edff8f5e1c961ff65c182820442525c212216bb,Added CHANGELOG and READMEs for DevTools v4 NPM packages (#16404),Brian Vaughn,2019-08-15T17:06:16Z
7ce229d3b080ce06b9a5c7a5e667474f3255b954,Made some incremental progress on Jest tests,Brian Vaughn,2019-08-15T16:53:22Z
4c4f5fd27fc1d7c16033a1221c9440cd67baace5,"Disable @babel/plugin-transform-block-scoping ""throwIfClosureRequired"" option for tests",Brian Vaughn,2019-08-15T02:04:43Z
41db902ed42d8f61c6c43dc2b038b06be086b6dc,Removed unused __TEST__ files,Brian Vaughn,2019-08-15T02:03:32Z
a6aba5a587e52ae48c8d735d5d9a0413e170e512,Add explicit MIT license file (previously only in package.json),Brian Vaughn,2019-08-15T00:04:05Z
9ec9938ff46d1c4a02035f4bdd79a819b5e9fc97,print-warnings script should ignore DevTools packages,Brian Vaughn,2019-08-14T21:02:12Z
a473dca59eed92e94b8fc60c03dfd389a7b04e13,Merge branch 'master' into devtools-v4-merge,Brian Vaughn,2019-08-14T21:01:46Z
868d02d6c65eb72da9013ab6c00d04a988d3a776,Added better error reporting for print-warnings errors (#16394),Brian Vaughn,2019-08-14T21:01:29Z
4ba1412305be3c77b625a70e3c0b9a8638626bd0,"Revert ""[Scheduler] Profiling features (#16145)"" (#16392)

This reverts commit a34ca7bce69c2f321daef0b8650ad6e7cfce366a.",Dan Abramov,2019-08-14T19:02:41Z
4078167255d00d478bf5156bed74b90b406c1482,Removed (no longer necessary) node->node-events mapping,Brian Vaughn,2019-08-14T18:43:59Z
d7ca8847f547d5a0531c0fef89bef37711acf4f3,Add build-info.json to package files array for non-private DT packages,Brian Vaughn,2019-08-14T18:40:09Z
39209dc5b5fbbc514c63d8f53e2aabc0536bcba8,Update react-devtools-inline to embed react-debug-tools since it's not published yet,Brian Vaughn,2019-08-14T18:37:48Z
45dff31a7583ec0778f294b20b86c702f0bbc2b1,Patched up react-devtools-core Webpack configs,Brian Vaughn,2019-08-14T18:22:28Z
58b39c60db353d758b741e2deaa303c1651d8cf0,Fixed web extensions,Brian Vaughn,2019-08-14T17:33:33Z
30b8ef375610587b8d5714fbfe895ea9c1c9aef0,Iterated on Webpack configs until I got the inline and shell packages seemingly working,Brian Vaughn,2019-08-14T16:24:35Z
44e410900da8ef7b5e7daf18e7a0bf61b6612247,Merged master (with events -> legacy-events package rename),Brian Vaughn,2019-08-14T14:35:49Z
b1a03dfdc8e42d075422556553ffe59868150e95,"Rename legacy ""events"" package to ""legacy-events"" (#16388)

* Renamed 'events' package to 'legacy-events'
* Updated 'events' references to point to 'legacy-events'",Brian Vaughn,2019-08-14T14:32:42Z
9e64bf18e11828d6b4c0363bff5ed2eca1ccd838,"[eslint-plugin-react-hooks] Fixed crash when referencing arguments in arrow functions. (#16356)

* Fixed issue with def being undefined while referencing arguments.

* Removed todo comment.

* Skip exhaustive deps check if def is null.

* Fixed code formatting in ExhaustiveDeps.

* Removed unneeded comment in ExhaustiveDeps.",Hristo Kanchev,2019-08-14T13:44:06Z
e308a037beb6df9851d997ef1c8ea9de103b6adb,"chore: make tests compatible with Jest 24 (#15779)

* chore: make tests compatible with Jest 24

* remove fake rafs

* rollback jsdom for localstorage compat

* Apply suggestions from code review

Co-Authored-By: Sunil Pai <threepointone@oculus.com>

* chore: cleanup lockfile",Simen Bekkhus,2019-08-14T11:32:26Z
5fa99b5aa665073f8c81e2cfec6b49e0b0b1aff0,"chore: add eslint-plugin-jest's valid-expect rule (#16332)

* chore: add eslint-plugin-jest's valid-expect rule

* update assertion",Simen Bekkhus,2019-08-14T10:51:01Z
441d014cefa2a1c98b4ede641f2c358b1b3bb58f,Cleaned up some extnesions build script stuff,Brian Vaughn,2019-08-14T05:15:38Z
380da5fccc68fc8bcebeb128569c82ebef748581,Moved OVERVIEW,Brian Vaughn,2019-08-14T05:09:20Z
b73e293cc5a9aa746b165c844d0ee52e60449270,Moved CHANGELOG,Brian Vaughn,2019-08-14T05:05:45Z
ac2e861fbe05901b874e3ab49807abab820ef648,Fixed a bunch of Lint issues,Brian Vaughn,2019-08-14T04:59:07Z
a34ca7bce69c2f321daef0b8650ad6e7cfce366a,"[Scheduler] Profiling features (#16145)

* [Scheduler] Mark user-timing events

Marks when Scheduler starts and stops running a task. Also marks when
a task is initially scheduled, and when Scheduler is waiting for a
callback, which can't be inferred from a sample-based JavaScript CPU
profile alone.

The plan is to use the user-timing events to build a Scheduler profiler
that shows how the lifetime of tasks interact with each other and
with unscheduled main thread work.

The test suite works by printing an text representation of a
Scheduler flamegraph.

* Expose shared array buffer with profiling info

Array contains

- the priority Scheduler is currently running
- the size of the queue
- the id of the currently running task

* Replace user-timing calls with event log

Events are written to an array buffer using a custom instruction format.
For now, this is only meant to be used during page start up, before the
profiler worker has a chance to start up. Once the worker is ready, call
`stopLoggingProfilerEvents` to return the log up to that point, then
send the array buffer to the worker.

Then switch to the sampling based approach.

* Record the current run ID

Each synchronous block of Scheduler work is given a unique run ID. This
is different than a task ID because a single task will have more than
one run if it yields with a continuation.",Andrew Clark,2019-08-14T02:01:17Z
56636353d8a0bf51c0eee1bbef004c90d6788999,"Partial support for React.lazy() in server renderer. (#16383)

Provides partial support for React.lazy() components from the existing PartialRenderer server-side renderer.

Lazy components which are already resolved (or rejected), perhaps with something like `react-ssr-prepass`, can be continued into synchronously. If they have not yet been initialized, they'll be initialized before checking, opening the possibility to exploit this capability with a babel transform. If they're pending (which will typically be the case for a just initialized async ctor) then the existing invariant continues to be thrown.",Lee Byron,2019-08-14T01:51:20Z
6fbe630549de1ea7d2c34752880459f854c4440d,"[Partial Hydration] Attempt hydration at a higher pri first if props/context changes (#16352)

* Test that we can suspend updates while waiting to hydrate

* Attempt hydration at a higher pri first if props/context changes

* Retrying a dehydrated boundary pings at the earliest forced time

This might quickly become an already expired time.

* Mark the render as delayed if we have to retry

This allows the suspense config to kick in and we can wait for much longer
before we're forced to give up on hydrating.",Sebastian Markbåge,2019-08-14T01:26:21Z
51626ae2f9526ef11477fdd7e1ea3f2f6ce4b37b,Prettier,Brian Vaughn,2019-08-14T01:12:19Z
f7afe1b8641a383faacacb55b61a40e82f85d740,Moved shell fixture into packages/react-devtools-shell,Brian Vaughn,2019-08-14T01:11:59Z
183f96f2ac35c36772781cb37bc3ce842e2dc78b,Prettier,Brian Vaughn,2019-08-14T00:58:03Z
edc46d7be7ce8fff2b5c21a00eb6741efbb9ef42,"Misc Flow and import fixes

1. Fixed all reported Flow errors
2. Added a few missing package declarations
3. Deleted ReactDebugHooks fork in favor of react-debug-tools",Brian Vaughn,2019-08-14T00:53:28Z
08743b1a8e012c1a36ba99391c6332e462b808b2,Reorganized folders into packages/*,Brian Vaughn,2019-08-13T22:59:43Z
e0a521b02ad54b840ee66637f956b65db4dbe51c,Make component stack last argument for deprecation warnings (#16384),Dan Abramov,2019-08-13T22:25:03Z
1fd3906e92ea231848c5b50a99303d4ac3dc7977,"Remove ""Waiting for async callback"" User Timing measurement (#16379)

* Remove ""Waiting for async callback"" User Timing measurement

* Fix User Timing in PROD mode",Dan Abramov,2019-08-13T21:03:29Z
89bbffed6e84246f12332f40a2557c4f05070d3b,"Cleanup Babel PR (ReactFreshPlugin) (#16340)

* fix babel 7 issues

* fix babel 7 issues",lunaruan,2019-08-13T20:18:40Z
dc3160887bb3ff8578c4e0b14438b081d85866e2,"[CI] Disable coverage (#16380)

Looks like it's broken. Don't know if this will work to disable it while we figure out why?",Dan Abramov,2019-08-13T20:11:51Z
ec7ef50e8b7a61639d5b622e9e675602120e2e96,Reorganized things again into packages,Brian Vaughn,2019-08-13T18:37:25Z
7cabb3946e5b2c1184e1917e885590d8f803c4ee,Reorganized fixtures,Brian Vaughn,2019-08-13T18:11:25Z
c8922c3dbf8325bf9ad1c558e2bf88130fcf84e2,Updated yarn.lock file,Brian Vaughn,2019-08-13T18:08:40Z
9c825b59f1b30f731dc5757592cda87d754112a6,Moved dev shell into fixtures/devtools,Brian Vaughn,2019-08-13T18:05:37Z
65b93cd165d19eb8d3566b1fef67885c2b56c6fd,Merge remote-tracking branch 'devtools-merge/master' into devtools-v4-merge,Brian Vaughn,2019-08-13T17:46:18Z
56b1c20cf0b990dceee7e62599f272c5b28aa991,Reorganized to avoid merge conflicts with React repo folder structure,Brian Vaughn,2019-08-13T17:33:56Z
e3ac9d219d7ef261428e3240877954db6fa72d29,Merging DevTools fork,Brian Vaughn,2019-08-13T17:10:41Z
848327760f4d351e41f75385709c7748cfff9164,Initializing empty merge repo,Brian Vaughn,2019-08-13T17:09:17Z
21d6395a141f1e725cdf707b606b05f079f48b92,Add test case for #16359 (#16371),Andrew Clark,2019-08-13T02:00:50Z
a29adc9f62a836378e766d8aa66e9bc902c2dd94,"Dehydrated suspense boundaries in suspense list (#16369)

If we get an insertion after a boundary, that has not yet been hydrated,
we take our best guess at which state the HTML is showing.

isSuspenseInstancePending means that we're still waiting for more server
HTML before we can hydrate. This should mean that we're showing the
fallback state.

isSuspenseInstanceFallback means that we want to client render something.
That most likely means that the server was unable to render and is
displaying a fallback state in this slot.

Adds tests to ensure that dehydrated components don't consider the force
flag.",Sebastian Markbåge,2019-08-12T23:28:02Z
50addf4c0e411e351de7290c8c60ec775c25c8c4,"Refactor Partial Hydration (#16346)

* Move dehydrated to be child of regular SuspenseComponent

We now store the comment node on SuspenseState instead and that indicates
that this SuspenseComponent is still dehydrated.

We also store a child but that is only used to represent the DOM node for
deletions and getNextHostSibling.

* Move logic from DehydratedSuspenseComponent to SuspenseComponent

Forked based on SuspenseState.dehydrated instead.

* Retry logic for dehydrated boundary

We can now simplify the logic for retrying dehydrated boundaries without
hydrating. This is becomes simply a reconciliation against the dehydrated
fragment which gets deleted, and the new children gets inserted.

* Remove dehydrated from throw

Instead we use the regular Suspense path. To save code, we attach retry
listeners in the commit phase even though technically we don't have to.

* Pop to nearest Suspense

I think this is right...?

* Popping hydration state should skip past the dehydrated instance

* Split mount from update and special case suspended second pass

The DidCapture flag isn't used consistently in the same way. We need
further refactor for this.

* Reorganize update path

If we remove the dehydration status in the first pass and then do a second
pass because we suspended, then we need to continue as if it didn't
previously suspend. Since there is no fragment child etc.

However, we must readd the deletion.

* Schedule context work on the boundary and not the child

* Warn for Suspense hydration in legacy mode

It does a two pass render that client renders the content.

* Rename DehydratedSuspenseComponent -> DehydratedFragment

This now doesn't represent a suspense boundary itself. Its parent does.

This Fiber represents the fragment around the dehydrated content.

* Refactor returns

Avoids the temporary mutable variables. I kept losing track of them.

* Add a comment explaining the type.

Placing it in the type since that's the central point as opposed to spread
out.",Sebastian Markbåge,2019-08-12T22:58:38Z
c2034716a5bff586ab68c41a14139a535cbd788e,"Fix typo in error code map (#16373)

""responer"" -> ""responder""

I also removed an unused error code that never shipped.",Andrew Clark,2019-08-12T21:56:09Z
62b04cfa753076d5ffb1d74b855f8f8db36f5186,"Remove unused import

That's why you wait for the lint job to finish, Andrew!!!!!!",Andrew Clark,2019-08-12T21:35:33Z
3eeb645515fad1c5f99339744d0f8804b9c6ced1,"Remove flag that reverts #15650 (#16372)

The change in #15650 has fully rolled out, so we can remove the flag
that reverts it.",Andrew Clark,2019-08-12T21:31:12Z
2716d91ec4757c8d46e5af09066e2db5c8b4d499,"Reset didReceiveUpdate in beginWork (#16359)

This is a bad bug. It means that we sometimes inherit
didReceiveUpdate from a previous component's begin.

Effectively this only means that we're overrendering in some cases.

We should refactor to get rid of this as a global flag.",Sebastian Markbåge,2019-08-12T21:16:25Z
9449f8bf391512e258c822e80752f2b6c8db26a0,[react-events] Fix keyboard responder test (#16368),Nicolas Gallagher,2019-08-12T20:51:00Z
6eb04b2b167bba568583e5ce2ba6326fd59230c6,4.0.0-alpha.8 -> 4.0.0-alpha.9,Brian Vaughn,2019-08-12T18:34:00Z
2f1c100e7ce3e16357510ae5867b33b2e9236f42,"Misc. Profiler tweaks

* Disabled (with a follow up TODO) the  call in the reload-and-profile toggle.
* Disabled reload-and-profile in Firefox extension for now, since it was triggering a disconnected port error.
* Fixed Safari layout bug that caused profiler charts to be hidden.",Brian Vaughn,2019-08-12T18:13:38Z
8fa608d9ab881b1a6287044c0f7d80e189c1b408,Fixed a selection-sync edge case for Elements/Components tabs,Brian Vaughn,2019-08-12T17:31:50Z
107521a9526a5066d7ad7bc8e2e73224b2f5de24,"[react-events] Focus/FocusWithin responders with fallbacks (#16343)

Separate the PointerEvent and fallback implementations.
Fix the unit tests to cover both PointerEvent and non-PointerEvent environments.
Fix the focus-visible related callbacks to get called when keys other than ""Tab"" are used.",Nicolas Gallagher,2019-08-12T17:10:51Z
8001b6432c203ee46d8bbcb4099bef79856107d7,Fixed raw-loader + Jest problem,Brian Vaughn,2019-08-12T15:49:26Z
b5195a5f16fb900c924401066ee453e6ef53baea,Fixed a couple of edge case styling and layout issues I noticed while testing the inline target,Brian Vaughn,2019-08-12T15:26:48Z
7a7e792a6fd7668b37e475bf39e58fdb24e4ad81,"Make SchedulerMinHeap flow strict (#16351)

@acdlite while browsing Twitter, I saw [an opportunity][1] to do
something more productive than browsing Twitter.

[1]: https://twitter.com/acdlite/status/1160247965908234240

Test plan:

`yarn flow-ci`, `yarn test-prod`, `yarn lint`",Desmond Brand,2019-08-10T20:44:23Z
e349da19b8423182c65dbf6ce38a9aeb61dbf529,"[Scheduler] Temporarily remove wrapper function (#16345)

This code is being compiled incorrectly by something in the Facebook
build pipeline. I'm removing it temporarily to unblock the sync while
we investigate.",Andrew Clark,2019-08-10T01:08:29Z
5b007573ac7eb39660273302d5a4679e3d2c44e3,"Release script supports publishing a subset of packages (#16338)

Release script supports publishing a subset of packages (#16338)",Brian Vaughn,2019-08-09T20:12:00Z
0bd0c5269f2fe90ff7897ed5ce9146db99126eaf,"Upgrade ESLint so we can use JSX Fragment syntax (#16328)

Now that we're using Babel 7, this is the last blocker.",Andrew Clark,2019-08-09T19:59:02Z
07d062dea852befa47d5b11111c21769bd8205d3,"Mark spawned work for client-rendered suspense boundary (#16341)

Currently this is getting marked as Never which is the normal continuation
for a dehydrated boundary, but if it is client-rendered it has a higher
priority. That causes us to drop the interaction tracing for that render.

This colocates the marking where we actually set the expiration time.",Sebastian Markbåge,2019-08-09T19:37:06Z
07a02fb80d99710443f23e30122bc1ffa8ea4f40,"[react-events] Refactor unit tests for Hover (#16320)

**Problem**

The existing responders listen to pointer events by default and add fallback events if PointerEvent is not supported. However, this complicates the responders and makes it easy to create a problematic unit test environment. jsdom doesn't support PointerEvent, which means that the responders end up listening to pointer events *and* fallback events in unit tests. This isn't a direct problem in production environments, because no browser will fire pointer events if they aren't supported. But in the unit test environment, we often dispatch event sequences taken from browsers that support pointer events. This means that what we're often testing is actually a (complex) scenario that cannot even occur in production: a responder that is listening to and receives both pointer events and fallback events. Not only does this risk making responders more complicated to implement but it could also hide bugs in implementations.

**Response**

Implement the responders so that they're only listening to *either* pointer events *or* fallback events, never both. This should make the default pointer events implementations significantly simpler and easier to test, as well as free to rely on the complete PointerEvents API. In the future it should also make DCE easier for target environments that are known to support PointerEvents, as we can use build tools with an equivalent of the runtime check. The fallback events (touch and mouse) need to coexist and be resilient to browser emulated events. Our unit tests should express a suite of high-level interactions that can be run in environments with and without PointerEvents support.",Nicolas Gallagher,2019-08-09T17:53:49Z
f62b53d9085157717e09a19c82bfd63e8b60e09b,"fix some missing assertions (#16336)

These were discovered by @SimenB in https://github.com/facebook/react/pull/16332. We weren't making actual assertions on some values. This PR makes the assertions, and fixes the tests.",Sunil Pai,2019-08-09T14:34:49Z
b9faa3b0925f9842f12150bc5b6ac4b19c31e9ed,"[act] remove obsolete container element (#16312)

In a previous version of act(), we used a dummy dom element to flush effects. This doesn't need to exist anymore, and this PR removes it. The warning doesn't need to be there either (React will fire a wrong renderer act warning if needed).",Sunil Pai,2019-08-09T13:26:47Z
66a474227b18c76eb2f7c24108227e8628502f8c,"use a different link in the UNSAFE_ component warnings (#16321)

When React detects a deprectated/unsafe lifecycle method, the warning points to a page with more details on the why/what of the warning. However, the actual link (https://fb.me/react-async-component-lifecycle-hooks) uses the phrase ""lifecycle-hooks"" which is confusing since it doesn't have anything to do with hooks. This PR changes the link to something less confusing - https://fb.me/react-unsafe-component-lifecycles.",Sunil Pai,2019-08-09T11:18:39Z
8d540387736ac8a3d2d1e932b187cf7fe2c9607e,Add use-subscription to Rollup bundle config (#16326),Brian Vaughn,2019-08-09T01:52:08Z
b12a982062ff3be7fdb95a104b800607f1d25976,"Babel 7 (#16297)

Upgraded from Babel 6 to Babel 7.

The only significant change seems to be the way `@babel/plugin-transform-classes` handles classes differently from `babel-plugin-transform-es2015-classes`. In regular mode, the former injects a `_createClass` function that increases the bundle size, and in the latter it removes the safeguard checks. However, this is okay because we don't all classes in new features, and we want to deprecate class usage in the future in the react repo.

Co-authored-by: Luna Ruan <luna@fb.com>
Co-authored-by: Abdul Rauf <abdulraufmujahid@gmail.com>
Co-authored-by: Maksim Markelov <maks-markel@mail.ru>",lunaruan,2019-08-09T00:46:35Z
d77c6232d37238013dd96f3c37b7e4f77384e0f9,"[Scheduler] Store Tasks on a Min Binary Heap (#16245)

* [Scheduler] Store Tasks on a Min Binary Heap

Switches Scheduler's priority queue implementation (for both tasks and
timers) to an array-based min binary heap.

This replaces the naive linked-list implementation that was left over
from the queue we once used to schedule React roots. A list was arguably
fine when it was only used for roots, since the total number of roots is
usually small, and is only 1 in the common case of a single-page app.

Since Scheduler is now used for many types of JavaScript tasks (e.g.
including timers), the total number of tasks can be much larger.

Binary heaps are the standard way to implement priority queues.
Insertion is O(1) in the average case (append to the end) and O(log n)
in the worst. Deletion is O(log n). Peek is O(1).

* Sophie nits",Andrew Clark,2019-08-08T23:18:05Z
95767acf8333c91dbf6057e022bf21e64f84711f,Bump deps in packages/**/package.json (#16325),Andrew Clark,2019-08-08T21:50:11Z
6536973a00c87d608ec8a0342db522e9e0e536f1,Prepare use-subscription v1 for publishing (#16324),Brian Vaughn,2019-08-08T21:45:48Z
85d05b3a4d439c504ee43652d586ee253a01faf6,Bump package.json versions,Andrew Clark,2019-08-08T21:24:11Z
96cdf33ad3c8f2456ff66a180c80f5cfd4aa4831,"Changelog for 16.9 (#16254)

* Changelog for 16.9 (TODO: add date)

* Update CHANGELOG.md

* Add date",Dan Abramov,2019-08-08T21:12:59Z
d9fdec6cfec08f453be665c948e04a69467415da,[Flare] Remove contextmenu logic from Press (#16322),Dominic Gannaway,2019-08-08T20:42:01Z
12be8938a5d71ffdc21ee7cf770bf1cb63ae038e,[Fresh] Support multiple renderers at the same time (#16302),Dan Abramov,2019-08-08T18:03:38Z
6f3c8332d8b2f92784a731e6cc6a707a92495a23,"Reset hydration state after reentering (#16306)

We might reenter a hydration state, when attempting to hydrate a boundary.
We need to ensure that we reset it to not hydrating once we exit it.
Otherwise the next sibling will still be in hydration mode.",Sebastian Markbåge,2019-08-07T21:56:12Z
028c07f89ca7e81b9af9afda44b58fd812f7dbf7,Ensure Fundamental flags are added to more locations (#16311),Dominic Gannaway,2019-08-07T13:48:30Z
9dfe973b52eae670f78eb2daa687032c2ad5eb6f,Nit: fix inconsistent spacing in a warning (#16310),Dan Abramov,2019-08-07T13:30:21Z
c4f0b93703be3d165de78db7a381d6cca2203b2f,Warn when Using String Refs (#16217),lunaruan,2019-08-07T07:10:19Z
7c838a6450f5b80c5d645b79b9dae78864e046b9,[Flare] Adds support for hydrating host components with listeners (#16304),Dominic Gannaway,2019-08-06T22:05:16Z
2eb3f4e9b8dcf876b667591dd25209bf41a43a05,README typofix,Brian Vaughn,2019-08-06T17:45:16Z
2015a39c2e70970c1a097a313b71e0cd404b4960,4.0.0-alpha.7 -> 4.0.0-alpha.8,Brian Vaughn,2019-08-06T17:22:12Z
ed497007967b4324798b70be1708e478d95c5802,[react-events] Separate the Focus/FocusWithin unit tests (#16298),Nicolas Gallagher,2019-08-06T16:16:21Z
23405c9c4c30b07892e0721de9e5c59620b34bc4,"[react-events] Add ContextMenu responder (#16296)

A module for responding to contextmenu events. This functionality will be
removed from the Press responder in the future.",Nicolas Gallagher,2019-08-06T16:16:05Z
e015e3d937ca21bf5e441f7af3f8b3d8b777b895,Added not about sync/batched root API being required,Brian Vaughn,2019-08-06T15:57:34Z
2349f04478269f922feccb6db4b7a443eb549e74,"Handle case where :root styles aren't (yet) applied when SettingsContext mounts

This fixes a possible bug in the inline shell where line-heights are NaN so the Tree (react-window List) gets created with a itemSize of NaN",Brian Vaughn,2019-08-06T15:46:42Z
606f76b6e4763581ecf742144ee82756902674ff,"Fix hydration bug with nested suspense boundaries (#16288)

This happens in this case: `<!--$!--><!--$!-->...<!--/$--><!--/$-->...`

getNextHydratableInstanceAfterSuspenseInstance didn't take
SUSPENSE_FALLBACK_START_DATA or SUSPENSE_PENDING_START_DATA into account
so if a boundary was in one of those states, it wouldn't be considered to
push the stack of boundaries. As a result the first end comment was
considered the end but it really should've been the second end comment.

The next comment then would've been considered something that can be
skipped. However, since the logic in there considered all comments as
""hydratable"", it was considered a hydratable node. Since it was considered
a node that didn't actually correspond to anything in the React tree it got
deleted.

The HTML is now `<!--$!--><!--$!-->...<!--/$-->...` and the trailing
content is now hydrated since it did match something.

Next, since this was client rendered, we're going to delete the suspended
boundary by calling clearSuspenseBoundary and then inserting new content.
However, clearSuspenseBoundary *is* aware of SUSPENSE_FALLBACK_START_DATA
and assumes that there must be another `<!--/$-->` after the first one.
As a result it deleted the trailing content from the DOM since it should
be part of the boundary. However, those DOM nodes were already hydrated in
the React tree. So we end up in an inconsistent state.

When we then try to insert the new content we throw as a result.

I think we would have recovered correctly if clearSuspenseBoundary and
getNextHydratableInstanceAfterSuspenseInstance had the *same* bug but
because they were inconsistent we ended up in a bad place.",Sebastian Markbåge,2019-08-05T23:36:13Z
baac1dcc52cbb05b3733182930378de6ca22229d,"Inline package tweaks:
* Ignore messages from the DevTools browser extension.
* Cleanup/clarify README",Brian Vaughn,2019-08-05T21:00:18Z
a1dbb852c29d23d5d0b76a0171eb59df4bebf684,"warn if you try to use act() in prod (#16282)

We have behaviour divergence for act() between prod and dev (specifically, act() + concurrent mode does not flush fallbacks in prod. This doesn't affect anyone in OSS yet)

We also don't have a good story for writing tests in prod (and what from what I gather, nobody really writes tests in prod mode).

We could have wiped out act() in prod builds, except that _we_ ourselves use act() for our tests when we run them in prod mode.

This PR is a compromise to all of this. We will log a warning if you try to use act() in prod mode, and we silence it in our test suites.",Sunil Pai,2019-08-05T20:01:05Z
dc232e6774e60029be7995d1b4e3e37f8ff843ef,chore: remove outdated comment about gcc (#16232),Ashwin Ramaswami,2019-08-05T17:18:40Z
dc8580e64df475709fd693f87ef85ae25e5181dd,New NPM package react-devtools-inline (#363),Brian Vaughn,2019-08-05T17:09:26Z
6f1e283b764db82c9ad922faf5d55cd523d0b9e6,"feat: match HOC display names during search (#360)

* feat: match HOC display names during search

* chore: update tests for new search logic",Sam Horton,2019-08-05T16:44:48Z
6b3ae6459819065b047244db43d432da2a7be6a1,Suppress known/expected warnings and errors in local DEV shell,Brian Vaughn,2019-08-04T21:33:38Z
db8542ad97c75c9f61a949209f6c054a1c0c9688,"Refactor inspect/select logic so that $r contains hooks data (#364)

* Refactor inspect/select logic so that  var contains hooks data
* Legacy renderer resets $r to null when inspecting non class/function element",Brian Vaughn,2019-08-04T00:59:35Z
6b565ce736657308393e75d507b7c374e1f2bc8c,"Rendering tasks should not jump the queue (#16284)

When React schedules a rendering task, it passes a `timeout` option
based on its expiration time. This is intended to avoid starvation
by other React updates. However, it also affects the relative priority
of React tasks and other Scheduler tasks at the same level, like
data processing.

This adds a feature flag to disable passing a `timeout` option to
Scheduler. React tasks will always append themselves to the end of
the queue, without jumping ahead of already scheduled tasks.

This does not affect the order in which React updates within a single
root are processed, but it could affect updates across multiple roots.

This also doesn't remove the expiration from Scheduler. It only means
that React tasks are not given special treatment.",Andrew Clark,2019-08-03T00:52:32Z
c4c9f086eb9b61a36d9d96a847374ea65147b6cb,"BugFix: Suspense priority warning firing when not supposed to (#16256)

Previously, the suspense priority warning was fired even if the Root wasn't suspended. Changed the warning to fire only when the root is suspended.

Also refactored the suspense priority warning so it's easier to read.",lunaruan,2019-08-02T20:54:11Z
644c9c4e1c2ca587275c061b0394ea4be45fdfc7,[Flare] useListener -> useResponder (#362),Dominic Gannaway,2019-08-02T17:14:25Z
9727f4e88f7a9af233de07112794988ef9c1d61c,Don't let a DevTools or React internal error interfere with logging.,Brian Vaughn,2019-08-02T16:39:39Z
abbaedd2641c6b71536785f5fe047f4f79899af9,Updated Flow type for DevTools tab id,Brian Vaughn,2019-08-02T16:27:13Z
05dce7598a60d38d39a6b32572b54e1408c29d9b,"Fix priority of clean-up function on deletion (#16277)

The clean-up function of a passive effect (`useEffect`) usually fires
in a post-commit task, after the browser has painted. However, there is
an exception when the component (or its parent) is deleted from the
tree. In that case, we fire the clean-up function during the
synchronous commit phase, the same phase we use for layout effects.

This is a concession to implementation complexity. Calling it in the
passive effect phase would require either traversing the children of the
deleted fiber again, or including unmount effects as part of the fiber
effect list.

Because the functions are called during the sync phase in this case,
the Scheduler priority is Immediate (the one used for layout) instead
of Normal. We may want to reconsider this trade off later.",Andrew Clark,2019-08-02T05:17:59Z
a53f5cc22eab9617a1d5473e16ce872c7158edef,"[SuspenseList] Bug fix: Reset renderState when bailing out (#16278)

If there are adjacent updates we bail out of rendering the suspense list
at all but we may still complete the node. We need to reset the render
state in that case.

I restructured so that this is in the same code path so we don't forget it
in the future.",Sebastian Markbåge,2019-08-02T05:02:28Z
0c1ec049f8832d1c27f876844666fda393036800,"Add a feature flag to disable legacy context (#16269)

* Add a feature flag to disable legacy context

* Address review

- invariant -> warning
- Make this.context and context argument actually undefined

* Increase test coverage for lifecycles

* Also disable it on the server is flag is on

* Make this.context {} when disabled, but function context is undefined

* Move checks inside",Dan Abramov,2019-08-02T00:21:32Z
95674af2ef3c3028d903272f606295209fbb6b65,Add test of scheduler overhead (#16260),Sebastian Markbåge,2019-08-02T00:13:39Z
42794557ca44a8c05c71aab698d44d1294236538,[Flare] Tweaks to Flare system design and API (#16264),Dominic Gannaway,2019-08-01T18:08:54Z
62e5fd57a15295fe269dc998350005aaa4042ed9,NPM package versions 4.0.0-alpha.5 -> 4.0.0-alpha.6,Brian Vaughn,2019-08-01T15:26:32Z
51a15e0e4d71ef8c979c47eb5f8568448c467643,Added CHANGELOG entries for HOC badges and no in-line props,Brian Vaughn,2019-08-01T14:56:10Z
aed31fdf12b01eb508b347fff8e3c237a0c91a3f,"Element keys are selectable text

Changed truncation to be CSS-driven, and enabled double-click selection of text, so that long keys could be copied from within the tree.",Brian Vaughn,2019-07-31T21:48:39Z
11e7b1d290d6be07af521275edcae6642c0e21f5,Updated OVERVIEW doc,Brian Vaughn,2019-07-31T21:22:43Z
e4ccafc09988b38423a67c755ea685b9cfe58ba9,Updated CHANGELOG based on Dan's feedback,Brian Vaughn,2019-07-31T21:08:44Z
52b0c20a620c769b836fff2c0f31d78fe83989cb,Added dynamic indentation to change log,Brian Vaughn,2019-07-31T20:44:32Z
271aa75cf2685ff62932863c1b1eaf08b1898d1a,"Removed the Profiler screenshot capture feature

This wasn't reliable because of browser extension API limitations and required serious throttling to avoid harming performance, so I've decided to just remove it entirely for now.",Brian Vaughn,2019-07-31T18:36:01Z
4f8b7864eea378841ef7e4a41aeec92d54431084,"Add ""Welcome to the new DevTools"" notification

This dialog is shown in the browser extension the first time a user views v4. It is off by default for the standalone extension, but can be enabled via a public API.",Brian Vaughn,2019-07-31T18:22:51Z
c57d2a2901b4758f5be77dad581e7a8ab68eb5af,Added CHANGELOG,Brian Vaughn,2019-07-31T17:50:56Z
b5af4fe3c64e1ac254e8fd101fec2f8e414aabf6,Remove FocusScope (#16267),Dominic Gannaway,2019-07-31T16:40:11Z
375616788510d65b0d523fb1b331aefbd737d03d,"Add missing check to unmocked Scheduler warning (#16261)

The unmocked Scheduler warning doesn't actually check if Scheduler
is mocked.",Andrew Clark,2019-07-31T03:11:11Z
f939df402c074227014a85256cfe7c80ac30a0bc,"[act] Wrap IsThisRendererActing in DEV check (#16259)

* [act] Wrap IsThisRendererActing in DEV check

So that it doesn't leak into the production bundle. Follow-up to #16240.

* Disable Suspense fallback test in prod",Andrew Clark,2019-07-31T00:39:42Z
f440bfd55911588d90c1d6e00d5a6b8feeda9b48,"Bugfix:  Effects should never have higher than normal priority (#16257)

* Bugfix: Priority when effects are flushed early

The priority of passive effects is supposed to be the same as the
priority of the render. This fixes a bug where the priority is sometimes
wrong if the effects are flushed early.

But the priority should really never be higher than Normal Priority.
I'll change that in the next commit.

* Effects never have higher than normal priority

Effects currently have the same priority as the render that spawns them.
This changes the behavior so that effects always have normal priority,
or lower if the render priority is lower (e.g. offscreen prerendering).

The implementation is a bit awkward because of the way `renderRoot`,
`commitRoot`, and `flushPassiveEffects` are split. This is a known
factoring problem that I'm planning to address once 16.9 is released.",Andrew Clark,2019-07-30T22:46:36Z
db3ae32b8fe2c3fe24c4f5496aecdeab24b9d719,"flush fallbacks in tests (#16240)

In this PR, for tests (specifically, code inside an `act()` scope), we immediately trigger work that would have otherwise required a timeout. This makes it simpler to tests loading/spinner states, and makes tests resilient to changes in React.

For some of our tests(specifically, ReactSuspenseWithNoopRenderer-test.internal), we _don't_ want fallbacks to immediately trigger, because we're testing intermediate states and such. Added a feature flag `flushSuspenseFallbacksInTests` to disable this behaviour on a per case basis.",Sunil Pai,2019-07-30T18:12:06Z
e6a0473c3c6f501dbe291f60b9ee35760ab99eed,"Warn when rendering tests in concurrent/batched mode without a mocked scheduler (#16207)

Concurrent/Batched mode tests should always be run with a mocked scheduler (v17 or not). This PR adds a warning for the same. I'll put up a separate PR to the docs with a page detailing how to mock the scheduler.",Sunil Pai,2019-07-30T18:00:18Z
e276a5e85046c2cf336f623d975b1af01b251b5e,"[Flare] Remove delay props from Hover (#16248)

Moving working with delays into user-space.",Nicolas Gallagher,2019-07-30T16:29:43Z
1912b4a0f1dc68e8f39978b9bac48d7f77b2b97c,"[Flare] Remove delay props from Press (#16247)

Moving working with delays into user-space.",Nicolas Gallagher,2019-07-30T16:29:26Z
55bc393f726ddf3def83ca5a43cfc38a45d2e421,[Flare] Ensure we check for bad polyfill when creating responders (#16243),Dominic Gannaway,2019-07-29T20:16:30Z
47656bf2a1bdff25d6ade5bb580ea6ec4e4fcc94,"[Flare] Remove longpress from press responder (#16242)

Long press will move to a separate responder.",Nicolas Gallagher,2019-07-29T20:12:12Z
9914a19190296ca7e0fd65f7c4f6fe5cc42e29a4,"[Fresh] Transfer refs when remounting (#16241)

* Add a failing test for refs and remounting

* Transfer ref when remounting",Dan Abramov,2019-07-29T16:19:09Z
9a36e56d342256f335ce6308fe3908ebab43dccf,Added missing Flow header,Brian Vaughn,2019-07-29T00:21:00Z
8e2134beee2b174ea9cd16ba1d2f5d50aaea1ead,Re-add try/catch inside Agent's getIDForNode(),Brian Vaughn,2019-07-28T15:42:21Z
82881ab261d35c7840e4599327c097955a40ed0f,"Allow Inspecting Elements Within Iframes (#355)

This change adds support for element inspecting within `<iframe/>`s.

The iframes are kept in a Set so that we only append listeners once and
clean them up properly. I’ve run a few tests and it seems to behave as
expected.

The fixture includes a cross-origin iframe to make sure we do not error
in this case.",Philipp Spiess,2019-07-28T15:40:02Z
50512a223bbad09700d6a6e54717f11832375c6d,Reverted a Webpack config change that broke browser extension styles,Brian Vaughn,2019-07-27T16:30:23Z
ca4aac5014a8e22d65b94ca7f2546a6c336ac741,"Tweaked recent search changes

1. Compare element indices rather than ids (since these don't necessarily correlate)
2. Restored previous behaior when new search text reduces the number of results past the currently-selected element.",Brian Vaughn,2019-07-27T16:15:53Z
29a6bf2a7bb07be2bace750409afc08a8171b9d7,"Feature: tweak search behaviour (#353)

Merge PR #353 from @fanny

This change changes search beahvior to initially select the result nearest the currently selected element (rather than selecting the first result in the set).",Fanny,2019-07-27T16:04:20Z
75ab53b9e1de662121e68dabb010655943d28d11,"[scheduler] Yield many times per frame, no rAF (#16214)

Adds experimental flag to yield many times per frame using a message
event loop, instead of the current approach of guessing the next vsync
and yielding at the end of the frame.

This new approach forgoes a `requestAnimationFrame` entirely. It posts a
message event and performs a small amount of work (5ms) before yielding
to the browser, regardless of where it might be in the vsync cycle. At
the end of the event, if there's work left over, it posts another
message event.

This should keep the main thread responsive even for really high frame
rates. It also shouldn't matter if the hardware frame rate changes after
page load (our current heuristic only detects if the frame rate
increases, not decreases).

The main risk is that yielding more often will exacerbate main thread
contention with other browser tasks.

Let's try it and see.",Andrew Clark,2019-07-26T22:43:57Z
0d7141dd49809c3815aeb6fc257d4dfe2607d317,[Flare] Fix SSR issue with serializing responders prop (#16227),Dominic Gannaway,2019-07-26T21:47:37Z
ed57bf8ed4591fc64b44326132e97b8888e4df5a,"[Bugfix] Check tag before calling hook effects (#16215)

* Add failing test for #16215

Next commit fixes it.

* [Bugfix] Check tag before calling hook effects

TODO: Test that triggers this",Andrew Clark,2019-07-26T21:28:49Z
3b2905b690f61d2b136be810e067a29e55958242,NPM package versions 4.0.0-alpha.4 -> 4.0.0-alpha.5,Brian Vaughn,2019-07-26T17:13:52Z
7385de9fc233cc78572951bb26055e996823bc44,"react-devtools-core standalone bugfix: prevent electron crash

CSS source maps require the style-loader to use URL.createObjectURL (rather than just a <style> tag). For some reason, this crashes Electron's webview process, which completely breaks the embedded extension inside of Nuclide and other Electron apps. This commit turns (CSS) source maps off for production builds to avoid this crash.",Brian Vaughn,2019-07-26T17:13:07Z
858c84206ef79f210e552c0128f01d1ae3a0cbf0,"Don't hyphenate custom CSS properties for ReactDOMServer (#16167)

* Do not hyphenate custom CSS property

* Move check into the processStyleName fn

* Formatting

* add test

* Put isCustomProperty check after conditional return

* add test to `ReactDOMServerIntegration` and supress warning

* Don't indexOf twice

* Simpler fix",Belmin Bedak,2019-07-26T17:06:24Z
d412eec8396e9b800b2e75a2585111ffa09b4978,"[act] flush work correctly without a mocked scheduler (#16223)

Not returning the value of flushPassiveEffects() in flushWork() meant that with async act, we wouldn't flush all work with cascading effects. This PR fixes that oversight, and adds some tests to catch this in the future.",Sunil Pai,2019-07-26T16:48:42Z
b43785e151a06c91e4c8b3e6e01b615bdc37e33a,"Update use-subscription README (#16216)

It was a little confusing that the question asked when NOT to use this package, then the answer says when to use it. I think this is a little better.",Sophie Alpert,2019-07-26T02:30:55Z
c0830a0e63247d3ef5f906863d1a40125db03837,"[Scheduler] Test browser implementation details (#16198)

The Scheduler implementation uses browser APIs like `MessageChannel`,
`requestAnimationFrame`, and `setTimeout` to schedule work on the main
thread. Most of our tests treat these as implementation details;
however, the sequence and timing of these APIs are not precisely
specified, and can vary wildly across browsers.

To prevent regressions, we need the ability to simulate specific edge
cases that we may encounter in various browsers.

This adds a new test suite that mocks all browser methods used in our
implementation. It assumes as little as possible about the order and
timing of events. The only thing it assumes is that
requestAnimationFrame is passed a frame time that is equal to or less
than the time returned by performance.now. Everything else can be
controlled at will.

It also includes Scheduler-specific invariants, e.g. only one rAF
callback can be scheduled at a time.

It overlaps slightly with the existing SchedulerDOM-test suite, which
also mocks the browser APIs, but exposes a higher-level set of testing
primitives. I will consolidate the two suites in a follow-up.",Andrew Clark,2019-07-25T22:53:14Z
857deb2ed59f58a1bd3887f2ab62ff1df809acba,"Warn when Using DefaultProps on Function Components (#16210)

As part of the process to deprecate defaultProps on function components (as per a larger proposal outlined in (https://github.com/reactjs/rfcs/blob/createlement-rfc/text/0000-create-element-changes.md)), add a warning whenever someone does this.",lunaruan,2019-07-25T22:44:03Z
76c67399db8f406df3d6435ca625fb922219c450,Re-enabled packages backend build to be production mode (whoops),Brian Vaughn,2019-07-25T22:10:30Z
050cb8452d7255057cd7d73f31e636249a32928b,4.0.0-alpha.3 -> 4.0.0-alpha.4,Brian Vaughn,2019-07-25T17:26:52Z
e0472709c81f53b333feafb5442319d6d25dda4b,[Flare] Adds Keyboard event responder (#16204),Dominic Gannaway,2019-07-25T16:47:44Z
1e8aa8105ab10ee7c4ec49a405fcc7976820da4c,"Re-enable ""view source"" button for standalone shell

But only do this if we can verify the element file path. This hopefully avoids the case where clicking the button does nothing because of an invalid/incomplete path.",Brian Vaughn,2019-07-25T16:28:45Z
c6fb74391027510d43db2d59d9d2a9c044dc6fc4,Flow type cleanup,Brian Vaughn,2019-07-25T16:13:45Z
5b08f7b43fed206c66988f852ba36f0f0e7ffa13,[Flare] Adds useListener implementation to ReactDebugHooks (#16205),Dominic Gannaway,2019-07-25T15:55:39Z
a7948e834223ab010475cfe6fabfc55d24f38955,[Flare] Remove the old EventComponent/EventTarget system (#354),Dominic Gannaway,2019-07-25T15:45:59Z
ed72f402579ccd65c70ac3eb950f74636492c934,[Flare] Remove references to EventComponent (#16206),Dominic Gannaway,2019-07-25T15:41:26Z
270f34f7f0e1d121c340937fe3302908ec117e3d,"Support new Flare hook, unstable_useListener",Brian Vaughn,2019-07-25T15:21:41Z
121bfb03bccf3bdb4c5d1ba7cc53b573edb74434,"update legacy context warning message (#16196)

The link in the legacy context message doesn't point to anything context related. This changes the link to point to https://fb.me/react-legacy-context, which points to https://reactjs.org/docs/context.html#legacy-api. Also adds a line that it'll probably be gone later.",Sunil Pai,2019-07-24T23:34:48Z
8d1c82901942a67f51847c1e1dbedb1732f0bed6,Reverted style-prop hiding change because it caused a regression in the browser extension,Brian Vaughn,2019-07-24T22:48:48Z
c7aff5503fa98ccc5007c210db732161ca411f02,4.0.0-alpha.2 -> 4.0.0-alpha.3,Brian Vaughn,2019-07-24T21:46:53Z
2e8b9fad366fa2da4fdc5c26562008f9bdcc8317,Make style editor inputs more obvious resemble inputs,Brian Vaughn,2019-07-24T21:43:29Z
9ae5e38f18b6e27dcddc7ecdfc38eefd678c095a,Add guard to ensure Profiler onRender prop is function before calling (#16197),Brian Vaughn,2019-07-24T21:20:56Z
4c610950a4d9262c5bf5c719c8e4a8eeaf0a351d,"Hide ""style"" prop if we are showing the style editor

Also add react-native-web to test harness",Brian Vaughn,2019-07-24T21:05:56Z
9a05e0b600df6a7a5097a6998bcd2d1d95da062d,Disable view-source button in standalone mode if no project roots are provided,Brian Vaughn,2019-07-24T20:36:51Z
722d366e9f7709b1dc118ed1a3ef6e4c774e95d1,Updated snapshot,Brian Vaughn,2019-07-24T18:27:15Z
56b00176159d87999b71c2f8ff788b0b12583310,4.0.0-alpha.1 -> 4.0.0-alpha.2,Brian Vaughn,2019-07-24T18:25:52Z
f74c89b145c3ed48b0e6e6185c915b96c7f161dc,"Misc improvements based on user feedback from Tim

* Added shadow to modals
* Change default ""collapse new nodes"" to be disabled rather than enabled
* Changed setting label ""Collapse newly added components by default"" to ""Expand component tree by default""
* Change CSS media query for settings popup to show labels at smaller size
* Hide ""Inspect the matching DOM element"" button (since it doesnt really serve a purpose in standalone)
* Fixed small size bug for settings icon (viewbox of 20x20 instead of 24x24)
* bugfix: window.addEventListener/window.removeEventListener is not defined in Hermes.",Brian Vaughn,2019-07-24T18:25:11Z
13959aa8fb3576cee6b2e890ac3a2d149d752fc3,Removed accidental log statement,Brian Vaughn,2019-07-24T18:13:30Z
144dba1a114f2d8b491186639aa38ece82eaef26,"Fix suspenseCallback type warning, add a test (#16194)",Benoit Girard,2019-07-24T17:32:00Z
7ad221126f77de71f4307758518955884dd67453,[Flare] Ensure Flare components are no-ops for TestRenderer (#16192),Dominic Gannaway,2019-07-24T10:31:33Z
06cc9969947e614636e9260849fe5b50514eadfe,"Edit Suspense Priority Warning Message (#16186)

* move 'component that triggered the update' in suspense priority warning message to the beginning of the message

* renamed warnings",lunaruan,2019-07-24T02:08:41Z
42b75ab007a5e7c159933cfdbf2b6845d89fc7f2,"Add suspenseCallback feature for runtime tracing of loading states (#16134)

This adds a 'SuspenseCallback' feature flag. When the property is set on
a suspense component it will be called during the commit phase with a
set of the immediate thenable for this component. This will allow user
code to build runtime tracing of the cause for a suspense boundary.",Benoit Girard,2019-07-24T00:13:46Z
c73e1f236f932c76fbed5be87bf0fd91da6c0549,"flush work on exiting outermost act(), with nested act()s from different renderers (#16181)

Given this snippet:
```jsx
    TestRenderer.act(() => {
      TestUtils.act(() => {
        TestRenderer.create(<Effecty />);
      });
    });
```
We want to make sure that all work is only flushed on exiting the outermost act().

Now, naively doing this based on actingScopeDepth would work with a mocked scheduler, where flushAll() would flush all work across renderers.

This doesn't work without mocking the scheduler though; and where flushing work only works per renderer. So we disable this behaviour for a non-mocked scenario. This seems like an ok tradeoff.",Sunil Pai,2019-07-23T23:20:28Z
509889119360ed83ca6ef3f83bcf01e5aa7dcd81,[Flare] Redesign core event system (#16163),Dominic Gannaway,2019-07-23T22:46:44Z
19354db511e74d96a1c8b6d8b589a72f025da498,"[Scheduler] Add names to inline functions (#16180)

Noticed when looking at the performance profiler with Luna that it's
hard to tell which event causes `performWorkUntilDeadline` to fire
because these functions are anonymous.",Andrew Clark,2019-07-23T18:08:24Z
bff7abf6ba2426b1172e6f1ccbecd40a478a2c49,"[Scheduler][Bugfix] Multiple rAFs in same frame (#16184)

Always sets `isRAFLoopRunning` back to false when an animation frame is
scheduled. Fixes a bug where two rAFs fire in the same frame, but the
second one exits and fails to schedule a new rAF.

Fixes bug observed in Safari.",Andrew Clark,2019-07-23T17:44:27Z
afb59916868395d9e95cfe16abe2e36bf8fc3739,"Enable profiler+tracing for test renderer (#16178)

This commit just brings the feature flags to parity with other renderers.",Brian Vaughn,2019-07-23T15:20:12Z
2237efcef9a8e63c1b3f1bd61481cb215d20986a,"[Fresh] Track unrecoverable errors (#16183)

* [Fresh] Track unrecoverable errors

* Only initial errors set the flag",Dan Abramov,2019-07-23T15:11:13Z
1178d5725731e228e948e6bec69f758d9e378b81,Fixed a module resolution issue and a syntax error from a bad merge,Brian Vaughn,2019-07-23T14:46:19Z
bbd21066e634c03db67f0b9570de60fdb4879dc0,"[Flare] Press: fix keyboard interactions (#16179)

Prevents Spacebar from scrolling the window.
Prevents Enter from triggering a navigation if preventDefault is true.
Fixes the emulated mouse events test.",Nicolas Gallagher,2019-07-23T01:16:40Z
03944bfb0bdacfe35b2a1722426ff744ae47d018,"Update Suspense Priority Warning to Include Component that Triggered Update (#16030)

Improved warning whenever lower priority events (ex. data fetching, page load) happen during a high priority update (ex. hover/click events) to include:
1.) Name of component that triggered the high priority update or
2.) Information that the update was triggered on the root",lunaruan,2019-07-22T21:17:43Z
3f2cafe8bef0922525b445f7bd2e23ea75c817cf,"[WIP][Scheduler] Use rIC to post first callback (#16166)

Scheduler uses `requestAnimationFrame` to post tasks to the browser.
If this happens at the beginning of a frame, the callback might not
fire until the subsequent frame, even if the main thread is idle.

Our theory was that this wouldn't be an issue in practice, because once
the first rAF fires, we schedule the next rAF as early as possible in
that frame. Combined with our heuristic for computing frame deadlines,
we shouldn't get any idle time in between frames — only before the
*first* frame.

This reasoning holds true when you have a small number of large tasks,
such as the ones posted by React. The idle time before the task starts
is negligible relative to the lifetime of the entire task.

However, it does not hold if you have many small tasks posted over a
span of time, perhaps spawned by a flurry of IO events. In this case,
instead of single, contiguous rAF loop preceded by an idle frame, you
get many rAF loops preceded by many idle frames. Our new theory is that
this is contributing to poor main thread utilization during page loads.

To try to reclaim as much idle time as possible, this PR adds two
experimental flags. The first one adds a `requestIdleCallback` call to
start the rAF loop, which will fire before rAF if there's idle time left
in the frame. (We still call rAF in case there isn't. We start working
in whichever event fires first.)

The second flag tries a similar strategy using `setTimeout(fn, 0)`. If
the timer fires before rAF, we'll assume that the main thread is idle.

If either `requestIdleCallback` or `setTimeout` fires before rAF, we'll
immediately peform some work. Since we don't have a real frame time that
we can use to compute the frame deadline, we'll do an entire frame
length of work. This will probably push us past the vsync, but this is
fine because we can catch up during the next frame, by which point a
real rAF will have fired and the loop can proceed the same way it
does today.

Test plan: Try this on Facebook to see if it improves load times",Andrew Clark,2019-07-22T20:12:33Z
2bd88e38aad28d4dc1fabd93a5dac0f32d812757,"[Scheduler] Bugfix: Cancelling a continuation (#16151)

Cancelling the original task should also cancel its continuation.",Andrew Clark,2019-07-22T20:10:33Z
ffb19346c72e965e5c6dd66bf8bdd835a4e4ff79,NPM packages 4.0.0-alpha.0 -> 4.0.0-alpha.1,Brian Vaughn,2019-07-22T18:19:53Z
783b8f4ae1320d4a4a1188bf2bd40e8ecb3c1f10,[Flare] Ensure mouse events can use target to validate press (#16172),Dominic Gannaway,2019-07-22T11:31:19Z
4b34a77d290cf67ab0be51bf8edef0fe9787732b,"Improve Bridge Flow types (#352)

* Updated local fork of react-window
* Updated Fow 97 -> 103
* Lint ignore NPM dist
* Improved Bridge Flow types",Brian Vaughn,2019-07-20T21:08:23Z
39ad101ea2e1d92ee78174e834a4dad615c5d2ad,"Removed reference to setDefaultThemeName() method

This functionality was added to v3 to support external changing of theme at runtime. This isn't supported in v4.",Brian Vaughn,2019-07-20T16:28:09Z
33da657178159702c5e08c4634e062f992019208,Make console override detectable (for RN YellowBox),Brian Vaughn,2019-07-20T15:05:08Z
2c4d61e1022ae383dd11fe237f6df8451e6f0310,Adds experimental fundamental interface (#16049),Dominic Gannaway,2019-07-19T21:20:28Z
167daf7a4ad54d11a99b80452ba3c9f8022a8b71,Updating NPM packages as 4.0.0-alpha.0,Brian Vaughn,2019-07-19T17:09:49Z
abe75b0e3909cd037e017a46295302a197d760af,Slight tweak to avoid setting an invalid numeric value in props editor,Brian Vaughn,2019-07-19T16:19:03Z
f0a4b2f8e845e945d8cd8d86a2efcda8f9e0a85b,Merge branch 'fix-input-number-in-props' of https://github.com/koba04/react-devtools-experimental into koba04-fix-input-number-in-props,Brian Vaughn,2019-07-19T16:16:26Z
0abaefb7c2f10d64d4f5ba1bf9de40dfd9727300,Cleanup legacy backend event listener if modern backend is detected,Brian Vaughn,2019-07-19T16:02:30Z
dbbf30a332936b67c88631d7ccc2ba5d32114ec5,Make my code PRETTIER,Brian Vaughn,2019-07-18T23:37:57Z
67e749a73a01482f2ccc42d13a95dc72ba8ee59a,Tweaked modal font size style,Brian Vaughn,2019-07-18T23:28:20Z
bd0a0c58fdb2a01c45d07dc08398aab206371a2f,Tweaked modal title to better fit without wrapping,Brian Vaughn,2019-07-18T23:26:27Z
249a2e043dbd261bf54a95d0893dd973f4489d57,Detect React Native v3 backend and show warning,Brian Vaughn,2019-07-18T23:24:22Z
b4178af81b02dfa0e898670ce564c4649fd8947f,clean up nextEffect pointers (#16115),Paul Shen,2019-07-18T00:21:19Z
997154bcc7091f93733090497c714e5806424168,"[Flare] Add FocusWithin responder (#16152)

FocusWithin is implemented as a separate responder, which keeps both focus
responders simple and allows for easier composition of behaviours.",Nicolas Gallagher,2019-07-17T22:17:13Z
9fb753b5cd399ccc702bd3e53dd8d86a739e3504,Hardened logic around when and how to patch console methods,Brian Vaughn,2019-07-17T22:08:34Z
65b80fdd94d8be59263a032408a2a903dbb55378,[Flare] Add Input event responder surface (#16148),Dominic Gannaway,2019-07-17T20:04:41Z
cb3fb4212972ad514ff53bff96530a0dffcaabcf,"Patch console to append component stacks (#348)

* Patch console.warn and console.error to auto-append owners-only component stacks.

This setting is enabled by default and will work for React Native even if no front-end DevTools shell is being used. The setting can be disabled via a new, persisted user preference though.",Brian Vaughn,2019-07-17T18:12:39Z
ce883a19d845e1faf8d4e1587e7022feda66210a,"useSubscription hook (#15022)

* Added use-subscription package with README",Brian Vaughn,2019-07-16T22:59:37Z
c45c2c3a261ab5a2878c36d9f49de531ef69a121,Move ReactFiberErrorDialog RN fork into RN itself (#16141),Moti Zilberman,2019-07-16T08:38:14Z
d9b4c55d53c67045c38b12f5aad57a163e7f63a2,"unify deprecated/unsafe lifecycle warnings, pass tests (#16103)

- redoes #15431 from scratch, taking on the feedback there
- unifies the messaging between ""deprecated"" and UNSAFE_ lifecycle messages. It reorganizes ReactStrictModeWarnings.js to capture and flush all the lifecycle warnings in one procedure each.
- matches the warning from ReactPartialRenderer to match the above change
- passes all the tests
- this also turns on `warnAboutDeprecatedLifecycles` for the test renderer. I think we missed doing so it previously. In a future PR, I'll remove the feature flag altogether.
- this DOES NOT do the same treatment for context warnings, I'll do that in another PR too",Sunil Pai,2019-07-15T19:56:44Z
424099da60a399aba200e96110cee6eaea53b0aa,"Inject getCurrentFiber() function to DevTools (#16133)

This returns the current value of ReactCurrentFiber and enables DevTools to append a custom (owner-only) component stack to warnings and errors in DEV mode.",Brian Vaughn,2019-07-15T14:38:44Z
41c00cb0cb0920e7d3ae1a1c0bb984e9d6a0f565,fix to input a number value to props,Toru Kobayashi,2019-07-14T14:11:08Z
0f2fb5badf5908ee271e0b9e7ec7f3022e31a648,"Standalone NPM packages and React Native support (#335)

* Add version 4 react-devtools and react-devtools-core packages which support both React Native and e.g. Safari or iframe DOM usage.
* Replaces typed operations arrays with regular arrays in order to support Hermes. This is unfortunate, since in theory a typed array buffer could be more efficiently transferred between frontend and backend for the web extension, but this never actually worked properly in v8, only Spidermonkey, and it fails entirely in Hermes so for the time being- it's been removed.
* Adds support for React Native (paper renderer)
* Adds a style editor for react-native and react-native-web",Brian Vaughn,2019-07-13T17:05:04Z
9f395904c6033598ba8bf47f5497fd6e5077c16d,Inject ReactDebugCurrentFrame into DevTools so it can append component stacks to warnings in DEV mode (#16127),Brian Vaughn,2019-07-13T15:53:21Z
fcff9c57bc41f58e8802016b4dbc0a7b72cc63ad,"Add tail=""hidden"" option to SuspenseList (#16024)

* Move misaligned comment

* Add tail=""hidden"" option

* isShowingAnyFallbacks -> findFirstSuspended

* We can't reset Placement tags or we'll forget to insert them

* Delete hasSuspendedChildrenAndNewContent optimization",Sebastian Markbåge,2019-07-12T22:55:47Z
8d413bf2c3679befe8c6b56733b7c6f6e467ec07,"Remove React.error and React.warn (#16126)

* Remove React.error/React.warn with React.getComponentStack",Brian Vaughn,2019-07-12T22:41:47Z
29b45596354035754d598d8b23a8233f3d2414f0,".watchmanconfig must be valid json (#16118)

faceworldproblems?",Andrew Clark,2019-07-12T02:01:02Z
ca4d78f9b6178de97ba4692ffb86647f2e2ef04d,"[Flare] Press: fix middle-click handling (#16114)

Make sure the root events are removed after middle-click completes",Nicolas Gallagher,2019-07-11T21:12:10Z
3f1dee09a40695730c42ce25fb385cf354db4c30,"expose act() sigil correctly for umd builds (#16110)

after https://github.com/facebook/react/pull/16039, act was broken for umd builds. This PR fixes it.",Sunil Pai,2019-07-11T13:56:03Z
b7669044d9cce79d8ec56c7af6e45caa992aa0b0,"Use Map instead of object as map in ReactNativeComponentTree (#16107)

Real Maps should now be used in RN JS engines. In theory this should
be faster (but might not actually be in practice), and it avoids hitting
upper bounds of property max counts.

We don't use these types of Maps in Fabric.",Sebastian Markbåge,2019-07-11T02:11:36Z
d2d9b1f70112b0ce02b0db6a27861186c16116f4,"[Scheduler] Support inferring priority from stack (#16105)

When executing a task, wraps the callback in an extra function whose
name includes the current priority level. Profiling tools with access
to function names can use this to determine the priority of the task.",Andrew Clark,2019-07-11T01:59:44Z
48f6594474c449b3ed62fadedda0ffad5e3a807a,Add warning when single item or nested arrays are used with SuspenseList (#16094),Sebastian Markbåge,2019-07-10T18:07:28Z
2073a7144e9982cc07cf7c19813e50b02c8bcd1b,"[Flare] Press includes button type (#16100)

1. Allow auxillary button clicks (i.e., middle mouse button) to trigger 'onPressStart' and 'onPressEnd', but never 'onPress'.
2. Report the button type – 'primary' or 'auxillary' – on the press event.",Nicolas Gallagher,2019-07-10T16:52:10Z
23b8a25345fe2e1b04eac4eaa801b24aba62f3e1,[Flare] Remove responder flags to simplify logic (#16084),Dominic Gannaway,2019-07-09T14:05:45Z
8533c0a168138d2442334021751b42e530d08bb8,"[Fabric] Add dispatchCommand to React Native renderers (#16085)

* Add dispatchCommand to the public export of the React Native renderers

* Fixup invalid check

* Prettier

* Prettier",Eli White,2019-07-08T20:03:57Z
2253bc81d052110e14fd0eeb335d47d580ace82b,[Flare] Switch from currentTarget model to responderTarget model (#16082),Dominic Gannaway,2019-07-08T16:03:15Z
67e3f3fb6e342f95f00215c84d5d013d7b0e1b33,[Flare] Revise responder event types (#16081),Dominic Gannaway,2019-07-08T13:35:59Z
2a0f6390ed657fa8e2c14c1cf6d9faa2f7b42525,Fix typos (#16076),Min ho Kim,2019-07-08T10:51:29Z
aa519c17cc10c071906d06abeade9e1bd0ed3dc1,[Flare] Add currentTarget and unify RN and DOM codepaths (#16066),Dominic Gannaway,2019-07-08T10:50:21Z
39a811debee5a520d3a6034b429e8877e11331aa,"Merge pull request #342 from marvinhagemeister/attach_configure

Fix reload-and-profile attach not configurable",Brian Vaughn,2019-07-06T22:40:00Z
35d2b3bb5e01d8c388cb17a68608184dc7300892,fix spelling error: resoltion ->  resolution (#16055),fnll,2019-07-05T15:08:13Z
bd72b04939beccac393d2894eb22028a217fd7f3,[Flare] Clear pressStart timeout on pointercancel (#16067),Vincent Riemer,2019-07-05T10:45:33Z
c40075a72c4b513506a488b8bbb6d23ef23b1f9e,[Flare] Remove capture phase Flare events (#16054),Dominic Gannaway,2019-07-04T20:30:46Z
786186c6928f729c0fc0316023da071b1cceea13,[Flare] createInitialState -> getInitialState (#16051),Dominic Gannaway,2019-07-04T17:06:18Z
c64f40d718021b8574e7e245938d0c8072266ee2,[Flare] Remove dead event target code (#16063),Dominic Gannaway,2019-07-04T12:10:55Z
e6bfa327daf1034d207cdf02df373f87f59caa07,[Flare] Cleanup ReactFiberEvents-test (#16047),Dominic Gannaway,2019-07-03T10:31:06Z
b365ee2816896ea9f01c1f65e65d403955762f8f,[Fire] Remove unused React fire fork (#16046),Dominic Gannaway,2019-07-03T10:05:28Z
b8f91e6649ccbd9e3bcb6b5907bb20e411ee2074,"[fail] reset IsThisRendererActing correctly (#16042)

* [fail] reset IsThisRendererActing correctly

I missed this in https://github.com/facebook/react/pull/16039. I'd pointed at the wrong previous state, corrupting it in further use. This PR fixes that, and adds a test to make sure it doesn't happen again.

* warn for unacted effects only in strict mode",Sunil Pai,2019-07-03T02:04:22Z
bd846459d6c96e6caa64c44e0fb42696db839447,"[fail] Only warn on unacted effects for strict / non sync modes (#16041)

* only warn on unacted effects for strict / non sync modes

(basically, when `fiber.mode !== 0b0000`)

Warnings on unacted effects may be too noisy, especially for legacy apps. This PR fires the warning only when in a non sync mode (concurrent/batched), or when in strict mode. This should make updating easier.

I also added batched mode tests to the act() suite.

* explicitly check for modes before warning, explicit tests for all modes",Sunil Pai,2019-07-03T00:29:45Z
6b946ad9daa39fbb4959e34060d58393f46f0d0c,[Flare] Add more functionality to Scroll event resonder (#16036),Dominic Gannaway,2019-07-02T22:51:31Z
a457e02ae3a2d3903fcf8748380b1cc293a2445e,"allow nested `act()`s from different renderers (#16039)

* allow nested `act()`s from different renderers

There are usecases where multiple renderers need to oprate inside an act() scope
- ReactDOM.render being used inside another component tree. The parent component will be rendered using ReactTestRenderer.create for a snapshot test or something.
- a ReactDOM instance interacting with a ReactTestRenderer instance (like for the new devtools)

This PR changes the way the acting sigils operate to allow for this. It keeps 2 booleans, one attached to React, one attached to the renderer. act() changes these values, and the workloop reads them to decide what warning to trigger.

I also renamed shouldWarnUnactedUpdates to warnsIfNotActing

* s/ReactIsActing/IsSomeRendererActing and s/ReactRendererIsActing/IsThisRendererActing",Sunil Pai,2019-07-02T21:20:17Z
a865e4a64292756cb0d4ef4f23dca55ebe4ae221,Clone a custom hook node before use (#16019),Anton Korzunov,2019-07-02T16:54:10Z
6cf2234a57450fdc19ffa373df9cecfce74fb8c0,[Flare] Do not block mouse presses on scroll (#16033),Dominic Gannaway,2019-07-02T15:58:46Z
5cb8f6f344a6f3e296f095b8d151157d1f05c835,"Add tail=""collapsed"" option to SuspenseList (#16007)

* Add tail=""collapsed"" option

* Fix issue with tail exceeding the CPU time limit

We used to assume that this didn't suspend but this branch happens in
both cases. This fixes it so that we first check if we suspended.

Now we can fix the tail so that it always render an additional fallback
in this scenario.",Sebastian Markbåge,2019-07-02T02:56:34Z
46bd11ac3e086fc25b2704679c69c089803779f7,"Flush sync bug (#16027)

* added flush sync test

* added code to run flushSync with ImmediatePriority

* added code to run flushSync with ImmediatePriority

* fixed flow error

* fixed flow error",lunaruan,2019-07-01T23:58:04Z
8e90194f7d38136be48bfebc8fc3c45d88dbc2d6,Add comment about 3rd party integrations,Marvin Hagemeister,2019-07-01T21:48:52Z
5ec387aa829d0f9bef9b1e2871491c4c30fcf188,Mark reload-and-profile attach as configurable,Marvin Hagemeister,2019-07-01T21:35:35Z
933c664ad6173adda1021ee1cc2d9233c3c13e22,"SuspenseList Optimizations (#16005)

* Add a bunch of optimizations to SuspenseList

We now are able to bail out of reconciliation and splitting out the tail
during deep updates that hasn't changed the child props. This only
works while the list wasn't suspended before.

I also moved the second render of the ""head"" to the complete phase. This
cleans it up a bit for the tail collapsing PR.

For this second pass I also use a new technique of resetting the child
Fibers for the second pass. This is effectively a fast path to avoid
reconciling the children against props again.

* Move to didSuspend from SuspenseListState to the effectTag

The effectTag now tracks whether the previous commit was suspended.

This frees up SuspenseListState to be render-phase only state.

We use null to mean the default ""independent"" mode.

* Rename to SuspenseListState to SuspenseListRenderState

* Reuse SuspenseListRenderState across render passes

* Add optimization to bail out of scanning children if they can't be suspended

This optimized the deep update case or initial render without anything
suspending.

We have some information available to us that tell us if nothing has
suspended in the past and nothing has suspended this render pass.

This also fixes a bug where we didn't tag the previous render as having
suspended boundaries if we didn't need to force a rerender.

* rm printChildren

oops",Sebastian Markbåge,2019-07-01T21:25:07Z
fbbbea16e11e849d2a75e0b0d66e38266783a01c,fix word async -> concurrent (#15844),Heaven,2019-07-01T16:32:30Z
eb2ace1281611933ff1d7bd6f757d9bb17b2f5e1,[Flare] Bring Flare support to React Native Fabric (#15887),Dominic Gannaway,2019-06-28T00:22:32Z
9b0bd43550206e04bfe9ca695e5981eff0e2d03f,[Flare] Re-label Flare flag (#16014),Dominic Gannaway,2019-06-28T00:11:11Z
8b88ac2592c5f555f315f9440cbb665dd1e7457a,[Flare] Remove event targets including TouchHitTarget (#16011),Dominic Gannaway,2019-06-27T22:58:48Z
f11540926d2b28ec1f227a79ec9e95b75708c2e3,Handle changes at module boundaries (#16002),Dan Abramov,2019-06-27T19:53:03Z
915dfe6977e17dfdf364bced50e7c26d54ee72ab,"Slightly improve performance of hydration. (#15998)

* Slightly improve performance of hydration.

Avoid loading nodeType and data couple times from the same node in a row,
but instead load them only once, which will help engines to run this code
faster, especially during startup of the application. The general approach
is still not ideal, since hydrating this way forces the browser engine
to materialize JavaScript wrapper objects for all DOM nodes, even if they
are not interesting to hydration itself.

* Fix condition for COMMENT_NODEs.

* Improve general code readability",Benedikt Meurer,2019-06-27T14:23:14Z
824e9bec7a3f5aa290e5f4e7d7ad52261a7c5d40,[Flare] Fix issues with touch + pointer interactions (#15997),Dominic Gannaway,2019-06-26T21:25:49Z
dd93357aa073e4cf783475832ec7e354f108d822,[Flare] Move click handling back into target phase (#15993),Dominic Gannaway,2019-06-26T19:44:44Z
4d307de458dfdf25e704cb2ca20b0578bba8998c,"Prefix mock Scheduler APIs with _unstable (#15999)

For now this is only meant to be consumed via `act`.",Andrew Clark,2019-06-26T19:16:08Z
9b55bcfc6b4dec5766565a1ba4179be975a2f053,[Flare] Add Hooks to event modules (#15953),Brandon Dail,2019-06-26T07:47:21Z
20da1dae4b9523ee94dc67797b11ec789e3acc68,"Fix error logging in getDerivedStateFromProps (#15797)

* Fix error logging in getDerivedStateFromProps

* Update tests, don't log for both error boundary methods

* Re-add change lost in rebase",Ricky,2019-06-25T17:02:27Z
6088a201e12258a6d0e36dbb0d2208a57ec133ba,[Flare] Fix Press scroll cancellation handling (#15983),Dominic Gannaway,2019-06-25T13:31:48Z
fd601fb2197c8079733a46b907d049bdbfedfe29,[Flare] Move all event responders to dom directory (#15981),Dominic Gannaway,2019-06-25T08:32:20Z
827cbc4d00b668af6bbcca98f1730d4c8a546845,Rename StatelessComponent to FunctionComponent in react-is/README.md (#15963),Veniamin Krol,2019-06-24T23:21:58Z
d48db594ec762e42bb87b328f9442545ee662aa3,eslint-plugin-react-hooks@1.6.1,Dan Abramov,2019-06-24T21:31:14Z
7439b48cf4356473e4f1596e47aac34c8345163a,"Add explicit support for ESLint 6.0.0 (#15974)

Preemptively update tests wrt 'parser' requiring an absolute
path rather than a package name, even though the project is
still using ESLint 4.

Fixes #15971",Thomas Broyer,2019-06-24T21:30:12Z
fce15f14d38d680f3bdee3a124e9e94e91520e16,"don't fire missing act() warnings for react-art (#15975)

* use toWarnDev for dom fixture tests

forks toWarnDev from root into fixture/dom, updates tes tests to use it

* disable act() warnings for react-art()

- For 'secondary' renderers like react-act, we don't want to fire missing act() warnings; the wrapping renderer will fire warnings anyway, and when it flushes, it flushes effects *across* renderers.

- I could have used isPrimaryRenderer as the flag, but this is marked as false for react-test-renderer, and we *do* want the warning to fire for it. Hence a new flag.

* add missing dependency `art` to fixtures/dom",Sunil Pai,2019-06-24T18:18:26Z
20f3546963c60c0030881049be0222a05601fa31,[Flare] Ensure Press event hook does not execute side-effects (#15976),Dominic Gannaway,2019-06-24T17:31:49Z
d420d2ccb6223a66d5e8fe824ac0d31ed5bf87a1,"[Fresh] Retry failed roots on refresh (#15966)

* Retry failed roots on refresh

* Don't prevent retry after error -> render(null) special case

The check wasn't very resilient because in Concurrent Mode it looks like we can get further follow-up commits even if we captured an error. So we can't reliably distinguish the case where after an error you _manually_ rendered null.

Retrying on an edit after a tree failed _and_ you rendered null in the same tree seems fine. It's also very unlikely a pattern like this actually exists in the wild.",Dan Abramov,2019-06-24T15:54:54Z
844cdb22d602ceb453d74b3593dfd8f503d00bba,"Merge pull request #331 from trueadm/flare_displayName

[Flare] Update event component displayName",Brian Vaughn,2019-06-24T14:48:24Z
04b77c630492963aa2c81ae43fb537fd08b5c056,"followup to #15763, fix failing test in ReactDOMTracing-test (#15972)

* followup to #15763, failing tests in ReactDOMTracing-test

It was me. I broke the build.

* [ignore] add a newline to trigger a build",Sunil Pai,2019-06-24T10:44:37Z
e1c5e8720d5d47974c14c125dbaf3dc608a92936,"warn if passive effects get queued outside of an act() call. (#15763)

* warn if passive effects get queued outside of an act() call

While the code itself isn't much (it adds the warning to mountEffect() and updateEffect() in ReactFiberHooks), it does change a lot of our tests. We follow a bad-ish pattern here, which is doing asserts inside act() scopes, but it makes sense for *us* because we're testing intermediate states, and we're manually flush/yield what we need in these tests.

This commit has one last failing test. Working on it.

* pass lint

* pass failing test, fixes another

- a test was failing in ReactDOMServerIntegrationHooks while testing an effect; the behaviour of yields was different from browser and server when wrapped with act(). further, because of how we initialized modules, act() around renders wasn't working corrrectly. solved by passing in ReactTestUtils in initModules, and checking on the finally yielded values in the specific test.
- in ReactUpdates, while testing an infinite recursion detection, the test needed to be wrapped in an act(), which would have caused the recusrsion error to throw. solived by rethrowing the error from inside the act().

* pass ReactDOMServerSuspense

* stray todo

* a better message, consistent with the state update one.",Sunil Pai,2019-06-24T10:18:24Z
39b97e8eb87b2b3b0d938660e1ac12223470fdf5,Report refreshed families to the caller (#15957),Dan Abramov,2019-06-22T22:57:54Z
d271df5c993ba54408969fbfc4b5e0f751a4cf0c,Use function expression for custom Hook signature argument (#15956),Dan Abramov,2019-06-22T10:54:22Z
4189f712c16cfd6365c163525527a30ef2518b99,"[Scheduler] Increase max frame length to 300

Forgot to apply this change before merging.

https://github.com/facebook/react/pull/15959#discussion_r296429705",Andrew Clark,2019-06-22T08:38:19Z
595c9414ba1097eceaab8323de35075507f64fac,"[Scheduler] Fix navigator.isInputPending call

Must be called as a method.",Andrew Clark,2019-06-22T07:50:13Z
e7fcfe104734c081bab7418a22ec74a1a34e0709,[scheduler] Put isPendingInput behind a flag (#15962),Andrew Clark,2019-06-22T07:46:27Z
6568a79931bb335f2c997ed9efbc533f2677df5c,"[Scheduler] requestPaint (#15960)

* [Scheduler] requestPaint

Signals to Scheduler that the browser needs to paint the screen. React
will call it in the commit phase. Scheduler will yield at the end of
the current frame, even if there is no pending input.

When `isInputPending` is not available, this has no effect, because we
yield at the end of every frame regardless.

React will call `requestPaint` in the commit phase as long as there's at
least one effect. We could choose not to call it if none of the effects
are DOM mutations, but this is so rare that it doesn't seem worthwhile
to bother checking.

* Fall back gracefully if requestPaint is missing",Andrew Clark,2019-06-22T07:15:09Z
8d4ddd33acabe139dea0c9c50386143e6bc994f4,"[Scheduler] Yield less if there's no pending input (#15959)

At the end of each frame, Scheduler yields control of the main thread so
the browser can execute important tasks; most importantly, painting the
screen and responding to user input. There's some overhead involved in
regaining control of the main thread, so we'd like to yield as
infrequently as possible to keep the UI responsive.

The reason we yield on every frame is because there's no way for us to
know whether we're blocking user input.

`isInputPending` is an experimental browser API that gives us this
information. It tells us whether there's a pending user input, which
also means it tells us if there's *not* a pending user input. We can use
this signal to decide whether it's OK not to yield.

There's a max frame length after which we'll yield regardless, as a
precaution against blocking non-input tasks that we don't know about.",Andrew Clark,2019-06-22T07:05:38Z
d77d12510b1a1c37484d771a323e0a02cbeb9ba7,"Expire rendering the tail of SuspenseList after a timeout (#15946)

* Expire rendering the tail of SuspenseList after a timeout

This is the first Suspense feature that isn't actually dependent on IO.

The thinking here is that it's normal for a SuspenseList to show loading
states, and it'll be designed to handle it one at a time.

However, sometimes there are lists with really big items that take a long
time to CPU render. Since data can become available as we do that, it is
likely that we have all the data and become CPU bound.

In that case, the list would naively just render until the end and then
display all items at once. I think that's actually what you want for fast
lists. However, for slow ones (like News Feed), you're better off showing
a few rows at a time.

It's not necessarily one at a time because if you can do many in a short
period of time and fit them all on the screen, then it's better to do them
all at once than pop them in one at a time very quickly.

Therefore, I use a heuristic of trying to render as many rows as I can in
500ms before giving up.

This timer starts before the first row of the tail and we only check it
after. This ensures that we always make a little progress each attempt.
An alternative approach could be to start the time before doing the head
of the list but we don't want that being slow prevent us from making
further progress.

Currently, I disable this optimization at Never priority because there's
nothing intermediate that becomes visible anyway.

* Fix tracing through a SuspenseList

This ensures that we can spawn new work during render through arbitrary
priorities.

We'll need this for other features too.

Since each priority can commit separately we need to use an array to
include the current interactions on each priority.",Sebastian Markbåge,2019-06-22T01:05:34Z
dc298fdf91b6056b097bce0eb05cfe90b873b158,[Flare] Refinements to useEvent hook (#15955),Dominic Gannaway,2019-06-21T22:10:55Z
696609d49a06cc54d6f6109a9489fe9970745bb5,[Fiber] Clear down dependencies during detachFiber (#15947),Dominic Gannaway,2019-06-21T18:54:04Z
a5ed2f98f97c137322138d48e90d3510e6d83b5a,[Flare] Guard against stateNode being null (#15952),Dominic Gannaway,2019-06-21T18:14:03Z
34ce57ae751e0952fd12ab532a3e5694445897ea,[Flare] Refine flow type annotations (#15950),Dominic Gannaway,2019-06-21T11:32:43Z
4f92fbce5cc409436ec7625ac08d3a709a4d8f31,[Flare] Move createEvent back to React object (#15943),Dominic Gannaway,2019-06-21T09:12:56Z
175111de723979161b73c2751c3396d22f405dfa,"Lazily initialize dependencies object (#15944)

Most fibers do not have events or context, so we save memory lazily
initializing this container node.

Follow-up from #15927",Andrew Clark,2019-06-21T03:12:22Z
720db4cbe675e80820ec81abab499492309b9252,"[Flare] Add useEvent hook implementation (#15927)

* [Flare] Add useEvent hook implementation

Validate hooks have decendent event components

Few fixes and displayName changes

Fix more responder bugs

Update error codes

* Add another test

* Address feedback",Dominic Gannaway,2019-06-21T02:12:40Z
6ff4c9de1c1c8f47148b68651a9f8ab72b5d31f8,"[Flare] Press: fix stale deactivation region state (#15931)

The responder region calculation logic wasn't updating the deactivation region
during the lifetime of an event instance, causing incorrect behaviour when the
current press ends outside the press target and if the press target has moved
since the last time the first-and-only time the deactivation region was
measured.",Nicolas Gallagher,2019-06-21T00:10:54Z
7a4c3e3b732856618f3a5d0875bb9d563772cb0c,Make global names more obscure (#15941),Dan Abramov,2019-06-20T19:20:09Z
270dc2e4debe8c198ce6dc9200ab72df4ee4926b,"Add forwards and backwards options to SuspenseList (#15918)

* Add forwards option

* Add backwards option

* Add comment

* Add customized warning messages for case and typos

* Add some more tests for insertions and updates in start/middle/end",Sebastian Markbåge,2019-06-20T18:03:47Z
5368f7316c8ae489c6a271694166158428ee4a5e,[Flare] Fix keyboard keyup regression (#15938),Dominic Gannaway,2019-06-20T16:00:09Z
3d0af2aea8c95d748af3b958de20668f247667da,Don't consider require-like calls to be likely HOCs (#15940),Dan Abramov,2019-06-20T15:13:18Z
d4f384d25b9b6da4b88cde08783530df1831d8d4,"[Fresh] Throw in prod and change annotation (#15939)

* Disable React Refresh Babel transform in prod

* Throw early if React Refresh runtime is imported in production

* @hot reset -> @refresh reset",Dan Abramov,2019-06-20T13:29:00Z
ff91bfa58ce817c8c8c1cbe8fcdd7584c75c36ee,"[act] reset scope depth on synchronous errors (#15937)

* reset scope depth on synchronous errors

we weren't resetting the acting scope depth on sync errors thrown in the callback. this fixes that.

* typos

* add a test to make sure sync error propagate",Sunil Pai,2019-06-20T12:50:53Z
e61c9e0a2618acde0c6000ef59b0ca3694587e44,[Flare] Fix Press retention state regression (#15936),Dominic Gannaway,2019-06-20T12:01:56Z
76864f7ff729f8293e8e772da7ad8416d7def6b3,"Add SuspenseList Component (#15902)

* Add SuspenseList component type

* Push SuspenseContext for SuspenseList

* Force Suspense boundaries into their fallback state

In the ""together"" mode, we do a second render pass that forces the
fallbacks to stay in place, if not all can unsuspend at once.

* Add test

* Transfer thennables to the SuspenseList

This way, we end up retrying the SuspenseList in case the nested boundary
that just suspended doesn't actually get mounted with this set of
thennables. This happens when the second pass renders the fallback
directly without first attempting to render the content.

* Add warning for unsupported displayOrder

* Add tests for nested sibling boundaries and nested lists

* Fix nested SuspenseList forwarding thennables

* Rename displayOrder to revealOrder

Display order has some ""display list"" connotations making it sound like
a z-index thing.

Reveal indicates that this isn't really about when something gets rendered
or is ready to be rendered. It's about when content that is already there
gets to be revealed.

* Add test for avoided boundaries

* Make SuspenseList a noop in legacy mode

* Use an explicit suspense list state object

This will be used for more things in the directional case.",Sebastian Markbåge,2019-06-20T02:34:28Z
e9d0a3ff252ea72b1aa5e8df969304ff5c9aa0a4,"[Fresh] Track mounted roots via DevTools Hook (#15928)

* Track mounted roots via DevTools Hook

* Add helper utilities to the runtime

These utilities will likely be needed by all module systems, so let's just put them here.

* Wrap more things in __DEV__

* Fix tests to also be DEV-only",Dan Abramov,2019-06-19T23:12:43Z
35ef78de3ea988faa2579850667b1c04ec98403e,"[Scheduler] Integrated timers (#15911)

Adds a `delay` option to `scheduleCallback`. When specified, the task is
not scheduled until after the delay has elapsed.

Delayed tasks are scheduled on a timer queue maintained by Scheduler,
instead of directly with the browser. The main benefit is to reduce the
number of native browser timers that Scheduler's `message` event handler
has to contend with; so, after yielding to the browser at the end of the
frame, Scheduler will more quickly regain control of the main thread.
Because we're able to flush the timer queue without yielding to browser
timer events, there's also less task switching overhead (though in the
absence of `isInputPending`, this is mostly a theoretical win since we
yield every frame regardless).

If the queue of non-delayed tasks is non-empty — that is, if there is
pending CPU bound work — Scheduler is able to avoid a browser timer
entirely by periodically checking its own timer queue while flushing
tasks (inside the `message` event handler). Once the CPU-bound work is
complete, if there are still pending delayed tasks, Scheduler will
schedule a single browser timer that fires once the earliest delay
has elapsed.",Andrew Clark,2019-06-19T23:05:07Z
3af91eb8cee7cbfb482e4bbee91b81822e264916,"[Scheduler] Use continuation pattern for posting host callback (#15910)

* [scheduler] Internal rename: Callback -> Task

Rename Callback type to Task. Does not affect the public API, only
internal names, though eventually we'll probably want to align with the
WICG Main-thread Scheduling proposal
(https://github.com/WICG/main-thread-scheduling).

* [scheduler] flushFirstTask() -> flushTask(task)

Pass task as an argument to `flushTask` instead of using a module-
level variable.

* [scheduler] Add startTime field

This does not change any semantics, but in the future `startTime` may
represent a future time, to support delayed tasks.

* [Scheduler] Use continuation pattern for host cb

As I prepare to implement integrated timers, I noticed some
peculiarities in the Scheduler implementation that could afford to be
cleaned up.

This is a refactor and shouldn't affect any observable behavior; mostly
it removes some concepts that existed in earlier iterations of Scheduler
and are no longer needed.

The main change is to how the DOM implementation schedules an additional
callback before yielding to the main thread. It used to follow the same
code path for scheduling task; now it has its own branch directly
inside the message event handler. The special case for error handling
— where we call `postMessage` immediately without waiting for rAF —
has similarly been localized inside the catch block of the message
event handler.",Andrew Clark,2019-06-19T22:57:33Z
81e5e9be0b7de8cd0092f33e5741a42ada1b0316,Updated @reach/tooltip to v0.2.2 for a bugfix,Brian Vaughn,2019-06-19T22:43:15Z
b62ae16429dddefa5f765a747f57933cd7ce73c2,[Flare] Rename createEventComponent -> createEvent (#15929),Dominic Gannaway,2019-06-19T20:12:14Z
35600be1daaec741cf07466c0c874caf0ddc12b3,Changed Chrome manifest version from 4.0.0.0 to 4.0.0,Brian Vaughn,2019-06-19T18:06:36Z
f4e1ac8cafb75dfab129b95f0eb39591579f3d03,"[Flare] Press events include defaultPrevented (#15916)

* Rename `disableContextMenu` to `preventContextMenu`
* Change the behaviour of `preventContextMenu` so that `onContextMenu` is still called when the native context menu is prevented.",Nicolas Gallagher,2019-06-19T18:00:44Z
89a0886872703912938f4182212cf81d93a68344,[Flare] Update event component displayName,Dominic Gannaway,2019-06-19T16:43:15Z
4a7a39b594f58dbf4e5c36251c4947bda19fce47,[Flare] Add RN build step for ReactTypes (#15926),Dominic Gannaway,2019-06-19T12:27:10Z
0bd7551146f0a820040daf684c7ab494c7a7f459,"Remove mention of Prepack (#15922)

We aren't shipping Prepack anytime soon. FB-only: see D15585102.",Christoph Nakazawa,2019-06-19T10:05:28Z
083bf8d98b2cdb7af7b53d2f45b86afc91e98413,Don't try to convert absolute paths to relative,Brian Vaughn,2019-06-19T01:40:05Z
0e4005e0a19761bff83c0329b4d46078c689ff37,Added command to build Chrome CRX,Brian Vaughn,2019-06-18T22:44:22Z
689beef6f5d0adab166f5eb0aac59eba6100677a,[Flare] Move unstable_createEventComponent to ReactDOM (#15890),Dominic Gannaway,2019-06-18T22:41:00Z
98454371a995d73a6cb2f3f4770c13945fb78ea4,Construct Error at invariant call site for clearer stack traces (#15877),Moti Zilberman,2019-06-18T18:38:33Z
abc8ef3d5da8652e4741212d4da0d3fc72d70451,Display unnamed custom hooks as 'Anonymous',Brian Vaughn,2019-06-18T18:37:29Z
f97b9516664046643bd04eb391861b55910d29ee,[Flare] add disableContextMenu to Press (#15909),Nicolas Gallagher,2019-06-18T18:34:34Z
a2c79f2d9e4ec0a631859e226ce91a824892e62c,Fixed hydration for events meta data,Brian Vaughn,2019-06-18T17:50:19Z
cf19916be7d3e89ddda4b65d85f82ec37b7351e9,Tweaked overflow check,Brian Vaughn,2019-06-18T15:59:27Z
46def793de8e0487b37e65169b6de821fba4693e,Merge branch 'when-render-hidden' of https://github.com/justingrant/react-devtools-experimental into justingrant-when-render-hidden,Brian Vaughn,2019-06-18T15:52:08Z
3988c27d70f337038d396371dd020067685af5b8,"Merge pull request #325 from bvaughn/hydration

Lazily send props/state/hooks across the bridge",Brian Vaughn,2019-06-18T15:50:21Z
6298fd424865811a5af655f01ee8e791c9298fc5,Hardened the hooks dehydration check,Brian Vaughn,2019-06-18T15:47:37Z
a56fd4c36dd7cbfca5a02fbe0389c3c7ff9f0100,Tidied up. Added comments. Renamed a few things.,Brian Vaughn,2019-06-18T15:40:58Z
8e3cd8ab1e857ccc513c0516f4cceb0ad6847be3,Debounce inspect-element polling,Brian Vaughn,2019-06-18T14:41:30Z
6c03f6abbdc2d9154ac908ff648d50a2a4d7ddb6,Tidied up a bit,Brian Vaughn,2019-06-17T21:49:19Z
717af9f5c339523f4855c555b8c039f83f0fca8b,Updated the hydration test harness to cover a bit more,Brian Vaughn,2019-06-17T21:37:49Z
d3d8a5d8b1fa49a0f61c2596dd81232af9a28908,Hooks hydrate/dehydrate,Brian Vaughn,2019-06-17T21:30:34Z
7a94ad4e8a071ebaf8adb329cb4939be07b8b269,Added props/state/context inspection to KeyValue,Brian Vaughn,2019-06-17T18:30:53Z
cd98e63b47198147cfd140cd4454a6db68e08a9f,"[Fresh] Fall back to Map/Set if Weak equivalents are not available (#15907)

* Fall back to Map/Set if Weak equivalents are not available

* Fix Prettier vs Flow fighting",Dan Abramov,2019-06-17T15:00:29Z
a3c5b1fb8bca787eaeef2f39a72920ea03da179c,[Fresh] Rename findHostNodesForHotUpdate to findHostInstancesForHotUpdate (#15904),Dan Abramov,2019-06-17T14:06:43Z
a6d3f30f95f7d5d3a5c637f878b2b2cdb3fbe65b,Initial support for hydration added to both renderer interfaces.,Brian Vaughn,2019-06-17T00:32:37Z
7985bf7d50b15c1be61326b7f80d56568cef67a3,Remove outdated test renderer comments (#15898),Sebastian Markbåge,2019-06-15T23:09:17Z
f0156766dcfd46cd0e07c70cb64f40acbc2b1a4b,[Fresh] react-fresh => react-refresh (#15888),Dan Abramov,2019-06-15T18:36:46Z
a15f77670845ee667c09a0a8b74339c565eb6af2,fix: ensure when-rendered content is never hidden,Justin Grant,2019-06-15T16:24:37Z
801feed95c9fa3e26d1f3e534ac3a88b127652ca,"Interaction tracing works across hidden and SSR hydration boundaries (#15872)

* Interaction tracing works across hidden and SSR hydration boundaries",Brian Vaughn,2019-06-15T01:08:23Z
661562fc52b211cb39459e413c4c5cd5debaf90f,"Fix outdated test comments (#15892)

Comments for this unit test are confusing because they refer to an
earlier version of the same test.",Andrew Clark,2019-06-14T23:51:27Z
788da69b74d2311ae2669f7936a9a33ec2469241,"[Suspense] Fix bad loading state not being delayed (#15891)

Fixes a bug where a bad loading state is initially suspended, but a
subsequent update with the same expiration time causes it to
commit immediately.",Andrew Clark,2019-06-14T23:10:39Z
353e0ee47492c42160aab81e60a59b08e40bb0b3,[Flare] remove stopLocalPropagation option + modify responder ownership (#15889),Dominic Gannaway,2019-06-14T22:11:54Z
a146c1f9ed2f13bb885a5f49623d45f03c0bb424,[Flare] Refactor of Press to fix various issues (#15878),Dominic Gannaway,2019-06-14T21:52:26Z
de7a09c1e0425f8719fa9c27a583a28ae5d791cb,"[Fresh] Make transform resilient to plugin order (#15883)

* Run Fresh tests in two modes: with and without destructuring

Destructuring transform messes up the way we collect signatures for Hooks. This adds failing tests.

* Extract collecting calls to Hooks into a separate visitor

This introduces a bit of a perf penalty but makes our plugin resilient to presence of destructuring transform and their order. Fixes new tests.

* Inline some logic into the call visitor",Dan Abramov,2019-06-14T13:57:20Z
2fe8fd290b0c315d6a9af99f7a4e038a2026598a,"[Suspense] Use style.setProperty to set display (#15882)

Follow up to #15861.

Turns out you can't set `!important` using a normal property assignment.
You have to use `style.setProperty`.

Maybe Andrew *should* just learn CSS.

IE9 doesn't support `style.setProperty` so we'll fall back to setting
`display: none` without `important`, like we did before #15861 Our
advice for apps that need to support IE9 will be to avoid using
`!important`. Which seems like good advice in general, but IANACSSE.

Tested on FB and using our Suspense DOM fixture.",Andrew Clark,2019-06-14T01:17:17Z
b4b3a1dc6689d950ca90fc00469bb0dbf8c41b23,Fix fuzz test environment variable,Andrew Clark,2019-06-13T22:59:35Z
e91dd70ba28e7a20da3e5de8d787f3cde56341bd,"Remove disableYielding feature flag (#15654)

Obviated by Batched Mode.",Andrew Clark,2019-06-13T22:58:40Z
5e8678a0a9378dd3583b78e52b8d1117625c66b8,Don't send HTMLElements through the bridge when inspecting componetns,Brian Vaughn,2019-06-13T16:09:31Z
9eb6d3465d2c3e0afc47153890063ef5d939e75e,Updated React version check to account for older (<15) versions,Brian Vaughn,2019-06-13T01:56:39Z
96f7646a1a0acf0555632ce00e57522b54b1c91e,Updated hydration logic to handle custom objects,Brian Vaughn,2019-06-12T22:43:15Z
cb10c3d6da2df078c2aa8bcc023cf44b9866671c,Lintfix,Brian Vaughn,2019-06-12T22:17:29Z
f6ec82553de20e39576e5a46a70205c4ad4b0df6,Support toggling Suspense from within owners list,Brian Vaughn,2019-06-12T22:13:51Z
f0a29984f451f68c3c2e1c76527f9192065bdf84,"Merge pull request #320 from gaearon/own

Fix owner tree for legacy backend",Brian Vaughn,2019-06-12T16:58:17Z
4bfabbc32b545da69d6a7c80dca21ac9248494b2,Fix owner tree for legacy backend,Dan,2019-06-12T16:56:25Z
2e40cc4b1838d0c3b16615142e3fbb3fa9875180,"Merge pull request #319 from gaearon/legacy-fix

Fix some legacy backend bugs",Brian Vaughn,2019-06-12T16:36:20Z
fdf753021e4fa14561b2b3363ae19fd89e67fe51,Distinguish functions and classes,Dan,2019-06-12T16:23:29Z
3137553f6d843e1902029985c16ca3002831a85e,State and context are on the public instance,Dan,2019-06-12T15:50:15Z
f352fe2625bc91e65f563def0b351dd5d915c11c,Maintain rootID for lazily crawled trees,Dan,2019-06-12T15:38:35Z
b5850fe3044b20f00b9d5482b56989a2ad259955,Ignore SSR mounts,Dan,2019-06-12T15:15:58Z
4d949d7641490d6df5a96848628bb3fea6cced6d,[React Native] Replace touch discrepancy errors to warnings (#15866),Timothy Yung,2019-06-12T10:37:41Z
45acbdc0ba05c29f849011eaed5e5b221b219d06,[Flare] Unsure root events are removed on contextmenu (#15862),Dominic Gannaway,2019-06-12T01:19:02Z
198ed661c51ab2319897eaccd368d21e5ec9a9a6,"[Suspense] Use !important to hide Suspended nodes (#15861)

Suspended nodes are hidden using an inline `display: none` style. We do
this instead of removing the nodes from the DOM so that their state is
preserved when they are shown again.

Inline styles have the greatest specificity, but they are superseded by
`!important`. To prevent an external style from overriding React's, this
commit changes the hidden style to `display: none !important`.

MaYBE AnDREw sHOulD JusT LEArn Css

I attempted to write a unit test using `getComputedStyle` but JSDOM
doesn't respect `!important`. I think our existing tests are sufficient
but if we were to decide we need something more robust, I would set up
an e2e test.",Andrew Clark,2019-06-11T18:40:06Z
191920605fa88949e640dbf6da4f8659020a4566,"[Fresh] Implement missing features (#15860)

* Fix existing test

This test included a change in variable name. It wasn't needed, and distracts from the actual thing being tested (the annotation).

* Reset state on edits to initial state argument

* Add a way to check whether there are hot updates

prepareUpdate() now returns null if there are none.

* Add a way to query host nodes for families",Dan Abramov,2019-06-11T18:37:42Z
6c8ae706ee22e6a3f69940be0a51cc9763a3a89f,"Merge pull request #316 from gaearon/lighter

Make children selection lighter",Brian Vaughn,2019-06-11T14:13:01Z
3bca6b28cd25a1eba03fb4f2fdf986f307cced13,Make children selection lighter,Dan Abramov,2019-06-11T02:10:24Z
a08e9279ecd7c146f2391427915274a48b4e02f4,"Merge pull request #315 from bvaughn/settings

Settings panel inlined",Brian Vaughn,2019-06-10T22:44:23Z
dd748ef574b1d7c3993d87e91e7a9122bcb042bf,Moved logic to only send updated filters across Bridge to the Store (and added tests),Brian Vaughn,2019-06-10T22:36:29Z
91e3f6cd4df1a167fb6e06b8e0632940386000bc,Removed console.log,Brian Vaughn,2019-06-10T22:05:12Z
e2e598c8245169c8875dcfdc70cde2bfdb5e4074,Remember last preferences tab via local storage,Brian Vaughn,2019-06-10T22:03:05Z
19ed98d0c25fc4aeb3d96656c3f171497d623e29,Removed Settings panel in favor of new shared Settings modal,Brian Vaughn,2019-06-10T21:57:26Z
402a68d816504c76cac71078e4f10c6d987fcf79,Fixed minor border bug in Profiling tab toolbar,Brian Vaughn,2019-06-10T18:14:27Z
c403ae4d35391878dd61e2efbf342c5baac8efdb,[Flare] Move Press root event removal till click phase (#15854),Dominic Gannaway,2019-06-10T18:08:53Z
f4cd7a38d2a5dc8f9081b41da124ac380d33dc62, [Flare] Listen to document.body + add stopPropagation to Press (#15853),Dominic Gannaway,2019-06-10T15:51:26Z
37c331533d9c8b2136d1b5953d80cb0da230769a,"Merge pull request #173 from bvaughn/legacy

Support legacy React versions",Brian Vaughn,2019-06-09T23:24:00Z
e66fcaf17d48adbda479251c86ede7cf1e253fdf,Nit,Brian Vaughn,2019-06-09T23:22:23Z
8f532350175dbdac8a53fbdb92b90ac62529d4c3,Fixed regression fixtures,Brian Vaughn,2019-06-09T23:16:06Z
80bf1ba0eb178765c8ee49ab59998f2aa9ed8234,Merge branch 'master' into legacy,Brian Vaughn,2019-06-09T23:00:12Z
ea03ddd583baad7790f36959fb4abe308e85ac24,Added Flow type coverage for all EventEmitter subclasses,Brian Vaughn,2019-06-09T22:50:17Z
b3046c6e196eadd879e971ea3f1b2f6bacff1119,"Merge pull request #310 from bvaughn/track-changed-props

Add profiling option to track why a component rendered",Brian Vaughn,2019-06-09T00:45:46Z
3904d634bb0b4d9c43b58a97878f266dea29ea02,Added an explicit 'did not render' label,Brian Vaughn,2019-06-09T00:36:17Z
341d1574cbe11eae8c7bf4451428695a26124590,Tweaked a few inline comments,Brian Vaughn,2019-06-09T00:30:11Z
9047f371e27a3711abf197bb4f24acbae6313c3e,Fix minor toolbar border misalignment,Brian Vaughn,2019-06-09T00:18:05Z
4f92af17ea53778e68e220bf50849dda311af6cb,"Only show ""rendered at"" if selected Fiber committed at least once",Brian Vaughn,2019-06-09T00:17:56Z
7a72ee5ac04ddbac0d3bab738df5978ec7274da5,Added context changes to sidebar; fixed a initial-mount detection bug,Brian Vaughn,2019-06-09T00:01:38Z
5672d686dc7649e1a3f32f8cdc87f97e3876f564,Fixed some minor CSS issues,Brian Vaughn,2019-06-08T23:45:38Z
6ab522326d971de99e6e6a751661608402e92b08,Added a test for added/removed props,Brian Vaughn,2019-06-08T18:41:39Z
a2f469d7428c1fa3b5632ab221017a8e7e6cac5e,Fixed an increment bug in sidebar for fiber-commits,Brian Vaughn,2019-06-08T16:22:30Z
2d484013465a543b5ab83292e75f549f2a3085de,Added context support to change description,Brian Vaughn,2019-06-08T16:10:54Z
fdc5ca4ba6227d35df89c404542be4ea3f6504d2,Remove dead code,Dan Abramov,2019-06-08T01:42:12Z
90fa0adc0a2d41188f9ddd6db7663a072cad9670,Fix lint,Dan Abramov,2019-06-08T01:37:24Z
65ac53bba41031c313e38ca55509b5e436f668dc,Fixes,Dan Abramov,2019-06-08T01:33:03Z
ad7458bb42d557f5d1d78fd561ab164740962cb0,Merge branch 'master' into legacy,Dan Abramov,2019-06-08T00:54:54Z
9243bc194c240d3f06ccd5e4333f3488f2628e2f,Rewrite to make it sturdier,Dan Abramov,2019-06-08T00:21:30Z
bd5c2e4621c093cc8995dd51c9855d5b5dcc562f,"Initial change tracking implemented
* User profiling setting
* Background collects changed props/state (not added/removed or hooks yet)
* Tests updated",Brian Vaughn,2019-06-07T22:38:26Z
88e59277e7362640bf68799893053f55894e472c,Added HOC badges to Jest Store serialization,Brian Vaughn,2019-06-07T21:10:49Z
21bb66a8c7d96a5af7176a766fc59ddcb30ba676,Added HOC filter test,Brian Vaughn,2019-06-07T21:06:08Z
956935f915923e9b4d8f3264e3b97586d07be3fc,"Merge pull request #308 from bvaughn/dependabot/npm_and_yarn/js-yaml-3.13.1

Bump js-yaml from 3.12.1 to 3.13.1",Brian Vaughn,2019-06-07T20:15:10Z
c2c3e8e6e5245518f70b94b26d07c69c098f6c9c,"Bump js-yaml from 3.12.1 to 3.13.1

Bumps [js-yaml](https://github.com/nodeca/js-yaml) from 3.12.1 to 3.13.1.
- [Release notes](https://github.com/nodeca/js-yaml/releases)
- [Changelog](https://github.com/nodeca/js-yaml/blob/master/CHANGELOG.md)
- [Commits](https://github.com/nodeca/js-yaml/compare/3.12.1...3.13.1)

Signed-off-by: dependabot[bot] <support@github.com>",dependabot[bot],2019-06-07T20:12:54Z
78721bde4cd5a277b168df4673d38cf78d40a5f0,Backend notifies the frontend of Storage API support. Frontend disables e.g. reload-and-profile based on this.,Brian Vaughn,2019-06-07T20:08:49Z
3e3c83aecde5112c064dfb314c589518b8aae081,Updated reload-and-profile temp key to use sessioStorage instead of localStorage,Brian Vaughn,2019-06-07T19:40:59Z
89e36e3976b062584f83c22d43f043cf464c3403,Wrap all calls to localStorage/sessionStorage to avoid potential runtime errors,Brian Vaughn,2019-06-07T17:51:01Z
425473f43fd95a564f07ffcf6dbd105cef9f78b9,[Flare] Improve runtime performance of hit target intersection (#15836),Dominic Gannaway,2019-06-07T14:57:10Z
def56c979756ef232bd0d3dacf79390506abae5f,"[Fresh] Capture Hook signatures lazily on first render (#15832)

* Split the signature call into two calls

This adds a render-time signature call by making __signature__ curried. We need both calls. The init time tells us which type has which signature. The render time call says when's a good time to capture the lazy Hooks tree. This is necessary for supporting inline requires. I will do that in next commit.

* Lazily compute Hook list on first render

This ensures inline requires don't break comparisons between Hook signatures of previous and next versions by caching Hook list at the time of first render.

* Refactor computing Hook signature keys

Instead of a traversal during the comparison, explicitly compute full keys. This makes it easier to debug mismatches.",Dan Abramov,2019-06-06T17:53:12Z
a987206a3698effcc064c59bd7ff518ba5d870f6,Fixed an overflow bug. Added mode-specific CSS style for Firefox.,Brian Vaughn,2019-06-06T17:39:07Z
8cfcfe0fcb4cea285750cf33c0302f80e5f2c358,[Flare] Fix ES6 issues with IE11 (#15834),Dominic Gannaway,2019-06-06T17:38:46Z
d0e041aee83b50e54176d2dc957d86c0f571257e,"[Fresh] Support classes by force-remounting them on edit (#15801)

* Remount classes during hot reload

* Fix a crash when Hook isn't in scope inside the signature

* Minor tweaks

* Support a comment annotation to force state reset

* Refactoring: pass a function instead of WeakMap

This hides the implementation a little bit and reduces how much React knows about the underlying mechanism.

* Refactor: use forceReset to remount unknown Hooks

We already have the logic to reset a component, so let's just reuse it instead of that special case.",Dan Abramov,2019-06-05T23:13:42Z
d1a88ffc5cead233728f5c7d80b197d58d2b0984,Re-add plugin-transform-react-jsx-source plugin for tests,Brian Vaughn,2019-06-05T21:36:01Z
dc9b0810f9f6a2969fb2bb31dd51e3def97456db,Changed react-window alias,Brian Vaughn,2019-06-05T21:33:24Z
9d90189ee3129f3a6169fb510ca33bcf69fd200c,react-window sync flushes scroll updates,Brian Vaughn,2019-06-05T21:30:43Z
6ff733873c662086f919baced2bb80fcffc1b343,Vendored react-window,Brian Vaughn,2019-06-05T21:27:57Z
73c27d8b4987aecc9e960f29b329c3ac8f46cff3,[Flare] Add basic Scroll event responder module (#15827),Dominic Gannaway,2019-06-05T17:20:34Z
c72dceffbce0856711d0fde0fb4f2a312734d591,[Flare] Small Swipe/Drag fixes (#15825),Dominic Gannaway,2019-06-05T16:51:41Z
6aaa43708d28f68c58a24a66d8d09f4b78c79e67,Rename ReactFeatureFlags to remove the `.fb` suffix. (#15826),Christoph Nakazawa,2019-06-05T13:20:09Z
843a59ab607d0141985e1309d05a92c338e413cd,[React Native] Remove eventTypes from ReactNativeBridgeEventPlugin (#15802),Ricky,2019-06-05T12:21:13Z
7b28ad119e96c85bdc4c23cc8ff6c9e9f5a8a73c,"[Flare] EventPriority enum (#15823)

* Same as previous commit, but for Flare

I don't know what the public API for setting the event priority should
be. Right now it accepts a numeric enum, but is this what we want?
Maybe it should be a string enum? I've punted on this for now.

* Add test for hover events",Andrew Clark,2019-06-05T00:20:06Z
7ef5970b2f5f65d09329fd71fbe7df9fde478d67,Removed __source info from production builds,Brian Vaughn,2019-06-05T00:03:13Z
d707a757942e9d5a3a4091c894ebf8d416229012,nit: a quick copy edit for an act() message/comment (#15805),Sunil Pai,2019-06-04T23:36:07Z
cfb79ee5b3d77f8635878194e282096dc9e85ceb,[Flare] Fix isTouchEvent (#15824),Dominic Gannaway,2019-06-04T22:58:11Z
1afc83e7cde6315853cfcca3f80d8025acc0a155,"Tweaked manifest ""version_name"" logic",Brian Vaughn,2019-06-04T21:56:36Z
e158768b16d0946e8c33bd36db91794361e05be0,fix: remove version_name from Firefox WebExtension manifest,Sarhan Aissi,2019-06-04T21:34:20Z
7ed3f6815c1125c85897e8b999f2527fad79225d,"Merge pull request #295 from bvaughn/horizontal-compression

Components tree changes to improve HOCs and browsing deep trees",Brian Vaughn,2019-06-04T20:59:22Z
6b5deeed50769a85e207b436244f7ebe78b800b1,"[Events] Add support for events that are both user-blocking and continuous (#15811)

* [Events] Add EventPriority enum

React DOM's DispatchConfig for synthetic events has an `isDiscrete`
field that affects how updates triggered by an event are scheduled.
Events are either discrete or continuous.

This commit adds an additional type of configuration where an event
has user-blocking priority, but is not discrete. E.g. updates triggered
by hover are more important than the default, but they don't need to
be processed serially. Because there are now three types of event
priority instead of two, I've replaced the `isDiscrete` boolean with an
enum: `eventPriority`.

This commit implements the new enum value but does not change any
behavior. I'll enable it behind a feature flag in the next commit.

I've only implemented this in the legacy event system. I'll leave Flare
for a follow-up.

* enableUserBlockingEvents feature flag

Adds a feature flag to increase the priority of events like `mouseover`,
without making them discrete.",Andrew Clark,2019-06-04T20:35:52Z
7fa5a716e3c0f77ec479768ebe3fa8d09a00af9b,Use Circle CI API v2 to get artifacts job ID (#15821),Brian Vaughn,2019-06-04T20:28:41Z
8d4fb132ef4014cc57de9e4b7cfa82af2c8c8daa,[Flare] Fix nativeEvent.x/y for older browsers (#15820),Dominic Gannaway,2019-06-04T19:58:20Z
2534c0c924d9258b55b730f3ec5f54814beab12d,[Flare] Add event position properties to Hover responder (#15819),Dominic Gannaway,2019-06-04T17:10:15Z
2245206c4ce7b5c47ba67e677ca7e9127b8c2926,Add source location to debug logging info,Brian Vaughn,2019-06-04T15:56:10Z
5963998fbec54872c35ceae45b6ebbaae57254fd,"Display density preference updates :root fontSize

As a result, paddings and sizes (e.g. tab bar heights) will also be impacted now by this preference. More importantly, Profile charts will also use the line height preference, so the 'comfortable' setting will hopefully make profiling data easier to read.",Brian Vaughn,2019-06-04T14:24:14Z
b63a41d38a4e08b1a4831f8b210c548bee5b1aa3,Updated release script to be Workflow aware (#15809),Brian Vaughn,2019-06-04T00:29:06Z
dd43cb5fb941cb253a9f0197a1f3957aebdcf3d8,"[Flare] Fix isPressWithinResponderRegion logic (#15808)

Compare the viewport-relative coordinates of getBoundingClientRect with those
of the event's client{X,Y} values. This fixes press within scrollable nodes.",Nicolas Gallagher,2019-06-03T21:59:26Z
4f6cab547bab2001f74998bd3979134e18ae1257,[Flare] Ignore keyboard interactions on text input children (#15810),Nicolas Gallagher,2019-06-03T21:34:08Z
95a99867f732174f4027410bbae615f3e3d7a2ab,Decreased contrast of HOC badges in selected props panel,Brian Vaughn,2019-06-03T19:51:04Z
ef139a181176d533291d90d2a48d959c1af3597d,"Batched tweaks and bug fixes:

1. Bugfix: Hide tree grouping/background coloring when inside of collapsed subtree.
2. Bugfix: Don't measure and udpate indentation when Components tab is hidden.
3. Tweak: Lower background color for selected subtree in light theme to increase contrast for text.
4. Tweak: Remove FB-specific displayName check/hack since we will address that by modifying the internal require JS transform.",Brian Vaughn,2019-06-03T19:47:26Z
fa1e8df116d835e9d2c41a9bd71b32f91bbfb5ad,chore: use jest-serializer-raw for react-fresh snapshots (#15806),Simen Bekkhus,2019-06-03T19:46:34Z
edfc1bb2b31a1e8e85f61127448bad09581dfe7e,Simplified background highlight style now that corner radius has been removed from selected highlight,Brian Vaughn,2019-06-03T17:46:37Z
06b004b5d49ef97e5ffd213c39e3651195722d19,Renamed <Guideline> to <SelectedTreeHighlight>,Brian Vaughn,2019-06-03T16:39:31Z
fbc6e5d68a7ff394ac4315ce2c24148164ab0fee,Removed outdated comment and Eslint rule ignore,Brian Vaughn,2019-06-03T16:33:48Z
6ac558df2df79c750ca2f0af464281ee2712fa84,Reset max indentation when entering/exiting the owner tree,Brian Vaughn,2019-06-03T16:32:28Z
a173f4eb85a81b86f1457d901be6fc198e36b728,Add HOC component filter,Brian Vaughn,2019-06-03T15:51:50Z
78cf211286107ba178d163655ea53a0d2274c761,Only shrink indentation. Don't increase it again. This avoids 'jumping'.,Brian Vaughn,2019-06-03T15:01:48Z
07da821bfda181a7ee750c12d73d09fbef87d0f3,"[react-native] Rewrite Haste imports in RN shims and add .fb.js extension (#15786)

This commit is a follow-up to https://github.com/facebook/react/pull/15604, which explains more of the rationale behind moving React Native to path-based imports and the work needed in the React repository. In that linked PR, the generated renderers were updated but not the shims; this commit updates the shims.

The problem is that FB needs a different copy of the built renderers than the OSS versions so we need a way for FB code to import different modules than in OSS. This was previously done with Haste, but with the removal of Haste from RN, we need another mechanism. Talking with cpojer, we are using a `.fb.js` extension that Metro can be configured to prioritize over `.js`.

This commit generates FB's renderers with the `.fb.js` extension and OSS renderers with just `.js`. This way, FB can internally configure Metro to use the `.fb.js` implementations and OSS will use the `.js` ones, letting us swap out which implementation gets bundled.

Test Plan: Generated the renderers and shims with `yarn build` and then verified that the generated shims don't contain any Haste-style imports. Copied the renderers and shims into RN manually and launched the RNTester app to verify it loads end-to-end. Added `.fb.js` to the extensions in `metro.config.js` and verified that the FB-specific bundles loaded.",James Ide,2019-06-03T14:58:31Z
f713265a00ac3ad30dc578dde185ec3fcddc995b,Cap indentation increase at a max,Brian Vaughn,2019-06-03T04:01:24Z
8261a3f453b48b012c17653362d0d6c57363ff6a,Removed Tree padding,Brian Vaughn,2019-06-03T03:25:57Z
dc08e80037cfc05e08b1e4ad82210531afb6a227,"Cache list rows by Element ID rather than index

This is important since we are caching element sizes by DOM (in a WeakMap). Toggling (as well as insertion/deletion) might otherwise break this in some cases.",Brian Vaughn,2019-06-03T03:10:30Z
a383c46788fb0b6b9cb3644c675cc89bf48482ae,"[ESLint] don't warn for Flow type variables (#15804)

In Exhaustive Deps check for react-hooks don't warn if the dependency is
a Flow type variable.",Jordan Rome,2019-06-03T01:20:51Z
6b6e571c6808e1ed420f0eafca6083429c1dd9a4,Added HOC badge to owners list dropdown,Brian Vaughn,2019-06-02T17:50:07Z
27d4f0b24d0429ae7569cbc837e1bd3d1d895750,Fixed box drawing chars comment,Brian Vaughn,2019-06-02T17:40:10Z
dc945f6b81fa075efd13e4945586f27f88772058,Fixed a typo in string truncation util,Brian Vaughn,2019-06-02T17:06:05Z
17b04c321c5b494ab2418197c5001603453c6aa3,Cleaned up how we measure children and adjust indentation size,Brian Vaughn,2019-06-02T17:02:22Z
3f0606f3d945a1952e1cbf97ff5b5879c51aee16,Refactored badges to share code and show +count,Brian Vaughn,2019-06-02T01:48:24Z
6a69a6e9918dfdcc63b41312ebe9982789953bae,Added HOC badge to owners stack breadcrumbs,Brian Vaughn,2019-06-02T01:05:59Z
c1989448f46cb41b92c78ae4fb92e08a2e4157ca,Disable guide/group highlight in owners tree  mode,Brian Vaughn,2019-06-02T00:49:51Z
96dc003a708a0d4a7b7959fb0e07ef87067a257d,Removed debounce+animation from indentation adjustment,Brian Vaughn,2019-06-02T00:48:01Z
b5f89988597cf3613edeb424307a84d9334234ac,Added debounce and animation for resize,Brian Vaughn,2019-06-01T18:16:18Z
de9fb0a8a2a04d77405eda3e780fe83d21bb8304,Tweaked guideline background color style,Brian Vaughn,2019-06-01T16:34:39Z
ab7ae785114c9bb9b950883318977d0cf638bc0f,Tweaked a few styles,Brian Vaughn,2019-06-01T16:19:32Z
2845a7883b7dcab926178b578c4ecc06e0e1d3fc,Whoops I broke CI (updating snapshots),Brian Vaughn,2019-06-01T15:44:55Z
aa87b125e778709b880c43471466339b8b2feeeb,"Lots of tweaks
Remove selected guideline in favor of background color for selected subtree.
Add badges in grid format to selected elements prop panel.
Show badges beside owners list.",Brian Vaughn,2019-06-01T15:24:24Z
5763f1d4c458b9d9a769a28b9d92b698bc94533f,"[Events] Nested discrete events across systems

If an event in the old system is dispatched synchronously within an
event from the new system, or vice versa, and the inner event is a
discrete update, React should not flush pending discrete updates before
firing the inner event's handlers, even if the outer event is not
discrete.

Another way of saying this is that nested events should never force
React to flush discrete updates.

Arguably, if the outer event is not a discrete event, then the inner
event _should_ flush the pending events. However, that would be a
breaking change. I would argue this isn't so bad, however, given that
nested events are pretty rare. They don't fit nicely into our event
model regardless, since we don't support nested React renders. In the
future we should consider warning when events are nested.",Andrew Clark,2019-05-31T23:33:11Z
7aa35ceae0d3a4d846498f128227ffa7c84900f4,"Fix casing of shouldflushDiscreteUpdates

shouldflushDiscreteUpdates -> shouldFlushDiscreteUpdates",Andrew Clark,2019-05-30T21:41:04Z
91635dd483c0d4b02836565ca14a1aef23a63ad5,"Switch to ""discrete"" and ""continuous"" terminology

Events were previously described as ""interactive"" or ""non-interactive"".",Andrew Clark,2019-05-30T21:38:16Z
73c380fca77a32af167d85c77553ae5d40c6fda8,"WorkPhase -> ExecutionContext

WorkPhase is an enum that represents the currently executing phase of
the React update -> render -> commit cycle. However, in practice, it's
hard to use because different ""phases"" can be nested inside each other.
For example, the commit phase can be nested inside the
""batched phase.""

This replaces WorkPhase with a different concept: ExecutionContext.
ExecutionContext is a bitmask instead of an enum. It represents a stack
of React entry points. For example, when `batchedUpdates` is called
from inside an effect, the ExecutionContext is
`BatchedContext | CommitContext`.",Andrew Clark,2019-05-31T21:13:10Z
88b39638206d71affb7ed796067b4f2124954c0a,"[Flare] Remove deprecated keypress event (#15795)

`keypress` is a deprecated event.",Nicolas Gallagher,2019-05-31T21:53:09Z
19d95a1368076a5065449b6207d9b2351c1e9c44,"Revert ""Re-added indent lines""

This reverts commit 33432b037f2e539b3e7c479e594960e6fd60eaa3.",Brian Vaughn,2019-05-31T21:41:20Z
63fe08eef56f92956c2d785701cad7f743501e35,"React Events: allow Tab+Alt on Mac in Focus responder (#15679)

* Fix issue with Tab+alt not being considered as isGlobalFocusVisible candidate on Mac
* Add test for Tab+alt on Mac setting pointerType: ""keyboard"" on a focus event",Mateusz Burzyński,2019-05-31T21:33:43Z
33432b037f2e539b3e7c479e594960e6fd60eaa3,Re-added indent lines,Brian Vaughn,2019-05-31T20:34:55Z
5a269e7ced1011885e3622c2bde8d30fcd8ad3ab,Initial POC for compressing horizontal offset for wide/deep trees,Brian Vaughn,2019-05-31T18:24:34Z
2794b92164058f38683cad49f04ff801e04ff34b,Add some support for reordering,Dan Abramov,2019-05-31T17:00:56Z
c3be0859100f065c3b94b3cf43d764cc8a79e05a,"Remove crawling for updates

It doesn't seem necessary to crawl because mounts only happen in the context of updates.

This fixes updates to not be treated as new mounts.",Dan Abramov,2019-05-31T16:40:49Z
6fd83acb1dd29c0a5102204b48369e5ec7879cde,Default to showing host nodes for legacy renderer,Dan Abramov,2019-05-31T14:38:58Z
9f44251ebf60af8331aaff5ced5629675e04e4bd,Remove unnecessary code for host text as we skip it anyway,Dan Abramov,2019-05-31T13:27:22Z
113497cc0e9cebf276a30d916c98c15aa075a225,"[Suspense] Change Suspending and Restarting Heuristics (#15769)

* Track most recent commit time of a fallback globally

This value is going to be used to avoid committing too many fallback
states in quick succession. It doesn't really matter where in the tree
that happened.

This means that we now don't really need the concept of SuspenseState
other than has a flag. It could be made cheaper/simpler.

* Change suspense heuristic

This now eagerly commits non-delayed suspended trees, unless they're
only retries in which case they're throttled to 500ms.

* Restart early if we're going to suspend later

* Use the local variable where appropriate

* Make ReactLazy tests less specific on asserting intermediate states

They're not testing the exact states of the suspense boundaries, only
the result. I keep assertions that they're not already resolved early.

* Adjust Profiler tests to the new heuristics

* Update snapshot tests for user timing tests

I also added a blank initial render to ensuree that we cover the suspended
case.

* Adjust Suspense tests to account for new heuristics

Mostly this just means render the Suspense boundary first so that it
becomes an update instead of initial mount.

* Track whether we have a ping on the currently rendering level

If we get a ping on this level but have not yet suspended, we might
still suspend later. In that case we should still restart.

* Add comment about moving markers

We should add this to throwException so we get these markers earlier.
I've had to rewrite tests that test restarting to account for the delayed
restarting heuristic.

Ideally, we should also be able to restart from within throwException if
we're already ready to restart. Right now we wait until the next yield.

* Add test for restarting during throttled retry

* Add test that we don't restart for initial render

* Add Suspense Heuristics as a comment in Throw",Sebastian Markbåge,2019-05-30T23:37:56Z
c0f686eed9bf18d3015160229145e829f31a66cc,Show indent lines preference,Brian Vaughn,2019-05-30T21:30:17Z
a2a468743f99bdd08bd236ec9c7ec24b9756c6ac,Remove hover guideline in favor of showing guidelines for every nesting level,Brian Vaughn,2019-05-30T21:17:12Z
a957031fe799938afc3e498e8644be5b3a22bc99,Fixed bad Bridge disconnections,Brian Vaughn,2019-05-30T16:27:28Z
8f8ac358c6d8f16dac75f19f61b7935c1cfc1e02,Turn off pointer events for guidelines,Brian Vaughn,2019-05-30T15:43:45Z
ec421355bd1680f3509bda00c5fe9d04dbffc06d,Added selected and hovered guidelines to Components tree,Brian Vaughn,2019-05-30T15:22:06Z
3b2302253f13c9cd049fac10784e10b6c582e3b6,"Fix sizebot (#15771)

The previous naming scheme used the name of the resulting bundle file.
However, there are cases where multiple bundles have the same filename.
This meant whichever bundle finishes last overwrites the previous ones
with the same name.

The updated naming scheme is `bundle-sizes-<CI_NODE_INDEX>.json`.
Instead of generating a separate info file per bundle, it now creates
one per process.",Andrew Clark,2019-05-30T04:30:16Z
0f7cc2ba845e34d7a312819e27bbfa88cdb7d49f,React Events: check window before using navigator (#15768),Nicolas Gallagher,2019-05-30T03:19:31Z
ad9a6df58c38e1cab244ded09024b1cc42f4e2c1,"Move fixtures test to its own CI job

Running it in parallel to the other post-build jobs shaves ~30 seconds
off the total CI time.",Andrew Clark,2019-05-29T22:11:25Z
2670bc34006571cc08b430ca6349be8d1d8db1ba,React Events: support legacy browser Spacebar key value (#15766),Nicolas Gallagher,2019-05-29T22:00:43Z
9aad17d60cd8453357ec36e8180b61aaaf313b7e,"using the wrong renderer's act() should warn (#15756)

* warn when using the wrong renderer's act around another renderer's updates

like it says. it uses a real object as the sigil (instead of just a boolean). specifically, it uses a renderer's flushPassiveEffects as the sigil. We also run tests for this separate from our main suite (which doesn't allow loading multiple renderers in a suite), but makes sure to run this in CI as well.

* unneeded (and wrong) comment

* run the dom fixture on CI

* update the sigil only in __DEV__

* remove the obnoxious comment

* use an explicit export for the sigil",Sunil Pai,2019-05-29T21:56:04Z
8ce8b9ab812907248adb158d7ccdf731b3ede48e,"Update name of CI job in sizebot (#15767)

Same as #15714. I moved the artifacts step to a different job, so I
need to update the name in the sizebot script to match.",Andrew Clark,2019-05-29T21:52:11Z
1cc3bba004e96c18d8f812ed64d37d66a8bd666b,"Parallelizes the build script across multiple processes (#15716)

* Write size info to separate file per bundle

`bundle-sizes.json` contains the combined size information for every
build. This makes it easier to store and process, but it prevents us
from parallelizing the build script, because each process would need to
write to the same file.

So I've updated the Rollup script to output individual files per build.
A downstream CI job consolidates them into a single file.

I have not parallelized the Rollup script yet. I'll do that next.

* Parallelize the build script

Uses CircleCI's `parallelism` config option to spin up multiple build
processes.",Andrew Clark,2019-05-29T21:34:50Z
d5be489d5bd03d179f6df504da53c3397cf67f5a,Backed out Bridge shutdown refactor as it seems to have introduced bugs,Brian Vaughn,2019-05-29T21:23:10Z
30b1a8009ce92d69b6debd1ff45dbb8a60f33b2f,"Don't extract errors in CI (#15758)

Removes `--extract-errors` argument from CI build script command.
Instead, the author is expected to run `yarn extract-errors` locally
or manually edit the error code map.

The lint rule should be sufficient to catch unminified errors, but
as an extra precaution, I added a post-build step that greps the
production bundles. The post-build step works even if someone disables
the lint rule for a specific line or file.",Andrew Clark,2019-05-29T21:20:29Z
112168f31b60239cd63dfebdfccaddac51841acd,"Lint rule for unminified errors (#15757)

* Lint rule for unminified errors

Add a lint rule that fails if an invariant message is not part of the
error code map.

The goal is to be more disciplined about adding and modifiying
production error codes. Error codes should be consistent across releases
even if their wording changes, for continuity in logs.

Currently, error codes are added to the error code map via an automated
script that runs right before release. The problem with this approach is
that if someone modifies an error message in the source, but neglects to
modify the corresponding message in the error code map, then the message
will be assigned a new error code, instead of reusing the existing one.

Because the error extraction script only runs before a release, people
rarely modify the error code map in practice. By moving the extraction
step to the PR stage, it forces the author to consider whether the
message should be assigned a new error code. It also allows the reviewer
to review the changes.

The trade off is that it requires more effort and context to land new
error messages, or to modify existing ones, particular for new
contributors who are not familiar with our processes.

Since we already expect users to lint their code, I would argue the
additional burden is marginal. Even if they forget to run the lint
command locally, they will get quick feedback from the CI lint job,
which typically finishes within 2-3 minutes.

* Add unreleased error messages to map",Andrew Clark,2019-05-29T18:29:04Z
142cf56cbfe6d470f57e675e4e7079e904832cdd,[Flare] Adds onContextMenu and fixes some contextmenu related issues (#15761),Dominic Gannaway,2019-05-29T16:53:55Z
556cc6fe1925b8d78f9089769acdf20afaedb281,"[Fresh] Generate signatures for Hooks (#15733)

* Generate signatures for Hooks

This currently only works one level deep. For custom Hooks, we'll need to add some way to compose signatures.

* Be more resilient to plugin conflicts

This prevents a class of problems where other plugins cause our visitor to re-run.

It's a standard Babel practice, e.g.:

https://github.com/babel/babel/blob/8c7d4b55c99ff34cb9d493d452472e59b5ed1e70/packages/babel-plugin-transform-react-constant-elements/src/index.js#L85-L86

* Remove unnecessary stuff from debugging

* Include Foo.useHookName() calls into the signature

* Add an integration test for adding/removing an effect

* Add integration test for changing custom Hook order

* Include custom Hooks into the signatures

* Fix inferred names for function expressions

* Support export default hoc(Foo) when Foo is defined separately

* Add more built-in Hooks",Dan Abramov,2019-05-29T13:15:31Z
b74fa9868e91f333f5503ea6ce127d508fec1e4c,"Clean up (#15755)

expirationTime has already been checked if it's sync.

timeout can now be longer than 5 seconds when a suspense config is used.
We might want to adjust the heuristics but it's not internally consistent
without this.",Sebastian Markbåge,2019-05-28T21:19:51Z
5429f651b478a0e9860af83ab962984af21b4b19,Tweaks,Brian Vaughn,2019-05-28T20:57:05Z
388b03dd1244199a00601171256662057c3f5997,prettier,Sunil Pai,2019-05-28T19:24:35Z
9e87e654f5bd223ef2c5fc920bd778ca2eb31521,pass tests and flow,Sunil Pai,2019-05-28T19:21:55Z
c7580fcd3f713f391c6f5f3ceab7cd305a01a20a,Merge remote-tracking branch 'upstream/master' into act-async,Sunil Pai,2019-05-28T19:21:38Z
d915a4c1f16f9a5f516df0eb79e5a7e35ed89281,[Suspense] Add Batched Mode variant to fuzz tester (#15734),Andrew Clark,2019-05-28T18:41:01Z
7c5645ddb10fb68dc4520e972c34b0ab5f450e35,Fix double spaces. (#15641),Owen Conti,2019-05-28T17:34:18Z
92c2d8366b77e94125010a626c1a56e4b4f94864,"Updated Chrome installation

1. Removed auto-updates XML (since the feature doens't work for self hosted extensions)
2. Replaced CRX with packed ZIP (since people are having trouble with the CRX, and auto-udpates doesn't work anyway)",Brian Vaughn,2019-05-28T15:52:21Z
401065fe5c822d39a80f2ce4b2821596bdb5f99a,Adds test for #15732. (#15747),Caleb Meredith,2019-05-28T13:25:22Z
287ef30bbada33f222fdbafa6b080b541828df53,[Flare] Deeply prevent default on anchor elements (#15750),Dominic Gannaway,2019-05-28T11:46:07Z
a97b5c07b033e0c7f5be5618bb2fdebc03262a55,[Flare] More fixes for getAbsoluteBoundingClientRect (#15746),Dominic Gannaway,2019-05-27T18:03:40Z
fa0139afbfcf9bfb25cd64e9ce45762b1d416e24,Merged master,Brian Vaughn,2019-05-26T17:47:55Z
af47c39dbbf195442e9b654e8de0ebadf4102316,Added  and view-source support for Memo components,Brian Vaughn,2019-05-26T17:33:19Z
4422337562574cb87012d3dc68ea66cab638dda6,Added another (disabled) test; refactored getChildren slightly,Brian Vaughn,2019-05-26T15:37:05Z
94bebda8252a1d922a8e518a7f53c5d4f277dc44,Merged master,Brian Vaughn,2019-05-25T16:10:43Z
5fe97dbe19917b4c49618073ccc5632b593ec9fa,"Remove sizebot race condition (#15735)

Sometimes the status of the `build` job is not in the first page of
the `/statuses` endpoint. The combined `/status` endpoint consolidates
the entries, though, so it always appears there.",Andrew Clark,2019-05-25T01:55:28Z
bda8a0aa9850bd9925f0bf8dbe3179d9f04f0fa6,Decreased contrast of disabled button icons to look more obviously disabled,Brian Vaughn,2019-05-24T23:00:12Z
c8411019f18e9bb16d2e8fbdac29ab1039b9131a,Updated profiler overview,Brian Vaughn,2019-05-24T21:43:56Z
e76cee394d3de29e05d0cb84c25f51755a6f78b0,Added section about inspecting element to OVERVIEW,Brian Vaughn,2019-05-24T21:31:05Z
393924879fbba20e43d9de76f9fb4f01c945cefa,"[Fresh] Babel plugin now handles HOCs + add integration tests (#15724)

* Refactor component search to prepare for deeper traversals

* Register HOCs with intermediate results

* Register components that are used as JSX types

* Add integration test skeleton

The integration test combines testing runtime together with the Babel plugin. It's a bit harder to debug because multiple things can go wrong, but it helps us build confidence that specific scenarios work well.

* Add HOC integration test and fix conflict with JSX transform

* Infer usage from createElement too

This helps us avoid dependency on the plugin order.

* Remove outdated comments

* Wrap tests in __DEV__

* Support export default hoc(...) for anonymous functions

* Fix test indentation

* Fix comment typo

* Use named function for test as this case is more important",Dan Abramov,2019-05-24T20:45:08Z
4cc7e748d14e3d0ecce454f58627c29248301e3a,"Merge pull request #289 from bvaughn/cache-inspected-element

Cache inspected element data until it is updated",Brian Vaughn,2019-05-24T16:26:31Z
efc2f82da2ca197f848ce36c5908a5b030fa0dfa,Reorganize inspected element state vars slightly,Brian Vaughn,2019-05-24T16:17:20Z
f580d0ece7a973fccd67483f94df917156229c5c,Don't (re)serialize inspected elements either unless they have re-rendered since last inspected.,Brian Vaughn,2019-05-24T16:07:15Z
07db37f0305e06f6d87caf1adff44bbbb5e4156a,Cache inspected element data until it is updated,Brian Vaughn,2019-05-24T14:37:46Z
2b58797365ed09394762a304b8518b811a71db2f,Typo in CircleCI config,Andrew Clark,2019-05-23T22:33:56Z
408fbee23b24c247df4b3bae2abf1fe0283fc0ab,Fix potential RTE caused by setting (saved) profiling data while profiling is in progress,Brian Vaughn,2019-05-23T21:49:47Z
8af1f879299e88f9e370c1f01d90efaeefcefd27,"Rename ReactFiberScheduler -> ReactFiberWorkLoop and extract throwException from Unwind (#15725)

* Rename ReactFiberScheduler to ReactFiberWorkLoop

The scheduling part is mostly extracted out to the scheduler package.

What's remaining is mostly around the loop around each section of work.
I name it something with Work in it because it's very related to the
BeginWork, CompleteWork and UnwindWork sections.

* Extract throwException from UnwindWork

Our throwing works more like algebraic effects in that it's a separate
phase where we find a handler and we later unwind.",Sebastian Markbåge,2019-05-23T21:24:18Z
399cd0d16c52e7087bba2a9c53b659c290f720cd,"Set up cron job to run fuzz tester (#15718)

Sets up a CircleCI workflow to run the fuzz tests with a randomly
generated seed. The workflow runs on an hourly schedule.",Andrew Clark,2019-05-23T21:09:08Z
395c02567cfe0e70ab85f4fc134a4d8643123f6e,Handle HTTPS Git clone URLs,Brian Vaughn,2019-05-23T18:55:32Z
6e8c2015fcbe53eb25715a51893f9d178c1c81a3,Tweaked Bridge shutdown sequence slightly,Brian Vaughn,2019-05-23T18:46:28Z
34f6fa4fab502497b6ffd5d04cf0547bb9569fc2,Added a sanity test for Bridge shutdown,Brian Vaughn,2019-05-23T18:22:02Z
f47b40fe6cae3194877fbf5ab84118f32763f21b,Tweaked event display name logic,Brian Vaughn,2019-05-23T16:30:31Z
9a67ba2f98f1ac1eb649aecdc2e41331c52abfe4,Remove snapshot,Dominic Gannaway,2019-05-23T00:11:10Z
70084e881ba5563289c335594a18ee7388e40a0d,Update snapshot tests,Dominic Gannaway,2019-05-22T14:30:55Z
8eb7eddd1f9d2db762e50a9461df7d2c144304f9,Run prettier,Dominic Gannaway,2019-05-22T14:21:07Z
779fd167ffb004c337b5ba3d7923c2f18a96109a,"Adds inspectable event components + props

[Flare] Adds inspectable event components + props",Dominic Gannaway,2019-05-14T20:37:53Z
e4aa3c5b3375154037674f56624e6619bb889274,Update profiling-supported status each time roots change (and added tests),Brian Vaughn,2019-05-23T16:09:35Z
74d8207e06afb484bc2714cf2c43f1480f150577,Improved visual style of Profiling-disabled button,Brian Vaughn,2019-05-23T15:52:27Z
541dd6c4b6a51e853aa0e09843aed64dda313c3f,Moved profiling-supported subscription into ProfilerContext,Brian Vaughn,2019-05-23T15:48:51Z
0608b1a5548af0aff332ba8afe1e0f0d8bae725d,"Merge pull request #281 from bvaughn/persiste-profiling-data-after-navigation

[WIP] Don't erase profiler data on navigation",Brian Vaughn,2019-05-23T15:38:59Z
44fbf3cd1dcf19959e68853f4e7386a1769fbf00,Added ProfilerContext tests,Brian Vaughn,2019-05-23T15:36:34Z
025b07b61038300486b44c71f796a74cbdcd5d9f,[Flare] Ensure getAbsoluteBoundingClientRect aligns with offsetParent (#15720),Dominic Gannaway,2019-05-23T12:51:14Z
61f62246c8cfb76a4a19d1661eeaa5822ec37b36,"[react-native] Use path-based imports instead of Haste for the RN renderer (#15604)

* [react-native] Use path-based imports instead of Haste for the RN renderer

To move React Native to standard path-based imports instead of Haste, the RN renderer that is generated from the code in this repo needs to use path-based imports as well since the generated code is vendored by RN. This commit makes it so the interface between the generated renderers and RN does not rely on Haste and instead uses a private interface explicitly defined by RN. This inverts control of the abstraction so that RN decides the internals to export rather than React deciding what to import.

On RN's side, a new module named `react-native/Libraries/ReactPrivate/ReactNativePrivateInterface` explicitly exports the modules used by the renderers in this repo. (There is also a private module for InitializeCore so that we can import it just for the side effects.) On React's side, the various renderer modules access RN internals through the explicit private interface.

The Rollup configuration becomes slimmer since the only external package is now `react-native`, and the individual modules are instead listed out in `ReactNativePrivateInterface`.

Task description: https://github.com/facebook/react-native/issues/24770
Sister RN PR (needs to land before this one): https://github.com/facebook/react-native/pull/24782

Test Plan: Ran unit tests and Flow in this repo. Generated the renderers and manually copied them over to the RN repo. Ran the RN tests and launched the RNTester app.

* Access natively defined ""nativeFabricUIManager"" instead of importing it

Some places in the Fabric renderers access `nativeFabricUIManager` (a natively defined global) instead of importing UIManager. While this is coupling across repos that depends on the timing of events, it is necessary until we have a way to defer top-level imports to run after `nativeFabricUIManager` is defined. So for consistency we use `nativeFabricUIManager` everywhere (see the comment in https://github.com/facebook/react/pull/15604#pullrequestreview-236842223 for more context).",James Ide,2019-05-23T07:23:54Z
57194543777d966a01e0dfbaee54c68ee2a44c56,Persist profiling data after navigation,Brian Vaughn,2019-05-23T03:00:21Z
351d5f662a77b27f4ca2a79982aed8da109c9696,Add Tab id to Tooltip,Brian Vaughn,2019-05-23T03:00:06Z
f14a2fd05cfb2d7fc140f1f59e1fd580c25b6a27,"Use @reach tooltips for TabBar, cleanup supports-profiling subscription",Brian Vaughn,2019-05-23T01:44:43Z
b962adfc2b979e5526ee099fd43366db7abfcc47,[Flare] event component displayName is now mandatory (#15717),Dominic Gannaway,2019-05-23T00:29:07Z
98623dfdb007933ff4c38052f2827a74fc9b5a4a,Tweak,Brian Vaughn,2019-05-22T23:40:40Z
d98161874cfc599211f70045185e7f2536c93405,[Flare] Ensure DOM inspection is Flare compatible,Dominic Gannaway,2019-05-22T21:41:17Z
d66c8f2d9d0ffec76afe98dea635feabd603b698,"Update sizebot to match name of CircleCI build job (#15714)

The sizebot scrapes the GitHub `/statuses` endpoint to get the lastest
CircleCI build number for master, in order to fetch the bundle size
info for that build, which are stored as build artifacts. (There's gotta
be a better way to do this, but that's what we have for now.) This
updates the script to match the name of the updated CircleCI job that
generates the bundle sizes.",Andrew Clark,2019-05-22T23:12:14Z
5c2124fc76e59fb4fa805d9543afdd7b6866cb5e,"[Fresh] Initial Babel plugin implementation (#15711)

* Add initial Babel plugin implementation

* Register exported functions

* Fix missing declarations

Always declare them at the bottom and rely on hoisting.

* Remove unused code

* Don't pass filename to tests

I've decided for now that the plugin doesn't need filename, and it will be handled by module runtime integration instead.

* Fix bugs

* Coalesce variable declarations",Dan Abramov,2019-05-22T22:11:09Z
101901dc2d09509fa0b667196e1ac63ec17bc656,Remove redundant test run (#15713),Andrew Clark,2019-05-22T20:50:43Z
1c0bdb710dc4d05a581b8f7b17990d1cdbe0a190,Always run yarn after restoring modules cache (#15712),Andrew Clark,2019-05-22T20:33:33Z
b9ebc37c5b5b59b5eeaf897a4874cfa6df1edc75,Fix Flow (#15710),Dominic Gannaway,2019-05-22T20:04:28Z
a25a793fe9d38436be7a3e87ce36ebd5d9d84921,[Flare] update getEventCurrentTarget to use fiber tree (#15708),Dominic Gannaway,2019-05-22T18:59:00Z
b5dff62faf4c8fd104362f48e3651332b377f28a,[Flare] Account for fixed elements in getAbsoluteBoundingClientRect (#15707),Dominic Gannaway,2019-05-22T18:54:08Z
f3109ad8a7ddf7a162e7c9a050ffe6c3efb75491,"Parallelize CircleCI jobs using workflows (#15704)

Updates the CircleCI config to use the workflows features to run jobs in
parallel, instead of the `parallelism` option. This change alone doesn't
improve the overall build time much, since almost all of the total time
is spent running the Rollup script, which runs entirely sequentially.
But it does improve reporting, and should make it easier to add
additional parallel jobs in the future.",Andrew Clark,2019-05-22T18:14:14Z
eaaeb439b4d80e72892b897d900568f8cf77ca9c,Fixed a missing remove-event-listener in ProfilerStore,Brian Vaughn,2019-05-22T17:52:15Z
b556f7444df042fb64555f12d8c1e893a9f4c3dc,Profiler properly handles unmounted roots,Brian Vaughn,2019-05-22T17:19:26Z
b4a3ef9fb2d4b84c7ec27de636ce82242441c6ca,"Merge pull request #279 from bvaughn/profiling-architecture-eager-data-push

Refactor Profiler architecture",Brian Vaughn,2019-05-22T17:00:52Z
962865e5bf8974d1651305ed406bfd146bc76f3e,Add datetime to the profiling export filename,Brian Vaughn,2019-05-22T16:57:10Z
fbd82385d2398bfa306fc790aa7645be56bce906,Fixed a state cleanup issue if Profiler data is cleared,Brian Vaughn,2019-05-22T16:04:55Z
d1344768b205de590531c5e8cbec991d304958d0,Changed export code to (hopefully) support larger exports,Brian Vaughn,2019-05-22T15:41:57Z
ec44eb1e4c25ff1de863fb7cf36f4b269ca45d93,Tweaked did-not-render text color to be slightly dimmer,Brian Vaughn,2019-05-22T15:32:10Z
a03c3b5d14952619f8202bef76ed68c3db4d54db,Bumped Profiler exported data version,Brian Vaughn,2019-05-22T15:22:33Z
d09299bf85198305e088ecd353f8b3b21c3d710a,Cleaned up some tests,Brian Vaughn,2019-05-22T15:05:34Z
99b6a44beb5b10a517c4af93e2e5b5ea07ed86e9,Updated event subscriptions and getters to use new ProfilerStore,Brian Vaughn,2019-05-22T14:40:41Z
2d4bb01c01121ff55faa82f7ec30536f595bb807,Moved profiling data to ProfilerContext to fix re-import bug,Brian Vaughn,2019-05-22T14:28:26Z
95bd6c8f6390ac3826ec472f41732a461e226cf6,Added export to web shell and removed 'downloads' API permission,Brian Vaughn,2019-05-22T13:46:42Z
36d51f4eb69b89a22746aacc1550edde5f385410,Added root selector UI to Profiler,Brian Vaughn,2019-05-22T13:40:04Z
c6de014a9a70d3bff970a3a58df7ac6af28fa51b,Massively overhauled profiling data architecture,Brian Vaughn,2019-05-22T13:05:25Z
f50f9ba5db4fd08693ad9d592bfe6f9ab1b5cdbf,Fix ReactFiberNewContext spelling (#15692),Maksim Markelov,2019-05-22T10:24:31Z
e180f656f364cd8a0e8441cb268f99a312265b21,Flare: change flushDiscreteUpdates invariant to warning (#15702),Dominic Gannaway,2019-05-22T00:09:34Z
7829d8cf99c20d567b3baceab8e9c2a1f60062de,"Fix missing return pointer assignment (#15700)

* Fix missing return pointer assignment

I found a bug using the fuzz tester that manifested as incorrect
ordering of children in the host tree, but whose root cause was a
missing `return` pointer assignment on a work-in-progress fiber.

Usually return pointers are set during reconciliation
(`reconcileChildFibers`) but this particular assignment happens inside
the custom reconciliation implementation used by Suspense boundaries.

I would not be surprised if there were similar bugs related to incorrect
return pointers. You're supposed to update the return pointer
whenever a work-in-progress fiber is created, but there's nothing in
the contract of the `createFiber` or `createWorkInProgress` function
that implies this. I propose that we update their signatures to accept
the return fiber as an argument. I will do this in a follow-up.

In this commit, I rearranged `updateSuspenseComponent` slightly so that
every call to `createWorkInProgress` or a `createFiber*` function is
immediately followed by a return pointer assignment.

I hardcoded the fuzz test case that surfaced the bug.

* Update all progressed children in list

`progressedPrimaryChild` is a list, not a single fiber. Need to iterate
through every child and update their return pointers.",Andrew Clark,2019-05-21T23:56:52Z
d7afe23f141baeb96f1a9ee0c7d014d7e5a388e8,"Rename ""loading"" to ""busy"" in SuspenseConfig API (#15699)

loadingDelayMs -> busyDelayMs
minLoadingDurationMs -> busyMinDurationMs",Sebastian Markbåge,2019-05-21T21:29:41Z
ef4ac42f8893afd0240d2679db7438f1b599bbd4,[Flare] Update interactiveUpdates flushing heuristics (#15687),Dominic Gannaway,2019-05-21T21:03:45Z
6d4f85b611cd7bac40db44854bab06776ce30c96,"[Fresh] Set up infra for runtime and Babel plugin (#15698)

* Add a stub for React Fresh Babel plugin package

* Move ReactFresh-test into ReactFresh top level directory

* Add a stub for React Fresh Runtime entry point

* Extract Fresh runtime from tests into its entry point",Dan Abramov,2019-05-21T20:54:10Z
121acae09060803d2fdc23fdfd2f671a47908d1f,Flare: simplify dispatchEvent discrete argument (#15694),Dominic Gannaway,2019-05-21T15:06:17Z
a398cbd5a769332f0fa24e7fa3d30c909b1d8499,Flare: update invalid accessor warnings + add no-ops (#15693),Dominic Gannaway,2019-05-21T13:12:19Z
9c9ea948520de7e55368b2d1cb58ff39e2ff3c10,flush only on exiting outermost act() (#15682),Sunil Pai,2019-05-21T09:41:24Z
7ce9f4859c79d7f4e60b7916fd1a1efb55aa2619,Renamed Store importedProfilingData -> profilingData,Brian Vaughn,2019-05-20T17:45:16Z
f1561e9e177db1207ed87eebc756915f882fc482,"Merge pull request #274 from bvaughn/commit-priority-level

Show commit priority levels in Profiler UI (if available)",Brian Vaughn,2019-05-20T16:56:58Z
d44038071922c2fbde0d654411af146c71596e67,Upgraded to canary with priority level info,Brian Vaughn,2019-05-20T16:54:07Z
53de5b69cc5bfdc3ce4a7993f3cb4082fb4a78ea,Updated test snapshot,Brian Vaughn,2019-05-20T16:42:37Z
16a81feb7270989bfd39b7fb0c395d77421ebf2e,Moved priority level constants into rendeer interface,Brian Vaughn,2019-05-16T21:51:58Z
9a6a19456f0e07a9f308b079ad7245ca627a4f59,Show commit priority levels in Profiler UI,Brian Vaughn,2019-05-15T22:36:14Z
50b50c26f6724c559a3550b903d2cc2eeffdf092,"Inform DevTools of commit priority level (#15664)

* Pass inferred priority level to DevTools commit hook in PROFILE mode",Brian Vaughn,2019-05-20T15:37:25Z
0bd9b5d006bec02b7f4149a618e5433f1cc6c6bd,"[Fresh] Support re-rendering lazy() without losing state (#15686)

* Support re-rendering lazy() without losing state

* Clearer naming",Dan Abramov,2019-05-20T14:47:27Z
ec38def44f2ff696ec0b73c212265fd2324bcdaf,"[Fresh] Don't traverse remounted trees (#15685)

* Don't traverse children when hot reloading needs a remount

If we're gonna remount that tree anyway, there is no use in traversing its children beforehand.

* Add a test verifying hot reload batches updates

Otherwise there is a risk of it being super slow due to cascades.",Dan Abramov,2019-05-20T13:55:01Z
5731e522d4a14e53bd37bb304f831f1f5e9f9f36,"[Fresh] Support lazy() and add Suspense tests (#15681)

* Test that state is not leaked between components

* Support lazy and add Suspense tests

* Nits",Dan Abramov,2019-05-20T13:11:18Z
31487dd82e82ef62243806b2e76b23a6fb21d0bc,"[Fresh] Set up initial scaffolding (#15619)

* Add a minimal failing test for hot reload

* Set up scaffolding for React Fresh

* Consider type family when comparing elementType

Rendering an element with stale type should not cause it to remount.

We only do this for FunctionComponent tag since checking is unnecessary for classes or host components.

* Add support for forwardRef()

Initially I thought I would compare families of inner .render functions.

However, there is a corner case where this can create false positives. Such as when you forwardRef(X) the same X twice. Those are supposed to be distinct. But if we compare .render functions, we wouldn't be able to distinguish them after first reload.

It seems safer to rely on explicit registration for those. This should be easy when forwardRef() call is in the same file, and usually it would be. For cases like HOCs and style.div`...` factories that return forwardRef(), we could have the __register__ helper itself ""dig deeper"" and register the inner function.

* Show how forwardRef inner identity can be inferred

The __register__ implementation can read the inner identity itself.

* Add missing __DEV__ to tests

* Add support for memo() (without fixing bailouts)

This adds rudimentary support for memo components. However, we don't actually skip bailouts yet, so this is not very useful by itself alone. Tests have TODOs that we need to remove after bailout skipping is done.

* Refactor type comparison for clarity

* Hot update shouldn't re-render ancestor components unnecessarily

My code had a bug where it checked for a wrong thing in a wrong set, leading us to always re-render.

This fixes the checks so that we only schedule updates for things that were actually edited.

* Add test coverage for memo(fn, areEqual)

* Explicitly skip bailouts for hot reloading fibers

This forces even memo() with shallow comparison to re-render on hot update.

* Refactor scheduling update to reduce duplication

* Remove unused variable in test

* Don't check presence in a set while not hot reloading

* Make scheduleHotUpdate() take named arguments

* Don't keep unedited component types in the type => family map

It's unnecessary because if they haven't been edited, there's no special reconciliation logic.

* Add signatures that force remounting

Signatures let us force a remount of a type even if from React's point of view, type is the same.

A type has one current signature. If that signature changes during next hot update, all Fibers with that type should be deleted and remounted.

We do this by mutating elementType scheduling a parent.

This will be handy to force remount of mismatching Hooks, as well as failed error boundaries.

For this to fully work, we'll need to add a way to skip built-in bailouts for all Fiber types. This will be the most invasive and annoying change. I did it for HostRoot in this PR but there's more. I'll add an automated test case that catches the missing bailout bailouts.

* Support forced remounting for all component types

This teaches all parent component types to remount their child if necessary.

It also adds tests for them.

* Remount effects while preserving state for hot reloaded components

This makes sure that changes to *code* always propagate.

It can break components that aren't resilient to useEffect over-firing, but that seems like a good constraint since you might need to add a dependency later anyway, and this helps avoid coding yourself into the corner.

* Add missing __DEV__ blocks to tests

* Fix unused variables in tests

* Remove outdated TODO

* Expose scheduleHotUpdate directly

* Inline isCompatibleType

* Run one check per component for invalidating deps

This also makes the bailouts more targeted--no need to remount useEffect for a parent component of remounted fiber.

* Resolve .type early

This moves resolving to set up the right .type early instead of doing this before render.
A bit more future-proof in case we want to restructure the begin phase later.

ForwardRef is special because its type is a wrapper but it can be hot reloaded by itself.
So we have a special overload for it that reconstucts the wrapper type if needed.

* Add a Suspense todo

* Use current.type !== workInProgress.type for ignoring deps

This gets rid of one of the sets.

* Use workInProgress.type !== current.type check for force re-render

We still use a set for forced remount though.

* Use wip.type !== current.type check in more places

This also disables the remounting tests. They need a separate approach.

* Use a dedicated remount mechanism

* Add a test for offscreen trees

It has a TODO because it seems like offscreen updates are incorrectly applied too soon.

* Enable offscreen test now that it is fixed

* Fix corner cases in the new remounting mechanism

* Remount failed error boundaries on hot reload

* Fix test now that act() flushes

This test is manual so I don't actually want act here.

* Nits

* Add comments",Dan Abramov,2019-05-18T00:38:13Z
146fd2ad3db817cb24585cda6a26c71504567107,Fixed snapshot diff,Brian Vaughn,2019-05-17T14:54:07Z
629e500fe2914184976f246fb6d40748524a901b,"Merge pull request #275 from lucasecdb/fix/undefined-chartnode

Fix undefined chart node when switching commits in profiler",Brian Vaughn,2019-05-17T14:52:07Z
1e025edb9a91fcd7facfb3c58fd9ba808515e50a,Fix undefined chart node when switching commits in profiler,Lucas Cordeiro,2019-05-17T12:35:10Z
9c6de716d028f17736d0892d8a3d8f3ac2cb62bd,"Add withSuspenseConfig API (#15593)

* Add suspendIfNeeded API and a global scope to track it

Adds a ""current"" suspense config that gets applied to all updates scheduled
during the current scope.

I suspect we might want to add other types of configurations to the ""batch""
so I called it the ""batch config"".

This works across renderers/roots but they won't actually necessarily go
into the same batch.

* Add the suspenseConfig to all updates created during this scope

* Compute expiration time based on the timeout of the suspense config

* Track if there was a processed suspenseConfig this render pass

We'll use this info to suspend a commit for longer when necessary.

* Mark suspended states that should be avoided as a separate flag

This lets us track which renders we want to suspend for a short time vs
a longer time if possible.

* Suspend until the full expiration time if something asked to suspend

* Reenable an old test that we can now repro again

* Suspend the commit even if it is complete if there is a minimum delay

This can be used to implement spinners that don't flicker if the data
and rendering is really fast.

* Default timeoutMs to low pri expiration if not provided

This is a required argument in the type signature but people may not
supply it and this is a user facing object.

* Rename to withSuspenseConfig and drop the default config

This allow opting out of suspending in some nested scope.

A lot of time when you use this function you'll use it with high level
helpers. Those helpers often want to accept some additional configuration
for suspense and if it should suspend at all. The easiest way is to just
have the api accept null or a suspense config and pass it through. However,
then you have to remember that calling suspendIfNeeded has a default.

It gets simpler by just saying tat you can pass the config. You can have
your own default in user space.

* Track the largest suspense config expiration separately

This ensures that if we've scheduled lower pri work that doesn't have a
suspenseConfig, we don't consider its expiration as the timeout.

* Add basic tests for functionality using each update mechanism

* Fix issue when newly created avoided boundary doesn't suspend with delay

* Add test for loading indicator with minLoadingDurationMs option",Sebastian Markbåge,2019-05-16T23:51:18Z
1160b37691d32c9bf385b7e7d7a106adce05c7df,Event API: Add responder allowMultipleHostChildren flag (#15646),Dominic Gannaway,2019-05-16T18:03:38Z
95e06ac3d091b6746be80d13840884dc7894b01c,Event API: isTargetWithinEventResponderScope on unmounted event components (#15672),Dominic Gannaway,2019-05-16T17:59:59Z
d278a3ff8b2863afb9ab7807e42d31f33c84eb78,"`act()` - s / flushPassiveEffects / Scheduler.unstable_flushWithoutYielding (#15591)

* s/flushPassiveEffects/unstable_flushWithoutYielding

a first crack at flushing the scheduler manually from inside act(). uses unstable_flushWithoutYielding(). The tests that changed, mostly replaced toFlushAndYield(...) with toHaveYielded(). For some tests that tested the state of the tree before flushing effects (but still after updates), I replaced act() with bacthedUpdates().

* ugh lint

* pass build, flushPassiveEffects returns nothing now

* pass test-fire

* flush all work (not just effects), add a compatibility mode

of note, unstable_flushWithoutYielding now returns a boolean much like flushPassiveEffects

* umd build for scheduler/unstable_mock, pass the fixture with it

* add a comment to Shcduler.umd.js for why we're exporting unstable_flushWithoutYielding

* run testsutilsact tests in both sync/concurrent modes

* augh lint

* use a feature flag for the missing mock scheduler warning

I also tried writing a test for it, but couldn't get the scheduler to unmock. included the failing test.

* Update ReactTestUtilsAct-test.js

- pass the mock scheduler warning test,
- rewrite some tests to use Scheduler.yieldValue
- structure concurrent/legacy suites neatly

* pass failing tests in batchedmode-test

* fix pretty/lint/import errors

* pass test-build

* nit: pull .create(null) out of the act() call",Sunil Pai,2019-05-16T16:12:36Z
aad5a264d27bba113d322613587997d2987ba2d3,Event API: ensure calculateResponderRegion accounts for page offset (#15671),Dominic Gannaway,2019-05-16T16:09:41Z
bb89b4eacc4edc0954910955322296789d8e2089,"Bail out of updates in offscreen trees (#15666)

* Bail out of updates in offscreen trees

* Address review",Dan Abramov,2019-05-16T10:12:05Z
4bf88ddeca37d5971c05a9ab720f898409c143fd,Fix <embed> not triggering onLoad (#15614),Andrew Cherniavskii,2019-05-16T09:05:20Z
f961050a376f2a0d1397fb8129ae0e7d4efa9b52,"Always flushPassiveEffects before rendering

I  mistakenly wrapped this in the revertPassiveEffectsChange feature
flag. It should flush regardless of the flag.",Andrew Clark,2019-05-16T01:11:44Z
b899819e77cf0b7fccafaa4bb70363c430b574df,"Use dynamic flag in test renderer in www (#15662)

Uses a dynamic flag in www's test renderer build so we can condtionally
disable the passive effects bugfix. Matches the dynamic flag used in
the www React DOM build.",Andrew Clark,2019-05-15T21:55:50Z
f10a6b379ca2de83bb46ee17a267d3e478776fc1,Improve scanning Profiler chart for deep renders,Brian Vaughn,2019-05-15T21:15:14Z
d34b457ce2a2cee1160dbc90b93312ff9850958c,"Feature flag to revert #15650 (#15659)

PR #15650 is a bugfix but it's technically a semantic change that could
cause regressions. I don't think it will be an issue, since the
previous behavior was both broken and incoherent, but out of an
abundance of caution, let's wrap it in a flag so we can easily revert
it if necessary.",Andrew Clark,2019-05-15T20:38:06Z
668fbd651b6b245da5c42e9e243adc88f0278517,"Fix serial passive effects (#15650)

* Failing test for false positive warning

* Flush passive effects before discrete events

Currently, we check for pending passive effects inside the `setState`
method before we add additional updates to the queue, in case those
pending effects also add things to the queue.

However, the `setState` method is too late, because the event that
caused the update might not have ever fired had the passive effects
flushed before we got there.

This is the same as the discrete/serial events problem. When a serial
update comes in, and there's already a pending serial update, we have to
do it before we call the user-provided event handlers. Because the event
handlers themselves might change as a result of the pending update.

This commit moves the `flushPassiveEffects` call to before the discrete
event handlers are called, and removes it from the `setState` method.
Non-discrete events will not cause passive effects to flush, which is
fine, since by definition they are not order dependent.",Andrew Clark,2019-05-15T01:08:10Z
b0657fde6aef2e067e6d7808809deb194a857278,Event API: ensure getFocusableElementsInScope handles suspended trees (#15651),Dominic Gannaway,2019-05-15T00:08:30Z
8af90c8972ab4cfc5fdbca8c576c202ce9cadab8,"Add test for nested avoided boundaries (#15636)

* Add test for nested avoided boundaries

* Add test for top level avoided boundaries",Sebastian Markbåge,2019-05-14T21:41:45Z
6fd2e72b5e06358ebe6ab719edbbde2a1845ce4a,Minor nits,Brian Vaughn,2019-05-14T18:01:41Z
af19e2eb2f8a849a11d2f5fa98d65d46087058e2,Event API: adds pointerType to Focus events (#15645),Dominic Gannaway,2019-05-14T14:59:36Z
76e569992b259b9e636ee68dcc7719539f4b9bb8,"Cleanup profile export/import data types, add export/import test

Strengthened the I/O-boundary type conversion logic.

Fixed type inconsistencies uncovered by removing `any` and
by making explicit type annotations and transformations.

In particular, these were likely malformed when restored from a file:
- `commitDetails`
- `interactions`
- `initialTreeBaseDurations`

The mismatches were Map vs interleaved Array.",Ivan Babak,2019-04-30T10:16:52Z
cc24d0ea56b0538d1ac61dc09faedd70ced5bb47,"Invariant that throws when committing wrong tree (#15517)

If React finishes rendering a tree, delays committing it (e.g.
Suspense), then subsequently starts over or renders a new tree, the
pending tree is no longer valid. That's because rendering a new work-in
progress mutates the old one in place.

The current structure of the work loop makes this hard to reason about
because, although `renderRoot` and `commitRoot` are separate functions,
they can't be interleaved. If they are interleaved by accident, it
either results in inconsistent render output or invariant violations
that are hard to debug.

This commit adds an invariant that throws if the new tree is the same as
the old one. This won't prevent all bugs of this class, but it should
catch the most common kind.

To implement the invariant, I store the finished tree on a field on the
root. We already had a field for this, but it was only being used for
the unstable `createBatch` feature.

A more rigorous way to address this type of problem could be to unify
`renderRoot` and `commitRoot` into a single function, so that it's
harder to accidentally interleave the two phases. I plan to do something
like this in a follow-up.",Andrew Clark,2019-05-13T23:15:50Z
83fc258f2914c1a7c14c7b98ee362934576f266b,"Remove <ConcurrentMode /> (#15532)

Use createSyncRoot instead.",Andrew Clark,2019-05-13T23:10:00Z
283ce532042c195d27996a556c04142ccf93f567,"Add ReactDOM.unstable_createSyncRoot (#15504)

* Add ReactDOM.unstable_createSyncRoot

- `ReactDOM.unstable_createRoot` creates a Concurrent Mode root.
- `ReactDOM.unstable_createSyncRoot` creates a Batched Mode root. It
does not support `createBatch`.
- `ReactDOM.render` creates a Legacy Mode root. It will eventually be
deprecated and possibly moved to a separate entry point, like
`react-dom/legacy`.

* Rename internal ReactRoot types",Andrew Clark,2019-05-13T22:30:03Z
1723c5d3169e166b6426177ab0a05b7ae605d6bb,"Changed ""Unknown"" fallback displayName to ""Anonymous"". Added memo/forwardRef labels to Profiler charts.",Brian Vaughn,2019-05-13T22:26:14Z
6b4c75833835d4985908abdd95ab1f08f3ba8722,CSS tweaks,Brian Vaughn,2019-05-13T21:51:56Z
862f499facfba9635f21c25b17368cb980b17c7e,"Add Batched Mode (#15502)

* Add Batched Mode

React has an unfortunate quirk where updates are sometimes synchronous
-- where React starts rendering immediately within the call stack of
`setState` — and sometimes batched, where updates are flushed at the
end of the current event. Any update that originates within the call
stack of the React event system is batched. This encompasses most
updates, since most updates originate from an event handler like
`onClick` or `onChange`. It also includes updates triggered by lifecycle
methods or effects. But there are also updates that originate outside
React's event system, like timer events, network events, and microtasks
(promise resolution handlers). These are not batched, which results in
both worse performance (multiple render passes instead of single one)
and confusing semantics.

Ideally all updates would be batched by default. Unfortunately, it's
easy for components to accidentally rely on this behavior, so changing
it could break existing apps in subtle ways.

One way to move to a batched-by-default model is to opt into Concurrent
Mode (still experimental). But Concurrent Mode introduces additional
semantic changes that apps may not be ready to adopt.

This commit introduces an additional mode called Batched Mode. Batched
Mode enables a batched-by-default model that defers all updates to the
next React event. Once it begins rendering, React will not yield to
the browser until the entire render is finished.

Batched Mode is superset of Strict Mode. It fires all the same warnings.
It also drops the forked Suspense behavior used by Legacy Mode, in favor
of the proper semantics used by Concurrent Mode.

I have not added any public APIs that expose the new mode yet. I'll do
that in subsequent commits.

* Suspense in Batched Mode

Should have same semantics as Concurrent Mode.

* Use RootTag field to configure type of root

There are three types of roots: Legacy, Batched, and Concurrent.

* flushSync should not flush batched work

Treat Sync and Batched expiration times separately. Only Sync updates
are pushed to our internal queue of synchronous callbacks.

Renamed `flushImmediateQueue` to `flushSyncCallbackQueue` for clarity.",Andrew Clark,2019-05-13T21:30:39Z
e2746ffd0ee3a595a1adb08ad9278aa3637018be,Merge branch 'enhancement/display-change' of https://github.com/submetu/react-devtools-experimental into submetu-enhancement/display-change,Brian Vaughn,2019-05-13T21:12:27Z
982eb84a1347881766143312bf233728630a70bb,"Merge pull request #271 from tux-tn/master

Replaced adm-zip with node-archiver",Brian Vaughn,2019-05-13T21:10:21Z
d9a0c426524381be9e134f0771f517f13a61de51,Bumped Profiler export version (since self durations are now included),Brian Vaughn,2019-05-13T21:04:53Z
cf99c3ee6c63749c0f2453ec325622c03558a2f0,"Moved calculation of self duration to the backend/renderer

This enables self duration to be computed accurately despite component filters",Brian Vaughn,2019-05-13T17:13:29Z
74706b0c86d0f33dec9bd9ccd61d6f19233ec399,updates snapshots,Subhan,2019-05-13T17:00:11Z
ec89ae88b69b5c111ae468ba90d2f8feed2eaabb,Changes display of ForwardRef and Memo components,Subhan,2019-05-13T16:57:24Z
fec74f99daebd07c38a647941afa6bf0e0b2306e,Event API: ensure preventDefault works for nested targets (#15633),Dominic Gannaway,2019-05-13T12:45:48Z
ad94f9ef08e417b95b8677af3fdd3fdd2d1d4eb3,Replaced adm-zip with node-archiver,Sarhan Aissi,2019-05-13T02:55:05Z
ffef7ffc5727218826a5456ec77d3b2887a8de93,"Merge pull request #268 from frankcalise/master

Fixed build chrome not working on Windows due to rm command not existing",Brian Vaughn,2019-05-12T14:43:19Z
faea8ed6a97a1eb899d98e154f16a2322aa8df35,Delete package-lock.json,Brian Vaughn,2019-05-12T14:43:07Z
285568825b76dbb5a0a7b06509a59f6945954d0a,Fixed build chrome not working on Windows due to rm command not existing,Frank Calise,2019-05-12T14:12:17Z
edfedf3ae9453c646afe5e77c75bd2a53159e262,Fork ReactSharedInternals for UMD builds (#15617),Andrew Clark,2019-05-10T20:51:39Z
39ef609e7cc251f2141dc9de8ae7102413f24422,Update test to fix CI,Andrew Clark,2019-05-10T18:12:24Z
5b6eb55e1c49e5b419ccfe2ab5a7531c0911cf9d,"Remove scheduler from React package dependencies (#15616)

Scheduler is used by the renderers, but not the isomorphic package.",Andrew Clark,2019-05-10T18:01:04Z
0803d2247960c6535cd89cb24cd29dd04dd1e0cc,"Don't consider ""Never"" expiration as part of most recent event time (#15606)

* Don't consider ""Never"" expiration as part of most recent event time

This doesn't happen with deprioritization since those are not ""updates""
by themselves so they don't go into this accounting.

However, they are real updates if they were scheduled as Idle pri using
the scheduler explicitly. It's unclear what suspense should do for these
updates. For offscreen work, we probably want them to commit immediately.
No point in delay them since they're offscreen anyway. However if this is
an explicit but very low priority update that might not make sense.
So maybe this means that these should have different expiration times?

In this PR I just set the suspense to the lowest JND.

However, we don't want is for these things to commit earlier in case
they got batched in with other work so I also ensured that they're not
accounted for in in the workInProgressRootMostRecentEventTime calculation
at all. This makes them commit immediately if they're by themselves, or
after the JND of whatever they were batched in with.

Ultimately, I think that we should probably never schedule anything at
Never that isn't truly offscreen so this should never happen.

However, that begs the question what happens with very low pri work that
suspends. Do we always work at that level first?

* Adjust test to account for the new shorter suspense time",Sebastian Markbåge,2019-05-10T17:53:20Z
b74f3f507a0243a124a041f3d5ebc246a98911f4,Added basic tests for InspectedElementContext,Brian Vaughn,2019-05-10T16:13:54Z
61ab40c15c7b1b342bb4907fa88a478052173822,Test utils actSuspense -> actAsync,Brian Vaughn,2019-05-10T15:27:14Z
8536995b11054288ada3fab9b6ba0ef03fe2a7be,"Merge pull request #264 from bvaughn/filter-owners-list

Fetch owners list from renderer (using suspense)",Brian Vaughn,2019-05-10T15:10:24Z
ac0022bf4a32f8c464e59f8b71dec12f141619b3,Added more tree context tests,Brian Vaughn,2019-05-10T15:07:27Z
90f54d77f3bcc93cd9b298b5de6385bd6c16c4dc,Event API: add follow up event unwind test (#15612),Dominic Gannaway,2019-05-10T12:36:54Z
91a044e31fc79e4ea6db97f97de4a9e3a5da8a43,Event API: add key modifiers to Press events (#15611),Dominic Gannaway,2019-05-10T12:32:11Z
7aaef6f41fa0dc0b13554a2e0800a34187a4ddfc,reverting the rename,Sunil Pai,2019-05-10T11:18:40Z
6243d19b9ced68935abf8b58f3a9087afc03e797,"pretty, witty, fine",Sunil Pai,2019-05-10T11:16:43Z
ae3b98f5ade8ec6564780f2ef9bae70ff5fea756,"rewrite test act helpers based on react/#15591

This simplifies your test helpers to loop until all timers are flushed (including the ones that get queued after updates), and works in concurrent mode. I also renamed actSuspense to actAsync to be clearer.",Sunil Pai,2019-05-10T11:13:14Z
7160f6f584d3eb487230fe64b4a76e5086eb7cec,Fixed owners stack direction and added current element to stack,Brian Vaughn,2019-05-10T01:11:17Z
427f0f63c1eeba330dc80b6fb3ac2930bc17e7fd,Added TreeContext tests,Brian Vaughn,2019-05-09T22:52:50Z
5daf9b626f12c291c3c46918ae0a01a8a94c7461,Fixed test describe name,Brian Vaughn,2019-05-09T21:31:48Z
b6c135c165de5023ce09abb28c35458b41927789,Added Jest tests for OwnersListContext,Brian Vaughn,2019-05-09T21:21:22Z
564a2233685d52fceccfd2f4a515a654ec6f9879,"Fetch owners list from renderer (using suspense)

Owners in the list may have been filtered out of the Store, but in the owners list view- it's important to still show them. The frontend cannot do this on its own, so this list needs to come from the renderer interface.",Brian Vaughn,2019-05-09T18:47:22Z
3d8b836e22981063d0396e04eefcb10fdec600ee,Event API: ensure we pop context for event system fibers (#15599),Dominic Gannaway,2019-05-09T16:01:18Z
e33e32db040f19733d699d4b1bce6c20dcd7711e,Event API: normalize event timeStamp property to be in event system (#15598),Dominic Gannaway,2019-05-09T15:05:25Z
3669b901011d4631e3efa9d9307683eac7801fcb,Event API: add more warnings for responder based events (#15597),Dominic Gannaway,2019-05-09T14:31:18Z
17516b76ae763ec7c4dfa09d826164d6bb2e41c0,Dim owners that have been filtered from the tree in rendered-by list,Brian Vaughn,2019-05-09T01:23:54Z
0722a5a02421b9348344bc365407016f4115c35d,Tweaked REAMDE,Brian Vaughn,2019-05-09T00:58:31Z
ee099124e241778d5d398b48c8eef99bc9c66361,Fixed a Profiler memoization bug and improved test coverage,Brian Vaughn,2019-05-08T22:41:57Z
d42f86bb50e5b49edf05e8e51f043f6b7c3d46f8,Updated Profiling chart tests to cover components with duration=0,Brian Vaughn,2019-05-08T21:35:43Z
df10afba51cefad55ae2635cc3a60e5e59d84e43,"Merge pull request #262 from submetu/enhancement/label-improvement

Profiler: Improve labels for times that round to 0.0ms",Brian Vaughn,2019-05-08T21:26:16Z
4f1d347c046f3e7c76683469718614c9f74e5e70,Custom filters are applied by default after extension reload,Brian Vaughn,2019-05-08T21:22:06Z
34a38dc4f0b76866b1403240f0c6812ab773b734,updates snapshots and removes extra formatting from formatTime,Subhan,2019-05-08T20:33:26Z
d3522f1f66bc55ba5f1e227aea1d6b9d953a4f45,Uses FormDuration and FormTime to format times that are 0 into something more readable,Subhan,2019-05-08T20:18:43Z
98260f8614a02df9735806b2d4140ab01a943da9,Added installation instructions to README,Brian Vaughn,2019-05-08T19:53:22Z
05d08500b2d3bf7dbb68702068bade4f3dbcf8e4,Experimental Event API: Press event properties (#15586),Dominic Gannaway,2019-05-08T19:29:03Z
51e66cf9fa3448efdc7c5938405757dbb53c9079,Experimental Event API: reduce code size of event modules (#15590),Dominic Gannaway,2019-05-08T18:09:32Z
8abf243b86e062cf54110d4b3bf629cd5d071dd8,Ensure touch events are properly handled for pageX and pageY (#15587),Dominic Gannaway,2019-05-08T18:08:15Z
703706b40f4b2de3906b3f311f16d6b433e84e0f,"Add toggle-suspense button to all elements

This button is disabled if the renderer returns canToggleSuspense=false.",Brian Vaughn,2019-05-08T17:50:32Z
dbe68f7a6763f79d61b87ab2abe26aeb976fbc45,Updated lint ignore for new dev shell dist folder,Brian Vaughn,2019-05-08T15:52:48Z
60511aadc065d49d0b83578c8983b4447de45abb,Profiler: Improve labels for times that round to 0.0ms,Subhan,2019-05-08T07:11:10Z
c7398f33966c4fedcba2c48e915b379e8f334607,"Add Suspense Boundary Context (and unstable_avoidThisFallback) (#15578)

* Avoidable suspense boundaries

* Move the context out of SuspenseComponent

* Use setDefaultShallowSuspenseContext instead of passing 0",Sebastian Markbåge,2019-05-08T01:08:05Z
f9e60c8a197b8fbdaebfe4b2a9bcbcd319ea3dd5,"Warn when suspending at wrong priority (#15492)

* Warn when suspending at wrong priority

Adds a warning when a user-blocking update is suspended.

Ideally, all we would need to do is check the current priority level.
But we currently have no rigorous way to distinguish work that was
scheduled at user- blocking priority from work that expired a bit and
was ""upgraded"" to a higher priority. That's because we don't schedule
separate callbacks for every level, only the highest priority level per
root. The priority of subsequent levels is inferred from the expiration
time, but this is an imprecise heuristic.

However, we do store the last discrete pending update per root. So we
can reliably compare to that one. (If we broaden this warning to include
high pri updates that aren't discrete, then this won't be sufficient.)

My rationale is that it's better for this warning to have false
negatives than false positives.

Potential follow-ups:
- Bikeshed more on the message. I don't like what I landed on that much
but I think it's good enough to start.
- Include the names of the components that updated. (The ideal place to
fire the warning is during the setState call but we don't know if
something will suspend until the next update. Maybe we could be clever
and warn during a subsequent update to the same component?)

* Move Suspense priority check to throwException",Andrew Clark,2019-05-07T23:50:04Z
a54581c2ddca06d6e0eabf87c90e276c6e7a0987,Fixed invalid DOM nesting warning,Brian Vaughn,2019-05-07T22:25:17Z
44e90e6ef4dab6860397ae2557278c3b452e36e6,Upgrade @reach UI and remove tooltip fork,Brian Vaughn,2019-05-07T22:22:57Z
97b7fdd2d9c1505b22ac25f0902378caf0a3897d,Fixed a deprecated prop warning from react-window,Brian Vaughn,2019-05-07T21:47:37Z
278661715c28b01b9c32b775679e9636baad2b18,Show import error dialog if profiling data import fails,Brian Vaughn,2019-05-07T21:38:11Z
acdc9bae674d27fb107a8ed99680148f07cfd55d,"Added export+import profiling data test coverage
Also fixed an incomplete import feature as well as a regression in export that had gone unnoticed due to previous lack of test coverage.",Brian Vaughn,2019-05-07T20:08:46Z
89d8d1435ffc61fd5201636a84c53806130ef4b8,"Add React.unstable_createEventComponent (#15580)

API for creating event components from event responders.",Nicolas Gallagher,2019-05-07T19:36:42Z
90701815b646239e7085f31c05dffb8d17d0de1e,"Merge pull request #258 from bvaughn/profiler-test-experiments

Added profiler tests",Brian Vaughn,2019-05-06T21:00:45Z
7ead6997148b1628dae43078859c2f6f539598ba,Prettier,Brian Vaughn,2019-05-06T20:58:49Z
6ab897234557a951ed23ec57d925f6e3447d7497,Update to React canary release for interaction tracing bugfix,Brian Vaughn,2019-05-06T20:52:27Z
c2bf71f406e530813b023eaa267c5e5e49869d32,Added commit tree builder test,Brian Vaughn,2019-05-06T20:41:36Z
b25d996fc4d8d84afe00bbb852f7480ab4725fa6,Added profiling chart data tests,Brian Vaughn,2019-05-06T20:37:06Z
d86bc1020ec6122a0a37685f57ab2c7a88be71d8,Hardened tests to ensure expectations are flushed,Brian Vaughn,2019-05-06T20:04:14Z
6da04b5d886b272e241178694e15ced22c5a2c05,"Fix interaction tracing for batched update mounts (#15567)

* Added failing test for act+interaction tracing
* Mark pending interactions on root for legacy unbatched phase",Brian Vaughn,2019-05-06T19:59:48Z
d38cfd452f014167d223c73091d4a148a9f893a5,"Ensure TouchHitTarget element is server side rendered with hit slop (#15385)

* Follow up to 15381

* Add back in hit slop properties

* Prettier

* Fix lint

* move hydration update out of DEV block

* Remove pointer-events:auto",Dominic Gannaway,2019-05-06T19:13:23Z
705cd9b10993fab6d05844f2a7d527d555dbeea6,Added Flow types to profiling test,Brian Vaughn,2019-05-06T16:44:01Z
c29483122ce8297c7c136c50cdf31cb89fcb4c04,Removed outdated TODO comment,Brian Vaughn,2019-05-05T16:56:54Z
269969b64564637dd2a0933b426d63059e9e3652,Updated snapshot data after ReactDOM batch fix,Brian Vaughn,2019-05-05T16:52:27Z
1c49a7ef59f5e35b11d7418fee163a6d93a0856a,Added remaining profiling tests. One currently fails because of a bug with act() and interaction tracing,Brian Vaughn,2019-05-04T21:22:50Z
da1e5776b1491177c59d68e7723ad0e787e7fc49,Added a second Profiling test (for CommitDetails) and fixed some module reset prolems,Brian Vaughn,2019-05-04T20:11:56Z
dd96b3314cf0ec0ad50d38d9348b591068c492c5,Cleaned up tests a bit. Profiling test uses mock timers now.,Brian Vaughn,2019-05-04T16:36:13Z
2e5d1a8b9e2c29418a27b24306e4c8d5f8681f4f,"React Events: fix cancel events for Press (#15563)

* Fixes a bug in the cancellation logic. The cancel events are now correctly listened to on the root.
* Fixes cancellation in Safari by using the dragstart event as a proxy for cancellation (i.e., the event dispatched when move-during-press occurs on an anchor tag)",Nicolas Gallagher,2019-05-03T22:33:21Z
f7c8e3a05c9dd4f32891f563efa4307dc1333f5a,Experimenting with profiler tests,Brian Vaughn,2019-05-03T22:01:26Z
a8ed95445c56be24e0200f315c44904aadac28ea,Store profiler snapshot data by root (and clear on root unmount),Brian Vaughn,2019-05-03T21:59:20Z
307e0a7d7d6a03a228c1df7ab8a5391b8f766268,"React Events: cancel onLongPress for large enough moves (#15562)

Implements the behaviour from React Native's Pressability.",Nicolas Gallagher,2019-05-03T19:59:55Z
339366c461acca41d12ce15264181bc94aaa0eb4,Event API: Support press reentry for pointer events (#15560),Dominic Gannaway,2019-05-03T17:32:50Z
a552b7b5f799ef2893d9fd9d5461d569917e4f33,Only clear Profiling snapshot on root-unmount,Brian Vaughn,2019-05-03T17:12:45Z
73cf0fa32bbb1f6947308330a77cffd57bd7b980,Merge branch 'master' into sompylasar-232-clear-profiling-data-for-unmounted-root,Brian Vaughn,2019-05-03T17:01:43Z
542409954a4fae6763e36a113e7f447db6171bfe,"Merge pull request #257 from bvaughn/right-align-flame-graph

Right-align flame graph children",Brian Vaughn,2019-05-03T17:01:23Z
8585ee37dbfeb795ba4b7fc1f879af92fbb475dc,Renamed assertOneMap -> assertEmptyMap,Brian Vaughn,2019-05-03T16:30:48Z
8850a9a64ae8106142436b9f87b1401955d0eff0,Merge branch '232-clear-profiling-data-for-unmounted-root' of https://github.com/sompylasar/react-devtools-experimental into sompylasar-232-clear-profiling-data-for-unmounted-root,Brian Vaughn,2019-05-03T16:24:58Z
e71bda525799341e5f10200922760259b29a87fb,Right-align flame graph children,Brian Vaughn,2019-05-03T16:21:26Z
435e22ad1be514ce2ef844217aafb1ae57dd7eeb,Fixed deploy script,Brian Vaughn,2019-05-03T15:55:31Z
07281993d16ade17b7b9d55ae2d77e8cd3b41379,"Merge pull request #242 from sompylasar/improve-flow-coverage-any

Improve Flow coverage by reducing typecasts through `any`",Brian Vaughn,2019-05-03T15:00:47Z
868cf67aa48d9089151c8f00b95d75ca21269d94,Removed findCurrentFiberUsingSlowPath() in favor of findCurrentFiberUsingSlowPathById(),Brian Vaughn,2019-05-03T14:56:24Z
7f4482e4388066373624bf1dd815386d3ceadd25,Removed optional_chaining from Flow config,Brian Vaughn,2019-05-03T14:48:30Z
40ed0ca8393b43c7e1bdac4b7f1585de2b25569b,Merge branch '165-add-flow-types-for-fiber' of https://github.com/sompylasar/react-devtools-experimental into sompylasar-165-add-flow-types-for-fiber,Brian Vaughn,2019-05-03T14:48:21Z
4bf3ac19101c3273b205ed08f293795597485dee,Fixed broken path-selection after filter changes,Brian Vaughn,2019-05-02T22:21:29Z
d7447a8458c8196425e94ef746ba6c9d1be6f421,Fixed bug in Store.getIndexOfElementID() that caused roots with multiple top-level children to return an incorrect item index,Brian Vaughn,2019-05-02T22:12:57Z
4e04907d13e8617dd38ce2f4f6c3c1ff031fed17,Added badge for enabled filter count,Brian Vaughn,2019-05-02T17:53:40Z
ef596be1ef06effddee62d0481a25bca12456839,"Merge pull request #207 from sompylasar/131-highlight-all-children

Support highlighting of all DOM elements of Fragments, not just first",Brian Vaughn,2019-05-02T15:31:22Z
1473e9efc8d873fa0a46427c4a283c28cec9c088,"Merge pull request #245 from bvaughn/custom-filtering

Add configurable component filters",Brian Vaughn,2019-05-02T00:52:27Z
83b521c7b472823548292480f7bff4d5bb6c5c1f,Updated Flamechart to support multiple nodes at root,Brian Vaughn,2019-05-02T00:44:38Z
4a4786ac2faaa558a4bb32a51cf6eaedcefb2cdc,Misc cleanup,Brian Vaughn,2019-05-01T21:18:20Z
e6da4b9058987611018e64309225c38566516dff,Renamed FilterType -> ComponentFilterType,Brian Vaughn,2019-05-01T21:01:03Z
e45deb5471ac8ec836635d9949fb6557dcec6a93,Removed $FlowFixMe comments,Brian Vaughn,2019-05-01T20:59:54Z
540207901d4af2ed894b76b6693f9d9c84f2711a,Added some component filtering tests,Brian Vaughn,2019-05-01T20:31:55Z
84292201644143dd3f2aace2753f10caec339840,Added filter UI (but with a lot of $FlowFixMe comments),Brian Vaughn,2019-05-01T17:43:40Z
0b4bfbc98fdf3cf8c11a25ef7d8f8841cbc549d6,Add support for hide-by-name and hide-by-path component filter regexps,Brian Vaughn,2019-04-30T19:52:43Z
a2ba90bf96b387fd5b3147fdecf5231b9f726c26,Fixed a path selection bug when filter pereferences are updated,Brian Vaughn,2019-04-30T17:04:15Z
c4c51c0821d6ac37513da12d9174d0fe47a1390e,Prevent filter preference changes while profiling is active,Brian Vaughn,2019-04-30T16:48:15Z
eb9705abc87d6b9a03eaec55cdf8465e69e9ab14,Removed FilterList UI for now (collapsed into Settings component),Brian Vaughn,2019-04-30T15:17:20Z
a241780dc249bc959c6b7e663dbe2e6deec1ab42,Filter changes are applied to the renderer without reloading,Brian Vaughn,2019-04-29T20:08:35Z
27a182003913e80771cbe0d4f44a026bdc7a15f3,Refactored filter preferences a bit more to be stored in the Store,Brian Vaughn,2019-04-28T22:33:39Z
ee1b38e4dbfdf674ecdb17d3a07a1375ed01979a,Added filter preference types and plugged into renderer partly. Lots of work to do still.,Brian Vaughn,2019-04-27T17:31:40Z
9db209ee64b6eb12cbfb9cae8c74027fb2317d1f,Initial pass at adding filter-by-type Flow types and support to renderer,Brian Vaughn,2019-04-26T21:40:02Z
17c5feb66a625be8c6a3b223dedca29333de77db,Reorganized types shared between backend and frontend slightly.,Brian Vaughn,2019-04-26T21:02:32Z
18b34b49268ab9256e5408b1746da4a45eec5ca1,Rearranged Settings UI in prep for custom filter controls,Brian Vaughn,2019-04-26T20:53:22Z
a9aa9f210637c6b74fab768e63f899b6a4216e0f,"Merge pull request #251 from gaearon/devserver

Use WebpackDevServer for local testing",Brian Vaughn,2019-05-01T16:29:43Z
b9ae9393b9000bc43c8039ad80faa84c96469e6c,Use WebpackDevServer for local testing,Dan Abramov,2019-05-01T16:13:33Z
cd89c0d75f6e323a3e3fc16ef9e2d09dc93675ed,"Clear profiling data for root when the root is unmounted

Fixes https://github.com/bvaughn/react-devtools-experimental/issues/232",Ivan Babak,2019-05-01T08:44:07Z
c6c71ef8f900341bfd2778c8dd60a45f34ec0273,"Fix profiling screenshots data structure to map rootID to commitIndex

Propagate `rootID` throughout the code for `captureScreenshot`.

Rename private profiling maps of `store` to make relations more clear.

Fix missing cleanup for screenshots data in `set importedProfilingData` of `store`.",Ivan Babak,2019-05-01T08:07:36Z
d1f6e762e483b134449d458b28dedab432bb264d,"Improve Flow coverage by reducing typecasts through `any`

There are many unnecessary typecasts through `any` which
break the Flow of types across the program.

It's more bulletproof to avoid lying to ourselves about types.

Also fixed sketchy null check where zero ID would be skipped:
```diff
-  } else if (selectedElementID) {
+  } else if (selectedElementID !== null) {
```",Ivan Babak,2019-04-28T10:44:36Z
ec6691a68716bc59291746fc62f374a56fb435c9,Event API: remove isTargetDirectlyWithinEventComponent (#15546),Dominic Gannaway,2019-04-30T16:38:48Z
abcb613223c132dcd0e09a6941c628a0177a1d7a,"Minor Bridge code tweaks:

1. Renamed a variable
2. Coerced undefined to null
3. Added a couple of console.warn() for unexpected paths",Brian Vaughn,2019-04-30T16:23:11Z
5204ae87bcd013aa1fa1fded6be8dea5ac99c13d,"Merge pull request #229 from sompylasar/217-workaround-disconnected-port-error

Fix for 'Attempting to use a disconnected port object'",Brian Vaughn,2019-04-30T16:15:52Z
b24216a7b1d27402a7f9937dc9eefe18f5372005,"Merge pull request #234 from gaearon/nested-suspense-test

Add test coverage for nested Suspense",Brian Vaughn,2019-04-30T15:51:58Z
9e1b1e8c91bd7e7bab4760afffa695d139f3bc07,"Merge pull request #233 from gaearon/preset-env

Start using @babel/preset-env",Brian Vaughn,2019-04-30T15:50:17Z
da951ec9bb9f7cf4835f8c1a1d30170cafedce84,"Merge pull request #243 from sompylasar/rename-profiler-types-to-frontend-backend-to-disambiguate

Rename Profiler types to disambiguate which is Frontend and Backend",Brian Vaughn,2019-04-30T15:47:05Z
44205f16d9924f0f053c2ff3e103e1bb40a1d4c7,"Merge pull request #247 from sompylasar/fix-flow-on-circleci

Fix Flow failure on CircleCI due to the number of workers",Brian Vaughn,2019-04-30T15:32:37Z
a6e30001fb8ffee34e40a4e88615c3283509e181,"Delete duplicate Focus.js (#15540)

This file was renamed to the lower case version, but as Mac filesystems are typically case insensitive, it was never removed.",Dominic Gannaway,2019-04-30T11:20:44Z
f7993d547736b23afbb2046b212655ee9bd1b634,"Delete duplicate Hover.js (#15539)

This file was renamed to the lower case version, but as Mac filesystems are typically case insensitive, it was never removed.",Dominic Gannaway,2019-04-30T11:13:07Z
c8ee10037ada7512ac17e67db858c1d2565038c0,"Delete duplicate Swipe.js (#15541)

This file was renamed to the lower case version, but as Mac filesystems are typically case insensitive, it was never removed.",Dominic Gannaway,2019-04-30T11:11:26Z
494716c9b40c29e59f61794f5baa046d1dbe50a6,"Delete duplicate Drag.js (#15537)

This file was renamed to the lower case version, but as Mac filesystems are typically case insensitive, it was never removed.",Dominic Gannaway,2019-04-30T11:07:24Z
377846fef80d440f2d469c30f194771bc7493541,"Delete duplicate Press.js (#15538)

This file was renamed to the lower case version, but as Mac filesystems are typically case insensitive, it was never removed.",Dominic Gannaway,2019-04-30T11:06:44Z
379515e83efa3bb0af8676aa431107e41b290302,Follow up to 15535 (#15536),Dominic Gannaway,2019-04-30T11:04:19Z
bd88982fbff117ebc044a33702906c32940c653b,Event API: use `capture` for all event listeners using experimental responder system (#15526),Dominic Gannaway,2019-04-30T10:40:45Z
bfbde71657dacd2e418bd1868320da41bc1ecbac,"Fix Flow failure on CircleCI due to the number of workers

https://github.com/flowtype/flow-bin/issues/138#issuecomment-448416874
https://github.com/flowtype/flow-bin/issues/138#issuecomment-450367472

> This will stop flow from trying to consume too many virtual CPUs (which CircleCI doesn't actually provide), letting it run to completion without first running out of memory and killing its sub processes.

The log output in CircleCI was:
https://circleci.com/gh/bvaughn/react-devtools-experimental/201
```
#!/bin/bash -eo pipefail
yarn flow
yarn run v1.10.1
$ /home/circleci/repo/node_modules/.bin/flow
Launching Flow server for /home/circleci/repo
Spawned flow server (pid=259)
Logs will go to /tmp/flow/zShomezScirclecizSrepo.log
Monitor logs will go to /tmp/flow/zShomezScirclecizSrepo.monitor_log
Launching Flow server for /home/circleci/repo
Spawned flow server (pid=361)
Logs will go to /tmp/flow/zShomezScirclecizSrepo.log
Monitor logs will go to /tmp/flow/zShomezScirclecizSrepo.monitor_log
Launching Flow server for /home/circleci/repo
Spawned flow server (pid=464)
Logs will go to /tmp/flow/zShomezScirclecizSrepo.log
Monitor logs will go to /tmp/flow/zShomezScirclecizSrepo.monitor_log
Launching Flow server for /home/circleci/repo
Spawned flow server (pid=567)
Logs will go to /tmp/flow/zShomezScirclecizSrepo.log
Monitor logs will go to /tmp/flow/zShomezScirclecizSrepo.monitor_log
Lost connection to the flow server (0 retries remaining): -Out of retries, exiting!
error Command failed with exit code 7.
info Visit https://yarnpkg.com/en/docs/cli/run for documentation about this command.
Exited with code 1
```",Ivan Babak,2019-04-30T04:56:53Z
72ca3c60e7c02a4e9ebc6218b144249c6b5639b9,Bump scheduler version to 0.14.0 (#15395),Andrew Clark,2019-04-30T01:10:11Z
7882c41f607ee5273da9637da0bb20ca7634cb83,"Use lowercase entry points for event modules (#15535)

Matches npm convention",Andrew Clark,2019-04-29T23:25:56Z
43c4e5f348eb5704464986e2dc3221e347041b82,Add method for forcing a lower framerate,Nathan Schloss,2019-01-31T17:11:31Z
1b752f1914b677c0bb588d10a40c12f332dfd031,"Fixed potential interaction tracing leak in Suspense thennable memoization (#15531)

Audited the other places we call unstable_wrap() in React DOM and verified that they didn't have this similar problem.",Brian Vaughn,2019-04-29T22:04:52Z
12e5a13cf2ea48ad7f527e68caf5faf8bf724c97,"[React Native] Inline calls to FabricUIManager in shared code (#15490)

* [React Native] Inline calls to FabricUIManager in shared code

* Call global.nativeFabricUIManager directly as short term fix

* Add flow types

* Add nativeFabricUIManager global to eslint config

* Adding eslint global to bundle validation script",Eli White,2019-04-29T21:31:16Z
2cca18728e7d8a5691df6598629ba21020e22898,"React Events: add onFocusVisibleChange to Focus (#15516)

Called when focus visibility changes. Focus is only considered visible if a
focus event occurs after keyboard navigation. This provides a way for people to
provide visual focus styles for keyboard accessible UIs without those styles
appearing if focus is triggered by mouse, touch, pen.",Nicolas Gallagher,2019-04-29T20:52:15Z
d35cf80921245ff7da4bcc7c17f68082f21088fb,Remove Fiber type properties we don't use in DevTools,Ivan Babak,2019-04-28T19:57:28Z
d351b46aee538a67a8e49ca97008d4a4d883330f,"Merge pull request #238 from sompylasar/fix-typo-recursivelyinitializetree

Fix typo `recursivelyIniitliazeTree` -> `recursivelyInitializeTree`",Dan Abramov,2019-04-28T12:38:49Z
7c04883f8da495223685fd52527f54571edea016,"Merge pull request #239 from sompylasar/remove-agent-addbridge

Remove Agent addBridge: there can only be one bridge, add in constructor",Dan Abramov,2019-04-28T12:38:34Z
1b5f043e015afae9e203bec0388805fa610ed917,"Fix for 'Attempting to use a disconnected port object'

Fixes https://github.com/bvaughn/react-devtools-experimental/issues/217

The error reproduces with any two React websites, e.g. `https://reactjs.org` and `https://nextjs.org`, by keeping the DevTools Components tab open and switching between these websites in the same browser tab.

There are several issues with the code that contribute to this:
1. `Bridge` leaves behind a dangling timer that fires `_flush` after the bridge has been abandoned (""shutdown"").
2. `bridge.send('shutdown')` is asynchronous, so the event handlers do not get unsubscribed in time.
3. `port.onDisconnect` does not trigger on in-tab navigation like new URL or back/forward navigation.
4. State management design of the code that uses shared variables and callbacks makes it hard to handle race conditions originating from the browser.

This commit cleans up some of the lacking symmetry when using `addListener`/`removeListener`, but the code in `shells/browser/shared/src/main.js` is hard to reason about with regards to race conditions, and there are many possible race conditions originating from the browser, so maybe there could be a better design paradigm (like a formal state machine) to manage the state changes in response to sequences of events than plain old event listeners, callbacks, and shared variables.

Unrelated, but clicking Chrome Back/Forward/Back/Forward very fast makes the browser and the DevTools and the DevTools of DevTools stall and become unresponsive for some time, then recovers but the Back/Forward/Stop/Refresh button and favicon loading indicator may remain broken. Looks like a Chrome bug, some kind of a temporary deadlock in handling the browser history.",Ivan Babak,2019-04-26T11:30:04Z
d3e5fcd81cc74a97bd719f39d7886303490ba58a,"Rename Profiler types to disambiguate which is Frontend and Backend

Flow IDE shows the original type, not the file-scoped alias,
so it's confusing to see incompatible variables that have types
with the same name.

This started from `src/devtools/ProfilingCache.js` where
`ProfilingSummary` was incompatible, but I decided to make a bigger
change for consistency and to avoid similar mistakes in the future.",Ivan Babak,2019-04-28T11:28:10Z
9f06bc345f78922bbe6f428280311b39a305e324,"Add Flow types for Fiber

Fixes https://github.com/bvaughn/react-devtools-experimental/issues/165",Ivan Babak,2019-04-26T12:34:16Z
0b817777b480fc53e4080a36787b2c7a86b9c55e,"Remove Agent addBridge: there can only be one bridge, add in constructor

Let's make impossible states truly impossible, and fix Flow types, too.

All three usages of Agent called addBridge right after constructing it.
Agent has one field `_bridge` which is force-typed as not-null despite
there's a temporary zone between the constructor end and addBridge start
where `_bridge` is null.",Ivan Babak,2019-04-28T10:31:16Z
19bfba79439b41a6681013f97c22f46ba17d52aa,Fix typo `recursivelyIniitliazeTree` -> `recursivelyInitializeTree`,Ivan Babak,2019-04-28T10:45:05Z
cc5a49379bdbd78545af9f77465ed10f3283895f,"React Events: FocusScope tweaks and docs (#15515)

* FocusScope: rename trap to contain.
* FocusScope: avoid potential for el.focus() errors.
* FocusScope: add docs.
* Update docs formatting.",Nicolas Gallagher,2019-04-26T20:38:01Z
796c67a25f980f1bcf9507b9f7d02131b8a2b552,Event API: responder event types should not re-register on EventComponent update (#15514),Dominic Gannaway,2019-04-26T20:33:54Z
d81d74b2361248471ccca6f08595000a83a8a622,Add test coverage for nested Suspense,Dan Abramov,2019-04-26T19:04:28Z
e5ed26687389669d5e21a5f4f50ec31ca6c3cfa2,Start using @babel/preset-env,Dan Abramov,2019-04-26T18:29:51Z
2118b1fe1b56b44ac4e7671a5c0d00821db69f6b,"Merge pull request #230 from gaearon/assert-maps

Assert empty maps when there are no roots",Dan Abramov,2019-04-26T17:15:04Z
b6a55989f50d21bd916049888c81a311589c6168,Assert empty maps when there are no roots,Dan Abramov,2019-04-26T16:47:00Z
c28acc5d471883a19ca562365f4974c36da48dd3,Changed owners back button label to say 'Up to <...>',Brian Vaughn,2019-04-26T16:38:25Z
c4d1dcb533c2ff32bb9eedf562e5f4dba21fe7a6,React Events: core API documentation followup (#15506),Dominic Gannaway,2019-04-26T14:47:28Z
41ef1961c1cd309c128f0ea88b85d28c0354f9fb,"Update TopLevelEventTypes.js (#15511)

Fix grammar of code comment.",Dan Nate,2019-04-26T12:58:32Z
7a482af5d89cfb76bce29a2db00a174a5f1766c9,Event API: Fix bug where Press root events were not being cleared (#15507),Dominic Gannaway,2019-04-26T09:30:38Z
281616f462866f382c0fead366c7b2b5172a1ce5,"Support highlighting of all DOM elements of Fragments, not just first

Fixes https://github.com/bvaughn/react-devtools-experimental/issues/131

Uses the new function `findAllCurrentHostFibers`.

Removes dependency on React's `renderer.findHostInstanceByFiber` function
which used to highlight only the first DOM element of a Fragment.

Reworked `src/backend/views/Overlay` to support highlighting
more than one element rectangle annotated with one tooltip.
Fixed minor issues with the tooltip position calculation.",Ivan Babak,2019-04-21T08:06:02Z
a14e24efabe8fa37d9b488cd97b116eaab04a702,React Events: core API documentation (#15505),Nicolas Gallagher,2019-04-26T07:11:40Z
8658611b6c0beb6ae23a88d71fce154640ec47fd,Event API: ensure event keys are unique + add validation (#15501),Dominic Gannaway,2019-04-26T07:00:57Z
707b44834fb3a115ddb1d0b36504f4cd28f33d9b,"Merge pull request #213 from wldcordeiro/fix-firefox-perms

fix: correct permissions for Firefox",Brian Vaughn,2019-04-26T02:11:39Z
d9839740ef687bb2ae11cc408f3699aa5c958742,React events: remove unused types (#15503),Nicolas Gallagher,2019-04-25T22:11:53Z
043b73e0a83833d5e2af4630b7db241c70422921,"Merge pull request #223 from bvaughn/owners-list-intermediate-components

Owners list view should drill through intermediate components",Brian Vaughn,2019-04-25T22:10:08Z
09029acf009aeecdd10bbaeddfe3463568d23c0d,Refactored owners list to use cached metadata (and added more tests),Brian Vaughn,2019-04-25T19:16:13Z
15eacae02c1d526bdc54cbff6e32d068fd483257,"Moved owners list calculations into the store and added tests

This is being done to fix a drill-through bug, although the initial fix is perhaps not the most performant one. At least we have test coverage now and a temporary fix.",Brian Vaughn,2019-04-24T22:19:13Z
b6d617ac7f06d712f0edd72fdfbccad3eaf06e68,Added 'back to owner' button when owners stack is collapsed,Brian Vaughn,2019-04-25T22:05:39Z
e88819a22ec1e62b3af1dbae046f0c329c623491,Reverse direction of menu items within drop-down owners list,Brian Vaughn,2019-04-25T21:10:51Z
0b3431170565a8d346912380f7476df60714ab99,"React events: fix press end event dispatching (#15500)

This patch fixes an issue related to determining whether the end event occurs
within the responder region. Previously we only checked if the event target was
within the responder region for moves, otherwise we checked if the target was
within the event component. Since the dimensions of the child element can
change after activation, we need to recalculate the responder region before
deactivation as well if the target is not within the event component.",Nicolas Gallagher,2019-04-25T20:00:22Z
d1f667acc065f2bd9fa4921af6c4d67f5c7b253b,Event API: follow up fixes for FocusScope + context changes (#15496),Dominic Gannaway,2019-04-25T19:10:33Z
a0b1fb37fb49c078039ceaa2a4162f68a1e2735c,"Merge pull request #227 from gaearon/string-table

Transfer strings in a string table",Dan Abramov,2019-04-25T16:54:11Z
1bea469db0bdedd99fcc7257aa41f794c3fa4093,Remove unneeded variable,Dan Abramov,2019-04-25T16:46:48Z
af2d1374c4737b2e241528854650d1b4a0f4ce50,Let -> const,Dan Abramov,2019-04-25T16:38:55Z
3920ebd0a108144453e6d19f2d4f799201d3c9a1,Clarify encoding in overview,Dan Abramov,2019-04-25T16:32:46Z
c8f8943c9ad60a5416cf1a5c57f9c0e966a49b4e,Transfer strings in a string table,Dan Abramov,2019-04-25T16:11:24Z
c530639dd21543ab8d7d9e83d53197cda234b26b,"Minor code structure adjustments to the bundles.js file (#15079)

* simplify

* fix error

* use deepFreeze

* move comments",Kunuk Nykjær,2019-04-25T15:24:01Z
c1363b7e171b247c00a8499d6e46dd9d7d287a15,"Merge pull request #226 from gaearon/mutate-children

Improve performance by mutating the children array",Dan Abramov,2019-04-25T14:27:36Z
2e423c21b03a33e0856a975be69bd2839e4b5615,"Merge pull request #221 from gaearon/heuristic

Use a heuristic for locating roots",Dan Abramov,2019-04-25T14:22:34Z
e1383c666da1750beb74fb048cc5e70668cf3c7b,"Allow to set tracked path multiple times

Fixes #225. This happens when you close and reopen DevTools while on the same page.",Dan Abramov,2019-04-25T13:57:38Z
2993b168e55cd83d4bcf9265cad32bbe37e8a87e,Mutate the children array,Dan Abramov,2019-04-25T13:39:28Z
d5319566a163062de9e6bb8bfc8c466cf1d59f56,Fix broken start:prod command,Dan Abramov,2019-04-25T13:19:35Z
ed36df46c60ea1654d403aaad899cb73f997bdfb,"add --watch mode to ""yarn build"" (#15116)

* wip: add --watch mode to ""yarn build""

* fix: handle error events",Alec Larson,2019-04-25T11:55:44Z
793ef9b8553ca029fa10958137b001d3081ae18f,test(eslint-plugin-react-hooks): add coverage for unused custom hook (#15130),Redmond Tran,2019-04-25T11:15:29Z
d61da93878159d300f8b199cf01d240dd4bf429a,"test(accumulate): add test suite for accumulate function (#15159)

* refactor(typo): remove typo 'be'

* test(accumulate): add test suite for accumulate function",Jeffrey Berry,2019-04-25T11:12:25Z
a187e9b5e40b328a5d0d4d6eded0cbe17fff9ba7,"React Native: Allow Views to be nested inside of Text (#15464)

This feature is now supported on both iOS and Android. The Android feature was merged a couple of weeks ago: https://github.com/facebook/react-native/pull/23195.",Adam Comella,2019-04-25T11:06:39Z
f85aadefc0c059648ee53842ba948a7d7cba468b,"ADD: disablePictureInPicture attribute for HTML5 videos (#15334)

* ADD: disablePictureInPicture attribute for HTML5 videos

* ADD: disablePictureInPicture as DOMProperty and attribute

* Update: Replace camelCase with lowercase and vice-versa

* FIX: Missing comma on attribute (prettier)",Radu-Sebastian Amarie,2019-04-25T11:02:28Z
1eb2b892dfffedfdb57039ef715fc7049f4d538a,"give  `canUseDOM` with a possibility to be a constant (#14194)

https://webpack.js.org/plugins/define-plugin/

Webpack's DefinePlugin has the ability to replace `typeof expr` to a constant in compile-time, which should lead to better dead-code-elimination.",FUJI Goro,2019-04-25T10:28:53Z
de26d6dd361af978b5415d11c5d85d67e96c940b,"typo fix (#15493)

changed ReactResponderContext.dispatchEvent otpions keys to options.",shubham,2019-04-25T08:37:35Z
64e3da286f2c1e66303d2ae1dc06276b2f866e9d,Event API: Add `FocusScope` surface (#15487),Dominic Gannaway,2019-04-25T01:01:09Z
80597a23779fad309a74f79d390ccd3c631d5330,Use a heuristic for locating roots,Dan Abramov,2019-04-24T20:32:58Z
942f67c9369cc587708bd0cde1e61099ab9ed8f3,"Merge pull request #220 from gaearon/removed-ids

Select parent node if selection is removed",Dan Abramov,2019-04-24T18:25:05Z
3f058debc29ccb05a47ac8a8d747c5a5b29a6ed3,Event API: various bug fixes (#15485),Dominic Gannaway,2019-04-24T16:56:21Z
7bae48f00c8e9e7228626ea3eb7388fcae87141f,Fixed minor CSS overflow issue,Brian Vaughn,2019-04-24T16:07:53Z
c855a862c35b3a6c906e41db39325140a1d1bb10,"Merge pull request #218 from gaearon/bump-react

Bump React versions",Brian Vaughn,2019-04-24T15:45:16Z
949384f4ca20651e56d1180289868d774162707e,Select parent node if selection is removed,Dan Abramov,2019-04-24T15:29:23Z
52deada495ce734aae582e31d48d20941bd68792,Bump React versions,Dan Abramov,2019-04-24T14:57:43Z
54aecf487e1a904a6600cbcdbe47ece4802a14fd,"Merge pull request #215 from bvaughn/persist-selection

Try to restore selection between reloads",Dan Abramov,2019-04-24T14:50:29Z
f123763fe1b3d8c9bf188249afcc32baff3cc3fa,Read index off the Fiber,Dan Abramov,2019-04-24T14:05:33Z
5d2d4213ec3d100b3245f8a3788bbc62c7361cef,Delete stale paths,Dan Abramov,2019-04-24T14:02:52Z
e050529c7d54af391330c991817c614ee6ef66dd,Read renderer ID from operations,Dan Abramov,2019-04-24T14:00:46Z
26162988aa7f923b95b413ce9c6ec1503113162a,Fix tests,Dan Abramov,2019-04-23T16:10:19Z
7eb7c5a350f10a29c3629a72d08e2183ea2d9920,"Match Fibers to saved selection as they mount

This implements matching Fibers against the tracked selection path.

The algorithm is optimized to do as little checks as possible:

* When not trying to restore selection, we don't do anything
* When restoring selection, we only check .return pointers of new mounts
* Only when .return pointers match our current deepest match, we compare the frames",Dan Abramov,2019-04-23T15:56:24Z
3bb837b683fcd41f48ca522b09ad7918e7fca6f7,"Implement getPathForElement to serialize the selected path

Note this doesn't restore the selection yet.",Dan Abramov,2019-04-23T15:01:31Z
b1a7007cc5194d769610abf9de796eb152f161b1,"Keep track of root insertion order in the renderer

Normally, Fibers have key or index which we'll use to match things up between reloads. However, roots don't have such a concept. We'll use their insertion order as an approximation. If it's consistent, we'll be able to restore the selection.",Dan Abramov,2019-04-23T14:42:51Z
d8abecdcf997390eaf22dc1bb20fa3a0e81adf0b,"Persist and restore selection in agent

This implements the infrastructure for saving and restoring renderer-specific selection state in the session storage.

Note this doesn't actually implement the calculation and tracking of paths in the renderer. It only simulates that the renderer can do it. The actual implementation will come in a later commit.",Dan Abramov,2019-04-23T14:25:55Z
fb28e9048292f3c74d056370852e3da49ea5ede2,Add missing word to code comment for clarity (#15443),Brendan McLoughlin,2019-04-24T10:03:51Z
fa2fa3564d52f98c5796204a73d38228588a4a36,Experimental event API: adds context.isTargetDirectlyWithinEventComponent (#15481),Dominic Gannaway,2019-04-24T10:02:47Z
d3af2f2a5d7eee1cefb403eee7e67a4f292f5ca8,Experimental Event API: add event component mount phase callback (#15480),Dominic Gannaway,2019-04-24T09:41:24Z
085d00e877b646d422340f2ed4c9a84aad3aab20,"Merge pull request #196 from bvaughn/selected-element-suspense

Convert inspected element (right panel) to use Suspense",Brian Vaughn,2019-04-24T01:33:05Z
7262a30cf38e6980e0b3f2245cc65f2b9510c071,Reverted optimization to avoid re-sending inspected fiber unless it committed,Brian Vaughn,2019-04-24T01:04:25Z
ce126fbb231f9110151b4c93cff765fd882a9f64,"Fix priority inference of next level of work (#15478)

Bugfix for `inferPriorityFromExpirationTime` function. It happened to
work in our existing tests because we use virtual time.

Flow would have caught this if expiration times were an opaque type. We
should consider that in the future. (The downside of opaque types is
that all operations would have to go through helper functions, which may
or may not get inlined by Closure.)",Andrew Clark,2019-04-23T23:41:05Z
71c8759cebfadd09cf58748eb1963fe23ec11e4f,"Measure callback timeout relative to current time (#15479)

Fixes a bug where the timeout passed to `scheduleCallback` represented
an absolute timestamp, instead of the amount of time until that
timestamp is reached. The solution is to subtract the current time
from the expiration.

The bug wasn't caught by other tests because we use virtual times that
default to 0, and most tests don't advance time.

I also moved the `initialTimeMs` offset to the
`SchedulerWithReactIntegration` module so that we don't have to remember
to subtract the offset every time. (We should consider upstreaming this
to the Scheduler package.)",Andrew Clark,2019-04-23T23:40:55Z
9c6ff136c78e934a19d0da950139e4d912ae54c2,"Remove timeout from performance flamegraph (#15477)

The implementation is wrong, but also it's not that useful for
debugging. Implementing it properly would involve tracking more
information than we do currently. Perhaps including the priority
of the callback in the message would be helpful, but not sure. For now
I'll just remove it.",Andrew Clark,2019-04-23T22:42:25Z
299a2714c3dbf6c1d401d4265a8bef2168b2035a,Use stricter equality check (#15474),Dan Abramov,2019-04-23T22:28:02Z
0aa7d2f8006888557e23b3e003eb3889747db19f,Reverted optimization to avoid re-sending inspected fiber unless it committed,Brian Vaughn,2019-04-23T21:03:58Z
1e5c0b7856a3b9a3113f993ff56dcf8a8491237c,Re-added the  selection message,Brian Vaughn,2019-04-23T20:43:38Z
017d6f14b75d4e05a438e34fe0967d730ce24185,"Experimental Event API: add `rootEventTypes` support to event responders (#15475)

* Adds rootEventTypes",Dominic Gannaway,2019-04-23T18:55:50Z
4dcb34ea32dba72380720f65b2039b126d141e46,Fixed Flow error,Brian Vaughn,2019-04-23T18:32:07Z
53c73384201e3abfcc7aa7e3a2124228ecc5cdd4,Updated flow-bin  to attempt  to  fix the  error,Brian Vaughn,2019-04-23T16:00:25Z
d85f566d666df8f6ac0afd60ab54ebf47c5cc159,Merged master (tooltip changes),Brian Vaughn,2019-04-23T15:49:40Z
8b33dd673d965d23d2516bd30c9c3d05386ce881,Added @reach/tooltip,Brian Vaughn,2019-04-23T15:41:52Z
784ebd8fa919bbca41c2a2f5a3eda5be6961f32c,Experimental event API: rework the propagation system for event components (#15462),Dominic Gannaway,2019-04-23T10:50:48Z
ec7536704d1f789b4cb9d4f885fd915a560d8791,Locked down canary versions,Brian Vaughn,2019-04-23T02:32:16Z
7f1531044b9f40e88b949dbe72e40e484c931465,Differentiate between no-change and no-element-found when inspecting element,Brian Vaughn,2019-04-22T22:37:55Z
00872e2e510daa4094fd24d7081528bf017474d0,Fixed suspense fallback issue by moving inspection message side effect before suspending render,Brian Vaughn,2019-04-22T22:25:55Z
64bb2d31f91ea8234db6c6161c8256ade21180b9,Fixed bug with cache invalidation,Brian Vaughn,2019-04-22T22:18:32Z
64bc49d523c05e9fb23bd7b90c0969c0fb72edd2,Run first setState with explicit priority in case of non-React event handlers,Brian Vaughn,2019-04-22T22:11:04Z
2d8c28733d3e62ac3c02aab06d5d87d84b70d2ca,"fix: correct permissions for Firefox

remove the `background` permissions as it's not used by Firefox, but `activeTab` is and we needed
it.

fix #136",Wellington Cordeiro,2019-04-22T21:10:22Z
e31ae91023cd6fc4d3c63b2c9afd5d5aca790cd5,Removed duplicate scheduler module,Brian Vaughn,2019-04-22T20:10:47Z
ba640df98294946f188fd8c35fa81122e6a88178,Merge branch 'master' into selected-element-suspense,Brian Vaughn,2019-04-22T17:47:34Z
433934f55ef272b39281e9b56e4d6c3ff34f48fc,Refactored TreeContext to use less memoization (based on feedback from Sebastian),Brian Vaughn,2019-04-22T17:19:59Z
d53ae2ea8a5db88232c6802fc8f480cb13c23576,Refactored TreeContext to use less memoization (based on feedback from Sebastian),Brian Vaughn,2019-04-22T17:19:59Z
70be637d48d78e932809b96a2b49a572e03e8e54,Don't schedule an update with React unless the curent element was invalidated,Brian Vaughn,2019-04-22T16:03:25Z
5970bf4b40335086d53403b59d2916bca6e7fc1c,Changed polling approach. Fixed remove event typo.,Brian Vaughn,2019-04-22T15:52:15Z
3de18de25ec3c8b28423ab53a760f4cc2087c95c,"Tried to implement two setState pattern, but it does not feel right",Brian Vaughn,2019-04-21T19:16:42Z
957c389566794307e663f53964ee181c7ce64df5,Adding polling and initial stab at not serializing duplicate inspected Element props,Brian Vaughn,2019-04-20T17:35:19Z
c6b19cc1416070e341a7a9be2c160a8472b7577b,Refactored insepected element cache to use the context API,Brian Vaughn,2019-04-20T15:33:00Z
09b023a6e6f0d9a3eed95d488d6e910f305e4ad8,"Naive suspense implementation for selected element panel

This commit leaves a few major things uunresolved:
* We aren't yet polling for updates
* We aren't yet using the two setState pattern
* The resource cache will grow unbounded over time because we aren't yet clearing items from it
* The renderer interface is not smart enough to avoid resending unchanged data between requests",Brian Vaughn,2019-04-19T21:54:28Z
76b29ad0a9c680a6793c71c4a671a0abd9f100f1,"Merge pull request #201 from gaearon/scroll-fix

Fix scrolling to selected row in collapsed mode",Brian Vaughn,2019-04-22T16:37:15Z
587676900f5575868b2e4c2bc67755536e231c4f,React events: initial implementation of disabled prop (#15458),Nicolas Gallagher,2019-04-22T01:17:18Z
59c7aef91d49ce29332ff4ef9711818fbd10f567,React events: add a test for focusable descendants (#15457),Nicolas Gallagher,2019-04-22T00:47:52Z
0a8da33916fceef9ffd93e393b3d64748ccab13a,React events: README update types and remove stopPropagation prop (#15456),Nicolas Gallagher,2019-04-22T00:46:07Z
52652f3456ab00581939f0b12327d0fae6d8fc66,Toggle method no longer emits 'mutated' event unless it mutated the store,Brian Vaughn,2019-04-21T19:20:23Z
129466ed91ed362bb8a970ef7edf930ac411adec,Yarn deploy sets production NODE_ENV,Brian Vaughn,2019-04-21T16:05:55Z
a01fc44a781190009c10585f3b10cb6c391e54d4,"Merge pull request #205 from bvaughn/@reach/tooltip

[BLOCKED] Use new @reach/tooltip",Brian Vaughn,2019-04-21T16:01:23Z
91f74a513433a7060c3ff6de6f2df88efb4f12d0,Fixed focus styles for OwnersStack dropdown toggle button,Brian Vaughn,2019-04-21T15:59:24Z
09b995ab1cf7e7e5d031ffef5b1dcdcb664bd275,Tidied up CSS variables,Brian Vaughn,2019-04-21T15:38:58Z
66df03d17995f637c5b7d47cd893d248d523fdd4,Renamed CSS var color-text-color to color-text,Brian Vaughn,2019-04-21T15:29:51Z
8220df734c8d33d1bc36fb50ab2c24cc393479d1,Tweaked hover and focus colors. Temporarily disabled Tooltip.,Brian Vaughn,2019-04-21T15:23:20Z
a129089891a51883bd2541020e63c441bad02bf2,Tweaking focus/active colors and only showing focus rect on tab,Brian Vaughn,2019-04-20T22:44:24Z
403bf49a78c9c1b0ed0ebb919a32f101933f108c,Use new @reach/tooltip,Brian Vaughn,2019-04-20T21:20:48Z
4218dcbf99ac5dc8f502170b29bbe1b86dfb3471,"Merge pull request #203 from gaearon/push-ops

Push operations directly to the array",Brian Vaughn,2019-04-20T21:27:53Z
740993baa916e5482275825ac29fb0c3594018e2,Merge branch 'master' into push-ops,Brian Vaughn,2019-04-20T21:26:46Z
72156c744f8fc2992b81c0c2dc1b7a3147c2d79e,"Merge pull request #204 from gaearon/no-weakset

Replace WeakSet with return pointer check",Brian Vaughn,2019-04-20T21:23:59Z
94d9f61a7d0bb224d5997ad909425139266287c5,"Merge pull request #206 from gaearon/leading

Ignore leading edge of find-by-DOM throttle",Brian Vaughn,2019-04-20T21:22:49Z
006e03c38e191303b797cb69c35cec1f1069c7cd,Ignore leading edge of find-by-DOM throttle,Dan Abramov,2019-04-20T21:17:12Z
c0d7023a88d33aad7f01125645cf8322a5e808b8,Replace WeakSet with return pointer check,Dan Abramov,2019-04-20T20:42:30Z
02a3a2275307389474c11119cef1f13763cfca60,Push operations directly to the array,Dan Abramov,2019-04-20T20:05:52Z
4b9082eea14a71a5c709a35236f226fea5be1585,Changed style and position of search-for-element button to more closely matchin Chrome ( based on user testing),Brian Vaughn,2019-04-20T17:44:03Z
4ffdffb598cc66b08169f43ebd1f1560592b058b,Fix scrolling to selected row in collapsed mode,Dan Abramov,2019-04-20T15:20:03Z
3697ed2bbacaa62f4869a904bebbe8f31312a5a3,"Merge pull request #199 from gaearon/another-check

Filter out dehydrated Suspense nodes",Brian Vaughn,2019-04-20T15:00:14Z
da2ed30471b43ae36fd8e14907f75ccfd9d5b858,"Merge pull request #200 from gaearon/clear-stuff

Clear DOM overlay on shutdown",Brian Vaughn,2019-04-20T14:57:11Z
d05106e364fbec4c09233d2ad2b669c58e1b48b1,Clear DOM overlay on shutdown,Dan Abramov,2019-04-20T13:34:13Z
a186dc2e8d11e13e6c32009305ec0501b740a829,Filter out dehydrated Suspense nodes,Dan Abramov,2019-04-20T12:46:56Z
d584fcdc6e10b9f4d4e9eec775731e7ffc0fb501,React events: use passive events where possible (#15454),Nicolas Gallagher,2019-04-19T20:09:03Z
051513bfa064c0d5d058482db4cc3a32955b9ec5,"React Events: consolidate logic for Press event component (#15451)

Refactor of Press and additional regression coverage.

The logic for ""start"", ""move"", ""end"", and ""cancel"" events is consolidated into a single block to reduce duplication and improve consistency of the UX across input-types. Also reduces code size.

The bailout logic for anchor tags is removed since we preventDefault for click by default. We can discuss scenarios where it makes sense to limit functionality around interactions on anchor tags.

The logic for ignoring emulated events is simplified and improved. Pointer events can produce emulated touch (immediately after pointer) and mouse events (delayed) which is now accounted for and tested.",Nicolas Gallagher,2019-04-19T17:05:28Z
cdfce1ad23813046137c9d396f03afca5a31716d,"React events: consolidate logic of Hover event component (#15450)

Minor refactor of Hover and additional regression coverage.",Nicolas Gallagher,2019-04-19T16:51:36Z
5857c89da2b7322c24dc4448408a2c0d7489ac82,React events: extract common helper functions (#15449),Nicolas Gallagher,2019-04-19T15:40:18Z
d7e8fccd1a7a01ecb3cb27d39be87c4f0d9a8cde,Fixed an OVERVIEW typo,Brian Vaughn,2019-04-19T14:54:30Z
5b0b9c9fbce81258ad0c8126ae328bcfa3863b04,"Merge pull request #193 from gaearon/no-reorder

Don't reorder a single child",Brian Vaughn,2019-04-19T14:51:51Z
9a395c2f2c78172147c974de29727824168b51a0,No need to reorder empty children either,Dan,2019-04-19T12:21:09Z
fb8ad3486e70aa96d3e183db90b79bd915f474a5,Don't reorder a single child,Dan,2019-04-19T12:19:58Z
2adbfd96075cc212b9cbc51e2218461a4f48091b,"Merge pull request #186 from gaearon/more-suspensey-stuff

Fix more Suspense issues",Dan Abramov,2019-04-19T12:18:50Z
efb5855c8c43511e3e6ed134660ed82aafcda829,Nits,Dan,2019-04-19T12:17:17Z
3e657a603181b41abf1fb01ea835ae73c9cac5fa,Prettier,Dan,2019-04-19T12:09:25Z
37dd1ec8f8411674ac4f762eb95c844df7de3310,Merge branch 'master' into more-suspensey-stuff,Dan Abramov,2019-04-19T12:09:01Z
f286c0d901588b6d2ba811e4b9077a65279bdd70,Increased contrast for selected+inactive background color,Brian Vaughn,2019-04-19T01:19:10Z
c6a27d1feaa8662900d7ff0f3a9cdd113f7dda7c,Merge branch 'master' of github.com:bvaughn/react-devtools-experimental,Brian Vaughn,2019-04-19T01:13:43Z
c0b414d58140f2dda765ef114d981a967992026b,Node scripts should fail if not NODE_ENV specified,Brian Vaughn,2019-04-19T01:13:34Z
131e2e52db486782efe91867611ab9c7021d27e5,"Merge pull request #188 from gaearon/humble-search

Don't select search result unless user does something",Brian Vaughn,2019-04-19T01:04:28Z
60b614f5272fd0fa400c555e011f8262582c5b55,Renamed TREE_OPERATION_RESET_CHILDREN -> TREE_OPERATION_REORDER_CHILDREN,Brian Vaughn,2019-04-19T00:59:53Z
24736e4ff57832b9fcc1da8137729ae65a78124a,Hardened reorder child invariants,Brian Vaughn,2019-04-19T00:58:48Z
3d09b4aaa5aa2e2096ba87e2448f4056185b0b6f,Don't select search result unless user does something,Dan Abramov,2019-04-19T00:54:39Z
21afd6ea206e149017232e728da40a2ad72e68f7,"Merge pull request #184 from bvaughn/harden

Harden assertions",Brian Vaughn,2019-04-19T00:50:17Z
b0c0a11f1b8f8047cbbd898ca481ca03b8d47710,Revert accidental change,Dan Abramov,2019-04-19T00:41:00Z
72e67b343f2196c572d59e4ea95f8d7e3903647e,Add Concurrent Mode test,Dan Abramov,2019-04-19T00:18:25Z
534dfb0ca2e1640fa24a8cf2893b23aaf3e3199b,Optimize: don't recreate ID arrays all the time,Dan Abramov,2019-04-19T00:13:25Z
8830ba890cdfc27970f1183fec41f8c2025d5977,Fix more Suspense traversal bugs,Dan Abramov,2019-04-19T00:09:57Z
346b628b43f24e08ee7c0f09492a292436f13324,Add failing tests for Suspense with same type,Dan Abramov,2019-04-18T18:58:36Z
d44bf272ad1ffb9adfd21de760645840ffdaec86,Refactor: materialize typed array in one place,Dan Abramov,2019-04-18T19:02:59Z
ccecde76d1ffc7beee5c3e80987990ea233b4ceb,Harden assertions,Dan Abramov,2019-04-18T23:29:08Z
3dfbf8ad6bd85e85c131009bd4f6a6652e8fcf7b,Added a new invariant to the store (bridge operations handler),Brian Vaughn,2019-04-18T22:40:50Z
7930bad8c6a6a178fc132deb8f63f32f88d3b5c5,Deploy production extension builds,Brian Vaughn,2019-04-18T21:45:24Z
e2aedb2ea77a8e3302eb5853524605142b0b331c,"Merge pull request #181 from gaearon/consoleerror

Fail tests on errors in renderer",Brian Vaughn,2019-04-18T17:08:44Z
d0b5e3a7cb92ed20c23a6ffdea72a66a7ee177b6,Update setupTests.js,Dan Abramov,2019-04-18T17:06:34Z
d6e829d7a5f0b105930e26f21fe05562e495fab3,Fixed bug in reset-children to properly calculate new root weight,Brian Vaughn,2019-04-18T16:54:26Z
89f7a0c04889936a3549d95879efcd00f12e6bea,"Merge pull request #182 from bvaughn/suspense-toggle

Fixed a Suspense toggling bug that incorrectly impacted tree weight",Brian Vaughn,2019-04-18T16:45:22Z
358e63ac3d103ca4698fb36777d9278150a6fb37,Fixed a Suspense toggling bug that incorrectly impacted tree weight,Brian Vaughn,2019-04-18T16:38:41Z
8c5794eab3cfb8a027bd6eb338a3ba16f03d3564,Fail tests on errors in renderer,Dan Abramov,2019-04-18T16:03:04Z
b45e743f522344eb0e13e8d9c6d62c6fc02aa4ea,"Merge pull request #180 from gaearon/suspense-more-fixes

Fix unmounting in Concurrent Mode",Brian Vaughn,2019-04-18T15:52:30Z
6a13ffd2314275b9e1ae8eda5acd614d22edc15a,Traverse the previous current tree when switching from primary to fallback,Dan Abramov,2019-04-18T15:19:09Z
24309fde06f0603f968532d4e41ec421e3434861,Add failing Concurrent Mode stress tests,Dan Abramov,2019-04-18T15:10:44Z
0f44e9fb9854a3abf4a3e835fa9577edb9d3f67d,Move sync stress tests in their own file,Dan Abramov,2019-04-18T15:09:45Z
456e937b83b8c05b0f7cdd6ea0e464018f5d9f19,"Merge pull request #178 from gaearon/removal-integrity

Assert removal happens in the right order",Brian Vaughn,2019-04-18T15:16:22Z
d02d93712ed6a5eda885ceb5116cdc9192b478f2,Assert removal happens in the right order,Dan Abramov,2019-04-18T15:02:08Z
08279fb3426ac003d0c0f896da6bb20c655e594c,"Merge pull request #174 from robertknight/mousedown-tab-select

Select tab when the mouse is pressed",Brian Vaughn,2019-04-18T15:00:01Z
d995f193393f4bf963c6aaefc5af1307c5764589,"Merge pull request #175 from lucasecdb/assign-timeout

Assign timeoutID to avoid multiple requests",Brian Vaughn,2019-04-18T14:56:32Z
6df050e726b324dff9d92af8712dccc0121b96dd,Assign timeoutID to avoid multiple requests,Lucas Cordeiro,2019-04-18T09:46:06Z
c2865dbab9053ac82867ad40b5c831ec21383d3f,"Select tab when the mouse is pressed

Selecting the tab when the mouse is pressed rather than only when it is
released makes tab switching feel faster and also matches how the Chrome dev
tools behave.

The previous tab selection handler which listens for the radio button's
selection has been kept for the benefit of interaction methods which
don't trigger the mousedown handler.",Robert Knight,2019-04-18T07:16:52Z
29811cd24ef304fb089c6d69692b2e2e21f47e1e,Added legacy (v15) tests,Brian Vaughn,2019-04-17T22:30:20Z
7ab93402a8de30fa7e0e885ff40aae2890b901c7,Initial support for v15+ via new legaacy renderer,Brian Vaughn,2019-04-16T17:22:26Z
0d932d770bb4328fc1e6acdb00ca5dbf43288ad4,"Merge pull request #168 from bvaughn/collapse-nodes-by-default

Configurable tree default collapsed/expanded behavior",Brian Vaughn,2019-04-17T20:29:25Z
75e1e1431b34f68c50f1971e20662540d285eeb6,Expanded the reorder tests slightly,Brian Vaughn,2019-04-17T20:11:18Z
0b50fb29f7147fd821e9a0c126eb297e27b639a5,Include rootEventTypes in DOMEventResponderSystem stopPropagation tests (#15433),Nicolas Gallagher,2019-04-17T20:08:36Z
634d4fece2f800d95104eaa4cedf62b751f2a3d9,Added more inline comments,Brian Vaughn,2019-04-17T20:03:18Z
29d43a2230f2ba7965cf37b76edcd5d0a87f3fd4,"Merge pull request #171 from bvaughn/improve-contrast-light-mode

Improve contrast for light mode",Brian Vaughn,2019-04-17T18:44:25Z
3fb9f6cdaa47ed0094aed59ec5eb56fcaeca37b8,Improve contrast for light mode,Brian Vaughn,2019-04-17T18:40:55Z
1ae409d2c75741cceb1ce0bf12115cfffefb9c91,"React events: fix nested Hover components error (#15428)

* Add failing test for nested Hover
* Fix error caused by nested Hover event components",Nicolas Gallagher,2019-04-17T18:33:32Z
c107e03132638324011b920273df6f19ff70ff45,Flow fix,Brian Vaughn,2019-04-17T16:45:03Z
74be38912464d63020eb52df016624b9d227335c,Fixed a bug with re-ordering of children within a collapsed node,Brian Vaughn,2019-04-17T16:39:54Z
178e89927a4f5322311a1f00ca0e771bd7d358ca,Fixed some edge cases with collapsed by default. Still some bugs existing.,Brian Vaughn,2019-04-17T14:45:33Z
037bb0034c70d7b4d5be796b1db7042bfe68ab39,Throw if root node is collapsed,Brian Vaughn,2019-04-16T21:10:06Z
4b64d7c01715b9ed6fc70b757cdf8cdc0b03b503,Support configurable node/tree collapsed by default behavior,Brian Vaughn,2019-04-16T20:59:36Z
c73ab39c1f5f466991b97c9e0c782910e3b1cf37,"React events: make nested Focus work as expected (#15421)

This patch makes a change to the Focus module so that it only reports
focus/blur on the host node that's a direct child of the event component. This
brings the expected behaviour in line with the browser default of focus/blur
events not bubbling for Pressable.",Nicolas Gallagher,2019-04-16T18:16:27Z
85179fe4a7e7cb2e9d79733eec4839443393e7ba,"Merge pull request #164 from gaearon/fix-lots-of-stuff

Fix reordering and Suspense logic",Dan Abramov,2019-04-16T18:11:28Z
3a6d6560903e882db8776017594ceab79e66a9da,Remove unnecessary condition,Dan Abramov,2019-04-16T18:10:39Z
9182d0b0aa52acc6912c56a7fefcdfea176896f2,Bump alpha to get Andrew's fix,Dan Abramov,2019-04-16T18:09:52Z
58bb7cea41a024f6c0fede4a32de579d7fb85727,Remove unused lines,Dan Abramov,2019-04-16T17:21:40Z
8576c85b0dc6a1012c36ac7711e88c8fb1aac0a3,Move stress tests to their own file,Dan Abramov,2019-04-16T17:10:15Z
d4db178d334f65291b9210b864ba03d219cdfbf2,Bump to canary,Dan Abramov,2019-04-16T16:39:26Z
3cf67ab859b10f7d1f4b5d939ed980ba98a49775,Harden the tests and fix Flow,Dan Abramov,2019-04-16T16:02:42Z
b1dea262517b1bad173c658cf2c8bba37ed5d5c0,"Fix the remaining issue when primary child is null

This lets us unlock the rest of the Suspense test.",Dan Abramov,2019-04-16T15:57:08Z
fe21ee7ca0f143d05b09ac43914db0d744380e08,"Enable part of Suspense test that was failing before

This PR fixes it.",Dan Abramov,2019-04-16T15:47:14Z
f4e223bcebdbda8a4c9ce4782fb1dc2538715274,"When resetting Suspense children, use the fallback child set if needed

This fixes the bug I introduced in the previous refactor which Suspense test caught.",Dan Abramov,2019-04-16T15:45:53Z
dd935ea178970646874a98adb7003f051cebef65,"Propagate the need to reset children to closest visible Fiber

This fixes the bug.",Dan Abramov,2019-04-16T15:31:18Z
57e8513a300ea5b594d1bff8e659926eff2be409,"Refactor: remove early returns from updateFiberRecursively

This doesn't change any logic, just the shape of the control flow.
I want to unify some branches at the end, so it's easier if there are no early returns.",Dan Abramov,2019-04-16T15:17:31Z
f4c3008cf539d5cec71d3a21e1dec6627ec628a3,"Refactor: split recordUpdate() into profiling and reorder

This doesn't change the actual algorithm but splits unrelated parts.",Dan Abramov,2019-04-16T15:08:07Z
b081ffc518240ad39703c9e128cdded368991185,Add stress test for reordering,Dan Abramov,2019-04-16T14:11:31Z
20193f03c04971a14ee8a0b6755bdfee08b94ba3,"Merge pull request #162 from gaearon/suspense-test

Add Suspense stress test",Brian Vaughn,2019-04-16T14:49:11Z
d89f79d6e6ce7b8eaada9d8596e594250651cb2f,Add Suspense stress test,Dan,2019-04-15T23:14:49Z
4221565e1552425e9416035b5a4bf0ff567d18be,"Cancel pending commit before starting on root

Moves the cancelTimeout call to right before creating a new work-in-
progress root. Fixes a class of bugs where a pending commit is not
cancelled, causing an incomplete tree to accidentally commit.

In the interest of fixing downstream bugs quickly, I'm landing this
without a test case; I'll add one in a follow up.",Andrew Clark,2019-04-15T23:00:18Z
8c974ae4329b0060c4238489966f64567b73c931,Flow and lint fix,Brian Vaughn,2019-04-15T16:43:52Z
97636fa7fc6b0bde7475450b577912f179c6e076,"Merge pull request #161 from gaearon/fast

Don't materialize typed array until the transfer",Brian Vaughn,2019-04-15T16:40:33Z
2b3ecc63b3a7fb9488ebf78c53f1992d7842a6a7,"Merge pull request #158 from gaearon/stress-test

Add a stress test for tree traversal",Brian Vaughn,2019-04-15T16:34:40Z
6b9b80faace37046e1abf10f4a41f4cfa654c5ba,Don't materialize typed array until the transfer,Dan Abramov,2019-04-15T15:27:19Z
b3546e0e02c31fcf8cc6d2fdf1c40b8984209933,"Merge pull request #160 from gaearon/add-prod-shell

Add production mode to dev shell",Brian Vaughn,2019-04-15T14:40:39Z
947e3c2c049c006da9ed814ded04583edfe4ff3d,Add production mode to dev shell,Dan Abramov,2019-04-15T14:39:25Z
7489b8508b373d42d1771fcc8d8bc92a97c86000,"Merge pull request #159 from gaearon/l-to-the-r-to-the-u

Use LRU for encoded strings",Brian Vaughn,2019-04-15T14:09:10Z
255385d25545796023a049df65461abdd49a61be,Use LRU for encoded strings,Dan Abramov,2019-04-15T13:41:58Z
f569d27f86e19f11a9fca809198c0fb70397dddb,Add a stress test for tree traversal,Dan,2019-04-15T00:45:52Z
b76372c93dcfb3646e8b231fccce4cb763c54db3,Fixed an edge case profiling bug where the number of commits was wrong,Brian Vaughn,2019-04-14T01:29:39Z
7f6fdfea9560a781a19a2543e10b98e7de6943e6,Add package commands for creating dev builds for easier debugging,Brian Vaughn,2019-04-14T01:25:56Z
00f6466ec1a7f7dbcc2aef570d55e6ace113ebcf,Temporarily disabled hooks lint failure for Tree useEffect,Brian Vaughn,2019-04-13T22:49:06Z
97f089bdfe64fa3320e9fb293eb98aecf9d808be,"Merge pull request #148 from gaearon/scroll-consistent

Consistently scroll component name into view",Brian Vaughn,2019-04-13T22:39:25Z
518f3d75f8eba06a44dc2e208c49f569b2d2cb3d,Tweaked an inline comment.,Brian Vaughn,2019-04-13T22:38:56Z
b2cf896e8c758fa6239b1a15ffd4b46a8cc5eda8,Fixed misplaced padding in Tree,Brian Vaughn,2019-04-13T22:33:10Z
236f47f0739be5026ef2b94f340f568205b22a82,Tweaked .eslintignore and .gitignore,Brian Vaughn,2019-04-13T22:32:26Z
86f92933767315414f4e6a244f6481031c3e9de2,"Merge pull request #154 from gaearon/resize-hilite

Adjust highlighting on window resize",Brian Vaughn,2019-04-13T22:25:17Z
d5266f94097f27312966c0081f2d606cb5c6c3e1,"Merge pull request #155 from gaearon/view-dom-inspect

View DOM button opens Elements tab",Brian Vaughn,2019-04-13T22:23:09Z
453a06a465328709349e708ffe0f2d7e6836d325,"Merge pull request #150 from gaearon/bump-hooks-plugin

Bump React Hooks plugin",Brian Vaughn,2019-04-13T22:20:08Z
826cac0070b36d58b5137e091eb7e197610ba44a,"Merge pull request #149 from gaearon/dont-reset

Don't reset selected item on search mismatch or exit",Brian Vaughn,2019-04-13T22:19:38Z
9ebe1768a8a58cb956d6c9c9c302acbb5a51760e,"Experimental Event API: Redesign event responder propagation (#15408)

* Event API: Redesign event instance propagation",Dominic Gannaway,2019-04-13T19:37:39Z
ce335b89753a6858f076ac0a606c58f065f0634c,View DOM button opens Elements tab,Dan,2019-04-13T17:55:51Z
6d53a2ec100c8d30ddb4ac180ab90a4320144a94,Adjust highlighting on window resize,Dan,2019-04-13T17:19:21Z
9162b7165ad446cf12cea88eecf94f2787de6e75,Prefer to keep the start anchor visible,Dan,2019-04-13T15:49:10Z
6d70028a2678947e14a8f5c007a624b7ce3b5431,Bump React Hooks plugin,Dan,2019-04-13T15:38:34Z
55dcfe25e8472d8f6e8c6f6496dbbced3eeeeaa7,Don't reset selected item on search mismatch or exit,Dan,2019-04-13T15:19:32Z
ca7eb3c8293665fbff1b1f1fb49778dbb861efef,Changed highlight-on-search behavior to use TreeContext,Brian Vaughn,2019-04-13T01:14:37Z
097d0386b133f779f4c3622d2a745d64e1e32fc8,Track search navigation in DOM,Dan Abramov,2019-04-12T17:59:15Z
7145c78325728dbbfe9b135796a1a64b446f48bd,"Merge pull request #147 from gaearon/no-propagation

Polish some mouse interactions",Brian Vaughn,2019-04-13T01:09:16Z
ba9c763954276e18b6f577f721d0330d2eeb494b,Consistently scroll component name into view,Dan,2019-04-13T00:58:05Z
454bcf1e01bc2e180a7289b56d0a5e6b0693d679,Polish some mouse interactions,Dan,2019-04-13T00:07:35Z
a30e7d992e04caeb90be89cad3cdb60eeb2d7ba7,act() tests - Reuse and properly unmount containers (#14974),Philipp Spiess,2019-04-12T22:53:36Z
1e08261975a45b9e9fa5827f38e11382ed7b3200,Added missing instruction to Chrome install steps,Brian Vaughn,2019-04-12T22:08:14Z
818255dfde293db54d3c0d2fffcc40f86784e340,"Merge pull request #145 from bvaughn/deploy-chrome-updates

Auto-update Chrome extension",Brian Vaughn,2019-04-12T22:02:11Z
801bb5e33a759fedfb4be0545b50b9a90f906abd,Udpated Firefox installation instructions,Brian Vaughn,2019-04-12T21:45:39Z
670d1348f15e6c24a702cb87c1d19e30255f4de8,Chrome build+deploy script auto-increment a prerelease version,Brian Vaughn,2019-04-12T21:42:34Z
26361427ae1ee24827509a8fdf08953d7e4ec1c8,Auto-update Chrome extension,Brian Vaughn,2019-04-12T20:46:05Z
8cf963c6c3e4dc41d0c006513aff19d725348d82,"React events: ignore device buttons that aren't for primary interactions (#15402)

The Pointer Events spec mentions that the value of `button` in a nativeEvent
can be anything between 0 and 5 for ""down"" events. We only care about those
with a value of 0.",Nicolas Gallagher,2019-04-12T20:36:00Z
38bd570d41321d5f310c2ce51d3c88ceaad5d5bc,"Stop tracking bundle sizes (#15404)

* [sizebot] Fail gracefully if CI returns invalid response

Moves the `response.json()` call into the catch block.

* Stop tracking bundle sizes",Andrew Clark,2019-04-12T20:33:27Z
9c1dad5059c2aef8511003ae4fc0762d020570d0,react-window 1.8.0,Brian Vaughn,2019-04-12T17:57:56Z
b18c836ef57bc6884e6afa36e65ee07b00d1e423,Merge branch 'smart-scroll' of https://github.com/gaearon/react-devtools-experimental into gaearon-smart-scroll,Brian Vaughn,2019-04-12T17:56:27Z
dbd1d6b0bdb1da723d3e69989f1db07049b559f8,Firefox only supports peristent background extensions so I've removed the persistent:false flag,Brian Vaughn,2019-04-12T17:20:23Z
403f150ade08082c6d2bc5a5104e59e045fe8189,Use smart scrolling,Dan Abramov,2019-04-12T17:13:26Z
8f17ade7e5dfce75940197d0ba936e5f5005d523,Circle CI config changes,Brian Vaughn,2019-04-12T16:27:53Z
af8a5d9311bce8689b435e64fabf0cf07e933785,Added devEngines entry to package.json,Brian Vaughn,2019-04-12T16:24:16Z
a57b6dbef596665d688ded63d576b650b562fba6,"Merge pull request #133 from bvaughn/tests

Automated tests [WIP]",Brian Vaughn,2019-04-12T16:22:11Z
be930d549041fe88da22ee897d9ff99501a84fcd,"Use Circle CI to run lint, prettier, flow, and tests",Brian Vaughn,2019-04-12T16:17:42Z
7bb2299de414cad78408187398345aa85950c6d5,Moved __DEV__ setup from setupTests to setupEnv,Brian Vaughn,2019-04-11T18:38:45Z
e0ffa2b88d18e1df66c7b69b6a1ad24b3058be42,Moved a few vars inside of the setupTest beforeEach block,Brian Vaughn,2019-04-11T18:38:12Z
158b0b55674c83d30b52ae6290e6562507654a07,Added expand/collapse tests; chronologically ordered snapshots,Brian Vaughn,2019-04-11T18:34:34Z
16a7119bf296028a1e68ab57286d9ee2ee64823e,Added a simple Suspense test,Brian Vaughn,2019-04-11T18:22:15Z
4ad85b26c0d05ed00302f415d9fbe26072bbcd6a,Cleaned up setup/polyfills,Brian Vaughn,2019-04-11T18:21:59Z
81183b1492bd3bc0f0b98fbb3b5ca9706be0892b,Named snapshots. Tests use act() abstraction.,Brian Vaughn,2019-04-11T17:19:31Z
5d6a2082cc5554c7777c766fa406a93a71b26d25,Updated React test utils for newer version of act(),Brian Vaughn,2019-04-11T17:19:18Z
1bdae952b5e5675d5124d5d968522e8acc85065f,Added separate mount+update tests,Brian Vaughn,2019-04-11T16:27:41Z
25e918b4d98ad915110e5ad8516cbb0b64cf2757,Added [root] indicator to Store snapshot reprensentation,Brian Vaughn,2019-04-11T16:25:39Z
4926d160d6d270805ecc8c569125403e74d97c1c,Removed unnecessary configurable Bridge batch duration,Brian Vaughn,2019-04-11T16:09:41Z
9fb794b6ed614b800e1ddd2601e72a7b95fc660c,Added multi-test setup logic,Brian Vaughn,2019-04-11T16:07:40Z
7621df5baf8bdcb2cebd71c39092437718d7538a,Initial example test. Will iterate from here.,Brian Vaughn,2019-04-10T22:42:55Z
7aadcdf624a9588128ef4bb54466f2880afe2aa7,Use :hidden attribute to collapse props/hooks,Brian Vaughn,2019-04-12T15:53:41Z
ae7ea00e06e04cc6747c831a6f6b88c7e1c0e7bc,Fix small sizing issue with expand collapse toggle,Brian Vaughn,2019-04-12T15:42:27Z
da4accda31fa35879c8cf56992fc8171a5b4b2fb,Added expand/collapse toggles to custom hooks,Brian Vaughn,2019-04-12T15:39:03Z
3438e5ce879883590f68370b9ad6448a8ffdfdc1,Experimental Event API: Add Hover onUnmount support (#15394),Dominic Gannaway,2019-04-12T12:26:27Z
805e7f87334551c559ab5162c701f82c105ad0b9,React events: add unmounting to Focus (#15396),Nicolas Gallagher,2019-04-12T11:23:03Z
543353a043a9f2ffe4d3e8b20383c05877d0a87e,"Experimental Event API: Remove ""listener"" from event objects (#15391)",Dominic Gannaway,2019-04-12T10:53:40Z
ed6798405d610a121b21a4cbf6f74c030e913e35,Better message when CI for base commit is pending,Andrew Clark,2019-04-12T02:23:31Z
9055e31e5c82d03f0a365c459f7bc79e402dbef5,"Replace old Fiber Scheduler with new one (#15387)

The new Fiber Scheduler has been running in Facebook for several days
without issues. Let's switch to it.",Andrew Clark,2019-04-12T02:15:34Z
94810b2b5acc6b860df4dfa2881b62030806d518,Add Git revision to extension manifests,Brian Vaughn,2019-04-12T02:06:07Z
4e59d4f5d26a620a2c6e8804a589b227481a80aa,React events: add onHoverMove support (#15388),Nicolas Gallagher,2019-04-12T01:59:05Z
9a0cf68a4d609a571d8840fada2e2e2d85a426bf,Add Git revision to build version,Brian Vaughn,2019-04-12T01:44:44Z
3ea5fac959f863336a437dcaae0d465acf2a83ad,Enable text to wrap within error boundary stacks,Brian Vaughn,2019-04-12T01:29:06Z
f32b65d7b0c7e47de7ac9889f065ce15442cb8c7,"Merge pull request #135 from lucasecdb/fiber-info-overflow

Fix fiber info sidepanel not scrollable",Brian Vaughn,2019-04-12T01:21:57Z
2671e7e0e017a82adbac9ccee0845004c715ab51,Fix fiber info sidepanel not scrollable,Lucas Cordeiro,2019-04-12T00:38:57Z
cdfb06e38b311f8869241bfd1623aeece80e18d0,Fix path to results.json,Andrew Clark,2019-04-12T00:20:14Z
9642d26674671d8aa6a60e63ccfb166712b9f8d6,Added ErrorBoundary with GitHub bug link,Brian Vaughn,2019-04-12T00:19:03Z
da508fc23fc34a2b671b141a878d6b5da2300ed8,"Merge pull request #126 from bvaughn/js-hover

Ignore hover when navigating with keyboard",Dan Abramov,2019-04-12T00:16:26Z
de75903272d114c412fea9cdcd725468cf05a06c,"Fix CI (#15393)

* Revert ""Bump scheduler version to 0.14.0""

This reverts commit 687e4fb6f7dcb13ca3c668bf5f3df4c0b281f58c.

* Store results.json as CI build artifact",Andrew Clark,2019-04-11T23:43:33Z
367249c175ab6f333fdfa2caf74cf2cb2c34c5b5,Don't drill into owners list if no owner metadata is available,Brian Vaughn,2019-04-11T21:00:27Z
687e4fb6f7dcb13ca3c668bf5f3df4c0b281f58c,"Bump scheduler version to 0.14.0

Releasing this early for React Native",Andrew Clark,2019-04-11T20:41:43Z
45473c94cdb5d5d9642e5cde55ed3a5795720801,"React events: Press event fixes (#15386)

1. Fix hiding context menu for longpress via touch.
2. Fix scrolling of viewport for longpress via spacebar key.
3. Add tests for anchor-related behaviour and preventDefault.
4. Add a deactivation delay for forced activation
5. Add pointerType to Press events.

NOTE: this currently extends pointerType to include `keyboard`.

NOTE: React Native doesn't have a deactivation delay for forced activation, but this is possibly because of the async bridge meaning that the events aren't dispatched sync.",Nicolas Gallagher,2019-04-11T20:20:21Z
9672cf621bccc799d1d86f45c86e2fbcb97be5aa,Experimental Event API: adds `stopPropagation` by default to Press (#15384),Dominic Gannaway,2019-04-11T19:00:20Z
75657c81e82e5f3f9e062edb75d6a0d1d490e9ab,Merge branch 'keyboard-stuff' of https://github.com/gaearon/react-devtools-experimental,Brian Vaughn,2019-04-11T18:55:39Z
38b7cf56936b55a59d2e3dd405a60122dfc00af7,Ignore hover when navigating with keyboard,Dan Abramov,2019-04-11T12:25:44Z
0281a0d905e9f961c8c881183f67b2c33cb03b8a,Add a missing dep,Dan Abramov,2019-04-11T12:20:32Z
a9eff329c6086cc12b7a61ff1b40ec9cc21c1c05,Remove TouchHitTarget SSR logic to prevent issues with mouse events (#15381),Dominic Gannaway,2019-04-11T11:05:26Z
c9841001b07200660de21a3275afd1cd7d9554a8,Experimental Event API: preventDefault handling for anchors (#15383),Dominic Gannaway,2019-04-11T11:04:39Z
a5eb96fbc0cf8f09710af6c20727ed8eac396479,"Merge pull request #134 from sophiebits/bridge-batch

Improve bridge batching logic",Brian Vaughn,2019-04-11T00:21:30Z
c25c59c808d90bfa78c40d0a19527d384a490cc8,"Apply the Just Noticeable Difference to suspense timeouts (#15367)

* Apply the Just Noticeable Difference boundary

* Clamp suspense timeout to expiration time",Sebastian Markbåge,2019-04-11T00:16:27Z
7c13ea2f2b9aa11859c44f01dfeef29d402b276c,"Improve bridge batching logic

Fixes #132.",Sophie Alpert,2019-04-10T23:31:11Z
40469a190e79ea13cb482620055c05e221f64c17,Fixed horizontal alignment for collapsable hooks,Brian Vaughn,2019-04-10T19:47:51Z
84a5a13525af9d2ce25cccc2485fcd7b589bd56c,Editable name not text-selectable,Brian Vaughn,2019-04-10T19:37:20Z
e9f385591e37129f7fb8e43779c994302949184e,Double clicking on a name toggles expanded state in KeyValue,Brian Vaughn,2019-04-10T19:36:26Z
4f254c0a05cc6eba1aa8828736ef3617fc54017a,Refactored KeyValue toggle so columns with toggles align better below those without,Brian Vaughn,2019-04-10T18:44:45Z
3e2e930d62ac7166695e0c5b1538ebb7a41cd3da,Fixes a Flow type merge conflict (#15378),Dominic Gannaway,2019-04-10T18:33:05Z
952c8cda00f7edf519fd23fc8671a61727f1133f,Fix a bug that caused it to jump over nodes when pressing too fast,Dan Abramov,2019-04-10T18:30:45Z
f0fb1805fe85422e517cecc6b811b366c3f1486b,Added new color-expand-collapse-toggle CSS var,Brian Vaughn,2019-04-10T18:03:32Z
3e19b164b53c7b614d3f3e3ffad07671cb9f8ac1,Merge branch 'collapse-props' of https://github.com/lucasecdb/react-devtools-experimental into lucasecdb-collapse-props,Brian Vaughn,2019-04-10T18:03:04Z
944a6192e2d5fab7b3c340258c86473bdef45b37,Use button instead of div for a11y,Lucas Cordeiro,2019-04-10T18:00:51Z
7fc91f17c99fbbd1497737fb8cbd8f45cbfd6d48,"React events: add onPressMove and pressRetentionOffset to Press (#15374)

This implementation differs from equivalents in React Native in the following ways:

1. A move during a press will not cancel onLongPress.
2. A move to outside the retention target will cancel the press and not
reactivate when moved back within the retention target.",Nicolas Gallagher,2019-04-10T17:52:50Z
dd9cef9fc001e174e177bac47d88fd28ff8de316,Experimental Event API: Add targets and responder utility method for finding targets (#15372),Dominic Gannaway,2019-04-10T17:52:34Z
6420f11d65f3c8aea5f352b36f5d78b101856b5d,Left and right arrows only traverse parents,Dan Abramov,2019-04-10T17:49:52Z
2d516199eaf0979b1966f0122b7a46995caaae5a,Update opener icon and remove negative margin,Lucas Cordeiro,2019-04-10T17:47:39Z
0aacc2547edb5252c3987a716e7852a12903ed98,"Merge pull request #123 from gaearon/focus-keyboard

Picking a DOM node focuses the tree",Brian Vaughn,2019-04-10T17:31:05Z
99a1e07aa658142eba1f48dff187a7b9f554fd71,Fix flow type,Lucas Cordeiro,2019-04-10T00:09:41Z
0f955980a3db96e2197e52cb5549e8d46e28fa06,Add collapsible icon for object and array types,Lucas Cordeiro,2019-04-09T01:42:32Z
1c381c588aed1ed6814f1be04fbe42cd069ce174,Picking a DOM node focuses the tree,Dan Abramov,2019-04-10T17:13:29Z
88e51adc358a1daec7972a226be22d9d6ac90326,"Merge pull request #122 from gaearon/prevent

Prevent default on all key navigations",Brian Vaughn,2019-04-10T17:17:12Z
4b0424fbed8b873d67684785bfbdf22323cb3125,Flow fix,Brian Vaughn,2019-04-10T17:16:09Z
268a7cb5b49499b89fff86401387a9b85b3f5ee4,Moved blur/focus up to the AutoSizer wrapper and removed an effect+ref,Brian Vaughn,2019-04-10T17:14:21Z
caa74472f2a42d0a9acfa0e086d72228eac9c457,Replaced nested ternary,Brian Vaughn,2019-04-10T17:01:03Z
6836f15924bbfc6151f5c4d33aa8112ff313f9f0,Tweaked inactive CSS colors,Brian Vaughn,2019-04-10T16:56:21Z
d9ef0839a416834b340b4cb61d4d0d05b9a2bb5f,Merge branch 'inactive-window' of https://github.com/lucasecdb/react-devtools-experimental into lucasecdb-inactive-window,Brian Vaughn,2019-04-10T16:51:29Z
5b480a85cb17b7455c6896e4d9b2f28abd080fc8,Prevent default on all key navigations,Dan Abramov,2019-04-10T16:46:34Z
11c03bf7bc4e54fff990239dc12ab9eaebeb3e93,"Merge pull request #120 from gaearon/mutation-index

Update selected index after mutation",Brian Vaughn,2019-04-10T16:35:00Z
7263e768e5b28ebabfac277af0a28bdffa3bd547,"Merge pull request #116 from bvaughn/issues/105

Add collapse/toggle UI to Tree",Brian Vaughn,2019-04-10T16:31:12Z
56be3588478b3b20461e8876fa188b93ed77ba48,"Merge pull request #114 from gaearon/lazy-sync

Send the bridge sync event lazily",Brian Vaughn,2019-04-10T16:28:54Z
f1a8bd29235a2e267c88138a618d107cf5d4a9ea,Update selected index after mutation,Dan Abramov,2019-04-10T16:28:36Z
f89f2b2146fa806c6bcabd23bb3a2af328f31f6b,Reverted misguided index/collapsed behavior,Brian Vaughn,2019-04-10T16:23:24Z
ba46f2df0aa3968a9c1af977933127405e3bca12,"Merge pull request #118 from gaearon/required-title

Add missing Button titles",Brian Vaughn,2019-04-10T16:10:24Z
98240f18ae317c39292b3a581ed0d6e016639768,"Merge pull request #117 from gaearon/hide-shell

Put DevTools in dev shell above the inspector",Brian Vaughn,2019-04-10T16:10:10Z
74c9904e5d520662cc9c29f8b760818c77b537a3,Rewrote weightDelta calculation to be more readable based on PR feedback,Brian Vaughn,2019-04-10T15:59:43Z
dd84e8ff2bbb8193f585ec23d870716a0e2151c0,Newly selected components always auto-expand their ancestors,Brian Vaughn,2019-04-10T15:57:42Z
1f7f0ea6913f261878d5e70cb4e538e141ea6109,Update Store.getIndexOfElementID to take isCollapsed into account,Brian Vaughn,2019-04-10T14:53:06Z
b004a794152df4051e02661c04dcd718f7b60c7e,Reverted some unnecessary changes to TreeContext after Dan's PR 101 was merged,Brian Vaughn,2019-04-10T14:45:45Z
102267b1d61b4362eb6cfeaebe226548d318027d,Renamed _numElements attribute based on PR feedback,Brian Vaughn,2019-04-10T14:31:34Z
61203f77cf850b07a6da57ea4257bcfeea200ae5,Hide toggle arrows in owners list mode,Brian Vaughn,2019-04-10T04:35:09Z
55b3635f2837b7bf1fc2e4f6d9bffcb7259b9d12,Left/right arrow toggles node collapsed state as well,Brian Vaughn,2019-04-10T01:27:10Z
f7212d8035cb8fadfdefda6728fce269ed2a4c87,Upgrade react-window to fix a scroll-to bug,Brian Vaughn,2019-04-10T01:11:57Z
4c522c4c3845aac5442fd5f12957da6167b609b4,"Selected search result auto-opens collapsed nodes when necessary.

Also fixed an unrelated bug about when we reset search index when text changes.",Brian Vaughn,2019-04-10T01:11:40Z
b6df86c90c43a8346013a2d3b5a4ecde28c2eef8,Added toggle button to Tree > Element views,Brian Vaughn,2019-04-10T01:10:57Z
79827c535bda8ada21a2dca8138b4a218788419e,Added isToggled boolean to tree nodes and toggleIsCollapsed() method to Store,Brian Vaughn,2019-04-10T01:10:17Z
0decb1783704693cf876a06452db1c71c96fe822,"Merge pull request #101 from gaearon/find-nit

Pressing next forces search to select",Brian Vaughn,2019-04-10T14:38:28Z
1102fc5c1190b08ad5032333975ec57d9a0b5254,Refactor: extract a variable,Dan Abramov,2019-04-10T14:25:03Z
3eca0bbe6144dcb2d542766e323bf3c6f005cd08,Use heuristic suggested by @sophiebits,Dan Abramov,2019-04-10T14:08:13Z
07299828c9e0d9050e6a8c63ed129b16a4d4bf0d,Pressing next forces search to select,Dan,2019-04-08T23:06:13Z
75a4312d87df15e0c8176a47d553c29ba6d6d534,Add missing Button titles,Dan Abramov,2019-04-10T13:40:41Z
84478a41ffa1ba978797a5c4f6910e004905391c,Put DevTools in dev shell above the inspector,Dan Abramov,2019-04-10T13:25:58Z
c64b330032cef887ac5f787ac4a50bb4eeca4e1d,Move EventTypes to ReactTypes (#15364),Dominic Gannaway,2019-04-10T08:55:56Z
4c78ac0b9df88edec73492f92f09d5438dd74c4d,"Track Event Time as the Start Time for Suspense (#15358)

* Track the earliest event time in this render

Rebase

* Track the time of the fallback being shown as an event time

When we switch back from fallback to content, we made progress and we track
the time from when we showed the fallback in the first place as the
last time we made progress.

* Don't retry if synchronous

* Only suspend when we switch to fallback mode

This ensures that we don't resuspend unnecessarily if we're just retrying
the same exact boundary again. We can still unnecessarily suspend
for nested boundaries.

* Rename timedOutAt to fallbackExpirationTime

* Account for suspense in devtools suspense test",Sebastian Markbåge,2019-04-10T01:59:39Z
6d222080ad3acbbf43c0484adef0fc7a99238b18,Format logElementToConsole() slightly,Brian Vaughn,2019-04-10T01:13:11Z
875d05d5532b0e0b50faec6656a168cd9bb1a039,"Include full error messages in React Native build (#15363)

The React Native build does not minify error messages in production,
but it still needs to run the error messages transform to compile
`invariant` calls to `ReactError`. To do this, I added a `noMinify`
option to the Babel plugin. I also renamed it from
`minify-error-messages` to the more generic `transform-error-messages`.",Andrew Clark,2019-04-09T23:40:19Z
1b2159acc34d9ca2c950e53bfc46db385a75dbad,"[React Native] measure calls will now call FabricUIManager (#15324)

* [React Native] Add tests to paper renderer for measure, measureLayout

* [React Native] measure calls will now call FabricUIManager

The Fabric renderer was previously calling the paper UIManager's measure calls and passing the react tag. This PR changes the renderer to now call FabricUIManager passing the node instead.

One of the parts of this that feels more controversial is making NativeMethodsMixin and ReactNative.NativeComponent warn when calling measureLayout in Fabric. As Seb and I decided in https://github.com/facebook/react/pull/15126, it doesn't make sense for a component created with one of these methods to require a native ref but not work the other way around. For example: a.measureLayout(b) might work but b.measureLayout(a) wouldn't. We figure we should keep these consistent and continue migrating things off of NativeMethodsMixin and NativeComponent.

If this becomes problematic for the Fabric rollout then we should revisit this.

* Fixing Flow

* Add FabricUIManager to externals for paper renderer

* import * as FabricUIManager from 'FabricUIManager';

* Update tests

* Shouldn't have removed UIManager import

* Update with the new tests",Eli White,2019-04-09T22:10:15Z
1c57ca0a1c00705a679e26bc6950d2bf28ec9e82,Use focus state from elements tree instead of ownerDocument,Lucas Cordeiro,2019-04-09T21:58:10Z
26106a4b9de506d9cd08c11070d7327acd5d094c,Add check for inactive window on selected element,Lucas Cordeiro,2019-04-09T18:39:47Z
c7a959982b4b05c97db9b26349da2ade7bbb02be,"[React Native] Add tests to paper renderer for measure, measureLayout (#15323)

* [React Native] Add tests to paper renderer for measure, measureLayout

* Update tests

* Shouldn't have removed UIManager import",Eli White,2019-04-09T21:49:07Z
43bb821f601b345cbd51dd4f225b7237c251ca84,Send the bridge sync event lazily,Dan Abramov,2019-04-09T19:04:33Z
edc598e62a97b4858ecbc8cf4e2b72add8e366fb,Fixed Tree minWidth initial case to fill 100% width,Brian Vaughn,2019-04-09T18:43:49Z
1cc219009a4a176a9e9f3673b535d9bf080c33a1,Tweaked owners stack CSS to fix another overflow issue,Brian Vaughn,2019-04-09T18:12:39Z
49f6a22b5b8a1b7d5e2a774262357e2992ad0ca0,Remember max Tree width as new nested items are rendered,Brian Vaughn,2019-04-09T17:58:43Z
d6bd3dc503d867d52c9292882deba6e08f334100,Fixed owner stack size calculation bug that sometimes caused bad overflow,Brian Vaughn,2019-04-09T17:18:04Z
f1fc4b033141b9bb6dc799e4e691a805fa5fd795,"Merge pull request #108 from bvaughn/reach-ui-menubutton

Use @reach MenuButton for owner stack menu [WIP]",Brian Vaughn,2019-04-09T15:58:08Z
dbf6942512afd314981589b3b5df39766288b55f,Added (local) fork of @reach/portal to unblock OwnersStack MenuButton PR,Brian Vaughn,2019-04-09T15:54:43Z
a29ab9ab795f4962fc72f01ab85d9307f61a0808,"Tree arrow navigation respects event.defaultPrevented
This prevents Reach MenuButton operations from also changing the tree selection in the background",Brian Vaughn,2019-04-09T15:37:34Z
163bc234df9b4d5f711ed3b8a34a2a020b153747,Disable text selection for OwnersStack buttons,Brian Vaughn,2019-04-09T15:36:54Z
db629fa0734b51ff96bb31faf4edc11a9addedb7,Updated OwnersStack CSS to properly override React styles,Brian Vaughn,2019-04-09T15:30:24Z
4bde8f6503f45f3cb547abd388c670aae48fe8cc,"Merge pull request #103 from gaearon/sad-one-way

Make DOM selection binding one-way",Dan Abramov,2019-04-09T12:25:08Z
aece8119cf82a6eff02d9ad819758b7ac2c9b329,Refactor EventComponent logic + add onOwnershipChange callback (#15354),Dominic Gannaway,2019-04-09T11:47:32Z
153666b48407846e088489f250240147e98f41bd,"Merge pull request #107 from sophiebits/flicker

pointer-events: none to fix flicker on Overlay ""tip""",Dan Abramov,2019-04-09T10:40:47Z
183d1f42edecb9e303c05d1a4303d17ecffb0cc0,"Fix: Measure expiration times relative to module initialization (#15357)

We use bitwise operations to compute expiration times, which means they
need to be smaller than 31 bits. So we measure times relative to module
initialization, similar to `performance.now`.

This was already working in the old fiber scheduler, but we didn't have
a test for it.",Andrew Clark,2019-04-09T02:44:06Z
ba994445154e9546645c0701b1666c4f0406cdcc,Use @reach MenuButton for owner stack menu,Brian Vaughn,2019-04-09T01:34:48Z
a2d84fa6138c81a551ea683288596d3e5b42162e,"pointer-events: none to fix flicker on Overlay ""tip""

If click-to-inspect then hover an element in just the right place, it flickers between two elements because this ""tip"" element catches the hover. This should fix it.",Sophie Alpert,2019-04-09T01:26:30Z
72eccb465d7f7b4659d002e2a8510423546f0928,Make DOM selection binding one-way,Dan,2019-04-09T00:30:40Z
267ab34fbd713471fbf2da8e325c833e117c0a1f,"Merge pull request #99 from gaearon/sync-tabs

Sync DevTools Elements and Components tabs",Dan Abramov,2019-04-08T22:55:16Z
3b793953b1ec26e69a2b3a537880b3af9992ccba,Keep DOM selection if last $0 resolves to same component,Dan,2019-04-08T22:46:23Z
436912ab2d0bbc7be0fa1b41c0376e44a940bd94,Remove unnecessary logic,Dan,2019-04-08T22:35:01Z
7aecd58d818de7fb3dde9122be25f9c7f44eeebe,Nits,Dan,2019-04-08T22:28:31Z
c91676b557438727cc0f13d462159f15cf9f908d,Don't change browser selection unless React selection changed,Dan,2019-04-08T20:57:13Z
5db5e40bf19c53dc8a44765f45da751703ab460d,Replaced Agent setInterval with throttle+memoize,Brian Vaughn,2019-04-08T20:50:04Z
388677fcbce398974b7dea1341096aaedddd3793,Merge branch 'master' into continuous-select,Dan Abramov,2019-04-08T19:50:58Z
4a301bd0e0457542994d0064dfa7687dd9191be3,Sync DevTools Elements and Components tabs,Dan Abramov,2019-04-08T19:41:01Z
44ecff31e3b8d6963711dd375045e5deca068fc7,"Fixed an unpleasant interaction with owners modal ""..."" button",Brian Vaughn,2019-04-08T19:20:45Z
e43cfa02396fa5fb00c2d23378811c1d0e54bb6b,Don't re-measure owners stack sizes unnecessarily,Brian Vaughn,2019-04-08T19:05:07Z
174125c854b6252d838130ad6a30114e43835870,Merge branch 'master' of github.com:bvaughn/react-devtools-experimental,Brian Vaughn,2019-04-08T18:41:56Z
58ae3c63a803bab23c13628df96f4b70e7efe4e6,Added export-log icon. Removed unnecessary variable assignment.,Brian Vaughn,2019-04-08T18:41:25Z
ab89d6500fe873155d511eb3ae44bf35f867a9a4,Fix missing key,Dan Abramov,2019-04-08T18:01:20Z
fefb2bc99b17649bac6c374892d822e3d68f1b37,Merge branch 'inspect-log' of https://github.com/gaearon/react-devtools-experimental into gaearon-inspect-log,Brian Vaughn,2019-04-08T17:41:58Z
b3ba758798d4ffcf5fd777599c9c5538c2aa31d4,Updated flow-bin,Brian Vaughn,2019-04-08T17:40:46Z
7115408751aa19e51494a3be28d6a394b7321f99,Added  for itemData,Brian Vaughn,2019-04-08T17:40:40Z
5b120d6b24e29972ec8bc8b00638051c55f08a43,Add a separate button for logging values,Dan Abramov,2019-04-08T17:37:00Z
b176cd44144393439817b0026bd13302139e5550,Refactor: split inspectElementRaw,Dan Abramov,2019-04-08T15:20:17Z
14105e865aed46b012b7d072cb808ce5ca1d9c5b,"Merge pull request #92 from gaearon/highlight-on-hover

Select DOM nodes on hover",Brian Vaughn,2019-04-08T17:23:56Z
52014671bf42df73fd8764de2c18c979cad47ff8,Make Flow happy,Dan Abramov,2019-04-08T17:03:48Z
c6ee445ea974e133ea9974aec37c65d387fdcfd7,Address review,Dan Abramov,2019-04-08T17:00:48Z
6538e7141a2e47be1ef6c21bb1dc3f250d9f88e3,Add a comment,Dan Abramov,2019-04-08T13:39:00Z
39223239bbcea68f801d2d3607c5326099e22e91,Select DOM nodes on hover,Dan Abramov,2019-04-08T13:26:16Z
cb164eb9fbd3f6b87faaa7c853661f692cfad8d8,"Merge pull request #91 from gaearon/fix-scroll

Fix spurious autoscroll",Dan Abramov,2019-04-08T16:51:35Z
b4bc33a58496f54c2ac6e823dca3c41ecbb6454c,"Fix areHookInputsEqual method  warning params order (#15345)

* Fix areHookInputsEqual method  warning params order

* FIX areHookInputsEqual test",砖家,2019-04-08T16:14:42Z
c619d56b1c24289d171c120e310a6be767e0a1bd,"Merge pull request #93 from gaearon/keep-mounted

Preserve state when switching tabs",Brian Vaughn,2019-04-08T15:43:31Z
e86d7b51eab830c5cfb1756e827592b6deba6f99,"Merge pull request #94 from gaearon/rendered-by

Rename ""owner stack"" label to ""rendered by""",Brian Vaughn,2019-04-08T15:20:56Z
29fb5862fb5f7896331d53c631b77a0c0e03a7c2,Move EventComponent state creation to complete phase + tests (#15352),Dominic Gannaway,2019-04-08T15:02:20Z
edfab66104fc0efa55010c14b6041884b8b0318c,"Rename ""owner stack"" label to ""rendered by""",Dan Abramov,2019-04-08T14:40:40Z
132529da79feeb790db3c9633715a11bf2707111,Preserve state when switching tabs,Dan Abramov,2019-04-08T14:29:51Z
0a6d637619fe357ee44f43827487d2dbe6051486,Fix spurious autoscroll,Dan,2019-04-07T20:09:51Z
2ba3ee6c1ce289c344de25554826a9828443fc68,"Merge pull request #86 from gaearon/owner-stack-id

Preserve selection on exiting owner mode",Brian Vaughn,2019-04-07T22:42:43Z
7e2ef6a34ee37aeee0f3f49a5d719e1c1b334e3c,"Merge pull request #87 from gaearon/bump-overscan

Bump overscan to 3",Brian Vaughn,2019-04-07T22:36:20Z
77267e8544bf52abf21fa56315497d39527e6b46,Fixed Toggle Flow prop types,Brian Vaughn,2019-04-07T22:34:35Z
f61507158e8248c5bcb452857a563037f53b65fd,Merge branch 'hristo-kanchev-owner-stack-enhancement',Brian Vaughn,2019-04-07T22:33:42Z
e489c8ac8e16ac90d95faefb171926658d836a8e,Owners stack modal behaves and looks more like a modal,Brian Vaughn,2019-04-07T22:32:13Z
2ac815784b9aff97fb367d605c126d55846cecc7,Removed unnecessary layout effect in favor of a setState,Brian Vaughn,2019-04-07T22:19:17Z
a9c20f0b36366de81ab235cd8b3bd73fe454e513,"Merge pull request #88 from gaearon/remove-ring

Remove tree focus ring",Dan Abramov,2019-04-07T19:16:06Z
745baf2e061bdb7a07b511fa6fd8c1c5e8106313,"Provide new jsx transform target for reactjs/rfcs#107 (#15141)

* adding jsx function

* add more feature flag defaults

* flip ReactElement order back",Ricky Vetter,2019-04-07T19:02:34Z
ae2e8128bd0177897724b9e5ff737a6bef73d3f5,"Merge pull request #89 from gaearon/toggle-fix

Pass Toggle label through",Brian Vaughn,2019-04-07T17:54:35Z
5a118701b0fd6bb59d18fa7b2e33638471b04df7,Pass Toggle label through,Dan,2019-04-07T17:44:11Z
2e5e88e127f5bac959aef7c0536b9d0cecd746ab,Cleaned up is-overflowing hook and dependencies,Brian Vaughn,2019-04-07T17:34:44Z
2607b39fe158d71f134a0e7df30ce7e59246ebb2,Remove tree focus ring,Dan,2019-04-07T17:20:34Z
5b6dbb8dd7490604ac508a5f7dbee67ce916e1b6,Replaced some passive effects with layout effects to avoid flash of overflowed owners,Brian Vaughn,2019-04-07T17:01:18Z
df00a9639ea648f0bcd7f62fb545cb403844396f,Removed some unnecessary functions,Brian Vaughn,2019-04-07T16:58:34Z
a42a3a2d72cb969e0703cbf182592031f7d49a8a,Bump overscan,Dan,2019-04-07T16:55:27Z
850dda0fb93cde4c9e86abfac6b4d3b1d9685545,Cleaned up an old Overlay helper function,Brian Vaughn,2019-04-07T16:53:34Z
252a87efe58771bde9bc85d7156f7015f9f484ef,Use 'classnames' in TabBar to simplify an attribute,Brian Vaughn,2019-04-07T16:51:54Z
9255ad1025d219842e1b9ac2a1a2734533b357ce,"Replaced ""colon"" icon with more standard 3-dot ""more""",Brian Vaughn,2019-04-07T16:46:44Z
f2951fb51fa338da7a651cf414a074f2acf8b4cb,Preserve selection on exiting owner mode,Dan,2019-04-07T16:40:53Z
9a2f9ac880ef47e0195afa20a1f23993ce35c425,Moved getElementDimensions() back into Overlay component,Brian Vaughn,2019-04-07T16:42:52Z
d686b9d890ac8fc68979bc47d8273481a414e0ab,Merge branch 'owner-stack-enhancement' of https://github.com/hristo-kanchev/react-devtools-experimental into hristo-kanchev-owner-stack-enhancement,Brian Vaughn,2019-04-07T16:13:33Z
2b868821d5ade63da9da4befd967377770c6b6fc,"Improved keyboard navigation for tabs, interactions, and fiber-commits",Brian Vaughn,2019-04-07T16:00:52Z
44c0febd234bb7c4c26af0f2643f850395db386f,Profiler shows commit times and durations for selected fiber,Brian Vaughn,2019-04-07T15:36:37Z
2620050abfce392f53c19bec170d1501a25e49eb,Removed unneeded min-height. Using throttle for resize function.,Hristo Kanchev,2019-04-07T09:48:35Z
ce04f531d41ca79640ded42e6d1f9736fd8f9e67,Implemented new OwnerStack UI enhancement,Hristo Kanchev,2019-04-07T09:37:12Z
5334249bda1917ead38860b2272af2169bb7036d,Fixed a typo in flamegraph duration label,Brian Vaughn,2019-04-07T01:01:44Z
d766d3b2e554e2998fbc3b30c6585520c75d95f3,Throttle screenshots to reduce impact on performance.,Brian Vaughn,2019-04-06T20:58:55Z
81a61b1d1ac4c3fa974a822382b2343a96f7cc31,"React events: add delay props to Press module (#15340)

* Add delay props to Press event module
* Minor naming changes to Hover events
* Add examples to react-events README",Nicolas Gallagher,2019-04-06T20:47:28Z
bfcef10af3ceacc30232be4e5532850880664797,"Merge pull request #84 from gaearon/dead

Remove dead code",Brian Vaughn,2019-04-06T20:37:50Z
9fc2a3400cddbb00448c5e57c10ca349f2b3e4c8,Remove dead code,Dan,2019-04-06T20:36:08Z
99593444b98bd0c0ae255fb897867a02c4a73d25,Address review,Dan,2019-04-06T20:30:06Z
785bb9f56c6d93f506bcf58ba1f6047efd931df1,Continuously update tree selection in DOM inspection mode,Dan,2019-04-06T19:25:49Z
985fe59826f12a0eba1e05ce3c0039f70642792d,"Merge pull request #81 from gaearon/overlay-owner

Show owner in DOM highilght overlay",Dan Abramov,2019-04-06T17:26:50Z
5eec8aed3344185a7ca2f6ed1d9a08729250e46a,Nit,Dan,2019-04-06T17:26:17Z
ab9c1b84c866017107894d72a67a000f9fb881e0,Show owner in DOM highilght overlay,Dan,2019-04-06T16:02:36Z
4064ea9fa6387c92a985b52bfc66746f81ccd4fd,Experimental event API: Support EventComponent onUnmount responder callback (#15335),Dominic Gannaway,2019-04-06T07:16:57Z
4fbbae8afa62b61c84cf1ca0cd7a1f5a413f59df,Add full TouchHitTarget hit slop (experimental event API) to ReactDOM (#15308),Dominic Gannaway,2019-04-06T06:51:21Z
72d9f0597ad776a564cee7d7779b4b8bc75a10dd,"Merge pull request #71 from gaearon/suspense-special

Fix Suspense fragment edge cases",Dan Abramov,2019-04-05T22:59:17Z
d3d5c050bd11a0a90c4127f477896265be02d0ba,Naming,Dan,2019-04-05T22:45:34Z
7a03c5a8857840353de367709b728e0d32fff108,Update the commit tree to assume operations do not repeat,Dan,2019-04-05T22:42:02Z
80d9d8d841d02689d4c75360e2b42b543ab3477e,Fix profiler and nits,Dan,2019-04-05T22:34:27Z
0f536bba5c4354838d4dc1f3fdf226d1b0e67ee9,Rewrite the Suspense logic,Dan,2019-04-05T20:48:50Z
d6257d382d6f9910fb36ad1b4707bfa23ac965d2,Expand the test fixture,Dan Abramov,2019-04-05T13:57:40Z
9bcd5b25761f63755ca98575ee0107e1defbeb97,Fix Suspense fragment edge cases,Dan,2019-04-04T23:29:47Z
387ad54d804a5ca34c2514770e6f04b933a3c414,"Merge pull request #75 from gaearon/fix-double-add

Fix double-adding fibers when traversing",Dan Abramov,2019-04-05T17:45:42Z
2a5b8a9206277e0db0e9e29c20ec9b06bc48c90f,Hard crash,Dan Abramov,2019-04-05T17:41:13Z
96a7adf49e20197f802813224362470c66a38d20,Add error logs in __DEBUG__,Dan Abramov,2019-04-05T17:25:22Z
9170e5695ada95dc6898d1fcd65dd6dfeefde347,Fix double-adding fibers when traversing,Dan Abramov,2019-04-05T17:18:39Z
0c8129c78abf8d7d4bff9abb6a8378eb8c2a466b,"Sync selected Profiler node back to the Components tab

Also show element keys in Profiler charts",Brian Vaughn,2019-04-05T15:47:23Z
d1a5346c48323a8ed02c081ac97f8c60c4fb30a7,Improved keyboard UX and focus UI for Tree and OwnersStack,Brian Vaughn,2019-04-05T15:08:02Z
632647fbacd271deb98b17e7fe0e4604250a8998,"Merge pull request #61 from gaearon/toggle-suspense-2

Allow to toggle Suspense in Components pane",Dan Abramov,2019-04-05T12:22:41Z
b8245de5a116f7c704af70dcf475bca37170bebc,Nits,Dan,2019-04-04T20:53:57Z
48a5aca127a9a0f3e6edb11dcb0e57f8157f10c8,Fix highlighting timed out Suspense DOM node,Dan Abramov,2019-04-04T19:15:25Z
4f5437edf767f153152d14e2565c777921dd1a47,Allow to toggle Suspense in Components pane,Dan Abramov,2019-04-04T14:26:11Z
958b6173fdcba503a4333d3a2e42c10781201f17,Add delay props to Hover event module (#15325),Nicolas Gallagher,2019-04-05T11:23:51Z
c3cc936dae776e04d56e40b9062c4c25a666c07d,"Add Hover,Focus,Press docs to REAMDE (#15328)",Nicolas Gallagher,2019-04-05T10:58:04Z
bfbb4ac545514d682a330087ff4be77aeab273f1,"Merge pull request #72 from gaearon/search-bug

Don't move selection unless search text increased length",Brian Vaughn,2019-04-05T00:55:12Z
a8e46c67e67691813f130d72d097fc8ba542dea2,Don't move selection unless search text increased length,Dan,2019-04-04T23:49:27Z
49595e921dcb748c0422bc7aaadf2d3288ff1c46,"[New Scheduler] Fix: Suspending an expired update (#15326)

When an async update expires, React renders at the expiration time that
corresponds to the current time, not at the original update's expiration
time. That way, all the expired work in the tree is flushed in a
single batch.

This is implemented inside `renderRoot` by comparing the next render
expiration time to the current time. If the current time is later,
`renderRoot` will restart at the later time.

Because of poor factoring, the check is currently performed right before
entering the work loop. But the work loop is usually entered multiple
times in a single callback: each time a component throws or suspends.
This led to an infinite loop where React would detect that an update
expired, restart at the current time, make a bit of progress, suspend,
check for expired work again, and start the loop again.

I fixed this by moving the expired work check to the beginning of
`renderRoot`, so that it is not performed every time something suspends.
This isn't ideal, because you could technically still fall into a loop
if more than 10ms lapse in between exiting `renderRoot` and entering it
again. The proper fix is to lift the check outside of `renderRoot`
entirely so that the function can restart without checking for expired
work again. Since this is exceedingly unlikely (and this whole thing is
still behind a flag), I'll do the better fix in an already-planned
follow up to fork `renderRoot` into separate functions for sync and
async work.",Andrew Clark,2019-04-04T23:31:22Z
16951fe7fb885b82dad593dc45b2e4d4689a6b06,"Merge pull request #70 from gaearon/free-debug

Explicitly guard debug calls",Brian Vaughn,2019-04-04T23:12:45Z
2928a0be742babe9e971e252c2f96bb2dbf6c564,Explicitly guard debug calls,Dan,2019-04-04T23:03:17Z
b93a8a9bb8460a3d582072d3b252ecc15c6ea0f5,Experimental event API: refactor responder modules for lifecycle inclusion (#15322),Dominic Gannaway,2019-04-04T22:28:23Z
9b05184ccb6c4a874b56ddef97bb5d6be78cc095,"Merge pull request #63 from gaearon/smarter-search-match

Match search at word boundaries",Brian Vaughn,2019-04-04T21:41:08Z
6c5c2cd3ad6b8978414a8e8536778521352c804f,Renamed innerElementType -> InnerElementType to avoid confusing hooks lint rule,Brian Vaughn,2019-04-04T21:10:14Z
8d435595cd87dc8a4b44f84741be18790016e694,Added truncation UI indicator for hooks. Addressed lint rule violations.,Brian Vaughn,2019-04-04T21:09:10Z
11d068d7949dcfa384f9721ff82b6b615cd2e4e4,Merge branch 'fix-nested-hooks' of https://github.com/gaearon/react-devtools-experimental into gaearon-fix-nested-hooks,Brian Vaughn,2019-04-04T20:54:41Z
64b0fd8ecd9353d6d10965c81061623fffd6f2d5,Fixed owners header font family too,Brian Vaughn,2019-04-04T20:52:53Z
43782e6696d9a41f4b12428a8a708f3880b14242,Merge branch 'larger-items' of https://github.com/gaearon/react-devtools-experimental into gaearon-larger-items,Brian Vaughn,2019-04-04T20:48:24Z
93f83d27dda9740b5326de19cb6a75d961e9c0a0,"Merge pull request #66 from gaearon/dont-dismiss-menu

Stop mouseup propagation while inspecting",Brian Vaughn,2019-04-04T20:47:59Z
9351c8070dffcbf2eba449073c7e4028d224db6b,Fix it all,Dan Abramov,2019-04-04T18:54:56Z
18e337707a9dbfcd380deced8901cd1ec880d496,Stop mouseup propagation while inspecting,Dan Abramov,2019-04-04T18:50:27Z
194f523331751bddf0e132891e134a58f5c45fc9,Add size to owner stack items,Dan Abramov,2019-04-04T18:36:04Z
8478a526e646fdeeaf6e254bb73b90571f2f32b9,Don't crash for deeply nested Hooks,Dan Abramov,2019-04-04T18:28:42Z
ded2ce03ee10b3a74b2c38fbad2238c4de948916,Renamed TreeWrapper to innerElementType,Brian Vaughn,2019-04-04T17:08:48Z
c86793ef18d841943cd390a47155edef9dae89c3,Merge branch 'a11y-tree' of https://github.com/gaearon/react-devtools-experimental into gaearon-a11y-tree,Brian Vaughn,2019-04-04T16:54:46Z
2afda3de37e55dc89e1cecd63fcd3d9056f335a3,Add back regex support,Dan Abramov,2019-04-04T16:05:34Z
0f0062a71c6e6d9f7b29fb30af2880cb7c316318,Fix special cases,Dan Abramov,2019-04-04T16:00:35Z
937d262f557fd3332576be0da60adf5f94c545d9,"React events: keyboard press, types, tests (#15314)

* Add HoverProps type
* Add more Hover event module tests
* Add more Press event module tests
* Change default longPress delay from 1000 to 500
* Rename dispatchPressEvent -> dispatchEvent
* Consolidate state updates in Press event module
* Add keyboard support for Press events
* Add FocusProps type and unit tests",Nicolas Gallagher,2019-04-04T15:55:35Z
39da33a7bf5a55c8398708fb7294e9ebc56249df,Fix regex,Dan Abramov,2019-04-04T15:38:49Z
a9fced9b0d4eab36f70da29a32fcaca3b2a37b6c,Prettier,Brian Vaughn,2019-04-04T15:35:42Z
8c3a97401f883308a53e8e2759736fce35d5b705,Chagned owner div to be actual button,Brian Vaughn,2019-04-04T15:35:25Z
485f389d055830fc240a20a3e592098104ad849d,Merge branch 'tab-owner' of https://github.com/gaearon/react-devtools-experimental into gaearon-tab-owner,Brian Vaughn,2019-04-04T15:32:16Z
8cfb0e20c7038abe0fa4b46bdda171b31d2b1855,Match search at word boundaries,Dan Abramov,2019-04-04T15:22:21Z
14969c24a938d7116bc97ff55046722e4d033d01,"Merge pull request #62 from gaearon/search-fix

Move selection when typing in search field",Brian Vaughn,2019-04-04T15:14:57Z
ec71171becee3d5949229661e47c3bdbd565fc7f,Move selection when typing in search field,Dan Abramov,2019-04-04T14:59:06Z
7a2dc4853948a70a599124b7f47513df793d472a,"Allow DevTools to toggle Suspense fallbacks (#15232)

* Allow DevTools to toggle Suspense state

* Change API to overrideSuspense

This lets detect support for overriding Suspense from DevTools.

* Add ConcurrentMode test

* Newlines

* Remove unnecessary change

* Naming changes",Dan Abramov,2019-04-04T14:32:32Z
b1c675b8b135b45a2431dce814c2e98cd27f683d,Make owner stack reachable by keyboard,Dan,2019-04-04T08:54:18Z
e221972818e887f2ced524a48918735dccf70c0c,update gcc version (#15034),Kunuk Nykjær,2019-04-04T07:56:09Z
7fbdfd9f5ac5696a7a6b14267ddb1d9f729b603f,Copied findCurrentFiberUsingSlowPath Suspense bug fix from recent PR https://github.com/facebook/react/pull/15312/files,Brian Vaughn,2019-04-04T01:20:18Z
99f2e0da6f3aee53aa47b9d48574849f351b960b,Hardened background script against potential errors,Brian Vaughn,2019-04-04T01:16:00Z
1dcab970fa9979c89edafd48447b146830f44bfa,"Store entire build directory as CI artifacts (#15310)

* Store FB bundles as CI artifacts

Updates the Circle CI config to store Facebook bundles as build
artifacts. We already do this for our npm packages.

* Might as well store everything in build/

* Store build directory as a tarball

So it's easy to download",Andrew Clark,2019-04-04T01:15:33Z
43b1f74c88d986c88623412be7b1d65a6e271779,"Alternate fix for #14198

This doesn't rely on checking the tag. When the alternate of a parent
is missing, it assumes it's a fragment indirection and moves onto the
next parent fiber.",Andrew Clark,2019-04-03T22:07:09Z
ed6e34da8e839bf63edb9085086b4e2567771e46,Added option to disable screenshot capturing while profiling,Brian Vaughn,2019-04-03T21:32:16Z
41aa345d2bde261c2fb4a4ef89e379640c88be67,Fix a crash in Suspense with findDOMNode,Dan Abramov,2019-04-03T20:21:27Z
6d0effad76f236a248955aefbfdc2187043fcb5e,"Expose extra internals in FB build of react-dom/unstable-new-scheduler (#15311)

The Facebook build of React DOM uses a forked entry point that exposes
additional secret internals. I didn't account for this when I added
the react-dom/unstable-new-scheduler build, so the extra internals
are currently missing. This commit adds them.",Andrew Clark,2019-04-03T19:20:42Z
07bf8e53c1e6fbf6503bebc170622ab161cf3b8f,Renamed GlobalHook content script references to injectGlobalHook to avoid confusion,Brian Vaughn,2019-04-03T18:01:28Z
c60f991d8755d64afce71d832364451f8ec3b56c,Make tree reachable by focus,Dan Abramov,2019-04-03T17:58:00Z
3a44ccefeda8cfa19482c8a3a4480a83cae6c2ae,"Fix feature flags react-dom/unstable-new-scheduler (#15309)

I forgot to account for the CommonJS builds. (I had this change in
my local checkout but accidentally didn't commit it.)",Andrew Clark,2019-04-03T17:36:18Z
5b879ac0954e97cd371adbcb67f017a7faec63d5,Fixed a name typo in a radio button,Brian Vaughn,2019-04-03T16:57:13Z
f92d2bbf83360b358ecf08c0db85cff6fd08cbff,Fixed editing props for memo and forwardRef components,Brian Vaughn,2019-04-03T16:29:33Z
92a1d8feac32d03ab5ea6ac13ae4941f6ae93b54,mark react-events as private so we publish script skips it for now (#15307),Sunil Pai,2019-04-03T16:22:51Z
5bc5e31cee9b616bc7432a5c6395385ed115060f,"Merge pull request #51 from gaearon/tweak-el-display

Add a space in <Foo />",Brian Vaughn,2019-04-03T16:09:11Z
b2cd77d2e63281e8105c57c27c72cb613d2f491e,Add a space in <Foo />,Dan Abramov,2019-04-03T16:04:31Z
6493db4acc44dad64c43e105fd268fc1d143c134,Fixed an arrow navigation bug,Brian Vaughn,2019-04-03T15:12:43Z
e5c59359c4ccbae31756db4c6f45f2a56cbe2a47,Prevent bundling of Node polyfills when importing TestUtils/TestRenderer (#15305),Dan Abramov,2019-04-03T15:12:31Z
6772f2a9e172f32608bf820c518c471edb81b306,Revert fa317be (temporarily show previously selected element props),Brian Vaughn,2019-04-03T14:52:30Z
73187239afeda1016313652a776e96c023b8646b,"writing unit tests in experimental event Drag API (#15297)

* writing unit tests in experimental event Drag API

* add onDragMove unit test

* fix dragstart event type",Behzad Abbasi,2019-04-03T11:30:57Z
89064fe68d1f26da78c541a9c64ee093322b9766,"Adds displayName to EventComponent and EventTarget (#15268)

* Adds displayName to EventComponent and EventTarget",Dominic Gannaway,2019-04-03T11:24:25Z
fc6a9f1a1ebb5585c543126d397cc945a95f3196,"Add test for async event dispatching (#15300)

Verified that a variant of this test fails as follows when the
`context.withAsyncDispatching` function is excluded (i.e., reproduces the
issue).

    Expected value to equal:
      [""press"", ""longpress"", ""longpresschange""]
    Received:
      [""press"", ""longpress"", ""longpress"", ""longpresschange""]",Nicolas Gallagher,2019-04-03T09:43:18Z
38fa84088a4ef0347a89ee176a501c2c2ee8ea96,Experiemental event API - wrap async dispatched events (#15299),Dominic Gannaway,2019-04-03T09:25:40Z
d1a68c4b14b833c6964faf46fa585e375a9f34d3,"Merge pull request #45 from gaearon/rename

Tab name: ""Elements"" -> ""Components""",Brian Vaughn,2019-04-03T00:55:01Z
4d5cb64aa2beacf982cf0e01628ddda6bd92014c,"Rewrite ReactFiberScheduler for better integration with Scheduler package (#15151)

* Rewrite ReactFiberScheduler

Adds a new implementation of ReactFiberScheduler behind a feature flag.
We will maintain both implementations in parallel until the new one
is proven stable enough to replace the old one.

The main difference between the implementations is that the new one is
integrated with the Scheduler package's priority levels.

* Conditionally add fields to FiberRoot

Some fields only used by the old scheduler, and some by the new.

* Add separate build that enables new scheduler

* Re-enable skipped test

If synchronous updates are scheduled by a passive effect, that work
should be flushed synchronously, even if flushPassiveEffects is
called inside batchedUpdates.

* Passive effects have same priority as render

* Revert ability to cancel the current callback

React doesn't need this anyway because it never schedules callbacks if
it's already rendering.

* Revert change to FiberDebugPerf

Turns out this isn't neccessary.

* Fix ReactFiberScheduler dead code elimination

Should initialize to nothing, then assign the exports conditionally,
instead of initializing to the old exports and then reassigning to the
new ones.

* Don't yield before commit during sync error retry

* Call Scheduler.flushAll unconditionally in tests

Instead of wrapping in enableNewScheduler flag.",Andrew Clark,2019-04-02T22:49:07Z
c111288c549bea32b2e0760f5aef30aac70ad5d7,Store screenshots after each commit when profiling,Brian Vaughn,2019-04-02T22:04:04Z
aed0e1c30c113cbf748eb312b9f1bf0f598c79a1,"await act(async () => ...) (#14853)

This took a while, but I'm happy I went through it. Some key moments - recursively flushing effects, flushing microtasks on each async turn, and my team's uncompromising philosophy on code reuse. Really happy with this. I still want to expand test coverage, and I have some more small related todos, but this is good to land. On to the next one. 

Soundtrack to landing this - https://open.spotify.com/track/0MF8I8OUo8kytiOo8aSHYq?si=gSWqUheKQbiQDXzptCXHTg

* hacked up act(async () => {...})

* move stuff around

* merge changes

* abstract .act warnings and stuff. all renderers. pass all tests.

* move testutils.act back into testutils

* move into scheduler, rename some bits

* smaller bundle

* a comment for why we don't do typeof === 'function'

* fix test

* pass tests - fire, prod

* lose actContainerElement

* tighter

* write a test for TestRenderer

it's an odd one, because not only does sync act not flush effects correctly, but the async one does (wut). verified it's fine with the dom version.

* lint

* rewrote to move flushing logic closer to the renderer

the scheduler's `flushPassiveEffects` didn't work as expected for the test renderer, so I decided to go back to the hack (rendering a dumb container) This also makes reactdom not as heavy (by a few bytes, but still).

* move it around so the delta isn't too bad

* cleanups

fix promise chaining
propagate errors correctly
test for thenable the 'right' way
more tests!
tidier!
ponies!

* Stray comment

* recursively flush effects

* fixed tests

* lint, move noop.act into react-reconciler

* microtasks when checking if called, s/called/calledLog, cleanup

* pass fb lint

we could have globally changed our eslint config to assume Promise is available, but that means we expect a promise polyfill on the page, and we don't yet. this code is triggered only in jest anyway, and we're fairly certain Promise will be available there. hence, the once-off disable for the check

* shorter timers, fix a test, test for Promise

* use global.Promise for existence check

* flush microtasks

* a version that works in browsers (that support postMessage)

I also added a sanity fixture inside fixtures/dom/ mostly for me.

* hoist flushEffectsAndMicroTasks

* pull out tick logic from ReactFiberScheduler

* fix await act (...sync) hanging

- fix a hang when awaiting sync logic
- a better async/await test for test renderer

* feedback changes

- use node's setImmediate if available
- a warning if MessageChannel isn't available
- rename some functions

* pass lint/flow checks (without requiring a Promise polyfill/exclusion)

* prettier

the prettiest, even.

* use globalPromise for the missed await warning

* __DEV__ check for didWarnAboutMessageChannel

* thenables and callbacks instead of promises, pass flow/lint

* tinier. better.

- pulled most bits out of FiberScheduler
- actedUpdates uses callbacks now

* pass build validation

* augh prettier

* golfing 7 more chars

* Test that effects are not flushed without also flushing microtasks

* export doesHavePendingPassiveEffects, nits

* createAct()

* dead code

* missed in merge?

* lose the preflushing bits

* ugh prettier

* removed `actedUpdates()`, created shared/actingUpdatesScopeDepth

* rearrange imports so builds work, remove the hack versions of flushPassiveEffects

* represent actingUpdatesScopeDepth as a tuple [number]

* use a shared flag on React.__SECRET...

* remove createAct, setup act for all relevant renderers

* review feedback

shared/enqueueTask

import ReactSharedInternals from 'shared/ReactSharedInternals';

simpler act() internals

ReactSharedInternals.ReactShouldWarnActingUpdates

* move act() implementation into createReactNoop

* warnIfNotCurrentlyActingUpdatesInDev condition check order",Sunil Pai,2019-04-02T21:33:31Z
4c75881ee38ba2596c5c603d268f0dff178b8581,"Remove maxDuration from tests (#15272)

We instead assume a 150ms duration.",Sebastian Markbåge,2019-04-02T21:27:44Z
9307932fe5b59c2d5ce8d04823b94ec0e48b206e,"Refactor event object creation for the experimental event API (#15295)

* Refactor event object creation for the experimental event API",Dominic Gannaway,2019-04-02T19:03:11Z
83bd211c9e94aa2b1f3b8b9085f079d2d9d9ec85,Elements -> Components (naming),Dan Abramov,2019-04-02T18:53:46Z
de730da2305b9ed7093072ba87811858c02a3e5a,Elements -> Components (label),Dan Abramov,2019-04-02T18:46:55Z
f415e2447e43af21835b5b51de1bb407a49d3e04,Added missing Flow annotation,Brian Vaughn,2019-04-02T18:53:18Z
6a1e6b2f78da3a56aa497902951c6e9ce654eafc,"Experimental event API: loosen EventTarget constraints and warnings (#15292)

* Remove warning for event targets being direct children of event component

* Addressed feedback and added more test coverage + warnings",Dominic Gannaway,2019-04-02T18:49:28Z
fa317bed61e2f4c256b8af07f8a010e9084d8c27,"Merge pull request #41 from gaearon/smoother-right-pane

Avoid flashing ""Loading..."" in right pane",Brian Vaughn,2019-04-02T17:09:43Z
f243deab8286b9c51f44e47926c1ba0ccb53449a,"Add tests for Press responder event module (#15290)

* Add Press responder event tests

Behavior being tested takes cues from React Native's Pressability.
A couple of these tests fail and require the Press implementation to be patched.",Nicolas Gallagher,2019-04-02T15:49:41Z
296c4393da6f8f64b44b4b574e68127389768c4c,"Add Press event prop types and fix a check in Safari (#15288)

* Add PressProps type to event module

* Move default Press event delays to constants

* Fix right-click press check for Safari

* Prettier and Linter

* Use event.key in press responder

event.keyCode is a deprecated API

* Remove unused props from Press event module",Nicolas Gallagher,2019-04-02T13:42:37Z
b8ada905ff42ab46c162ed241b04c92a8e2bdafb,"Merge pull request #35 from bvaughn/reload-and-profile

Eagerly inject renderer (before document) to support reload-and-profile",Brian Vaughn,2019-04-01T21:47:51Z
2a80f8ca9ca0be44cca9539d83ede9a5d62b62d0,Show is-recording indicator earlier after a reload-and-profile,Brian Vaughn,2019-04-01T21:43:46Z
f5f7cb5bdf7822a65b772ccdb901aa678f645c45,Fixed some missing operations that could happen after reload-and-profile,Brian Vaughn,2019-04-01T21:29:52Z
4482fddeda166b0ce4ff3e4f1d8f8b6d9b26179c,Fix host context issues around EventComponents and EventTargets (#15284),Dominic Gannaway,2019-04-01T18:33:39Z
74cd1a5d29dc670788ac2955495150f57d911db7,Misc cleanup of comments and localStorage key names,Brian Vaughn,2019-04-01T16:05:40Z
5ef0d1d29d42462a6ffde9ec6f9f9ffe8825404a,"Rename hover props in experimental event API and write unit tests (#15283)

* Rename hover props in experimental event API and write unit tests",Behzad Abbasi,2019-04-01T15:19:16Z
2c14f3e88e00a99ad81ba74eecbcda2afc8d8d94,Inject early on when reloading-and-profiling,Brian Vaughn,2019-04-01T14:48:04Z
9444a5472082bbc38b598aa6404d39b9554bbdf7,Warn on nested EventTragets in experimental event API (#15287),Dominic Gannaway,2019-04-01T14:47:03Z
37ed5a7175fe6f7350f4a9a847e50730e34e1bf3,"Merge pull request #38 from lucasecdb/patch-1

Fix casing on store import",Brian Vaughn,2019-04-01T14:25:03Z
e634777027bf8e63cffe85b1ce727895193931b5,Fix casing on store import,Lucas Cordeiro,2019-04-01T13:25:57Z
628c1b2f08d8d3bf42a090753058c8c1fbed942a,Disable export profiling data option in Firefox. (downloads.download seems to just fail silently.),Brian Vaughn,2019-04-01T02:18:06Z
bfb152f1608918020ae8356f682b37a362d3f045,Import/export feature,Brian Vaughn,2019-04-01T00:02:30Z
a050f3d459edd3b3b27773aa8b18f85fc414473b,"Delete Suspense Fixture (#15273)

As far as I can tell this build is broken. Let's fix or delete. If I can't
test, I can't patch it up when I break it.",Sebastian Markbåge,2019-03-30T22:35:08Z
e5400f76f04a58714b41a70b6148104fb8d17cf4,Added save profiling data button to Profiler,Brian Vaughn,2019-03-30T21:16:34Z
7f1f5ddc335cec2d56ce7a555a71ac12e24147e8,"Rename press props in experimental event API (#15263)

Note: this is for an experimental event API that we're testing out internally at Facebook.

* onPressIn -> onPressStart
* onPressOut -> onPressEnd
* longPressCancelsPress -> onLongPressShouldCancelPress",Nicolas Gallagher,2019-03-30T16:23:41Z
7cac619c6862ed0068a464a6d1053a964353c260,Added initial support for EventComponent/EventTarget,Brian Vaughn,2019-03-30T16:02:02Z
7bd8c02f1093e8f6b614f690c00a2b2d24b04d00,"Added export and clear buttons for Profiler, cleaned up record toggle",Brian Vaughn,2019-03-30T16:01:52Z
b223ec3b393ffc19e2741903ab36661f550795c3,"Avoid flashing ""Loading..."" in right pane",Dan Abramov,2019-03-30T06:58:42Z
2e02469fa22d54b0a695037b82843eeaab56b364,"ReactNative's ref.measureLayout now takes a ref (#15126)

* ReactNative's ref.measureLayout now takes a ref

* Use Object as the additional param type

* Remove unnecessary whitespace

* Not supporting ref in mixin or subclass",Eli White,2019-03-29T22:57:06Z
1b94fd215dfd8ea25f1d9197890c613d4c84d915,"Make setNativeProps a no-op with Fabric renderer (#15094)

* Make setNativeProps a no-op with Fabric renderer

* Remove unnecessary __DEV__ check",Eli White,2019-03-29T22:44:15Z
08055a625e28672f6ab705fd1d063522e337c2c7,"Fix Press module in experimental event API (#15262)

Note: this is for an experimental event API that we're testing out internally at Facebook.

Fixes a regression in f4625f51823dd7faa02bba95ae731249ce07246c",Nicolas Gallagher,2019-03-29T21:26:55Z
f4625f51823dd7faa02bba95ae731249ce07246c,"Fix on(Long)PressChange events in experimental press event API (#15256)

Make sure that `onPressChange` is only called if `longPressCancelsPress` is `false`.
And make sure that `onLongPressChange` is called when a long press ends.",Nicolas Gallagher,2019-03-29T18:58:29Z
a41b217708fcf2a8a325c83f89a480b2ebd91ce6,"Add additional event API responder surfaces (#15248)

* Add rest of event modules + small fixes",Dominic Gannaway,2019-03-29T17:31:18Z
a450a23e318c5a8fcba5a52c8fdc2e23584650b3,Improved Profiler suspense boundary UI,Brian Vaughn,2019-03-29T15:53:39Z
700f17be6752a13a8ead86458e343d2d637ee3ee,"Fix longpress in experimental Press event module (#15246)

The 'longpress' event is dispatched during a press interaction, rather than
after it has ended.

The 'longPressCancelsPress' prop can be used to prevent 'press' being
dispatched if 'longpress' has already been dispatched.",Nicolas Gallagher,2019-03-29T04:44:28Z
5d336df70664a9c8db497f57ef9cfbaf59fb28e8,Allow for null targetFiber for root event handling (#15247),Dominic Gannaway,2019-03-29T04:43:19Z
c6f3524df585c193214e7e685a11b5f2d1953b49,"Adds React event component and React event target support to SSR renderer (#15242)

* Adds React event component and React event target support to SSR renderer",Dominic Gannaway,2019-03-28T22:36:21Z
c7a2dce50adc6e6d2b12ea8a17fe7b4efcc27055,"Disable JS urls at build level for www (#15230)

This will be on by default in open source for the next major.",Sebastian Markbåge,2019-03-28T21:36:36Z
fb6b50871b2f0d846f63a51af7ce620ce6b73e48,Update versions for 16.8.6,Dan Abramov,2019-03-28T06:55:48Z
4148b0511de8a9de93bbab7c6045dc7f259afca3,Changelog,Dan Abramov,2019-03-27T15:54:10Z
1cfd256685c673511090f7be273cf8740a9cf594,"Fix circular module imports causing file size increase (#15231)

* Fix circular module imports causing file size increase",Dominic Gannaway,2019-03-28T04:17:58Z
669cafb36f7252e2f83655f48f48a85b0f4e2051,"Adds experimental event component responder surfaces (#15228)

* Adds Press and Hover event modules + more features to the Event Responder System",Dominic Gannaway,2019-03-27T23:42:17Z
d8cb10f11fa0b0ab6ded66bbef86dc874b5e2d90,Enabled warnAboutDeprecatedLifecycles flag by default (#15186),Brian Vaughn,2019-03-27T23:30:49Z
61a251f01af4012e91ce61f415b86127011b75b9,Disable reload-and-profile button if no renderers support profiling,Brian Vaughn,2019-03-27T16:50:19Z
7d24e83989f76e941885a1eaee5efab592b24a3a,Implemented reload-and-profile. Also fixed an couple of minor profiling bugs along the way,Brian Vaughn,2019-03-27T16:41:12Z
80f8b0d5123981969997e07c071bdc6e3884ef58,"Add part of the event responder system for experimental event API (#15179)

* Add part of the event responder system",Dominic Gannaway,2019-03-26T23:55:25Z
d03ac4b231da8952d2648f73147f9673de46a6ed,Fix tracing fixture,Dan Abramov,2019-03-26T20:59:32Z
ea5f310fe1948ab6f50d12ff2468c5652982087e,Webpack config injects a __DEV_ constant,Brian Vaughn,2019-03-26T20:22:55Z
0d5e4c7e096c640419ea0aadb0d09bb9e9a7ddc8,Remove coverage badge from README (#15216),Brian Vaughn,2019-03-26T19:37:05Z
691068b0a38e011a88c1a4a69be18e4d1b2b0b1c,Suppress horizontal scroll bars in snapshot selector,Brian Vaughn,2019-03-26T18:23:19Z
894990919cafc8c69dfbf9bbdbc9e03728557638,Fixed a tab restoration bug in browser extension,Brian Vaughn,2019-03-26T18:13:40Z
3fa951d3c303ecca5fac1d34b649faf208345f29,Cleaned up a no-selection state,Brian Vaughn,2019-03-25T17:34:22Z
030914fdcad02d04cb811e4707232b24e30d252f,Moved some shared CSS vars into CSS,Brian Vaughn,2019-03-25T17:29:25Z
3ba64e595517a7579a099709543ddc148b82e988,Cleaned up edge cases around filtered commits,Brian Vaughn,2019-03-25T17:18:38Z
5718eaf0f323c50fa44ff321777f09eac5cb5a7f,Added arrow key navigation for commits and interactions,Brian Vaughn,2019-03-25T01:53:59Z
d973452c362ed7f9808f93663fa6219e25528864,Removed some outdated TODO comments,Brian Vaughn,2019-03-24T17:14:28Z
9d942b486a2562b7498cebdd9e76b404d9605534,Show commit boxes in interaxctions sidebar,Brian Vaughn,2019-03-24T16:58:56Z
afba752034973ae42857aec2a50ee096db6478d4,Clicking commits and interactions link to each other,Brian Vaughn,2019-03-24T16:46:54Z
5602fc537104e11a065dd264dd400ee01889fe0b,Added interaction tracing test harness to shell,Brian Vaughn,2019-03-24T16:21:37Z
69cdd38c9d6411a7f8d8aab1ea40ffff941db07a,Interaction chart with commit blocks rendering,Brian Vaughn,2019-03-24T16:07:00Z
5c2b2c0852c715abda7296bd6e7a2e941ca66969,"Warn about async infinite useEffect loop (#15180)

* Warn about async infinite useEffect loop

* Make tests sync",Dan Abramov,2019-03-22T20:04:34Z
8e9a013c079eecd2ac65b52be9deb2ec9a4ddcfb,Release 16.8.5,Dan Abramov,2019-03-22T16:41:58Z
db96d637d8bbbdbe0f55c02659bf9ea9463687cc,Changelog,Dan Abramov,2019-03-22T14:49:12Z
8127a57c44ddc8feaffaa4b9c6abde53c831f2d0,Update CHANGELOG.md,Dan Abramov,2019-03-22T14:37:19Z
bfb5a0cfef0aa07f65ad7891be80b43cb27c2dcf,Add 16.8.5 changelog,Dan Abramov,2019-03-22T14:34:33Z
f33e5790b83dc1ae41b2b7d59d53420e7c8383aa,eslint-plugin-react-hooks@1.6.0,Dan Abramov,2019-03-22T13:56:07Z
b1cccd1ed14ff0d5db4fcefbf8b49807a48d7410,Warn about setState directly in dep-less useEffect (#15184),Dan Abramov,2019-03-22T13:41:10Z
78f2775ed037e9707b1606186625e70693f39613,Flip event passive logic on passiveBrowserEventsSupported (#15190),Dominic Gannaway,2019-03-22T10:28:03Z
f161ee2eb7e78d6cb3d3878fe1812ac1057fedc6,React.warn() and React.error() (#15170),Brian Vaughn,2019-03-21T21:44:08Z
78968bb3d9049c65f74d42a1b2f4f9f95d2cba42,Validate useEffect without deps too (#15183),Dan Abramov,2019-03-21T20:42:13Z
4b8e1641b77d0a5443403b8a2a8fa141c220c1a7,"Fork performWork instead of using boolean flag (#15169)

I inline it into performAsyncWork instead.

Code that was only relevant to the async callback had leaked into the
performWork call which is an indication that this was a bad abstraction
and therefore the wrong place to DRY.

By inlining I also discovered that minExpirationTime is actually irrelevant
in the yieldy case so we can clean that up.",Sebastian Markbåge,2019-03-21T20:20:52Z
56035dac645af75c1a8aa8deba2bcf89b14a5aa4,unstable_Profiler -> Profiler (#15172),Brian Vaughn,2019-03-21T16:18:34Z
31518135c25aaa1b5c2799d2a18b6b9e9178409c,"Strengthen nested update counter test coverage (#15166)

* Isolate ReactUpdates-test cases

This ensures their behavior is consistent when run in isolation, and that they actually test the cases they're describing.

* Add coverage for cases where we reset nestedUpdateCounter

These cases explicitly verify that we reset the counter in right places.

* Add a mutually recursive test case

* Add test coverage for useLayoutEffect loop",Dan Abramov,2019-03-21T14:52:51Z
66f280c87b05885ee55320a5e107a534a50f9375,"Add internal logic for listening to event responders (#15168)

* Add the logic for listening to event responders",Dominic Gannaway,2019-03-21T12:32:40Z
b1a56abd6aec4379c2fc9400b413f6f42d0c9b1f,"Fork ReactFiberScheduler with feature flag

Adds a feature flag `enableNewScheduler` that toggles between two
implementations of ReactFiberScheduler. This will let us land changes in
master while preserving the ability to quickly rollback.

Ideally this will be a short-lived fork. Once we've tested the new
scheduler for a week or so without issues, we will get rid of it. Until
then, we'll need to maintain two parallel implementations and run tests
against both of them. We rarely land changes to ReactFiberScheduler, so
I don't expect this will be a huge burden.

This commit does not implement anything new. The flag is still off and
tests run against the existing implementation.

Use `yarn test-new-scheduler` to run tests against the new one.",Andrew Clark,2019-03-20T23:28:33Z
45f571736cd0fe1d6c9db6cdde85fb2274b1670e,"ReactFiberScheduler -> ReactFiberScheduler.old

Doing this in its own commit so history and blame are preserved.",Andrew Clark,2019-03-20T23:27:59Z
64e355bb749969e61a4d48af0f2638c5e64a3773,Added basic Interactions view (without graph for now),Brian Vaughn,2019-03-20T18:12:46Z
17a966651cc1ee92ece83b71f4671133f2a830ce,Added suspense to TODO list and added interactions to 'Commit Info' panel,Brian Vaughn,2019-03-20T16:39:14Z
c05b4b81f91c0b43a02e101d6a37b3de768f017b,Link to useLayoutEffect gist in a warning (#15158),Dan Abramov,2019-03-20T13:40:36Z
061d6ce3c0310d3b7f2122ad216be01bc4eff956,"fix(react-dom): access iframe contentWindow instead of contentDocument (#15099)

MDN has a list of methods for obtaining the window reference of an
iframe:

https://developer.mozilla.org/en-US/docs/Web/API/Window/postMessage#Syntax

fix(react-dom): check if iframe belongs to the same origin

Accessing the contentDocument of a HTMLIframeElement can cause the browser
to throw, e.g. if it has a cross-origin src attribute.
Safari will show an error in the console when the access results in ""Blocked a frame with origin"". e.g:

```javascript
try {
 $0.contentDocument.defaultView
} catch (err) {
  console.log('err', err)
}

> Blocked a frame with origin X from accessing a frame with origin Y. Protocols, domains, and ports must match.
> err – TypeError: null is not an object (evaluating '$0.contentDocument.defaultView')
```

A safety way is to access one of the cross origin properties: Window or Location
Which might result in ""SecurityError"" DOM Exception and it is compatible to Safari.

```javascript
try {
 $0.contentWindow.location.href
} catch (err) {
 console.log('err', err)
}

> err – SecurityError: Blocked a frame with origin ""http://localhost:3001"" from accessing a cross-origin frame. Protocols, domains, and ports must match.
```

https://html.spec.whatwg.org/multipage/browsers.html#integration-with-idl",Renan Valentin,2019-03-20T13:11:54Z
b83e01cade6f86b9a127bdfdda60f625fd14fdcd,"Adds more scaffolding for experimental event API (#15112)

* Adds more scaffolding for experimental event API",Dominic Gannaway,2019-03-20T11:20:17Z
3e82e4152e7a6c1646261f8952b9ac34f5e86bc0,Added getInteractions message,Brian Vaughn,2019-03-20T01:13:44Z
daeda44d8f5abdb7354742bb69a967302d34d7f9,Follow up to 15150 (#15152),Dominic Gannaway,2019-03-19T20:55:04Z
acd65db5bc2cd1ab19be66318f3e931054796739,Deprecate module pattern (factory) components (#15145),Sebastian Markbåge,2019-03-19T19:55:27Z
433b6aadd6cda3caaa0a86a48ff2ce441010d8b4,Added placeholder Profiler sidebar views,Brian Vaughn,2019-03-19T19:41:49Z
ac1a986acecbe146a2efd113f7fa336308a6ab33,Handle RTE in profiler when commit does not contain selected node,Brian Vaughn,2019-03-19T18:19:30Z
1846d4fe5907ee17434b65f68ea8986129d96c8b,Fixed a bug where treeBaseDurations were undefined for fibers that were unmounted during profiling,Brian Vaughn,2019-03-19T18:08:51Z
55cc921c5d3485eb60fe94628b227d4069c97b6c,"Adds react-events package for internal testing (#15150)

* Adds react-events package for internal testing",Dominic Gannaway,2019-03-19T15:12:45Z
7ad7386308abd55f12ad9f1cddac6a97860e92eb,"Improve warning for invalid class contextType (#15142)

* Improve warning for invalid class contextType

* Don't warn for null

* Grammar",Dan Abramov,2019-03-19T13:31:26Z
1e3364e764ff8c90c082b90f688e6553c3811366,Test that we don't suspend when disabling yielding (#15143),Sebastian Markbåge,2019-03-18T22:21:49Z
2fc03eb151758917c0666c971ab89861fdcc9755,Fixed keyboard/mouse events inside of extension by using ref.ownerDocument,Brian Vaughn,2019-03-18T22:11:41Z
42c3c967d1e4ca4731b47866f2090bc34caa086c,"Compile invariant directly to throw expressions (#15071)

* Transform invariant to custom error type

This transforms calls to the invariant module:

```js
invariant(condition, 'A %s message that contains %s', adj, noun);
```

Into throw statements:

```js
if (!condition) {
  if (__DEV__) {
    throw ReactError(`A ${adj} message that contains ${noun}`);
  } else {
    throw ReactErrorProd(ERR_CODE, adj, noun);
  }
}
```

The only thing ReactError does is return an error whose name is set
to ""Invariant Violation"" to match the existing behavior.

ReactErrorProd is a special version used in production that throws
a minified error code, with a link to see to expanded form. This
replaces the reactProdInvariant module.

As a next step, I would like to replace our use of the invariant module
for user facing errors by transforming normal Error constructors to
ReactError and ReactErrorProd. (We can continue using invariant for
internal React errors that are meant to be unreachable, which was the
original purpose of invariant.)

* Use numbers instead of strings for error codes

* Use arguments instead of an array

I wasn't sure about this part so I asked Sebastian, and his rationale
was that using arguments will make ReactErrorProd slightly slower, but
using an array will likely make all the functions that throw slightly
slower to compile, so it's hard to say which way is better. But since
ReactErrorProd is in an error path, and fewer bytes is generally better,
no array is good.

* Casing nit",Andrew Clark,2019-03-18T20:58:03Z
b64a76e6bdf8db0c9fd26ae038cbf308a4301e57,Reset selected commit and fiber between profiling sessions,Brian Vaughn,2019-03-18T20:53:10Z
9b6ee0bb2292e695ac7ce0a06d16f8f5778094b2,"Merge pull request #33 from bvaughn/portals

Experimenting with portals [WIP]",Brian Vaughn,2019-03-18T20:37:56Z
5f154b376e9658a6b7b7477dead472063be1541e,Added profiling-not-supported message for browser extension,Brian Vaughn,2019-03-18T20:37:37Z
df7b87d25e74fbbaf19b822096d0651aa3ad6a9f,Warn for Context.Consumer with contextType (#14831),Brandon Dail,2019-03-18T19:27:05Z
2b93d686e359c7afa299e2ec5cf63160a32a1155,"Add more info to invalid hook call error message (#15139)

* Add more info to invalid hook call error message

* Update other renderers + change call to action

* Update related tests for new hooks error message

* Fix lint errors",Jared Palmer,2019-03-18T18:22:38Z
be48150fc69a078e4b51cdaef635b6eacaa1b4db,innerTagName -> innerElementType,Brian Vaughn,2019-03-18T17:09:09Z
50b6b1d5f9e8a3284971ca0b464fb88ce3f925ba,Added some inline comments about portal props,Brian Vaughn,2019-03-18T16:57:08Z
e728ebc7b9c38770761fbd5f791c9334518f0131,Unmount and remount when main URL changes to avoid staleness problems,Brian Vaughn,2019-03-18T16:36:47Z
c9920f095457e39c4c8f060c5a6d14c7a8f0cd6f,Added a few inline comments,Brian Vaughn,2019-03-18T16:20:00Z
2664036dbe42a137ecf0a345a0c15ab068982151,Tweaked profiling did-not-render color to be dimmer,Brian Vaughn,2019-03-18T16:18:22Z
11573bf8d9d6346121492d97d2db8a443f4a22a3,Refactored portaling and fixed disconnected CSS vars,Brian Vaughn,2019-03-18T16:11:28Z
f3f4643a3af686b1e4d8711df17f6465a855925c,Experimenting with portals,Brian Vaughn,2019-03-17T20:52:37Z
d3ee02cd35b73c09ab9c94ea87163e342820a699,"Added ""Profiler"" tab",Brian Vaughn,2019-03-17T17:58:20Z
d685efd72f4f769c1bef63b77f31f12015c8d762,Fixed mutation bug in CommitTreeBuilder,Brian Vaughn,2019-03-17T17:25:40Z
c82a7fb56063f241ea3213f27a536b73da7f70a7,First pass at flame graph chart,Brian Vaughn,2019-03-17T16:49:10Z
01ad9f1da6d6db997b1b2c865b2eb36de577538d,Implemented ranked chart,Brian Vaughn,2019-03-16T21:06:41Z
734e4146e7bbfdaebdfaf3762aaf79c22f93e328,Added Ranked chart data generation; fixed some logic errors in backend tree base duration tracking,Brian Vaughn,2019-03-16T17:52:08Z
a93dab7f837fe20adc744f819c4d09da4b4191f1,Reset commit tree cache between profiles,Brian Vaughn,2019-03-16T15:50:28Z
821a6504b8b6341c0b1cac8ca436483e42ad30dd,Added commit tree reconstruction,Brian Vaughn,2019-03-16T03:05:52Z
d926936f0b5ebe160819717924d7a124c2f65471,"Eager bailout optimization should always compare to latest reducer (#15124)

* Eager bailout optimization should always compare to latest reducer

* queue.eagerReducer -> queue.lastRenderedReducer

This name is a bit more descriptive.

* Add test case that uses preceding render phase update",Andrew Clark,2019-03-16T02:03:59Z
4162f6026c2f560f286e7853f4929cd5e0135bdd,Add feature flag to disable yielding (#15119),Sebastian Markbåge,2019-03-15T22:54:22Z
8d60bd4dc2f7128c3de53474db50df000b14f677,"[Shallow] Implement setState for Hooks and remount on type change (#15120)

* Throw away old shallow renderer state on type change

This worked in function components but was broken for classes. It incorrectly retained the old instance even if the type was different.

* Remove _previousComponentIdentity

We only needed this because we didn't correctly reset based on type. Now we do so this can go away.

* Use _reset when unmounting

* Use arbitrary componentIdentity

There was no particular reason it was set to element.type. We just wanted to check if something is a render phase update.

* Support Hook state updates in shallow renderer",Dan Abramov,2019-03-15T22:30:32Z
035e4cffbd16fd618ed1a5614838656a4a505936,Change passive checker to use defineProperty (#15121),Dominic Gannaway,2019-03-15T22:24:25Z
b283d75c17ff40cba1a49956d23b3985b9eb6abe,"Support React.memo in ReactShallowRenderer (#14816)

* Support React.memo in ReactShallowRenderer

ReactShallowRenderer uses element.type frequently, but with React.memo
elements the actual type is element.type.type. This updates
ReactShallowRenderer so it uses the correct element type for Memo
components and also validates the inner props for the wrapped
components.

* Allow Rect.memo to prevent re-renders

* Support memo(forwardRef())

* Dont call memo comparison function on initial render

* Fix test

* Small tweaks",Brandon Dail,2019-03-15T22:17:09Z
f0621fe232f31cb0fcd63992c3440ec1b4ce5813,Use same example code for async effect warning (#15118),Dan Abramov,2019-03-15T19:27:55Z
ff4fb6d368c2197871d071b6de8ffd2beb1467b5,"Remove facts tracker (#15111)

* Removed Travis references

* Remove used facts tracker",Kayla Ngan,2019-03-15T19:25:06Z
8a7be78ed734322576923283bcfc71666be2458a,Finished iterating on commit selector UI for now,Brian Vaughn,2019-03-15T18:51:35Z
585c1cb3d2bacd4aa5ccca51b7f9824a07818e71,Refactored Profiler tree to better work with suspense,Brian Vaughn,2019-03-15T17:26:21Z
e8f84dd5c4d02ca8278d57e0d1406ff075a7ffb1,Iterating on Profiling tab suspense. Stashing changes but planning to refactor immediately.,Brian Vaughn,2019-03-15T15:34:08Z
52c870c8d9e283283f34b6d113e39e4531ce0b1d,"Fix shallow renderer not allowing hooks in forwardRef render functions (#15100)

* test: Add test for shallow + forwardRef + hook

* fix(react-test-renderer): shallow forwardRef hooks",Sebastian Silbermann,2019-03-15T15:28:34Z
f1ff4348c1debea8e0ce0fb35cc3fff342569789,Don't suggest a function as its own dep (#15115),Dan Abramov,2019-03-15T15:14:01Z
371bbf36bba53dd25fcab665bd43e7cebeecf6d3,"Add infrastructure for passive/non-passive event support for future API exploration (#15036)

* Add infrastructure for passive/non-passive event support for future event API experimentation",Dominic Gannaway,2019-03-15T09:39:43Z
ab5fe174c69ea4ea5019390f4234a83ef7ce8d52,"Don't set the first option as selected in select tag with `size` attribute  (#14242)

* Set 'size' attribute to select tag if it occurs before appending options

* Add comment about why size is assigned on select create. Tests

I added some more clarification for why size must be set on select
element creation:

- In the source code
- In the DOM test fixture
- In a unit test

* Use let, not const in select tag stub assignment",Mateusz,2019-03-14T21:40:09Z
935f60083f6c8bea8b90baa986954d60731a805b,eslint-plugin-react-hooks@1.5.1,Dan Abramov,2019-03-14T15:50:03Z
0c03a474362c27aa9222ae27088782a01402067c,"Adds experimental event API scaffolding (#15108)

* Adds experimental event API scaffolding",Dominic Gannaway,2019-03-14T17:02:42Z
210c2371cf20b17e5c25267f375abdb9ec6172c2,Naive pass at commit durationfiltering,Brian Vaughn,2019-03-14T00:00:44Z
8b3546b437668cc6a6913193ac78279c481f90ae,Profiler CSS/layout tweaks,Brian Vaughn,2019-03-13T23:25:29Z
679402a66b09e129d06f415cd976d18727cc8590,"Improve hydration fixture, support older versions of React (#14118)

* Hydration Fixture: Only load ReactDOMServer if it exists

Fixes an issue where the hydration fixture would try to load in
ReactDOMServer below version 14. In version 13, string markup methods
exist on the React namespace.

* DOM Fixtures: Use class component for App.js

This was breaking React 0.13.0.

* Hydration Fixture: better findDOMNode compatibility

This commit fixes an issue where the Hydration DOM fixture was
unusable in React 0.13.0 or lower because of newer API usage.

It fixes that by avoiding the use of refs to get the textarea
reference in the code editor component, using various versions of
findDOMNode as required.

* Hydration Fixture: Do not show dropdown for single-line errors

If an error showed for the hydration fixture, a detail element was
used even if no additional lines could display. In that case, this
commit changes the component such that it returns a div.

* Deeper React version support for hydration fixture

This commit adds support for versions 0.4.0 of React and higher for
the hydration fixture.

The DOM test fixtures themselves do not support down to React 0.4.0,
which would be exhaustive. Instead, the Hydration fixture can pick a
version to use for its own purposes. By default, this is the version
of React used by the fixtures.

In the process of doing this, I had to make some updates to the
renderer.html document associated with the hydration fixture, and I've
added some comments to better document the history of API changes.",Nathan Hunzaker,2019-03-13T22:12:49Z
0edf4e9dc16e58881dc3c45180d2d384ca6fc35e,Plugged react-window into commit selector,Brian Vaughn,2019-03-13T21:57:52Z
1204c789776cb01fbaf3e9f032e7e2ba85a44137,"[eslint] Wording tweaks (#15078)

* [eslint] Wording tweaks

I think these are a little clearer.

* fix tests",Sophie Alpert,2019-03-13T18:31:39Z
9d77a317bf5bde7e6edd3c8cd0ebb00feb447223,Improve async useEffect warning (#15104),Dan Abramov,2019-03-13T16:20:13Z
b8a52078c6cd273a981caf3dc9d7762624d77391,Added initial Suspense cache and loaded commit metadata,Brian Vaughn,2019-03-12T22:50:29Z
103378b1eada44561821b1c22ff54e0537cf9764,"Warn for javascript: URLs in DOM sinks (#15047)

* Prevent javascript protocol URLs

* Just warn when disableJavaScriptURLs is false

This avoids a breaking change.

* Allow framesets

* Allow <html> to be used in integration tests

Full document renders requires server rendering so the client path
just uses the hydration path in this case to simplify writing these tests.

* Detect leading and intermediate characters and test mixed case

These are considered valid javascript urls by browser so they must be
included in the filter.

This is an exact match according to the spec but maybe we should include
a super set to be safer?

* Test updates to ensure we have coverage there too

* Fix toString invocation and Flow types

Right now we invoke toString twice when we hydrate (three times
with the flag off). Ideally we should only do it once even in this case
but the code structure doesn't really allow for that right now.

* s/itRejects/itRejectsRendering

* Dedupe warning and add the unsafe URL to the warning message

* Add test that fails if g is added to the sanitizer

This only affects the prod version since the warning is deduped anyway.

* Fix prod test",Sebastian Markbåge,2019-03-11T23:39:49Z
5d0c3c6c7d0a1f8fe793ca89d3e0f9f71f3e49a1,"[Partial Hydration] Render client-only content at normal priority (#15061)

* Split props changing from permanent fallback state

These will need different logic. In this commit, no logic has changed,
only moved.

* Delete terminal fallback content in first pass

If the dehydrated suspense boundary's fallback content is terminal there
is nothing to show. We need to get actual content on the screen soon.

If we deprioritize that work to offscreen, then the timeout heuristics will
be wrong.

Therefore, if we have no current and we're already at terminal fallback
state we'll immediately schedule a deletion and upgrade to real suspense.

* Show failing case when there is another wrapper boundary

* Revert ""Delete terminal fallback content in first pass""

This reverts commit ad67ba8928c23f5d9ba22d7e5c202bf27d0e49d3.

* Use the new approach of leaving work at normal pri to replace fallback",Sebastian Markbåge,2019-03-11T20:50:19Z
e7e62acbf96e12d15fee79ed48b20624765efaba,"Merge pull request #32 from reznord/fix/long-props-fix

Break the text into next line for long props",Brian Vaughn,2019-03-11T18:26:41Z
f5ba99e6babec6c4831dce26c83f3ab0758bdddb,Moved some things from ProfilerContext reducer into (root) Store,Brian Vaughn,2019-03-11T18:26:30Z
6a4a261ee8cf2f95c7a725670dad7763836d8284,"Test suspended children are hidden before layout in persistent mode (#15030)

Refs behave differently in persistent mode, so instead of a ref, the
persistent mode version of this test asserts on the output of the
host tree.",Andrew Clark,2019-03-11T18:19:20Z
896c9a79b27921361751c613f9359ef29d40509a,Fixes #19 - Break the text into next line for long props,Anup,2019-03-11T18:07:39Z
bc8bd24c145d386be7f014f04fc927067d18412a,"Run persistent mode tests in CI (#15029)

* Add command to run tests in persistent mode

* Convert Suspense fuzz tester to use noop renderer

So we can run it in persistent mode, too.

* Don't mutate stateNode in appendAllChildren

We can't mutate the stateNode in appendAllChildren because the children
could be current.

This is a bit weird because now the child that we append is different
from the one on the fiber stateNode. I think this makes conceptual
sense, but I suspect this likely breaks an assumption in Fabric.

With this approach, we no longer need to clone to unhide the children,
so I removed those host config methods.

Fixes bug surfaced by fuzz tester. (The test case that failed was the
one that's already hard coded.)

* In persistent mode, disable test that reads a ref

Refs behave differently in persistent mode. I added a TODO to write
a persistent mode version of this test.

* Run persistent mode tests in CI

* test-persistent should skip files without noop

If a file doesn't reference react-noop-renderer, we shouldn't bother
running it in persistent mode, since the results will be identical to
the normal test run.

* Remove module constructor from placeholder tests

We don't need this now that we have the ability to run any test file in
either mutation or persistent mode.

* Revert ""test-persistent should skip files without noop""

Seb objected to adding shelljs as a dep and I'm too lazy to worry about
Windows support so whatever I'll just revert this.

* Delete duplicate file",Andrew Clark,2019-03-11T17:56:34Z
22a3c757fb6df9af7cdef12a6ec589e8d7487df9,Tidied up Profiler toolbar UI,Brian Vaughn,2019-03-11T16:50:20Z
e5280307c920279c6607c612fe066847505b1ee3,Added snapshot selector placeholder UI,Brian Vaughn,2019-03-11T02:16:34Z
565d739569ca6707ff7fc75f776dce1791ba1049,Added commit time filter,Brian Vaughn,2019-03-10T17:13:20Z
2d6800728889a5141b7a1c08842f2e90ffc9448a,"Initial profiling shell added

Lots of TODOs and unfinished views here.",Brian Vaughn,2019-03-10T16:01:05Z
2606d119be12c52e8a18a7a4de1810926bf914b6,Merge branch 'master' of github.com:bvaughn/react-devtools-experimental,Brian Vaughn,2019-03-09T22:09:04Z
c687252b6a5f9f8301753918340c2024c7bb87d5,Updated Profiling overview/proposal again,Brian Vaughn,2019-03-09T22:08:51Z
3f4852fa5f932e5e815ef1be39c72ac8be4687d4,"Run Placeholder tests in persistent mode, too (#15013)

* Convert ReactSuspensePlaceholder tests to use noop

Instead of the test renderer, since test renderer does not support
running in persistent mode.

* Run Placeholder tests in persistent mode, too

* Fix Flow and lint

* Hidden text instances should have correct host context

Adds a test for a subtle edge case that only occurs in persistent mode.

* createHiddenTextInstance -> cloneHiddenTextInstance

This sidesteps the problem where createHiddenTextInstance needs access
to the host context.",Andrew Clark,2019-03-09T02:53:14Z
a5de36b0c28517f0b8f607b1517a3a7ffeedbebd,"Merge pull request #29 from tsriram/fix-import

Fix import file name",Brian Vaughn,2019-03-09T01:41:58Z
3118dae375b19f456bdfcbbc4c789b662a0bed78,fix import file name,Sriram Thiagarajan,2019-03-09T01:33:42Z
5386917f594dfdacc0ed5935fa03f80b8e130a54,Refined OVERVIEW a little more,Brian Vaughn,2019-03-07T22:31:03Z
20b613dcdef149248ab2bfac77e72bbd3efb3d3d,Updated Profiler OVERVIEW,Brian Vaughn,2019-03-07T22:15:12Z
d0289c7e3a2dfc349dcce7f9eb3dee22464e97bd,eslint-plugin-react-hooks@1.5.0,Dan Abramov,2019-03-07T19:43:07Z
03ad9c73e468cafa9cafbd9a51a0c3a16ed3f362,"[ESLint] Tweak setState updater message and add useEffect(async) warning (#15055)

* Use first letter in setCount(c => ...) suggestion

In-person testing showed using original variable name confuses people.

* Warn about async effects",Dan Abramov,2019-03-07T19:40:23Z
eb6247a9ab7653aac346db08faf0862c58b055df,More concise messages (#15053),Dan Abramov,2019-03-07T15:21:44Z
197703ecc776dd5c1a4d956896603bcc67fb9920,"[ESLint] Add more hints to lint messages (#15046)

* A clearer message for props destructuring where applicable

* Add line number to the ""move function"" message

* Add a hint for how to fix callbacks from props

* Simplify code and harden tests

* Collect all dependency references for better warnings

* Suggest updater or reducer where appropriate",Dan Abramov,2019-03-07T12:39:15Z
0ac84f3065f053a2edcab0dd55749c2f24e2a263,Added explicit Profiler goals to OVERVIEW,Brian Vaughn,2019-03-07T02:30:17Z
4257ba4983cf59e1561673555e27c1a330649e98,Changed profilerSummary messages to be lazy as well,Brian Vaughn,2019-03-07T02:21:38Z
181e8aff3004be09d66ca86bb486eb0fad031181,Added planned Profiler architecture to OVERVIEW doc to share with others,Brian Vaughn,2019-03-07T02:12:11Z
6d2666bab16ee8c822e848f84a6feb0d42a6d78c,Fix ESLint rule crash (#15044),Dan Abramov,2019-03-07T00:39:39Z
9b7e1d1389e080d19e71680bbbe979ec58fa7389,"[ESLint] Suggest moving inside a Hook or useCallback when bare function is a dependency (#15026)

* Warn about bare function deps and suggest moving or useCallback

* Clearer wording",Dan Abramov,2019-03-06T23:50:02Z
1e3b6192b54df20ac117a2af56afbe00ac9487b7,"Import Scheduler directly, not via host config (#14984)

* Import Scheduler directly, not via host config

We currently schedule asynchronous tasks via the host config. (The host
config is a static/build-time dependency injection system that varies
across different renderers — DOM, native, test, and so on.) Instead of
calling platform APIs like `requestIdleCallback` directly, each renderer
implements a method called `scheduleDeferredCallback`.

We've since discovered that when scheduling tasks, it's crucial that
React work is placed in the same queue as other, non-React work on the
main thread. Otherwise, you easily end up in a starvation scenario where
rendering is constantly interrupted by less important tasks. You need a
centralized coordinator that is used both by React and by other
frameworks and application code. This coordinator must also have a
consistent API across all the different host environments, for
convention's sake and so product code is portable — e.g. so the same
component can work in both React Native and React Native Web.

This turned into the Scheduler package. We will have different builds of
Scheduler for each of our target platforms. With this approach, we treat
Scheduler like a built-in platform primitive that exists wherever React
is supported.

Now that we have this consistent interface, the indirection of the host
config no longer makes sense for the purpose of scheduling tasks. In
fact, we explicitly do not want renderers to scheduled task via any
system except the Scheduler package.

So, this PR removes `scheduleDeferredCallback` and its associated
methods from the host config in favor of directly importing Scheduler.

* Missed an extraneous export",Andrew Clark,2019-03-06T22:41:45Z
e9028d1d35718d4565ff76fda6214b1a4c8e860f,Re-organized views slightly in preparation for Profiler UI,Brian Vaughn,2019-03-06T22:01:52Z
c18449326dd7a790d9beabf6292d78b01e7a712e,Disabled transferrables for now (to avoid a Chrome runtime error),Brian Vaughn,2019-03-06T21:17:20Z
5d49dafac80733fbd8699138c766da3339468254,Enforce deps array in useMemo and useCallback (#15025),Dan Abramov,2019-03-06T18:17:54Z
a9aa24ed8dc843b76ceb4880b83e776c696cafaf,16.8.4 and changelog,Brian Vaughn,2019-03-05T23:16:01Z
db8d466554a1a85bf9427fb04c1901503d65f93f,Fix heading in changelog,Dan Abramov,2019-03-05T22:40:04Z
fa5d4ee43b2b7145ab4013b86662e69ea64ab180,"[ESLint] Treat functions that don't capture anything as static (#14996)

* Treat functions that don't capture anything as static

* Fix comment",Dan Abramov,2019-03-05T21:07:37Z
fd557d453d37eab29eca18f0507750ab2093669d,"Warn on mount when deps are not an array (#15018)

* Warn on mount when deps are not an array

* Check other Hooks

* I can't figure out how to fix error/warning nesting lint

But it doesn't really matter much because we test other cases in the other test.",Dan Abramov,2019-03-05T17:41:27Z
ff596e3efb6a2f486e3466b94053d3c857dc8fe7,"fix(auto-version-update): update root package version while publishing (#15005)

* fix(auto-version-update): update root package version while publishing

* fix(remove-version): remove version field from package json",Farhad Yasir,2019-03-04T20:36:17Z
ce45ca9ba3243124df8a36cf92bae79c2125b427,Prettier,Andrew Clark,2019-03-04T19:38:08Z
757a70b25dd33966380409d6c491bc0fe741ce08,"ReactNoop.yield -> Scheduler.yieldValue (#15008)

These used to be different things, but now ReactNoop.yield merely
re-exports Scheduler.yieldValue, so let's get rid of it.",Andrew Clark,2019-03-04T19:23:00Z
0db7770cf7fdc21f34f4aa665dbdd0ac797b6be7,Merged master,Brian Vaughn,2019-03-03T20:41:08Z
235851da8799aee1d3e7dd44b8dd7aa26b3f3d7c,"Merge pull request #27 from gaurav5430/master

Update OVERVIEW.md",Brian Vaughn,2019-03-03T16:14:05Z
f94401c10e6a5ec1aa52f70cb591bec66bdec3fc,"Update OVERVIEW.md

Fixed the superscript reference",Gaurav Gupta,2019-03-03T12:59:58Z
9d756d903fdd07895fc320962c3fab95fa099bd5,"Revert #14756 changes to ReactFiberScheduler (#14992)

* Revert #14756 changes to ReactFiberScheduler

This PR introduced some bugs in concurrent mode during internal testing.
Until we figure out a proper solution, I'm going to try reverting it.

Not totally certain this is sufficient to unbreak the bugs we found, but
I'm using this branch to determine that.

* Add back commented out Scheduler import

With a note not to use named imports next time we import Scheduler
in this module.",Andrew Clark,2019-03-01T21:10:12Z
f16442a10683d8885fcd657c584ed5e40e0a5737,eslint-plugin-react-hooks@1.4.0,Dan Abramov,2019-03-01T20:29:06Z
e1e45fb3673b7d23b4f89ab9fa9644fe9539eb9c,"[ESLint] Suggest to destructure props when they are only used as members (#14993)

* Suggest to destructure props when they are only used as members

* Add more tests

* Fix a bug",Dan Abramov,2019-03-01T19:48:48Z
59ef28437ac30ae26fe53a3be1de50754be8b806,Warn about dependencies outside of render scope (#14990),Dan Abramov,2019-03-01T18:16:17Z
515b60cc5ed259db6e93362781e016b9d8124792,Fixed a typo in OVERVIEW,Brian Vaughn,2019-03-01T16:38:05Z
8aa6f96279700ce75a1980f4cad97bafdc36eaa5,"Fixed selecterd element background color being cut-off when tree scrolls

This required a bit of unusual CSS but seems to work well for Firefox and Chrome. We can remove it and revisit other approaches (like PR#24) in the future if needed.",Brian Vaughn,2019-03-01T16:28:16Z
df7b4768c7931504338ee1093ebcfda3d5974650,"[ESLint] Deduplicate suggested dependencies (#14982)

* Deduplicate suggested dependencies

* Tweak test cases",Dan Abramov,2019-03-01T16:10:22Z
02404d793b84c057e0f3f712f8ce565f81d4b7ab,Avoid dynamic dispatch for scheduler calls (#14968),Dan Abramov,2019-03-01T15:04:15Z
0401f34f5524d4962c267938cbf532062e020e68,Removed unnecessary relative position style from Element CSS,Brian Vaughn,2019-02-28T22:50:27Z
bb2939ccc23c9895d798f889d9c32848be43225e,"Support editable useState hooks in DevTools (#14906)

* ReactDebugHooks identifies State and Reducer hooks as editable
* Inject overrideHookState() method to DevTools to support editing in DEV builds
* Added an integration test for React DevTools, react-debug-tools, and overrideHookState",Brian Vaughn,2019-02-28T22:37:55Z
90001e892d3da2986447e7deb348c1014a961bf5,Udpated param name in injected renderer overrideHookState type,Brian Vaughn,2019-02-28T21:55:49Z
d70dbfdb658e9f77fafc78aead05e6053840f1c3,Added intro to OVERVIEW,Brian Vaughn,2019-02-28T21:46:36Z
c249e31932668fbbf03905980c6a08b39eaea6c7,Fixed docs typo: chlid -> child,Brian Vaughn,2019-02-28T21:26:39Z
7da5f83a280803f2fa7af5d3533a988bd6a83557,Updated to account for facebook/react/pull/14906/commits/cdd9ba4,Brian Vaughn,2019-02-28T21:22:27Z
c7f85572028bc09505a51b1283da2fc3a024de8b,Improve selected node highlighting by using minWidth instead of width,Brian Vaughn,2019-02-28T20:56:49Z
69060e1da6061af845162dcf6854a5d9af28350a,"Swap expect(ReactNoop) for expect(Scheduler) (#14971)

* Swap expect(ReactNoop) for expect(Scheduler)

In the previous commits, I upgraded our custom Jest matchers for the
noop and test renderers to use Scheduler under the hood.

Now that all these matchers are using Scheduler, we can drop
support for passing ReactNoop and test roots and always pass
Scheduler directly.

* Externalize Scheduler in noop and test bundles

I also noticed we don't need to regenerator runtime in noop anymore.",Andrew Clark,2019-02-28T20:54:47Z
ccb2a8a44eee74504f1e3f3bebc272cbb1fcc0f0,"Replace test renderer's fake Scheduler implementation with mock build (#14970)

* Replace test renderer's fake Scheduler implementation with mock build

The test renderer has its own mock implementation of the Scheduler
interface, with the ability to partially render work in tests. Now that
this functionality has been lifted into a proper mock Scheduler build,
we can use that instead.

* Fix Profiler tests in prod",Andrew Clark,2019-02-28T18:50:38Z
bffa72c6013383061084760f6109d16802e2ae73,"Add placeholders to clarify between empty string, null, and undefined",Brian Vaughn,2019-02-28T18:46:17Z
53e787b45f633468f5ccdc2012468f1ebbba9d4c,"Replace noop's fake Scheduler implementation with mock Scheduler build (#14969)

* Replace noop's fake Scheduler implementation with mock Scheduler build

The noop renderer has its own mock implementation of the Scheduler
interface, with the ability to partially render work in tests. Now that
this functionality has been lifted into a proper mock Scheduler build,
we can use that instead.

Most of the existing noop tests were unaffected, but I did have to make
some changes. The biggest one involved passive effects: previously, they
were scheduled on a separate queue from the queue that handles
rendering. After this change, both rendering and effects are scheduled
in the Scheduler queue. I think this is a better approach because tests
no longer have to worry about the difference; if you call `flushAll`,
all the work is flushed, both rendering and effects. But for those few
tests that do care to flush the rendering without the effects, that's
still possible using the `yieldValue` API.

Follow-up: Do the same for test renderer.

* Fix import to scheduler/unstable_mock",Andrew Clark,2019-02-28T18:30:46Z
d34a32d3897e85d464fab0262c42b71a695eb054,Disable text selection in tree,Brian Vaughn,2019-02-28T17:44:04Z
d6a2ba261674f2d1103a6cfb7ca5c44aeac809c9,Added OVERVIEW doc,Brian Vaughn,2019-02-28T16:52:54Z
bcb6c2fd9fba652fefb3b529f602ba7e92dfae1c,Removed an unnecessary entry from add-root operation array,Brian Vaughn,2019-02-28T16:52:46Z
13ca37384d99610ccbc8b1bf07fcafa97405d6d2,Maybe fixed checkbox alignment issue Dan reported?,Brian Vaughn,2019-02-27T21:54:53Z
0153eaedee768336d3e849b18c8889a13c752e1b,Left arrow selects parent in tree,Brian Vaughn,2019-02-27T21:49:46Z
bf02b2ffbfe4c07c6bd610e419dcdb106978a71c,Select DOM element mode should useCapture to prevent clicks from passing through,Brian Vaughn,2019-02-27T21:33:10Z
05ef0ad7dc8d1dc7cfb8b3a66a49f5457f0f670c,Disable view-source button rather than hiding it to avoid jumping when selecting new components,Brian Vaughn,2019-02-27T21:30:03Z
1e4434ecc46fd7e5ef202766cc3f39b77eb14ba1,Changed select-on-click to select-on-mouse-down and fixed a scrollIntoView problem,Brian Vaughn,2019-02-27T21:11:23Z
8041bfb92f0ae1e7978e59c6c8b8c3c636320055,Add .vscode to .gitignore,Brian Vaughn,2019-02-27T21:07:09Z
bc4e8950f6d0d33399b9b86fdc9129ca0d5d2295,Updated test code to include a deeply nested DIV,Brian Vaughn,2019-02-27T21:05:43Z
4d9e7e75c6e37d026c91444ef6120bc3fe642edb,Merge branch 'scroll-into-view' of https://github.com/Jessidhia/react-devtools-experimental into Jessidhia-scroll-into-view,Brian Vaughn,2019-02-27T20:58:03Z
3ada82b7416c51290535a054f345b99378c38dcb,"Allow extraneous effect dependencies (#14967)

This makes cases like

  useEffect(() => {
    window.scrollTo(0, 0);
  }, [activeTab]);

not warn.

However, it still warns for unused useCallback/useMemo deps.",Dan Abramov,2019-02-27T16:59:11Z
00748c53e183952696157088a858352cc77b0010,"Add new mock build of Scheduler with flush, yield API (#14964)

* Add new mock build of Scheduler with flush, yield API

Test environments need a way to take control of the Scheduler queue and
incrementally flush work. Our current tests accomplish this either using
dynamic injection, or by using Jest's fake timers feature. Both of these
options are fragile and rely too much on implementation details.

In this new approach, we have a separate build of Scheduler that is
specifically designed for test environments. We mock the default
implementation like we would any other module; in our case, via Jest.
This special build has methods like `flushAll` and `yieldValue` that
control when work is flushed. These methods are based on equivalent
methods we've been using to write incremental React tests. Eventually
we may want to migrate the React tests to interact with the mock
Scheduler directly, instead of going through the host config like we
currently do.

For now, I'm using our custom static injection infrastructure to create
the two builds of Scheduler — a default build for DOM (which falls back
to a naive timer based implementation), and the new mock build. I did it
this way because it allows me to share most of the implementation, which
isn't specific to a host environment — e.g. everything related to the
priority queue. It may be better to duplicate the shared code instead,
especially considering that future environments (like React Native) may
have entirely forked implementations. I'd prefer to wait until the
implementation stabilizes before worrying about that, but I'm open to
changing this now if we decide it's important enough.

* Mock Scheduler in bundle tests, too

* Remove special case by making regex more restrictive",Andrew Clark,2019-02-27T04:51:17Z
4186952a6f3558eb4fae9f6c5f669bd898dc1d97,"Fixed incompatibility between react-debug-tools and useContext() (#14940)

* Refactor hook ordering check to use DEV-only data structure. This enables us to warn about more cases (e.g. useContext, useDebugValue) withou the need to add any overhead to production bundles.",Brian Vaughn,2019-02-26T22:24:52Z
0b8efb229c0b8e4b0919d855e926c7528e2246f0,Allow omitting constant primitive deps (#14959),Dan Abramov,2019-02-26T16:12:15Z
8e25ed20bd27d126f670d04680db85209f779056,"Unify noop and test renderer assertion APIs (#14952)

* Throw in tests if work is done before emptying log

Test renderer already does this. Makes it harder to miss unexpected
behavior by forcing you to assert on every logged value.

* Convert ReactNoop tests to use jest matchers

The matchers warn if work is flushed while the log is empty. This is
the pattern we already follow for test renderer. I've used the same APIs
as test renderer, so it should be easy to switch between the two.",Andrew Clark,2019-02-26T03:01:45Z
870214f37ad63333e750f31ef0cc0bde5793aee5,"Deprecate ref.setNativeProps in favor of ReactNative.setNativeProps (#14912)

* Deprecate ref.setNativeProps in favor of ReactNative.setNativeProps

* Using a feature flag for the setNativeProps warning

* Removing extra line breaks

* Set the FB native feature flag to true

* Prettier",Eli White,2019-02-25T23:00:39Z
3989c095002430e0c7316ca0af0870fdf060b5ab,eslint-plugin-react-hooks@1.3.0,Dan Abramov,2019-02-25T17:27:37Z
1bbfbc98d20d1eb0c7c8ed3772f5bdd0c29ac96c,"[ESLint] Add more cases to exhaustive-deps rule (#14930)

* Add better message for literal dependencies

* Warn about ref.current in cleanup phase

* Fix wrong comment

* Tweak wording",Dan Abramov,2019-02-25T16:00:29Z
412f88296840f89d95bb619c7ca68e119ccfa0c3,fix(eslint-plugin-react-hooks): node engine updated to version 7 because of object.entries (#14951),Farhad Yasir,2019-02-25T15:37:06Z
89df0a6363d15a502b278a25b31a97706b4346c8,Yarn upgrade,Brian Vaughn,2019-02-25T02:32:29Z
1d6b1660a29c452e954d053a14c5adc42ccf94ba,Fixed typo (#14943),Marco,2019-02-24T17:50:23Z
9f24e8c7a2ca286bfbd5e065745c5726701b320c,Renamed overrideHook -> overrideHookState (to stay in sync with React PR),Brian Vaughn,2019-02-23T17:12:17Z
9b96b1f809f939eee258ae5992ea2692647a612a,Updated deploy scripts and pre-release template,Brian Vaughn,2019-02-23T16:59:21Z
ba708fa79b3db6481b7886f9fdb6bb776d0c2fb9,"Remove ReactNoop.flushDeferredPri and flushUnitsOfWork (#14934)

* Remove ReactNoop.flushDeferredPri and flushUnitsOfWork

Some of our older tests worked by counting how many times React checked
whether it should yield to the main thread, instead of something
publicly observable like how many times a component is rendered.

Our newer tests have converged on a style where we push into a log and
make assertions on the log. This pattern is less coupled to the
implementation while still being sufficient to test performance
optimizations, like resuming (whenever we add that back).

This commit removes flushDeferredPri and flushUnitsOfWork and upgrades
the affected tests.

* Remove shouldYieldToRenderer indirection

This wrapper is no longer necessary.",Andrew Clark,2019-02-23T01:27:30Z
920b0bbb3c308490757accb9b8fc524d19505394,"[scheduler] Pass didTimeout argument to callbacks (#14931)

As I prepare to refactor the Fiber scheduler, I've noticed some quirks
in our implementation. This PR addressed one of them.

---

There's no reason for a timed out Scheduler callback to check
`shouldYield`, because the value will always be false until the work
has completed. The `didTimeout` argument provides this information to
the callback so it can avoid the redundant checks.

React's existing check for whether a callback has timed out didn't make
any sense, but happened to work anyway. I don't think the wrongness of
the old implementation is observable via React APIs but it's
incoherent regardless.",Andrew Clark,2019-02-23T00:39:10Z
7b2f06e3d3960477a190b6a12238651596865284,Added (temporary) deploy scripts for pre-release extensions,Brian Vaughn,2019-02-22T22:36:10Z
53632883b6dc3c40394f44873ce4e22a9f7e5290,Implemented view-source button for DOM extension,Brian Vaughn,2019-02-22T21:24:03Z
105b53f0fb9881cb79f965323e4e92f7f69121c6,Split :active and :focus styles for Button+Toggle,Brian Vaughn,2019-02-22T18:54:18Z
5fd9cb5dfb1cde8aa1665befdb3be06a0f4ef988,Added copy props/state/hooks/context button,Brian Vaughn,2019-02-22T17:39:05Z
1edbfbf6cb2186dc0c0255cbfddd0d1a311dc981,Fixed some small overflow/scrollbar issues,Brian Vaughn,2019-02-22T16:44:05Z
33cb3f04f14638e9344dc59ae956f9805c07ab07,Release script clarifies which test fixture failed (#14922),Brian Vaughn,2019-02-22T15:43:27Z
f708f9e307e5d2579a019b7d53cb06bac63d6d44,Improve pactch release process docs (#14923),Brian Vaughn,2019-02-22T15:43:18Z
f99fca3cb28e1fbd87e0b647ac43959add290be7,"Fix sample ESLint configuration (#14926)

See [ESLint docs](https://eslint.org/docs/user-guide/configuring#configuring-rules)",Matt Thomson,2019-02-22T12:22:07Z
0c346ceea8650219b1dbb43d7bb0ebbe5732b318,Re-added transferrables (after 'shutdown' evt fix) and guard against a tree mutation race,Brian Vaughn,2019-02-21T22:56:11Z
caf2eb973af0bad812aa0d9ae42e92f4899c6c13,Split large InspectedElementTree file into separate component-files,Brian Vaughn,2019-02-21T22:20:14Z
9898db02d1029d35dfd67a9afb91ca11971bf086,Restore input focus after clicking reset value button,Brian Vaughn,2019-02-21T22:13:48Z
4f64c9ef9ecdac2deb7251b3f147c4d66ac0a691,Tweaked colors; Esc key to undo edits,Brian Vaughn,2019-02-21T22:11:06Z
ddeb78001c108226d335aa2e255b3e72a35ed0f6,Tweaked colors based on Andrew's feedback,Brian Vaughn,2019-02-21T22:02:45Z
290e8c69265eada53fa3315903ab6fda82b0c8ce,Fixed null input value. Tweaked useReducer test harness.,Brian Vaughn,2019-02-21T21:40:23Z
bdf80651376967e72ecb634ad9d8ffa88d99598c,Merge branch 'master' of github.com:bvaughn/react-devtools-experimental,Brian Vaughn,2019-02-21T21:24:15Z
6f118497e8f979061c27aa2fd7f10cf2b8b61b9b,Updated editable hooks UI and added limited undo feature,Brian Vaughn,2019-02-21T21:24:01Z
2b27f63a617a3b0a4ebb8de00bb6c9b501644df8,Updated ESLint hooks rule,Brian Vaughn,2019-02-21T19:55:28Z
22bb947642dc02888964e2050d134429e8938182,Release eslint-plugin-react-hooks@1.2.0,Dan Abramov,2019-02-21T19:41:35Z
a77bbf1a1c278a39dd7b1afb02f3d92402fcc8a0,"[ESLint] Warn against assignments from inside Hooks (#14916)

* [ESLint] Warn against assignments from inside Hooks

* Include variable name

* Add a test for the legit case",Dan Abramov,2019-02-21T19:23:00Z
219ce8a9ccf4b61a2e28cbb0494eee4ad15868f4,Fix tracing fixture (#14917),Dan Abramov,2019-02-21T18:14:32Z
8c1966590a12d213e0d68b7ae8a5563d4db3d694,Release 16.8.3,Dan Abramov,2019-02-21T18:05:52Z
7de4d23919ab5c67a708560a5166b8cdb1547e26,Fix UMD builds by re-exporting the scheduler priorities (#14914),Dan Abramov,2019-02-21T17:20:28Z
df4a09d9b8b34294503b5542bd4434cc6dbfe951,Updated flow-bin from 91 -> 93 and removed unnecessary fixmes,Brian Vaughn,2019-02-21T17:15:47Z
e35819e68d46096b5e995a882baab2bfb05e2fcd,Renamed nativeHookIndex -> index,Brian Vaughn,2019-02-21T16:59:46Z
d0318fb3f946ff359ff1b6e2c09bd7c724e3d05f,"Updating copyright headers, dropping the year (#14893)

* Updating copyright headers, dropping the year
* Update copyright in ReactDOMHooks-test and react-cache LRU.js",Nathan Hunzaker,2019-02-21T16:46:13Z
532cca80138c6f984bdecb5dcedc2648db10c76b,"Merge pull request #4 from mishaor/linux-support

Added support for Linux",Brian Vaughn,2019-02-21T16:24:33Z
b0ccd9d89ed2145e128d912a372006b85ed0653e,added basic support for Linux,Michael Orishich,2019-02-21T18:00:11Z
f978d5fde4228843d09af9134e580a8403bd0371,Fix warning message for new setNativeProps method. on -> with (#14909),Eli White,2019-02-21T07:53:21Z
b0f45c0fc6ed690739401be9adccb77a80c4f7ba,"Adding ReactNative.setNativeProps that takes a ref (#14907)

* Adding ReactNative.setNativeProps that takes a ref

* Adding test for components rendered with Fabric with Paper's setNativeProps

* Fixing flow types

* Fix prettier

* Rename ReactNativeSetNativeProps.js to be more general",Eli White,2019-02-21T07:20:42Z
8cd8b29015646b65f7db7c1b39a0c9afa19612c9,Added support for editable hook values (pending facebook/react/pull/14906),Brian Vaughn,2019-02-20T23:58:52Z
4f4aa69f1b2bdc1ddb00e476f49450e251475e0c,Adding setNativeProps tests for NativeMethodsMixin (#14901),Eli White,2019-02-20T21:16:35Z
90f98372a96c54fae64651f14daf836ee428f0c0,Fixed broken 'shutdown' event that lead to CPU problems when reloading DevTools,Brian Vaughn,2019-02-20T19:55:48Z
b96b61dc4dc9df51532c04b91c53ccdfc84519a8,"Use the canonical nativeTag for Fabric's setNativeProps (#14900)

* Use the canonical nativeTag for Fabric's setNativeProps

* Fix prettier",Eli White,2019-02-20T19:09:31Z
42795b22bf4c544c110184bef9eb7ee3b9c59d42,Installed eslint-plugin-react-hooks@next and added to ESLint config,Brian Vaughn,2019-02-20T19:03:50Z
dab2fdbbbd6eb560523fe2146c153f6a24e2f8dc,"Add eslint-plugin-react-hooks/exhaustive-deps rule to check stale closure dependencies (#14636)

* Add ESLint rule for useEffect/useCallback/useMemo Hook dependencies

* Fix ReactiveDependencies rule

* fix lint errors

* Support useLayoutEffect

* Add some failing tests and comments

* Gather dependencies in child scopes too

* If we don't find foo.bar.baz in deps, try foo.bar, then foo

* foo is enough for both foo.bar and foo.baz

* Shorter rule name

* Add fixable meta

* Remove a bunch of code and start from scratch

* [WIP] Only report errors from dependency array

This results in nicer editing experience. Also has autofix.

* Fix typo

* [Temp] Skip all tests

* Fix the first test

* Revamp the test suite

* Fix [foo] to include foo.bar

* Don't suggest call expressions

* Special case 'current' for refs

* Don't complain about known static deps

* Support useImperativeHandle

* Better punctuation and formatting

* More uniform message format

* Treat React.useRef/useState/useReducer as static too

* Add special message for ref.current

* Add a TODO case

* Alphabetize the autofix

* Only alphabetize if it already was

* Don't add static deps by default

* Add an undefined variable case

* Tweak wording

* Rename to exhaustive-deps

* Clean up / refactor a little bit",Dan Abramov,2019-02-20T18:18:58Z
1493abd7e0e8a3c9c09285c1b990ecb79a53e640,Deleted empty App.css (#14149),Josh R,2019-02-19T23:49:34Z
bec073365d14aba07ff98a589ab52301761e7a72,Fix hooks warnings identified by prerelease version of react-hooks ESLint plugin,Brian Vaughn,2019-02-19T21:15:57Z
13645d224d66dc7d295c5e65dae4b2bb62ee174d,"Deal with fallback content in Partial Hydration (#14884)

* Replace SSR fallback content with new suspense content

* The three states of a Dehydrated Suspense

This introduces three states for dehydrated suspense boundaries

Pending - This means that the tree is still waiting for additional data or
to be populated with its final content.

Fallback - This means that the tree has entered a permanent fallback state
and no more data from the server is to be expected. This means that the
client should take over and try to render instead. The fallback nodes will
be deleted.

Normal - The node has entered its final content and is now ready to be
hydrated.

* Rename retryTimedOutBoundary to resolveRetryThenable

This doesn't just retry. It assumes that resolving a thenable means that
it is ok to clear it from the thenable cache.

We'll reuse the retryTimedOutBoundary logic separately.

* Register a callback to be fired when a boundary changes away from pending

It's now possible to switch from a pending state to either hydrating
or replacing the content.",Sebastian Markbåge,2019-02-19T21:07:41Z
c506ded3b275b410517c06e0f55db8f0f70288b5,"Don't discard render phase state updates with the eager reducer optimization (#14852)

* Add test cases for setState(fn) + render phase updates

* Update eager state and reducer for render phase updates

* Fix a newly firing warning",Dan Abramov,2019-02-19T18:40:10Z
a31415011d46d7be3302ad12777df04170adb382,Removed numeric key code,Brian Vaughn,2019-02-19T16:59:27Z
3376daaa412601c7508b268f2e003659773f8a93,"Merge pull request #2 from Jessidhia/fix-utf-encoding

Fix encoding of Unicode keys greater than U+00FF",Brian Vaughn,2019-02-19T16:56:21Z
044e6ba9cd217a079d99a2274b3bf5f5e6d70875,Pass options to scrollIntoView,Jessica,2019-02-19T07:36:43Z
65d493cae9b3697c96650ae0c973afb71c873f68,Just use codepoints as it'll be copied into an Uint32Array anyway,Jessica,2019-02-19T07:03:53Z
4ee74f7e6c8b918bec5414aa6289c3009864c136,Fix encoding of Unicode keys greater than U+00FF (greater than U+FFFF handled by surrogate pairs),Jessica,2019-02-19T06:52:03Z
28ea0a352e5ed617d24962b7b9474b6c04d447a3,Scroll to newly selected component if it's out of view,Jessica,2019-02-19T03:22:19Z
a4212dcdce1b5cbaf8d436871b1fe8968814a358,"Support editable props, state, and context values",Brian Vaughn,2019-02-17T21:07:39Z
6c226b0c806cbca2751b60a6a7788cf8b3a98120,Added link to now.sh preview to README,Brian Vaughn,2019-02-16T17:46:10Z
c4d6fdbfdbc13885d9abcd493d16bfb607e8f373,Fixed overlay position bug,Brian Vaughn,2019-02-16T16:33:38Z
1d950981777f2be21e3f8426e96d233e221c5f33,Implemented select-DOM-element button,Brian Vaughn,2019-02-16T16:29:26Z
2fbacbff01b722bc61aa1d5835286993905ecf84,Tab bar resizes properly for narrow screens,Brian Vaughn,2019-02-15T19:42:55Z
0e67969cb1ad8c27a72294662e68fa5d7c2c9783,Prompt to include UMD build artifact links in GitHub release (#14864),Brian Vaughn,2019-02-15T18:48:20Z
fad0842fd45e4082feb8036922c77529431628ca,"Release scripts documentation (#14863)

* Improve release script process documentation
* Improved pre-publish instructions/message based on feedback
* Added reminder to attach build artifacts to GitHub release",Brian Vaughn,2019-02-15T18:00:43Z
0008bb00d7fc2bf2fc3493679434bc1ff2d01f18,Inspectable complex hook values,Brian Vaughn,2019-02-15T05:55:09Z
47a5fd59cbcdbd5c390491cefe3b9fbb32bf9c44,Reduced tree padding (left) slightly to make larger trees easier to inspect,Brian Vaughn,2019-02-14T23:13:43Z
04a0d24f0f78c5a87df6a3dda8511f3cdc5f81a8,Fixed a potential source of duplicate key,Brian Vaughn,2019-02-14T23:06:38Z
3f40d38203137e0be84f791a6c738e0acb68f45d,Fixed edge case mutation bugs in selected element and tree context,Brian Vaughn,2019-02-14T22:36:29Z
bf2f13d32a5c143aba1874995338c4c7d24bf442,Removed some stale TODO comments,Brian Vaughn,2019-02-14T21:37:40Z
9cfa25bdccf1d04f20189ee745a80501ffadd7b1,Tidied up Flow types for Bridge and Store,Brian Vaughn,2019-02-14T21:32:30Z
b167dd339bc84a22e4c96b36977512af676b09f0,"Style, theme, and button CSS cleanup",Brian Vaughn,2019-02-14T21:20:24Z
a07d9862cac51ada3f31077b251522670a67f932,Fixed edge-case display density bug,Brian Vaughn,2019-02-14T20:46:27Z
ab7a67b1dc0e44bf74545ccf51a8c143b3af7402,"Fix react-dom/server context leaks when render stream destroyed early (#14706)

* Fix react-dom/server context memory retention

* Test for pollution of later renders

* Inline loop

* More tests",overlookmotel,2019-02-14T19:50:23Z
15c53961696c186ee799e7bbbe6efc40d9eff128,"Re-added ""Settings"" panel to browser extension and (hopefully) fixed a lot of sources of error",Brian Vaughn,2019-02-14T19:45:11Z
3e5556043879c9c7b98dd9edfc0e89df0366714b,Release 16.8.2,Dan Abramov,2019-02-14T19:12:42Z
5a301cd26e69a900e913db23d51f0e06578a4cf2,Tweaked the owner stack exit icon,Brian Vaughn,2019-02-14T17:23:54Z
dfabb77a97141baf07cfdad620949874e36516d7,Include another change in 16.8.2,Dan Abramov,2019-02-14T17:21:27Z
c555c008b6e13004c57784950eb325ed1d917575,"Include component stack in 'act(...)' warning (#14855)

* add a component stack trace to the act() warning

* pass tests

* nit",Sunil Pai,2019-02-14T17:20:49Z
36e596ecd1319d5621d39be8a4316365f9fced09,Changed dark theme to have more React blues,Brian Vaughn,2019-02-14T17:17:29Z
94aab74253142b4468f38253178c2d7ca80f1a15,Avoid NPE in Agent if renderer can't be found for an ID,Brian Vaughn,2019-02-14T16:13:35Z
ff188d666bcb4c7aad38009ee61ad292349244b0,Add React 16.8.2 changelog (#14851),Dan Abramov,2019-02-14T14:51:01Z
c4d8ef643002a2b181029ffed22abd451fb326df,Fix typo in code comment (#14836),Deniz Susman,2019-02-14T04:49:37Z
c229837f33c1bdb8cba5697e95e457e98bdac657,Temporarily disabled Settings panel,Brian Vaughn,2019-02-13T19:36:43Z
79f57532b9fe117d82c2934b7e6a2b281fa27dcb,Split demo app into multiple roots and fixed a multi-root bug,Brian Vaughn,2019-02-13T19:22:22Z
08e95543571eacbe88a03382adc9399607d53425,"Statically enable suspense/partial hydration flag in www (#14842)

It doesn't hurt to have this always on since it is only when we use
Suspense that it matters. This saves some code/checks.",Sebastian Markbåge,2019-02-13T18:55:13Z
0e4135e8c2f1bc9cd14f439190aa28865395e4b1,"Revert ""[ShallowRenderer] Queue/rerender on dispatched action after render component with hooks (#14802)"" (#14839)

This reverts commit 6d4038f0a638d82e9e528f02cc5a86afb410cf11.",Dan Abramov,2019-02-13T16:52:14Z
4ea81337f382a75226d619b1d8eca98f4010dd7b,Initial pass at adding Settings panel to browser extension,Brian Vaughn,2019-02-13T15:59:49Z
6d4038f0a638d82e9e528f02cc5a86afb410cf11,"[ShallowRenderer] Queue/rerender on dispatched action after render component with hooks (#14802)

* [shallow-renderer] Rerender on dispatched action out of render",Rodrigo Ribeiro,2019-02-13T15:59:02Z
fa6205d522a9d3e3f228be18dd29f11f8930c394,Special case crossOrigin for SVG image elements (#14832),Brandon Dail,2019-02-13T04:13:17Z
aed1713154c11253ea5b896b459f2f720a246123,Added NOW config file for dev shell,Brian Vaughn,2019-02-13T02:09:50Z
95b859209f846857555798d5e17cc48ef643db41,Fixed NaN warning for pre-mount CSS prop read,Brian Vaughn,2019-02-13T02:09:33Z
d203ebf1655e9bbaa039ffc34855bbe3396dde35,Added new tabs UI and theme/display-density preferences,Brian Vaughn,2019-02-13T01:41:39Z
c6bee765ba865298c69acdea70e1ec2d79f69efe,"Remove false positive warning and add TODOs about `current` being non-null (#14821)

* Failing test for false positive warning

* Add tests for forwardRef too

* Remove the warning and add TODOs",Dan Abramov,2019-02-13T00:00:10Z
3ae94e1885b673543a30a05906c4f9a0e4b682cb,"Fix ignored sync work in passive effects (#14799)

* Fix ignored sync work in passive effects

* Fix batching",Dan Abramov,2019-02-12T20:18:35Z
8e5a35b7629bdc7dbd219910f1bf679c922e798c,Misc cleanup and prep for dark mode CSS,Brian Vaughn,2019-02-12T14:45:00Z
f3a14951ab9bccfd59ca977493b72321b24e50a5,"Partial Hydration (#14717)

* Basic partial hydration test

* Render comments around Suspense components

We need this to be able to identify how far to skip ahead if we're not
going to hydrate this subtree yet.

* Add DehydratedSuspenseComponent type of work

Will be used for Suspense boundaries that are left with their server
rendered content intact.

* Add comment node as hydratable instance type as placeholder for suspense

* Skip past nodes within the Suspense boundary

This lets us continue hydrating sibling nodes.

* A dehydrated suspense boundary comment should be considered a sibling

* Retry hydrating at offscreen pri or after ping if suspended

* Enter hydration state when retrying dehydrated suspense boundary

* Delete all children within a dehydrated suspense boundary when it's deleted

* Delete server rendered content when props change before hydration completes

* Make test internal

* Wrap in act

* Change SSR Fixture to use Partial Hydration

This requires the enableSuspenseServerRenderer flag to be manually enabled
for the build to work.

* Changes to any parent Context forces clearing dehydrated content

We mark dehydrated boundaries as having child work, since they might have
components that read from the changed context.

We check this in beginWork and if it does we treat it as if the input
has changed (same as if props changes).

* Wrap in feature flag

* Treat Suspense boundaries without fallbacks as if not-boundaries

These don't come into play for purposes of hydration.

* Fix clearing of nested suspense boundaries

* ping -> retry

Co-Authored-By: sebmarkbage <sebastian@calyptus.eu>

* Typo

Co-Authored-By: sebmarkbage <sebastian@calyptus.eu>

* Use didReceiveUpdate instead of manually comparing props

* Leave comment for why it's ok to ignore the timeout",Sebastian Markbåge,2019-02-12T05:25:44Z
f24a0da6e0f59484e5aafd0825bb1a6ed27d7182,"Fix useImperativeHandle to have no deps by default (#14801)

* Fix useImperativeHandle to have no deps by default

* Save a byte?

* Nit: null",Dan Abramov,2019-02-11T18:42:28Z
1fecba92307041e181ce425082d4d21ec8928728,"Fix crash unmounting an empty Portal (#14820)

* Adds failing test for https://github.com/facebook/react/issues/14811

* Fix removeChild() crash when removing an empty Portal",Dan Abramov,2019-02-11T18:37:53Z
e15542ee0f9c5ef5646820d59bde3a282e107d02,use functional component as a first example in readme (#14819),Alexey Raspopov,2019-02-11T14:41:37Z
c11015ff4f610ac2924d1fc6d569a17657a404fd,fix spelling mistakes (#14805),zhuoli99,2019-02-10T00:43:49Z
3e295edd52672518db91af2a457677ee0b6953a1,Typo fix in comment (#14787),Deniz Susman,2019-02-10T00:42:55Z
1d48b4a68485ce870711e6baa98e5c9f5f213fdf,"Fix hydration with createRoot warning (#14808)

It's suggesting an API that doesn't exist. Fixed it to reference the actual
API.",Sebastian Markbåge,2019-02-09T17:12:11Z
f3f497f40fff89e3554a95837ef3d56d16fc5499,Cleaned up CSS vars and reduced font size a bit,Brian Vaughn,2019-02-09T01:27:10Z
a6126c9e275edb1decdabdb93be7f69b35bc6606,Initial stab at 'View in DOM' button,Brian Vaughn,2019-02-08T23:48:29Z
baa6142801fb76614b15808afcb7b420e6af6597,Removed non-functioning tree arrows (for now),Brian Vaughn,2019-02-08T21:16:15Z
c6b0338f13b47c94b965f301619c7f36763eae73,Reverted immutable element change (for now),Brian Vaughn,2019-02-08T21:05:48Z
872d0f78d4b5fcd72662e1efc38c7f0ed44d744a,Tweaked owners breadcrumb style to batter match tree colors,Brian Vaughn,2019-02-08T20:49:52Z
41514d67f0be930d0aefe4b1277f3b7579358e6a,"Small refinements to Store: read-only Elements in map, added revision to guard against tearing",Brian Vaughn,2019-02-08T20:37:52Z
038018650169ecbe2962898746ea39ce31f73847,"Refactored tree, search, selection, and owners contexts",Brian Vaughn,2019-02-08T19:44:07Z
45641e98e5d848b65969866de3e8e9dc7193b21e,Added owner tree exploration view,Brian Vaughn,2019-02-07T14:34:24Z
fc924d136ac23ab4ac3d681675ee8d93a4047b25,Combined search and selection contexts to avoid complicated dependencies,Brian Vaughn,2019-02-07T09:29:42Z
9c093ac731e3c82798e68101f9838cbd03872db7,Fixed regexp parsing,Brian Vaughn,2019-02-06T21:33:44Z
aa9423701e99a194d65a8b835882502902a65a50,Tweaked publish canary message to show newly published version,Brian Vaughn,2019-02-06T18:24:51Z
45fc46bfa0e761c8382d177c46778e892f949cad,16.8.1 packages,Brian Vaughn,2019-02-06T18:21:33Z
b7cc6b2e6f58848563314b2a46d331284755b84c,Add 16.8.1 changelog,Dan Abramov,2019-02-06T18:19:35Z
c61e0f0d54c0cc1cfe897cfc4e2cd956bda2509d,Added a clarifying comment to SearchInput,Brian Vaughn,2019-02-06T17:09:46Z
f2e2637c8e351611dc012bba646431feb250a3e8,"Backwards compat fix for ReactCurrentDispatcher on older react versions (#14770)

* Add current owner ref fallback for newer renderers with older react versions
* Replaced current owner forward with current:null",Brian Vaughn,2019-02-06T17:02:14Z
e77ba003362f24cf4d9af3b36411829c9413be7e,Replaced SearchContext useStates with useReducer and fixed an edge-case search bug,Brian Vaughn,2019-02-06T16:31:02Z
1107b9673c779425a251ed5336ee8b6721498666,"[TestUtils.act] warn when using TestUtils.act in node (#14768)

* warn when using TestUtils.act in node

* s/warns/throws

* s/throw/warn

* consistent ellipses",Sunil Pai,2019-02-06T16:25:26Z
0975ea3278c4a203b73ad6cc1ea61c44a8eeeb17,eslint-plugin-react-hooks v1.0.0,Brian Vaughn,2019-02-06T10:14:57Z
d827445a500e497712a1a404c7ccc25779b1df5c,"Add 16.8.0 changelog and update some READMEs (#14692)

* Add 16.8.0 changelog

* Mention ESLint plugin

* Remove experimental notices from the ESLint plugin README

* Update CHANGELOG.md

* Add more details for Hooks

* fix

* Set a date

* Update CHANGELOG.md

Co-Authored-By: gaearon <dan.abramov@gmail.com>

* Update CHANGELOG.md

* useReducer in changelog

* Add to changelog

* Update date

* Add #14119 to changelog

* Add #14744 to changelog

* Fix PR links

* act() method was added to test utils, too

* Updated release date to February 6th",Dan Abramov,2019-02-06T08:31:00Z
bc9818f24d55e681aea39ecae59b8f544318169d,"Scheduler.unstable_next (#14756)

* Add Scheduler.unstable_next

* Use Scheduler to prioritize updates

Changes the implementation of syncUpdates, deferredUpdates, and
interactiveUpdates to use runWithPriority, so

This is the minimum integration between Scheduler and React needed to
unblock use of the Scheduler.next API.

* Add Scheduler.unstable_next

* Use Scheduler to prioritize updates

Changes the implementation of syncUpdates, deferredUpdates, and
interactiveUpdates to use runWithPriority, so

This is the minimum integration between Scheduler and React needed to
unblock use of the Scheduler.next API.",Andrew Clark,2019-02-06T08:16:41Z
b5398a913011103404cc48bd23e4dff4d6d77d47,"Add 16.8.0 changelog and update some READMEs (#14692)

* Add 16.8.0 changelog

* Mention ESLint plugin

* Remove experimental notices from the ESLint plugin README

* Update CHANGELOG.md

* Add more details for Hooks

* fix

* Set a date

* Update CHANGELOG.md

Co-Authored-By: gaearon <dan.abramov@gmail.com>

* Update CHANGELOG.md

* useReducer in changelog

* Add to changelog

* Update date

* Add #14119 to changelog

* Add #14744 to changelog

* Fix PR links

* act() method was added to test utils, too

* Updated release date to February 6th",Dan Abramov,2019-02-06T08:05:54Z
ce6ecd3fbf59bcf245851c6bbbfadfb69c534afe,"Add 16.8.0 changelog and update some READMEs (#14692)

* Add 16.8.0 changelog

* Mention ESLint plugin

* Remove experimental notices from the ESLint plugin README

* Update CHANGELOG.md

* Add more details for Hooks

* fix

* Set a date

* Update CHANGELOG.md

Co-Authored-By: gaearon <dan.abramov@gmail.com>

* Update CHANGELOG.md

* useReducer in changelog

* Add to changelog

* Update date

* Add #14119 to changelog

* Add #14744 to changelog

* Fix PR links

* act() method was added to test utils, too

* Updated release date to February 6th",Dan Abramov,2019-02-06T08:05:18Z
008a2ab9cd2e6bf4efcc1ad0a2f7c7e017c1c82f,16.8.0,Brian Vaughn,2019-02-06T08:04:00Z
d1326f466a24f2b9e09115ed1a3ddd9de2ad2e06,"[TestUtils.act] fix return result checking  (#14758)

* fix .act return value testing when result === null

* nit",Sunil Pai,2019-02-05T17:34:21Z
998e69a10defa81473cd50319a564ab485360186,Added search support,Brian Vaughn,2019-02-05T17:14:06Z
267ed981466ef323b1461b013b5db8db31e31772,"expose `TestUtils.act()` for batching actions in tests (#14744)

* expose unstable_interact for batching actions in tests

* move to TestUtils

* move it all into testutils

* s/interact/act

* warn when calling hook-like setState outside batching mode

* pass tests

* merge-temp

* move jsdom test to callsite

* mark failing tests

* pass most tests (except one)

* augh IE

* pass fuzz tests

* better warning, expose the right batchedUpdates on TestRenderer for www

* move it into hooks, test for dom

* expose a flag on the host config, move stuff around

* rename, pass flow

* pass flow... again

* tweak .act() type

* enable for all jest environments/renderers; pass (most) tests.

* pass all tests

* expose just the warning from the scheduler

* don't return values

* a bunch of changes.

can't return values from .act
don't try to await .act calls
pass tests

* fixes and nits

* ""fire events that udpates state""

* nit

* 🙄

* my bad

* hi andrew

(prettier fix)",Sunil Pai,2019-02-05T16:10:16Z
e723ec82bc84975234d08892065b450699a51fc1,Added $r support,Brian Vaughn,2019-02-05T13:19:08Z
ce7f060e267383ceddb966511dfa36b07c67af5b,Cleaned up property borders,Brian Vaughn,2019-02-05T11:26:37Z
6dc3fa6fbd03d338e346a455c7d9a30fc3825158,Cleaned up style vars,Brian Vaughn,2019-02-05T11:23:37Z
fb3f7bfde9a326a09d827b94dddfa2628dc9346f,"Avoid importing Scheduler directly (#14757)

* Avoid importing Scheduler directly

The reconciler should not depend directly on Scheduler. This adds it to
the host config for the renderer instead.

(Except for `scheduler/tracing` imports, which are used only by the
profiling build. I've left those imports as-is, though I'm open to
directing those through the host config, too.)

* Make throwaway root id longer to appease Brian",Andrew Clark,2019-02-05T11:21:25Z
15661411778f016c299816e1b03c342f9664c137,Strip React elements from serialized data (and display <name/> instead,Brian Vaughn,2019-02-05T10:25:33Z
33deb79ce46af1fae5df28358f5f2c38759fa81e,"Added simple hooks support (same as in legacy DevTools for now)

I had to add a couple of  comments because Flow was being a mysterious little shit and I got tired of trying to work around it.",Brian Vaughn,2019-02-05T09:23:14Z
d0d5b677de1b5566021463fed95adf8be1bca56d,Added better context support,Brian Vaughn,2019-02-05T08:32:02Z
6f952ede2f62dc8093634733f0e71977d4327a23,Fixed regression in browser shell,Brian Vaughn,2019-02-04T18:01:44Z
b56bc1a62604c34b1e758f2a68c03b770c1ef6e3,Initial pass at properties panel. Lots of TODOs remaining.,Brian Vaughn,2019-02-04T17:49:30Z
81470a00272f7840c27c9fc5be977f5573f5cb44,Add missing 16.6.1 changelog entry,Dan Abramov,2019-02-04T13:28:26Z
e602b5291cdde721429d4916e50dfa5c19c71707,Use SameValue instead of === to check for dispatchAction equivalence (#14752),Jessica Franco,2019-02-04T12:56:21Z
e489c3f9c114e3c30ccecc32743c9b6255fea058,Update the version with Hooks proposal in README (#14751),SToneX,2019-02-04T09:36:56Z
406df2a617c6a9565b1dc053129e07007ea94bae,Added properties panel and selected element context,Brian Vaughn,2019-02-02T21:57:32Z
c21c41ecfad46de0a718d059374e48d13cf08ced,Tweak invalid Hook warning and error (#14747),Dan Abramov,2019-02-01T21:05:13Z
9aa6e13d5f50fa6e556f1cadc2cfee1ac38257c9,Tidied up devtools frontend a little,Brian Vaughn,2019-02-01T17:25:54Z
fec00a869c987c9fa3e8bb6354000375b3271315,"Typo in comment (#14739)

""synchronously"" instead of ""syncrhonously"".",Deniz Susman,2019-02-01T12:26:24Z
ad74c54670de6982978e91bc5cc259ced20ca1a9,Adding tearing warning to Store,Brian Vaughn,2019-01-31T23:59:08Z
1866aef67c8940b5d86d0faf6ac46d483ad21344,Fixed small CSS bug,Brian Vaughn,2019-01-31T23:48:47Z
1eccdd6f8a96bf3fe2c21bd7470758cc38b20b61,Moved search icon into separate React component,Brian Vaughn,2019-01-31T22:46:18Z
89f4955b9335d2ec025c5ca6ad71f2b69ba03697,Don't show roots in Elements tree,Brian Vaughn,2019-01-31T22:31:12Z
bdfaeede6dd3715228ff34415b90d2322ec16b05,Fixed potential race cases in bridge/store/backend initialization,Brian Vaughn,2019-01-31T22:27:16Z
66eb29374239945c3a512a88aa2480637f62e5cc,"Restrict effect return type to a function or nothing (#14119)

* Restrict effect return type to a function or nothing

We already warn in dev if the wrong type is returned. This updates the
Flow type.

* Restrict return type further

* Assume Effect hook returns either a function or undefined

* Tweak warning message",Andrew Clark,2019-01-31T18:11:47Z
62f8c985df0e4ce884f24b2e10d8b53a8c1be0ea,Added stub search row (not connected to anythign yet),Brian Vaughn,2019-01-31T17:42:07Z
51c07912ac047d076e15e730eda1f4634cfe144f,Warn when second argument is passed to useCallback (#14729),Dan Abramov,2019-01-31T13:56:48Z
6363fc0767d17db1764557e83ad3227d2aea65c9,Tweaked error message to provide more helpful info if shown,Brian Vaughn,2019-01-30T22:39:37Z
ca6151ca01def24d5be6e1d9f3fdc10cdcc49af4,Reload extension on navigate,Brian Vaughn,2019-01-30T22:16:55Z
6d37857df3a21dd0fabdedee3f155d2607271ebc,Fixed an Array type bug in Store,Brian Vaughn,2019-01-30T19:31:13Z
a60c8e139a599d3856b727a0af1f226c8bdec49c,Renamed app.js to App.js for consistency,Brian Vaughn,2019-01-30T18:49:50Z
037071c0e11fbf9e5626e95cab8ac3e1d7284659,"Remove root from ""roots"" list on unmount",Brian Vaughn,2019-01-30T18:41:53Z
1f46df66cb753a8549bd852364f408054b1bd336,Tidying up,Brian Vaughn,2019-01-30T18:38:52Z
70d4075832cebc8bd3eb19f1089701096b483bd5,"Move Hook mismatch warning to first mismatch site (#14720)

* Move Hook mismatch warning to first mismatch site

Allows us to localize the warning logic in one place.

* Nit",Andrew Clark,2019-01-30T16:11:18Z
ba6477aa3cc0b189f4c9b805bf20edb2a2d94e91,"Improve Reducer Hook's lazy init API (#14723)

* Improve Reducer Hook's lazy init API

* Use generic type for initilizer input

Still requires an `any` cast in the case where `init` function is
not provided.",Andrew Clark,2019-01-30T01:39:24Z
cb1ff430e8c473a8a6bddd592106891251bbf5bf,"Phased dispatcher (#14701)

* Move DEV-only function right above where it's used

I don't like looking at this top-level function #petty

* Use different dispatchers for functions & classes

Classes support readContext, but not any of the other dispatcher
methods. Function support all methods.

This is a more robust version of our previous strategy of checking
whether `currentlyRenderingFiber` is null.

As a next step, we can use a separate dispatcher for each phase of the
render cycle (mount versus update).

* Use separate dispatchers for mount and update

* Remove mount code from update path

Deletes mount-specific code from the update path, since it should be
unreachable. To continue supporting progressive enhancement (mounting
new hooks at the end of the list), we detect when there are no more
current hooks and switch back to the mount dispatcher. Progressive
enhancement isn't officially supported yet, so it will continue to warn.

* Factoring nits

* Fix Flow

Had to cheat more than I would like

* More Flow nits

* Switch back to using a special dispatcher for nested hooks in DEV

In order for this strategy to work, I had to revert progressive
enhancement support (appending hooks to the end). It was previously a
warning but now it results in an error. We'll reconsider later.

* Always pass args to updateState and updateReducer

Even though the extra args are only used on mount, to ensure
type consistency.",Andrew Clark,2019-01-30T00:32:15Z
f542f879d61ecc0dacc9dee350a099990ecea6b4,Added inline comments for types,Brian Vaughn,2019-01-29T22:04:00Z
fc4af4d0188ecea769ad25bcd510d9328726ce41,Fixed text wrap bug in extension panel,Brian Vaughn,2019-01-29T21:48:35Z
fdfadef9289f2c69e02bbfbcc78db4dca11ce45a,Refactored bridge to support transferrables (e.g. typed array buffers) and added transferable param to postMessage for op codes,Brian Vaughn,2019-01-29T21:17:37Z
3f93b029a413f82ef021d2b4b5dfcf224d6d07e7,Replaced node objects with typed array of tree operations; windowing works in small test harness,Brian Vaughn,2019-01-28T23:50:48Z
c9a5f8cc2974fb158bd4e0010c3a391a427b3448,Stashing partial windowing implementation,Brian Vaughn,2019-01-28T00:04:17Z
b7cbd382147d4941381535d1dc18db9abe98b6ba,Misc updates to better handle tearing and add some future TODOs,Brian Vaughn,2019-01-27T15:58:09Z
9d483dcfd6aad53ce082d249845436a56eb39248,Spelling abitrarily -> arbitrarily (#14710),Peter Donald,2019-01-27T14:54:37Z
6d5ea54eee157b8f1dd9ecb92fc1d7695687bb0c,change codeofconduct link (#14711),DeepCold,2019-01-27T14:54:21Z
e19c9e106401fd41c91b67273d4c22289ed0917c,"Fix issue with multiple code branches in hooks linter (#14661)

* Fix issue with multiple code branches

* Add solution by @calebmer

* Add performance test

* Undo unrelated change",Yurick,2019-01-25T17:06:33Z
f11a9c1cb06514e40a50503e0f9bd26941251e06,"State update bug in concurrent mode (#14698)

* State update bug in concurrent mode

* Fix bug introduced by double-rendering Functions using hooks",Brian Vaughn,2019-01-25T00:10:13Z
13ca26e1536079b7eb9dd38f47f1c0173ca265cb,Removed throttling. It's too error prone because of mutations (Fibers). We'll optimize later by using the effects list for updates.,Brian Vaughn,2019-01-24T21:45:29Z
e679a4b6e2e3a468787827e3dfe89f13eae8486c,Fix typo in code comment (#14696),Greg Hurrell,2019-01-24T20:19:53Z
8bcc88f2e7a7dc3e950bfcca1d3c6bbd251c4b20,"Make all readContext() and Hook-in-a-Hook checks DEV-only (#14677)

* Make readContext() in Hooks DEV-only warning

* Warn about readContext() during class render-phase setState()

* Warn on readContext() in SSR inside useMemo and useReducer

* Make all Hooks-in-Hooks warnings DEV-only

* Rename stashContextDependencies

* Clean up warning state on errors",Dan Abramov,2019-01-24T19:31:20Z
d57ec6956158037e7d69bf65175abcfcc9c7ee03,Added initial Chrome/Firefox shells,Brian Vaughn,2019-01-24T02:06:21Z
6cb26774e27e03c7d5d6e4601bcee979a004fe91,"Enable hooks! (#14679)

* Turned enableHooks feature flag on everywhere
* Removed useHooks feature flag from tests (now that it's on by default)
* Remove useHooks feature flag entirely",Brian Vaughn,2019-01-23T21:28:09Z
73962c36645171a7a897bb0fb58e3442d0bb6bc9,"Revert ""Revert ""Double-render function components with Hooks in DEV in StrictMode"" (#14652)"" (#14654)

This reverts commit 3fbebb2a0b3b806f428c4154700af8e75e561895.",Dan Abramov,2019-01-23T19:12:18Z
99443922856f74b521cb3a90360a6a5a3a695694,Put DEV-only code into DEV blocks (#14673),Dan Abramov,2019-01-23T16:59:55Z
f881c32304c8a42083046c5a9ad71ad2687f26c9,Added Prettier (and formatted code),Brian Vaughn,2019-01-23T16:45:19Z
d02b4a27842228945c71b6043b5ba145f5c41b41,Throttle bridge traffic for Elements tree updates,Brian Vaughn,2019-01-23T16:27:40Z
f0befae657e2470f966235d2963179a9a1f948bd,Tweak context invariant message (#14671),Dan Abramov,2019-01-23T16:14:32Z
a129259ad6a61790fe1912a87cb45018d942f90c,"Disallow reading context during useMemo etc (#14653)

* Revert ""Revert ""Double-render function components with Hooks in DEV in StrictMode"" (#14652)""

This reverts commit 3fbebb2a0b3b806f428c4154700af8e75e561895.

* Revert ""Revert ""Disallow reading context during useMemo etc"" (#14651)""

This reverts commit 5fce6488ce1dc97e31515a47ff409d32ab722d65.

* Add extra passing test for an edge case

Mentioned by @acdlite to watch out for

* More convoluted test

* Don't rely on expirationTime

Addresses @acdlite's concerns

* Edge case: forbid readContext() during eager reducer",Dan Abramov,2019-01-23T15:51:57Z
c068d31cca8126bda00beaef398b4d79152ed085,Add unit tests for concurrent mode event dispatching (#14415),Sebastian Markbåge,2019-01-23T15:28:19Z
db695c4d3265d34ead9467b8297e8237bccf2ad6,Bump GCC (#14657),Dan Abramov,2019-01-23T14:28:03Z
38247cba3636b4dc5646db33c98dc69f21b50a2b,"--save is no longer needed (#14302)

`--save` is on by default as of npm 5. `npm install create-subscription` is equivalent to `npm install --save create-subscription` now",SamCortopassi,2019-01-23T14:13:05Z
3f0bcaf0db07f9428e09275153f5206102f5f211,Importing React for the first example. (#14346),Ramón Chancay Ortega,2019-01-23T14:10:03Z
ecd919a2f9b6e3d314fffc3d34b68b953a4e75e1,"RFC: warn when returning different hooks on subsequent renders (#14585)

* warn when returning different hooks on next render

like it says. adds a field to Hook to track effect 'type', and compares when cloning subsequently.

* lint

* review changes

- numbered enum for hook types
- s/hookType/_debugType
- better dce

* cleaner detection location

* redundant comments

* different EffectHook / LayoutEffectHook

* prettier

* top level currentHookType

* nulling currentHookType

need to verify dce still works

* small enhancements

* hook order checks for useContext/useImperative

* prettier

* stray whitespace

* move some bits around

* better errors

* pass tests

* lint, flow

* show a before - after diff

* an error stack in the warning

* lose currentHookMatches, fix a test

* tidy

* clear the mismatch only in dev

* pass flow

* side by side diff

* tweak warning

* pass flow

* dedupe warnings per fiber, nits

* better format

* nit

* fix bad merge, pass flow

* lint

* missing hooktype enum

* merge currentHookType/currentHookNameInDev, fix nits

* lint

* final nits",Sunil Pai,2019-01-22T22:40:07Z
7b9a8e98439fc31d0fe4b4e3b50b8afb4d4af3db,Added a super basic README,Brian Vaughn,2019-01-22T19:07:56Z
5e0dfdac54e509a97483af1f78af09451c03bfbb,Initial commit,Brian Vaughn,2019-01-22T19:04:37Z
3fbebb2a0b3b806f428c4154700af8e75e561895,"Revert ""Double-render function components with Hooks in DEV in StrictMode"" (#14652)

* Revert ""Revert ""Disallow reading context during useMemo etc"" (#14651)""

This reverts commit 5fce6488ce1dc97e31515a47ff409d32ab722d65.

* Revert ""Add test coverage for readContext() on the server (#14649)""

This reverts commit fe2ecd276e9b9e57a49ddf2d86ff01677b69b493.

* Revert ""Warn about incorrect use of useImperativeHandle() (#14647)""

This reverts commit 8f45a7fdc469c6d88ca5ca105095b03dd4e862e1.

* Revert ""Disallow reading context during useMemo etc (#14648)""

This reverts commit 1fcbd22431d97e404c1f684744dc543b6c22b076.

* Revert ""Warn about refs on lazy function components (#14645)""

This reverts commit 2a084f51a94df30e3bffd42bf3a04ce3da231512.

* Revert ""Fix typo (#14560)""

This reverts commit b5a3df6e8894ebf2334179e445b0803f6819aa9f.

* Revert ""fix typo (#14316)""

This reverts commit 9c146e675174a523f90f630c87f62f55812bacea.

* Revert ""Mention forwardRef() in <Fn ref={...} /> errors and warnings (#14644)""

This reverts commit baa6d40fc856c65e1d74ddf4fa038d7a65a787ed.

* Revert ""Double-render function components with Hooks in DEV in StrictMode (#14643)""

This reverts commit a1414e8949915c006bba411fa2949b304dd044ae.",Dan Abramov,2019-01-21T20:34:38Z
5fce6488ce1dc97e31515a47ff409d32ab722d65,"Revert ""Disallow reading context during useMemo etc"" (#14651)

* Revert ""Add test coverage for readContext() on the server (#14649)""

This reverts commit fe2ecd276e9b9e57a49ddf2d86ff01677b69b493.

* Revert ""Warn about incorrect use of useImperativeHandle() (#14647)""

This reverts commit 8f45a7fdc469c6d88ca5ca105095b03dd4e862e1.

* Revert ""Disallow reading context during useMemo etc (#14648)""

This reverts commit 1fcbd22431d97e404c1f684744dc543b6c22b076.",Dan Abramov,2019-01-21T20:28:36Z
fe2ecd276e9b9e57a49ddf2d86ff01677b69b493,"Add test coverage for readContext() on the server (#14649)

* Rename context variables

I just spent half an hour debugging why readContext(PurpleContext) doesn't work.

* Add test coverage for readContext() on the server",Dan Abramov,2019-01-21T19:55:26Z
8f45a7fdc469c6d88ca5ca105095b03dd4e862e1,Warn about incorrect use of useImperativeHandle() (#14647),Dan Abramov,2019-01-21T19:44:18Z
1fcbd22431d97e404c1f684744dc543b6c22b076,"Disallow reading context during useMemo etc (#14648)

* Disallow reading context during useMemo etc

* Continue allowing readContext() in classes and context consumers

The previous commit check was too broad and incorrectly restricted classes from calling readContext(). This check is more precise and only targets components that are Hook-capable. It exploits the fact that `renderExpirationTime` is never `NoWork` after `renderWithHooks` -- something we already rely on.",Dan Abramov,2019-01-21T19:06:09Z
2a084f51a94df30e3bffd42bf3a04ce3da231512,Warn about refs on lazy function components (#14645),Dan Abramov,2019-01-21T16:57:55Z
b5a3df6e8894ebf2334179e445b0803f6819aa9f,"Fix typo (#14560)

fix typo",Linchengyi,2019-01-21T16:18:29Z
9c146e675174a523f90f630c87f62f55812bacea,fix typo (#14316),liunian,2019-01-21T16:18:02Z
baa6d40fc856c65e1d74ddf4fa038d7a65a787ed,Mention forwardRef() in <Fn ref={...} /> errors and warnings (#14644),Dan Abramov,2019-01-21T16:01:48Z
a1414e8949915c006bba411fa2949b304dd044ae,"Double-render function components with Hooks in DEV in StrictMode (#14643)

* Double-render functions in strict mode

* Double-invoke first function component render too

* Mark TestRendererAsync test as internal and revert changes to it

TestRenderer is built with strict mode doublerender off.

We could change that but I'm not sure we want to. So I'll just flip the flag off for this test.

* Only double-invoke components using Hooks

* Revert unintentional change",Dan Abramov,2019-01-21T15:35:47Z
10a7a5b5ced683125d68584a78084faac3197846,"Fix synchronous thenable rejection (#14633)

* Fix handling of sync rejection

Reverts #14632 and adds a regression test.

* Handle rejection synchronously too

Fewer footguns and seems like nicer behavior anyway.",Dan Abramov,2019-01-19T00:42:43Z
a2fa6eb98d11fd1b41a144fd600a14a722c7546e,Move lazy._result assignment (#14632),Dan Abramov,2019-01-18T21:57:26Z
9120f6c2d82049b0c927e429f9fb8b1e29c15f59,"Support sync thenables for lazy() (#14626)

* Support sync thenables for lazy()

* Don't commit twice",Dan Abramov,2019-01-18T21:16:02Z
b66e6e41e606745b30238689fa1a98e874b29e6e,"Add directory details to the package.json of all packages (#14628)

Specifying the directory as part of the `repository` field in a `package.json`
allows third party tools to provide better support when working with monorepos.
For example, it allows them to correctly construct a commit diff for a specific
package.

This format was accepted by npm in https://github.com/npm/rfcs/pull/19.",Grey Baker,2019-01-18T20:21:12Z
8c1614a2fdbb841f65ebf403d7ece3a518c6a984,Tidy up NPM checkout process (#14631),Brian Vaughn,2019-01-18T19:40:50Z
177fb7635391fb9c56ba3b8e38fd45131b73ebe7,Warn when second callback is passed to setState/dispatch in Hooks (#14625),Dan Abramov,2019-01-18T18:48:58Z
d17d0b99c15893206a9035314fd18141c6117115,Use public context.report interface in eslint rules (#14623),Sebastian Silbermann,2019-01-18T09:26:11Z
4f332885a2541e68c573d19ca94c875fdf988a38,"Fix shallow renderer set instance state after gDSFP before calling sCU (#14613)

* Fix shallow renderer set instance state after gDSFP before calling sCU

* Update ReactShallowRenderer.js

* Unwind abstraction

* Fewer names","Yi-Shan, Chen",2019-01-18T02:31:14Z
e1cd83e49d24bd4761fb18bb0789715a2d5090f7,"Throw an error when using hooks inside useMemo/useState/useReducer, or .memo's comparator (#14608)

* hooks inside useMemo/.memo - failing tests

* throw an error when using hooks inside useMemo

* throw when using hooks inside .memo's compare fn

* faster/better/stronger

* same logic for useReducer, tests for the server, etc

* Update ReactDOMServerIntegrationHooks-test.internal.js

ack lint

* nits

* whitespace

* whitespace

* stray semi

* Tweak comment

* stray unmatched fiber reset

* nit",Sunil Pai,2019-01-18T02:15:21Z
be457ca685b113c08e43f30df226eedbdef5d8a2,"Small tweaks to SSR to match #14594 (#14618)

* Small tweaks to SSR to match #14594

* Remove unnecessary comparison",Dan Abramov,2019-01-18T00:52:13Z
17d70df91939b3459813660d90871ae41096d349,"Warn when mixing createRoot() and old APIs (#14615)

* Warn when mixing createRoot() and old APIs

* Move container checks to entry points

This way further warning check doesn't crash on bad inputs.

* Fix Flow

* Rename flag to be clearer

* managed by -> passed to

* Revert accidental change

* Fix Fire shim to match",Dan Abramov,2019-01-18T00:20:21Z
4846809370737f13c0465ac7b83764b408c6e732,Prune NPM metadata fields from packages before re-publishing (#14617),Brian Vaughn,2019-01-17T22:34:34Z
4feab7fc92125c15f8c022058f1ac78deb18d650,"Add hooks support to ReactShallowRenderer (#14567)

* Add hook support to ReactShallowRenderer",Dominic Gannaway,2019-01-17T17:42:27Z
1454a8be03794f5e0b23a7e7696cbbbdcf8b0f5d,"Don't bother comparing constructor when deps are not provided (#14594)

* Don't bother comparing constructor when deps are not provided

When no dependencies are passed to an effect hook, what we used to do is
compare the effect constructor. If there was no change, then we would
skip firing the effect. In practice, this is a useless optimization
because the constructor will always be different when you pass an inline
closure. And if you don't pass an inline closure, then you can't access
any props or state.

There are some edge cases where an effect that doesn't close over props
or state could be useful, like reference counting the number of mounted
components. But those are rare and can be addressed by passing an empty
array of dependencies.

By removing this ""optimization,"" we can avoid retaining the constructor
in the majority of cases where it's a closure that changes on
every render.

I made corresponding changes to the other hooks that accept
dependencies, too (useMemo, useCallback, and useImperativeHandle).

* Improve hook dependencies warning

It now includes the name of the hook in the message.

* Nits",Andrew Clark,2019-01-17T01:53:48Z
71b64d521180f443afa7f98283b1807d69b3acbc,"Warn if number of hooks increases (#14591)

Eventually, we'll likely support adding hooks to the end (to enable
progressive enhancement), but let's warn until we figure out how it
should work.",Andrew Clark,2019-01-17T01:25:32Z
790c8ef04195f0fc11ca3fb08e63f870f81483ac,"Allow useReducer to bail out of rendering by returning previous state (#14569)

* Allow useReducer to bail out of rendering by returning previous state

This is conceptually similar to `shouldComponentUpdate`, except because
there could be multiple useReducer (or useState) Hooks in a single
component, we can only bail out if none of the Hooks produce a new
value. We also can't bail out if any the other types of inputs — state
and context — have changed.

These optimizations rely on the constraint that components are pure
functions of props, state, and context.

In some cases, we can bail out without entering the render phase by
eagerly computing the next state and comparing it to the current one.
This only works if we are absolutely certain that the queue is empty at
the time of the update. In concurrent mode, this is difficult to
determine, because there could be multiple copies of the queue and we
don't know which one is current without doing lots of extra work, which
would defeat the purpose of the optimization. However, in our
implementation, there are at most only two copies of the queue, and if
*both* are empty then we know that the current queue must be.

* Add test for context consumers inside hidden subtree

Should not bail out during subsequent update. (This isn't directly
related to this PR because we should have had this test, anyway.)

* Refactor to use module-level variable instead of effect bit

* Add test combining state bailout and props bailout (memo)",Andrew Clark,2019-01-17T01:23:35Z
8a120095bfba170dd0b5fa5dfc5fd89ed471ccbc,"Add ESLint rule playground (#14609)

* Add ESLint rule playground

* Update index.js

* Update index.js",Dan Abramov,2019-01-16T23:52:33Z
7ab8a8e979ff47296d381f71605187f358f96697,"Added Flow type to keep hooks dispatchers in-sync (#14599)

* Added Flow type to keep hooks dispatchers in-sync",Brian Vaughn,2019-01-16T20:49:31Z
4392e3821d4e3845a2ffc6104c32c13b3f521edf,useDebugValue should throw if used in a class component (#14601),Brian Vaughn,2019-01-15T21:49:39Z
153a0b5980ff8c150cb5ec2ff1c9c73959d6d810,Add noop useDebugValue hook to partial/server renderer (#14597),Brian Vaughn,2019-01-15T19:00:03Z
0ca628b216edc1ea3f06917c1717b0ae939e48db,Rename release script fixture test scheduler->tracing (#14590),Brian Vaughn,2019-01-15T01:52:03Z
7ad9806d114bea575300394e84a1bb4ef2b4a329,Tweak to avoid property read (#14593),Brandon Dail,2019-01-15T01:39:27Z
0fc15475139206f1f999b5c16bbe6f90142e936a,"Avoid new Set([iterable]) for thenables (#14592)

Fixes https://github.com/facebook/react/issues/14583

Using `new Set([iterable])` does not work with IE11's non-compliant Set
implementation. By avoiding this pattern we don't need to require a Set
polyfill for IE11",Brandon Dail,2019-01-15T01:00:15Z
edb1f595649b013a59a18f43c03a57035ddea19e,"Support configurable labels for custom hooks (#14559)

* react-debug-tools accepts currentDispatcher ref as param

* ReactDebugHooks injected dispatcher ref is optional

* Support custom values for custom hooks

* PR feedback:

1. Renamed useDebugValueLabel hook to useDebugValue
2. Wrapped useDebugValue internals in if-DEV so that it could be removed from production builds.

* PR feedback:

1. Fixed some minor typos
2. Added inline comment explaining the purpose of  rollupDebugValues()
3. Refactored rollupDebugValues() to use a for loop rather than filter()
4. Improve check for useDebugValue hook to lessen the chance of a false positive
5. Added optional formatter function param to useDebugValue

* Nitpick renamed a method",Brian Vaughn,2019-01-14T22:53:22Z
3e15b1c69014ad6767eac645228a052df861edc0,make a fork for ReactCurrentDispatcher (#14588),Sunil Pai,2019-01-14T16:35:56Z
0005d1e3f54b79fe4707fbccc44b89e0fb4ce565,Fix typo (#14576),Carl Mungazi,2019-01-12T05:46:05Z
f290138d329aa7aa635d88868705b23372e9f004,"react-debug-tools accepts currentDispatcher ref as param (#14556)

* react-debug-tools accepts currentDispatcher ref as param

* ReactDebugHooks injected dispatcher ref is optional",Brian Vaughn,2019-01-10T20:56:52Z
b4ad8e947150a1a0b486a388e2d4762d3eee51ee,rename useImperativeMethods -> useImperativeHandle (#14565),Sunil Pai,2019-01-10T13:37:50Z
ab03e3d6518ae3c68feca8d5debf2ef69a91a38c,Inject ReactCurrentDispatcher ref to DevTools (#14550),Brian Vaughn,2019-01-09T05:25:26Z
19ef0ec116a2c5fd1a8dc86d38c2185d62abc6a1,Separate current owner and dispatcher (#14548),Brian Vaughn,2019-01-08T22:39:52Z
a9b035b0c2b8235405835beca0c4db2cc37f18d0,"Separate Object.is polyfill (#14334)

* Separate_Object_Is_Polyfill",Maksim Markelov,2019-01-08T14:21:12Z
547e059f0bc88e76cd738b01b76e777ff1b222a7,"Simplify wording of key warning (#14503)

I don't think ""array or iterator"" is adding anything, and it may well be confusing, especially since this is one of the first and most common warnings that devs see.",Sophie Alpert,2019-01-07T16:30:23Z
3494ee57e69f1f6cdf5e128dfbaa39db4dfd12db,"Update ReactUpdateQueue.js (#14521)

Fix comment typo",Carl Mungazi,2019-01-02T20:53:05Z
fef40c061ec7db03b6b0faa7608788d625cf78db,"Allow node 11 as devEngine (#14450)

Using node 11 throws incompatibility error. This fixes it. Only test I performed was to run `yarn build -- --type=RN_OSS` everything seemed ok.",Ilja Daderko,2018-12-25T17:05:31Z
659c13963ea2b8a20e0b19d817ca40a3ebb19024,"Update ReactFiberScheduler.js (#14477)

Fixed typo",Carl Mungazi,2018-12-20T16:51:47Z
84b86471ea12bd1f5994d878a318dcdead1137e9,Update CHANGELOG for 16.7,Andrew Clark,2018-12-20T01:29:25Z
c695b2384fecfaeaf41e951b64fae2874f28ec12,React v16.7.0,Andrew Clark,2018-12-20T01:23:14Z
1c5aa2f23a80be137aeecc808498aedc304725bb,Move SchedulerFeatureFlags fork to src directory to fix lint,Andrew Clark,2018-12-18T19:09:44Z
653bc582f94e955b175d42836479ee8b9eeeeeaf,Create separate SchedulerFeatureFlags instead of using ReactFeatureFlags (#14455),Andrew Clark,2018-12-18T01:55:34Z
8bfef0da5578f7518afec4d9277100f1db45132c,Make scheduler debugging feature flag static,Andrew Clark,2018-12-18T00:50:38Z
4a1072194fcef2da1aae2510886c274736017fbd,"Memoize promise listeners to prevent exponential growth (#14429)

* Memoize promise listeners to prevent exponential growth

Previously, React would attach a new listener every time a promise is
thrown, regardless of whether the same listener was already attached
during a previous render. Because React attempts to render every time
a promise resolves, the number of listeners grows quickly.

This was especially bad in synchronous mode because the renders that
happen when the promise pings are not batched together. So if a single
promise has multiple listeners for the same root, there will be multiple
renders, which in turn results in more listeners being added to the
remaining unresolved promises. This results in exponential growth in
the number of listeners with respect to the number of IO-bound
components in a single render.

Fixes #14220

* Memoize on the root and Suspense fiber instead of on the promise

* Add TODO to fix persistent mode tests",Andrew Clark,2018-12-14T19:03:23Z
535804f5c822e12bd6d89ad0081d45355e01cea3,Removed Fabric-specific feature flag files and updated Rollup to use the (non-Fabric) React Native flag files. (#14437),Brian Vaughn,2018-12-14T15:54:46Z
2743fb7b23a5af42059a9b07c5f6048f941709d9,"Enable hooks by default for FB React Native renderer (#14435)

* Enable hooks by default for FB React Native renderer
* Updated RN+FB feature flags to make some of the dynamic ones static",Brian Vaughn,2018-12-13T21:20:23Z
7325ebe4d6e5b7ccf5a78128b825c8a6e383caa6,"Inject overrideProps() fn to DevTools (#14427)

* Inject overrideProps() fn to DevTools

This function will enable editing props for function components, host nodes, and special types like memo and forwardRef.",Brian Vaughn,2018-12-13T17:40:59Z
a22880e5e59d5cb17fffe04af093ea54e356538d,"Add support for Suspense & lazy() to the react-is package (#14423)

* Add support for lazy & Suspense to react-is",Pleun Vanderbauwhede,2018-12-12T18:56:52Z
947bddd5cf94b185166d51f8d36873492b5bd57c,Remove redundant argument of getPlugins function (#14419),Heaven,2018-12-12T18:07:07Z
ce43a8cd07c355647922480977b46713bd51883e,Updated version incrementing suggestion in release script based on team discussion (#14389),Brian Vaughn,2018-12-07T17:08:39Z
f64906fba1ccec5273e87f7ed3cdbf5a643ca44a,"Dangerfile exits early if build failed (#14400)

* Dangerfile exits early (without leaving an error comment) if build failed",Brian Vaughn,2018-12-07T17:06:47Z
8df4d59be532e56b6513815184094f57f566df09,"Implement pauseExecution, continueExecution, dumpQueue for Scheduler (#14053)

* Implement pauseExecution, continueExecution, dumpQueue

* Expose firstCallbackNode. Fix tests. Revert results.json

* Put scheduler pausing behind a feature flag",Kevin Chavez,2018-12-06T21:57:23Z
5bb4ad7376b315b61865ea5424e9f76ba6a5c5a3,Added ErrorBoundary tests for useEffect and useLayoutEffect (#14401),Brian Vaughn,2018-12-06T21:55:38Z
98eb5ae5319e1d26b5b89a33ead80716db725f83,TestRenderer toJSON should not expose the Array wrapper Suspense uses for hidden trees (#14392),Brian Vaughn,2018-12-05T19:09:51Z
39489e76745705bc66f1daa8087b0861029152a8,"Enable hooks in fabric (#14301)

because hooks are awesome.",Spencer Ahrens,2018-12-05T03:34:52Z
1dc108e5829bb8d84ffd39e2e932d798edd7ca8b,"Tweaked wording for v8 ""performance cliff"" issue",Brian Vaughn,2018-12-04T15:49:33Z
d9871729c8fd0c072d5416317557219eb48da765,fix spelling error: differen -> different (#14378),AGCB,2018-12-04T07:29:29Z
6bf5e859860938b8cb7153ee928c01ad45656969,Fix scheduler setTimeout() re-entrancy check (#14384),Brian Vaughn,2018-12-03T18:54:01Z
7a48c900b7d8c97580d62adfa3625a7b7567c998,Prevent a v8 deopt when profiling (#14383),Brian Vaughn,2018-12-03T17:22:46Z
e382b0ba954688f1bc37e3fc776ceece2c04afd3,Don't prompt to tag or create GitHub release for canary releases (#14376),Brian Vaughn,2018-12-03T17:16:17Z
8482cbe22d1a421b73db602e1f470c632b09f693,"Automated fixture tests (#14370)

* Renamed snapshot test from test.js to snapshot-test.js
* Automate fixtures tests",Brian Vaughn,2018-12-02T19:25:45Z
f00c2755b99d7fa4a4f50944cd0b10ae435704b6,Removed unnecessary externals from Jest bundles (#14372),Brian Vaughn,2018-12-02T01:26:12Z
52bea95cfce4a75bc7c1a09455abaeef50fa0700,"Fixed scheduler setTimeout fallback (#14358)

* Fixed scheduler setTimeout fallback
* Moved unit-test-specific setTimeout code into a new NPM package, jest-mock-scheduler.",Brian Vaughn,2018-12-01T21:03:19Z
1d25aa5787d4e19704c049c3cfa985d3b5190e0d,"[Fizz] New Server Rendering Infra (#14144)

* [Fizz] Add Flow/Jest/Rollup build infra

Add a new package for react-stream which allows for custom server renderer
outputs. I picked the name because it's a reasonable name but also
because the npm name is currently owned by a friend of the project.

The react-dom build has its own inlined server renderer under the
name `react-dom/fizz`.

There is also a noop renderer to be used for testing. At some point
we might add a public one to test-renderer but for now I don't want to have
to think about public API design for the tests.

* Add FormatConfig too

We need to separate the format (DOM, React Native, etc) from the host
running the server (Node, Browser, etc).

* Basic wiring between Node, Noop and DOM configs

The Node DOM API is pipeToNodeStream which accepts a writable stream.

* Merge host and format config in dynamic react-stream entry point

Simpler API this way but also avoids having to fork the wrapper config.

Fixes noop builds.

* Add setImmediate/Buffer globals to lint config

Used by the server renderer

* Properly include fizz.node.js

Also use forwarding to it from fizz.js in builds so that tests covers
this.

* Make react-stream private since we're not ready to publish

or even name it yet

* Rename Renderer -> Streamer

* Prefix react-dom/fizz with react-dom/unstable-fizz

* Add Fizz Browser host config

This lets Fizz render to WHATWG streams. E.g. for rendering in a
Service Worker.

I added react-dom/unstable-fizz.browser as the entry point for this.

Since we now have two configurations of DOM. I had to add another
inlinedHostConfigs configuration called `dom-browser`. The reconciler
treats this configuration the same as `dom`. For stream it checks
against the ReactFizzHostConfigBrowser instead of the Node one.

* Add Fizz Browser Fixture

This is for testing server rendering - on the client.

* Lower version number to detach it from react-reconciler version",Sebastian Markbåge,2018-11-30T19:38:22Z
f1bf281605444b342f4c37718092accbe3f98702,"Fix bug in cloneHook (#14364)

* Fixes #14360 and adds a test for mixed priority dispatches.

It was broken because `cloneHook` assigned `memoizedState` instead of
`baseState` from the original hook to `baseState` of the clone.

* tweak comments",Imre Osswald,2018-11-30T15:02:19Z
16e120438c5332d7590bc74b2cbd882f19a0e3b1,[Fire] Add initial build infrastructure (#14359),Dan Abramov,2018-11-30T11:52:34Z
d14ba87b1bfed76900d6d25722f069003561e2e3,"Validate propTypes for lazy() and memo() and warn about invalid patterns (#14298)

* Add a test for current defaultProps behavior in lazy

* Add a warning against definining defaultProps on the outer wrapper

* Warn about setting propTypes too

* Remove redundant async

* Validate propTypes for resolved lazy types

Note this only works for elements created after resolving. So it's not ideal. But it provides the best stack trace for those cases.

* Add a test for lazy(forwardRef()) propTypes check

* Validate memo() inner propTypes and warn about shadowing

* Add test verifying nested lazy is unsupported

* Change error wording to remove ""Promise elements""

* Improve error message for nested lazy() and add tests

* Validate propTypes for memo in the reconciler when necessary

* Add comments for why we're calling checkPropTypes

* Fix Flow and lint

* Undo unintentional formatting changes

* Remove unnecessary case (it is handled by function code path)

* Add test coverage for memo(fn.defaultProps).propTypes

* Test should be agnostic of where resolving happens

That's an implementation detail and we might want to change it later. Let's keep it easy by making tests just check that validation happened, not at which stage.

* Unify traversal logic in createElement

This moves all type traversal into createElement. When lazy resolves, we call createElement once to re-check.

* Match prod behavior for propTypes/defaultProps shims closer

* Revert ""Unify traversal logic in createElement""

This reverts commit 2e77ca47fe80ebe6595333542a8c5c138c68643f.

See https://github.com/facebook/react/pull/14298#issuecomment-442687775

* Undo unnecessary change to getComponentName",Dan Abramov,2018-11-29T20:06:28Z
88ada98198b22d2b8cd056cfba5ffb113c6a50d3,"Release script auto-determine the latest Canary build if none specified (#14339)

* Release script auto-determine the latest Canary build if none specified",Brian Vaughn,2018-11-28T21:56:45Z
4f964f09c12e531ac44d48127782e811ad8d75a7,Adding isMemo check to react-is package (#14313),Jinto Jose,2018-11-28T20:51:21Z
c2a2d8a539bf02e40c43d36adc2826e228f30955,"Remove useMutationEffect (#14336)

useMutationEffect has problems (namely, refs aren't attached at the time that it runs) and we're not positive it's necessary. useLayoutEffect runs at the same time as componentDidMount/Update so it's sufficient for all existing use cases; it can be used in any case that useEffect happens too late. Until we figure out what we want to do, let's delete it.",Sophie Alpert,2018-11-27T21:05:13Z
48f1e5b3ced33aa2d5ba42afa38af9cf7e51a0ed,Add a null type test for memo (#14325),chun shang,2018-11-27T13:25:24Z
f93f3402f7739f0f04b7b4e89bf2683230cc6a87,"Make useEffect(async) warning more verbose (#14327)

* Make useEffect(async) warning more verbose

* Nit",Dan Abramov,2018-11-27T13:05:10Z
ee3ef3a0792c0ad777270739fe5ff126e3d57992,"Fix regression: Errors not emitted in streams (#14314)

Regression introduced in #14182 resulted in errors no longer being emitted on streams, breaking many consumers.

Co-authored-by: Elliot Jalgard <elliot.j@live.se>",Pelle Wessman,2018-11-27T13:00:46Z
33f6f5e53247c51fa8cfa5f8ef9126589a131caa,Remove usage of `fbjs/lib/invariant` in ReactNativeViewConfigRegistry. (#14330),Christoph Nakazawa,2018-11-26T21:48:08Z
409066a0a14434df387d25971f09d33b9a5aa914,"Add progress bars to longer running async release tasks (#14322)

* Add progress bars to longer running async release tasks
* Updated to 0.2 progress estimator version",Brian Vaughn,2018-11-26T17:28:37Z
a7f270c550f072c5eb5064b231e6542329180622,"update fixtures/packaging/README.md (#14320)

I had some confusion yesterday with this, figured this reads a little better.  Ran these steps locally to verify they work.",Sunil Pai,2018-11-24T21:40:56Z
ed4c4a51cd10ea6303e8a2bbc8a6584920897f68,"Add basic release script snapshot test (#14280)

Added regression test for release scripts",Brian Vaughn,2018-11-23T20:53:39Z
686f1060adeabf00e6c86701e42e9d537d1e3773,"Publish a local release (canary or stable) to NPM (#14260)

New release scripts.

Learn more at https://github.com/facebook/react/blob/master/scripts/release/README.md",Brian Vaughn,2018-11-23T20:37:18Z
7475120ce7bdeb7a5666d64c636efb1f4a951b9a,Prevent deopts from modifying exports object in stable builds (#14309),Dan Abramov,2018-11-23T14:10:57Z
0c7189d92370717ce8c48cf4846b3a101056e772,"Fix resolution of outer props with React.memo() (#14312)

* Add failing test for defaultProps between lazy() and memo()

* Add another regression test for defaultProps resolution order

* Resolve outer props for MemoComponent",Dan Abramov,2018-11-22T19:40:42Z
14be29b2b97f2be6c82955acc0455fbac22ec403,Add more test coverage for nested memo() (#14311),Dan Abramov,2018-11-22T19:30:56Z
dc0dd4bbff3f681216b13ae2842f1601bfae3cd8,Use |0 to coerce to number (#14297),Dan Abramov,2018-11-22T15:44:00Z
dd8205cef9a3176ef29dd5904f1352561f7ef43a,List ignored types instead of included types in the stack (#14308),Dan Abramov,2018-11-22T15:41:29Z
1da310809eb398d83fdc285c2b435e315a1c9019,"fix spelling error: Here's -> Here (#14307)

""Here's"" should be changed to ""Here"" in the given sentence.",Isaiah Nields,2018-11-22T14:47:20Z
a9fdf8a32650d6238a6d9b055f3ac68e88090cec,"Warn about reassigning this.props (#14277)

* Warn about reassigning this.props

* Improve the warning

* Don't show the spammy bug warning if we suspect it's a component bug",Dan Abramov,2018-11-20T16:40:01Z
327cf0ee3380d2a135802b268e95ab9253123927,Fix support for mixing react-dom/server@16.6 and react@<16.6 (#14291),Dan Abramov,2018-11-20T13:09:44Z
c954efa70f44a44be9c33c60c57f87bea6f40a10,"Remove `import * as` pattern from the codebase (#14282)

Whenever we do this, Rollup needs to materialize this as an object.
This causes it to also add the Babel compatibility property which is
unnecessary bloat. However, since when we use these, we leak the object
this often also deopts any compiler optimizations.

If we really need an object we should export default an object.

Currently there is an exception for DOMTopLevelEventTypes since
listing out the imports is a PITA and it doesn't escape so it should
get properly inlined. We should probably move to a different pattern
to avoid this for consistency though.",Sebastian Markbåge,2018-11-19T23:32:54Z
ccb14e270c3376ed47ca43c0c39722ba6bf6eced,Fix SSR useCallback in render phase (#14279),Dan Abramov,2018-11-19T20:47:38Z
0e9cb3f5d0bfd4fe08ac8fcfba71302559614282,"Clear fields on unmount of fiber to avoid memory leak (#14276)

* Clear fields on unmount of fiber to avoid memory leak",Dominic Gannaway,2018-11-19T16:09:11Z
592676503c3a33596b295b70635d8317c05f81ad,"Revert ""Clear memoizedState on unmount of fiber to avoid memory leak (#14218)"" (#14275)

This reverts commit 9b2fb24f99ebed9af2c092de7a5f31c38f8af97a.",Dominic Gannaway,2018-11-19T15:24:46Z
9b2fb24f99ebed9af2c092de7a5f31c38f8af97a,"Clear memoizedState on unmount of fiber to avoid memory leak (#14218)

* Clear properties on unmount of fiber to ensure objects are not retained",Dominic Gannaway,2018-11-19T10:58:14Z
a22fabc2a110a40ead576ada5b3bf66840e852ba,"Reduce scheduler serialization overhead (#14249)

In the process of switching to MessageChannel, it seems the postMessage call was modified to pass `""*""` (originally the target origin value from `window.postMessage`). This actually ends up triggering serialization, whereas passing `undefined` bypasses.

To save some investigation, passing a Number like `0` still incurs serialization overhead - `undefined` has special behavior.",Jason Miller,2018-11-16T18:39:27Z
21d5f7d32d5becf5c8e986ff0202059be643dc15,"Wrap shorthand CSS property collision warning in feature flag (#14245)

Disables the recently introduced (#14181) warning for shorthand
CSS property collisions by wrapping in a feature flag. Let's hold off
shipping this until at least the next minor.",Andrew Clark,2018-11-15T21:36:52Z
5f06576f51ece88d846d01abd2ddd575827c6127,"Add a checkbox to fixtures UI to choose React production build (#13786)

* Add a checkbox to fixtures UI to choose React production build

* Assign header__label class name to label directly, instead of using a separate span

* center the production checkbox vertically",Jan Pöschko,2018-11-14T23:34:46Z
8feeed10d8f79a0c01ca293890880cbe72b3788d,"[scheduler] Remove window.postMessage fallback

Every browser we can about supports MessageChannel. The ones we don't
care about will fallback to the setTimeout implementation.",Andrew Clark,2018-11-14T22:33:35Z
5bce0ef10ab28c87e57dd96dbe1d8470f8d68569,"[scheduler] Post to MessageChannel instead of window (#14234)

Scheduler needs to schedule a task that fires after paint. To do this,
it currently posts a message event to `window`. This happens on every
frame until the queue is empty. An unfortunate consequence is that every
other message event handler also gets called on every frame; even if
they exit immediately, this adds up to significant per-frame overhead.

Instead, we'll create a MessageChannel and post to that, with a
fallback to the old behavior if MessageChannel does not exist.",Andrew Clark,2018-11-14T20:02:00Z
d7fd679a31b4d5d1456bb56712d5a1a89ac1bb47,"Add 16.6.3 Changelog (#14223)

* Add 16.6.3 Changelog

* Remove unreleased fix

* Drop another unreleased fix",Dan Abramov,2018-11-13T20:32:33Z
3cd89daed9a60c91bfdb802dbefb779f6da4b1b7,Update error codes,Andrew Clark,2018-11-13T01:59:06Z
85f5a81eb72d7d736423ca31bfd2323d2ceea460,"Save CI-built node_modules as build artifacts (#14205)

* Store node_modules generated by CI script as an artifact
* NPM pack artifacts before archiving",Brian Vaughn,2018-11-13T19:00:30Z
f55795c8ee37ba882fc69192da9478a8a1f8ce1a,Add regression test for #14188 (#14197),Dan Abramov,2018-11-13T11:23:01Z
d204747bef7ab5ed14e8356ddfc1eefc2b4d70e4,"Update Readme (#14176)

Replace core with react, dom-client with react-dom",Maksim Markelov,2018-11-12T16:25:32Z
b98adb648a27640db8467064e537b238b8c306ce,"Simplify CSS shorthand property warning (#14183)

I figured out a simpler way to do #14181. It does allocate some but I think that's OK. Time complexity might even be better since we avoid the nested loops the old one had.",Sophie Alpert,2018-11-10T00:56:51Z
f8bfd586806b8f7ac5fb5faa28f8c88411d333f0,fix typo,Sebastian Markbage,2018-11-10T00:16:25Z
961eb65b4ba5de6bbfb6b8a075a924c284541177,"Use unique thread ID for each partial render to access Context (#14182)

* BUG: ReactPartialRenderer / New Context polutes mutable global state

The new context API stores the provided values on the shared context instance. When used in a synchronous context, this is not an issue. However when used in an concurrent context this can cause a ""push provider"" from one react render to have an effect on an unrelated concurrent react render.

I've encountered this bug in production when using renderToNodeStream, which asks ReactPartialRenderer for bytes up to a high water mark before yielding. If two Node Streams are created and read from in parallel, the state of one can polute the other.

I wrote a failing test to illustrate the conditions under which this happens.

I'm also concerned that the experimental concurrent/async React rendering on the client could suffer from the same issue.

* Use unique thread ID for each partial render to access Context

This first adds an allocator that keeps track of a unique ThreadID index
for each currently executing partial renderer. IDs are not just growing
but are reused as streams are destroyed.

This ensures that IDs are kept nice and compact.

This lets us use an ""array"" for each Context object to store the current
values. The look up for these are fast because they're just looking up
an offset in a tightly packed ""array"".

I don't use an actual Array object to store the values. Instead, I rely
on that VMs (notably V8) treat storage of numeric index property access
as a separate ""elements"" allocation.

This lets us avoid an extra indirection.

However, we must ensure that these arrays are not holey to preserve this
feature.

To do that I store the _threadCount on each context (effectively it takes
the place of the .length property on an array).

This lets us first validate that the context has enough slots before we
access the slot. If not, we fill in the slots with the default value.",Sebastian Markbåge,2018-11-09T23:38:20Z
1a6ab1e9b5d3ab2c7083d89c00836b4cb9eff306,"SimpleMemoComponent should warn if a ref is given (#14178)

Fixes #13964.",Sophie Alpert,2018-11-09T23:29:41Z
8ae867e6b59dc281b35bfb991737892f4cc88037,"Warn about conflicting style values during updates (#14181)

This is one of the most insidious quirks of React DOM that people run into. Now we warn when we think an update is dangerous.

We still allow rendering `{background, backgroundSize}` with unchanging values, for example. But once you remove either one or change `background` (without changing `backgroundSize` at the same time), that's bad news. So we warn.

Fixes #6348.",Sophie Alpert,2018-11-09T23:21:47Z
d5e1bf07d086e4fc1998653331adecddcd0f5274,Renamed outdated schedule/tracing referecnes (#14177),Brian Vaughn,2018-11-09T20:37:03Z
2dd4ba11e08c7dcd6c4b347db069ed326b5485f6,ESlint -> ESLint,Andrew Clark,2018-11-09T18:22:18Z
9cc631a539a33fdadcba2902b87975acbcd58402,"Don't run danger on bad build (#14143)

sizebot comments can be confusing when not based on reality.

If results.json doesn't exist, danger will fail. This is what we want.",Sophie Alpert,2018-11-09T18:21:39Z
1034e26fe5e42ba07492a736da7bdf5bf2108bc6,Fix typos (#14124),Heaven,2018-11-09T18:17:49Z
5618da49d8cb9cdb6c623446bbd2c504ee6c0422,Fix comment typo (#14156),Bartosz Gordon,2018-11-09T18:17:19Z
9fb91994557ab9b47e23307aa8914d0504905f56,Add global to ESLint plugin bundle config,Andrew Clark,2018-11-09T02:49:03Z
c174f8592436db5b0dee416a53d3af231d3e443c,Add fb build of ESLint plugin (#14165),Andrew Clark,2018-11-09T02:44:08Z
02e4848e3aeb072214690d655c9cfe717c290491,Improved suspense support in ReactDOMServer (#14161),Alex Taylor,2018-11-09T02:15:06Z
4b163fee1c494c35ac8b4ba49cd41e9c573b7a7b,"Remove errant return assignment (#14164)

Oopsie!

This could have been avoided if our types were modeled correctly with
Flow (using a disjoint union).

Fuzz tester didn't catch it because it does not generate cases where
a Suspense component mounts with no children. I'll update it.",Andrew Clark,2018-11-09T02:13:42Z
e58ecda9a2381735f2c326ee99a1ffa6486321ab,"Suspense fuzz tester (#14147)

* Don't warn if an unmounted component is pinged

* Suspense fuzz tester

The fuzzer works by generating a random tree of React elements. The tree
two types of custom components:

- A Text component suspends rendering on initial mount for a fuzzy
  duration of time. It may update a fuzzy number of times; each update
  supsends for a fuzzy duration of time.
- A Container component wraps some children. It may remount its children
  a fuzzy number of times, by updating its key.

The tree may also include nested Suspense components.

After this tree is generated, the tester sets a flag to temporarily
disable Text components from suspending. The tree is rendered
synchronously. The output of this render is the expected output.

Then the tester flips the flag back to enable suspending. It renders the
tree again. This time the Text components will suspend for the amount of
time configured by the props. The tester waits until everything has
resolved. The resolved output is then compared to the expected output
generated in the previous step.

Finally, we render once more, but this time in concurrent mode. Once
again, the resolved output is compared to the expected output.

I tested by commenting out various parts of the Suspense implementation
to see if broke in the expected way. I also confirmed that it would have
caught #14133, a recent bug related to deletions.

* When a generated test case fails, log its input

* Moar fuzziness

Adds more fuzziness to the generated tests. Specifcally, introduces
nested Suspense cases, where the fallback of a Suspense component
also suspends.

This flushed out a bug (yay!) whose test case I've hard coded.

* Use seeded random number generator

So if there's a failure, we can bisect.",Andrew Clark,2018-11-09T01:26:43Z
7fd1661f80868c6006388647bd0104f5f4f3f320," Don't warn if an unmounted component is pinged (#14158)

* Add failing test for ping on unmounted component

We had a test for this, but not outside of concurrent mode :)

* Don't warn if an unmounted component is pinged",Andrew Clark,2018-11-09T01:24:32Z
f9e9913f0eaee7c2fabb801dccec97fd61873c5f,"[Synchronous Suspense] Don't delete children of suspended component (#14157)

Vestigial behavior that should have been removed in #13823.

Found using the Suspense fuzz tester in #14147.",Andrew Clark,2018-11-08T19:38:38Z
7c560131bfc36647b9bc920b6d85531f734d7977,Adding logger pri (#14155),Nathan Schloss,2018-11-08T19:30:38Z
3d8bda70e52a4d90f656cf6bf3021af53bb7ca6f,"Refactor ESLint configuration to enable better IDE integration (#13914)

* Refactor ESLint configuration to enable better IDE integration

* Minor tweaks",Minh Nguyen,2018-11-08T17:56:35Z
051272f2012e1c2f75dc8ee9fe72a1d85cdac302,"Use Entry in `yarn build ...` Instead of Label (#14148)

* Parse build script type and package names

This ensures that `yarn build core dom` includes DOM.

It also ensures that spaces like `yarn build ""core, dom""` doesn't build EVERYTHING.

* Get rid of label in bundles config

Instead we just use the name from entry using fuzzy search.

There is one special case. If you put in `/index` or `/index.js`.

That allows to build things like `react/index` to only build isomorphic
where as `react` would build everything. Or `react-dom/index` to exclude
the server renderers.

* Instead of matching `/index.js` just append it to the search string

That way things like `yarn build react/` works too.",Sebastian Markbåge,2018-11-08T04:46:41Z
3ff2c7ccd4d174786aed0f16cc0dd784816ae977,"Invalid actualDuration+treeBaseDuration for hidden+suspended trees (#14065)

* Fixed `treeBaseDuration` by propagating its value from the suspended tree to the Fragment React temporarily wraps around it when showing the fallback UI.
* Fixed `actualDuration` by recording elapsed profiler time in the event of an error.
* Fixed `actualDuration` in concurrent mode by propagating the time spent rendering the suspending component to its parent.

Also updated ReactSuspensePlaceholder-test.internal to cover these new cases.",Brian Vaughn,2018-11-07T23:46:30Z
5afa1c4eda2e5eaa58d72d7937b640b79984a038,Tag MemoComponent with PerformedWork effectTag for DevTools Profiler (#14141),Brian Vaughn,2018-11-07T21:56:12Z
be63473004748d2f2360eb08f90dd08a19252a71,Release script supports interleaved stable and alpha releases (#14138),Brian Vaughn,2018-11-07T20:33:13Z
e27720d7f586cdadb00b0de485e41ec4dbcebe52,"[Synchronous Suspense] Reuse deletions from primary tree (#14133)

Fixes a bug where deletion effects in the primary tree were dropped
before entering the second render pass.

Because we no longer reset the effect list after the first render pass,
I've also moved the deletion of the fallback children to the complete
phase, after the tree successfully renders without suspending.

Will need to revisit this heuristic when we implement resuming.",Andrew Clark,2018-11-07T18:56:57Z
aa1ffe4e779b8a6da4317be619ff4f0d3d7d02bb,"Show deprecated context object warnings usage in ReactDOM server (#14033)

* Applies context object warnings to ReactDOM server",Dominic Gannaway,2018-11-07T17:19:38Z
e3a7b9645561007cf59d6e956df13f1b6ebeaa49,Make react-debug-tools a private package,Andrew Clark,2018-11-07T02:45:30Z
ff29de40290f4a4e3ab03c21aa44f2ddde840c9b,Updating CHANGELOG.md for 16.6.1 release,Andrew Clark,2018-11-07T02:32:29Z
ba19844236ab61e22b6e8f80f5134ae33a2792e5,Update bundle sizes for 16.6.1 release,Andrew Clark,2018-11-07T02:28:50Z
a24d51028710cc171f5a52f07cf110d0b9a58974,Update error codes for 16.6.1 release,Andrew Clark,2018-11-07T02:28:50Z
b50e63ef537ce7784a1f981570b5abff5c81c59d,Updating package versions for release 16.6.1,Andrew Clark,2018-11-07T02:19:57Z
fd4527dbcdab359b02dbce4752995e05502dc7b0,Updating yarn.lock file for 16.6.1 release,Andrew Clark,2018-11-07T02:16:23Z
bd5a6d3914c4ed03678a8dd649f57b19e79a8b2d,Update changelog with unreleased features,Andrew Clark,2018-11-07T01:38:19Z
8f2c89e96367ea809a011bb88bbee85551575539,Make react-debug-tools a private package,Andrew Clark,2018-11-07T01:37:30Z
2aecbcd6f1a0ac975f01d41dad11722bc8c8da72,"""functional component"" -> ""function component"" (#14123)",locknono,2018-11-07T01:33:26Z
b4608dd24caa31b3c78c51acbb5115ad03e884b3,Remove unused simulated flag parameter (#14127),Nadav Kaner,2018-11-07T01:33:01Z
3c69a1881421d46d738e2782fe3ec0ae9b5cb39c,"Recover from errors with a boundary in completion phase (#14104)

* Recover from errors with a boundary in completion phase

* Use a separate field for completing unit of work

* Use a simpler fix with one boolean

* Reoder conditions

* Clarify which paths are DEV-only

* Move duplicated line out

* Make it clearer this code is DEV-only",Dan Abramov,2018-11-06T23:38:12Z
b020fb1148f2da7495bd1d5425af0622b71100d4,"Check correct commit phase props in fuzz tester (#14129)

Adds a check to the existing fuzz tester to confirm that the props are
set to the latest values in the commit phase. Only checks
componentDidUpdate; we already have unit tests for the other lifecycles,
so I think this is good enough. This is only a redundancy.",Andrew Clark,2018-11-06T23:01:18Z
b67c1a2ee1720628c6d47cab977aeb38564d2df6,Add DEV-only checks for assumption about instance properties (#14128),Dan Abramov,2018-11-06T22:28:50Z
f777d196e0943b3975c762e15e35b319a9b85902,"Fix lazy() with defaultProps (#14112)

* Resolve defaultProps for Lazy components

* Make test fail again

* Undo the partial fix

* Make test output more compact

* Add a separate failing test for sync mode

* Clean up tests

* Add another update to both tests

* Resolve props for commit phase lifecycles

* Resolve prevProps for begin phase lifecycles

* Resolve prevProps for pre-commit lifecycles

* Only resolve props if element type differs

* Fix Flow

* Don't set instance.props/state during commit phase

This is an optimization. I'm not sure it's entirely safe. It's probably worth running internal tests and see if we can ever trigger a case where they're different.

This can mess with resuming.

* Keep setting instance.props/state before unmounting

This reverts part of the previous commit. It broke a test that verifies we use current props in componentWillUnmount if the fiber unmounts due to an error.",Dan Abramov,2018-11-06T19:54:14Z
e4512991c91eee4117937d17b9b4749e2173f046,"Fix unhiding in IE11 (#14126)

Setting to null isn't correct; setting to '' is. I opted to use dangerousStyleValue for consistency with the main path that we set things.

Fixes #14114.

Test Plan:
Verified setting to '' works in Chrome and IE11. (Setting to null works in Chrome but not in IE11.)",Sophie Alpert,2018-11-06T19:24:44Z
affb2b50ca1dfa2b780e94039e98e3bb70faaaab,"Enable hooks in www test renderer, too",Andrew Clark,2018-11-06T02:50:00Z
0a0f503d57d54c028639a5c052c658275d25e706,"Enable hooks in www build (#14116)

The `enableHooks` feature flag used to only control whether the API
was exposed on the React package. But now it also determines if the
dispatcher and implementation are included in the bundle.

We're using hooks in www, so I've switched the feature flag to `true`
in the www build.

(Alternatively, we could have two feature flags: one for the
implementation and dispatcher, and one for exposing the API on the
React package.)",Andrew Clark,2018-11-06T01:48:54Z
600651e68e0686f606aca9fc559f8cdc5f7ed567,Restore the Hooks dispatcher after using SSR (#14105),Dan Abramov,2018-11-06T01:15:11Z
e9a2ec915655fa1968b7d41c4e8ad9e90f7268cb,"[suspense] Avoid double commit by re-rendering immediately and reusing primary children (#14083)

* Avoid double commit by re-rendering immediately and reusing children

To support Suspense outside of concurrent mode, any component that
starts rendering must commit synchronously without being interrupted.
This means normal path, where we unwind the stack and try again from the
nearest Suspense boundary, won't work.

We used to have a special case where we commit the suspended tree in an
incomplete state. Then, in a subsequent commit, we re-render using the
fallback.

The first part — committing an incomplete tree — hasn't changed with
this PR. But I've changed the second part — now we render the fallback
children immediately, within the same commit.

* Add a failing test for remounting fallback in sync mode

* Add failing test for stuck Suspense fallback

* Toggle visibility of Suspense children in mutation phase, not layout

If parent reads visibility of children in a lifecycle, they should have
already updated.",Andrew Clark,2018-11-06T00:32:50Z
9d47143e85105cc0213949fae33960200c38560f,"Implement {,un}hideInstance on RN renderer (#14115)

This is required to use lazy.

Test Plan:
* Verified lazy works on a real world use case (shows spinner, shows real content).
* Verified that if I change the primary content's styles to have `display: 'none'` then it never appears (i.e., the code in `unhide` reads the styles successfully)",Sophie Alpert,2018-11-05T23:33:25Z
ebdb47d2c137b399b7d9b4468885887961d9cec5,DCE hooks code when flag is off (#14111),Sophie Alpert,2018-11-05T21:04:57Z
8b87ebf5b0053838fb58e4ad05c24e134030d75a,Rename .internal tests that aren't using internals (#14109),Sophie Alpert,2018-11-05T19:12:28Z
da04058a91339944e89b6e071765db06863233be,"Use Function.prototype.apply in warningWithoutStack (#14107)

console.error.apply() fails in IE9, but I verified this works (and it works everywhere else too). :)",Sophie Alpert,2018-11-05T19:11:33Z
fd1256a5618d335d5eb563858e0841869b97b1ad,"Add Debug Tools Package for Introspection of Hooks (#14085)

* Add debug tools package

* Add basic implementation

* Implement inspection of the current state of hooks using the fiber tree

* Support useContext hooks inspection by backtracking from the Fiber

I'm not sure this is safe because the return fibers may not be current
but close enough and it's fast.

We use this to set up the current values of the providers.

* rm copypasta

* Use lastIndexOf

Just in case. I don't know of any scenario where this can happen.

* Support ForwardRef

* Add test for memo and custom hooks

* Support defaultProps resolution",Sebastian Markbåge,2018-11-05T18:02:59Z
b305c4e034bbb3b13df2028c0503a84f91e57455,"fix(react-dom): Fix crash during server render (#14103)

Check for existence of `setTimeout` and `clearTimeout` in the runtime
before using them, to ensure runtimes without them (like .NET ClearScript)
do not crash just by importing `react-dom`.",Tiago Nunes,2018-11-05T17:08:07Z
ce90ffd045c13a817d2a992aea55e556573fe367,update the benchmark script (#13994),Keyan Zhang,2018-11-05T15:55:46Z
d34d1c3baee307d03b2ab430fe4b4a4f1f2ef09e,"react-reconciler: Update README.md (#13953)

Replaced 'var' with 'const'",Marcelo Jorge Vieira,2018-11-05T15:55:23Z
6c404d82aa082a008dba033eb3f0f9c6803b13c4,Bugfix: Add back early return in setOffsets which was removed between 16.4.2 and 16.5.0. Fails in Edge in some scenarios. (#14095),einarq,2018-11-05T15:19:50Z
8eca0eff87bcb1046b7ef318e8f3d0c7ea2613c6,"chore(tests): don't rely on jest fake timers scheduling real timers (#14003)

* chore: don't rely on jest fake timers scheduling real timers

* re-add one part not working with Jest 23",Simen Bekkhus,2018-11-02T21:54:23Z
293fed89937201b780f0f567ae4d5dc01160dc55,"Warn for bad useEffect return value (#14069)

Mostly to catch this:

```js
useEffect(async () => {
  // ...
  return cleanup;
});
```

Is this too restrictive? Not sure if you would want to do like

```js
useEffect(() => ref.current.style.color = 'red');
```

which would give a false positive here. We can always relax it to only warn on Promises if people complain.",Sophie Alpert,2018-11-02T21:43:45Z
ae196e84b656fc75638249b25c4d7b97581ba825,Rename inputsAreEqual to areHookInputsEqual & move it to shared (#14036),Mateusz Burzyński,2018-11-02T19:50:23Z
c898020e015f4ee6f793a652668d6d78b0d43e76,"Warn for forwardRef(memo(...)) (#14070)

People are probably gonna do this all the time.",Sophie Alpert,2018-11-02T19:32:44Z
c84b9bf828c38e0b24042ebb9cd859292146a6fb,Tweak error message for missing fallback (#14068),Sophie Alpert,2018-11-02T05:45:23Z
595b4f945b703128af7e65750726c0cbf073ca58,Remove duplicate import declarations (#14062),Chris Bianca,2018-11-01T13:31:46Z
d5d10d140ed8739c83f3cee5d43f0bf60eea1002,"Simplify imports in react reconciler (#13718)

* Simplify imports in ReactChildFiber
* Import type first in ReactCurrentFiber
* Simplify imports in ReactFiberBeginWork
* Simplify imports in ReactFiberScheduler
* Simplify import in ReactFiberTreeReflection
* Simplify import in ReactFiberUnwindWork
* Remove repeated import
* Fix imports from ReactFiberExpirationTime
* Master imports in ReactFiberBeginWork",Maksim Markelov,2018-11-01T04:12:51Z
cdbfa6b5dd692220e5996ec453d46fc10aff046a,"[react-is] add back proper AsyncMode symbol, for back compat (#13959)

- Partial revert of #13732
 - Fixes #13958.",Jordan Harband,2018-10-31T19:03:50Z
1ae3f29c2094b5a319889855923368deacd10b5b,Fix react-cache UMD build (#14047),Brian Vaughn,2018-10-31T18:16:03Z
3db8b80e1501b161b213b0b5405590e4325a0414,"Don't lint against Hooks after conditional throw (#14040)

Seems like this should be OK. Fixes #14038.

Now when tracking paths, we completely ignore segments that end in a throw.",Sophie Alpert,2018-10-31T00:13:24Z
169f935f781c764a8c04f441c5e27b00a0329e8c,"Flip expiration times (#13912)

See https://github.com/facebook/react/pull/13912 commit messages for how this was done.",Sophie Alpert,2018-10-30T22:26:20Z
bf9fadfcf42847fa89f9a76c7d4dc2e2c17ee020,"[Hooks] Remove dispatch callbacks (#14037)

Removes the `enableDispatchCallback` feature flag and deletes the
associated code. An earlier version of the Hooks proposal included this
feature but we've since decided to remove it.",Andrew Clark,2018-10-30T21:14:20Z
8c67bbf183cc5ae1cab15a8265c612daf80cd86f,"[scheduler] Deadline object -> shouldYield (#14025)

* [scheduler] Deadline object -> shouldYield

Instead of using a requestIdleCallback-style deadline object, expose a
method Scheduler.shouldYield that returns true if there's a higher
priority event in the queue.

* Nits",Andrew Clark,2018-10-30T20:47:51Z
e02086bfcc698d02a41a7785a1027a94dbc88eea,"Warn about variable number of dependencies

We don't check this in prod, since best practice is to always pass
these inline. But we should still warn in dev.",Andrew Clark,2018-10-29T20:38:54Z
b92cdef641c1116ce9e0d647da571973a70d0770,"Rename ReactHooks test suite

New tests should use React Test Renderer. We'll put existing tests in
this module and new tests in a new module.",Andrew Clark,2018-10-29T20:36:41Z
6efbbe0685f971e773ba0bbd5c2db8729d7d1108,Prettier,Sophie Alpert,2018-10-29T19:29:41Z
504576306461a5ff339dc99691842f0f35a8bf4c,Swap order of function member in hook union types,Andrew Clark,2018-10-29T18:39:04Z
ddbfe2ed50c7a3476ceff20f5924011ac1ad6428,Add ESLint rule for React Hooks,Caleb Meredith,2018-10-23T19:35:56Z
acb48996373ee0cbf1b2462972cd7644862d770e,"Clear effect tags from a fiber that suspends in non-concurrent mode

Even though we commit the fiber in an incomplete state, we shouldn't
fire any lifecycles or effects.

We already did this for classes, but now with useEffect, the same is
needed for other types of work, too.",Andrew Clark,2018-10-23T07:41:22Z
933b64710a48b2f86f71b1507901038025e79e3f,"Disable hook update callback (2nd arg to setState/dispatch)

I put the feature behind a feature flag, along with a warning, so
we can phase it out in www.",Andrew Clark,2018-10-20T22:01:40Z
5fc84efacce66272928815e8a6c83a341af9160e,"Skip updating effect tag when skipping effect

For example, if you have `useEffect(..., [])`, there's no need to set .effectTag to `Update | Passive` on updates.",Sophie Alpert,2018-10-16T20:02:02Z
9f34eb79a3f7df71cd89b247de2e12b41b98f55a,Add readContext to ReactPartialRendererHooks,Alex Taylor,2018-10-11T17:17:39Z
f7cb9d2b2291b2b4725786105ddd89316711161f,Warn about useContext(Consumer|Provider),Dan Abramov,2018-10-15T22:31:14Z
63cc7d2b31b4e5ad17c07b383a328c598c91276e,"Test useContext in pure, forwardRef, and PureComponent",Dan Abramov,2018-10-15T21:20:05Z
3a7c6da8d46763991d47ebf2198bc4e2fbfa0d9a,"Make effects actually work with memo

Bug fix.",Sophie Alpert,2018-10-13T23:02:38Z
75a1c2e72a8ebff2ec5e9b89e3c0e04f576731b7,"The Lost Effect, chapter 3

wow, writing code is hard",Sophie Alpert,2018-10-13T01:04:49Z
55a4b1f37799d1dd5b009ad22931be4131ca2c69,memo supports Hooks,Sophie Alpert,2018-10-11T20:54:50Z
30aa4ad5541c6e82de465a5e6234e5bb1329dec1,"The Lost Effect, chapter 2

Previously, flushPassiveEffects (called by scheduling work) would overwrite rootWithPendingPassiveEffects before we had a chance to schedule the work.",Sophie Alpert,2018-10-10T22:41:46Z
b772e0e26bd8f3062e23e9d831045a39072d0372,"""functional component"" -> ""function component"" in hooks error messages",Sebastian Markbåge,2018-10-09T01:20:48Z
9e9e3970e424e3a6d36b29d22cb7326d6c5705f8,Warn for Hook set-state on unmounted component,Sophie Alpert,2018-10-05T22:32:15Z
6514697f0cb294b48550eeb3bcbddfd11143539c,"Make sure deletions don't stop passive effects

Before the fix, the passive effect in the test is never executed.

We were previously waiting until the next commit phase to run effects. Now, we run them before scheduling work.",Sophie Alpert,2018-10-04T01:31:35Z
dd019d34db1d8d067637033c36856c8b259cb35b,"Add support for hooks to ReactDOMServer

Co-authored-by: Alex Taylor <alexmckenley@gmail.com>
Co-authored-by: Andrew Clark <acdlite@fb.com>",Alex Taylor,2018-10-01T00:32:11Z
11d0781eea7dfa65e0ea9e54d18ff937122f9524,"Defer useEffect until after paint

Effects scheduled by useEffect should not fire until after the browser
has had a chance to paint. However, they should be fired before any
subsequent mutations.

Also adds useMutationEffect and useLayoutEffect. useMutationEffect fires
during the host update phase. useLayoutEffect fires during the post-
update phase (the same phase as componentDidMount
and componentDidUpdate).",Andrew Clark,2018-09-24T01:12:46Z
105f2de545dc9e374ed4ac55b3628eeeb555f4a6,Put hooks behind feature flag,Andrew Clark,2018-09-06T00:20:13Z
7bee9fbdd49aa5b9365a94b0ddf6db04bc1bf51c,"Initial hooks implementation

Includes:
- useState
- useContext
- useEffect
- useRef
- useReducer
- useCallback
- useMemo
- useAPI",Andrew Clark,2018-09-05T18:29:08Z
37c7fe0a5fa5a0892b0eaa5982d0ad7f58220331,Update createRoot warning message based on `enableStableConcurrentModeAPIs` (#14017),Rauno Freiberg,2018-10-29T18:25:24Z
ae4f3f07e583e33c8a21e146d6682d5a08c174b4,Remove extraneous CSS selector (#13996),Jeffrey Zhang,2018-10-27T17:01:25Z
95f98a1873566288f6854851ad7604fc0eb3476b,fix typo (#13955),Joseph,2018-10-27T16:59:00Z
e217f2f1ac31e0d2c4e29c9a7b92399427b2c3a8,Updated comment for getEventModifierState (#13918),Patrick,2018-10-27T16:52:01Z
275e76e83bc2be5dc0be9185ff747f383969289a,"Enable stable concurrent APIs flag for 16.7 alpha (#13928)

* Add enableStableConcurrentModeAPIs feature flag

* Conditionally name concurrent API based on enableStableConcurrentModeAPIs flag",Brian Vaughn,2018-10-24T20:45:07Z
b5539ad6280f45d4eb025dbe0fc1bd2c00b06531,It's Concurrent,Dan Abramov,2018-10-24T02:26:00Z
0cc50b675ae55fef687f4cb01293849fc49539e7,Fix scheduler fixture,Dan Abramov,2018-10-23T23:35:07Z
8b97a9c36f2ef7d2c570b25e988b8ca832d9b436,Update bundle sizes for 16.6.0 release,Dan Abramov,2018-10-23T23:29:35Z
c8ade996e9d39790cb687bfaa0f08d61d44478f2,Update error codes for 16.6.0 release,Dan Abramov,2018-10-23T23:29:35Z
6c29eabf78da3102851271d30895770b930f0bcb,Updating package versions for release 16.6.0,Dan Abramov,2018-10-23T23:23:41Z
d520b358d66152f4faac18f3c7a567a2850af563,"Revert all package versions to 16.5.2 state

Our release script is getting really confused so I'm resetting to last working state.",Dan Abramov,2018-10-23T23:18:26Z
8f1ec7649eaa483b0cb16202334629831edeeeac,Bump versions to beta.0,Dan Abramov,2018-10-23T23:01:57Z
5055a83fa415e27878976eea7f5c679a548a610d,"Revert ""Revert ""Updating dependencies for react-noop-renderer""""

This reverts commit 3e8b4a5b8b0630f2d0d4bf6afc2ef64e60c812a0.",Dan Abramov,2018-10-23T22:59:36Z
3e8b4a5b8b0630f2d0d4bf6afc2ef64e60c812a0,"Revert ""Updating dependencies for react-noop-renderer""

This reverts commit 1a57dc66891a3747f2c5039803654b48871f451c.",Brian Vaughn,2018-10-23T22:36:31Z
ff5efb03905299cd7dc10928e79ed133fb1e567e,Prettier,Brian Vaughn,2018-10-23T22:06:58Z
f4488bee514aba9a17b2498aa8e3b300e5149954,Add skipCI flag to release script (#13933),Brian Vaughn,2018-10-23T22:05:14Z
d42ed600266302034085551a465ee479e4ade9d1,Fix Suspense fixture (#13932),Dan Abramov,2018-10-23T22:03:22Z
d8e03de4aa52ca7b0bf0baaa2fcf0e8aaf1f547b,"[react-cache] Remove `cache` as argument to `read` (#13865)

* [react-cache] Remove `cache` as argument to `read`

Updated is API is `Resource.read(key)` instead of
`Resource.read(cache, key)`.

The cache is read from context using `readContext`.

This also removes cache invalidation entirely (other than the default
LRU mechanism), as well as the ability to have multiple caches. We'll
add it back once `Context.write` lands and we can implement it the
right way.

Since there's now only a single cache (the global one), we don't
actually need to use context yet, but I've added a dummy context
anyway so the user gets an error if they attempt to read outside the
render phase.

* nits

* Add test for thenables that resolve multiple times",Andrew Clark,2018-10-23T21:38:51Z
fefa1269e2a67fa5ef0992d5cc1d6114b7948b7e,Revert accidentally committed existence check (#13931),Andrew Clark,2018-10-23T21:27:04Z
80a0c05ce3e0e1babe5c8fc97ef24fd67cb4e735,"Removed react-cache from the bundle list for now (#13930)

* Removed react-cache from the bundle list for now

* Re-add react-cache bundle, but mark as private to avoid NPM publishing",Brian Vaughn,2018-10-23T20:55:52Z
915e4eab53e49660f2dcac7847a3a2e3d97bfc41,"Add ""unstable_"" prefix to react-cache and jest-react (#13929)

* Add ""unstable_"" prefix to react-cache createResource and jest-react matchers
* Reverted accidental change to error-codes JSON
* Remove unstable_ prefix from internal React tests for jest-test",Brian Vaughn,2018-10-23T20:55:37Z
508b5fba0eb58a0dc2c3a307346dda271da672d1,Fix Markdown,Dan Abramov,2018-10-23T19:16:13Z
c285ea270038967286f974ceaa56272a358b33e0,Tweak changelog credits,Dan Abramov,2018-10-23T19:15:57Z
eac092ecacf737bd7b3ded933510ff421350acc1,"Add 16.6.0 changelog (#13927)

* Add 16.6.0 changelog

* Update CHANGELOG.md",Dan Abramov,2018-10-23T19:08:08Z
cbbc2b6c4d0d8519145560bd8183ecde55168b12,"[Synchronous Suspense] Suspending a class outside concurrent mode (#13926)

* [Synchronous Suspense] Suspending a class outside concurrent mode

When a class component suspends during mount outside concurrent mode,
change the tag so it's not mistaken for a completed component. For
example, we should not call componentWillUnmount if it is deleted.

* PR nits",Andrew Clark,2018-10-23T18:36:56Z
4947fcd762517ac36e13fd5cc254fabe17d33e01,Fix lint (#13923),Sebastian Markbåge,2018-10-23T05:47:39Z
d75c69e0cf2a842adc47edab87ca5103411e6949,"Remove unstable_ prefix from Suspense (#13922)

We are using it with lazy and the combination Suspense + lazy seems pretty
stable. maxDuration is not but that's only enabled when you're in
ConcurrentMode which is still unstable.",Sebastian Markbåge,2018-10-23T05:40:05Z
c8ef2feda98d8cc9fb59829148b3db1671ac3b9b,"Remove redundant word ""the"" (#13919)",John Lin,2018-10-23T05:39:23Z
55444a6f490ce84550ba664b9a82f1724134fb76,"Try rendering again if a timed out tree receives an update (#13921)

Found a bug related to suspending inside an already mounted tree. While
investigating this I noticed we really don't have much coverage of
suspended updates. I think this would greatly benefit from some fuzz
testing; still haven't thought of a good test case, though.",Andrew Clark,2018-10-23T05:37:15Z
04c4f2fcea0ba1496b5b20d0fca8d8d48d6ecf64,"[reconciler] ReactFiberNewContext import maxSigned31BitInt twice (#13857)

* [reconciler] ReactFiberNewContext import maxSigned31BitInt twice

* rename maxSigned31BitInt to MAX_SIGNED_31_BIT_INT",yongningfu,2018-10-22T15:24:44Z
409e472fcaae2b6c171f4e9a0c4b5ad88ec2bf21,Add flow types in ReactControlledComponent (#13669),Abdul Rauf,2018-10-21T19:35:35Z
663835a43a5a92ff63c3e3b43e4c9ff40dde173b,Add flow types in getEventModifierState (#13909),Abdul Rauf,2018-10-21T18:20:50Z
82710097f604bfaef30adb34e1ce3654070f47c6,Add flow types in getNodeForCharacterOffset (#13908),Abdul Rauf,2018-10-21T18:18:32Z
7ebd90c2c36bcea3081a353e0e20542cf69c64cd,"[minor bugfix] fix minor bug with handleReset in suspense fixture (#13843)

* fix minor bug with handleReset in suspense fixture

otherwise resetting the cache in debugger throws an error 

reported here
https://www.reddit.com/r/reactjs/comments/9n9nfo/react_166_canary/

* fix singlequote/doublequote

* switch to performance.now()",shawn wang,2018-10-21T18:16:44Z
420001cb4e58d88f2dbaf90dfdc56e7d24148f72,Fix babel-preset-fbjs configure link in comment (#13666),Abdul Rauf,2018-10-21T17:23:24Z
b753f76a74644dd19e7a29f8aa4e8c759190f9ef,"Fix failing async tests in Node 10

Dunno why they happened to work in Node 8 but whatever. Tested on both.",Andrew Clark,2018-10-20T23:06:23Z
d37f5955955f21215dc0aa377346b59efb18c694,Add `use strict` to .prettierrc.js (#13787),ZYSzys,2018-10-20T21:42:11Z
b5c0852fddda9abdab25b101a040e607877f4663,"Bump version to 16.6.0-beta.0 (#13906)

* Bump version to 16.6.0-beta.0

* Root too",Dan Abramov,2018-10-20T17:03:15Z
769b1f270e1251d9dbdce0fcbd9e92e502d059b8,pure -> memo (#13905),Dan Abramov,2018-10-20T16:46:23Z
8ecd4bd4f07ea41baa934e6748649e447c999231,"Add support for React.pure in ReactDOMServer (#13855)

* Add support for React.pure in ReactDOMServer

* Unwrap pure wrappers by creating an additional element as a single child

This is very slow but meh. We're rewriting this whole thing anyway.",Alex Taylor,2018-10-20T07:42:33Z
15b11d23f960c158a7e99679bf62041ce16aed7e,"Allow arbitrary types to be wrapped in pure (#13903)

* Allow arbitrary types to be wrapped in pure

This creates an outer fiber that container the pure check and an inner
fiber that represents which ever type of component.

* Add optimized fast path for simple pure function components

Special cased when there are no defaultProps and it's a simple function
component instead of class. This doesn't require an extra fiber.

We could make it so that this also works with custom comparer but that
means we have to go through one extra indirection to get to it.
Maybe it's worth it, donno.",Sebastian Markbåge,2018-10-20T07:32:16Z
e770af7a3a0921afb658cdc69fc9da8fdc3194ff,Add back accidentally deleted `break` to prevent fallthrough,Andrew Clark,2018-10-20T05:47:37Z
95a313ec0b957f71798a69d8e83408f40e76765b,"Unfork Lazy Component Branches (#13902)

* Introduce elementType field

This will be used to store the wrapped type of an element. E.g. pure and
lazy.

The existing type field will be used for the unwrapped type within them.

* Store the unwrapped type on the type field of lazy components

* Use the raw tags for lazy components

Instead, we check if the elementType and type are equal to test if
we need to resolve props. This is slightly slower in the normal case
but will yield less code and branching.

* Clean up lazy branches

* Collapse work tag numbering

* Split IndeterminateComponent out from Lazy

This way we don't have to check the type in a hacky way in the
indeterminate path. Also, lets us deal with lazy that resolves to
indeterminate and such.

* Missing clean up in rebase",Sebastian Markbåge,2018-10-20T05:22:45Z
e16cdd5b178a82db09f51349fe6c636a5072516f,"Always bail out timed out children even if they receive an update (#13901)

* Always bail out timed out children even if they receive an update

The fragment that wraps timed-out children should always have an
expiration time of NoWork.

* Don't need to set expirationTime, only childExpirationTime",Andrew Clark,2018-10-20T03:31:44Z
7268d97d2b2b595db24cb6210e535dd2bd421df2,"Centralize props memoization (#13900)

* Move memoizedProps to after beginWork remove memoizeProps helper

We always call this at the end. This is now enforced to line up since
we do the equality check in the beginning of beginWork. So we can't
have special cases.

* Inline the one caller of memoizeState",Sebastian Markbåge,2018-10-20T03:12:02Z
0fc04467987c187d557744f27c8ba90ea0a06cad,"Class component can suspend without losing state outside concurrent mode (#13899)

Outside of concurrent mode, schedules a force update on a suspended
class component to force it to prevent it from bailing out and
reusing the current fiber, which we know to be inconsistent.",Andrew Clark,2018-10-20T01:41:47Z
36db538226c45fc427abe4438851854892ee75c4,"Bugfix for #13886 (#13896)

Fixes a bug where a lazy component does not cache the result of
its constructor.",Andrew Clark,2018-10-19T20:57:42Z
6938dcaacbffb901df27782b7821836961a5b68d,SSR support for class contextType (#13889),Sebastian Markbåge,2018-10-19T18:18:32Z
fa65c58e15ca6b718a9771782e77d8a990a011d7,"Add readContext to SSR (#13888)

Will be used by react-cache.",Sebastian Markbåge,2018-10-19T03:20:03Z
d9a3cc070c3b554ce6c4b43b917c1ba8951f9b5f,"React.lazy constructor must return result of a dynamic import (#13886)

We may want to change the protocol later, so until then we'll be
restrictive. Heuristic is to check for existence of `default`.",Andrew Clark,2018-10-19T02:58:25Z
d9659e499eba3089b098c32cf112b7a067bdddf1,"Lazy components must use React.lazy (#13885)

Removes support for using arbitrary promises as the type of a React
element. Instead, promises must be wrapped in React.lazy. This gives us
flexibility later if we need to change the protocol.

The reason is that promises do not provide a way to call their
constructor multiple times. For example:

const promiseForA = new Promise(resolve => {
  fetchA(a => resolve(a));
});

Given a reference to `promiseForA`, there's no way to call `fetchA`
again. Calling `then` on the promise doesn't run the constructor again;
it only attaches another listener.

In the future we will likely introduce an API like `React.eager` that
is similar to `lazy` but eagerly calls the constructor. That gives us
the ability to call the constructor multiple times. E.g. to increase
the priority, or to retry if the first operation failed.",Andrew Clark,2018-10-19T02:57:12Z
0648ca618d712c6c47425b62412ae2aaab19c438,"Revert ""React.pure automatically forwards ref"" (#13887)

Reverts #13822. We're not sure we want to do this.",Sophie Alpert,2018-10-19T01:53:10Z
4dd772ac10032f2391af188c757d366af777e584,Prettier :(,Andrew Clark,2018-10-19T01:38:44Z
98bab66c35624250eba6ed32d24c06f70a433a67,Fix lint,Andrew Clark,2018-10-19T01:06:39Z
8ced545e3df95afab6fa35bc29f9320bafbcef26,"Suspense component does not capture if `fallback` is not defined (#13879)

* Suspense component does not capture if `fallback` is not defined

A missing fallback prop means the exception should propagate to the next
parent (like a rethrow). That way a Suspense component can specify other
props like maxDuration without needing to provide a fallback, too.

Closes #13864

* Change order of checks",Andrew Clark,2018-10-18T23:07:22Z
b738ced47717d7bd1e9083a3fbe9ab1be3b6588c,"Remove render prop option from Suspense (#13880)

This was the original, lower-level API before we landed on `fallback`
instead. (We might add a different lower-level API in the future, likely
alongside a new API for catching errors).",Andrew Clark,2018-10-18T22:48:11Z
55b82794237a14a5cf106f61d84237dc9a3e04f6,"Strict mode and default mode should have same Suspense semantics (#13882)

In the default mode, Suspense has special semantics where, in
addition to timing out immediately, we don't unwind the stack before
rendering the fallback. Instead, we commit the tree in an inconsistent
state, then synchronous render *again* to switch to the fallback. This
is slower but is less likely to cause issues with older components that
perform side effects in the render phase (e.g. componentWillMount,
componentWillUpdate, and componentWillReceiveProps).

We should do this in strict mode, too, so that there are no semantic
differences (in prod, at least) between default mode and strict mode.
The rationale is that it makes it easier to wrap a tree in strict mode
and start migrating components incrementally without worrying about new
bugs in production.",Andrew Clark,2018-10-18T22:42:40Z
dac9202a9c5add480f853bcad2ee04d371e72c0c,"Hide timed-out children instead of deleting them so their state is preserved (#13823)

* Store the start time on `updateQueue` instead of `stateNode`

Originally I did this to free the `stateNode` field to store a second
set of children. I don't we'll need this anymore, since we use fragment
fibers instead. But I still think using `updateQueue` makes more sense
so I'll leave this in.

* Use fragment fibers to keep the primary and fallback children separate

If the children timeout, we switch to showing the fallback children in
place of the ""primary"" children. However, we don't want to delete the
primary children because then their state will be lost (both the React
state and the host state, e.g. uncontrolled form inputs). Instead we
keep them mounted and hide them. Both the fallback children AND the
primary children are rendered at the same time. Once the primary
children are un-suspended, we can delete the fallback children — don't
need to preserve their state.

The two sets of children are siblings in the host environment, but
semantically, for purposes of reconciliation, they are two separate
sets. So we store them using two fragment fibers.

However, we want to avoid allocating extra fibers for every placeholder.
They're only necessary when the children time out, because that's the
only time when both sets are mounted.

So, the extra fragment fibers are only used if the children time out.
Otherwise, we render the primary children directly. This requires some
custom reconciliation logic to preserve the state of the primary
children. It's essentially a very basic form of re-parenting.

* Use `memoizedState` to store various pieces of SuspenseComponent's state

SuspenseComponent has three pieces of state:

- alreadyCaptured: Whether a component in the child subtree already
suspended. If true, subsequent suspends should bubble up to the
next boundary.
- didTimeout: Whether the boundary renders the primary or fallback
children. This is separate from `alreadyCaptured` because outside of
strict mode, when a boundary times out, the first commit renders the
primary children in an incomplete state, then performs a second commit
to switch the fallback. In that first commit, `alreadyCaptured` is
false and `didTimeout` is true.
- timedOutAt: The time at which the boundary timed out. This is separate
from `didTimeout` because it's not set unless the boundary
actually commits.


These were previously spread across several fields.

This happens to make the non-strict case a bit less hacky; the logic for
that special case is now mostly localized to the UnwindWork module.

* Hide timed-out Suspense children

When a subtree takes too long to load, we swap its contents out for
a fallback to unblock the rest of the tree. Because we don't want
to lose the state of the timed out view, we shouldn't actually delete
the nodes from the tree. Instead, we'll keep them mounted and hide
them visually. When the subtree is unblocked, we un-hide it, having
preserved the existing state.

Adds additional host config methods. For mutation mode:

- hideInstance
- hideTextInstance
- unhideInstance
- unhideTextInstance

For persistent mode:

- cloneHiddenInstance
- cloneUnhiddenInstance
- createHiddenTextInstance

I've only implemented the new methods in the noop and test renderers.
I'll implement them in the other renderers in subsequent commits.

* Include `hidden` prop in noop renderer's output

This will be used in subsequent commits to test that timed-out children
are properly hidden.

Also adds getChildrenAsJSX() method as an alternative to using
getChildren(). (Ideally all our tests would use test renderer #oneday.)

* Implement hide/unhide host config methods for DOM renderer

For DOM nodes, we hide using `el.style.display = 'none'`.

Text nodes don't have style, so we hide using `text.textContent = ''`.

* Implement hide/unhide host config methods for Art renderer

* Create DOM fixture that tests state preservation of timed out content

* Account for class components that suspend outside concurrent mode

Need to distinguish mount from update. An unfortunate edge case :(

* Fork appendAllChildren between persistent and mutation mode

* Remove redundant check for existence of el.style

* Schedule placement effect on indeterminate components

In non-concurrent mode, indeterminate fibers may commit in an
inconsistent state. But when they update, we should throw out the
old fiber and start fresh. Which means the new fiber needs a
placement effect.

* Pass null instead of current everywhere in mountIndeterminateComponent",Andrew Clark,2018-10-18T22:37:16Z
4f0bd45905b52b52406a006ccf42046828aa6bf2,"Replacement of old links, by the new ones of the documentation. (#13871)",Pablo Javier D. A,2018-10-17T14:08:06Z
7685b55d27c3932fd803230452cfd3d1ab076195,"Remove unstable_read() in favor of direct dispatcher call (#13861)

* Remove unstable_read() in favor of direct dispatcher call

* This no longer throws immediately",Dan Abramov,2018-10-16T18:58:00Z
21a79a1d9ff960742b9362be0e56d63959c40e7f,"[schedule] Call ensureHostCallbackIsScheduled without args (#13852)

ensureHostCallbackIsScheduled reads firstCallbackNode from global scope
and need not be passed in function call",Trivikram Kamat,2018-10-15T17:26:40Z
9ea4bc6ed607b0bbd2cff7bbdd4608db99490a5f,Fix false positive context warning when using an old React (#13850),Dan Abramov,2018-10-14T14:35:52Z
4773fdf7cdf5d6d775ad0960f23ee1a830e7b82b,"Deprecate findDOMNode in StrictMode (#13841)

* Deprecate findDOMNode in StrictMode

There are two scenarios. One is that we pass a component instance that is
already in strict mode or the node that we find is in strict mode if
an outer component renders into strict mode.

I use a separate method findHostInstanceWithWarning for this so that
a) I can pass the method name (findDOMNode/findNodeHandle).
b) Can ignore this warning in React Native mixins/NativeComponent that use this helper.

I don't want to expose the fiber to the renderers themselves.",Sebastian Markbåge,2018-10-12T22:42:00Z
c9be16f5b6fc85e1458467a0c1e9743b15549424,"[scheduler] Rename priority levels (#13842)

- ""Interactive"" -> ""user-blocking""
- ""Whenever"" -> ""Idle""

These are the terms used by @spanicker in their main-thread scheduling
proposal: https://github.com/spanicker/main-thread-scheduling#api-sketch

That proposal also uses ""microtask"" instead of ""immediate"" and ""default""
instead of ""normal."" Not sure about ""microtask"" because I don't think
most people know what that is. And our implementation isn't a proper
microtask, though you could use it to implement microtasks if you made
sure to wrap every entry point. I don't really have a preference between
""default"" and ""normal.""

These aren't necessarily the final names. Still prefixed by `unstable_`.",Andrew Clark,2018-10-12T21:42:15Z
3b7ee269259c077956af63b2ad34cbd5b6b15d27,"Deprecate context object as a consumer and add a warning message (#13829)

* Deprecate context object as a consumer and add various warning messages for unsupported usage.",Dominic Gannaway,2018-10-12T16:46:47Z
8ca8a594e6fc7dfcba73b8595344e7522d40171d,Error gracefully for unsupported SSR features (#13839),Dan Abramov,2018-10-12T13:47:02Z
6d5d250bef88115ceceb906d0cab1d60ea996d7b,Use React.lazy in Suspense fixture (#13834),Dan Abramov,2018-10-12T02:37:53Z
4a635785f5cc40bde901ada6090904fdc8cc120d,"Fix User Timing oddities with Suspense, pure, and lazy (#13833)

* Show pure components in fiber timings with name

* Fix Suspense and lazy user timings

* Tweak message and type name

* Fix Flow",Dan Abramov,2018-10-12T02:15:14Z
d270db1c380bc97300e7c14ca44d5cb129f67099,"Merge branch 'master' of github.com:facebook/react
Fixed my own author name and email",Nadia Osipova,2018-10-12T00:13:08Z
a165cf74731d2198f24940e861e8a45cf438d13c,Renamed 4 Internal React Modules,Nadia Osipova,2018-10-11T23:22:07Z
30b607615757424c928c495bcff2a96a55ed942a,Renamed 4 Internal React Modules,Nadia--,2018-10-11T23:22:07Z
a68ca9a5b54394bb61131f73f38329bfaeae331c,"React.pure automatically forwards ref (#13822)

We're not planning to encourage legacy context, and without this change, it's difficult to use pure+forwardRef together. We could special-case `pure(forwardRef(...))` but this is hopefully simpler.

```js
React.pure(function(props, ref) {
  // ...
});
```",Sophie Alpert,2018-10-11T20:04:42Z
0af81997095dfa3db67a0c5d287b144797742e99,"Revert ""comment out temporarily""

This reverts commit 9abb9cd50a769d07ae3f87bc8802a3e483c69c2b.",Dan Abramov,2018-10-10T16:23:18Z
c73497c3c746dfcc19754fc1fe055aefb495ee21,Update bundle sizes for 16.6.0-alpha.8af6728 release,Dan Abramov,2018-10-10T16:19:00Z
101ea6b84d9dac56a2088507ee150c9244a4adbd,Update error codes for 16.6.0-alpha.8af6728 release,Dan Abramov,2018-10-10T16:18:59Z
1a57dc66891a3747f2c5039803654b48871f451c,Updating dependencies for react-noop-renderer,Dan Abramov,2018-10-10T16:12:05Z
77f8dfd81e628b9110c10cf61e3c8bd117944a8c,Updating package versions for release 16.6.0-alpha.8af6728,Dan Abramov,2018-10-10T16:12:05Z
9abb9cd50a769d07ae3f87bc8802a3e483c69c2b,comment out temporarily,Dan Abramov,2018-10-10T16:08:50Z
8af6728c6f105d37f9c0006288a6d1ac3903dc71,"Enable Suspense + rename Placeholder (#13799)

* Enable Suspense

* <unstable_Placeholder delayMs> => <unstable_Suspense maxDuration>

* Update suspense fixture",Dan Abramov,2018-10-10T16:02:04Z
f47a958ea8d328190c88bac1ad6f85eaaaefc310,"Don’t add onclick listener to React root (#13778)

Fixes #13777

As part of #11927 we introduced a regression by adding onclick handler
to the React root. This causes the whole React tree to flash when tapped
on iOS devices (for reasons I outlined in
https://github.com/facebook/react/issues/12989#issuecomment-414266839).

To fix this, we should only apply onclick listeners to portal roots. I
verified that my proposed fix indeed works by checking out our DOM
fixtures and adding regression tests.

Strangely, I had to make changes to the DOM fixtures to see the behavior
in the first place. This seems to be caused by our normal sites (and 
thus their React root) being bigger than the viewport:

![](http://cl.ly/3f18f8b85e91/Screen%20Recording%202018-10-05%20at%2001.32%20AM.gif)

An alternative approach to finding out if we're appending to a React
root would be to add a third parameter to `appendChildToContainer` based
on the tag of the parent fiber.",Philipp,2018-10-09T08:27:06Z
b2cea9078d28015ce95a4da523a4172b171989ad,"[scheduler] Eagerly schedule rAF at beginning of frame (#13785)

* [scheduler] Eagerly schedule rAF at beginning of frame

Eagerly schedule the next animation callback at the beginning of the
frame. If the scheduler queue is not empty at the end of the frame, it
will continue flushing inside that callback. If the queue *is* empty,
then it will exit immediately. Posting the callback at the start of the
frame ensures it's fired within the earliest possible frame. If we
waited until the end of the frame to post the callback, we risk the
browser skipping a frame and not firing the callback until the frame
after that.

* Re-name scheduledCallback -> scheduledHostCallback",Andrew Clark,2018-10-09T00:28:58Z
e2e7cb9f4cb3b415775688fb118846a9927acaf3,"[scheduler] add a test documenting current behavior (#13687)

* [scheduler] add a test documenting current behavior

* Update with latest changes from master and confirm fixed behavior",plievone,2018-10-05T18:25:03Z
d83601080a7c913cedcfbad86044702d008039c7,"Wrap retrySuspendedRoot using SchedulerTracing (#13776)

Previously, we were emptying root.pendingInteractionMap and permanently losing those interactions when applying an unrelated update to a tree that has no scheduled work that is waiting on promise resolution. (That is, one that is showing a fallback and waiting for the suspended content to resolve.)

The logic I'm leaving untouched with `nextRenderIncludesTimedOutPlaceholder` is *not* correct -- what we want is instead to know if *any* placeholder anywhere in the tree is showing its fallback -- but we don't currently have a better replacement, and this should unblock tracing with suspense again.",Sophie Alpert,2018-10-04T22:11:12Z
40a521aa7247872d0080d5a581120b64998152da,"Terminology: Functional -> Function Component (#13775)

* Terminology: Functional -> Function Component

* Drop the ""stateless"" (functions are already stateless, right?)",Dan Abramov,2018-10-04T21:44:46Z
605ab10a4a40ed8db5f5a1438b08cfa6e36a5c80,"Add envify transform to scheduler package (#13766)

This package uses `process.env.NODE_ENV` but does not transform its usage during bundling like the rest of the React libraries do. This causes issues when `process` is not defined globally.",Michael Ridgway,2018-10-04T21:18:19Z
acc7f404ce68f9eaef5724b1b340e487013440c2,"Restart from root if promise pings before end of render phase (#13774)

* Restart from root if promise pings before end of render phase

* Test that placeholder resolves successfully even if fallback render is pending",Andrew Clark,2018-10-04T19:55:52Z
cbc22402880a6f55ed3d127b6ea2a4398a25e649,"fix - small misspelling (#13768)

longer term needs a hyphen.",Spencer Davies,2018-10-04T08:05:51Z
4eabeef11b02e7ed5653474bf896b7b553756eaf,Rename ReactSuspenseWithTestRenderer-test -> ReactSuspense-test,Andrew Clark,2018-10-04T00:54:38Z
95a3e1c2e7b766b21b4cad8210940b2535860951,"Rename ReactSuspense-test -> ReactSuspenseWithNoopRenderer-test

Doing this in its own commit to preserve history",Andrew Clark,2018-10-04T00:52:56Z
96bcae9d50cae41ab87539075dceeaf3a0e0a36d,"Jest + test renderer helpers for concurrent mode (#13751)

* Jest + test renderer helpers for concurrent mode

Most of our concurrent React tests use the noop renderer. But most
of those tests don't test the renderer API, and could instead be
written with the test renderer. We should switch to using the test
renderer whenever possible, because that's what we expect product devs
and library authors to do. If test renderer is sufficient for writing
most React core tests, it should be sufficient for others, too. (The
converse isn't true but we should aim to dogfood test renderer as much
as possible.)

This PR adds a new package, jest-react (thanks @cpojer). I've moved
our existing Jest matchers into that package and added some new ones.

I'm not expecting to figure out the final API in this PR. My goal is
to land something good enough that we can start dogfooding in www.

TODO: Continue migrating Suspense tests, decide on better API names

* Add additional invariants to prevent common errors

- Errors if user attempts to flush when log of yields is not empty
- Throws if argument passed to toClearYields is not ReactTestRenderer

* Better method names

- toFlushAll -> toFlushAndYield
- toFlushAndYieldThrough ->
- toClearYields -> toHaveYielded

Also added toFlushWithoutYielding

* Fix jest-react exports

* Tweak README",Andrew Clark,2018-10-04T00:37:41Z
5c783ee75102da682519be14cd11260a04a42593,Remove unreachable code (#13762),Heaven,2018-10-04T00:03:01Z
36c5d69caa3e9270b1b175b33cd8c53cc6c0e690,Always warn about legacy context within StrictMode tree (#13760),Brian Vaughn,2018-10-03T15:40:45Z
3e9a5de88847f7d51ec92bef10a89126dfb5820f,UMD react-cache build (#13761),Maksim Markelov,2018-10-03T14:09:17Z
3c60f32747ecd8ab3ee35bbca3921948631db4bc,Fix simple-cache-provider import that I missed,Andrew Clark,2018-10-02T06:50:33Z
8315a30b9beeaba66f2b6dcdcfac1de58025332d,"--save is no longer needed (#13756)

`--save` is on by default as of [npm 5](https://blog.npmjs.org/post/161081169345/v500), and `npm install aphrodite` is functionally equivalent to `npm install --save aphrodite` now",Joe Cortopassi,2018-10-01T18:15:11Z
ce96e2df4d9f3367e07f25153e5282d4c0869bac,Rename simple-cache-provider to react-cache (#13755),Andrew Clark,2018-10-01T15:07:40Z
c5212646f8096fde506b40971f848f7641e4011b,Removed extra typeof checks for contextType.unstable_read (#13736),Brian Vaughn,2018-09-28T20:12:26Z
806eebdaeec5a5b0e4e5df799bd98eb5f288bba5,"Enable getDerivedStateFromError (#13746)

* Removed the enableGetDerivedStateFromCatch feature flag (aka permanently enabled the feature)
* Forked/copied ReactErrorBoundaries to ReactLegacyErrorBoundaries for testing componentDidCatch
* Updated error boundaries tests to apply to getDerivedStateFromCatch
* Renamed getDerivedStateFromCatch -> getDerivedStateFromError
* Warn if boundary with only componentDidCatch swallows error
* Fixed a subtle reconciliation bug with render phase error boundary",Brian Vaughn,2018-09-28T20:05:01Z
a0733fe13d598303f45b9d27c84ce0ec40d09021,"pure (#13748)

* pure

A higher-order component version of the `React.PureComponent` class.
During an update, the previous props are compared to the new props. If
they are the same, React will skip rendering the component and
its children.

Unlike userspace implementations, `pure` will not add an additional
fiber to the tree.

The first argument must be a functional component; it does not work
with classes.

`pure` uses shallow comparison by default, like `React.PureComponent`.
A custom comparison can be passed as the second argument.

Co-authored-by: Andrew Clark <acdlite@fb.com>
Co-authored-by: Sophie Alpert <sophiebits@fb.com>

* Warn if first argument is not a functional component",Andrew Clark,2018-09-27T22:25:38Z
4d17c3f0516ddd5a7d23a460abbc3c3ddeab98a9,"[scheduler] Improve naive fallback version used in non-DOM environments

Added some tests for the non-DOM version of Scheduler that is used
as a fallback, e.g. Jest. The tests use Jest's fake timers API:

- `jest.runAllTimers(ms)` flushes all scheduled work, as expected
- `jest.advanceTimersByTime(ms)` flushes only callbacks that expire
within the given milliseconds.

These capabilities should be sufficient for most product tests. Because
jest's fake timers do not override performance.now or Date.now, we
assume time is constant. This means Scheduler's internal time will not
be aligned with other code that reads from `performance.now`. For finer
control, the user can override `window._sched` like we do in our tests.
We will likely publish a Jest package that has this built in.",Andrew Clark,2018-09-27T03:25:21Z
469005d87bdf031cb787151f48b78d4a84ef5292,Revise `AttributeType` React Native Flow Type (#13737),Timothy Yung,2018-09-26T21:40:57Z
0dc0ddc1ef5f90fe48b58f1a1ba753757961fc74,"Rename AsyncMode -> ConcurrentMode (#13732)

* Rename AsyncMode -> ConcurrentMode",Dominic Gannaway,2018-09-26T16:13:02Z
7601c3765457a4ec7b2d48c0ca75fccf7fecf917,"Ensure ""addEventListener"" exists on ""window"" for ""scheduler"" package (#13731)

* Ensure addEventListener exists on ""window""",Dominic Gannaway,2018-09-26T12:38:56Z
d0c0ec98ef1fdf0791aeca38a0fa857fe52d9845,Added a PureComponent contextType test (#13729),Brian Vaughn,2018-09-26T00:28:33Z
4b68a6498ba1bd1b81208a9340e0c405f45d4cc4,"Support class component static contextType attribute (#13728)

* Support class component static contextType attribute",Brian Vaughn,2018-09-25T22:49:46Z
f305d2a489e75a27f843fcca917dfd13e994268d,"[scheduler] Priority levels, continuations, and wrapped callbacks (#13720)

All of these features are based on features of React's internal
scheduler. The eventual goal is to lift as much as possible out of the
React internals into the Scheduler package.

Includes some renaming of existing methods.

- `scheduleWork` is now `scheduleCallback`
- `cancelScheduledWork` is now `cancelCallback`


Priority levels
---------------

Adds the ability to schedule callbacks at different priority levels.
The current levels are (final names TBD):

- Immediate priority. Fires at the end of the outermost currently
executing (similar to a microtask).
- Interactive priority. Fires within a few hundred milliseconds. This
should only be used to provide quick feedback to the user as a result
of an interaction.
- Normal priority. This is the default. Fires within several seconds.
- ""Maybe"" priority. Only fires if there's nothing else to do. Used for
prerendering or warming a cache.

The priority is changed using `runWithPriority`:

```js
runWithPriority(InteractivePriority, () => {
  scheduleCallback(callback);
});
```


Continuations
-------------

Adds the ability for a callback to yield without losing its place
in the queue, by returning a continuation. The continuation will have
the same expiration as the callback that yielded.


Wrapped callbacks
-----------------

Adds the ability to wrap a callback so that, when it is called, it
receives the priority of the current execution context.",Andrew Clark,2018-09-25T22:11:42Z
970a34baedcbb3033b271ca8e7e5fb5d7226751d,Bump babel-eslint and remove flow supressions (#13727),Brian Ng,2018-09-25T21:48:31Z
13965b4d3016de0ed28e73a38e60c18259bc2c23,"Interaction tracking ref-counting bug fixes (WIP) (#13590)

* Added new (failing) suspense+interaction tests
* Add new tracing+suspense test harness fixture
* Refactored interaction tracing to fix ref counting bug",Brian Vaughn,2018-09-25T16:27:41Z
17e703cb9692c26795c794a54e2239f603ee090d,Restore global window.event after event dispatching (#13688) (#13697),Sergei Startsev,2018-09-25T15:24:23Z
a775a767a1d61ef07024cbe9adc9e8f4099d9546,Remove redundant logic (#13502),Heaven,2018-09-25T00:59:29Z
2c7b78f21699856474fb8035b966d9ef88552750,"Add closing parenthesis (#13712)

I’ve first seen it in the [releases view](https://github.com/facebook/react/releases/tag/v16.5.2) and fixed it there as well.",Philipp,2018-09-23T10:36:47Z
e1a067dea0ffcacd1f664f30cd14463b00f52fa7,Fix circular dependency in TracingSubscriptions (#13689),Maksim Markelov,2018-09-19T17:48:32Z
518812eeb82a524dd264be79ca0573ce39cde945,"Clarify comment (#13684)

* fix comment typo

* Update Scheduler.js",Heaven,2018-09-19T12:14:32Z
eeb817785c771362416fd87ea7d2a1a32dde9842,Remove some old files from stats,Dan,2018-09-19T00:36:31Z
7ea3ca1d13b1b609678fa1369f8a1020c3ecb976,Rename schedule to scheduler (#13683),Dan Abramov,2018-09-19T00:26:28Z
9b70816642c68672da97e911d6d351fd3c596474,Added another bullet to the CHANGELOG,Brian Vaughn,2018-09-18T19:45:31Z
db9d51b65caeec0cfd2b8e35df59bdaba3eaa31b,Rename 'Schedule' header -> 'Schedule (Experimental)',Brian Vaughn,2018-09-18T19:41:14Z
0823f845cf38141866e7e5164c80d75b4985df04,16.5.2 CHANGELOG,Brian Vaughn,2018-09-18T19:39:32Z
bec2ddaf157497ddca85e823e180536d8154a52f,Update bundle sizes for 16.5.2 release,Brian Vaughn,2018-09-18T18:30:50Z
789e714bd738b0dd566f3cff33932b9586751fc5,Update error codes for 16.5.2 release,Brian Vaughn,2018-09-18T18:30:50Z
4269fafb0a45d35f701a38c1ee01e01bb4296c50,Updating package versions for release 16.5.2,Brian Vaughn,2018-09-18T18:24:33Z
4380f9ba1724a5d530dcf03d70d1640eec2a2140,"Revert ""Updating package versions for release 16.6.0-alpha.0""

This reverts commit 351c9015c8f6a0169fd33965a2afe93ad12675c1.",Brian Vaughn,2018-09-18T18:00:13Z
72fad84e7682fac3f349cc1f7ed78a747b248b05,"Revert ""Updating dependencies for react-noop-renderer""

This reverts commit 489614c4fc95877d2155b35cf23d76237785cdbd.",Brian Vaughn,2018-09-18T18:00:09Z
39f93f79870c264616a9f93252b657498a7ea5af,"Revert ""Update error codes for 16.6.0-alpha.0 release""

This reverts commit 21ceb19ea09439dc2c32cd9ec4360e95f143b2e7.",Brian Vaughn,2018-09-18T18:00:04Z
c3fad5acf841bb3eec64913ba1d8863699d3567a,"Revert ""Update bundle sizes for 16.6.0-alpha.0 release""

This reverts commit 42d12317a794b4ba89a6a6d16302f66cb370be91.",Brian Vaughn,2018-09-18T17:59:57Z
dd91205617cfbc5ce664e0a5c4bd879ec93ddfe3,Kepp calling peformWork consistent (#13596),Heaven,2018-09-18T14:48:18Z
42d12317a794b4ba89a6a6d16302f66cb370be91,Update bundle sizes for 16.6.0-alpha.0 release,Brian Vaughn,2018-09-17T22:05:46Z
21ceb19ea09439dc2c32cd9ec4360e95f143b2e7,Update error codes for 16.6.0-alpha.0 release,Brian Vaughn,2018-09-17T22:05:46Z
489614c4fc95877d2155b35cf23d76237785cdbd,Updating dependencies for react-noop-renderer,Brian Vaughn,2018-09-17T21:59:57Z
351c9015c8f6a0169fd33965a2afe93ad12675c1,Updating package versions for release 16.6.0-alpha.0,Brian Vaughn,2018-09-17T21:59:57Z
a210b5b44016c086f83008cd03146d5acdacd12c,"Revert ""Do not bind topLevelType to dispatch"" (#13674)

* Revert ""Do not bind topLevelType to dispatch (#13618)""

This reverts commit 0c9c591bfb4c280d69bc9c1dd692ab0028bb0f8e.",Dan Abramov,2018-09-17T17:43:16Z
2f54a0467b8b73dd14281bad8796c859ceaaef19,"docs(changelog): Fix misspelling (#13663)

dangerouslySetInnerHTML was misspelled dangerousSetInnerHTML",Sam Kvale,2018-09-15T15:16:58Z
1d8a75fef0dfc2f721fa10e8355ef581f3842015,remove flow typings from Schedule.js (#13662),Alexey Raspopov,2018-09-15T02:55:23Z
d92114b98e8509a9fac8ad4f56110020fa8d6987,"Resubmit: Fix updateWrapper causing re-render textarea, even though their data (#13643)

* fix updateWrapper causing re-render textarea, even though their data has not changed

* fix updateWrapper causing re-render textarea, even though their data, prettier-all

* minor changes to updateWrapper, add test",Nathan Hunzaker,2018-09-14T23:09:07Z
0c9c591bfb4c280d69bc9c1dd692ab0028bb0f8e,"Do not bind topLevelType to dispatch (#13618)

* Do not bind topLevelType to dispatch

A previous change made it such that all top level event types
correspond to their associated native event string values. This commit
eliminates the .bind attached to dispatch and fixes a related flow
type.

* Add note about why casting event.type to a topLevelType is safe

* Move interactiveUpdates comment to point of assignment",Nathan Hunzaker,2018-09-14T23:08:37Z
9f819a5ea9fe54b370d6eafb042480dfb2dfb974,"[schedule] Refactor Schedule, remove React-isms (#13582)

* Refactor Schedule, remove React-isms

Once the API stabilizes, we will move Schedule this into a separate
repo. To promote adoption, especially by projects outside the React
ecosystem, we'll remove all React-isms from the source and keep it as
simple as possible:

- No build step.
- No static types.
- Everything is in a single file.

If we end up needing to support multiple targets, like CommonJS and ESM,
we can still avoid a build step by maintaining two copies of the same
file, but with different exports.

This commit also refactors the implementation to split out the DOM-
specific parts (essentially a requestIdleCallback polyfill). Aside from
the architectural benefits, this also makes it possible to write host-
agnostic tests. If/when we publish a version of Schedule that targets
other environments, like React Native, we can run these same tests
across all implementations.

* Edits in response to Dan's PR feedback",Andrew Clark,2018-09-14T21:05:55Z
9c961c0a279e31015b8df987bd86e6fec7548614,"Fix some iframe edge cases (#13650)

Should fix #13648 by fallback on `window` when `document.defaultView` does not exists anymore",Jérôme Steunou,2018-09-14T15:44:14Z
8bc0bcabe7505a991e9e40a4b8ad1d3eb9b5723f,"Add UMD production+profiling entry points (#13642)

* Added UMD_PROFILING type to react-dom and scheduling package. Added UMD shim to schedule package.
* Added new schedule umd prod+prof bundle to API test",Brian Vaughn,2018-09-14T00:44:08Z
b488a5d9c5a2c38e2fdad2925a15a4bc863e23e5,Fix test comment typo (#13568),Heaven,2018-09-14T00:33:16Z
4bcee56210bd3ab3f6440ff7313a255148e22107,"Rename ""tracking"" API to ""tracing"" (#13641)

* Replaced ""tracking"" with ""tracing"" in all directory and file names
* Global rename of track/tracking/tracked to trace/tracing/traced",Brian Vaughn,2018-09-13T21:23:16Z
9a6c5ba72d7ef80707371cf48ede9f182b28ee65,Fix packaging fixtures,Dan Abramov,2018-09-13T18:22:16Z
72217d0819da062700d8829e66ea2d9a2b1d79da,Update bundle sizes for 16.5.1 release,Dan Abramov,2018-09-13T18:11:31Z
cc66a1aa231849feb0badd7a389dc656683a1842,Update error codes for 16.5.1 release,Dan Abramov,2018-09-13T18:11:31Z
8b93a60c5eebbb3cc336c89b00160b024c79d027,Updating package versions for release 16.5.1,Dan Abramov,2018-09-13T18:06:38Z
7a5eecc07354b3aefc9abbf87df7f732a5160297,Add 16.5.1 changelog (#13638),Dan Abramov,2018-09-13T18:31:00Z
ecbf7af40b72b90c007416132eb5e941542d4cca,"Enhance dev warnings for forwardRef render function (#13627) (#13636)

* Enhance dev warnings for forwardRef render function

- For 0 parameters: Do not warn because it may be due to usage of the
  arguments object.

- For 1 parameter: Warn about missing the 'ref' parameter.

- For 2 parameters: This is the ideal. Do not warn.

- For more than 2 parameters: Warn about undefined parameters.

* Make test cases for forwardRef warnings more realistic

* Add period to warning sentence",Andres Rojas,2018-09-13T15:12:34Z
2282400850ff51892d581da782fdbc98047b8fc3,Delete TapEventPlugin (#13630),Dan Abramov,2018-09-12T18:53:29Z
a079011f95033758c17f1d7c2ee44d9cc80623f2,"🔥 Stop syncing the value attribute on inputs (behind a feature flag) (#13526)

* :fire: Stop syncing the value attribute on inputs

* Eliminate some additional checks

* Remove initialValue and initialWrapper from wrapperState flow type

* Update tests with new sync logic, reduce some operations

* Update tests, add some caveats for SSR mismatches

* Revert newline change

* Remove unused type

* Call toString to safely type string values

* Add disableInputAttributeSyncing feature flag

Reverts tests to original state, adds attribute sync feature flag,
then moves all affected tests to ReactFire-test.js.

* Revert position of types in toStringValues

* Invert flag on number input blur

* Add clarification why double blur is necessary

* Update ReactFire number cases to be more explicite about blur

* Move comments to reduce diff size

* Add comments to clarify behavior in each branch

* There is no need to assign a different checked behavior in Fire

* Use checked reference

* Format

* Avoid precomputing stringable values

* Revert getToStringValue comment

* Revert placement of undefined in getToStringValue

* Do not eagerly stringify value

* Unify Fire test cases with normal ones

* Revert toString change. Only assign unsynced values when not nully",Nathan Hunzaker,2018-09-12T18:29:23Z
a7bd7c3c0480c96e32d9518bb707172dfc72db58,Allow reading default feature flags from bundle tests (#13629),Dan Abramov,2018-09-12T15:56:04Z
7204b636ee2b46608811b11111a6cb4e544a8276,"Run tests for Fire feature flags (#13628)

* Run tests for Fire feature flags

* Only run ReactDOM tests for Fire",Dan Abramov,2018-09-12T15:17:36Z
d3bbfe09cc47e2c5e34c3f5d0373e726981f0919,Fix IE version in comment,Dan Abramov,2018-09-12T14:10:28Z
1b2646a403a23556084189f055d75d68da2a6cd4,"Fix warning without stack for ie9 (#13620)

* Fix warning without stack for ie9

Where console methods like log, error etc. don't have 'apply' method.
Because of the lot of tests already expect that exactly console['method']
will be called - had to reapply references for console.error method

https://github.com/facebook/react/issues/13610

* pass parameters explicitly to avoid using .apply
which is not supported for console methods in ie9

* Minor tweaks",Aliaksandr Manzhula,2018-09-12T14:09:58Z
dde0645fcf317ed0042eaca96551f3f0394c68b4,Switch to @sizebot token (#13622),Héctor Ramos,2018-09-11T20:06:44Z
e49f3ca08e0dc8ac050f92b45a7734fa60d86e22," honor displayName set on ForwardRef if available (#13615)

* add failing test

* honor displayName set on ForwardRef if available

Since React.forwardRef returns a component object, some users
(including styled-components and react-native) are starting to
decorate them with various statics including displayName.

This adjusts React's various name-getters to honor this if set and
surface the name in warnings and hopefully DevTools.

* fix typing

* Refine later",Evan Jacobs,2018-09-11T19:19:54Z
f6fb03edffcc5918ad2f37ed45bdc7c0c3b3d199,"Hydration DOM Fixture (#13521)

* Add home component. Async load fixtures.

This commit adds a homepage to the DOM fixtures that includes browser
testing information and asynchronously loads fixtures.

This should make it easier to find DOM testing information and keep
the payload size in check as we add more components to the fixtures.

* Adds experimental hydration fixture

This commit adds a first pass at a fixture that makes it easier to
debug the process of hydrating static markup. This is not complete:

1. It needs to be verified across multiple browsers
2. It needs to render with the current version of react

Still, it at least demonstrates the idea. A fixture like this will
also be helpful for debugging change events for hydrated inputs, which
presently do not fire if the user changes an input's text before
hydration.

* Tweak select width

* Manually join extra attributes in warning

This prevents a bug where Chrome reports `Array(n)` where `n` is the
size of the array.

* Transform with buble

* Eliminate dependencies

* Pull in react-live for better editing

* Handle encoding errors, pass react version

* Load the correct version of React

* Tweaks

* Revert style change

* Revert warning update

* Properly handle script errors. Fix dom-server CDN loading

* Fix 15.x releases

* Use postMessage to reduce latency, support older browsers

This commit makes a few tweaks to support older browsers and updates
the code transition process to use window.postMessage. This avoids
loading React on every single change.

* Fix fixture renamespacing bug

* Gracefully fallback to textarea in React 14

* Replace buble with babel, react-live with codemirror

* Simplify layout to resolve production code-mirror issues

* Tweak height rules for code-mirror

* Update theme to paraiso

* Format Code.js

* Adjust viewport to fix CodeMirror resize issue in production build

* Eliminate react-code-mirror

* Improve error state. Make full stack collapsable

* Add link to license in codemirror stylesheet

* Make code example more concise

* Replace ""Hydrate"" with ""Auto-hydrate"" for clarity

* Remove border below hydration header

* Rename query function in render.js

* Use Function(code) to evaluate hydration fixture

For clarity, and so that the Fixture component does not need to be
assigned to the window, this commit changes the way code is executed
such that it evaluates using a Function constructor.

* Extend hydration fixture to fill width. Design adjustments

This commit extends the hydration fixture such that it takes up the
full screen view. To accomplish this, the container that wraps all
fixtures has been moved to the FixtureSet component, utilized by all
other fixtures.

* Improve error scroll state

* Lazy load CodeMirror together before executing

This commit fixes an issue where CodeMirror wouldn't layout correctly
in production builds because the editor executes before the stylesheet
loaded. CodeMirror needs layout information, and was rendering
off-screen without correct CSS layout measurements.

* Fix indentation on error message

* Do not highlight errors from Babel. Add setPrototypeOf polyfill

This commit fixes an error in Safari 7.1 where Chalk highlighted Babel
errors caused a crash when setPrototypeOf was called within the
library.

This is also an issue on IE9, however this fix does not resolve issues
in that browser.

* Increase resilience to bad errors in Hydration fixture

- Reverts highlighting change. Polyfilling Safari 7.1 is sufficient
- Do not render a details tag in IE9",Nathan Hunzaker,2018-09-10T21:04:14Z
54bfab5d6d9e0e313fbedbe76979c59470fbe140,Release script updates private package dependencies also (#13612),Brian Vaughn,2018-09-10T20:14:34Z
ade5e692883345783e32e87875bbb744fb415c9c,Manually update schedule dep in react-native-renderer (#13609),Brian Vaughn,2018-09-10T18:07:08Z
f260b14a8f1f95a75f5595c9da392cc640e4ad88,"Fix host bailout for the persistent mode (#13611)

* Add regression test for persistent bailout bug

* Fork more logic into updateHostComponent

This is mostly copy paste. But I added a bailout only to mutation mode. Persistent mode doesn't have that props equality bailout anymore, so the Fabric test now passes.

* Add failing test for persistence host minimalism

* Add bailouts to the persistent host updates",Dan Abramov,2018-09-10T18:05:40Z
4a40d7624575d030e2d2aa98b24000e59a9e4f02,Fix a regression related to isReactComponent prototype check (#13608),Dan Abramov,2018-09-10T16:54:45Z
03ab1efeb4dde9e07b93ff038c87cc4fa443abf4,"Improve DX when combining react-dom/profiling and schedule/tracking (#13605)

* Added blessed production+profiling entry point for schedule/tracking
* Add invariant when profiling renderer is used with non-profiling schedule/tracking",Brian Vaughn,2018-09-10T15:32:56Z
144328fe81719e916b946e22660479e31561bb0b,Enable no-use-before-define rule (#13606),Dan Abramov,2018-09-10T15:15:18Z
8a8d973d3cc5623676a84f87af66ef9259c3937c,"Use clearer wording

Fixes #13604",Dan,2018-09-09T15:54:28Z
7d1169b2d7ad8d2345c28a2063bc101a4cc2d570,"Remove injectComponentTree from unstable-native-dependencies, add EventPluginHub (#13598)

* Remove injectComponentTree from unstable-native-dependencies, add
EventPluginHub

injectComponentTree was exposed for react-native-web, but wasn't
actually being used by the project. They were using EventPluginHub
through ReactDOM's secret internals, but that was removed in https://github.com/facebook/react/pull/13539

This removes the unused injectComponentTree export, refactors the
ResponderEventPlugin test so it doesn't depend on it, and also adds
EventPluginHub to the exports to unbreak react-native-web

* Re-export injectEventPluginsByName from ReactDOM internals",Brandon Dail,2018-09-08T19:07:59Z
8d1038fc6dee1d0264b5ec9f8bb13305e7495b8e,"Break up ReactDOMServerIntegrationForm-test (#13600)

In https://github.com/facebook/react/pull/13394, I encountered an
issue where the ReactDOMServerIntegrationForm test suite consumed
sufficient memory to crash CircleCI. Breaking up this test suite by
form element type resolved the issue.

This commit performs that change separate from the Symbol/Function
stringification changes in #13394.",Nathan Hunzaker,2018-09-08T18:31:32Z
b87aabdfe1b7461e7331abb3601d9e6bb27544bc,Drop the year from Facebook copyright headers and the LICENSE file. (#13593),Héctor Ramos,2018-09-07T22:11:23Z
12f3a5475fbd07d4f0806c5adfbb2b66c264a643,chore: remove duplicate **when** (#13587),Ali Torki,2018-09-07T17:52:31Z
c6dcf46d652bfad2139253d33d29a99c6f5771e4,"Build schedule which is required for time slicing demo (#13588)

* Build schedule which is required for time slicing demo

* Update suspense demo README too

* Update README.md

* Update README.md

* Update README.md",Nish,2018-09-07T16:11:19Z
7bcc0778fdd03fd0b8e9f2b4177829cd1ce31997,Fixed small CHANGELOG error (#13583),Brian Vaughn,2018-09-07T01:03:58Z
d66505dbc7172ec8648bb0d2891bf823c5da7e5e,Updated 16.5 changelog,Brian Vaughn,2018-09-06T19:59:22Z
e417e0bf7cddf7f190aaf145c3eca7018f6f36fb,Update ReactNativeViewConfigRegistry Flow Types (#13579),Timothy Yung,2018-09-06T19:27:44Z
8f45a685be1c2f2205684a301cfd23833ee9a478,Add 2fa OTP code to npm dist-tag command too,Brian Vaughn,2018-09-06T16:49:42Z
71c0e05ba79e2e12556980ffbab264b41fdc19cd,Update bundle sizes for 16.5.0 release,Brian Vaughn,2018-09-06T16:34:27Z
92a620e214e5abb985d2800cc792294e09cb19f6,Update error codes for 16.5.0 release,Brian Vaughn,2018-09-06T16:34:27Z
6255cc39494ef9d6193987184ae0b612e23292f8,Updating package versions for release 16.5.0,Brian Vaughn,2018-09-06T16:29:36Z
5c5fc5f473f2877cb403e30c473a1b84684d3510,Updating yarn.lock file for 16.5.0 release,Brian Vaughn,2018-09-06T16:27:41Z
1bede616d1d947320f749355e9b0b6a96a2223ed,Build script correctly bumps prerelease deps (e.g. schedule) for react (#13577),Brian Vaughn,2018-09-06T15:59:51Z
0a8740db61329eba42987d6ac619e7bf6e622a04,Build script correctly bumps prerelease deps (e.g. schedule) (#13576),Brian Vaughn,2018-09-06T15:06:05Z
28cb37978219584fc5b3e296aa87810d567fd3ec,Added a test for Profiler onRender that throws (#13575),Brian Vaughn,2018-09-06T15:03:09Z
8963118b3c0d29b6b7428189ff4a0ba58bc2d1c4,Update react-dom README,Dan Abramov,2018-09-06T14:27:06Z
b47a28cb9ebf584a2e2d199b943fa560686cd95a,Tweak react-dom README,Dan Abramov,2018-09-06T14:22:10Z
f765f022534958bcf49120bf23bc1aa665e8f651,"When a root expires, flush all expired work in a single batch (#13503)

Instead of flushing each level one at a time.",Andrew Clark,2018-09-06T14:07:02Z
0156740610473ee9bb5640c786024e38c8380441,Changelog for 16.5.0 (#13571),Dan Abramov,2018-09-06T14:06:32Z
550dd1d2eccd4855f1ec5e4155ac89dd43c70eff,Call Profiler onRender after mutations (#13572),Brian Vaughn,2018-09-06T00:55:12Z
34348a45b4b1de40d285ba7168e4d6770e620911,Add enableSuspenseServerRenderer feature flag (#13573),Alex Taylor,2018-09-05T22:04:59Z
4e744be6eecc86be2db87b7804a8bebedf4329b3,Added react-dom/profiling entry point to NPM package (#13570),Brian Vaughn,2018-09-05T18:16:43Z
bb627228ea97514acb60901c390f420cdd26d21e,test: add test for fragement props (#13565),laoxiong,2018-09-05T15:28:50Z
9a110ebd8ce9f808a246a3c7f7b0cc13f78f13a6,"Cleaned up 'schedule' API wrt interactions and subscriber ref: (#13561)

* Removed 'private' ref methods from UMD forwarding API
* Replaced getters with exported constants since they were no longer referenced for UMD forwarding",Brian Vaughn,2018-09-05T14:29:30Z
fb88fd9d8c9f72b8e2e7e1ae89652d2a6a707562,"Fixed schedule/tracking require for www sync script (#13556)

* Fixed schedule/tracking require for www sync script

* Remove unused remapped FB modules from bundle as well

* Remove www module rename plugin

* Revert unnecessary change to strip-unused-imports plugin",Brian Vaughn,2018-09-04T17:31:52Z
2d5c590cc2e0bffb1b3b9b2ace942faf39a5fb6d,Change async fixtures to use schedule,Dan Abramov,2018-09-04T14:19:29Z
955393cab908c054987615347fb3d5f78f1b3bf0,refactor: remove emove type judgment when defining warning props (#13553),laoxiong,2018-09-04T14:03:10Z
ff93996028acb55b4f76aa11e29eef210a213e20,Fix import of ReactDOM in server env,Dan Abramov,2018-09-04T14:00:03Z
281bd64c002981c2c53eb3374a0a840dec46ac2a,Fix test file name,Dan Abramov,2018-09-04T13:27:35Z
d6b59e3d264198a42c205c3cebc0b561e0ca9bec,Check document.documentMode once,Dan Abramov,2018-09-04T13:25:48Z
52633c84e2af140466a9771e8cfa024d6bc1a8a7,Try/finally,Dan Abramov,2018-09-04T13:21:15Z
2d4705e7532d32147da8ee61e5760124d068a8a6,"Make IE 11 not complain about non-crucial style attribute hydration mismatch (#13534)

IE 11 parses & normalizes the style attribute as opposed to other
browsers. It adds spaces and sorts the properties in some
non-alphabetical order. Handling that would require sorting CSS
properties in the client & server versions or applying
`expectedStyle` to a temporary DOM node to read its `style` attribute
normalized. Since it only affects IE, we're skipping style warnings
in that browser completely in favor of doing all that work.

Fixes #11807",Michał Gołębiowski-Owczarek,2018-09-04T13:26:51Z
25d48a7281bcb2c51927c562a43295b8ce0bd983,"Add gridArea to unitless CSS properties (#13550)

Ref #9185",Michał Gołębiowski-Owczarek,2018-09-04T11:22:21Z
877f8bc6b27da7e99f603ddac822c5adae93a4a9,Renamed schedule UMD forwarding methods to stay in-sync with SECRET_INTERNALS change (#13549),Brian Vaughn,2018-09-04T01:48:47Z
0a96f90572d650a90c4b8f1a4283e10f7cec5227,"Revert ""Extract common logic"" (#13547)

* Revert ""Fix test""

This reverts commit 17a57adde26766b8ab54c02cbd5ce013f9a659ec.

* Revert ""Extract common logic (#13535)""

This reverts commit 605da8b420207d93c034461f44775d9296830c0c.",Dan Abramov,2018-09-03T20:46:16Z
17a57adde26766b8ab54c02cbd5ce013f9a659ec,Fix test,Dan Abramov,2018-09-03T20:39:45Z
605da8b420207d93c034461f44775d9296830c0c,Extract common logic (#13535),Heaven,2018-09-03T19:57:13Z
69f9f4127a83da7f5392f4a5398481b46285df65,"Document event bubble order (#13546)

This is documenting the current order in which events are dispatched
when interacting with native document listeners and other React apps.

For more context, check out #12919.",Philipp,2018-09-03T19:39:20Z
c1ba7b8cfd6e194f5cf6b0066c708ae48fd2ad67,"Remove www scheduler fork (#13545)

Remove unused www scheduler fork",Dan Abramov,2018-09-03T18:55:58Z
b473d5f864a666c421f595f5140a42126894ffc1,Secret exports: Scheduler => Schedule (#13544),Dan Abramov,2018-09-03T18:51:30Z
6312efc34f27463ea7b62412b3bfd588cec543d4,Tweak README and description,Dan Abramov,2018-09-03T18:34:04Z
b92f947af1b5d8804026cb0e1cfa59ead7484ca5,"Rename ""react-scheduler"" package to ""schedule"" (#13543)

* Git moved packages/react-scheduler -> packages/schedule

* Global find+replace 'react-scheduler' -> 'schedule'

* Global find+replace 'ReactScheduler' -> 'Scheduler'

* Renamed remaining files ""ReactScheduler"" -> ""Schedule""

* Add thank-you note to schedule package README

* Replaced schedule package versions 0.1.0-alpha-1 -> 0.2.0

* Patched our local fixtures to work around Yarn install issue

* Removed some fixture hacks",Brian Vaughn,2018-09-03T18:27:50Z
3c1dcd349a8e4205322c296b1db8c313ed06b5ce,"Expose less internals for TestUtils (#13539)

* Expose less internals for TestUtils

* Keep EventPluginHub for www

* Reorder to simplify",Dan Abramov,2018-09-03T16:21:00Z
0b74e95d7b7fabbd0cf502d0f3254a607ed30478,"Ignore noscript content on the client (#13537)

* Ignore noscript content on the client (#11423)

* Fix failing test for ignoring noscript content

* Add a ServerIntegration test for noscript",Fredrik Höglund,2018-09-03T16:17:53Z
8a1e3962ab189b99b1593d8431feabcb4a21211b,Remove negative lookbehind from Rollup plugin that broke Node <= v8.9 (#13538),Brian Vaughn,2018-09-03T00:59:29Z
9604d26aec9f6e0ab38b63fc4a92f48b639ee1f3,Rename ReactDOMFiber* to ReactDOM* (#13540),Dan Abramov,2018-09-03T00:45:12Z
28b9289022d1d9b646b99d0747eab904767ba5d6,Tidied up scheduling UMD API forwarding test (#13533),Brian Vaughn,2018-09-01T20:05:21Z
bf8aa609257894c73c2546d9f01b76a72d2bb862,"Added Jest test to verify UMD API-forwarding for scheduling package (#13532)

* Added Jest test to verify UMD API-forwarding for scheduling package
* Added separate dev/prod UMD bundles for scheduler package",Brian Vaughn,2018-09-01T19:52:26Z
0040efc8d85923d64bee1fdf7e9029d65d01b751,Fix a typo (#13531),Heaven,2018-09-01T19:40:17Z
46950a3dfc9e14b5b91ee5823df11883f5d2466e,"Interaction tracking follow up (#13509)

* Merged interaction-tracking package into react-scheduler
* Add tracking API to FB+www builds
* Added Rollup plugin to strip no-side-effect imports from Rollup bundles
* Re-bundle tracking and scheduling APIs on SECRET_INTERNALS object for UMD build (and provide lazy forwarding methods)
* Added some additional tests and fixtures
* Fixed broken UMD fixture in master (#13512)",Brian Vaughn,2018-09-01T19:00:00Z
0452c9bba5707e4473fff17a24d36402a957dc66,Add a regression test for #4618,Dan Abramov,2018-08-31T15:40:05Z
c21bab6940b253af28f8eb99d7344d92d0babb31,Add SSR regression test for #6119,Dan Abramov,2018-08-31T15:15:05Z
0d3fc9de1019fcc69d3be0add555ea47f364059c,Add regression test for #6119,Dan Abramov,2018-08-31T15:09:29Z
0f050ad7cccfc15323dc58c630dbc0963ff15285,Make regression test better,Dan Abramov,2018-08-31T14:57:02Z
f943423231f7b82d3502d237580786a57324bead,Add a more precise regression test for #6219,Dan Abramov,2018-08-31T14:54:39Z
6ff062e048867645d1f761e23cc8ff62139ebf08,Fetch all tags in DOM fixtures,Dan Abramov,2018-08-31T13:38:43Z
a3e4d00089571b66c151b9ac1bd9c589d03b2f27,Fixed typo (#13519),Ivan,2018-08-30T23:33:47Z
b3d8c5376f1e0510963262d26e5029a9c463922f,[RN] Remove isMounted() false positive warning (#13511),Dan Abramov,2018-08-30T17:42:09Z
d2123d65699d4d8e36537e2eb3a2299e7558eefa,Sync React Native Flow Changes (#13513),Timothy Yung,2018-08-29T20:54:58Z
1c0ba70b4b753178d1bb9d9d8e32b90c50ec7e2c,"Fix test to use AsyncMode

Addresses one of the issues brought up by @NE-SmallTown in https://github.com/facebook/react/pull/13488#issuecomment-416805935",Dan,2018-08-29T12:20:14Z
6e4f7c788603dac7fccd227a4852c110b072fe16,"Profiler integration with interaction-tracking package (#13253)

* Updated suspense fixture to use new interaction-tracking API

* Integrated Profiler API with interaction-tracking API (and added tests)

* Pass interaction Set (rather than Array) to Profiler onRender callback

* Removed some :any casts for enableInteractionTracking fields in FiberRoot type

* Refactored threadID calculation into a helper method

* Errors thrown by interaction tracking hooks use unhandledError to rethrow more safely.
Reverted try/finally change to ReactTestRendererScheduling

* Added a $FlowFixMe above the FiberRoot :any cast

* Reduce overhead from calling work-started hook

* Remove interaction-tracking wrap() references from unwind work in favor of managing suspense/interaction continuations in the scheduler
* Moved the logic for calling work-started hook from performWorkOnRoot() to renderRoot()

* Add interaction-tracking to bundle externals. Set feature flag to __PROFILE__

* Renamed the freezeInteractionCount flag and replaced one use-case with a method param

* let -> const

* Updated suspense fixture to handle recent API changes",Brian Vaughn,2018-08-29T01:58:11Z
2967ebdbeabde4aab37b45946b891170c7670164,"Remove buggy unstable_deferredUpdates() (#13488)

* Add a failing test for deferredUpdates not being respected

* Don't consider deferred updates interactive

* Remove now-unnecessary setTimeout hack in the fixture

* Remove unstable_deferredUpdates",Dan Abramov,2018-08-28T17:12:51Z
1664b08f0cf6b0e79ee37f6d6a04d4a15d0d13c6,added flow types to setInnerHTML (#13495),Bryan M,2018-08-28T14:37:29Z
672e859d311536ddf5f09fb47dcb84007703aa65,"Add warning to prevent setting this.state to this.props referentially (#11658)

* add test to warn if setting this.state to this.props referentially

* Avoid an extra check",Veekas Shrivastava,2018-08-28T13:17:44Z
29287f08867e72c0f4a6a6f7523e966009520308,"Rename lowestPendingInteractiveExpirationTime (#13484)

* Rename lowestPendingInteractiveExpirationTime

* fix prettier",Heaven,2018-08-27T17:27:45Z
bb48622a3689f1641598ad1df83fabebb4e30d40,"[SSR Fixture] Update yarn.lock (#13481)

* Update yarn.lock",ryota-murakami,2018-08-27T15:28:06Z
d400d6d5ef056622ed4de4da00f97bde144c6f55,"Replace magic number 1 with ELEMENT_NODE (#13479)

* Replace magic number 1 with ELEMENT_NODE

* Add flow pragma to HTMLNodeType",Heaven,2018-08-27T15:16:24Z
340bfd9393e8173adca5380e6587e1ea1a23cefa,"Rename ReactTypeOfWork to ReactWorkTags, ReactTypeOfSideEffect to ReactSideEffectTags (#13476)

* Rename ReactTypeOfWork to ReactWorkTags

And `type TypeOfWork` to `type WorkTag`.

* Rename ReactTypeOfSideEffect too",Sophie Alpert,2018-08-26T20:40:27Z
53ddcec4f18f38e4f89a14b406d852e7a8945592,"Correct syntax in CHANGELOG (#13474)

Non-breakable space was replaced with whitespace.",Rodrigo Bermúdez Schettino,2018-08-25T18:08:20Z
5cefd9b1e230fbf680ffbe86362387749f584386,Stringify <option> children (#13465),Dan Abramov,2018-08-22T23:24:05Z
3661616c282d50d3f90cfd1fb9f8ac1bf43eaab8,"Improve test harness of submit events (#13463)

This PR includes a test that I've enabled in #13358 and another test that we've discussed in #13462 as well as some random cleanup while I'm at it.",Philipp Spieß,2018-08-22T20:46:37Z
a1be17140da0164d4dfce8e7c76e64f2d7e9216c,"Revert ""Rely on bubbling for submit and reset events (#13358)"" (#13462)

This reverts commit 725e499cfb4da60da46aa5b44c4bad29cad3d08f.",Dan Abramov,2018-08-22T18:33:42Z
90c92c7007628aec73fc3302df70274a614ad309,Fix warning message,Dan Abramov,2018-08-21T17:44:34Z
5cb0f2bf518e28be6526eb16cccb9b818d3d26cf,Change www error shim API (#13454),Dan Abramov,2018-08-21T17:38:27Z
e106b8c44f9a81058f250c7ee37b61ae0094455e,"Warn about unsafe toWarnDev() nesting in tests (#12457)

* Add lint run to warn about improperly nested toWarnDev matchers
* Updated tests to avoid invalid nesting",Brian Vaughn,2018-08-21T14:43:02Z
026aa9c97813ee8e9886e2c9035a332f93c38720,"Bumped version to 16.4.3-alpha.0 (#13448)

* Bumped version to 16.4.3-alpha.0
* Bump react-is peer dep version in react-test-renderer",Brian Vaughn,2018-08-20T21:28:43Z
3cae7543be5eecf4d9b70bc366b79a402044e0ec,Update scroll restoration logic in suspense fixture (#13437),Matt Hamlin,2018-08-20T21:01:12Z
d670bdc6b1ed4fc8c0c935aa26a2d448c969e0e9,Warn about ReactDOM.createPortal usage within ReactTestRenderer (#12895),Brian Vaughn,2018-08-20T17:03:22Z
bf1abf478bc14677c105ba397b14efb91401499e,"Fix React.lazy(forwardRef) (#13446)

* Fix React.lazy(forwardRef)

* Forbid bad typeof",Dan Abramov,2018-08-20T16:28:04Z
e8571c798d56ad19b57ae762afa260a76939aa8c,Tweak ReactTypeOfWork order (#13444),Dan Abramov,2018-08-20T15:51:09Z
973496b40ce6fcb84f3df20aa1c73af5bc4db0d4,"Fix component name for React.lazy (#13443)

* Fix component name for React.lazy

* Fix lint",Dan Abramov,2018-08-20T15:43:25Z
0beb2ee76b96ffb1c15a1770a6907ea1cd5a5696,"Fix incorrect legacy context for factory components (#13441)

* Add a repro case for context bug

* Be explicit about whether context has been pushed

* Put cheaper check first

* Naming",Dan Abramov,2018-08-20T15:08:46Z
004cb21bbb5db92734f763b44419d0c4d071c873,"Short circuit the logic for exporting a module (#13392)

* short circuit some logic

* revert back to ternary operator",Joseph,2018-08-20T11:29:40Z
f7a538c913d20d8292d7a17127ecca9910a2d351,"Remove getTextContentAccessor (#13434)

According to caniuse the only browsers that don't support textContent
are <=IE8, which we no longer support.",Brandon Dail,2018-08-20T11:28:41Z
d1c42d2f1ec706c2d6f424f30bd6ae430e665787,"Remove addEventListener check in isEventSupported (#13435)

* Remove addEventListener check in isEventSupported

All browsers we support also support addEventListener, so this check is
unncessary

* Remove capture argument from isEventSupported",Brandon Dail,2018-08-20T11:26:06Z
a869f992a88692f9d9a964e20ee7dc844bc7760a,"Remove helper object from FallbackCompositionState (#13430)

There's no good reason for this to be an object. This refactors it so
that we just use three variables instead. We can avoid the property reads/writes and also minify better, since property names don't get mangled but variables do.",Brandon Dail,2018-08-18T14:07:12Z
0cd8d470da69793f7e8efcfa830012637b01757a,"Do not toLowerCase lists of lowercase words (#13428)

* Do not toLowerCase lists of lowercase words

* Add notes about downcasing to DOMProperty.js

* Use consistent comment breakout

* Make toLowerCase more obvious",Nathan Hunzaker,2018-08-18T02:52:30Z
b3a4cfea577e3333941a7cb2b01d2b957988e00b,"Trap click events for portal root (#11927)

* Trap click events for portal root

* Trap click event on container in appendChildToContainer

* Add a comment",Brandon Dail,2018-08-18T01:10:20Z
0da5102cf02890a4e006f4d949ae4fbf2bfd85af,"Add interaction-tracking/subscriptions (#13426)

* Removed enableInteractionTrackingObserver as a separate flag; only enableInteractionTracking is used now

* Added interaction-tracking/subscriptions bundle and split tests

* Added multi-subscriber support

* Moved subscriptions behind feature flag

* Fixed bug with wrap() parameters and added test

* Replaced wrap arrow function",Brian Vaughn,2018-08-17T20:45:18Z
4b32f525e1233df1bd90cbd1df7da1cd329ca44a,"Refactor away some namespace imports (#13427)

* Replace some namespace imports

* Simplify the controlled component injection

* Simplify the batching injection

* Simplify the component tree injection",Dan Abramov,2018-08-17T20:17:37Z
d2f5c3fbc211a2ff257c43c879f3213d95f31222,"Don't diff memoized host components in completion phase (#13423)

* Add a regression test for 12643#issuecomment-413727104

* Don't diff memoized host components

* Add regression tests for noop renderer

* No early return

* Strengthen the test for host siblings

* Flow types",Dan Abramov,2018-08-17T17:13:46Z
5e0f073d509a74353533233706fce2e8044a0a15,"interaction-tracking package (#13234)

Add new interaction-tracking package/bundle",Brian Vaughn,2018-08-17T16:16:05Z
d14e443d6e97f6f4ca80d2e9a80300690b71e3c4,Resume onSelect tracking after dragend (#13422),Dan Abramov,2018-08-16T23:22:16Z
146c9fb30763f84d85782dda82902f8513e70867,Update attribute table for master (#13421),Nathan Hunzaker,2018-08-16T20:40:11Z
d5edc1f51eeb7ab0d43c57e8abafdbd075d64fe0,"Remove unused ReactCall & ReactReturn types (#13419)

These are no longer used after the removal of the `react-call-return` package.",Esteban,2018-08-16T17:48:13Z
4fa20b53b75f1a59706a949e50c023f08fd191a2,"Don't pass instanceHandle to clones (#13125)

We will instead just reuse the first one.",Sebastian Markbåge,2018-08-16T16:54:12Z
fe959eea731b4de0c970f753dfa9d0f6b010b63d,"React.lazy (#13398)

Lazily starts loading a component the first time it's rendered. The
implementation is fairly simple and could be left to userspace, but since
this is an important use case, there's value in standardization.",Andrew Clark,2018-08-16T16:43:32Z
2b30828000a58eaf6adfc3ba2cbedd4bff4d077b,Fix wrong Flow return type,Andrew Clark,2018-08-16T16:29:17Z
5031ebf6beddf88cac15f4d2c9e91f8dbb91d59d,"Accept promise as element type (#13397)

* Accept promise as element type

On the initial render, the element will suspend as if a promise were
thrown from inside the body of the unresolved component. Siblings should
continue rendering and if the parent is a Placeholder, the promise
should be captured by that Placeholder.

When the promise resolves, rendering resumes. If the resolved value
has a `default` property, it is assumed to be the default export of
an ES module, and we use that as the component type. If it does not have
a `default` property, we use the resolved value itself.

The resolved value is stored as an expando on the promise/thenable.

* Use special types of work for lazy components

Because reconciliation is a hot path, this adds ClassComponentLazy,
FunctionalComponentLazy, and ForwardRefLazy as special types of work.
The other types are not supported, but wouldn't be placed into a
separate module regardless.

* Resolve defaultProps for lazy types

* Remove some calls to isContextProvider

isContextProvider checks the fiber tag, but it's typically called after
we've already refined the type of work. We should get rid of it. I
removed some of them in the previous commit, and deleted a few more
in this one. I left a few behind because the remaining ones would
require additional refactoring that feels outside the scope of this PR.

* Remove getLazyComponentTypeIfResolved

* Return baseProps instead of null

The caller compares the result to baseProps to see if anything changed.

* Avoid redundant checks by inlining getFiberTagFromObjectType

* Move tag resolution to ReactFiber module

* Pass next props to update* functions

We should do this with all types of work in the future.

* Refine component type before pushing/popping context

Removes unnecessary checks.

* Replace all occurrences of _reactResult with helper

* Move shared thenable logic to `shared` package

* Check type of wrapper object before resolving to `default` export

* Return resolved tag instead of reassigning",Andrew Clark,2018-08-16T16:21:59Z
77b7a660b93913bf1fafb34ddff692b383bdc052,"fix: do not reconcile children that are iterable functions (#13416)

* fix: do not reconcile children that are iterable functions

* fix: remove fit

* Refactor comparison to exclude anything that isnt an object

* Remove redundant undefined check",Rauno Freiberg,2018-08-16T15:38:10Z
cb7745c6cf13841a7cfbe4cd6868bdc7a00f2f26,remove unused state initialValue from ReactDOMFiberSelect (#13412),Kartik Lad,2018-08-16T14:55:57Z
9832a1b6d5df06c3d2a54febe2ab3de43ace02fc,"Avoid setting empty value on reset & submit inputs (#12780)

* Avoid setting empty value on reset & submit inputs

* Update ReactDOMFiberInput.js

* More test coverage",Ellis Clayton,2018-08-16T14:19:03Z
8862172fa3d9f30ea6a7c1072bdae068e9794856,Provide a better error message (#12421),Aaron Brager,2018-08-16T13:54:45Z
5816829170662eed09e9681ce387d5672fc3da31,De-duplicate commitUpdateQueue effect commit (#13403),Ruud Burger,2018-08-15T18:21:08Z
1bc975d073dd6f60217d645b43a84e79f96a216b,"Don't stop context traversal at matching consumers (#13391)

* Don't stop context traversal at matching consumers

Originally, the idea was to time slice the traversal. This worked when
there was only a single context type per consumer.

Now that each fiber may have a list of context dependencies, including
duplicate entries, that optimization no longer makes sense – we could
end up scanning the same subtree multiple times.

* Remove changedBits from context object and stack

Don't need it anymore, yay",Andrew Clark,2018-08-15T18:19:53Z
83e446e1d846cc0fef4aae473ab8244f6e163a34,"Refactor ReactErrorUtils (#13406)

* Refactor ReactErrorUtils

* Remove unnecessary assignments",Dan Abramov,2018-08-15T18:02:11Z
13fa96a54743780246efb9cba5a24b1d6838a2e4,Improve bad ref invariant (#13408),Dan Abramov,2018-08-15T17:30:17Z
b2adcfba32d133aabdbc182bba1001e729060abe,"Don't suppress jsdom error reporting in our tests (#13401)

* Don't suppress jsdom error reporting

* Address review",Dan Abramov,2018-08-15T16:44:46Z
69e2a0d732e1ca74f6dc5df9d0ddd0bf24373965,"Ability to access window.event in development (#11687) (#11696)

Before this change in development window.event was overridden
in invokeGuardedCallback.

After this change window.event is preserved in the browsers that
support it.",Conrad Irwin,2018-08-14T20:35:31Z
ade4dd3f6fb542677627001fe7e3477b27de96e2,"Fix typo in a comment (#13373)

* Typo

* Changed to use rest parameter

* 'Bugfix'

* Typo fix",davidblnc,2018-08-14T19:58:35Z
2c59076d26e6b5ffb39dab82e1cc0decb6ed30ae,"Warn when ""false"" or ""true"" is the value of a boolean DOM prop (#13372)

* Warn when the string ""false"" is the value of a boolean DOM prop

* Only warn on exact case match for ""false"" in DOM boolean props

* Warn on string ""true"" as well as ""false"" in DOM boolean props

* Clarify warnings on ""true"" / ""false"" values in DOM boolean props",Moti Zilberman,2018-08-14T19:51:33Z
24b0ed7a2e6327550f1ae44823b0f132f47f6bbd,"Remove 'flow-coverage-report' script. (#13395)

`flow-coverage-report` stopped working after Flow was set to run for each renderer separately (#12846). As discussed in #13393, this is hard to fix without adding complexity to `.flowconfig`'s generation.",Esteban,2018-08-14T18:21:57Z
de5102c4cd9a0ece37872c5a1c6b1e1345b8afef,"Ignore symbols and functions in select tag (#13389)

* wip: ignore symbols and functions in select tag

* fix: Use ToStringValue as a maybe type

* refactor: remove unnecessary test

* refactor: remove implicit return from tests",Rauno Freiberg,2018-08-14T17:31:41Z
e3d5b5ea7f9287e98d95ef13093684100c2e35c7,"DOM fixture updates (#13368)

* Add home component. Async load fixtures.

This commit adds a homepage to the DOM fixtures that includes browser
testing information and asynchronously loads fixtures.

This should make it easier to find DOM testing information and keep
the payload size in check as we add more components to the fixtures.

* Update browser support fields

* Tweak select width

* Fix typo

* Report actual error when fixture fails to load

* Update browser information

* Update browserstack subscription info

* English

* Switch let for const in fixture loader",Nathan Hunzaker,2018-08-14T14:32:52Z
d04d03e4701192abf95c58ff50683b37db6c6eae,"Fix passing symbols and functions to textarea (#13362)

* refactor: move getSafeValue to separate file

* fix(?): ReactDOMFiberTextarea sanitization for symbols and functions

* tests: add TODOs for warnings

* fix: restore accidentally removed test

* fix: remove redundant logic for initialValue

* refactor: integrate SafeValue typings into textarea

* fix: restore stringified newValue for equality check

* fix: remove getSafeValue from hostProps

* refactor: SafeValue -> ToStringValue

* refactor: update TODO comment in test file

* refactor: no need to convert children to ToStringValue",Rauno Freiberg,2018-08-14T14:16:48Z
5550ed4a8f33ff562e807175b8f35a1f9e037670,"Ensure arguments are coerced to strings in warnings (#13385)

* Manually join extra attributes in warning

This prevents a bug where Chrome reports `Array(n)` where `n` is the
size of the array.

* Prettier

* Stringify all %s replaced symbols in warning

* Eliminate extra string coercion

* Pass args through with spread, convert all arguments to strings

* Rename strings to stringArgs",Nathan Hunzaker,2018-08-13T23:13:51Z
3938ccc88aa3dcc5a4460474bda40af97dd6e234,"Allow the user to opt out of seeing ""The above error..."" addendum (#13384)

* Remove e.suppressReactErrorLogging check before last resort throw

It's unnecessary here. It was here because this method called console.error().
But we now rethrow with a clean stack, and that's worth doing regardless of whether the logging is silenced.

* Don't print error addendum if 'error' event got preventDefault()

* Add fixtures

* Use an expando property instead of a WeakSet

* Make it a bit less fragile

* Clarify comments",Dan Abramov,2018-08-13T20:33:55Z
47e217a77d302cdafed76f92119252e9bdae94f0,"Provide component reference in ReactDOMFiberTextarea warnings (#13361)

* Provide component reference if possible in ReactDOMFiberTextarea.js warning

* Nits",Rauno Freiberg,2018-08-13T14:55:56Z
714c78d5a16747d0f7f8179b66aacbd10ec9d3dd,"Fixtures nits (#13375)

* fix: PropTypes failing in textarea fixtures

* fix: Iframe title attribute in fixtures

* Make description a optional prop in FixtureSet",Rauno Freiberg,2018-08-13T14:08:44Z
a0190f828f260202392d58d43acc252b7ac97c59,"Rename SafeValue to ToStringValue (#13376)

Following up on the changes I made in #13367, @gaearon suggest that
""safe"" could be read as necessary for security. To avoid misleading a
reader, I'm changing the name.

A few names where discussed in the previous PR. I think `ToStringValue`
makes sense since the value itself is not a string yet but an opaque
type that can be cast to a string. For the actual string concatenation,
I've used `toString` now to avoid confusion: `toStringValueToString`
is super weird and it's namespaced anyhow.

Definitely open for suggestions here. :) I'll wait until we wrap up
#13362 and take care of rebase afterwards.",Philipp Spieß,2018-08-13T13:58:59Z
d1e589137fcbab5e3a59ec6ccba0e3951b7b8eee,"Fix fixture title (#13377)

about time I made a significant commit to the react project directly",Ryan Florence,2018-08-13T00:12:31Z
33602d435a351404bc8a29b2dc461fc376e1cbaf,"Improve soundness of ReactDOMFiberInput typings (#13367)

* Improve soundness of ReactDOMFiberInput typings

This is an attempt in improving the soundness for the safe value cast
that was added in #11741. We want this to avoid situations like [this
one](https://github.com/facebook/react/pull/13362#discussion_r209380079)
where we need to remember why we have certain type casts. Additionally
we can be sure that we only cast safe values to string.

The problem was `getSafeValue()`. It used the (deprecated) `*` type to
infer the type which resulted in a passing-through of the implicit `any`
of the props `Object`. So `getSafeValue()` was effectively returning
`any`.

Once I fixed this, I found out that Flow does not allow concatenating
all possible types to a string (e.g `"""" + false` fails in Flow). To
fix this as well, I've opted into making the SafeValue type opaque and
added a function that can be used to get the string value. This is sound
because we know that SafeValue is already checked.

I've verified that the interim function is inlined by the compiler and
also looked at a diff of the compiled react-dom bundles to see if I've
regressed anything. Seems like we're good.

* Fix typo",Philipp Spieß,2018-08-12T15:14:05Z
ae855cec2207a1097dd2115dac96340d1261726f,"Support tangentialPressure and twist fields of pointer events (#13374)

While working on https://github.com/facebook/flow/pull/6728 I noticed React's recently-added `SyntheticPointerEvent` was missing the [`tangentialPressure`](https://www.w3.org/TR/pointerevents/#dom-pointerevent-tangentialpressure) and [`twist`](https://www.w3.org/TR/pointerevents/#dom-pointerevent-twist) fields. I couldn't find any reason for their omission in https://github.com/facebook/react/pull/12507 (nor in the spec) so I assume they were meant to be included, like the rest of `PointerEvent`. This PR adds these two fields to `SyntheticPointerEvent`.",Moti Zilberman,2018-08-12T13:16:23Z
725e499cfb4da60da46aa5b44c4bad29cad3d08f,"Rely on bubbling for submit and reset events (#13358)

* Bring back onSubmit bubble test

I found a test that was written more than 5 years ago and probably never
run until now. The behavior still works, although the API changed quite
a bit over the years.

Seems like this was part of the initial public release already:

https://github.com/facebook/react/commit/75897c2dcd1dd3a6ca46284dd37e13d22b4b16b4#diff-1bf5126edab96f3b7fea034cd3b0c742R31

* Rely on bubbling for submit and reset events

* Update dom fixture lockfile

* Revet rollup results

Whoopsie.",Philipp Spieß,2018-08-10T19:10:35Z
e07a3cd28f3b360755d6832a01d724a3b7576bc4,fix typo on inline comment (#13364),Alex Rohleder,2018-08-10T15:51:06Z
e0204084a03e04103864ab36df9456c99bd4ae1b,Fix typos detected by github.com/client9/misspell (#13349),Kazuhiro Sera,2018-08-10T13:06:08Z
be4533af7d29f020499d3c01931e55ef8666a419,"Fix hydration of non-string dangerousSetInnerHTML.__html (#13353)

* Consistently handle non-string dangerousSetInnerHTML.__html in SSR

* Add another test",Dan Abramov,2018-08-09T17:05:05Z
0072b59984f0743b95664557c17904e8c0912ec5,Improve scry() error message for bad first argument (#13351),Dan Abramov,2018-08-09T14:05:44Z
d59b993a746548aaa7b9dad43461ec41ca08827b,"Make nicer stacks DEV-only

No need to spend production bytes on this.",Dan,2018-08-09T02:44:53Z
54d86eb8227255b207c8a82619d374738b542ca8,"Improve display of filenames in component stack (#12059)

* Improve display of filenames in component stack

* Add explanatory comment

* tests: add tests for component stack trace displaying

* Tweak test

* Rewrite test and revert implementation

* Extract a variable

* Rewrite implementation",Billy Janitsch,2018-08-09T02:33:30Z
067cc24f55ef01a233be9e7564b337e35fed72ea,"Profiler actualDuration bugfix (#13313)

* Simplified profiler actualDuration timing

While testing the new DevTools profiler, I noticed that sometimes– in larger, more complicated applications– the actualDuration value was incorrect (either too large, or sometimes negative). I was not able to reproduce this in a smaller application or test (which sucks) but I assume it has something to do with the way I was tracking render times across priorities/roots. So this PR replaces the previous approach with a simpler one.

* Changed bubbling logic after chatting out of band with Andrew

* Replaced __PROFILE__ with feature-flag conditionals in test

* Updated test comment",Brian Vaughn,2018-08-08T16:42:53Z
1209ae50f3490b76d2de777837359f8c1ad910fa,"Bump ""fbjs-scripts"" to remove Babel 5 from dependencies (#13344)",Bartosz Kaszubowski,2018-08-08T10:43:35Z
3cfab14b96a55d53ba5784a9915b8c1660da08be,"Treat focusable as enumerated boolean SVG attribute (#13339)

* Treat focusable as enumerated boolean attribute

* Update attribute table",Dan Abramov,2018-08-07T18:39:56Z
a66217b5716a5a32e6fb80bd1774610b05c4be12,"Update attribute table (#13343)

* Update table for React 16.3

* Update table for master

* Re-run the table with recent Chrome",Dan Abramov,2018-08-07T18:35:28Z
212437eaf0eeba31afaf1afec10b9d394c4c5d47,"Remove unused dependencies from workspace root. (#13340)

Remove 'async', 'bundle-collapser', 'del', 'derequire', 'escape-string-regexp', 'git-branch', 'gzip-js',
'merge-stream', 'platform', 'run-sequence' & 'yargs'.

Most of them were used in the old Grunt build system.

This ends up removing 32 packages, according to yarn.lock.",Esteban,2018-08-07T10:38:25Z
3b3b7fcbbdc734d7f2a2e509a0b07c0eb053f779,Don't search beyond Sync roots for highest priority work (#13335),Dan Abramov,2018-08-07T00:59:18Z
43a137d9c13064b530d95ba51138ec1607de2c99,Fix undefined variable on suspense fixture (#13325),nico,2018-08-05T14:28:08Z
08e32263f9e347a1713bdd6714d7a76d0019991a,"Fix Prettier ""No parser"" warning while building (#13323)",Bartosz Kaszubowski,2018-08-05T01:50:58Z
f8456b2ecbf194d19d70ff057f251cbc5814bc34,"refactor: remove promise on checkModule (#13318)

* refactor: remove promise on checkModule
* refactor: use forEach instead of map for checkModule",Clark Du,2018-08-03T20:25:31Z
61122347ddf4ffc7a932ab0ec28042377f7323a7,"Suspense/UserPage: id -> name (#13320)

* Suspense/UserPage: id -> name

* Suspense/UserPage: review -> repo",Alexey Raspopov,2018-08-03T19:59:34Z
c0bf34c9c4fea14abb2764edb3d4e36f5be26525,Suspense/Spinner: class -> className (#13319),Alexey Raspopov,2018-08-03T19:17:36Z
ac72388563c4b7010f191aa9138a2ea81969a399,"Add support for auxclick event (#11571)

* Add support for auxclick event

* Add to simpleEventPLugin

* Add auxclick as interactive event type in SimpleEventPlugin

* Update ReactTestUtils fixture to include auxClick",Jason Quense,2018-08-03T18:57:34Z
75491a8f4b5924424b94198e7a56b3519f6430c6,"Add a regression test for #12200 (#12242)

* fix selectedIndex in postMountWrapper in ReactDOMFiberSelected

* comment in ReactDomFiberSelect in postMountWrapper for selectedIndex fix

* test for selectedIndex fix

* set boolean value for multiple

* Revert the fix which has been fixed on master",Gareth Small,2018-08-03T17:10:18Z
2d0356a5243b880a8bff853a6bbde97f223dbacf,"Make sure that `select` has `multiple` attribute set to appropriate state before appending options (#13270)

* Make sure that `select` has `multiple` attribute set to appropriate state before appending options
fixes #13222

* Add dom test fixture to test long multiple select scrolling to the first selected option
fixes #13222

* typo fix

* update comment
remove redundant conversion to bool type

* change a way of assigning property to domElement

* Remove unused ref on select fixture form",Dmytro Zasyadko,2018-08-03T17:05:25Z
b179bae0ae3a9d80bfbe440c8861786b7f928ce1,"Enhance get derived state from props state warning - #12670 (#13317)

* Enhance warning message for missing state with getDerivedStateFromProps

* Adapt tests

* style fix

* Tweak da message

* Fix test",Felix Wu,2018-08-03T15:09:57Z
fa824d092195713bf85d56cbda8bad976bbc1900,Fix lint,Dan,2018-08-03T12:31:20Z
f265d545a14df19ac3654c3e8a4a5298708b504e,"Suspense fixture placeholder styling improvement (#13314)

Vertically and horizontally center 'large' placeholder spinner in suspense demo
as per @gaearon's tweet:
https://twitter.com/dan_abramov/status/1025190261784289280",Alex Jegtnes,2018-08-03T12:08:45Z
15a8f031838a553e41c0b66eb1bcf1da8448104d,"Fix ambiguity in doc comment for isValidElement (#12826)

`isValidElement(object)` checks if object is a ReactElement.

`@return {boolean} True if `object` is a valid component.` leading to confusion which was described in several blog posts:
- https://reactjs.org/blog/2015/12/18/react-components-elements-and-instances.html
- https://medium.com/@fay_jai/react-elements-vs-react-components-vs-component-backing-instances-14d42729f62",Alexey,2018-08-03T04:32:41Z
5cff212072beb58b00e6475d1cd2d57413f73e2c,add flowtype to function signature (#13285),ryota-murakami,2018-08-03T04:23:07Z
261da3f0a95457bf14cd71f262b2003d64468dc9,Update fixture instructions,Dan Abramov,2018-08-03T00:56:03Z
b565f495319750d98628425d120312997bee410b,"Minimally support iframes (nested browsing contexts) in selection event handling (#12037)

* Prefer node’s window and document over globals

* Support active elements in nested browsing contexts

* Avoid invoking defaultView getter unnecessarily

* Prefer node’s window and document over globals

* Support active elements in nested browsing contexts

* Avoid invoking defaultView getter unnecessarily

* Implement selection event fixtures

* Prefer node’s window and document over globals

* Avoid invoking defaultView getter unnecessarily

* Fix react-scripts to work with alphas after 16.0.0

The current logic just checks if the version is an alpha with a major version of 16 to account for weirdness with the 16 RC releases, but now we have alphas for newer minor releases that don't have weirdness

* Run prettier on new selection events fixtures

* Add fixture for onSelect in iframes, remove DraftJS fixture

The DraftJs fixture wasn't really working in all supported browsers anyways, so just drop it and try to cover our bases without using it directly

* Purge remnants of draft.js from fixtures

* Use prop-types import instead of window global

* Make fixtures’ Iframe component Firefox-compatible

* Fix switch case for SelectionEventsFixture

* Remove draft.js / immutable.js dependencies

* Cache owner doc as var to avoid reading it twice

* Add documentation for getActiveElementDeep to explain try/catch

Add documentation for getActiveElementDeep to explain try/catch

* Ensure getActiveElement always returns DOM element

* Tighten up isNode and isTextNode

* Remove ie8 compatibility

* Specify cross-origin example in getActiveElementDeep

* Revert back to returning null if document is not defined",Andrew Patton,2018-08-02T22:23:07Z
1609cf3432659a2e793a24ca0f786089257f2a05,"Warn about rendering Generators (#13312)

* Warn about rendering Generators

* Fix Flow

* Add an explicit test for iterable

* Moar test coverage",Dan Abramov,2018-08-02T19:04:03Z
46d5afc54dbd4d44b370f0a066021678d3a332ac,"Replace console.error() with a throw in setTimeout() as last resort exception logging (#13310)

* Add a regression test for #13188

* Replace console.error() with a throw in setTimeout() as last resort

* Fix lint and comment

* Fix tests to check we throw after all

* Fix build tests",Dan Abramov,2018-08-02T17:16:47Z
b3b80a48355ca6dbb61e09f2ef4975be0b973fa4,"Inject react-art renderer into react-devtools (#13173)

* Inject react-art renderer into react-devtools

This commit makes react-art renderer to be injected to react-devtools,
so that component tree of the renderer is presented on debug panel of browser.

* Update ReactART.js",Yunchan Cho,2018-08-02T11:04:31Z
5e8beec84b83d6f1836071b5c187fbd95a839b96,Add a regression test for #11602,Dan Abramov,2018-08-02T01:46:08Z
470377bbdb1874eec247a082ce418b0d26c43af6,"Remove extraneous condition

It's covered by a check below.",Dan Abramov,2018-08-02T01:33:52Z
ad17ca639b9d9e2be5cfa8b40c9ad084f35e4c12,Fix Prettier,Dan Abramov,2018-08-02T01:29:15Z
6db080154b8a24a1af5385630e41dc814ede037b,"Remove irrelevant suggestion of a legacy method from a warning (#13169)

* Edit warn message what use deprecated lifecycle method

* delete setState warn message about prescriptive and deprecated life cycle

* fix lint

* Prettier

* Formatting",Ideveloper,2018-08-02T01:11:17Z
fddb23601f1a1328756bcb74da3e5bc0c7a762ba,Tweak other fixture instructions,Dan Abramov,2018-08-02T00:36:44Z
95738e5cfdd0f6ee2556bb1c95d85d1ab4b35167,Tweak fixture instructions,Dan Abramov,2018-08-02T00:34:08Z
d79238f1eeb6634ba7a3df23c3b2709b56cbb8b2,"add nodejs 10 to windows test (#13241)

* add nodejs 10 to windows test

* remove node 8 for better build speed",Jiawen Geng,2018-08-02T00:09:37Z
ae63110335dd1bf83188940d0209a8d58dd7cc9b,"Fix time slicing fixture (#13305)

* Fix time slicing fixture

* Remove unused option",Dan Abramov,2018-08-01T23:02:24Z
e341e503b2659a1227c3900d1c94b30d054100f0,Move async fixtures (#13304),Dan Abramov,2018-08-01T21:21:26Z
00cd4444e2a8ad3c48188b5c0e3db37842d867f0,"[WIP] Add suspense fixtures for IO and CPU demo (#13295)

Add suspense fixtures for IO and CPU demo",Brian Vaughn,2018-08-01T21:10:28Z
41f6d8cc7acb13d31b05783b958fa993d67cae68,Fix incorrect changelog entry for 16.3.3,Dan Abramov,2018-08-01T20:12:51Z
0624c719f4c228281a8b0a9145418f739b0bf8ad,Add 16.4.2 and other releases to changelog,Dan Abramov,2018-08-01T19:29:05Z
f60a7f722cfd0083ca43387798dde7cd95b2fe26,Fix SSR crash on a hasOwnProperty attribute (#13303),Dan Abramov,2018-08-01T19:23:19Z
ff41519ec2fea37643ecae7f87f8e15856247faf,Sanitize unknown attribute names for SSR (#13302),Dan Abramov,2018-08-01T19:23:10Z
c44c2a21614ed2e5d3078dcb24dc7ef086df24be,"More helpful message when passing an element to createElement() (#13131)

* [#13130] Add a more helpful message when passing an element to createElement()

* better conditional flow

* update after review

* move last condition inside last else clause

* Added test case

* compare 25132typeof to REACT_ELEMENT_TYPE

* runs prettier

* remove unrelated changes

* Tweak the message",Dylan Cutler,2018-08-01T17:45:08Z
28cd494bdfcae0282e596211e982e120f60168f9,Refactor validateDOMNesting a bit (#13300),Dan Abramov,2018-08-01T16:08:03Z
b381f4141147931f9af8a79555d155b0e496e672,"Allow Electrons <webview> tag (#13301)

Fixes #13299

Adds Electrons <webview> tag to the attribute whitelist.",Philipp Spieß,2018-08-01T16:07:52Z
0182a74632b66a226921ca13dcfe359c67e15c6f,"Fix a crash when using dynamic children in <option> tag (#13261)

* Make option children a text content by default

fix #11911

* Apply requested changes

- Remove meaningless comments
- revert scripts/rollup/results.json

* remove empty row

* Update comment

* Add a simple unit-test

* [WIP: no flow] Pass through hostContext

* [WIP: no flow] Give better description for test

* Fixes

* Don't pass hostContext through

It ended up being more complicated than I thought.

* Also warn on hydration",Konstantin Yakushin,2018-08-01T15:16:34Z
2a2ef7e0fd86612404676b15bb3dd9df7ade536e,"Remove unnecessary branching from updateContextProvider (#13282)

This code had gotten unnecessarily complex after some recent changes.
Cleaned it up a bit.",Andrew Clark,2018-07-27T20:42:17Z
840cb1a2683dd7c0f3beafd094081d16b636721e,Add an invariant to createRoot() to validate containers (#13279),Dan Abramov,2018-07-27T14:50:20Z
bc1ea9cd96c81467c574b134349eafc303835d0e,"Handle errors thrown in gDSFP of a module-style context provider (#13269)

Context should be pushed before calling any user code, so if it errors
the stack unwinds correctly.",Andrew Clark,2018-07-25T21:22:27Z
0154a79fedef38a824a837c535bc853013dd4588,"Remove 'warning' module from the JS scheduler (#13264)

* Remove 'warning' module from the JS scheduler

**what is the change?:**
See title

**why make this change?:**
Internally the 'warning' module has some dependencies which we want to
avoid pulling in during the very early stages of initial pageload. It is
creating a cyclical dependency.

And we wanted to remove this dependency anyway, because this module
should be kept small and decoupled.

**test plan:**
- Tested the exact same change internally in Facebook.com
- Ran unit tests
- Tried out the fixture

**issue:**
Internal task T31831021

* check for console existence before calling console.error

* Move DEV check into separate block",Flarnie Marchan,2018-07-25T15:58:18Z
dbd16c8a9624731a5e4ecadc9eef6c0e2d225d84,"Add @flow directive to findDOMNode shim (#13265)

* Add @flow directive to findDOMNode shim",Brian Vaughn,2018-07-24T21:53:54Z
ca0941fce3a03592530f6111f77cbc9c0daf79af,"Add regression test for Placeholder fallbacks with lifecycle methods (#13254)

Found by @rhagigi

Co-authored-by: Royi Hagigi <rhagigi@gmail.com>
Co-authored-by: Andrew Clark <acdlite@me.com>",Andrew Clark,2018-07-24T00:47:40Z
a32c727f2e24bc2e8b5f532420a52b1bae2f98af,"Optimize readContext for Subsequent Reads of All Bits (#13248)

This is likely the common case because individual component authors
will casually call read on common contexts like the cache, or cache
provider.

Where as libraries like Relay only call read once per fragment and pass
all observed bits at once.",Sebastian Markbåge,2018-07-22T03:13:46Z
2b509e2c8c8c1fbc33ae59ce7c7dca0107732ff4,"[Experimental] API for reading context from within any render phase function (#13139)

* Store list of contexts on the fiber

Currently, context can only be read by a special type of component,
ContextConsumer. We want to add support to all fibers, including
classes and functional components.

Each fiber may read from one or more contexts. To enable quick, mono-
morphic access of this list, we'll store them on a fiber property.

* Context.unstable_read

unstable_read can be called anywhere within the render phase. That
includes the render method, getDerivedStateFromProps, constructors,
functional components, and context consumer render props.

If it's called outside the render phase, an error is thrown.

* Remove vestigial context cursor

Wasn't being used.

* Split fiber.expirationTime into two separate fields

Currently, the `expirationTime` field represents the pending work of
both the fiber itself — including new props, state, and context — and of
any updates in that fiber's subtree.

This commit adds a second field called `childExpirationTime`. Now
`expirationTime` only represents the pending work of the fiber itself.
The subtree's pending work is represented by `childExpirationTime`.

The biggest advantage is it requires fewer checks to bailout on already
finished work. For most types of work, if the `expirationTime` does not
match the render expiration time, we can bailout immediately without
any further checks. This won't work for fibers that have
`shouldComponentUpdate` semantics (class components), for which we still
need to check for props and state changes explicitly.

* Performance nits

Optimize `readContext` for most common case",Andrew Clark,2018-07-20T23:49:06Z
5776fa3fcff2c93491e95c261d98af3cebf2cac9,Update www warning shim (#13244),Dan Abramov,2018-07-20T15:50:43Z
3d3506d37d6a3b398e29696458f696e86ec5d576,"Include Modes in the component stack (#13240)

* Add a test that StrictMode shows up in the component stack

The SSR test passes. The client one doesn't.

* Include Modes in component stack

* Update other tests to include modes",Dan Abramov,2018-07-19T21:11:59Z
71b4e99901a98396ca34655e0cc1c03eadcbc49b,"[react-test-renderer] Jest matchers for async tests (#13236)

Adds custom Jest matchers that help with writing async tests:

- `toFlushThrough`
- `toFlushAll`
- `toFlushAndThrow`
- `toClearYields`

Each one accepts an array of expected yielded values, to prevent
false negatives.

Eventually I imagine we'll want to publish this on npm.",Andrew Clark,2018-07-19T17:26:24Z
8121212f0db77a263a778a658c59ed7ba1f71d2d,Fix warning extraction script,Dan Abramov,2018-07-19T12:04:56Z
2a1bc3f74c1d0f1f12359216d1c57ab6e73867dd,Format messages in unexpected console.error() test failure,Dan Abramov,2018-07-19T11:15:01Z
2c560cb9952c05fb0a45aed87723c9a8bf6ff8d4,"Fix unwinding starting with a wrong Fiber on error in the complete phase (#13237)

* Add a repro case for profiler unwinding

This currently fails the tests due to an unexpected warning.

* Add a regression test for context stack

* Simplify the first test case

* Update nextUnitOfWork inside completeUnitOfWork()

The bug was caused by a structure like this:

    </Provider>
  </div>
</errorInCompletePhase>

We forgot to update nextUnitOfWork so it was still pointing at Provider when errorInCompletePhase threw. As a result, we would try to unwind from Provider (rather than from errorInCompletePhase), and thus pop the Provider twice.",Dan Abramov,2018-07-19T01:16:10Z
ead08827d05c6d292cb5953355dccc19553a1215,"Add more flexibility in testing errors in begin/complete phases (#13235)

* Add more flexibility in testing errors in begin/complete phases

* Update too",Dan Abramov,2018-07-18T23:23:10Z
e4e58343e4d869adc9e3ad725dbaba5b9aff6d75,"Move unstable_yield to main export (#13232)

The `yield` method isn't tied to any specific root. Putting this
on the main export enables test components that are not within scope
to yield even if they don't have access to the currently rendering
root instance. This follows the pattern established by ReactNoop.

Added a `clearYields` method, too, for reading values that were yielded
out of band. This is also based on ReactNoop.",Andrew Clark,2018-07-18T23:10:56Z
0e235bb8f78a4f9bac5ce74051de9c0fbb92eaca,Removed unused state argument in unsubscribe method of <Subscription /> (#13233),Mateusz Burzyński,2018-07-18T20:52:59Z
236f6087236c42ccafe94674cd1c5736a1868b00,"Fail tests if toWarnDev() does not wrap warnings in array (#13227)

* Fail tests if toWarn() does not wrap warnings in array

* Fix newly failing tests

* Another fix",Dan Abramov,2018-07-18T01:38:39Z
acbb4f93f09ca37f02136f9aa6f7425fde1da2cc,"Remove the use of proxies for synthetic events in DEV (#13225)

* Revert #5947 and disable the test

* Fix isDefaultPrevented and isPropagationStopped to not get nulled

This was a bug introduced by #5947. It's very confusing that they become nulled while stopPropagation/preventDefault don't.

* Add a comment

* Run Prettier

* Fix grammar",Dan Abramov,2018-07-17T23:14:13Z
171e0b7d447a20b7cc90808a95478c6e5b8b6af0,"Fix “no onChange handler” warning to fire on falsy values ("""", 0, false) too (#12628)

* throw warning for falsey `value` prop

* add nop onChange handler to tests for `value` prop

* prettier

* check for falsey checked

* fix tests for `checked` prop

* new tests for `value` prop

* test formatting

* forgot 0 (:

* test for falsey `checked` prop

* add null check

* Update ReactDOMInput-test.js

* revert unneeded change

* prettier

* Update DOMPropertyOperations-test.js

* Update ReactDOMInput-test.js

* Update ReactDOMSelect-test.js

* Fixes and tests

* Remove unnecessary changes",Nicole Levy,2018-07-17T21:46:43Z
606c30aa5f37f335f14ff94659ffcadfbdf4c791,fixed a typo in commentout in ReactFiberUnwindWork.js (#13172),Fumiya Shibusawa,2018-07-17T19:21:53Z
9f78913b20d52a5849dd26aafebfbc3caf190812,"Update prettier (#13205)

* Update Prettier to 1.13.7

* Apply Prettier changes

* Pin prettier version

* EOL",Johan Henriksson,2018-07-17T19:18:34Z
6d3e2628809b94b334551344b4f1fe1c79c16e5b,"Remove unnecessary `typeof` checks (#13196)

This aligns with #10351 which removed extra check on `injectInternals`.",jddxf,2018-07-17T19:18:15Z
82c7ca4cca90976cd1230e03ea1a4372a4276e67,Add component stacks to some warnings (#13218),Dan Abramov,2018-07-17T19:15:03Z
21ac62c77ac68c66b2a1f0adcc60f7760b884a0e,"Fix a portal unmounting crash for renderers with distinct Instance and Container (#13220)

* Fix Portal unmount

Before that change, currentParent is not set as a container even if it should so it break on react-native and probably other custom renderers

* Assert that *ToContainer() methods receive containers

* Add regression tests

* Add comments",Thibault Malbranche,2018-07-17T00:35:33Z
d6a0626b38de863a447b7e2e1346216a226cdfe1,Set current fiber during before-mutation traversal (#13219),Dan Abramov,2018-07-17T00:11:56Z
fd410f43fcb771aa38215d17d7a487d1bc789d71,"Protect against passing component stack twice

This is a leftover from #13161 that I forgot to include.
It ensures we don't accidentally write code in the old way and end up passing the stack twice.",Dan Abramov,2018-07-16T21:47:37Z
f9358c51c8de93abe3cdd0f4720b489befad8c48,"Change warning() to automatically inject the stack, and add warningWithoutStack() as opt-out (#13161)

* Use %s in the console calls

* Add shared/warningWithStack

* Convert some warning callsites to warningWithStack

* Use warningInStack in shared utilities and remove unnecessary checks

* Replace more warning() calls with warningWithStack()

* Fixes after rebase + use warningWithStack in react

* Make warning have stack by default; warningWithoutStack opts out

* Forbid builds that may not use internals

* Revert newly added stacks

I changed my mind and want to keep this PR without functional changes. So we won't ""fix"" any warnings that are already missing stacks. We'll do it in follow-ups instead.

* Fix silly find/replace mistake

* Reorder imports

* Add protection against warning argument count mismatches

* Address review",Dan Abramov,2018-07-16T21:31:59Z
854c9539058834038b67a87a7146a1ec2a2ceeb6,Fix matcher tests to be DEV-only,Dan Abramov,2018-07-16T19:35:43Z
467d1391016dd2df8e1946aa33c6d6e1219c9dbb,"Enforce presence or absence of component stack in tests (#13215)

* Enforce presence or absence of stack in tests

* Rename expectNoStack to withoutStack

* Fix lint

* Add some tests for toWarnDev()",Dan Abramov,2018-07-16T19:20:18Z
43ffae2d1750ee32409e140e41ea562ff46d2516,"Suspending inside a constructor outside of strict mode (#13200)

* Suspending inside a constructor outside of strict mode

Outside of strict mode, suspended components commit in an incomplete
state, then are synchronously deleted in a subsequent commit. If a
component suspends inside the constructor, it mounts without
an instance.

This breaks at least one invariant: during deletion, we assume that
every mounted component has an instance, and check the instance for
the existence of `componentWillUnmount`.

Rather than add a redundant check to the deletion of every class
component, components that suspend inside their constructor and outside
of strict mode are turned into empty functional components before they
are mounted. This is a bit weird, but it's an edge case, and the empty
component will be synchronously unmounted regardless.

* Do not fire lifecycles of a suspended component

In non-strict mode, suspended components commit, but their lifecycles
should not fire.",Andrew Clark,2018-07-13T18:24:03Z
659a29cecf74301532354261369e9048aac6e20f,"Reorganize how shared internals are accessed (#13201)

* Reorganize how shared internals are accessed

* Update forks.js",Dan Abramov,2018-07-13T01:45:37Z
58f3b29d91a1bcd5c81d25ae8b3f760cbea612ae,"Added SSR/hydration tests for modes, forwardRef, and Profiler (#13195)

* Added more SSR tests for modes, profiler, and forward-ref",Brian Vaughn,2018-07-12T15:35:21Z
1c89cb62fdd686a00351dfabc689571081edbd1a,"Use ReactDebugCurrentFrame.getStackAddendum() in element validator (#13198)

Instead of wrapping ReactDebugCurrentFrame.getStackAddendum() call into a custom wrapper inside ReactElementValidator, ""teach"" the main ReactDebugCurrentFrame.getStackAddendum() to take currently validating element into account.",Dan Abramov,2018-07-12T15:18:24Z
e6076ecf48f5e492e894a5bc3f609b0478388b80,"Remove ad-hoc forks of getComponentName() and fix it (#13197)

* Fix getComponentName() for types with nested $$typeof

* Temporarily remove Profiler ID from messages

* Change getComponentName() signature to take just type

It doesn't actually need the whole Fiber.

* Remove getComponentName() forks in isomorphic and SSR

* Remove unnecessary .type access where we already have a type

* Remove unused type",Dan Abramov,2018-07-12T14:32:06Z
32f6f258bad524ec3886901a5b132887f8dd7553,"Remove event simulation of onChange events (#13176)

* Remove event simulation of onChange events

It’s time to get rid of even more `ReactTestUtils.Simulate`s. In this PR
we remove the event simulation from all onChange tests. To do this, we
have to get a setter to the untracked value/checked props.

All remaining `ReactTestUtils.Simulate` calls are either testing
ReactTestUtils or assert that they do/don't throw.

* Use input instead of change event for all but checkbox, radio, and select",Philipp Spieß,2018-07-12T11:11:35Z
9ca37f843194e7a91b7c7250025edaba370f479c,docs: update comments (#13043),Sen Yang,2018-07-11T21:31:48Z
f89f25f4718c83b54b0e35c78a2608987db27f8a,"Correct type of `ref` in forwardRef render() (#13100)

`React$ElementRef<T>` is the type of the ref _instance_ for a component of type T, whereas `React$Ref<T>` is the type of the ref _prop_ for a component of type T, which seems to be the intended type here.",Moti Zilberman,2018-07-11T21:27:46Z
7b99ceabec08b8df79596d7dd1f5dd282010e959,"Deprecate test utils mock component follow up (#13194)

* De-duplicate the mockComponent deprecation warning

* Added fb.me link to mockComponent",Brian Vaughn,2018-07-11T18:56:44Z
6ebc8f3c07d8aadea127532fd33637cb091a9e66,"Add support for re-entrant SSR stacks (#13181)

* Add failing tests

* Fix re-entrancy in ReactDOMServer",Dan Abramov,2018-07-11T18:43:54Z
d64d1ddb570a4fb7d748f4c500ac083886c2f0ec,"Deprecate ReactTestUtils.mockComponent() (#13193)

Deprecate ReactTestUtils.mockComponent()",Brian Vaughn,2018-07-11T17:18:49Z
afd46490d0b384ddf3f67f9a8fc857e32cdecfe3,update devEngines to include nodejs 10.x (#13190),dongyuwei,2018-07-11T10:46:44Z
e79366d5497e669af462b705303bee7edef02585,Link create-subscription doc to GH issue with de-opt explanation (#13187),Brian Vaughn,2018-07-10T21:00:06Z
1f32d3c6dcc51f6a540997ab884a300b3f2ac5d4,Test renderer flushAll method verifies an array of expected yields (#13174),Brian Vaughn,2018-07-09T16:05:13Z
377e1a049e03cbbf78a63ecadf31c3460602fe06,Add a test for SSR stack traces (#13180),Dan Abramov,2018-07-09T13:41:48Z
96d38d178ae3956e0eecbde789e3fcf3e487cfea,Fix concatenation of null to a warning message (#13166),Dan Abramov,2018-07-09T12:56:24Z
095dd5049c7810841024078f4bbea7e4d7766acc,"Add DEV warning if forwardRef function doesn't use the ref param (#13168)

* Add DEV warning if forwardRef function doesn't use the ref param
* Fixed a forwardRef arity warning in another test",Brian Vaughn,2018-07-07T15:11:30Z
566259567773a0af56e6c19da615e6802d73f834,"Refactor stack handling (no functional changes) (#13165)

* Refactor ReactDebugCurrentFiber to use named exports

This makes the difference between it and ReactFiberCurrentFrame a bit clearer.

ReactDebugCurrentFiber is Fiber's own implementation.
ReactFiberCurrentFrame is the thing that holds a reference to the current implementation and delegates to it.

* Unify ReactFiberComponentTreeHook and ReactDebugCurrentFiber

Conceptually they're very related.

ReactFiberComponentTreeHook contains implementation details of reading Fiber's stack (both in DEV and PROD).
ReactDebugCurrentFiber contained a reference to the current fiber, and used the above utility.

It was confusing when to use which one. Colocating them makes it clearer what you could do with each method.

In the future, the plan is to stop using these methods explicitly in most places, and instead delegate to a warning system that includes stacks automatically. This change makes future refactorings simpler by colocating related logic.

* Rename methods to better reflect their meanings

Clarify which are DEV or PROD-only.
Clarify which can return null.

I believe the ""work in progress only"" was a mistake. I introduced it because I wasn't sure what guarantees we have around .return. But we know for sure that following a .return chain gives us an accurate stack even if we get into WIP trees because we don't have reparenting. So it's fine to relax that naming.

* Rename ReactDebugCurrentFiber -> ReactCurrentFiber

It's not completely DEV-only anymore.
Individual methods already specify whether they work in DEV or PROD in their names.",Dan Abramov,2018-07-07T00:09:41Z
ebbd2214326ca6a5f24f46ea7eaffc6cfabbbe1c,Configure react-test-renderer as a secondary (#13164),Brandon Dail,2018-07-06T23:04:45Z
ddc91af7957f3cca6910a95cef71076897ebdb53,"Decrease nested update limit from 1000 to 50 (#13163)

An infinite update loop can occur when an update is scheduled inside a
lifecycle method, which causes a re-render, which schedules another
update, and so on. Before the Fiber rewrite, this scenario resulted in a
stack overflow.

Because Fiber does not use the JavaScript stack, we maintain our own
counter to track the number of nested, synchronous updates. We throw an
error if the limit is exceeded.

The nested update limit is currently 1000. I chose this number
arbitrarily, certain that there was no valid reason for a component to
schedule so many synchronous re-renders.

I think we can go much lower. This commit decreases the limit to 50. I
believe this is still comfortably above the reasonable number of
synchronous re-renders a component may perform.

This will make it easier for developers to debug infinite update bugs
when they occur.",Andrew Clark,2018-07-06T22:50:31Z
3596e40b394385713049d996c5ba293f746b7561,"Fix nested update bug (#13160)

A recent change to the scheduler caused a regression when scheduling
many updates within a single batch. Added a test case that would
have caught this.",Andrew Clark,2018-07-06T20:55:18Z
449f6ddd5c075da965ec430015c66977c38db8d3,create a new FeatureFlags file for test renderer on www (#13159),Chang Yan,2018-07-06T19:55:29Z
f762b3abb1d951b366f3c8a2354aeedb7fbc32ff,Run react-dom SSR import test in jsdom-less environment (#13157),Dan Abramov,2018-07-06T15:43:43Z
6f6b560a645adb595ba1e40630a3915d8abdf038,"Renamed selfBaseTime/treeBaseTime Fiber attributes to selfBaseDuration/treeBaseDuration (#13156)

This is an unobservable change to all but the (under development) DevTools Profiler plugin. It is being done so that the plugin can safely feature detect a version of React that supports it. The profiler API has existed since the 16.4.0 release, but it did not support the DevTools plugin prior to PR #13058.

Side note: I am not a big fan of the term ""base duration"". Both it and ""actual duration"" are kind of awkward and vague. If anyone has suggestions for better names– this is the best time to bikeshed about them.",Brian Vaughn,2018-07-06T15:25:29Z
1386ccddd8cecc5979d79c0e9bbbd59373c6a2fc,"Fix ReferenceError when requestAnimationFrame isn't defined (#13152)

* Make the test fail

* Fix rAF detection to avoid a ReferenceError",Dan Abramov,2018-07-05T18:42:45Z
f5779bbc10ce85ac78fb54c9f20e71b5e32bb393,Run server rendering test on bundles (#13153),Dan Abramov,2018-07-05T18:42:22Z
9faf389e79c647d7792e631f3d8e9a9ce1a70625,"Reset profiler timer correctly after errors (#13123)

* Reset ReactProfilerTimer's DEV-only Fiber stack after an error

* Added ReactNoop functionality to error during ""complete"" phase

* Added failing profiler stack unwinding test

* Potential fix for unwinding time bug

* Renamed test

* Don't record time until complete phase succeeds. Simplifies unwinding.

* Expanded ReactProfilerDevToolsIntegration-test coverage a bit

* Added unstable_flushWithoutCommitting method to noop renderer

* Added failing multi-root/batch test to ReactProfiler-test

* Beefed up tests a bit and added some TODOs

* Profiler timer differentiates between batched commits and in-progress async work

This was a two-part change:
1) Don't count time spent working on a batched commit against yielded async work.
2) Don't assert an empty stack after processing a batched commit (because there may be yielded async work)

This is kind of a hacky solution, and may have problems that I haven't thought of yet. I need to commit this so I can mentally clock out for a bit without worrying about it. I will think about it more when I'm back from PTO. In the meanwhile, input is welcome.

* Removed TODO

* Replaced FiberRoot map with boolean

* Removed unnecessary whitespace edit",Brian Vaughn,2018-07-05T18:38:06Z
85fe4ddce7ae4d8c93a8107db9e7e65a0631baeb,Fix - issue #12765 / the checked attribute is not initially set on the input (#13114),XuMM_12,2018-07-04T20:00:42Z
07fefe33310849df81836c1c2e773b7d50c3ec2b,"Drop handling for ms and O prefixes for CSS transition and animation events. (#13133)

Internet Explorer never needed the prefix and Opera 11.5 is no longer supported by React.",Rouven Weßling,2018-07-04T17:20:02Z
88d7ed8bfbccd860c3e309da39d356d0a3127aa7,"React.Timeout -> React.Placeholder (#13105)

Changed the API to match what we've been using in our latest discussions.

Our tentative plans are for <Placeholder> to automatically hide the timed-out
children, instead of removing them, so their state is not lost. This part is
not yet implemented. We'll likely have a lower level API that does not include
the hiding behavior. This is also not yet implemented.",Andrew Clark,2018-07-04T02:47:00Z
f128fdea4840f494991054f608b99757a5ce5764,"Suspending outside of strict trees and async trees (#13098)

We can support components that suspend outside of an async mode tree
by immediately committing their placeholders.

In strict mode, the Timeout acts effectively like an error boundary.
Within a single render pass, we unwind to the nearest Timeout and
re-render the placeholder view.

Outside of strict mode, it's not safe to unwind and re-render the
siblings without committing. (Technically, this is true of error
boundaries, too, though probably not a huge deal, since we don't support
using error boundaries for control flow (yet, at least)). We need to be
clever. What we do is pretend the suspended component rendered null.*
There's no unwinding. The siblings commit like normal.

Then, in the commit phase, schedule an update on the Timeout to
synchronously re-render the placeholder. Although this requires an extra
commit, it will not be observable. And because the siblings were not
blocked from committing, they don't have to be strict mode compatible.

Another caveat is that if a component suspends during an async render,
but it's captured by a non-async Timeout, we need to revert to sync
mode. In other words, if any non-async component renders, the entire
tree must complete and commit without yielding.

* The downside of rendering null is that the existing children will be
deleted. We should hide them instead. I'll work on this in a follow-up.",Andrew Clark,2018-07-04T02:44:19Z
aa8266c4f7da62788156bf0bdd95fd729c04388a,"Prepare placeholders before timing out (#13092)

* Prepare placeholders before timing out

While a tree is suspended, prepare for the timeout by pre-rendering the
placeholder state.

This simplifies the implementation a bit because every render now
results in a completed tree.

* Suspend inside an already timed out Placeholder

A component should be able to suspend inside an already timed out
placeholder. The time at which the placeholder committed is used as 
the start time for a subsequent suspend.

So, if a placeholder times out after 3 seconds, and an inner
placeholder has a threshold of 2 seconds, the inner placeholder will
not time out until 5 seconds total have elapsed.",Andrew Clark,2018-07-04T02:22:41Z
c039c16f21d7dd5172a3f46d65a4f484543a14ec,Fix this in a functional component for ShallowRenderer (#13144),Toru Kobayashi,2018-07-03T16:47:40Z
6731bfbed7964fdcb9b0080bce3edefc2a65d196," Update README.md (#13085)

Fix grammatical error via addition of comma.",Joseph Lin,2018-06-30T22:45:06Z
64e1921aab4f7ad7e2f345f392033ffe724e52e9,"Fix Flow type that event target can be null (#13124)

We pass null sometimes when the event target has disappeared. E.g. when
touches fires on a deleted node.",Sebastian Markbåge,2018-06-29T19:51:48Z
bf32a3d1958290b055dc4c34189308a9417a45e4,"Updated url to Code of Conduct page (#13126)

url is not working. Did a search on code.fb.com that returned the page I've put in the commit.",Hilbrand Bouwkamp,2018-06-29T12:27:24Z
183aefa51f5b7b18bde05dccdd417b8983d741d0,More links,Dan Abramov,2018-06-27T16:59:29Z
3297102de6692a675aad239061eed7aa822115fe,Reorder sections,Dan Abramov,2018-06-27T16:12:12Z
f4b6a9f8ee5266b6dbe258b05fc7e442e933c3a6,Just remove this sentence,Dan Abramov,2018-06-27T16:09:45Z
3eedcb1fda8876868e2363e215b773bdb4de6d3b,Tweak links in README,Dan Abramov,2018-06-27T16:07:26Z
6d6de6011cf329fabe057186e9a65fc8eb4e175c,Add PROFILE bundles for www+DOM and fbsource+RN/RF (#13112),Brian Vaughn,2018-06-26T20:28:41Z
71a60ddb16c413bd9a62f2a0c62694d57d473679,Add link to another article about React renderers,Dan Abramov,2018-06-26T15:45:03Z
9e6c99ca2e56ff6ccdb9d7f816cd706228139cba,Fix README typo (#13110),Rauno Freiberg,2018-06-26T11:17:02Z
baff5cc2f69d30589a5dc65b089e47765437294b,Update links,Dan Abramov,2018-06-26T00:31:36Z
6a530e3baa9c44a509979c5d7013d4e1617cbc76,"adding check for mousemove (#13090)

* adding check for mousemove

* adding unit test for SyntheticMouseEvent

* changing test to start with 2, removing comments",Jason Williams,2018-06-24T09:24:54Z
c35a1e74835d2b4c07f1e14779a22ae8ca5a0d10,"Fix crash during server render in react 16.4.1. (#13088)

* Fix crash during server render.

setTimeout and clearTimeout may not be available in some server-render environments (such as ChakraCore in React.NET), and loading ReactScheduler.js will cause a crash unless the existence of the variables are checked via a typeof comparison.

https://github.com/reactjs/React.NET/issues/555

The crash did not occur in 16.4.0, and the change appears to have been introduced here: https://github.com/facebook/react/pull/12931/files#diff-bbebc3357e1fb99ab13ad796e04b69a6L47

I tested this by using yarn link and running it with a local copy of React.NET. I am unsure the best way to unit test this change, since assigning null to `setTimeout` causes an immediate crash within the Node REPL.

* Fix flow errors and log warning if setTimeout / clearTimeout are
not defined / not a function.

* Use invariant to assert setTimeout / clearTimeout are functions

* Remove use of invariant

* Explain",Dustin Masters,2018-06-22T19:07:54Z
076bbeace7e089ee748a0b59466df654305bbe2b,"Fall back to 'setTimeout' when 'requestAnimationFrame' is not called (#13091)

* Add fixture test for schedule running when tab is backgrounded

**what is the change?:**
Just adding a test to the fixture, where we can easily see whether
scheduled callbacks are called after switching away from the fixture
tab.

**why make this change?:**
We are about to fix the schedule module so that it still runs even when
the tab is in the backround.

**test plan:**
Manually tested the fixture, verified that it works as expected and
right now callbacks are not called when the tab is in the background.

**issue:**
Internal task T30754186

* Fall back to 'setTimeout' when 'requestAnimationFrame' is not called

**what is the change?:**
If 'requestAnimationFrame' is not called for 100ms we fall back to
'setTimeout' to schedule the postmessage.

**why make this change?:**
When you start loading a page, and then switch tabs,
'requestAnimationFrame' is throttled or not called until you come back
to that tab. That means React's rendering, any any other scheduled work,
are paused.

Users expect the page to continue loading, and rendering is part of the
page load in a React app. So we need to continue calling callbacks.

**test plan:**
Manually tested using the new fixture test, observed that the callbacks
were called while switched to another tab. They were called more
slowly, but that seems like a reasonable thing.

**issue:**
Internal task T30754186

* make arguments more explicit",Flarnie Marchan,2018-06-22T16:13:47Z
da5c87bdfa287b8493b6e40a02acbe9896fd554a,"Fixes children when using dangerouslySetInnerHtml in a selected <option> (#13078)

* Fixes children when using dangerouslySetInnerHtml in a selected <option>

This fixes an inadvertent cast of undefined children to an empty string when creating an option tag that will be selected:

```
  <select defaultValue=""test"">
    <option value='test' dangerouslySetInnerHTML={{ __html: '&rlm; test'}} />
  </select>
```

This causes an invariant error because both children and dangerouslySetInnerHTML are set.

* PR fix and new ReactDOMServerIntegrationForms test

* Account for null case

* Combine test cases into single test

* Add tests for failure cases

* Fix lint",Michael Ridgway,2018-06-21T19:21:21Z
a960d18bc76dfd2528536651efcd1b646d7d882f,eliminate unnecessary do-while loop in renderRoot() (#13087),Nathan Quarles,2018-06-21T17:52:26Z
5b3d17a5f729eb204371ad1953a07ec3ae3dae00,"setting a flag, so that the first movement will have the correct value (#13082)",Jason Williams,2018-06-20T21:48:53Z
b0f60895f759253d4180dfa7e1901fe36d4abd3a,"Automatically Profile roots when DevTools is present (#13058)

* react-test-renderer injects itself into DevTools if present
* Fibers are always opted into ProfileMode if DevTools is present
* Added simple test for DevTools + always profiling behavior",Brian Vaughn,2018-06-20T16:24:52Z
ae8c6dd5347797f2279639a5bc644e9b6632bbbb,"remove some redundant lines (#13077)

* remove another couple of redundant lines

* a few more",Nathan Quarles,2018-06-20T15:35:03Z
0fcf92d06d7ade048f663e184e3d53b24844c889,Add a link to custom renderer intro article,Dan Abramov,2018-06-20T13:46:18Z
97af3e1f3a6130dc38269b8389da057152868be2," Do not add additional work to a batch that is already rendering (#13072)

* Do not add additional work to a batch that is already rendering.

Otherwise, the part of the tree that hasn't rendered yet will receive
the latest state, but the already rendered part will show the state
as it was before the intervening update.

* Reduce non-helpfulness of comments",Andrew Clark,2018-06-19T17:36:56Z
4fe6eec15bc69737910e5c6c749ebc6187d67be0,"Always batch updates of like priority within the same event (#13071)

Expiration times are computed by adding to the current time (the start
time). However, if two updates are scheduled within the same event, we
should treat their start times as simultaneous, even if the actual clock
time has advanced between the first and second call.

In other words, because expiration times determine how updates are
batched, we want all updates of like priority that occur within the same
event to receive the same expiration time. Otherwise we get tearing.

We keep track of two separate times: the current ""renderer"" time and the
current ""scheduler"" time. The renderer time can be updated whenever; it
only exists to minimize the calls performance.now.

But the scheduler time can only be updated if there's no pending work,
or if we know for certain that we're not in the middle of an event.",Andrew Clark,2018-06-19T17:34:19Z
8e87c139b490a60ef837ea93b91e639e1d7b0d90,Remove transitive dependency on fbjs (#13075),Dan Abramov,2018-06-19T16:52:37Z
aeda7b745d9c080150704feb20ea576238a1b9a1,"Remove fbjs dependency (#13069)

* Inline fbjs/lib/invariant

* Inline fbjs/lib/warning

* Remove remaining usage of fbjs in packages/*.js

* Fix lint

* Remove fbjs from dependencies

* Protect against accidental fbjs imports

* Fix broken test mocks

* Allow transitive deps on fbjs/ for UMD bundles

* Remove fbjs from release script",Dan Abramov,2018-06-19T15:03:45Z
b1b3acbd6b5fad40558db790f59855116ec3ee93,"Inline fbjs/lib/emptyObject (#13055)

* Inline fbjs/lib/emptyObject

* Explicit naming

* Compare to undefined

* Another approach for detecting whether we can mutate

Each renderer would have its own local LegacyRefsObject function.

While in general we don't want `instanceof`, here it lets us do a simple check: did *we* create the refs object?
Then we can mutate it.

If the check didn't pass, either we're attaching ref for the first time (so we know to use the constructor),
or (unlikely) we're attaching a ref to a component owned by another renderer. In this case, to avoid ""losing""
refs, we assign them onto the new object. Even in that case it shouldn't ""hop"" between renderers anymore.

* Clearer naming

* Add test case for strings refs across renderers

* Use a shared empty object for refs by reading it from React

* Remove string refs from ReactART test

It's not currently possible to resetModules() between several renderers
without also resetting the `React` module. However, that leads to losing
the referential identity of the empty ref object, and thus subsequent
checks in the renderers for whether it is pooled fail (and cause assignments
to a frozen object).

This has always been the case, but we used to work around it by shimming
fbjs/lib/emptyObject in tests and preserving its referential identity.
This won't work anymore because we've inlined it. And preserving referential
identity of React itself wouldn't be great because it could be confusing during
testing (although we might want to revisit this in the future by moving its
stateful parts into a separate package).

For now, I'm removing string ref usage from this test because only this is
the only place in our tests where we hit this problem, and it's only
related to string refs, and not just ref mechanism in general.

* Simplify the condition",Dan Abramov,2018-06-19T12:41:42Z
ae14317d6810d5b07d01308a2116a707e5e09983,Inline fbjs/lib/emptyFunction (#13054),Dan Abramov,2018-06-15T17:45:14Z
72434a7686035b4af766ee7d06c070d7f5d6a5f2,Remove or inline some fbjs dependencies (#13046),Dan Abramov,2018-06-15T17:12:45Z
64c54edea4a1f41d87fb6d4c14767adedf652d90,"Adding movementX and movementY to synthenticMouseEvent fixes #6723 (#9018)

* adding movementX and movementY into syntheticMouseEvent

* fixing case mistake

* Add test fixture for movementX/Y fields",Jason Williams,2018-06-15T13:15:36Z
9bd4d1fae21a6521c185cb114a15ca5dc74d6d9b,"Synchronously restart when an error is thrown during async rendering (#13041)

In async mode, events are interleaved with rendering. If one of those
events mutates state that is later accessed during render, it can lead
to inconsistencies/tearing.

Restarting the render from the root is often sufficient to fix the
inconsistency. We'll flush the restart synchronously to prevent yet
another mutation from happening during an interleaved event.

We'll only restart during an async render. Sync renders are already
sync, so there's no benefit in restarting. (Unless a mutation happens
during the render phase, but we don't support that.)",Andrew Clark,2018-06-14T23:37:30Z
9bda7b28f3b149c8f8ca826f0c395a81ed2d3bec,"Suspended high pri work forces lower priority work to expire early  (#12965)

* onFatal, onComplete, onSuspend, onYield

For every call to renderRoot, one of onFatal, onComplete, onSuspend,
and onYield is called upon exiting. We use these in lieu of returning a
tuple. I've also chosen not to inline them into renderRoot because these
will eventually be lifted into the renderer.

* Suspended high pri work forces lower priority work to expire early

If an error is thrown, and there is lower priority pending work, we
retry at the lower priority. The lower priority work should expire
at the same time at which the high priority work would have expired.
Effectively, this increases the priority of the low priority work.

Simple example: If an error is thrown during a synchronous render, and
there's an async update, the async update should flush synchronously in
case it's able to fix the error. I've added a unit test for
this scenario.

User provided timeouts should have the same behavior, but I'll leave
that for a future PR.",Andrew Clark,2018-06-14T22:29:27Z
2e757790751ab8d165fc4df37e90a59d914c4527,"Fix incorrect data in compositionend event with Korean IME on IE11 (#10217) (#12563)

* Add isUsingKoreanIME function to check if a composition event was triggered by Korean IME

* Add Korean IME check alongside useFallbackCompositionData and disable fallback mode with Korean IME",Crux,2018-06-14T15:35:05Z
bc963f353dc23a6c84c4d2b4daa51a4fdb12a6bc,setJSResponder in Fabric renderer (#13031),Sebastian Markbåge,2018-06-14T00:03:26Z
051637da615a4e8d0cbf8f147a75e129c1866138,"Extract Fabric event handlers from canonical props (#13024)

We need a different ""component tree"" thingy for Fabric.

A lot of this doesn't really make much sense in a persistent world but
currently we can't dispatch events to memoizedProps on a Fiber since
they're pooled. Also, it's unclear what the semantics should be when we
dispatch an event that happened when the old props were in effect but now
we have new props already.

This implementation tries to use the last committed props but also fails
at that because we don't have a commit hook in the persistent mode.

However, at least it doesn't crash when dispatching. :)",Sebastian Markbåge,2018-06-13T23:20:48Z
2a8085980f5a96fa33bf12d8fd78594a3baecccb,"Remove rAF fork (#12980)

* Remove rAF fork

**what is the change?:**
Undid https://github.com/facebook/react/pull/12837

**why make this change?:**
We originally forked rAF because we needed to pull in a particular
version of rAF internally at Facebook, to avoid grabbing the default
polyfilled version.

The longer term solution, until we can get rid of the global polyfill
behavior, is to initialize 'schedule' before the polyfilling happens.

Now that we have landed and synced
https://github.com/facebook/react/pull/12900 successfully, we can
initialize 'schedule' before the polyfill runs.
So we can remove the rAF fork. Here is how it will work:

1. Land this PR on Github.
2. Flarnie will quickly run a sync getting this change into www.
3. We delete the internal forked version of
   'requestAnimationFrameForReact'.
4. We require 'schedule' in the polyfill file itself, before the
   polyfilling happens.

**test plan:**
Flarnie will manually try the above steps locally and verify that things
work.

**issue:**
Internal task T29442940

* fix nits

* fix tests, fix changes from rebasing

* fix lint",Flarnie Marchan,2018-06-13T17:57:35Z
e0c78344e2f49fb91a75607ccdb170b5649bb1e9,"Retry on error if there's lower priority pending work (#12957)

* Remove enableSuspense flag from PendingPriority module

We're going to use this for suspending on error, too.

* Retry on error if there's lower priority pending work

If an error is thrown, and there's lower priority work, it's possible
the lower priority work will fix the error. Retry at the lower priority.

If an error is thrown and there's no more work to try, handle the error
like we normally do (trigger the nearest error boundary).",Andrew Clark,2018-06-13T17:47:14Z
74b1723df15785a06f4be647560d2641b9bd76a9,Update changelog for 16.4.1,Dan Abramov,2018-06-13T16:23:59Z
9725065eb4054be5a223b16d28de0aeda91f4464,Update bundle sizes for 16.4.1 release,Dan Abramov,2018-06-13T16:20:35Z
a5957bf296d894fd2d5a67dd8d6712d5bf8eb845,Update error codes for 16.4.1 release,Dan Abramov,2018-06-13T16:20:35Z
0b87b279069d21ec6308afcdc557a39dfc459536,Updating package versions for release 16.4.1,Dan Abramov,2018-06-13T16:16:10Z
65eb6b94ac3d0def59b2fc3a09aa03f63c25f909,Updating yarn.lock file for 16.4.1 release,Dan Abramov,2018-06-13T16:13:29Z
c469e3b422fcb833ad28fcc32cd88f48b660a06a,Add unreleased changelog,Dan Abramov,2018-06-13T15:57:46Z
036ae3c6e2f056adffc31dfb78d1b6f0c63272f0,"Use native event dispatching instead of Simulate or SimulateNative (#13023)

* Use native event dispatching instead of Simulate or SimulateNative

In #12629 @gaearon suggested that it would be better to drop usage of
`ReactTestUtils.Simulate` and `ReactTestUtils.SimulateNative`. In this
PR I’m attempting at removing it from a lot of places with only a few
leftovers.

Those leftovers can be categorized into three groups:

1. Anything that tests that `SimulateNative` throws. This is a property
   that native event dispatching doesn’t have so I can’t convert that
   easily. Affected test suites: `EventPluginHub-test`,
   `ReactBrowserEventEmitter-test`.
2. Anything that tests `ReactTestUtils` directly. Affected test suites:
   `ReactBrowserEventEmitter-test` (this file has one test that reads
    ""should have mouse enter simulated by test utils""),
    `ReactTestUtils-test`.
3. Anything that dispatches a `change` event. The reason here goes a bit
   deeper and is rooted in the way we shim onChange. Usually when using
   native event dispatching, you would set the node’s `.value` and then
   dispatch the event. However inside [`inputValueTracking.js`][] we
   install a setter on the node’s `.value` that will ignore the next
   `change` event (I found [this][near-perfect-oninput-shim] article
   from Sophie that explains that this is to avoid onChange when
   updating the value via JavaScript).

All remaining usages of `Simulate` or `SimulateNative` can be avoided
by mounting the containers inside the `document` and dispatching native
events.

Here some remarks:

1. I’m using `Element#click()` instead of `dispatchEvent`. In the jsdom
   changelog I read that `click()` now properly sets the correct values
   (you can also verify it does the same thing by looking at the
   [source][jsdom-source]).
2. I had to update jsdom in order to get `TouchEvent` constructors
   working (and while doing so also updated jest). There was one
   unexpected surprise: `ReactScheduler-test` was relying on not having
   `window.performance` available. I’ve recreated the previous
   environment by deleting this property from the global object.
3. I was a bit confused that `ReactTestUtils.renderIntoDocument()` does
   not render into the document 🤷‍

[`inputValueTracking.js`]: https://github.com/facebook/react/blob/392530104c00c25074ce38e1f7e1dd363018c7ce/packages/react-dom/src/client/inputValueTracking.js#L79
[near-perfect-oninput-shim]: https://sophiebits.com/2013/06/18/a-near-perfect-oninput-shim-for-ie-8-and-9.html
[jsdom-source]: https://github.com/jsdom/jsdom/blob/45b77f5d21cef74cad278d089937d8462c29acce/lib/jsdom/living/nodes/HTMLElement-impl.js#L43-L76

* Make sure contains are unlinked from the document even if the test fails

* Remove unnecessary findDOMNode calls",Philipp Spieß,2018-06-13T11:41:23Z
945fc1bfce5f2a93ac6ff0c53da3fd57e81b5a63,"Call gDSFP with the right state in react-test-render (#13030)

* Call gDSFP with the right state in react-test-render

* Change the test",Rafał Ruciński,2018-06-12T22:36:50Z
392530104c00c25074ce38e1f7e1dd363018c7ce,"Remove feature flag around 'getDerivedStateFromProps' bug fix (#13022)

**what is the change?:**
Basically undoes https://github.com/facebook/react/commit/4b2e65d32e3adec7d4ef5ddd5fcb35e617e0cde6#diff-904ceabd8a1e9a07ab1d876d843d62e1

**why make this change?:**
We rolled out this fix internally and in open source weeks ago, and now
we're cleaning up.

**test plan:**
Ran tests and lint, and really we have been testing this because the
flag is open internally as of last week or so.

**issue:**
Internal task T29948812 has some info.",Flarnie Marchan,2018-06-11T23:31:07Z
1594409fab564214eff1737848773e6194852173,Scheduler depends on common packages (#13020),Dan Abramov,2018-06-11T21:13:05Z
d5c11193e2e6d5ea2d55ce3b428616c401310731,"Added production profiling bundle type (#12886)

* Added profiling bundle
* Turned profiling on for React Fabric OSS profiling and dev bundles
* Added new global var ""__PROFILE__"" for profiling DCE",Brian Vaughn,2018-06-11T20:16:27Z
ec60457bcd22d06c404a44839c14beda88081ac7,Popping context is O(1) in SSR (#13019),Dan Abramov,2018-06-11T19:52:39Z
30bc8ef79295c71f5a4fc459c5bbd4b271f6f390,Allow multiple root children in test renderer traversal API (#13017),Dan Abramov,2018-06-11T19:03:51Z
d480782c4162431d06c077ebf8fdf6b8ba7896ef,"Don’t error when returning an empty Fragment (#12966)

* Don’t error when returning an empty Fragment

When a fragment is reconciled, we directly move onto it’s children.
Since an empty `<React.Fragment/>` will have children of `undefined`,
this would always throw.

To fix this, we bail out in those cases.

* Test the update path as well

* Reuse existing code path

* An even more explicit solution that also fixes Flow",Philipp Spieß,2018-06-11T13:43:30Z
4ac6f133aff78e7616c7427167f0d43a18441b94,"Fallback to event.srcElement for IE9 (#12976)

It looks like we accidentally removed a fallback condition for the
event target in IE9 when we dropped some support for IE8. This commit
adds the event target specific support code back to getEventTarget.js

Fixes #12506",Nathan Hunzaker,2018-06-11T13:35:42Z
23be4102df273d6ee6d9be42c6d65885d0a914b1,"Fixed an issue with nested contexts unwinding when server rendering. Issue #12984 (#12985)

* Fixed an issue with nested contexts unwinding when server rendering. GitHub issue #12984

* Fixed an issue with search direction and stricter false checking

* Use decrement infix operator

* Streamlined existence checks

* Streamlined assignment. Removed redundant comment. Use null for array values

* Made prettier

* Relaxed type checking and improved comment

* Improve test coverage",Eric Soderberg,2018-06-11T13:25:18Z
d0d4280640967eca2faad0d96be6fca08ac846a6,"Remove old reference to inst._wrapperState (#12987)

This commit removes a reference to inst._wrapperState, which was the
old way of tracking input state in the stack renderer.

This means we no longer need to pass the instance into the associated
function, allowing us to eliminate an exception for IE (and a TODO).",Nathan Hunzaker,2018-06-11T13:16:50Z
c78957eac852e673e35bab39ee2dd35d6461d757,"Fix an SVG focusing crash in IE11 (#12996)

* revert #11800

because #12763

* use try/catch for SVG in IE11

* use focusNode(element) when element.focus isn't a function.

* revert #11800",Jifa Jiang,2018-06-11T02:39:29Z
bfb12ebb521853f6604521d4d548f5f5840a16de,delete a couple of redundant lines in performWorkOnRoot() in ReactFiberScheduler.js (#13003),Nathan Quarles,2018-06-09T21:56:21Z
394b17eede14c97ceff3827b716ca016e805a094,Update custom renderer docs,Dan Abramov,2018-06-09T21:19:12Z
188c4252a2a87d46199011c1f2ed9a3e8293cf64,"Fix react-dom ReferenceError requestAnimationFrame in non-browser env (#13000) (#13001)

* Fix react-dom ReferenceError requestAnimationFrame in non-browser env (#13000)

The https://github.com/facebook/react/pull/12931 ( https://github.com/facebook/react/commit/79a740c6e32ca300d4e7ff55ab06de172d4237fd ) broke the server-side rendering: in the `fixtures/ssr` the following error appeared from the server-side when `localhost:3000` is requested:
```
ReferenceError: requestAnimationFrame is not defined
    at /__CENSORED__/react/build/node_modules/react-dom/cjs/react-dom.development.js:5232:34
    at Object.<anonymous> (/__CENSORED__/react/build/node_modules/react-dom/cjs/react-dom.development.js:17632:5)
    at Module._compile (module.js:624:30)
    at Module._extensions..js (module.js:635:10)
    at Object.require.extensions.(anonymous function) [as .js] (/__CENSORED__/react/fixtures/ssr/node_modules/babel-register/lib/node.js:152:7)
    at Module.load (module.js:545:32)
    at tryModuleLoad (module.js:508:12)
    at Function.Module._load (module.js:500:3)
    at Module.require (module.js:568:17)
    at require (internal/module.js:11:18)
```

The exception pointed to this line:
```js
// We capture a local reference to any global, in case it gets polyfilled after
// this module is initially evaluated.
// We want to be using a consistent implementation.
const localRequestAnimationFrame = requestAnimationFrame;
```

**Test plan**

1. In `react` repo root, `yarn && yarn build`.
2. In `fixtures/ssr`, `yarn && yarn start`,
3. In browser, go to `http://localhost:3000`.
4. Observe the fixture page, not the exception message.

* Move the requestAnimationFrameForReact check and warning to callsites (#13000)

According to the comment by @gaearon: https://github.com/facebook/react/pull/13001#issuecomment-395803076

* Use `invariant` instead of `throw new Error`, use the same message (#13000)

According to the comment by @gaearon: https://github.com/facebook/react/pull/13001#discussion_r194133355",Ivan Babak,2018-06-08T22:12:20Z
d3e0a3aaf33dd0134a2c5296db8b6ca43cab968e,"Fix jest/matchers/toWarnDev expected, actual order for jest-diff (#12285) (#12288)

`toWarnDev` calls `jestDiff(a, b)` which calls `diffStrings(a, b)` where by default `a` is annotated as `'Expected'` (green), `b` as `'Received'` (red).

So the first argument passed into `jestDiff` should be the expected message, the second should be the actual message.
It was vice versa previously.

- https://github.com/facebook/jest/blob/457776b2889a9be1ce8a2c636a23417264a98d99/packages/jest-diff/src/index.js#L54
- https://github.com/facebook/jest/blob/457776b2889a9be1ce8a2c636a23417264a98d99/packages/jest-diff/src/index.js#L93
- https://github.com/facebook/jest/blob/457776b2889a9be1ce8a2c636a23417264a98d99/packages/jest-diff/src/diff_strings.js#L249-L251",Ivan Babak,2018-06-08T12:18:22Z
9cf3733a9a43aa53d1a3cc94b2cd015b235b84cc,update comment in computeAsyncExpiration() to reflect code (#12994),Nathan Quarles,2018-06-07T20:12:08Z
52fbe7612e0527b8c86decac519c344626f6bd72,use --frozen-lockfile in AppVeyor (#12950),Demian Dekoninck,2018-06-06T13:19:33Z
c5a733e1e3ffa74bc6bbc769f1b13ecff9915763,Fix links of docs on the comment (#12795),Ende93,2018-06-05T12:03:03Z
36546b5137e9012ebdc62fc9ec11e3518c9e0aab,"Set the correct initial value on input range (#12939)

* Set the correct initial value on input range

* Add description and update value diff check for input range

* add isHydrating argument and tests

* update node value according to isHydrating",Maxime Nory,2018-05-31T21:23:26Z
65ab53694f6edf4437034d5644a602dea162e249,Update token (#12956),Héctor Ramos,2018-05-31T20:36:55Z
15767a8f8f798f0d80df4ddbc7cfaebdc29996a8,"[scheduler] 5/n Error handling in scheduler (#12920)

* Initial failing unit test for error handling in schedule

**what is the change?:**
see title

**why make this change?:**
Adding tests for the error handling behavior we are about to add. This
test is failing, which gives us the chance to make it pass.

Wrote skeletons of some other tests to add.

Unit testing this way is really hacky, and I'm also adding to the
fixture to test this in the real browser environment.

**test plan:**
Ran new test, saw it fail!

* Add fixture for testing error handling in scheduler

**what is the change?:**
Added a fixture which does the following -
logs in the console to show what happens when you use
`requestAnimationFrame` to schedule a series of callbacks and some of
them throw errors.

Then does the same actions with the `scheduler` and verifies that it
behaves in a similar way.

Hard to really verify the errors get thrown at the proper time without
looking at the console.

**why make this change?:**
We want the most authentic, accurate test of how errors are handled in
the scheduler. That's what this fixture should be.

**test plan:**
Manually verified that this test does what I expect - right now it's
failing but follow up commits will fix that.

* Handle errors in scheduler

**what is the change?:**
We set a flag before calling any callback, and then use a 'try/finally'
block to wrap it. Note that we *do not* catch the error, if one is
thrown. But, we only unset the flag after the callback successfully
finishes.

If we reach the 'finally' block and the flag was not unset, then it
means an error was thrown.

In that case we start a new postMessage callback, to finish calling any
other pending callbacks if there is time.

**why make this change?:**
We need to make sure that an error thrown from one callback doesn't stop
other callbacks from firing, but we also don't want to catch or swallow
the error because we want engineers to still be able to log and debug
errors.

**test plan:**
New tests added are passing, and we verified that they fail without this
change.

* Add more tests for error handling in scheduler

**what is the change?:**
Added tests for more situations where error handling may come up.

**why make this change?:**
To get additional protection against this being broken in the future.

**test plan:**
Ran new tests and verified that they fail when error handling fails.

* callSafely -> callUnsafely

* Fix bugs with error handling in schedule

**what is the change?:**
- ensure that we properly remove the callback from the linked list, even
if it throws an error and is timed out.
- ensure that you can call 'cancelScheduledWork' more than once and it
is idempotent.

**why make this change?:**
To fix bugs :)

**test plan:**
Existing tests pass, and we'll add more tests in a follow up commit.

* Unit tests for error handling with timed out callbacks

**what is the change?:**
More unit tests, to cover behavior which we missed; error handling of
timed out callbacks.

**why make this change?:**
To protect the future!~

**test plan:**
Run the new tests.

* Adds fixture to test timed out callbacks with scheduler

**what is the change?:**
See title

In the other error handling fixture we compare 'scheduleWork' error
handling to 'requestAnimationFrame' and try to get as close as possible.
There is no 'timing out' feature with 'requestAnimationFrame' but
effectively the 'timing out' feature changes the order in which things
are called. So we just changed the order in the 'requestAnimationFrame'
version and that works well for illustrating the behavior we expect in
the 'scheduleWork' test.

**why make this change?:**
We need more test coverage of timed out callbacks.

**test plan:**
Executed the fixture manually in Firefox and Chrome. Results looked
good.

* fix rebase problems

* make fixture compensate for chrome JS speed

* ran prettier

* Remove 'cancelled' flag on callbackConfig in scheduler, add test

**what is the change?:**
- Instead of using a 'cancelled' flag on the callbackConfig, it's easier
to just check the state of the callbackConfig inside
'cancelScheduledWork' to determine if it's already been cancelled. That
way we don't have to remember to set the 'cancelled' flag every time we
call a callback or cancel it. One less thing to remember.
- We added a test for calling 'cancelScheduledWork' more than once,
which would have failed before.

Thanks @acdlite for suggesting this in code review. :)

**why make this change?:**
To increase stability of the schedule module, increase test coverage.

**test plan:**
Existing tests pass and we added a new test to cover this behavior.

* fix typo",Flarnie Marchan,2018-05-30T22:38:48Z
3118ed9d640ad28af306de308301f4fcd029ffca,Expose unstable_interactiveUpdates on ReactDOM (#12943),Andrew Clark,2018-05-30T22:31:59Z
524a74331399fd7102037c878f327afbd5e14f53,"Fix for Flow issues in SimpleCacheProvider (#12942)

* Fix for Flow issues in SimpleCacheProvider

**what is the change?:**
- Fixed some flow errors which were somehow swallowed when CI
originally
- Loosen flow types to avoid issue with recursive loop in Flow; https://github.com/facebook/flow/issues/5870

**why make this change?:**
To unbreak master and unblock other changes we want to make.

**test plan:**
Flow passes!

**issue:**
https://github.com/facebook/react/issues/12941

* Fix lints",Flarnie Marchan,2018-05-30T22:31:41Z
ae57b125c798418fb6846094cfa911530206e074,"[simple-cache-provider] Use LRU cache eviction (#12851)

* [simple-cache-provider] Use LRU cache eviction

Max size is hard-coded to 500. In the future, we should make this
configurable per resource.

* Evict PAGE_SIZE records from cache when max limit is reached",Andrew Clark,2018-05-30T20:12:29Z
e0a03c1b4d84453122c4e9d1a5e0cec52bef9066,"Extend input type check in selection capabilities (#12062) (#12135)

* Do not set selection when prior selection is undefined (#12062)

`restoreSelection` did not account for input elements that have changed
type after the commit phase. The new `text` input supported selection
but the old `email` did not and `setSelection` was incorrectly trying to
restore `null` selection state.

We also extend input type check in selection capabilities to cover cases
where input type is `search`, `tel`, `url`, or `password`.

* Add link to HTML spec for element types and selection

* Add reset button to ReplaceEmailInput

This commit adds a button to restore the original state of the
ReplaceEmailInput fixture so that it can be run multiple times without
refreshing the page.",Spyros Ioakeimidis,2018-05-30T11:08:21Z
79a740c6e32ca300d4e7ff55ab06de172d4237fd,"Rename variables to remove references to 'global' global (#12931)

**what is the change?:**
In a recent PR we were referencing some global variables and storing
local references to them.

To make things more natural, we co-opted the original name of the global
for our local reference. To make this work with Flow, we get the
original reference from 'window.requestAnimationFrame' and assign it to
'const requestAnimationFrame'.

Sometimes React is used in an environment where 'window' is not defined
- in that case we need to use something else, or hide the 'window'
reference somewhere.

We opted to use 'global' thinking that Babel transforms would fill that
in with the proper thing.

But for some of our fixtures we are not doing that transform on the
bundle.

**why make this change?:**
I want to unbreak this on master and then investigate more about what we
should do to fix this.

**test plan:**
run `yarn build` and open the fixtures.

**issue:**
https://github.com/facebook/react/issues/12930",Flarnie Marchan,2018-05-30T00:54:38Z
ff724d3c286a1753723ea71e8c046498ed1aac98,"[scheduler] 4/n Allow splitting out `schedule` in fb-www, prepare to fix polyfill issue internally (#12900)

* Use local references to global things inside 'scheduler'

**what is the change?:**
See title

**why make this change?:**
We want to avoid initially calling one version of an API and then later
accessing a polyfilled version.

**test plan:**
Run existing tests.

* Shim ReactScheduler for www

**what is the change?:**
In 'www' we want to reference the separate build of ReactScheduler,
which allows treating it as a separate module internally.

**why make this change?:**
We need to require the ReactScheduler before our rAF polyfill activates,
in order to customize which custom behaviors we want.

This is also a step towards being able to experiment with using it
outside of React.

**test plan:**
Ran tests, ran the build, and ran `test-build`.

* Generate a bundle for fb-www

**what is the change?:**
See title

**why make this change?:**
Splitting out the 'schedule' module allows us to load it before
polyfills kick in for rAF and other APIs.

And long term we want to split this into a separate module anyway, this
is a step towards that.

**test plan:**
I'll run the sync next week and verify that this all works. :)

* ran prettier

* fix rebase issues

* Change names of variables used for holding globals",Flarnie Marchan,2018-05-29T20:30:04Z
001f9ef4717a0928b4875cbad3421a17f49f95a5,"Release script prompts for NPM 2FA code (#12908)

* Release script prompts for NPM 2fa code",Brian Vaughn,2018-05-29T19:50:04Z
83f76e4db9a060911774f497b5715bd4d4f42a9c,"ForwardRefs supports propTypes (#12911)

* Moved some internal forwardRef tests to not be internal
* ForwardRef supports propTypes",Brian Vaughn,2018-05-29T16:50:49Z
4f1f909b5b5ffe28675eed3fdb645dfaf975c1ef,"Disable Flow on AppVeyor again

It runs out of memory.",Dan Abramov,2018-05-29T14:47:14Z
8aeea5afa2d688968545b1cc5a30a48ddc0fa503,"Do not assign node.value on input creation if no change will occur (#12925)

This commit fixes an issue where assigning an empty string to required
text inputs triggers the invalid state in Firefox (~60.0.1).

It does this by first comparing the initial state value to the current
value property on the text element. This:

1. Prevents the validation issue
2. Avoids an extra DOM Mutation in some cases",Nathan Hunzaker,2018-05-29T13:48:58Z
aa85b0fd5ffc92de38720c29833a54c67285abfb,"Upgrade to Jest 23 (#12894)

* Upgrade to Jest 23 beta

* prefer `.toHaveBeenCalledTimes`

* 23 stable",Simen Bekkhus,2018-05-28T22:03:15Z
a32f857ac78ad1b33c61e6fbd47ccd57f21155c2,"Use --frozen-lockfile for Yarn in CI build (#12914)

CI builds should always use the `--frozen-lockfile` option. It will fail the build if the lockfile is out-of-date:

> If you need reproducible dependencies, which is usually the case with the continuous integration systems, you should pass --frozen-lockfile flag.

(https://yarnpkg.com/en/docs/cli/install/)",Daniel Lo Nigro,2018-05-28T18:52:42Z
61777a78f6f9d90bea6ecdab4038675010bd70db,"[scheduler] 3/n Use a linked list instead of map and queue for callback storage (#12893)

* [schedule] Use linked list instead of queue and map for storing cbs

NOTE: This PR depends on https://github.com/facebook/react/pull/12880
and https://github.com/facebook/react/pull/12884
Please review those first, and after they land Flarnie will rebase on
top of them.

---

**what is the change?:**
See title

**why make this change?:**
This seems to make the code simpler, and potentially saves space of
having an array and object around holding references to the callbacks.

**test plan:**
Run existing tests

* minor style improvements

* refactor conditionals in cancelScheduledWork for increased clarity

* Remove 'canUseDOM' condition and fix some flow issues w/callbackID type

**what is the change?:**
- Removed conditional which fell back to 'setTimeout' when the
environment doesn't have DOM. This appears to be an old polyfill used
for test environments and we don't use it any more.
- Fixed type definitions around the callbackID to be more accurate in
the scheduler itself, and more loose in the React code.

**why make this change?:**
To get Flow passing, simplify the scheduler code, make things accurate.

**test plan:**
Run tests and flow.

* Rewrite 'cancelScheduledWork' so that Flow accepts it

**what is the change?:**
Adding verification that 'previousCallbackConfig' and
'nextCallbackConfig' are not null before accessing properties on them.

Slightly concerned because this implementation relies on these
properties being untouched and correct on the config which is passed to
'cancelScheduledWork' but I guess we already rely heavily on that for
this whole approach. :\

**why make this change?:**
To get Flow passing.

Not sure why it passed earlier and in CI, but now it's not.

**test plan:**
`yarn flow dom` and other flow tests, lint, tests, etc.

* ran prettier

* Put back the fallback implementation of scheduler for node environment

**what is the change?:**
We had tried removing the fallback implementation of `scheduler` but
tests reminded us that this is important for supporting isomorphic uses
of React.

Long term we will move this out of the `schedule` module but for now
let's keep things simple.

**why make this change?:**
Keep things working!

**test plan:**
Ran tests and flow

* Shorten properties stored in objects by sheduler

**what is the change?:**
`previousScheduledCallback` -> `prev`
`nextScheduledCallback` -> `next`

**why make this change?:**
We want this package to be smaller, and less letters means less code
means smaller!

**test plan:**
ran existing tests

* further remove extra lines in scheduler",Flarnie Marchan,2018-05-26T22:55:57Z
e7bd3d59a9502b4727982087b70d82693ebde7d8,No longer expose ReactNativeComponentTree (#12904),Sebastian Markbåge,2018-05-26T04:17:37Z
f35d989bea2ee38c164c0cbb23cd300552e998f9,"TestRenderer warns if flushThrough is passed the wrong params (#12909)

TestRenderer throws if flushThrough is passed the expected yield values that don't match actual yield values.",Brian Vaughn,2018-05-25T21:53:24Z
55787006710bd8ef89a01d60c4a9cfa58c71035d,"Record ""actual"" times for all Fibers within a Profiler tree (alt) (#12910)

* Moved actual time fields from Profiler stateNode to Fiber

* Record actual time for all Fibers within a ProfileMode tree

* Changed how profiler accumulates time

This change gives up on accumulating time across renders of different priority, but in exchange- simplifies how the commit phase (reset) code works, and perhaps also makes the profiling code more compatible with future resuming behavior",Brian Vaughn,2018-05-25T21:51:13Z
76e07071a11cd6e4796ad846bc835a18c8f49647,"[scheduler] 2/n Adding 'schedule' fixture (#12884)

* Adding 'schedule' fixture

**what is the change?:**
We need to test the `schedule` module against real live browser APIs. As
a quick solution we're writing a fixture for using in manual testing.
Later we plan on adding automated browser testing, using this or a
similar fixture as the test page.

**why make this change?:**
To further solidify test coverage for `schedule` before making further
improvements/refactors to the module.

**test plan:**
`open fixtures/schedule/index.html` and inspect the results. It should
be clear that things pass.

We also temporarily broke the scheduler and verified that this fixture
demonstrates the problems.

**issue:**
Internal task T29442940

* Made fixture tests display red or green border depending on pass/fail

**what is the change?:**
Added red/green solid/dashed border for test results when using the
schedule fixture.

We also tweaked the timing of the last test because it was on the line
in terms of whether it passed or failed.

**why make this change?:**
To make it faster to use the fixture - it takes more time to read
through the results line by line and check that they match what is
expected.

**test plan:**
Looked at the fixture, and also tried modifying a test to show what it
looks like when something fails.",Flarnie Marchan,2018-05-24T21:11:25Z
345e0a71acc12fae78349b6036fa00dbf5300384,"Improve tests for 'schedule' module (#12880)

**what is the change?:**
Renamed some methods, and made a method to advance a frame in the test
environment.

**why make this change?:**
We often need to simulate a frame passing with some amount of idle time
or lack of idle time, and the new method makes it easier to write that
out.

**test plan:**
Run the updated tests.
Also temporarily tried breaking the scheduler and verified that the
tests will fail.

**issue:**
See internal task T29442940",Flarnie Marchan,2018-05-24T17:27:23Z
fa7fa812c70084e139d13437fb204fcdf9152299,Update CHANGELOG for 16.4.0,Andrew Clark,2018-05-24T01:20:27Z
8765d608935a81ba5019f6cde6dce3367d392f0c,Update bundle sizes for 16.4.0 release,Andrew Clark,2018-05-24T00:35:31Z
d31e753f89589fe080543a24fb732d5c0f263f62,Update error codes for 16.4.0 release,Andrew Clark,2018-05-24T00:35:31Z
d427a563d56bec6722f9d5f20001ea91ea3421d0,Updating package versions for release 16.4.0,Andrew Clark,2018-05-24T00:30:33Z
eca59ec1b326e1e3e722cbfe8b6361bd4d2ff66d,Updating yarn.lock file for 16.4.0 release,Andrew Clark,2018-05-24T00:26:46Z
53852a887bc67c760264bf8c34a8c95fa9ab099d,add functional components warning about legacy context api (#12892),Chang Yan,2018-05-23T21:16:39Z
fe747a51c1fdedd87c4e9e281441f2d8d04e02b3,Add React.Timeout to getComponentName (#12890),Toru Kobayashi,2018-05-23T17:39:20Z
3df157480a543e626ac90b13d923c439e69724d0,Fix a typo (#12889),Toru Kobayashi,2018-05-23T16:47:23Z
6f4fb4a05937b2d27ea38cddc9104859adbf12eb,Tweak the changelog,Dan Abramov,2018-05-23T16:04:42Z
d1be01f079ed20b06bc76a0e66eb0d2c615e3aad,Add upcoming 16.4.0 changelog,Dan Abramov,2018-05-23T15:40:35Z
c601f7a64640290af85c9f0e33c78480656b46bc,add siblings Timeout components test case (#12862),Chang Yan,2018-05-22T22:39:40Z
7350358374036c0834ea6b69cea7491abbbb1af0,"add legacy context API warning in strict mode (#12849)

* add legacy context APIs warning in strict mode

* refactor if statement and the warning message

* add other flags for type check

* add component stack tree and refactor wording

* fix the nits",Chang Yan,2018-05-22T22:38:02Z
e8857918422b5ce8505ba5ce4a2d153e509c17a1,"Fix a regression that caused us to listen to extra events at the top (#12878)

* Rewrite to a switch

I find it a bit easier to follow than many comparison conditions.

* Remove unnecessary assignments

They are being assigned below anyway. This is likely a copypasta from the FOCUS/BLUR special case (which *does* need those assignments).

* Unify ""cancel"" and ""close"" cases

Their logic is identical.

* Don't listen to media events at the top

* Add a unit test for double-invoking form events

* Remove an unused case and document it in a test

The case I added was wrong (just like including this event in the top level list was always wrong).

In fact it never bubbles, even for <img>. And since we don't special case it in the <img> event
attachment logic when we create it, we never supported <img onLoadStart> at all.

We could fix it. But Chrome doesn't support it either: https://bugs.chromium.org/p/chromium/issues/detail?id=458851.
Nobody asked us for it yet. And supporting it would require attaching an extra listener to every <img>.

So maybe we don't need it? Let's document the existing state of things.

* Add a test verifying we don't attach unnecessary listeners

* Add a comment

* Add a test for submit (bubbles: false)",Dan Abramov,2018-05-22T18:50:36Z
7c0aca289d2ae6444e70753287602222701b1703,"Rollup freeze: false (#12879)

* Tell Rollup not to freeze bundles
* Only freeze bundles for DEV builds",Brian Vaughn,2018-05-22T15:16:59Z
33289b530c6bdd596290b19d392925b933ea7a7b,"Tests and fixes for 'timing out' behavior (#12858)

**what is the change?:**
Test coverage checking that callbacks are called when they time out.

This test surfaced a bug and this commit includes the fix.

I want to refine this approach, but basically we can simulate time outs
by controlling the return value of 'now()' and the argument passed to
the rAF callback.

Next we will write a browser fixture to further test this against real
browser APIs.

**why make this change?:**
Better tests will keep this module working smoothly while we continue
refactoring and improving it.

**test plan:**
Run the new tests, see that it fails without the bug fix.",Flarnie Marchan,2018-05-22T15:03:55Z
ad27845ccd4fe34189514db23b645d7ab2213496,"Fix double-firing submit events (#12877)

We were adding a listener at the root when we weren't meant to. Blames to e96dc140599363029bd05565d58bcd4a432db370.

This now alerts once (at FORM) instead of twice (at FORM, #document):

```
var Hello = class extends React.Component {
  render() {
    return (
      <form onSubmit={(e) => {e.preventDefault(); alert('hi ' + e.nativeEvent.currentTarget.nodeName);}}>
        <button>hi</button>
      </form>
    );
  }
};
```",Sophie Alpert,2018-05-22T00:47:56Z
60853f09f35ebece5b4a152b2f52544cb6dbfc8d,"Try to reenable Flow on Windows CI

We should have more memory now",Dan Abramov,2018-05-21T17:53:00Z
dd5fad29616f706f484938663e93aaadd2a5e594,"Update Flow to 0.70 (#12875)

* Update Flow to 0.70

* Remove unnecessary condition

* Fix wrong assertion

* Strict check",Dan Abramov,2018-05-21T16:54:48Z
13003654e79f9fa65ee833afeec86d668f35d31d,"Pass ""start time"" and ""commit time"" to Profiler callback (#12852)

* Added start time parameter to Profiler onRender callback
* Profiler also captures commit time
* Only init Profiler stateNode if enableProfilerTimer feature flag enabled",Brian Vaughn,2018-05-21T16:49:22Z
12c8a88cd9a6cc7309e5fc566ba5672aab0b78a9,Update Jest (#12874),Dan Abramov,2018-05-21T15:17:11Z
dc3b144f4162087665f62f4fdac69549181ce310,"Treat Rollup ""warnings"" as errors (#12868)",Dan Abramov,2018-05-21T14:38:46Z
0442e8275f02d500cdc2e8b8b703286a67d7ad1d,Add a clear error when renderers clash in tests (#12867),Dan Abramov,2018-05-21T14:38:35Z
089d2deb20741c57784f9fd9d88146965245e650,add netlify toml file (#12350),Kevin Lamping,2018-05-20T20:03:51Z
d7b9b4921b9f5bd12500df9b9f164caa4bcd75eb,Fix react native example links in README of 'react-reconciler' (#12871),"Kevin (Kun) ""Kassimo"" Qian",2018-05-20T11:01:00Z
9bed4a6aee557e2f7425705c64e49369125cceeb,https in reactProdInvariant text (#12869),Sophie Alpert,2018-05-20T00:29:41Z
397d6115b7a09f92d4df49ded6e412b5e7ddd859,"Temporarily disable Flow on AppVeyor

I think it runs out of memory. I’ll reenable if we can bump the limit.",Dan Abramov,2018-05-19T12:54:44Z
47b003a828fe98e12947ba98e819ec4e617deef1,"Resolve host configs at build time (#12792)

* Extract base Jest config

This makes it easier to change the source config without affecting the build test config.

* Statically import the host config

This changes react-reconciler to import HostConfig instead of getting it through a function argument.

Rather than start with packages like ReactDOM that want to inline it, I started with React Noop and ensured that *custom* renderers using react-reconciler package still work. To do this, I'm making HostConfig module in the reconciler look at a global variable by default (which, in case of the react-reconciler npm package, ends up being the host config argument in the top-level scope).

This is still very broken.

* Add scaffolding for importing an inlined renderer

* Fix the build

* ES exports for renderer methods

* ES modules for host configs

* Remove closures from the reconciler

* Check each renderer's config with Flow

* Fix uncovered Flow issue

We know nextHydratableInstance doesn't get mutated inside this function, but Flow doesn't so it thinks it may be null.
Help Flow.

* Prettier

* Get rid of enable*Reconciler flags

They are not as useful anymore because for almost all cases (except third party renderers) we *know* whether it supports mutation or persistence.

This refactoring means react-reconciler and react-reconciler/persistent third-party packages now ship the same thing.
Not ideal, but this seems worth how simpler the code becomes. We can later look into addressing it by having a single toggle instead.

* Prettier again

* Fix Flow config creation issue

* Fix imprecise Flow typing

* Revert accidental changes",Dan Abramov,2018-05-19T10:29:11Z
c0fe8d6f6942f5cbc93c09825e803ba8cf950522,"Adds ReactScheduler red->green unit test for bug fixed in #12834 (#12861)

* Scheduler red->green unit test for bug

* fix lint issue

* ran prettier",Royi Hagigi,2018-05-18T22:05:21Z
5e80d81f37789944dc578f02ffc3e6f9cf277440,"High pri - ensure we call timed out callbacks in schedule (#12857)

**what is the change?:**
Fix a typo which caused timed out callbacks to not be called.

**why make this change?:**
This is a bug caught by tests I'm in the process of writing, and we
should fix it asap.

**test plan:**
Tests in a WIP PR - will push and share the WIP test in comments on this
PR.",Flarnie Marchan,2018-05-18T17:05:49Z
17908c8ac92333b32596378267e09b014af65cff,Add test to ensure no duplicate values in ReactSymbols (#12845),Brian Vaughn,2018-05-18T14:57:25Z
96992f2a6ce6174e5f4dcf1572ee519950da485c,Try to fix Windows CI,Dan,2018-05-18T08:25:50Z
972d209dcc9edf020b3d144716211c295d1b0cc5,Fix sample command in scripts/bench/README.md (#12853),Pete Nykänen,2018-05-18T08:18:35Z
40addbd110335c8e900d30657fa82b06f2c89808,"Run Flow for each renderer separately (#12846)

* Generate Flow config on install

We'll need to do pre-renderer Flow passes with different configs.
This is the first step to get it working. We only want the original version checked in.

* Create multiple Flow configs from a template

* Run Flow per renderer

* Lint

* Revert the environment consolidation

I thought this would be a bit cleaner at first because we now have non-environment files in this directory.
But Sebastian is changing these files at the same time so I want to avoid conflicts and keep the PR more tightly scoped. Undo.

* Misc",Dan Abramov,2018-05-18T01:05:19Z
40ea053bac8c5ecfd51deef592a397004c4569c0,"Remove incorrect comment

Better to not have it than it being wrong.",Sebastian Markbåge,2018-05-17T22:47:10Z
c5a8dae025812adebdebfa1e96e80c923dd527ae,"[Fabric] Wire up event emitters (#12847)

I'm exposing a new native method to wire up the event emitter. This will
use a straight fiber pointer instead of react tags to do the dispatching.",Sebastian Markbåge,2018-05-17T19:38:50Z
9d71ef26c3602d4292c070fcbb75fe721537f573,Run the CI script on Windows,Dan Abramov,2018-05-17T18:18:47Z
1a0afed771228667f26e74430f5d5825c06bc42d,getPeerGlobals should check bundleType instead of moduleType (#12839),Gary Wang,2018-05-17T16:16:03Z
b245795de373ca8f4a6c4962b59773e2f1bb2f1d,"Re-enable Flow for ReactFiber and fix Flow issues (#12842)

* Lint for untyped imports and enable Flow typing in ReactFiber

* Re-enable Flow for ReactFiber and fix Flow issues

* Avoid an invariant in DEV-only code

I just introduced it, but on a second thought, it's better to keep it as a warning.

* Address review",Dan Abramov,2018-05-17T16:14:12Z
7ccb37161ffcbea33d6ede1397098faa567751f3,"Temporary fix for grabbing wrong rAF polyfill in ReactScheduler (#12837)

* Temporary fix for grabbing wrong rAF polyfill in ReactScheduler

**what is the change?:**
For now...
We need to grab a slightly different implementation of rAF internally at
FB than in Open Source. Making rAF a dependency of the ReactScheduler
module allows us to fork the dependency at FB.

NOTE: After this lands we have an alternative plan to make this module
separate from React and require it before our Facebook timer polyfills
are applied. But want to land this now to keep master in a working state
and fix bugs folks are seeing at Facebook.

Thanks @sebmarkbage @acdlite and @sophiebits for discussing the options
and trade-offs for solving this issue.

**why make this change?:**
This fixes a problem we're running into when experimenting with
ReactScheduler internally at Facebook, **and* it's part of our long term
plan to use dependency injection with the scheduler to make it easier to
test and adjust.

**test plan:**
Ran tests, lint, flow, and will manually test when syncing into
Facebook's codebase.

**issue:**
See internal task T29442940

* ran prettier",Flarnie Marchan,2018-05-17T15:57:45Z
4b8510be0faca665b53cdabba56f5334cace7ac0,Make REACT_PROFILER_TYPE numeric value unique (#12843),Brian Vaughn,2018-05-17T15:55:41Z
2d20dc47a399873fd7ac2118e75bd75696cc7b3b,Separate `yarn flow` and `yarn flow-ci` (#12841),Dan Abramov,2018-05-17T13:29:37Z
d4123b4784c75af0bfb5f6505e6c567e354b4155,"Relax current renderer warning (#12838)

If you use an older version of `react` this won't get initialized to null. We don't really need it to be initialized to work.",Sebastian Markbåge,2018-05-17T00:31:56Z
2ace49362adc63bc0bedd5df363bf471adb71b94,Removed duplicate feature flag in test (#12836),Brian Vaughn,2018-05-16T22:39:32Z
2da155a4c317e097f4490c74d173e5a902003572,"Quick fix for minor typo in ReactScheduler (#12834)

**what is the change?:**
We were setting a flag after some early returns, should have set it
right away.

To be fair, it's not clear how you can hit a problem with the current
state of things. Even if a callback is cancelled, it's still in the
'pendingCallbacks' queue until the rAF runs, and we only schedule a rAF
when there are pendingCallbacks in the queue.

But since this is obviously wrong, going to fix it.

We will be adding a regression test in a follow-up PR.

**why make this change?:**
To fix a random bug which was popping up.

**test plan:**
Adding a regression unit test in a follow-up PR.",Flarnie Marchan,2018-05-16T21:18:22Z
d6f304e88952b895a9e1c69483081d2d9ef56979,Remove Timeout export on React object unless enableSuspense flag (#12833),Brian Vaughn,2018-05-16T21:02:34Z
8227e54ccf32f47e4c6bf5f30d08f84b8fed455d,"Quick fix for ReactScheduler type inconsistency (#12828)

**what is the change?:**
In some cases we had defined the 'callback' as taking two arguments,
when really we meant to indicate the second argument passed to
'scheduleWork'.

**why make this change?:**
For correctness and to unblock something @gaearon is working on. A bit
surprised Flow didn't catch this in the first place.

**test plan:**
Ran tests, flow, lint.",Flarnie Marchan,2018-05-16T15:07:42Z
ef294ed6fcb7378ba25525e58e0588e3e8e85c48,"Rename Scheduler methods more accurately (#12770)

* Rename Scheduler methods more accurately

**what is the change?:**
```
rIC -> scheduleCallback
```
We will later expose a second method for different priority level, name
TBD. Since we only have one priority right now we can delay the
bikeshedding about the priority names.

cIC -> cancelScheduledCallback
This method can be used to cancel callbacks scheduled at any priority
level, and will remain named this way.

why make this change?:
Originally this module contained a polyfill for requestIdleCallback
and cancelIdleCallback but we are changing the behavior so it's no
longer just a polyfill. The new names are more semantic and distinguish
this from the original polyfill functionality.

**test plan:**
Ran the tests

**why make this change?:**
Getting this out of the way so things are more clear.

**Coming Up Next:**
- Switching from a Map of ids and an array to a linked list for storing
callbacks.
- Error handling

* callback -> work

* update callsites in new places after rebase

* fix typo",Flarnie Marchan,2018-05-16T13:36:06Z
49979bbf521102d0fb55c77323bcec6fd6871a03,"Support Pointer Events (#12507)

* Support Pointer Events

* Add Pointer Events DOM Fixture",Philipp Spieß,2018-05-16T13:34:33Z
de84d5c1079b12455058ee177fb3ff97cc0fb8d0,"Enable Profiler timing for DOM and RN dev bundles (#12823)

* Enable Profiler timing for DOM and RN dev bundles
* Disable enableProfilerTimer feature flag for ReactIncrementalPerf-test",Brian Vaughn,2018-05-15T22:26:46Z
f79227597202336b5a6e62642dc42646d9639cee,"Pass instance handle to all Fabric clone methods (#12824)

We might need this in the future if we want to ensure event handler
consistency when an event handler target has been removed before it is
called.",Sebastian Markbåge,2018-05-15T21:35:13Z
a5184b215daeb7004025dfef223eda9236457358,Add FB www build of simple-cache-provider (#12822),Andrew Clark,2018-05-15T20:21:07Z
103503eb69d899de4ed127b2473201db1c30d027,"Only measure ""base"" times within ProfileMode (#12821)

* Conditionally start/stop base timer only within Profile mode tree
* Added test to ensure ProfilerTimer not called outside of Profiler root",Brian Vaughn,2018-05-15T19:43:42Z
9097f3cdf089a34d873f3d349e3bfbed90852fad,Delete React Call/Return experiment (#12820),Dan Abramov,2018-05-15T18:16:29Z
d758960116b3ea3a3bd3dfe2f297d5e680fe9ff5,Tweak comments,Dan Abramov,2018-05-15T14:42:43Z
025d867dceccfa54cfa12122a982ad3c3eff995a,Try another approach at fixing Windows Flow issues,Dan Abramov,2018-05-15T14:20:15Z
fe7890d569c5aa94c371bdb27c5db7bde4ec385a,Revert recent Flow changes,Dan Abramov,2018-05-15T14:03:07Z
7ba1abecaa7a1a9a7a5456a66521f2869ba83c1f,Try to fix Flow issue on Windows (part 5),Dan Abramov,2018-05-15T13:55:38Z
f2252a2ad4e47d5bdc1d7778c7d6eb2d318fed0d,Try to fix Flow issue on Windows (part 4),Dan Abramov,2018-05-15T13:46:58Z
b998357f9d1a4d933758dd10412e9ff99def36df,Try to fix Flow issue on Windows (part 3),Dan Abramov,2018-05-15T13:26:32Z
7631024722eae7b03599ba0eeaf9abcd505da13f,Try to fix Flow issue on Windows,Dan Abramov,2018-05-15T13:07:01Z
bb44feb05dd258c4b4868f6c3f11bf0a2f491564,Try to fix Flow circular dependency,Dan Abramov,2018-05-15T12:55:01Z
7dc1a176b5c50739b200a9d8612a42b110289d22,Skip special nodes when reading TestInstance.parent (#12813),Dan Abramov,2018-05-15T10:11:19Z
e96dc140599363029bd05565d58bcd4a432db370,"Use browser event names for top-level event types in React DOM (#12629)

* Add TopLevelEventTypes

* Fix `ReactBrowserEventEmitter`

* Fix EventPluginUtils

* Fix TapEventPlugin

* Fix ResponderEventPlugin

* Update ReactDOMFiberComponent

* Fix BeforeInputEventPlugin

* Fix ChangeEventPlugin

* Fix EnterLeaveEventPlugin

* Add missing non top event type used in ChangeEventPlugin

* Fix SelectEventPlugin

* Fix SimpleEventPlugin

* Fix outstanding Flow issues and move TopLevelEventTypes

* Inline a list of all events in `ReactTestUtils`

* Fix tests

* Make it pretty

* Fix completly unrelated typo

* Don’t use map constructor because of IE11

* Update typings, revert changes to native code

* Make topLevelTypes in ResponderEventPlugin injectable and create DOM and ReactNative variant

* Set proper dependencies for DOMResponderEventPlugin

* Prettify

* Make some react dom tests no longer depend on internal API

* Use factories to create top level speific generic event modules

* Remove unused dependency

* Revert exposed module renaming, hide store creation, and inline dependency decleration

* Add Flow types to createResponderEventPlugin and its consumers

* Remove unused dependency

* Use opaque flow type for TopLevelType

* Add missing semis

* Use raw event names as top level identifer

* Upgrade baylon

This is required for parsing opaque flow types in our CI tests.

* Clean up flow types

* Revert Map changes of ReactBrowserEventEmitter

* Upgrade babel-* packages

Apparently local unit tests also have issues with parsing JavaScript
modules that contain opaque types (not sure why I didn't notice
earlier!?).

* Revert Map changes of SimpleEventPlugin

* Clean up ReactTestUtils

* Add missing semi

* Fix Flow issue

* Make TopLevelType clearer

* Favor for loops

* Explain the new DOMTopLevelEventTypes concept

* Use static injection for Responder plugin types

* Remove null check and rely on flow checks

* Add missing ResponderEventPlugin dependencies",Philipp Spieß,2018-05-15T09:38:50Z
1047980dca0830cd55e1622f3fbefc38aeaadb91,Remove unused context param from `countChildren` (#12787),Maxim,2018-05-15T09:18:35Z
bde4b1659fd4aea796482f24d40c2e834fca635f,Delete ReactPerf and ReactDebugTool Stubs (#12809),Timothy Yung,2018-05-15T03:28:55Z
73f59e6f3152f0579625ecd50caa936920c8e5eb,"Use global state for `hasForceUpdate` instead of persisting to queue (#12808)

* Use global state for `hasForceUpdate` instead of persisting to queue

Fixes a bug where `hasForceUpdate` was not reset on commit.

Ideally we'd use a tuple and return `hasForceUpdate` from
`processUpdateQueue`.

* Remove underscore and add comment

* Remove temporary variables",Andrew Clark,2018-05-15T02:18:47Z
8c747d01cb395ce06d93c2db6bb3f7b95b57d09d,Use ReactFiberErrorDialog fork for Fabric renderer (#12807),Sophie Alpert,2018-05-15T01:47:40Z
369dd4fb1742917cb14486e33bb0e59bda62b23d,Update headers for React Native shims (#12806),Timothy Yung,2018-05-15T00:47:47Z
45b90d48668dae48aad611819b891d029aa2fb27,"Move renderer host configs into separate modules (#12791)

* Separate test renderer host config

* Separate ART renderer host config

* Separate ReactDOM host config

* Extract RN Fabric host config

* Extract RN host config",Dan Abramov,2018-05-15T00:12:28Z
b2d16047ae8a6405983e8244bf3b482bc57cd5a4,Fix Type for ReactNative.NativeComponent (#12805),Timothy Yung,2018-05-14T23:36:50Z
c802d29bd16753aef15863db8fb3f338c0067c75,Use HostContext to warn about invalid View/Text nesting (#12766),Brian Vaughn,2018-05-14T22:34:01Z
c5d3104fc0958027820972f3416ec572ded89f28,"Do not fire getDerivedStateFromProps unless props or state have changed (#12802)

Fixes an oversight from #12600. getDerivedStateFromProps should fire
if either props *or* state have changed, but not if *neither* have
changed. This prevents a parent from re-rendering if a deep child
receives an update.",Andrew Clark,2018-05-14T21:56:48Z
0ba63aa141e56887127de975704569c9b27c2014,"Mark React Native and Fabric renderers as @generated (#12801)

Mark React Native and Fabric renderers as @generated",Brian Vaughn,2018-05-14T17:39:30Z
c4abfa401503b483944d044c2d6c12c5562a1a8b,"Add context provider/consumer to getComponentName (#12778)

RN Inspector uses these.",Sophie Alpert,2018-05-14T17:10:36Z
2a4d2ca7fc2857bf3ca5d3628211747d7885ed6b,"Set owner correctly inside forwardRef and context consumer (#12777)

Previously, _owner would be null if you create an element inside forwardRef or inside a context consumer. This is used by ReactNativeFiberInspector when traversing the hierarchy and also to give more info in some warning texts. This also means you'll now correctly get a warning if you call setState inside one of these.

Test Plan: Tim tried it in the RN inspector.",Sophie Alpert,2018-05-14T17:07:31Z
72542030cffee83ac359374a5e7cec9742183b11,"Use Java version of Google Closure Compiler (#12800)

* makes closure compiler threaded

* Dans PR with a closure compiler java version

* Remove unused dep

* Pin GCC

* Prettier

* Nit rename

* Fix error handling

* Name plugins consistently

* Fix lint

* Maybe this works?

* or this

* AppVeyor

* Fix lint",Dan Abramov,2018-05-14T16:49:41Z
37d12e29169f4ef4ab06eb0626cde4f0fee729cc,Update lockfile,Dan Abramov,2018-05-14T15:20:33Z
0470854f5522dde521d46049bcac894b2e86d280,"Split ReactNoop into normal and persistent exports (#12793)

* Copy-paste ReactNoop into ReactNoopPersistent

* Split ReactNoop into normal and persistent exports

* ReactNoopShared -> createReactNoop",Dan Abramov,2018-05-14T12:57:33Z
d430e1358227f316ef41650c8e1b9674de11ab84,Fix a typo (#12798),Toru Kobayashi,2018-05-14T11:35:20Z
8506062975b36cad1b92a39e66bfa59f637ee672,remove unused ES3-specific packages - refs #12716 (#12797),Bartosz Kaszubowski,2018-05-14T10:18:31Z
7b19f93ab9159164ad35b09abcd0c7a936ff3e3c,Record sizes,Dan,2018-05-13T20:12:25Z
4b2e65d32e3adec7d4ef5ddd5fcb35e617e0cde6,"Put recent change to getDerivedStateFromProps behind a feature flag (#12788)

This will allow us to safely ship it at Facebook and get a better idea
for if/how it breaks existing product code.",Andrew Clark,2018-05-12T01:45:00Z
4f459bb144cad7c12e49d8afa2449ff6d9ed9e1f,"Shallow renderer: pass component instance to setState updater as `this` (#12784)

* Shallow renderer: pass component instance to setState updater as `this`

* Run prettier",Filipp Riabchun,2018-05-11T17:03:08Z
b0726e99476ea67c7558cbf268685998a38ade7c,"Support sharing context objects between concurrent renderers (#12779)

* Support concurrent primary and secondary renderers.

As a workaround to support multiple concurrent renderers, we categorize
some renderers as primary and others as secondary. We only expect
there to be two concurrent renderers at most: React Native (primary) and
Fabric (secondary); React DOM (primary) and React ART (secondary).
Secondary renderers store their context values on separate fields.

* Add back concurrent renderer warning

Only warn for two concurrent primary or two concurrent secondary renderers.

* Change ""_secondary"" suffix to ""2""

#EveryBitCounts",Andrew Clark,2018-05-11T01:34:01Z
6565795377d1d2c79a7708766f1af9e1a87517de,"Suspense (#12279)

* Timeout component

Adds Timeout component. If a promise is thrown from inside a Timeout component,
React will suspend the in-progress render from committing. When the promise
resolves, React will retry. If the render is suspended for longer than the
maximum threshold, the Timeout switches to a placeholder state.

The timeout threshold is defined as the minimum of:
- The expiration time of the current render
- The `ms` prop given to each Timeout component in the ancestor path of the
thrown promise.

* Add a test for nested fallbacks

Co-authored-by: Andrew Clark <acdlite@fb.com>

* Resume on promise rejection

React should resume rendering regardless of whether it resolves
or rejects.

* Wrap Suspense code in feature flag

* Children of a Timeout must be strict mode compatible

Async is not required for Suspense, but strict mode is.

* Simplify list of pending work

Some of this was added with ""soft expiration"" in mind, but now with our revised
model for how soft expiration will work, this isn't necessary.

It would be nice to remove more of this, but I think the list itself is inherent
because we need a way to track the start times, for <Timeout ms={ms} />.

* Only use the Timeout update queue to store promises, not for state

It already worked this way in practice.

* Wrap more Suspense-only paths in the feature flag

* Attach promise listener immediately on suspend

Instead of waiting for commit phase.

* Infer approximate start time using expiration time

* Remove list of pending priority levels

We can replicate almost all the functionality by tracking just five
separate levels: the highest/lowest priority pending levels, the
highest/lowest priority suspended levels, and the lowest pinged level.

We lose a bit of granularity, in that if there are multiple levels of
pending updates, only the first and last ones are known. But in practice
this likely isn't a big deal.

These heuristics are almost entirely isolated to a single module and
can be adjusted later, without API changes, if necessary.

Non-IO-bound work is not affected at all.

* ReactFiberPendingWork -> ReactFiberPendingPriority

* Renaming method names from ""pending work"" to ""pending priority""

* Get rid of SuspenseThenable module

Idk why I thought this was neccessary

* Nits based on Sebastian's feedback

* More naming nits + comments

* Add test for hiding a suspended tree to unblock

* Revert change to expiration time rounding

This means you have to account for the start time approximation
heuristic when writing Suspense tests, but that's going to be
true regardless.

When updating the tests, I also made a fix related to offscreen
priority. We should never timeout inside a hidden tree.

* palceholder -> placeholder",Andrew Clark,2018-05-11T01:09:10Z
42a126237507a2038e9dbd7222a94b0debb9a69a,Update sizes,Andrew Clark,2018-05-11T01:08:11Z
fc3777b1fe295fd2661f1974f5587d214791f04b,"Add Profiler component for collecting new render timing info (#12745)

Add a new component type, Profiler, that can be used to collect new render time metrics. Since this is a new, experimental API, it will be exported as React.unstable_Profiler initially.

Most of the functionality for this component has been added behind a feature flag, enableProfileModeMetrics. When the feature flag is disabled, the component will just render its children with no additional behavior. When the flag is enabled, React will also collect timing information and pass it to the onRender function (as described below).",Brian Vaughn,2018-05-10T22:25:32Z
a9abd27e4f5aa1e68bd6035be901299327279ee2,"[schedule] Support multiple callbacks in scheduler (#12746)

* Support using id to cancel scheduled callback

**what is the change?:**
see title

**why make this change?:**
Once we support multiple callbacks you will need to use the id to
specify which callback you mean.

**test plan:**
Added a test, ran all tests, lint, etc.

* ran prettier

* fix lint

* Use object for storing callback info in scheduler

* Wrap initial test in a describe block

* Support multiple callbacks in `ReactScheduler`

**what is the change?:**
We keep a queue of callbacks instead of just one at a time, and call
them in order first by their timeoutTime and then by the order which
they were scheduled in.

**why make this change?:**
We plan on using this module to coordinate JS outside of React, so we
will need to schedule more than one callback at a time.

**test plan:**
Added a boatload of shiny new tests. :)

Plus ran all the old ones.

NOTE: The tests do not yet cover the vital logic of callbacks timing
out, and later commits will add the missing test coverage.

* Heuristic to avoid looking for timed out callbacks when none timed out

**what is the change?:**
Tracks the current soonest timeOut time for all scheduled callbacks.

**why make this change?:**
We were checking every scheduled callback to see if it timed out on
every tick. It's more efficient to skip that O(n) check if we know that
none have timed out.

**test plan:**
Ran existing tests.

Will write new tests to cover timeout behavior in more detail soon.

* Put multiple callback support under a disabled feature flag

**what is the change?:**
See title

**why make this change?:**
We don't have error handling in place yet, so should maintain the old
behavior until that is in place.

But want to get this far to continue making incremental changes.

**test plan:**
Updated and ran tests.

* Hide support for multiple callbacks under a feature flag

**what is the change?:**
see title

**why make this change?:**
We haven't added error handling yet, so should not expose this feature.

**test plan:**
Ran all tests, temporarily split out the tests for multiple callbacks
into separate file. Will recombine once we remove the flag.

* Fix nits from code review

See comments on https://github.com/facebook/react/pull/12743

* update checklist in comments

* Remove nested loop which calls additional timed out callbacks

**what is the change?:**
We used to re-run any callbacks which time out whilst other callbacks
are running, but now we will only check once for timed out callbacks
then then run them.

**why make this change?:**
To simplify the code and the behavior of this module.

**test plan:**
Ran all existing tests.

* Remove feature flag

**what is the change?:**
see title

**why make this change?:**
Because only React is using this, and it sounds like async. rendering
won't hit any different behavior due to these changes.

**test plan:**
Existing tests pass, and this allowed us to recombine all tests to run
in both 'test' and 'test-build' modes.

* remove outdated file

* fix typo",Flarnie Marchan,2018-05-09T22:28:13Z
3fb8be5c30d8f8ec01a4213eb621d5e7c1a6295c,Minor fix params description for addPercent function (#12669),bee0060,2018-05-08T00:46:42Z
0bf24cc83eb8a899c73a96f00c2e63d2db680129,setState returning null and undefined is no-op on the ShallowRenderer (#12756),Toru Kobayashi,2018-05-08T00:31:33Z
25dda90c1ecb0c662ab06e2c80c1ee31e0ae9d36,"Mark context consumers with PerformedWork effect on render (#12729)

* Mark new component types with PerformedWork effect

* Don't do it for ForwardRef

Since this has some overhead and ForwardRef is likely going to be used around context, let's skip it.
We don't highlight ForwardRef alone in DevTools anyway.",Dan Abramov,2018-05-02T15:35:16Z
ad7cd686670d8e519789fb226d8ff9175fb69370,Rename internal property to fix React DevTools (#12727),Dan Abramov,2018-05-01T20:04:20Z
200357596aed51d5a71cac0996e3a0510e507156,"Add error when running jest directly (#12726)

```
$ jest
 FAIL  scripts/jest/dont-run-jest-directly.js
  ● Test suite failed to run

    Don't run `jest` directly. Run `yarn test` instead.

    > 1 | throw new Error(""Don't run `jest` directly. Run `yarn test` instead."");
      2 |

      at Object.<anonymous> (scripts/jest/dont-run-jest-directly.js:1:96)

Test Suites: 1 failed, 1 total
Tests:       0 total
Snapshots:   0 total
Time:        0.866s
Ran all test suites.
```",Sophie Alpert,2018-05-01T19:46:17Z
e0ca51a85d7c5b01c1efa7edb40080770d508cad,Make React.forwardRef() components discoverable by TestRenderer traversal (#12725),Dan Abramov,2018-05-01T18:55:06Z
7dd4ca2911d742f9b5c457ce2d010432fa2d6578,Call getDerivedStateFromProps even for setState of ShallowRenderer (#12676),Toru Kobayashi,2018-04-30T16:04:40Z
9a9f54720fda4c69e35503b64a215e6235cfe07d,Remove ES3-specific transforms (#12716),Dan Abramov,2018-04-30T13:30:37Z
dcc854bcc3c940ca583565ce25200ca618c05bf0,prevent removing attributes on custom component tags (#12702),Airam,2018-04-28T19:52:30Z
045d4f166db6023550b76da6a83fe595a6cdf2f2,"Fix a context propagation bug (#12708)

* Fix a context propagation bug

* Add a regression test",Dan Abramov,2018-04-28T00:52:48Z
7c3932857195d0cfba2379875b65f1bd1fae39fd,"Don't bail on new context Provider if a legacy provider rendered above (#12586)

* Don't bail on new context Provider if a legacy provider rendered above

* Avoid an extra variable",Dan Abramov,2018-04-26T19:59:17Z
d883d59863483a1fb9f3dd0455022e4c6e1a41d5,"forwardRef() components should not re-render on deep setState() (#12690)

* Add a failing test for forwardRef memoization

* Memoize forwardRef props and bail out on strict equality

* Bail out only when ref matches the current ref",Dan Abramov,2018-04-26T18:47:34Z
ec57d2994156ba5fcf794100968764bf25206629,Remove redundant feature flag in the test due to https://github.com/facebook/react/pull/12117 (#12696),Heaven,2018-04-26T17:39:11Z
9c77ffb444598c32c8f92c8d79e406959a10445b,"Dedup conditional in ReactScheduler (#12680)

**what is the change?:**
We had a condition to set either 'performance.now' or 'Date.now' as the
'now' function.

Then later we had another conditional checking again if
'performance.now' was supported, and using it if so, otherwise falling
back to 'Date.now'.

More efficient to just use the 'now' shortcut defined above.

**why make this change?:**
Fewer lines, clearer code.

**test plan:**
Now that we have tests we can run them :)",Flarnie Marchan,2018-04-24T15:54:31Z
09a14eacd45993cfc9fb623a9ee14a924f3ce483,Update bundle sizes,Andrew Clark,2018-04-24T02:38:07Z
1673485720d9ac172fcf1f8628a004a4990bf4f4,Revert stray console.log,Andrew Clark,2018-04-24T01:44:14Z
1e3cd332a015e312149efa36eb81c7523411cc2d,"Remove the 'alwaysUseRequestIdleCallbackPolyfill' feature flag (#12648)

* Remove the 'alwaysUseRequestIdleCallbackPolyfill' feature flag

**what is the change?:**
Removes the feature flag 'alwaysUseRequestIdleCallbackPolyfill', such
that we **always** use the polyfill for requestIdleCallback.

**why make this change?:**
We have been testing this feature flag at 100% for some time internally,
and determined it works better for React than the native implementation.
Looks like RN was overriding the flag to use the native when possible,
but since no RN products are using 'async' mode it should be safe to
switch this flag over for RN as well.

**test plan:**
We have already been testing this internally for some time.

**issue:**
internal task t28128480

* fix mistaken conditional

* Add mocking of rAF, postMessage, and initial test for ReactScheduler

**what is the change?:**
- In all tests where we previously mocked rIC or relied on native
mocking which no longer works, we are now mocking rAF and postMessage.
- Also adds a basic initial test for ReactScheduler.
NOTE -> we do plan to write headless browser tests for ReactScheduler!
This is just an initial test, to verify that it works with the mocked
out browser APIs as expected.

**why make this change?:**
We need to mock out the browser APIs more completely for the new
'ReactScheduler' to work in our tests. Many tests are depending on it,
since it's used at a low level.

By mocking the browser APIs rather than the 'react-scheduler' module, we
enable testing the production bundles. This approach is trading
isolation for accuracy. These tests will be closer to a real use.

**test plan:**
run the tests :)

**issue:**
internal task T28128480",Flarnie Marchan,2018-04-23T22:25:46Z
149a34f735b47f225e3d26ce2478b3181e4ff8fe,Exposed flushSync on the test renderer (#12672),Brian Vaughn,2018-04-23T17:27:39Z
b548b3cd640dbd515f5d67dafc0216bb7ee0d796,"Decouple update queue from Fiber type (#12600)

* Decouple update queue from Fiber type

The update queue is in need of a refactor. Recent bugfixes (#12528) have
exposed some flaws in how it's modeled. Upcoming features like Suspense
and [redacted] also rely on the update queue in ways that weren't
anticipated in the original design.

Major changes:

- Instead of boolean flags for `isReplace` and `isForceUpdate`, updates
have a `tag` field (like Fiber). This lowers the cost for adding new
types of updates.
- Render phase updates are special cased. Updates scheduled during
the render phase are dropped if the work-in-progress does not commit.
This is used for `getDerivedStateFrom{Props,Catch}`.
- `callbackList` has been replaced with a generic effect list. Aside
from callbacks, this is also used for `componentDidCatch`.

* Remove first class UpdateQueue types and use closures instead

I tried to avoid this at first, since we avoid it everywhere else in the Fiber
codebase, but since updates are not in a hot path, the trade off with file size
seems worth it.

* Store captured errors on a separate part of the update queue

This way they can be reused independently of updates like
getDerivedStateFromProps. This will be important for resuming.

* Revert back to storing hasForceUpdate on the update queue

Instead of using the effect tag. Ideally, this would be part of the
return type of processUpdateQueue.

* Rename UpdateQueue effect type back to Callback

I don't love this name either, but it's less confusing than UpdateQueue
I suppose. Conceptually, this is usually a callback: setState callbacks,
componentDidCatch. The only case that feels a bit weird is Timeouts,
which use this effect to attach a promise listener. I guess that kinda
fits, too.

* Call getDerivedStateFromProps every render, even if props did not change

Rather than enqueue a new setState updater for every props change, we
can skip the update queue entirely and merge the result into state at
the end. This makes more sense, since ""receiving props"" is not an event
that should be observed. It's still a bit weird, since eventually we do
persist the derived state (in other words, it accumulates).

* Store captured effects on separate list from ""own"" effects (callbacks)

For resuming, we need the ability to discard the ""own"" effects while
reusing the captured effects.

* Optimize for class components

Change `process` and `callback` to match the expected payload types
for class components. I had intended for the update queue to be reusable
for both class components and a future React API, but we'll likely have
to fork anyway.

* Only double-invoke render phase lifecycles functions in DEV

* Use global state to track currently processing queue in DEV",Andrew Clark,2018-04-23T06:05:28Z
5dcf93d146ccde90af2c442d6cb32b29efddb46b,"Validate props on context providers (#12658)

* checkPropTypes in updateContextProvider

* invalid “prop”

* `type not `types` .. :l

* test

* don’t need extra check with no spelling mistake (:

* change error message to specifically address provider

* don’t need class, add extra render to make sure good props go through

* nitpicky rename

* prettier

* switch to `Context.Provider`

* add stack to warning, add extra undefined check

* separate dev check

* add stack to test

* more efficient

* remove unused function

* prettier

* const to top",Nicole Levy,2018-04-22T12:39:38Z
c040bcbea8e4393fbab549cc195162ac183625ed,"Add server integration tests for new context (#12654)

* Add server integration tests for new context

* Pretty please

* Remove unused",Dan Abramov,2018-04-21T20:21:05Z
999b656ed1c94b00fcfd043f54e18ade7553dee0,"Initial commit (#12624)

This is the first step - pulling the ReactDOMFrameScheduling module out
into a separate package.

Co-authored-by: Brandon Dail <aweary@users.noreply.github.com>",Flarnie Marchan,2018-04-19T16:29:08Z
f80bbf88e5278cab9aca7206a1f241e33f3f674b,"StrictMode should not warn about polyfilled getSnapshotBeforeUpdate (#12647)

* Installed 3.x release of react-lifecycles-compat
* Updated ReactComponentLifeCycle-test and ReactDOMServerLifecycles-test to cover both polyfilled lifecycles in StrictMode
* Updated StrictMode warnings to not warn about polyfilled getSnapshotBeforeUpdate",Brian Vaughn,2018-04-19T16:08:44Z
920f30ef7732e87045ae6652c464b58267991b8f,Add forwardRef DEV warning for prop-types on render function (#12644),Brian Vaughn,2018-04-18T23:36:31Z
0887c7d56cb9b83f36dcb490b4245d7bc33bda1f,"Fork React Native renderer into FB and OSS bundles (#12625)

* Added new ""native-fb"" and ""native-fabric-fb"" bundles.
* Split RN_DEV and RN_PROD bundle types into RN_OSS_DEV, RN_OSS_PROD, RN_FB_DEV, and RN_FB_PROD. (This is a bit redundant but it seemed the least intrusive way of supporting a forked feature flags file for these bundles.)
* Renamed FB_DEV and FB_PROD bundle types to be more explicitly for www (FB_WWW_DEV and FB_WWW_PROD)
* Removed Haste @providesModule headers from the RB-specific RN renderer bundles to avoid a duplicate name conflicts.
* Remove dynamic values from OSS RN feature flags. (Leave them in FB RN feature flags.)
* Updated the sync script(s) to account for new renderer type.
* Move ReactFeatureFlags.js shim to FB bundle only (since OSS bundle no longer needs dynamic values).",Brian Vaughn,2018-04-18T20:16:50Z
039695cc01201e16f41bdf9821439d7fb7a41bdb,[RN] Update Secret Types (#12635),Sebastian Markbåge,2018-04-18T02:21:46Z
b05e67e36a7c75f63aa47e716004f4d21f1d0bdc,Bump Prettier (#12622),Dan Abramov,2018-04-17T00:43:55Z
77ebeb1b09221d031c776f18b5134bd33d600c07,Don't git commit noop-renderer unless package deps change (#12623),Brian Vaughn,2018-04-16T16:46:39Z
b85c5cd1884924d7fe4389121736eaa516ed8e40,remove duplicate code in test (#12620),Heaven,2018-04-16T15:36:49Z
01402f4ad922b5467812586567519e9e5bbd595f,Add 16.3.2 changelog (#12621),Dan Abramov,2018-04-16T15:31:48Z
32326163480b5028ee16f6b4e4ea4426f3c5e95c,Update bundle sizes for 16.3.2 release,Dan Abramov,2018-04-16T15:23:13Z
6494f6b6b8e1cfa5df9f72b4d94cf9ed582805cd,Update error codes for 16.3.2 release,Dan Abramov,2018-04-16T15:23:12Z
82f67d65fd4584c4528352e6b9166ca4da282382,Updating package versions for release 16.3.2,Dan Abramov,2018-04-16T15:14:28Z
66c44a7bc34cb3fcb3c788dcce3f3345a5bd9f58,Updating yarn.lock file for 16.3.2 release,Dan Abramov,2018-04-16T15:12:35Z
1e97a71a829e698ddac0a5e15fbdec97d35ed2bc,"Fix documentation of the release process (#12337)

* Adusted grammar in release script readme.

* Adjusts title and explanation about the release process.",Floris Doolaard,2018-04-16T14:45:13Z
2e1cc2802709877fb2454163ba30e52a91feac8e,Fix small typos in create-subscription readme (#12399),Alex Zherdev,2018-04-16T14:44:38Z
a4cef2970341c08e5c16a2406fbf532fc8053d12,"tests: add regression test for reading ReactCurrentOwner stateNode (#12412)

* tests: add regression test for reading ReactCurrentOwner stateNode

* tests: replace expect with just rendering the component",Rauno Freiberg,2018-04-16T14:44:17Z
1591c8ebab6151f3cae59ad42e3c15acc52cd67b,Update GCC (#12618),Dan Abramov,2018-04-16T14:42:10Z
5dfbfe9da740398c0a2cf4d897a0085000d06b7b,"Fixed debug performance labels for new component types (#12609)

* Added new debug performance tests for AsyncMode, StrictMode, forwardRef, and context provider/consumer components.
* Updated performance labels to exclude AsyncMode and StrictMode.
* Added labels for forwardRef (and inner function) that mirror DevTools labels.",Brian Vaughn,2018-04-12T16:39:05Z
c27a99812e75e73d9fad88c97ac8b8db452012c1,"[Danger] Minor fixes (#12606)

* Don't download bundle stats from master on CI

This was temporarily necessary in the past because we didn't have the logic that downloads actual *merge base* stats.

We do have that now as part of the Danger script. So we can remove this.

* Use absolute threshold for whether to show a change

* Download master stats, but only for other master builds

* Rewrite sizes",Dan Abramov,2018-04-11T17:46:02Z
915bb5321a8db3435eb36ef1cf9414c15333b447,"Bump expiration for interactive updates to 150ms in production (#12599)

* Bump expiration for interactive updates to 150ms in production

**what is the change?:**
Changes the expiration deadline from 500ms to 150ms, only in production.
In development it will still be 500ms.

I'm thinking we may want to change the 'bucket size' too, will look into
that a bit.

**why make this change?:**
We need to ensure interactions are responsive enough in order to gather
more test data on async. mode.

**test plan:**
No tests failed - where shall we add a test for this?

* Add comments",Flarnie Marchan,2018-04-11T14:27:16Z
3e9515eedebe0c19f047391605c5b3c71d13fbc2,Remove @providesModule in www shims,Dan Abramov,2018-04-10T15:53:36Z
b8461524db6d3e016fabf001ad8fa086b4918ef9,Added UMD build to test renderer package (#12594),Brian Vaughn,2018-04-10T14:49:19Z
3eae866e03a96c4f46e257cba73ca158b049ab05,Fixes language in error message. (#12590),Steven Frieson,2018-04-10T14:09:45Z
52afbe0ebb6fca0fe480e77c6fa8482870ddb2c9,"createReactNativeComponentClass needs to be CommonJS

oops",Sebastian Markbåge,2018-04-10T03:41:49Z
725c054d4d5d07c5c553a1ca724b01f2e6a43c5d,"Refactor findHostInstance and findNodeHandle (#12575)

* Move findNodeHandle into the renderers and use instantiation

This is just like ReactDOM does it. This also lets us get rid of injection
for findNodeHandle. Instead I move NativeMethodsMixin and ReactNativeComponent
to use instantiation.

* Refactor findHostInstance

The reconciler shouldn't expose the Fiber data structure. We should pass
the component instance to the reconciler, since the reconciler is the
thing that is supposed to be instancemap aware.

* Fix devtools injection",Sebastian Markbåge,2018-04-10T03:15:10Z
b99d0b14160150c566e091bd10b634beec9a58c3,"[RN] Move view config registry to shims (#12569)

* Move view config registry to shims

This ensures that both Fabric and RN renderers share the same view config
registry since it is stateful.

I had to duplicate in the mocks for testing.

* Move createReactNativeComponentClass to shims and delete internal usage

Since createReactNativeComponentClass is just an alias for the register
there's no need to bundle it. This file should probably just move back
to RN too.",Sebastian Markbåge,2018-04-10T03:05:57Z
b6e0512a81524d397ff4fbfb892372ecc84c6b02,"Consolidate eventTypes registry with view configs (#12556)

We already have one stateful module that contains all the view config.
We might as well store the event types there too. That way the shared
state is compartmentalized (and I can move it out in a follow up PR).

The view config registry also already has an appropriate place to call
processEventTypes so now we no longer have to do it in RN.

Will follow up with a PR to RN to remove that call.",Sebastian Markbåge,2018-04-10T02:42:23Z
40d07724fcc801ad69e17b295b68ebea753d5977,"[RN] Remove unstable_batchedUpdates and unmountComponentAtNodeAndRemoveContainer from Fabric (#12571)

These don't make much sense in Fabric, since Fabric will be async by default only.

And unmount+remove container is a sketchy API we should remove so we might
as well make sure modern containers enforce that.",Sebastian Markbåge,2018-04-10T02:36:13Z
933f882a9df728662befe558005f2ea3fe827a1d,"Remove ReactNativePropRegistry (#12559)

This has always been an unnecessary indirection to protect opaqueness,
which hasn't really worked out.",Sebastian Markbåge,2018-04-10T02:02:46Z
2f7bca0eb2487955e71a45e288e5847b5af522a5,"Allocate unique reactTags for RN and Fabric (#12587)

Took this opportunity to remove some abstract overhead.

In Fabric it is extra simple since they no longer overlap with root tags.",Sebastian Markbåge,2018-04-10T01:41:13Z
f88deda83bab316385f39e8479850527cda90607,"Throw more specific error if passed undefined in React.cloneElement (#12534)

* throw error if passed undefined

* should be TypeError

* simplify

* use invariant

* editor messed up spacing

* better check

* Revert ""better check""

This reverts commit 273370758eafa54d329577b3dc942c70587eccd3.

* yarn prettier test was failing

* more explicit copy

* es6 import

* tests

* formatting

* Move import",Nicole Levy,2018-04-10T01:16:36Z
8dfb0578816435a1a72f04506ee20d3c55d0f9bc,Unfork invariant and instead use it from reactProdInvariant (#12585),Dan Abramov,2018-04-09T22:58:34Z
76b4ba01290f446f4313adf3846954412c6051b8,"Preserve error codes for invariants on www (#12539)

* Preserve error codes for invariants on www

* Remove unintentional change",Dan Abramov,2018-04-09T17:57:52Z
ea3754503742afc3d5c5de2140717817794870ec,Must be *a* before PlacementAndUpdate (#12580),Rafael Hovhannisyan,2018-04-08T17:29:37Z
20c5d97bb6c6a4af76d66a7e5134952989f9a9b2,Keep consistency in the comment (#12579),Heaven,2018-04-08T16:29:02Z
181747a6cc25f3020b8561f475eca4ad2824256b,"[RN] Move takeSnapshot to RN (#12574)

It only uses public APIs. I have a diff on the other side.",Sebastian Markbåge,2018-04-08T06:13:34Z
bc753a716e185c31d8eb7404ab5dd6ee7467b7cb,"Support findNodeHandle in Fabric (#12573)

This doesn't actually need to share any state because it goes through
the instance to the fiber structure. Since Fabric is on the same version
as RN, calling it on either renderer works.",Sebastian Markbåge,2018-04-08T05:33:49Z
6bf2797d6cf76676791424afc93b76dd60d7074c,"Remove flushSync from React Native (#12565)

There are no plans to enable async in the old renderer. In the new renderer
it only really makes sense to do from the main thread and probably from
native since it'll have to yield to native first.",Sebastian Markbåge,2018-04-07T00:10:16Z
5b16b39508ec33f2f374a5a12aa71647e1728d08,Bug fix,Sebastian Markbåge,2018-04-06T21:26:00Z
cf649b40a56dc5c0ffe2595b963847f0ff8de245,"Move TouchHistoryMath to React Native repo (#12557)

This isn't used by React core and is just a pure helper so it might as
well live where it's used. The React Native repo.",Sebastian Markbåge,2018-04-06T03:29:04Z
7a3416f27532ac25849dfbc505300d469b43bbcc,"Expose component stack from reactTag to React Native renderer (#12549)

This is not safe in general and therefore shouldn't be exposed to anything
other than React Native internals.

It will also need a different version in Fabric that will not have the
reactTag exposed.",Sebastian Markbåge,2018-04-05T00:18:44Z
27535e7bfcb63e8a4d65f273311e380b4ca12eff,"Clarify ReactDOM's case warning for html tags (#12533)

* update warning text

* update tests to match

* `yarn prettier`

* include note on HTML5 custom elements

* dan’s copy suggestion

* remove ‘letters’",Nicole Levy,2018-04-04T21:21:06Z
8ec0e4a99df76c0ff1779cac4f2eaaaf35a6b5bb,Removed Array.from() usage (#12546),Brian Vaughn,2018-04-04T20:54:27Z
d328e362e86a6af4a0664e004b8f97f18ce972c8,Removed duplicate typeof check (#12541),Brian Vaughn,2018-04-04T20:30:48Z
e932e321a88e07935224701bc4580e3dc9889afe,facebook.github.io/react -> reactjs.org (#12545),Dan Abramov,2018-04-04T20:20:41Z
5e3706cca0fe0da462c771d14a271cd2961e5718,"Don't render bitmask-bailing consumers even if there's a deeper matching child (#12543)

* Don't render consumers that bailed out with bitmask even if there's a deeper matching child

* Use a render prop in the test

Without it, <Indirection> doesn't do anything because we bail out on constant element anyway.
That's not what we're testing, and could be confusing.",Dan Abramov,2018-04-04T18:44:14Z
1c2876d5b558b8591feb335d8d7204bc46f7da8a,Add a build step to hoist warning conditions (#12537),Dan Abramov,2018-04-04T16:04:40Z
b15b165e0798dca03492e354ebd5bcf87b711184,Changelog for 16.3.1,Dan Abramov,2018-04-04T00:35:36Z
dc059579c3e56ca338a999b86d146d2341ee6f64,Update bundle sizes for 16.3.1 release,Dan Abramov,2018-04-04T00:33:06Z
787b343f674c72837209bdffd55c59682910d807,Updating package versions for release 16.3.1,Dan Abramov,2018-04-04T00:22:30Z
2279843ef966ea2e0460986efa1f91513cd50623,Updating yarn.lock file for 16.3.1 release,Dan Abramov,2018-04-04T00:20:48Z
a2cc3c38e214c16ff6805312d4353c1faab9ff95,Follow up: make new warning less wordy (#12532),Dan Abramov,2018-04-03T20:56:21Z
36c29393720157a3966ce1d50449a33a35bdf14c,"Improve not-yet-mounted setState warning (#12531)

* Tweak not-yet-mounted setState warning

* Add \n\n",Dan Abramov,2018-04-03T20:22:44Z
0f2f90bd9a9daf241d691bf4af3ea2e3a263c0e3,"getDerivedStateFrom{Props,Catch} should update updateQueue.baseState (#12528)

Based on a bug found in UFI2.

There have been several bugs related to the update queue (and
specifically baseState) recently, so I'm going to follow-up with some
refactoring to clean it up. This is a quick fix so we can ship a
patch release.",Andrew Clark,2018-04-03T20:02:46Z
da4e85567b411a180c2cfa1ef6573cf3cc9257f1,Remove @providesModule in www bundles (#12529),Dan Abramov,2018-04-03T19:12:29Z
eb6e752cabafed0b72e1d0a38819ff156557d537,Bumped create-subscription package version (#12526),Brian Vaughn,2018-04-03T18:06:52Z
ba245f6f9b0bf31c2ebff5c087c21bcae111e6c3,Prefix _context property on returned ReactContext from createContext - it's private (#12501),Mateusz Burzyński,2018-04-03T00:47:25Z
6f2ea73978168372f33a6dfad6c049afddc4aef3,"Extract throw to separate function so performUnitOfWork does not deopt (#12521)

Only affects DEV mode, but still important I think.",Andrew Clark,2018-04-03T00:45:52Z
4ccf58a94dce323718540b8185a32070ded6094b,"Fix context stack misalignment caused by error replay (#12508)

* Add regression tests for error boundary replay bugs

* Ensure the context stack is aligned if renderer throws

* Always throw when replaying a failed unit of work

Replaying a failed unit of work should always throw, because the render
phase is meant to be idempotent, If it doesn't throw, rethrow the
original error, so React's internal stack is not misaligned.

* Reset originalReplayError after replaying

* Typo fix",Dan Abramov,2018-04-02T23:08:30Z
7a27ebd52a3025a946c67eaf84d2646fd307cb44,"Update user timing to record when we are about to commit (#12384)

* Update user timing to record when we are about to commit

**what is the change?:**
After repeatedly logging '(React Tree Reconciliation)' we vary the
message slightly for the last reconciliation, which happens right before
we commit.

**why make this change?:**
When debugging performance in the devtools it will be helpful if we can
quickly see where the 'commit' happens in a potentially long list of
sliced '(React Tree Reconciliation)' logs.

**test plan:**
Built and ran one of the fixtures. Also ran the unit test.

(Flarnie will insert a screenshot)

* Ran prettier

* Fixes in response to code review

* Update snapshot tests

* Move isWorking assignment out of branches to top

* Stricter type for stopWorkLoopTimer args",Flarnie Marchan,2018-04-02T22:27:33Z
6b99c6f9d376bacbb769264d743c405b495b03ad,Add missing changelog item,Dan Abramov,2018-04-02T15:07:16Z
59dac9d7a6a2f0b66003cf717d71b5587265423f,"Fix DEV performance regression by avoiding Object.assign on Fibers (#12510)

* Fix DEV performance regression by avoiding Object.assign on Fibers

* Reduce allocations in hot path by reusing the stash

Since performUnitOfWork() is not reentrant, it should be safe to reuse the same stash every time instead of creating a new object.",Dan Abramov,2018-04-01T18:10:37Z
0c80977061ba576cee9ae0891245be233929d2ed,Validate React.Fragment props without Map. (#12504),heikkilamarko,2018-04-01T00:14:36Z
fa8e67893fca1b3902637129972032bca248a584,Change create-subscription's peerDep on react to ^16.3.0 (#12496),Minh Nguyen,2018-03-30T21:49:34Z
59b39056d91787f6a3e4e0dfc0825c8687bd0af9,Fix method name in changelog,Dan Abramov,2018-03-29T22:27:06Z
18ba36d89165ec15655f2606b0a6ba2e709ce641,"Move context API in Changelog to ""React"" section",Dan Abramov,2018-03-29T22:19:53Z
43044757e55eca13ae788056b59f94788fc15050,Fix links,Dan Abramov,2018-03-29T21:08:20Z
2c3f5fb97b6ea077f3e9aae6c6587bfe8328036d,Add React 16.3.0 changelog (#12488),Dan Abramov,2018-03-29T20:56:45Z
8e3d94ffa1d2e19a5bf4b9f8030973b65b0fc854,Update bundle sizes for 16.3.0 release,Brian Vaughn,2018-03-29T20:07:12Z
9778873143072635a795fec2ad0e1ac0bb7d8b91,Updating dependencies for react-noop-renderer,Brian Vaughn,2018-03-29T20:03:33Z
b2379d4cbe82653da931ccb128916707bc53d28a,Updating package versions for release 16.3.0,Brian Vaughn,2018-03-29T20:03:33Z
6294b67a406d21cc6b65162e47497c1e8afe398f,"unstable_createRoot (#12487)

* Removed enableCreateRoot flag. Renamed createRoot to unstable_createRoot

* ReactDOMRoot test is no longer internal",Brian Vaughn,2018-03-29T19:51:34Z
8650d2a1357985958c2738da55ea349406482721,Disable createRoot for open source builds (#12486),Dan Abramov,2018-03-29T19:25:20Z
53fdc19df092bbc4bd736aea4ef8e0f12d692ee6,Updated react-is README to show new isValidElementType(),Brian Vaughn,2018-03-29T18:46:18Z
96fe3b1be2fe74e83c9a25d7511f23dbef15ac99,"Add React.isValidElementType() (#12483)

* Add React.isValidElementType()

Per the conversation on #12453, there are a number of third-party
libraries (particularly those that generate higher-order components)
that are performing suboptimal validation of element types.

This commit exposes a function that can perform the desired check
without depending upon React internals.

* Move isValidElementType to shared/",James Reggio,2018-03-29T18:45:41Z
125dd16ba0b3fa74767b1cf417a3116a4a2b251a,"Update user timing to record the timeout deadline with 'waiting' events (#12479)

* Update user timing to record the timeout deadline with 'waiting' events

**what is the change?:**
When we are processing work during reconciliation, we have a ""timeout""
deadline to finish the work. It's a safety measure that forces things to
finish up synchronously if they are taking too long.

The ""timeout"" is different depending on the type of interaction which
triggered the reconciliation. We currently have a shorter ""timeout"" for
""interactive updates"", meaning we will try to finish work faster if the
reconciliation was triggered by a click or other user interaction.

For collecting more data in our logs we want to differentiate the
'waiting for async callback...' events based on the ""timeout"" so I'm
adding that to the logging.

One interesting note - in one of the snapshot tests the ""timeout"" was
super high. Going to look into that.

**why make this change?:**
Right now we are debugging cases where an interaction triggers a
reconciliation and the ""waiting for async callback...' events are too
long, getting blocked because the main thread is too busy. We are
keeping logs of these user timing events and want to filter to focus on
the reconciliation triggered by interaction.

**test plan:**
Manually tested and also updated snapshot tests.

(Flarnie will insert a screenshot)

* Improve wording of message

* ran prettier",Flarnie Marchan,2018-03-29T18:26:11Z
15e3dffb4c9ca9b9466f4ef1a6b8b2293d41e9d6,"Don't bail out on referential equality of Consumer's props.children function (#12470)

* Test case for React Context bailing out unexpectedly

* This is 💯% definitely not the correct fix at all

* Revert ""This is 💯% definitely not the correct fix at all""

This reverts commit 8686c0f6bdc1cba3056fb2212f3f7740c749d33a.

* Formatting + minor tweaks to the test

* Don't bail out on consumer child equality

* Tweak the comment

* Pretty lint

* Silly Dan",Dustan Kasten,2018-03-29T18:16:02Z
5855e9f2158b31d945f3fcc5bc582389dbecc88e,"Improve warning message for setState-on-unmounted (#12347)

This is one of the most common warnings people see, and I don't think the old text is especially clear. Improve it.",Sophie Alpert,2018-03-29T15:21:22Z
7a833dad95b3059ebfdfba44d3fa68e1301d8e6a,"setState() in componentDidMount() should flush synchronously even with createBatch() (#12466)

* Add a failing test for setState in cDM during batch.commit()

* Copy pasta

* Flush all follow-up Sync work on the committed batch

* Nit: Use performSyncWork

Call performSyncWork right after flushing the batch. Does effectively
the same thing by reusing the existing function.

Also added some comments.

* Delete accidentally duplicated test",Dan Abramov,2018-03-29T01:41:42Z
c44665e83278becfe7a3afdf788789536d63387b,"Fix bug when fatal error is thrown as a result of `batch.commit` (#12480)

Fixes #12474",Andrew Clark,2018-03-29T01:18:09Z
268a3f60dfe67c4f6439fc37b569a2d81c81a53a,"Add unstable APIs for async rendering to test renderer (#12478)

These are based on the ReactNoop renderer, which we use to test React
itself. This gives library authors (Relay, Apollo, Redux, et al.) a way
to test their components for async compatibility.

- Pass `unstable_isAsync` to `TestRenderer.create` to create an async
renderer instance. This causes updates to be lazily flushed.
- `renderer.unstable_yield` tells React to yield execution after the
currently rendering component.
- `renderer.unstable_flushAll` flushes all pending async work, and
returns an array of yielded values.
- `renderer.unstable_flushThrough` receives an array of expected values,
begins rendering, and stops once those values have been yielded. It
returns the array of values that are actually yielded. The user should
assert that they are equal.

Although we've used this pattern successfully in our own tests, I'm not
sure if these are the final APIs we'll make public.",Andrew Clark,2018-03-28T21:57:25Z
c1b21a746c7d08554eed8bf55030a4049380c32c,Added DEV warning if getSnapshotBeforeUpdate is defined as a static method (#12475),Brian Vaughn,2018-03-28T20:35:32Z
488ad5a6b94ac4b71ff587ecde05e48a218aba62,"Fix typo in create-subscription readme

PR: #12473",Nikolay,2018-03-28T12:51:16Z
c2c3c0cc36878cd6f020a480b83ff1c03b62fd28,Fix build script to handle react-is (no peer deps) (#12471),Brian Vaughn,2018-03-28T02:19:34Z
b3d883630cb6157cadf87495ebef4b6f322b4338,Update bundle sizes for 16.3.0-rc.0 release,Brian Vaughn,2018-03-28T02:11:20Z
80ddd15b720e0e9b617808436ddf7197a50a34db,Updating dependencies for react-noop-renderer,Brian Vaughn,2018-03-28T02:07:53Z
61444a415bd42f091267c905256340afcb07d9f9,Updating package versions for release 16.3.0-rc.0,Brian Vaughn,2018-03-28T02:07:53Z
ff32420e576bb01b702b68332848da100e68fad4,"Caveat about async in create-subscription README (#12469)

* Caveat about async in create-subscription README

* Address Sophie's comments

* Dan's nits",Andrew Clark,2018-03-27T23:50:12Z
ad5273d3488c39a2127d05925d99006b4b5641b2,"Call getSnapshotBeforeUpdate before mutation (#12468)

* Call getSnapshotBeforeUpdate in separate traversal, before mutation (aka revert db84b9a) and add unit test.

* Added a new timer to ReactDebugFiberPerf for Snapshot effects",Brian Vaughn,2018-03-27T22:37:13Z
90c41a2e56badab3e456be869095c24520096342,Rename react-is import alias in FB bundles (#12459),Brian Vaughn,2018-03-27T15:57:11Z
718d0d21f268b52900794de989b695df2ef9c99d,Include react-is in FB build targets (#12458),Brian Vaughn,2018-03-26T23:56:06Z
e1a106a071dff17737a7afb49a0b71899d60c248,"New commit phase lifecycle: getSnapshotBeforeUpdate (#12404)

* Implemented new getSnapshotBeforeUpdate lifecycle
* Store snapshot value from Fiber to instance (__reactInternalSnapshotBeforeUpdate)
* Use commitAllHostEffects() traversal for getSnapshotBeforeUpdate()
* Added DEV warnings and tests for new lifecycle
* Don't invoke legacy lifecycles if getSnapshotBeforeUpdate() is defined. DEV warn about this.
* Converted did-warn objects to Sets in ReactFiberClassComponent
* Replaced redundant new lifecycle checks in a few methods
* Check for polyfill suppress flag on cWU as well before warning
* Added Snapshot bit to HostEffectMask",Brian Vaughn,2018-03-26T20:28:10Z
e9ba8ec8663071ebe9467c13576b3c18ad4e1b58,Workaround jest-diff single line string limitation (#12456),Brian Vaughn,2018-03-26T17:48:36Z
dadafd6bd802082b990e447032cb82574bcdc118,"Remove dependency on React (#12448)

Is this necessary? I'd like to use the package in enzyme to avoid having to recopy/paste the symbols for better debugging names, but at hard dep in enzyme proper on a version of react isn't gonna work. This seems safe since nothing explicitly depends on React in here?",Jason Quense,2018-03-24T16:59:36Z
7d31311de3e1b3f698dd0fb7a28c40eafe8cca64,"Don't pass a Fiber to showErrorDialog() (#12445)

* Don't pass a Fiber to showErrorDialog()

* Only fill in the fields for classes

* Reorder for clarity",Dan Abramov,2018-03-23T21:52:53Z
1bab82a9de2b6f633656f791d85143fae9f3b3c9,"Tweaks the build script (#12444)

Branch: build-tweaks",Maël Nison,2018-03-23T19:51:04Z
cc616b01fc56187a44cf67fddb998871a95b3134,"Adds semver to the package dev dependencies (#12442)

Branch: semver",Maël Nison,2018-03-23T19:31:16Z
1a71c4de13dd268273bc4570b7b359ff2e415dbd,Rename bits to unstable_observedBits (#12440),Rene Hangstrup Møller,2018-03-23T15:58:49Z
cafee5cb2f28431f130ab1a755f47c1ec9c9cc9c,Update bundle sizes for 16.3.0-alpha.3 release,Brian Vaughn,2018-03-22T19:45:10Z
3cdb5780d466cb0aa54e81bda5177a322a7217b7,Updating dependencies for react-noop-renderer,Brian Vaughn,2018-03-22T19:41:43Z
02d4e5dd39790492bf4e9731eea82d140c19e123,Updating package versions for release 16.3.0-alpha.3,Brian Vaughn,2018-03-22T19:41:43Z
8c20615b06d22e023ff54a30e2602f0409876441,Removed dev warnings from shallow renderer. (#12433),Brian Vaughn,2018-03-22T18:32:37Z
c1308adb4bbe9e5513bbc4499e0696d97e9c897f,Expanded DEV-only warnings for gDSFP and legacy lifecycles (#12419),Brian Vaughn,2018-03-22T18:16:54Z
0af384b4c33bf7d039f513e0869665824e08bb6b,Warn about non-static getDerivedStateFromProps/Catch (#12431),Dan Abramov,2018-03-22T17:54:51Z
12687ff331e890391e936ad94873e6212d657b6a,"Use ""Component"" as fallback name in more places (#12430)",Dan Abramov,2018-03-22T17:26:46Z
dcbb4301f0a505c8bac72f7beac1604869a3846a,Add a fallback component name for warnings (#12429),Dan Abramov,2018-03-22T17:22:13Z
40fa6160534e2bc67b0c43f0b32dcdd1d214068b,Subscriptions shouldn't call setState after unmount even for Promises (#12425),Brian Vaughn,2018-03-22T15:54:57Z
f94a6b4fed7990ba229dd7b0cb1e8f11d6ff6712,"Removed documentation badge from readme.md (#12424)

* Added badge for react documentation

* Updated reference documentation link for badge

* Update README.md

* Update README.md

* Update README.md

* Removed reference badge from Readme.md",Rajendra arora,2018-03-22T15:48:52Z
dc48326cd5fd85fdc344c62b5e0ada479d749b4b,Fixed a batched-state update bug with getDerivedStateFromProps (#12408),Brian Vaughn,2018-03-21T18:42:52Z
c6b7cea3433b968077ce19f277c761a5aab076d1,"Added badge for react documentation (#12191)

* Added badge for react documentation

* Updated reference documentation link for badge",Rajendra arora,2018-03-21T17:05:02Z
3553489f7b26fc3cb952321dd21c0b828a375f55,"Fix now-missing errorInfo argument to componentDidCatch() (#12416)

* Add a failing test verifying componentInfo is missing

* Pass componentInfo to componentDidCatch and getDerivedStateFromCatch

* Only expect stack in DEV

* Don't pass the stack to getDerivedStateFromCatch()",Dan Abramov,2018-03-21T16:38:24Z
3ed6483e1413325d01dc4e66fe904922def1658d,Clean shell scripts (#12365),Léo Andrès,2018-03-21T16:03:09Z
f9377c1762a0bf680cde73e9433350279bbd353c,Replaced object building loop with Object.assign function (#12414),Barry Michael Doyle,2018-03-21T13:45:45Z
33eddbc0c80652f5a2e7307345f998828ed5a267,"Fix falling in dev mode (#12407)

FiberNode stateNode could be null

So I get TypeError:

```
  at performWorkOnRoot (/tmp/my-project/node_modules/react-dom/cjs/react-dom.development.js:11014:24) TypeError: Cannot read property '_warnedAboutRefsInRender' of null
          at findDOMNode (/tmp/my-project/node_modules/react-dom/cjs/react-dom.development.js:15264:55)
```",Vasiliy,2018-03-21T09:41:50Z
ab4dc5014601764d52ee6adba3c51ce3a646bab8,Fix Prettier,Dan Abramov,2018-03-21T09:41:23Z
9d484edc4b64160cb335a23a2cb21667fb2cdf4c,[fabric] register ReactFabric to be callable module (#12405),Kevin Gozali,2018-03-20T14:56:18Z
8d0942242476024ac74d4ca2fcac9824b3124dc8,"Fix an infinite loop in new context (#12402)

* Add a regression test for the context infinite loop

* Fix the bug

We set .return pointer inside the loop, but the top-level parent-child relationship happens outside.

This ensures the top-level parent's child points to the right copy of the parent.

Otherwise we may end up in a situation where (workInProgress === nextFiber) is never true and we loop forever.",Dan Abramov,2018-03-20T13:06:59Z
e1ff342bf7f451fb995e0ea2bfb10889deef022f,"Support ForwardRef type of work in TestRenderer (#12392)

* Support ForwardRef type of work in TestRenderer and ShallowRenderer.
* Release script now updates inter-package dependencies too (e.g. react-test-renderer depends on react-is).",Jason Quense,2018-03-16T18:18:50Z
7e87df809052bf4f861e61cf8c6ee58cbdcf9743,"Feature flag: Use custom requestIdleCallback even when native one exists (#12385)

We'll use this in www to test whether the polyfill is better at
scheduling high-pri async work than the native one. My preliminary tests
suggest ""yes"" but it's hard to say for certain, given how difficult it
is to consistently reproduce the starvation issues we've been seeing.",Andrew Clark,2018-03-16T02:28:21Z
208b490ed907346ae3e37159535299899f74312d,"Unify context stack implementations (#12359)

* Use module pattern so context stack is isolated per renderer

* Unify context implementations

Implements the new context API on top of the existing ReactStack that we
already use for host context and legacy context. Now there is a single
array that we push and pop from.

This makes the interrupt path slightly slower, since when we reset the
unit of work pointer, we have to iterate over the stack (like before)
*and* switch on the type of work (not like before). On the other hand,
this unifies all of the unwinding behavior in the UnwindWork module.

* Add DEV only warning if stack is not reset properly",Andrew Clark,2018-03-16T02:27:44Z
2738e84805820fbf4f7db1a521e22d44272455ab,"Removed an unnecessary wrapper object from state (#12383)

* Removed an unnecessary wrapper object from state
* Moved unsubscribe from state to class field and tweaked comments",Brian Vaughn,2018-03-15T18:43:01Z
d38616d6936542cbf8ca34d3c75cd3b9e44945c9,Fix typo in unexpected ref object warning (#12377),Roman Hotsiy,2018-03-15T12:30:50Z
ced176edb7605a25e916895fd060f3943c647fee,Updated create-subscription description,Brian Vaughn,2018-03-14T22:39:38Z
ccec542ad348820e9a3c16d06f13586ab7c0fd59,Update bundle sizes for 16.3.0-alpha.2 release,Brian Vaughn,2018-03-14T20:26:40Z
45300e8e5b3cb3db613a164ee40893abfc725e33,Update error codes for 16.3.0-alpha.2 release,Brian Vaughn,2018-03-14T20:26:40Z
da0fbe78b607f85a5b7e3a933543ae1be5378348,Updating dependencies for react-noop-renderer,Brian Vaughn,2018-03-14T20:23:21Z
3961b8c7e7139e5aebe9c91f1d06e5b110db2cb8,Updating package versions for release 16.3.0-alpha.2,Brian Vaughn,2018-03-14T20:23:21Z
64136f300db2f258d07d9cf85eea6390499bab4b,Updating yarn.lock file for 16.3.0-alpha.2 release,Brian Vaughn,2018-03-14T20:21:11Z
bc70441c8b3fa85338283af3eeb47b5d15e9dbfe,"RFC #30: React.forwardRef implementation (#12346)

Added React.forwardRef support to react-reconciler based renders and the SSR partial renderer.",Brian Vaughn,2018-03-14T20:07:58Z
77196100b833cca83a928caa2bd02482665546c2,"Renamed createRef .value attribute to .current (#12375)

* Renamed createRef .value attribute to .current

* Warn if invalid ref object is passed",Brian Vaughn,2018-03-14T16:43:20Z
9d24a81054aae6686e5ea341d493c0b705687019,"resumeMountClassComponent should check for mount lifecycles, not update (#12371)

We have other tests that would have caught this if resuming were enabled
in all cases, but since it's currently only enabled for error
boundaries, the test I've added to prevent a regression is a
bit contrived.",Andrew Clark,2018-03-13T23:36:31Z
00a0e3c14fd76557112316bbe4a72e6bde2d2f63,"create-subscription (#12325)

create-subscription provides an simple, async-safe interface to manage a subscription.",Brian Vaughn,2018-03-13T20:59:09Z
ad9544f48e58f2599a8ea0de1e9f4dd104db30bb,"Prefix internal context properties with underscore (#12358)

So these aren't mistaken for public properties. Ideally, we'd use
symbols or private fields.",Andrew Clark,2018-03-12T21:30:47Z
551a0765de911f2b266f3f4e9f55d3bf99d635ea,Add unstable prefix to `observedBits` prop until its proven to work in practice (#12357),Andrew Clark,2018-03-12T20:57:33Z
c7f364d95ba920657a10a71f23c0d43d71fa4845,"Context providers and consumers should bailout on already finished work (#12254)

* Context providers and consumers should bail-out on already finished work

Fixes bug where a consumer would re-render even if its props and context
had not changed.

* Encode output as JSON string

* Add weights to random action generator

* Add context to triangle fuzz tester

* Move bailouts to as early as possible

* Bailout if neither context value nor children haven't changed (sCU)

* Change prop type invariant to a DEV-only warning",Andrew Clark,2018-03-12T20:39:18Z
280acbcb713fe0751c6230b94efb45376eb4af67,"Initialize React prop name/attribute name mapping without Map (#12353)

Using `new Map(iterable)` isn't supported in IE11, so it ends up trying to iterate through an empty map and these attributes don't get defined in properties. Since this is only run once on startup inlining the attributeName array is probably fine.",Brandon Dail,2018-03-12T17:42:17Z
fcc4f52cdded62e3b8e95d18e3e6adf17b981eed,Remove DefaultProps type parameter from ReactNativeComponent (#12332),Timothy Yung,2018-03-07T01:45:45Z
399b14d1907508c9a1a26ef4b24afc381bb76783,"added link to reactjs docs for test renderer (#12293)

* add link to reactjs doc for test renderer

* add documentation clarification",Brian Emil Hartz,2018-03-04T03:25:29Z
049fe7d6fd7984c4a7205103d3aafc46bceca1f6,"annotation typo (#12272)

* comment typo

* change after then to after that",Kiho · Cham,2018-03-04T03:24:33Z
1d220ce0b7bc7f4843cf90f1fe8933b9fcba9deb,"Bug fix: SSR setState in diff components don't mix (#12323)

Previously, the `queue` and `replace` arguments were leaking across loops even though they should be captured.",Sophie Alpert,2018-03-03T18:27:57Z
373a33f9d30d02cfea814a7803209da6f860a252,Fix comment type in ReactElement (#12314),Gustavo Saiani,2018-03-03T18:13:16Z
2cf9063318014dcc9a4839bb15ebb89a55198fce,"createResource returns an object with methods instead of a read function (#12304)

Changes `createResource` to return an object with `read` and `preload`
methods. Future methods may include `set`, `subscribe`, `invalidate`,
and so on.",Andrew Clark,2018-02-28T18:17:03Z
86d04f6ea2896eca7a18792b8acc87322ae52711,"Do not clear errors after they are thrown (#12303)

Instead, to trigger a retry, the consumer should invalidate the cache.

In the future, we will likely add a way to invalidate only the failed
records.",Andrew Clark,2018-02-28T04:02:43Z
ab4280b3e98dbb97d3e753083dab19879167c3f5,"Don't expose ReactGlobalSharedState on React Native renderer (#12298)

* Don't expose ReactGlobalSharedState on React Native renderer

We should just go through the ""react"" package if need access to this one.

Removed the dependencies in React Native.

* No longer used by InspectorUtils",Sebastian Markbåge,2018-02-27T15:57:50Z
db47031e635faf17d4ed44dfc72779154d2c86ff,"[Persistent] Finalize children after we've actually inserted them (#12300)

The order of this was wrong. We also unconditionally mark for updates so
killed that unused branch.",Sebastian Markbåge,2018-02-27T07:34:53Z
8e5f12ca6c18fb48ea71cba6bfa9bd7cf499ccb6,"Fixes bug when initial mount of a host component is `hidden` (#12294)

`oldProps` was null. This went uncaught by the unit tests because
ReactNoop did not use `oldProps` in either `prepareUpdate` or
`completeUpdate`. I added some invariants so we don't regress in
the future.",Andrew Clark,2018-02-27T01:50:07Z
2f5eaccb4c8d92811e3ee8c3a8b061a5135e3254,"Revert ""Temporarily disable Danger in CI"" (#12296)

* Revert ""Replace danger token with a refreshed facebook-open-source-bot token (#12295)""

This reverts commit 2d511479c4fc8246840b8ad00d6b528eadbe1ca6.

* Revert ""Temporarily disable Danger in CI (#12291)""

This reverts commit 925fc93389a9d836a037c1948da7dd6cbb860b84.",Brandon Dail,2018-02-27T00:33:50Z
2d511479c4fc8246840b8ad00d6b528eadbe1ca6,Replace danger token with a refreshed facebook-open-source-bot token (#12295),Héctor Ramos,2018-02-27T00:20:54Z
925fc93389a9d836a037c1948da7dd6cbb860b84,Temporarily disable Danger in CI (#12291),Brandon Dail,2018-02-26T19:40:23Z
94518b068bf52196abea0c83f4c9926bfe2065c6,"Add stack unwinding phase for handling errors (#12201)

* Add stack unwinding phase for handling errors

A rewrite of error handling, with semantics that more closely match
stack unwinding.

Errors that are thrown during the render phase unwind to the nearest
error boundary, like before. But rather than synchronously unmount the
children before retrying, we restart the failed subtree within the same
render phase. The failed children are still unmounted (as if all their
keys changed) but without an extra commit.

Commit phase errors are different. They work by scheduling an error on
the update queue of the error boundary. When we enter the render phase,
the error is popped off the queue. The rest of the algorithm is
the same.

This approach is designed to work for throwing non-errors, too, though
that feature is not implemented yet.

* Add experimental getDerivedStateFromCatch lifecycle

Fires during the render phase, so you can recover from an error within the same
pass. This aligns error boundaries more closely with try-catch semantics.

Let's keep this behind a feature flag until a future release. For now, the
recommendation is to keep using componentDidCatch. Eventually, the advice will
be to use getDerivedStateFromCatch for handling errors and componentDidCatch
only for logging.

* Reconcile twice to remount failed children, instead of using a boolean

* Handle effect immediately after its thrown

This way we don't have to store the thrown values on the effect list.

* ReactFiberIncompleteWork -> ReactFiberUnwindWork

* Remove startTime

* Remove TypeOfException

We don't need it yet. We'll reconsider once we add another exception type.

* Move replay to outer catch block

This moves it out of the hot path.",Andrew Clark,2018-02-24T01:38:42Z
6d7c847f30bcf60fa64daca68edceac56dd25da7,Add a clearer error message for the Consumer render (#12241) (#12267),Rauno Freiberg,2018-02-22T20:06:17Z
cf58f296e9024fa76a32a53d7b3572c74b608ed3,"Add test exercising public API to test BeforeInputEventPlugin + FallbackCompositionState (#11849)

* Add test exercising public API to test BeforeInputEventPlugin + FallbackCompositionState

 - I've adopted a similar approach to the existing test for BeforeInputEventPlugin
 - I've simulated events and then assert the event handler for onBeforeInput is fired or not fired based on the test conditions
 - The scenarios are tested against IE11, Webkite and Presto environment simulations
 - I've encorporated what I understand to be the functionality in the FallbackCompositionState test

* Prettier

* Linting fixes

* Remove test for contenteditable in Presto - the contenteditable type is not supported in Presto powered browsers (Opera).

* Remove mention of Presto as this explicit condition is no longer handled in BeforeInputEventPlugin.

We still need to exercise usage of FallbackCompositionState though so let's keep a test where the env does not support Composition and Text events.

* Add tests for envs with only CompositionEvent support

* Remove internal tests no longer needed

* Shorten test case names to satisfy lint rules

* Add tests for onCompositionStart and onCompositionUpdte events

The BeforeInputEventPlugin is responsible for emitting these events so we need to add tests for this. This also ensure we exercise the code path that, L207, that was not previously exercised with the public tests.",Gordon Dent,2018-02-22T18:27:36Z
2bd1222a8216f578332fcbbbe31a4ab313c204a3,"Format danger percents better (#12256)

Test Plan: yolo? yarn danger pr didn't give me any useful output. :\",Sophie Alpert,2018-02-21T23:48:37Z
02f4e7a80b047862b7b321c6d93bdda4f5417264,[fabric] Forked ReactNativeInjection for Fabric and avoid RCTEventEmitter setup in Fabric (#12265),Kevin Gozali,2018-02-21T23:40:47Z
b17e4c204e05de5ee360910626b0ccc938f37c06,"Ignore RN events on unknown nodes (#12264)

If we have multiple RN renderers running simultaneously, we should be able to send a single event to all of them and only if it recognizes the event will it do anything with it. Crucially, this avoids the 'Unsupported top level event type ""%s"" dispatched' invariant in those cases.",Sophie Alpert,2018-02-21T21:47:17Z
48ffbf06beb272d2ab9484b1084063757b6a64f1,Ignored fiber tags which shows unknow in performance tabs (#12250),Abhay Nikam,2018-02-19T21:58:41Z
e68c0164aa92ed383a0060639d9c449e2f740fb5,"Update test renderer to support new types of work (#12237)

Adds support for ContextProvider, ContextConsumer, and Mode.",Andrew Clark,2018-02-16T19:27:20Z
93ce76b7eafa7aaa9ebeb60efcc94c1f3954607c,Update bundle sizes for simple-cache-provider,Andrew Clark,2018-02-16T03:19:40Z
0859e3a0d96d51c582d253dc9a99fc1de449f279,Bump simple-cache-provider version,Andrew Clark,2018-02-16T03:19:27Z
4312b8293244e1fd1d7031fb474b156b0e43001c,"[experimental] simple-cache-provider (#12224)

* [experimental] simple-cache-provider

Pushing an early version of this for testing and demonstration purposes.

* Change invariant to DEV-only warning

* Use function overloading for createResource type

Expresses that primitive keys do not require a hash function, but
non-primitive keys do.

* More tests

* Use export *

* Make Record type a disjoint union

* Pass miss argument separate from key to avoid a closure",Andrew Clark,2018-02-16T00:38:15Z
5cd5f63a77ac01e5418bc51ed81847ca3dcdb658,Add an unit test for React.Fragment with ShallowRenderer (#12220),Toru Kobayashi,2018-02-15T14:19:08Z
e8ee1b92dc2b826f7ba9631a051e56f261b12419,"[Danger] Add a remote for the upstream repo, and try use that for the merge base for danger (#12229)",Orta,2018-02-15T12:19:31Z
1fd205ad2d101f441622c9bb7e2ccb480281e0a0,"Additional release script options for publishing canary versions (#12219)

* Additional release script options for publishing canary versions

- `branch` specifies a branch other than master
- `local` skips pulling from the remote branch and checking CircleCI
- `tag` specifies an npm dist tag other than `latest` or `next`

We may add a higher-level `canary` option in the future.

* Address Brian's feedback:

- Updated description of `local` option
- Throws if the `latest` tag is specified for a prerelease version",Andrew Clark,2018-02-13T19:44:27Z
e2563a3c524fca42828a083872ef756e38fff118,Handle packages without dependencies (#12217),Brian Vaughn,2018-02-12T23:46:43Z
fb85cf2e9c52a4b2999144a89a6ee8256aec55c7,Update bundle sizes for 16.3.0-alpha.1 release,Brian Vaughn,2018-02-12T18:41:41Z
e588a371e23fc189ceb2b60ed893627e8425a6c4,Updating dependencies for react-noop-renderer,Brian Vaughn,2018-02-12T18:38:24Z
e00f8429bc9e1559530c1897fb00a689710df3db,Updating package versions for release 16.3.0-alpha.1,Brian Vaughn,2018-02-12T18:38:24Z
d4afeb5aff445ea2a8bbd92efa6c532a37aab4e6,Added ReactFabric shim (#12216),Brian Vaughn,2018-02-12T18:12:46Z
a634e53d2ff376366aa87815ad4de064494cd05e,"[Danger] Include 1% changes in a build, not just greater than (#12213)",Orta,2018-02-12T12:44:18Z
86ee9e84880cab9f3804e7e59ec75bb75a4cf455,"NativeMethodsMixin DEV-only methods should not warn (#12212)

* Disable DEV-only warnings for RN NativeMethodsMixin/create-react-class

* Tiny bit of cleanup

* Make strict-mode suppression check a little more robust",Brian Vaughn,2018-02-12T00:29:02Z
41b8c65f1e81ba48192fbb65fd5c742638ef4f82,"Add react-is package (#12199)

Authoritative brand checking library.

Can be used without any dependency on React. Plausible replacement for `React.isValidElement.`",Brian Vaughn,2018-02-11T22:08:40Z
c7ce0091dcb2036e19df980247c9a4388ad75741,"[Danger] Use the PR's mergebase for a branch in the dangerfile (#12049)

* [Danger] Use the PR's mergebase for a branch in the dangerfile instead of
the root commit's parent.

* [Danger] Get the full history to find the merge base",Orta,2018-02-11T19:43:29Z
29e8924c70856bef9b11e0c74a450140bfcce773,Move ReactContext source to React package (#12205),Dan Abramov,2018-02-10T16:41:33Z
78a595aeb710e53f2a78df52a090b20caf54c81b,Update sizes,Dan Abramov,2018-02-10T13:48:07Z
f07dd45b75caa7338a48e6174bb22972890dac60,Fix build stats display,Dan Abramov,2018-02-10T13:36:50Z
467b1034ce8af6807e11deb9dfeca4d4e922ed82,"Disable for...of by default, rewrite cases where it matters (#12198)

* Add no-for-of lint rule

* Ignore legit use cases of for..of

* Rewrite for..of in source code",Dan Abramov,2018-02-09T16:11:22Z
b5e961508709ac61f7e2de60a047238216f09a04,"Interleaved Context.Provider bugfix (#12187)

* Added failing unit test

* Maybe fixed interleaved context provider bug?",Brian Vaughn,2018-02-08T22:23:41Z
49b0ca1b836751ae78fd191286b9eb3bf2be385b,"Fix finding Fabric feature flags (#12189)

Test Plan: yarn build fabric, inspect build/react-native/ReactFabric-dev.js to see enablePersistentReconciler = true.",Sophie Alpert,2018-02-08T21:28:17Z
cbf729659e784792c7b57e8e8a0e88ed6359c604,Enable warnAboutDeprecatedLifecycles for ReactNative (#12186),Brian Vaughn,2018-02-08T18:48:18Z
d529d2035e3fe741acdf1f01619326588fcca697,"Fixed descrepancy between host and class component refs (#12178)

When a ref is removed from a class component, React now calls the previous ref-setter (if there was one) with null. Previously this was the case only for host component refs.

A new test has been added.",Brian Vaughn,2018-02-07T20:13:42Z
4a20ff26ecfe9bc66941d79f7fce2c67be8ee236,"Fix server render async mode (#12173)

* add failed tests for <unstable_AsyncMode> with server rendering

* Fix server render with <unstable_AsyncMode> component

* Merge StrictMode and AsyncMode tests into Modes file",C. T. Lin,2018-02-07T11:51:53Z
18a81a4445f3a7e0a38f9840b472f1ed63a99e9c,"Fix server render strict mode (#12170)

* Fix server render with <StrictMode> component

* add failed tests for <StrictMode> with server rendering",C. T. Lin,2018-02-07T07:51:13Z
8dc8f88d5ae9fb96934ba43e3842b5dcf4074afd,"Adds createRef() as per RFC (#12162)

* Adds createRef() as per RFC",Dominic Gannaway,2018-02-06T20:19:49Z
3d8f465d99ece19238ccb561cdb157d2d676dda4,Revert deprecation warnings for custom event plugin injection (#12167),Nicolas Gallagher,2018-02-06T18:39:03Z
578c82d6a04134fbe8499b877b030ba185a4430f,String ref warning shows name of ref (#12164),Brian Vaughn,2018-02-06T17:00:44Z
6f2f55ed568063a4efbe4b2f1e11297da877fe73,"Warn about string refs within strict mode trees (#12161)

* Warn about string refs within strict mode trees

* Improved string ref warning message",Brian Vaughn,2018-02-06T15:43:31Z
f05296baf586dc8e6d6e6a3e6d666c8dd8e4ccd5,Changed cWM/cWRP/cWU deprecations to low-pri warnings (#12159),Brian Vaughn,2018-02-05T21:39:07Z
86914cb30a7654d13a17d34a3b3a5af97c2d2855,"Clearer ssr error message 11902 (#11966)

* Match error message to one in `ReactFiber.js`

* Add undefined/null guard and tests

* Update tests and element check

* Remove beforeEach block",Jordan Tepper,2018-02-05T17:09:09Z
f828ca407febc6287011f8ae89aa469c4d522fcc,Expose persistent reconciler to custom renderers (#12156),Dan Abramov,2018-02-05T16:56:21Z
8b83ea02f5abc7bf526b7e104a2cb73b034df5c2,Fix fragment handling in toTree() (#12154),Dan Abramov,2018-02-05T16:55:48Z
ad07be755d924191905b4995d1183492fb5e0401,"Release script does a fresh Yarn install of deps (#12149)

This would have caught the recent Yarn workspaces / semver issue sooner.",Brian Vaughn,2018-02-05T01:06:14Z
dc271876a225d6efc7f13c07f82aba6cba2f39c7,"Pre-release version fix (#12148)

* Ran updated release script to fix deps
* Release script handles prerelease deps correctly
* Update noop-renderer dependencies on reconciler package",Brian Vaughn,2018-02-04T16:54:42Z
be85544b89cd88add5e1158812c16f4ca6c39b3a,Fix process.CI typo (#12146),Ivan Starkov,2018-02-04T01:56:06Z
885a291141330eb74e8a98316e286a9ad093f22c,Update bundle sizes for 16.3.0-alpha.0 release,Brian Vaughn,2018-02-02T21:01:34Z
4da13ec5e1bd75ed0696966d6774c0f30e89667c,Update error codes for 16.3.0-alpha.0 release,Brian Vaughn,2018-02-02T21:01:33Z
8a995f7d56dabff0f07c9a011bd32e954a515cd7,Updating package versions for release 16.3.0-alpha.0,Brian Vaughn,2018-02-02T20:58:26Z
4eed18dd72cb811de11bd34b8ff86e4d193c7d4e,"Invoke both legacy and UNSAFE_ lifecycles when both are present (#12134)

* Invoke both legacy and UNSAFE_ lifecycles when both are present

This is to support edge cases with eg create-react-class where a mixin defines a legacy lifecycle but the component being created defines an UNSAFE one (or vice versa).

I did not warn about this case because the warning would be a bit redundant with the deprecation warning which we will soon be enabling. I could be convinced to change my stance here though.

* Added explicit function-type check to SS ReactPartialRenderer",Brian Vaughn,2018-02-01T19:15:57Z
aeba3c42aa45ecff3278b3596678108f9238ed16,"Exposes the host container to prepareForCommit and resetAfterCommit (#12098)

* Exposes the host container to prepareForCommit and resetAfterCommit

* Uses better typing

* Adds tests

* Removes commit data",Maël Nison,2018-02-01T18:38:19Z
e202f984ea0ead55c40a8864492a0646ada8e189,"Add react-lifecycles-compat and update tests (#12127)

* Installed react-lifecycles-compat module

* Updated react-lifecycles-compat integration tests to use real polyfill",Brian Vaughn,2018-01-31T18:33:59Z
5f95fdee638dc4e5614c3c09d2070f8281c1fe91,Updated create-react-class to 15.6.3 (and updated tests) (#12126),Brian Vaughn,2018-01-31T17:41:09Z
27fe752eea6f3c358ab696d5725dee7de719c94b,"Interactive updates shouldn't flush until the end of the outermost batch

Accounts for the case where an event is dispatched synchronously from
inside another event, like `el.focus`. I've added a test, but in general
we need more coverage around this area.",Andrew Clark,2018-01-31T07:13:19Z
28aa084ad84a681be1c45def2f4b4c0dd8a43871,"Switch to JSX API for context (#12123)

* Switch to JSX API for context

80% sure this will be the final API. Merging this now so we can get this
into the next www sync in preparation for 16.3.

* Promote context to a stable API",Andrew Clark,2018-01-30T21:06:12Z
8a09a2fc538e98523f67022095de9120e5dc2c32,"Interactive updates (#12100)

* Updates inside controlled events (onChange) are sync even in async mode

This guarantees the DOM is in a consistent state before we yield back
to the browser.

We'll need to figure out a separate strategy for other
interactive events.

* Don't rely on flushing behavior of public batchedUpdates implementation

Flush work as an explicit step at the end of the event, right before
restoring controlled state.

* Interactive updates

At the beginning of an interactive browser event (events that fire as
the result of a user interaction, like a click), check for pending
updates that were scheduled in a previous interactive event. Flush the
pending updates synchronously so that the event handlers are up-to-date
before responding to the current event.

We now have three classes of events:

- Controlled events. Updates are always flushed synchronously.
- Interactive events. Updates are async, unless another a subsequent
event is fired before it can complete, as described above. They are
also slightly higher priority than a normal async update.
- Non-interactive events. These are treated as normal, low-priority
async updates.

* Flush lowest pending interactive update time

Accounts for case when multiple interactive updates are scheduled at
different priorities. This can happen when an interactive event is
dispatched inside an async subtree, and there's an event handler on
an ancestor that is outside the subtree.

* Update comment about restoring controlled components",Andrew Clark,2018-01-30T07:49:10Z
3e08e60a3454395a2510d718c0b7d796548b3bd9,"ReactDOM.flushControlled (#12118)

* ReactDOM.flushControlled

New API for wrapping event handlers that need to fire before React
yields to the browser. Previously we thought that flushSync was
sufficient for this use case, but it turns out that flushSync is only
safe if you're guaranteed to be at the top of the stack; that is, if
you know for sure that your event handler is not nested inside another
React event handler or lifecycle. This isn't true for cases like
el.focus, el.click, or dispatchEvent, where an event handler can be
invoked synchronously from inside an existing stack.

flushControlled has similar semantics to batchedUpdates, where if you
nest multiple batches, the work is not flushed until the end of the
outermost batch. The work is not guaranteed to synchronously flush, as
with flushSync, but it is guaranteed to flush before React yields to
the browser.

flushSync is still the preferred API in most cases, such as inside
a requestAnimationFrame callback.

* Test that flushControlled does not flush inside batchedUpdates

* Make flushControlled a void function

In the future, we may want to return a thenable work object. For now,
we'll return nothing.

* flushControlled -> unstable_flushControlled",Andrew Clark,2018-01-30T06:36:35Z
9ea55516e674c2de63b9f7829e3c459f3cb3cf78,"Replace unstable_AsyncComponent with unstable_AsyncMode (#12117)

* Replace unstable_AsyncComponent with Unstable_AsyncMode

Mirrors the StrictMode API and uses the new Mode type of work.

* internalContextTag -> mode

Change this now that we have a better name

* Unstable_ -> unstable_",Andrew Clark,2018-01-30T03:11:59Z
d27b45131dc3952feeba8549dc747b8dc77a0280,updated ReactFeatureFlags shim (#12116),Brian Vaughn,2018-01-30T00:11:18Z
a7b9f98e7abab7305978b4b36881c8267a450097,"React lifecycles compat (#12105)

* Suppress unsafe/deprecation warnings for polyfilled components.
* Don't invoke deprecated lifecycles if static gDSFP exists.
* Applied recent changes to server rendering also",Brian Vaughn,2018-01-29T16:06:50Z
ef8d6d92a28835a8ab89a876f877306a5c3feffe,Handle nested Fragments in toTree (#12106) (#12107),Maciej Kasprzyk,2018-01-27T23:03:27Z
40a9e64e1f23e478036c5f302a60e5503ccf3a30,"Move a comment to its original location (#12103)

`type` was added in #11818 below the comment that belongs to `domNamespace`",Hendrik Liebau,2018-01-26T13:34:05Z
d3b183c32326cacc29efea43ca9300a17ed4aca0,"Debug render-phase side effects in ""strict"" mode (#12094)

A new feature flag has been added, debugRenderPhaseSideEffectsForStrictMode. When enabled, StrictMode subtrees will also double-invoke lifecycles in the same way as debugRenderPhaseSideEffects.

By default, this flag is enabled for __DEV__ only. Internally we can toggle it with a GK.

This breaks several of our incremental tests which make use of the noop-renderer. Updating the tests to account for the double-rendering in development mode makes them significantly more complicated. The most straight forward fix for this will be to convert them to be run as internal tests only. I believe this is reasonable since we are the only people making use of the noop renderer.",Brian Vaughn,2018-01-25T22:30:53Z
6dabfca5774b9b2ceaa1faf8ad225e6dac016c31,"Coalesce lifecycle deprecation warnings until the commit phase (#12084)

Builds on top of PR #12083 and resolves issue #12044.

Coalesces deprecation warnings until the commit phase. This proposal extends the  utility introduced in #12060 to also coalesce deprecation warnings.

New warning format will look like this:
> componentWillMount is deprecated and will be removed in the next major version. Use componentDidMount instead. As a temporary workaround, you can rename to UNSAFE_componentWillMount.
>
> Please update the following components: Foo, Bar
>
> Learn more about this warning here:
> https://fb.me/react-async-component-lifecycle-hooks",Brian Vaughn,2018-01-25T05:41:40Z
87ae211ccd8d61796cfdef138d1e12fb7a74f85d,"New context API (#11818)

* New context API

Introduces a declarative context API that propagates updates even when
shouldComponentUpdate returns false.

* Fuzz tester for context

* Use ReactElement for provider and consumer children

* Unify more branches in createFiberFromElement

* Compare context values using Object.is

Same semantics as PureComponent/shallowEqual.

* Add support for Provider and Consumer to server-side renderer

* Store providers on global stack

Rather than using a linked list stored on the context type. The global
stack can be reset in case of an interruption or error, whereas with the
linked list implementation, you'd need to keep track of every
context type.

* Put new context API behind a feature flag

We'll enable this in www only for now.

* Store nearest provider on context object

* Handle reentrancy in server renderer

Context stack should be per server renderer instance.

* Bailout of consumer updates using bitmask

The context type defines an optional function that compares two context
values, returning a bitfield. A consumer may specify the bits it needs
for rendering. If a provider's context changes, and the consumer's bits
do not intersect with the changed bits, we can skip the consumer.

This is similar to how selectors are used in Redux but fast enough to do
while scanning the tree. The only user code involved is the function
that computes the changed bits. But that's only called once per provider
update, not for every consumer.

* Store current value and changed bits on context object

There are fewer providers than consumers, so better to do this work
at the provider.

* Use maximum of 31 bits for bitmask

This is the largest integer size in V8 on 32-bit systems. Warn in
development if too large a number is used.

* ProviderComponent -> ContextProvider, ConsumerComponent -> ContextConsumer

* Inline Object.is

* Warn if multiple renderers concurrently render the same context provider

Let's see if we can get away with not supporting this for now. If it
turns out that it's needed, we can fall back to backtracking the
fiber return path.

* Nits that came up during review",Andrew Clark,2018-01-25T03:36:22Z
be51e6a41c096f33acf92a693026b80c98e7ddeb,"Opt into unsafe lifecycle warnings without async tree (#12083)

Added new StrictMode component for enabling async warnings (without enabling async rendering). This component can be used in the future to help with other warnings (eg compilation, Fabric).",Brian Vaughn,2018-01-25T01:49:43Z
431dca925a9f76b683d2ea5ec4520149ad15ff81,"Update debugRenderPhaseSideEffects behavior (#12057)

Update debugRenderPhaseSideEffects behavior

This feature flag no longer double-invokes componentWillMount, componentWillReceiveProps, componentWillUpdate, or shouldComponentUpdate.

It continues to double-invoke the constructor, render, and setState updater functions as well as the recently added, static getDerivedStateFromProps method

Tests have been updated.",Brian Vaughn,2018-01-24T23:06:25Z
d0e75dcfe2343bd04055c8cbac2bd351f2f5c16e,"Improve toWarnDev matcher DX for unexpected warnings (#12082)

Use jest-diff to format the warnings in a way that makes it easier to spot the differences.",Brian Vaughn,2018-01-23T22:46:58Z
098745b2d16b3fc6b205ba8541530aaa48eedf77,"Improved toWarnDev matcher to avoid swallowing errors (#12081)

While writing tests for unsafe async warnings, I noticed that in certain cases, errors were swallowed by the toWarnDev matcher and resulted in confusing test failures. For example, if an error prevented the code being tested from logging an expected warning- the test would fail saying that the warning hadn't been logged rather than reporting the unexpected error. I think a better approach for this is to always treat caught errors as the highest-priority reason for failing a test.

I reran all of the test cases for this matcher that I originally ran with PR #11786 and ensured they all still pass.",Brian Vaughn,2018-01-23T22:46:50Z
cba51badce7923f76770149a3248a7baab87bc92,Warn if unsafe lifecycle methods are found in an async subtree (#12060),Brian Vaughn,2018-01-23T22:01:55Z
4d6540893809cbecb5d7490a77ec7ad32e2aeeb3,Test that fabric renderer sends diffs (#12075),Sebastian Markbåge,2018-01-23T06:29:43Z
04d8fecc4ac3833aec89b10de3687a97540f1651,"Temporarily disable Danger

Its calculation is currently a bit misleading.
@orta plans to look into this but for now I'll disable.",Dan Abramov,2018-01-22T19:31:35Z
6031bea239d75e60882769f804e041f89cd22014,Add Experimental Fabric Renderer (#12069),Sebastian Markbåge,2018-01-22T17:58:35Z
4ca7855ca062d5d7dfca83c86acf46731e1e57ef,"Highlight production bundles in bold in the Danger integration comment (#12054)

* update Danger integration comments

* update Danger integration comments

* revised codes for unconditional call

* update setBoldness parameter",Claire L,2018-01-19T18:07:26Z
97e2911508a2a7af6f50cf87ae503abe39842bef,"RFC 6: Deprecate unsafe lifecycles (#12028)

* Added unsafe_* lifecycles and deprecation warnings
If the old lifecycle hooks (componentWillMount, componentWillUpdate, componentWillReceiveProps) are detected, these methods will be called and a deprecation warning will be logged. (In other words, we do not check for both the presence of the old and new lifecycles.) This commit is expected to fail tests.

* Ran lifecycle hook codemod over project
This should handle the bulk of the updates. I will manually update TypeScript and CoffeeScript tests with another commit.
The actual command run with this commit was: jscodeshift --parser=flow -t ../react-codemod/transforms/rename-unsafe-lifecycles.js ./packages/**/src/**/*.js

* Manually migrated CoffeeScript and TypeScript tests

* Added inline note to createReactClassIntegration-test
Explaining why lifecycles hooks have not been renamed in this test.

* Udated NativeMethodsMixin with new lifecycle hooks

* Added static getDerivedStateFromProps to ReactPartialRenderer
Also added a new set of tests focused on server side lifecycle hooks.

* Added getDerivedStateFromProps to shallow renderer
Also added warnings for several cases involving getDerivedStateFromProps() as well as the deprecated lifecycles.
Also added tests for the above.

* Dedupe and DEV-only deprecation warning in server renderer

* Renamed unsafe_* prefix to UNSAFE_* to be more noticeable

* Added getDerivedStateFromProps to ReactFiberClassComponent
Also updated class component and lifecyle tests to cover the added functionality.

* Warn about UNSAFE_componentWillRecieveProps misspelling

* Added tests to createReactClassIntegration for new lifecycles

* Added warning for stateless functional components with gDSFP

* Added createReactClass test for static gDSFP

* Moved lifecycle deprecation warnings behind (disabled) feature flag

Updated tests accordingly, by temporarily splitting tests that were specific to this feature-flag into their own, internal tests. This was the only way I knew of to interact with the feature flag without breaking our build/dist tests.

* Tidying up

* Tweaked warning message wording slightly
Replaced 'You may may have returned undefined.' with 'You may have returned undefined.'

* Replaced truthy partialState checks with != null

* Call getDerivedStateFromProps via .call(null) to prevent type access

* Move shallow-renderer didWarn* maps off the instance

* Only call getDerivedStateFromProps if props instance has changed

* Avoid creating new state object if not necessary

* Inject state as a param to callGetDerivedStateFromProps
This value will be either workInProgress.memoizedState (for updates) or instance.state (for initialization).

* Explicitly warn about uninitialized state before calling getDerivedStateFromProps.
And added some new tests for this change.

Also:
* Improved a couple of falsy null/undefined checks to more explicitly check for null or undefined.
* Made some small tweaks to ReactFiberClassComponent WRT when and how it reads instance.state and sets to null.

* Improved wording for deprecation lifecycle warnings

* Fix state-regression for module-pattern components
Also add support for new static getDerivedStateFromProps method",Brian Vaughn,2018-01-19T17:36:46Z
fccd11bec00f64ccd455163634739d1a4b40020b,Added 9.x to node devEngines (#12050),Brian Vaughn,2018-01-18T23:16:47Z
bd6b533c29cc617b4ddfc0a8b623e782c468cd52,Fix copy paste error for file size comparison (#12040),Esben Sparre Andreasen,2018-01-18T13:55:40Z
d3647583b3c2c1e68069f8188370b70a3f749b68,"Remove experimental RT/CS renderers (#12032)

Will follow up with adding a new one.",Sebastian Markbåge,2018-01-18T02:07:25Z
d8d797645caebebda68971c93952ee812e636b1c,"Adds Danger and a rule showing build size differences (#11865)

* Adds danger_js with an initial rule for warning about large PRs

Signed-off-by: Anandaroop Roy <roop@artsymail.com>

* [WIP] Get the before and after for the build results

* [Dev] More work on the Dangerfile

* [Danger] Split the reports into sections based on their package

* Remove the --extract-errors on the circle build

* [Danger] Improve the lookup for previous -> current build to also include the environment

* Fix rebase",Orta,2018-01-17T01:49:38Z
4f309f86df3d5eea452f7c1651bc9903cbee021a,Plug ~100 test leaks (#12020),Rick Hanlon II,2018-01-15T11:15:19Z
80d6792882e65951aac179d5cb976ad5621f4c4e,Add a workaround for incomplete Proxy polyfill issue (#12017),Dan Abramov,2018-01-14T18:39:33Z
3766a014ae7752be70ca12b287637d8960dee6c3,"Add media events back to TestUtils.Simulate (#12010)

The TestUtils lost media events when they were pulled out of the
topLevelTypes constant. This commit adds them back by concatenating
the media event keys to the list of top level types.",Nathan Hunzaker,2018-01-12T02:02:59Z
73fa26a88b68bca77fb234fc405649d0f33a3815,"Drop some top-level events from the list (#11912)

* Drop some top-level events from the list

* Put both whitelists in one file",Dan Abramov,2018-01-11T23:38:13Z
bb0bcc0541da58dce3636409b3b2f9f3439a932e,chore: remove unused expect beta dependency (#12008),Simen Bekkhus,2018-01-11T15:01:53Z
96ce986b223d5eb8dc26e8bfa44e896fc88130e8,Bump Jest to 22.0.6 (#12006),Dan Abramov,2018-01-11T14:14:02Z
5b975411a1258c2747730ee428140a2d01ea673b,"Minor typos fixed (#12005)

* commiting -> committing

* doens't -> doesn't

* interuption -> interruption

* inital -> initial

* statment -> statement",Semen Zhydenko,2018-01-11T12:24:49Z
b422fec459842a4d23f415a5e1ef2a690563835c,"Add test fixture for media event bubbling (#12004)

We want to start refactoring some of the event constants, but we don't
have a great way to confirm media events work as intended. This commit
adds a new DOM test fixture to verify that media events bubble.",Nathan Hunzaker,2018-01-11T00:53:58Z
45019963980e5175a20ba555108beabeefd52976,Use 2 workers for all tests on CI (#11990),Dan Abramov,2018-01-10T23:54:23Z
982a82884493c39f3cf322734ada175b6fb6bf22,"Add test to ensure checked inputs don't accidentally get value=""on"" (#12000)

In absence of a value, radio and checkboxes report a value of
""on"". Between 16 and 16.2, we assigned a node's value to it's current
value in order to ""dettach"" it from defaultValue. This had the
unfortunate side-effect of assigning value=""on"" to radio and
checkboxes

Related issues:
https://github.com/facebook/react/issues/11998",Nathan Hunzaker,2018-01-09T23:45:29Z
18288b22274a6c749a510107fbac25bc95013f47,"flow-coverage-report (#11545)

* Added 'flow-coverage-report' package for discussion

* Aded flow-coverage command and configuration file

* Moved FLow coverage config file to scripts/flow/coverage-config

* Moved Flow coverage config back to root as dotfile",Brian Vaughn,2018-01-09T19:14:56Z
ec67ee400c7d882ad0a285f4a5430a7caacf1764,"Upgrade to ESLint 4.1 and add no-focused-tests rule (#11977)

* Runs a lint rule on tests only that errors if it sees `fdescribe` or `fit` calls.
* Changes `file:` to `link:` for our custom, internal rules (just to simplify updating these in the future).
* Updates `eslint` from 3.10 -> 4.1 and `babel-eslint` from 7.1 -> 8.0 so that we can run this new rule only against tests.",Brian Vaughn,2018-01-09T18:55:51Z
e6e393b9c5221bfb1a5ddcc7221c42e96ab3baca,"Add warning in server renderer if class doesn't extend React.Component (#11993)

* Add warning in server renderer if class doesn't extend React.Component

In dev mode, while server rendering, a warning will be thrown if there is a class that doesn't extend React.Component.

* Use `.toWarnDev` matcher and deduplicate warnings

* Deduplicate client-side warning if class doesn't extend React.Component

* Default componentName to Unknown if null",Neil Kistner,2018-01-09T16:24:49Z
77f96ed9c389e4d07efa1da79d7d59951d37d5f1,changed {} in pck.json and split them with && in fixtures (#11982),Md Zubair Ahmed,2018-01-09T11:15:09Z
13c5e2b53112c1cd77dd52e028a4bb33dc492d1b,"Sync scheduling by default, with an async opt-in (#11771)

Removes the `useSyncScheduling` option from the HostConfig, since it's
no longer needed. Instead of globally flipping between sync and async,
our strategy will be to opt-in specific trees and subtrees.",Andrew Clark,2018-01-09T02:50:02Z
26185759e4f05025b1fdbe5e238a44aefe5669d4,"Enable coverage, set jest maxWorkers to 2 (#11983)",Rick Hanlon II,2018-01-08T02:27:24Z
08c86dd76b8cdde2805c72a7609cc0b0c264a71e,"Reconcile Call component children with `current` (#11979)

* Add test for un- and remounting children of Call

* Reconcile Call component children with `current`",Reinier Hartog,2018-01-07T20:15:05Z
65aeb701955521551848a8a9cc8e9f279ef2e73c,Deduplicate warning on invalid callback (#11833) (#11833),Shi Yan,2018-01-07T11:52:52Z
052a5f27f35f453ee33a075df81bddf9ced7300a,Use Prettier Config API (#11980),Lucas Azzola,2018-01-07T11:51:59Z
301edeaac80f57b060791c39c9201bb5400f1cf0,"Run ""yarn prettier"" on Appveyor

Ensures we don't break the command on Windows by accident.",Dan Abramov,2018-01-07T11:50:24Z
48833f698dc28a9af09819ba731a2e94d5bf9da7,"Disable coverage again (#11974)

* Disable coverage again

* Update test_entry_point.sh",Dan Abramov,2018-01-05T18:59:13Z
96d7e53e693d5676cb379876c2b1370596899f86,topLevelUpdateWarnings is only for dev mode hence not necessary to have extra dev mode check. (#11924),Haisheng Wu,2018-01-05T18:51:02Z
9d310e0bc7b9d5ce39d82536dfcb67f98462a346,ShallowRenderer should filter context by contextTypes (#11922),Toru Kobayashi,2018-01-05T18:49:57Z
39be83565c65f9c522150e52375167568a2a1459,align shallow renderer with other renderers in defaulting state to null on mount (#11965),jwbay,2018-01-05T18:44:44Z
808f31af5cc571880058281c3ba1e1c69ce8aa5c,"Reduce the handleTopLevel() event code indirection (#11915)

* Refactor event emitters to reduce indirection

* Remove unused handleTopLevel() injection

* Rename handleTopLevel() to runExtractedEventsInBatch() and remove import indirection",Dan Abramov,2018-01-05T18:37:13Z
1c7c38c82af1c4d9985c3dd1e2b1a4d996bd6f66,"Remove extra loop (?) (#11889)

* Remove extra loop (?)

* prettier",Jason Quense,2018-01-05T18:35:43Z
ce40f4eafe32236b8968a2d7793582e47877a38c,"issue 11768 - Error Rendering Inputs in Separate Window using Portals in ie11 (#11870)

Work around IE/Edge bug when rendering inputs in separate windows via portals",Md Zubair Ahmed,2018-01-05T18:32:43Z
e74f3ce5657213d08b7a4e976fe631c645acfb1c,"Support onLoad and onError on <link> (#11825)

* Support link event on Fiber component

* Update unit test

* prettier format

* Update test description

* Update ReactDOMComponent-test.js",Roderick Hsiao,2018-01-05T18:14:16Z
4e044f553f0704c0603f857165ea2acbb0940b2b,"Clarify reason for setTextContent helper (#11813)

* Update comment on setTextContent

update the comment explaining the reason for the helper

* Use `setTextContent` in ReactDOM for consistency",Jason Quense,2018-01-05T18:10:12Z
588198d2665db9c45d22687bfaaa87121674d3a2,"Updated misleading error message in production environment when adding ref to a functional component (#11761) (#11782)

* Updated misleading error message in production environment when adding ref to a functional component

* Reverted changes to codes.json

* Updated error message",Sotiris Kiritsis,2018-01-05T18:07:58Z
c94b4b8b86c72a450c74ca763a509aefd481a2b4,"Fixed potential false-positive in toWarnDev matcher (#11898)

* Warn about spying on the console

* Added suppress warning flag for spyOn(console)

* Nits

* Removed spy-on-console guard

* Fixed a potential source of false-positives in toWarnDev() matcher
Also updated (most of) ReactIncrementalErrorLogging-test.internal to use the new matcher

* Removed unused third param to spyOn

* Improved clarity of inline comments

* Removed unused normalizeCodeLocInfo() method",Brian Vaughn,2018-01-05T17:44:45Z
ede0b87cd12ef61349da93380d0300d1af83996e,"Update HTTP to HTTPs in CHANGELOG.md (#11634)

Several URL were updated to use HTTPS protocol in CHANGELOG.md.",Ronald Eddy Jr,2018-01-05T17:26:53Z
fe10b8d0cd43e4bad998884c9ca61022091f7633,Remove IE8 event.target polyfill via srcElement (#11515),Dan Abramov,2018-01-05T17:21:33Z
43af41be537da5a802c2d0c767df3e406f4a81cc,"enables ctrl + enter for keypress event on browsers other than firefox (#10514)

* enables ctrl + enter for keypress event on browsers other than firefox

* makes comment more descriptive as to affected platforms

* reverting fiber results

* Reset changes to results.json

* Remove old test file

* Add tests in the right place",Nicolas Straub,2018-01-05T16:31:25Z
8d336aa97e9b514dabe78d8192fd58ccdd99aa7a,"pass host context to finalizeInitialChildren (#11970)

* pass host context to finalizeInitialChildren

* don't retrieve context an extra time",Jason Quense,2018-01-05T15:52:19Z
30dac4e78de02fb427ee82013160ae875128d7a2,"Removes legacy TODOs in createfactory methods (#11942)

* Removes legacy TODO from createFactory()

* Removes legacy TODO from createFactoryWithValidation()

* Adds comment ""Legacy hook: remove it""

This is based on Dan Abramov's suggestion (source:
https://github.com/facebook/react/pull/11942#issuecomment-354818632)",Santosh Venkatraman,2018-01-04T19:40:02Z
1ebeb0542fd0c3741c31098a9d9a8859d9b8176a,"Move npm output from build/packages/* to build/node_modules/* (#11962)

* Move build/packages/* to build/node_modules/*

This fixes Node resolution in that folder and lets us require() packages in it in Node shell for manual testing.

* Link fixtures to packages/node_modules

This updates the location and also uses link: instead of file: to avoid Yarn caching the folder contents.",Dan Abramov,2018-01-04T19:01:31Z
d289d4b634749861199556e42174a3f4a3ce2b16,"Update to Jest 22 (#11956)

* Bump deps to Jest 22

* Prevent jsdom from logging intentionally thrown errors

This relies on our existing special field that we use to mute errors.
Perhaps, it would be better to instead rely on preventDefault() directly.
I outlined a possible strategy here: https://github.com/facebook/react/issues/11098#issuecomment-355032539

* Update snapshots

* Mock out a method called by ReactART that now throws

* Calling .click() no longer works, dispatch event instead

* Fix incorrect SVG element creation in test

* Render SVG elements inside <svg> to avoid extra warnings

* Fix range input test to use numeric value

* Fix creating SVG element in test

* Replace brittle test that relied on jsdom behavior

The test passed in jsdom due to its implementation details.

The original intention was to test the mutation method, but it was removed a while ago.

Following @nhunzaker's suggestion, I moved the tests to ReactDOMInput and adjusted them to not rely on implementation details.

* Add a workaround for the expected extra client-side warning

This is a bit ugly but it's just two places. I think we can live with this.

* Only warn once for mismatches caused by bad attribute casing

We used to warn both about bad casing and about a mismatch.
The mismatch warning was a bit confusing. We didn't know we warned twice because jsdom didn't faithfully emulate SVG.

This changes the behavior to only leave the warning about bad casing if that's what caused the mismatch.
It also adjusts the test to have an expectation that matches the real world behavior.

* Add an expected warning per comment in the same test",Dan Abramov,2018-01-04T18:57:30Z
4d37040cbf914c9d3c282e8edd67fa97a3c31178,Removed Presto check (#11921),Sotiris Kiritsis,2018-01-04T13:28:42Z
bb881f2de794a5d4990741af5fb1397b0f3003e8,Updated toWarnDev matcher so that ReactFiberScheduler won't suppress its errors (#11958),Brian Vaughn,2018-01-03T23:23:05Z
9f848f8ebec30b3aaa4844ecaef83b014359c5e3,"Update additional tests to use .toWarnDev() matcher (#11957)

* Migrated several additional tests to use new .toWarnDev() matcher

* Migrated ReactDOMComponent-test to use .toWarnDev() matcher

Note this test previous had some hacky logic to verify errors were reported against unique line numbers. Since the new matcher doesn't suppor this, I replaced this check with an equivalent (I think) comparison of unique DOM elements (eg div -> span)

* Updated several additional tests to use the new .toWarnDev() matcher

* Updated many more tests to use .toWarnDev()

* Updated several additional tests to use .toWarnDev() matcher

* Updated ReactElementValidator to distinguish between Array and Object in its warning. Also updated its test to use .toWarnDev() matcher.

* Updated a couple of additional tests

* Removed unused normalizeCodeLocInfo() methods",Brian Vaughn,2018-01-03T21:55:37Z
a442d9bc082878ccf66872b1eeed3465927801b6,"Update additional tests to use .toWarnDev() matcher (#11952)

* Migrated several additional tests to use new .toWarnDev() matcher

* Migrated ReactDOMComponent-test to use .toWarnDev() matcher

Note this test previous had some hacky logic to verify errors were reported against unique line numbers. Since the new matcher doesn't suppor this, I replaced this check with an equivalent (I think) comparison of unique DOM elements (eg div -> span)

* Updated several additional tests to use the new .toWarnDev() matcher

* Updated many more tests to use .toWarnDev()",Brian Vaughn,2018-01-03T18:08:24Z
2517be99ac1bbe0562b68f9dfc0e05a787665470,Reword issue template,Dan Abramov,2018-01-03T15:58:07Z
dd3e34e8328b0281186ed74376a3dda8be9bffb6,Fix links in README.md (#11954),"Taehwan, No",2018-01-03T14:02:33Z
b5334a44e99c32ca26f7d65ca8312e13f7b7f4b7,"toWarnInDev matcher; throw on unexpected console.error (#11786)

* Added toWarnInDev matcher and connected to 1 test
* Added .toLowPriorityWarnDev() matcher
* Reply Jest spy with custom spy. Unregister spy after toWarnDev() so unexpected console.error/warn calls will fail tests.
* console warn/error throws immediately in tests by default (if not spied on)
* Pass-thru console message before erroring to make it easier to identify
* More robustly handle unexpected warnings within try/catch
* Error message includes remaining expected warnings in addition to unexpected warning",Brian Vaughn,2018-01-02T19:06:41Z
22e2bf7684d0a55b520f7334feb716d0cbee784d,Return event name from getVendorPrefixedEventName (#11951),Brandon Dail,2018-01-02T18:46:51Z
0deea326674077598e351803d7a204a1c744a578,"Run some tests in Node environment (#11948)

* Run some tests in Node environment

* Separate SSR tests that require DOM

This allow us to run others with Node environment.",Dan Abramov,2018-01-02T18:42:18Z
